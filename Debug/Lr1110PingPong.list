
Lr1110PingPong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009234  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d0c  08009374  08009374  00019374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a080  0800a080  0001a080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a088  0800a088  0001a088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a08c  0800a08c  0001a08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  20000004  0800a090  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000090  0800a11c  00020090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003a  2000012c  0800a1b5  0002012c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 0000000e  20000168  0800a1ef  00020168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 00000088  20000178  0800a1fd  00020178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000046c  20000200  0800a285  00020200  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000066c  0800a285  0002066c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 17 .debug_info   00067687  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000b51f  00000000  00000000  000878b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    00022710  00000000  00000000  00092dd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 000024d8  00000000  00000000  000b54e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00002ce0  00000000  00000000  000b79c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  00011536  00000000  00000000  000ba6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   000446d9  00000000  00000000  000cbbd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    000db43c  00000000  00000000  001102af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      00000053  00000000  00000000  001eb6eb  2**0
                  CONTENTS, READONLY
 26 .debug_frame  000072ec  00000000  00000000  001eb740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000200 	.word	0x20000200
 800015c:	00000000 	.word	0x00000000
 8000160:	0800935c 	.word	0x0800935c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000204 	.word	0x20000204
 800017c:	0800935c 	.word	0x0800935c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <BoardCriticalSectionBegin>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000518:	f3ef 8310 	mrs	r3, PRIMASK
uint8_t Uart2TxBuffer[UART2_FIFO_TX_SIZE];
uint8_t Uart2RxBuffer[UART2_FIFO_RX_SIZE];

void BoardCriticalSectionBegin( uint32_t *mask )
{
    *mask = __get_PRIMASK( );
 800051c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800051e:	b672      	cpsid	i
    __disable_irq( );
}
 8000520:	4770      	bx	lr

08000522 <BoardCriticalSectionEnd>:
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000522:	6803      	ldr	r3, [r0, #0]
 8000524:	f383 8810 	msr	PRIMASK, r3

void BoardCriticalSectionEnd( uint32_t *mask )
{
    __set_PRIMASK( *mask );
}
 8000528:	4770      	bx	lr

0800052a <EXTI0_IRQHandler>:
#endif
    }
}

void EXTI0_IRQHandler( void )
{
 800052a:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_0 );
 800052c:	2001      	movs	r0, #1
 800052e:	f002 fb27 	bl	8002b80 <HAL_GPIO_EXTI_IRQHandler>
}
 8000532:	bd08      	pop	{r3, pc}

08000534 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler( void )
{
 8000534:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_1 );
 8000536:	2002      	movs	r0, #2
 8000538:	f002 fb22 	bl	8002b80 <HAL_GPIO_EXTI_IRQHandler>
}
 800053c:	bd08      	pop	{r3, pc}

0800053e <EXTI2_IRQHandler>:

void EXTI2_IRQHandler( void )
{
 800053e:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_2 );
 8000540:	2004      	movs	r0, #4
 8000542:	f002 fb1d 	bl	8002b80 <HAL_GPIO_EXTI_IRQHandler>
}
 8000546:	bd08      	pop	{r3, pc}

08000548 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler( void )
{
 8000548:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_3 );
 800054a:	2008      	movs	r0, #8
 800054c:	f002 fb18 	bl	8002b80 <HAL_GPIO_EXTI_IRQHandler>
}
 8000550:	bd08      	pop	{r3, pc}

08000552 <EXTI9_5_IRQHandler>:
//{
//    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_4 );
//}

void EXTI9_5_IRQHandler( void )
{
 8000552:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_5 );
 8000554:	2020      	movs	r0, #32
 8000556:	f002 fb13 	bl	8002b80 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_6 );
 800055a:	2040      	movs	r0, #64	; 0x40
 800055c:	f002 fb10 	bl	8002b80 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 8000560:	2080      	movs	r0, #128	; 0x80
 8000562:	f002 fb0d 	bl	8002b80 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_8 );
 8000566:	f44f 7080 	mov.w	r0, #256	; 0x100
 800056a:	f002 fb09 	bl	8002b80 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
 800056e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000572:	f002 fb05 	bl	8002b80 <HAL_GPIO_EXTI_IRQHandler>
}
 8000576:	bd08      	pop	{r3, pc}

08000578 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler( void )
{
 8000578:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_10 );
 800057a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800057e:	f002 faff 	bl	8002b80 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_11 );
 8000582:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000586:	f002 fafb 	bl	8002b80 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_12 );
 800058a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800058e:	f002 faf7 	bl	8002b80 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_13 );
 8000592:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000596:	f002 faf3 	bl	8002b80 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_14 );
 800059a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800059e:	f002 faef 	bl	8002b80 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
 80005a2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80005a6:	f002 faeb 	bl	8002b80 <HAL_GPIO_EXTI_IRQHandler>
}
 80005aa:	bd08      	pop	{r3, pc}

080005ac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback( uint16_t gpioPin )
{
 80005ac:	b508      	push	{r3, lr}
    uint8_t callbackIndex = 0;

    if( gpioPin > 0 )
 80005ae:	2801      	cmp	r0, #1
 80005b0:	d906      	bls.n	80005c0 <HAL_GPIO_EXTI_Callback+0x14>
    uint8_t callbackIndex = 0;
 80005b2:	2300      	movs	r3, #0
    {
        while( gpioPin != 0x01 )
        {
            gpioPin = gpioPin >> 1;
 80005b4:	0840      	lsrs	r0, r0, #1
            callbackIndex++;
 80005b6:	3301      	adds	r3, #1
 80005b8:	b2db      	uxtb	r3, r3
        while( gpioPin != 0x01 )
 80005ba:	2801      	cmp	r0, #1
 80005bc:	d1fa      	bne.n	80005b4 <HAL_GPIO_EXTI_Callback+0x8>
 80005be:	e000      	b.n	80005c2 <HAL_GPIO_EXTI_Callback+0x16>
    uint8_t callbackIndex = 0;
 80005c0:	2300      	movs	r3, #0
        }
    }

    if( ( GpioIrq[callbackIndex] != NULL ) && ( GpioIrq[callbackIndex]->IrqHandler != NULL ) )
 80005c2:	4a04      	ldr	r2, [pc, #16]	; (80005d4 <HAL_GPIO_EXTI_Callback+0x28>)
 80005c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c8:	b11b      	cbz	r3, 80005d2 <HAL_GPIO_EXTI_Callback+0x26>
 80005ca:	691a      	ldr	r2, [r3, #16]
 80005cc:	b10a      	cbz	r2, 80005d2 <HAL_GPIO_EXTI_Callback+0x26>
    {
        GpioIrq[callbackIndex]->IrqHandler( GpioIrq[callbackIndex]->Context );
 80005ce:	68d8      	ldr	r0, [r3, #12]
 80005d0:	4790      	blx	r2
    }
}
 80005d2:	bd08      	pop	{r3, pc}
 80005d4:	2000021c 	.word	0x2000021c

080005d8 <LpmSetStopMode>:
    CRITICAL_SECTION_END( );
    return;
}

void LpmSetStopMode( LpmId_t id, LpmSetMode_t mode )
{
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	b083      	sub	sp, #12
 80005dc:	4605      	mov	r5, r0
 80005de:	460c      	mov	r4, r1
    CRITICAL_SECTION_BEGIN( );
 80005e0:	a801      	add	r0, sp, #4
 80005e2:	f7ff ff99 	bl	8000518 <BoardCriticalSectionBegin>

    switch( mode )
 80005e6:	b154      	cbz	r4, 80005fe <LpmSetStopMode+0x26>
 80005e8:	2c01      	cmp	r4, #1
 80005ea:	d103      	bne.n	80005f4 <LpmSetStopMode+0x1c>
    {
        case LPM_DISABLE:
        {
            StopModeDisable |= ( uint32_t )id;
 80005ec:	4b07      	ldr	r3, [pc, #28]	; (800060c <LpmSetStopMode+0x34>)
 80005ee:	6818      	ldr	r0, [r3, #0]
 80005f0:	4328      	orrs	r0, r5
 80005f2:	6018      	str	r0, [r3, #0]
        {
            break;
        }
    }

    CRITICAL_SECTION_END( );
 80005f4:	a801      	add	r0, sp, #4
 80005f6:	f7ff ff94 	bl	8000522 <BoardCriticalSectionEnd>
    return;
}
 80005fa:	b003      	add	sp, #12
 80005fc:	bd30      	pop	{r4, r5, pc}
            StopModeDisable &= ~( uint32_t )id;
 80005fe:	4b03      	ldr	r3, [pc, #12]	; (800060c <LpmSetStopMode+0x34>)
 8000600:	6818      	ldr	r0, [r3, #0]
 8000602:	ea20 0005 	bic.w	r0, r0, r5
 8000606:	6018      	str	r0, [r3, #0]
            break;
 8000608:	e7f4      	b.n	80005f4 <LpmSetStopMode+0x1c>
 800060a:	bf00      	nop
 800060c:	2000025c 	.word	0x2000025c

08000610 <RtcGetCalendarValue>:

  return( ( uint32_t )( calendarValue - RtcTimerContext.Time ) );
}

static uint64_t RtcGetCalendarValue( RTC_DateTypeDef* date, RTC_TimeTypeDef* time )
{
 8000610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000614:	4681      	mov	r9, r0
 8000616:	4688      	mov	r8, r1
    uint32_t seconds;

    // Make sure it is correct due to asynchronus nature of RTC
    do
    {
        firstRead = RTC->SSR;
 8000618:	4e28      	ldr	r6, [pc, #160]	; (80006bc <RtcGetCalendarValue+0xac>)
        HAL_RTC_GetDate( &RtcHandle, date, RTC_FORMAT_BIN );
 800061a:	4d29      	ldr	r5, [pc, #164]	; (80006c0 <RtcGetCalendarValue+0xb0>)
 800061c:	2400      	movs	r4, #0
        firstRead = RTC->SSR;
 800061e:	6ab7      	ldr	r7, [r6, #40]	; 0x28
        HAL_RTC_GetDate( &RtcHandle, date, RTC_FORMAT_BIN );
 8000620:	4622      	mov	r2, r4
 8000622:	4649      	mov	r1, r9
 8000624:	4628      	mov	r0, r5
 8000626:	f004 f82b 	bl	8004680 <HAL_RTC_GetDate>
        HAL_RTC_GetTime( &RtcHandle, time, RTC_FORMAT_BIN );
 800062a:	4622      	mov	r2, r4
 800062c:	4641      	mov	r1, r8
 800062e:	4628      	mov	r0, r5
 8000630:	f003 ff08 	bl	8004444 <HAL_RTC_GetTime>
    }while( firstRead != RTC->SSR );
 8000634:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8000636:	42bb      	cmp	r3, r7
 8000638:	d1f1      	bne.n	800061e <RtcGetCalendarValue+0xe>

    // Calculte amount of elapsed days since 01/01/2000
    seconds = DIVC( ( DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR ) * date->Year , 4 );
 800063a:	f899 2003 	ldrb.w	r2, [r9, #3]
 800063e:	f240 53b5 	movw	r3, #1461	; 0x5b5
 8000642:	fb03 f302 	mul.w	r3, r3, r2
 8000646:	1cdc      	adds	r4, r3, #3

    correction = ( ( date->Year % 4 ) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM;
 8000648:	f012 0f03 	tst.w	r2, #3
 800064c:	4a1d      	ldr	r2, [pc, #116]	; (80006c4 <RtcGetCalendarValue+0xb4>)
 800064e:	481e      	ldr	r0, [pc, #120]	; (80006c8 <RtcGetCalendarValue+0xb8>)
 8000650:	bf08      	it	eq
 8000652:	4610      	moveq	r0, r2

    seconds += ( DIVC( ( date->Month-1 ) * ( 30 + 31 ), 2 ) - ( ( ( correction >> ( ( date->Month - 1 ) * 2 ) ) & 0x03 ) ) );
 8000654:	f899 2001 	ldrb.w	r2, [r9, #1]
 8000658:	3a01      	subs	r2, #1
 800065a:	ebc2 1302 	rsb	r3, r2, r2, lsl #4
 800065e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000662:	3301      	adds	r3, #1
 8000664:	eb03 71d3 	add.w	r1, r3, r3, lsr #31

    seconds += ( date->Date -1 );
 8000668:	f899 3002 	ldrb.w	r3, [r9, #2]
 800066c:	3b01      	subs	r3, #1
 800066e:	eb03 0394 	add.w	r3, r3, r4, lsr #2
 8000672:	eb03 0361 	add.w	r3, r3, r1, asr #1
    seconds += ( DIVC( ( date->Month-1 ) * ( 30 + 31 ), 2 ) - ( ( ( correction >> ( ( date->Month - 1 ) * 2 ) ) & 0x03 ) ) );
 8000676:	0052      	lsls	r2, r2, #1
 8000678:	fa20 f202 	lsr.w	r2, r0, r2
 800067c:	f002 0203 	and.w	r2, r2, #3
    seconds += ( date->Date -1 );
 8000680:	1a9b      	subs	r3, r3, r2
    // Convert from days to seconds
    seconds *= SECONDS_IN_1DAY;

    seconds += ( ( uint32_t )time->Seconds + 
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
                 ( ( uint32_t )time->Hours * SECONDS_IN_1HOUR ) ) ;
 8000682:	f898 1000 	ldrb.w	r1, [r8]
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
 8000686:	f898 2001 	ldrb.w	r2, [r8, #1]
 800068a:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800068e:	0092      	lsls	r2, r2, #2
 8000690:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8000694:	fb00 2201 	mla	r2, r0, r1, r2
    seconds += ( ( uint32_t )time->Seconds + 
 8000698:	f898 1002 	ldrb.w	r1, [r8, #2]
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
 800069c:	440a      	add	r2, r1
    seconds += ( ( uint32_t )time->Seconds + 
 800069e:	490b      	ldr	r1, [pc, #44]	; (80006cc <RtcGetCalendarValue+0xbc>)
 80006a0:	fb01 2303 	mla	r3, r1, r3, r2

    calendarValue = ( ( ( uint64_t )seconds ) << N_PREDIV_S ) + ( PREDIV_S - time->SubSeconds );
 80006a4:	0d99      	lsrs	r1, r3, #22
 80006a6:	0298      	lsls	r0, r3, #10
 80006a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80006ac:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 80006b0:	3303      	adds	r3, #3

    return( calendarValue );
}
 80006b2:	18c0      	adds	r0, r0, r3
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006bc:	40002800 	.word	0x40002800
 80006c0:	20000288 	.word	0x20000288
 80006c4:	00445550 	.word	0x00445550
 80006c8:	0099aaa0 	.word	0x0099aaa0
 80006cc:	00015180 	.word	0x00015180

080006d0 <RtcSetTimerContext>:
{
 80006d0:	b510      	push	{r4, lr}
    RtcTimerContext.Time = ( uint32_t )RtcGetCalendarValue( &RtcTimerContext.CalendarDate, &RtcTimerContext.CalendarTime );
 80006d2:	4c04      	ldr	r4, [pc, #16]	; (80006e4 <RtcSetTimerContext+0x14>)
 80006d4:	1d21      	adds	r1, r4, #4
 80006d6:	f104 0018 	add.w	r0, r4, #24
 80006da:	f7ff ff99 	bl	8000610 <RtcGetCalendarValue>
 80006de:	6020      	str	r0, [r4, #0]
}
 80006e0:	bd10      	pop	{r4, pc}
 80006e2:	bf00      	nop
 80006e4:	200002ac 	.word	0x200002ac

080006e8 <RtcGetTimerContext>:
}
 80006e8:	4b01      	ldr	r3, [pc, #4]	; (80006f0 <RtcGetTimerContext+0x8>)
 80006ea:	6818      	ldr	r0, [r3, #0]
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	200002ac 	.word	0x200002ac

080006f4 <RtcGetMinimumTimeout>:
}
 80006f4:	2003      	movs	r0, #3
 80006f6:	4770      	bx	lr

080006f8 <RtcStopAlarm>:
{
 80006f8:	b510      	push	{r4, lr}
    HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 80006fa:	4c08      	ldr	r4, [pc, #32]	; (800071c <RtcStopAlarm+0x24>)
 80006fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000700:	4620      	mov	r0, r4
 8000702:	f003 fbd9 	bl	8003eb8 <HAL_RTC_DeactivateAlarm>
    __HAL_RTC_ALARM_CLEAR_FLAG( &RtcHandle, RTC_FLAG_ALRAF );
 8000706:	6822      	ldr	r2, [r4, #0]
 8000708:	68d3      	ldr	r3, [r2, #12]
 800070a:	b2db      	uxtb	r3, r3
 800070c:	f463 73c0 	orn	r3, r3, #384	; 0x180
 8000710:	60d3      	str	r3, [r2, #12]
    __HAL_RTC_ALARM_EXTI_CLEAR_FLAG( );
 8000712:	4b03      	ldr	r3, [pc, #12]	; (8000720 <RtcStopAlarm+0x28>)
 8000714:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000718:	60da      	str	r2, [r3, #12]
}
 800071a:	bd10      	pop	{r4, pc}
 800071c:	20000288 	.word	0x20000288
 8000720:	58000800 	.word	0x58000800

08000724 <RtcStartAlarm>:
{
 8000724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000728:	b083      	sub	sp, #12
 800072a:	4680      	mov	r8, r0
    RTC_TimeTypeDef time = RtcTimerContext.CalendarTime;
 800072c:	4b50      	ldr	r3, [pc, #320]	; (8000870 <RtcStartAlarm+0x14c>)
 800072e:	791c      	ldrb	r4, [r3, #4]
 8000730:	795a      	ldrb	r2, [r3, #5]
 8000732:	9201      	str	r2, [sp, #4]
 8000734:	799e      	ldrb	r6, [r3, #6]
 8000736:	f893 9007 	ldrb.w	r9, [r3, #7]
 800073a:	689f      	ldr	r7, [r3, #8]
    RTC_DateTypeDef date = RtcTimerContext.CalendarDate;
 800073c:	f893 a019 	ldrb.w	sl, [r3, #25]
 8000740:	7e9d      	ldrb	r5, [r3, #26]
 8000742:	f893 b01b 	ldrb.w	fp, [r3, #27]
    RtcStopAlarm( );
 8000746:	f7ff ffd7 	bl	80006f8 <RtcStopAlarm>
    rtcAlarmSubSeconds =  PREDIV_S - time.SubSeconds;
 800074a:	f5c7 777f 	rsb	r7, r7, #1020	; 0x3fc
 800074e:	3703      	adds	r7, #3
    rtcAlarmSubSeconds += ( timeout & PREDIV_S );
 8000750:	f3c8 0309 	ubfx	r3, r8, #0, #10
 8000754:	fa13 f787 	uxtah	r7, r3, r7
 8000758:	b2bf      	uxth	r7, r7
    timeout >>= N_PREDIV_S;
 800075a:	ea4f 2398 	mov.w	r3, r8, lsr #10
    rtcAlarmDays =  date.Date;
 800075e:	b2ad      	uxth	r5, r5
    while( timeout >= TM_SECONDS_IN_1DAY )
 8000760:	4a44      	ldr	r2, [pc, #272]	; (8000874 <RtcStartAlarm+0x150>)
 8000762:	ebb2 2f98 	cmp.w	r2, r8, lsr #10
 8000766:	d207      	bcs.n	8000778 <RtcStartAlarm+0x54>
        timeout -= TM_SECONDS_IN_1DAY;
 8000768:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 800076c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
        rtcAlarmDays++;
 8000770:	3501      	adds	r5, #1
 8000772:	b2ad      	uxth	r5, r5
    while( timeout >= TM_SECONDS_IN_1DAY )
 8000774:	4293      	cmp	r3, r2
 8000776:	d8f7      	bhi.n	8000768 <RtcStartAlarm+0x44>
    rtcAlarmHours = time.Hours;
 8000778:	b2a4      	uxth	r4, r4
    while( timeout >= TM_SECONDS_IN_1HOUR )
 800077a:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800077e:	d306      	bcc.n	800078e <RtcStartAlarm+0x6a>
        timeout -= TM_SECONDS_IN_1HOUR;
 8000780:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
        rtcAlarmHours++;
 8000784:	3401      	adds	r4, #1
 8000786:	b2a4      	uxth	r4, r4
    while( timeout >= TM_SECONDS_IN_1HOUR )
 8000788:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800078c:	d2f8      	bcs.n	8000780 <RtcStartAlarm+0x5c>
    rtcAlarmMinutes = time.Minutes;
 800078e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    while( timeout >= TM_SECONDS_IN_1MINUTE )
 8000792:	2b3b      	cmp	r3, #59	; 0x3b
 8000794:	d904      	bls.n	80007a0 <RtcStartAlarm+0x7c>
        timeout -= TM_SECONDS_IN_1MINUTE;
 8000796:	3b3c      	subs	r3, #60	; 0x3c
        rtcAlarmMinutes++;
 8000798:	3201      	adds	r2, #1
 800079a:	b292      	uxth	r2, r2
    while( timeout >= TM_SECONDS_IN_1MINUTE )
 800079c:	2b3b      	cmp	r3, #59	; 0x3b
 800079e:	d8fa      	bhi.n	8000796 <RtcStartAlarm+0x72>
    rtcAlarmSeconds =  time.Seconds + timeout;
 80007a0:	441e      	add	r6, r3
 80007a2:	b2b6      	uxth	r6, r6
    while( rtcAlarmSubSeconds >= ( PREDIV_S + 1 ) )
 80007a4:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80007a8:	d353      	bcc.n	8000852 <RtcStartAlarm+0x12e>
    rtcAlarmSubSeconds += ( timeout & PREDIV_S );
 80007aa:	463b      	mov	r3, r7
        rtcAlarmSubSeconds -= ( PREDIV_S + 1 );
 80007ac:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80007b0:	b29b      	uxth	r3, r3
    while( rtcAlarmSubSeconds >= ( PREDIV_S + 1 ) )
 80007b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007b6:	d2f9      	bcs.n	80007ac <RtcStartAlarm+0x88>
 80007b8:	f3c7 0009 	ubfx	r0, r7, #0, #10
 80007bc:	f5a7 6380 	sub.w	r3, r7, #1024	; 0x400
 80007c0:	f3c3 2385 	ubfx	r3, r3, #10, #6
 80007c4:	3301      	adds	r3, #1
 80007c6:	441e      	add	r6, r3
 80007c8:	b2b6      	uxth	r6, r6
    while( rtcAlarmSeconds >= TM_SECONDS_IN_1MINUTE )
 80007ca:	2e3b      	cmp	r6, #59	; 0x3b
 80007cc:	d905      	bls.n	80007da <RtcStartAlarm+0xb6>
        rtcAlarmSeconds -= TM_SECONDS_IN_1MINUTE;
 80007ce:	3e3c      	subs	r6, #60	; 0x3c
 80007d0:	b2b6      	uxth	r6, r6
        rtcAlarmMinutes++;
 80007d2:	3201      	adds	r2, #1
 80007d4:	b292      	uxth	r2, r2
    while( rtcAlarmSeconds >= TM_SECONDS_IN_1MINUTE )
 80007d6:	2e3b      	cmp	r6, #59	; 0x3b
 80007d8:	d8f9      	bhi.n	80007ce <RtcStartAlarm+0xaa>
    while( rtcAlarmMinutes >= TM_MINUTES_IN_1HOUR )
 80007da:	2a3b      	cmp	r2, #59	; 0x3b
 80007dc:	d905      	bls.n	80007ea <RtcStartAlarm+0xc6>
        rtcAlarmMinutes -= TM_MINUTES_IN_1HOUR;
 80007de:	3a3c      	subs	r2, #60	; 0x3c
 80007e0:	b292      	uxth	r2, r2
        rtcAlarmHours++;
 80007e2:	3401      	adds	r4, #1
 80007e4:	b2a4      	uxth	r4, r4
    while( rtcAlarmMinutes >= TM_MINUTES_IN_1HOUR )
 80007e6:	2a3b      	cmp	r2, #59	; 0x3b
 80007e8:	d8f9      	bhi.n	80007de <RtcStartAlarm+0xba>
    while( rtcAlarmHours >= TM_HOURS_IN_1DAY )
 80007ea:	2c17      	cmp	r4, #23
 80007ec:	d905      	bls.n	80007fa <RtcStartAlarm+0xd6>
        rtcAlarmHours -= TM_HOURS_IN_1DAY;
 80007ee:	3c18      	subs	r4, #24
 80007f0:	b2a4      	uxth	r4, r4
        rtcAlarmDays++;
 80007f2:	3501      	adds	r5, #1
 80007f4:	b2ad      	uxth	r5, r5
    while( rtcAlarmHours >= TM_HOURS_IN_1DAY )
 80007f6:	2c17      	cmp	r4, #23
 80007f8:	d8f9      	bhi.n	80007ee <RtcStartAlarm+0xca>
    if( date.Year % 4 == 0 ) 
 80007fa:	f01b 0f03 	tst.w	fp, #3
 80007fe:	d12a      	bne.n	8000856 <RtcStartAlarm+0x132>
        if( rtcAlarmDays > DaysInMonthLeapYear[date.Month - 1] )
 8000800:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <RtcStartAlarm+0x154>)
 8000802:	449a      	add	sl, r3
 8000804:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 8000808:	b299      	uxth	r1, r3
 800080a:	42a9      	cmp	r1, r5
 800080c:	d204      	bcs.n	8000818 <RtcStartAlarm+0xf4>
            rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[date.Month - 1];
 800080e:	fb95 f1f3 	sdiv	r1, r5, r3
 8000812:	fb03 5511 	mls	r5, r3, r1, r5
 8000816:	b2ad      	uxth	r5, r5
    RtcAlarm.AlarmTime.SubSeconds     = PREDIV_S - rtcAlarmSubSeconds;
 8000818:	4918      	ldr	r1, [pc, #96]	; (800087c <RtcStartAlarm+0x158>)
 800081a:	f5c0 707f 	rsb	r0, r0, #1020	; 0x3fc
 800081e:	3003      	adds	r0, #3
 8000820:	6048      	str	r0, [r1, #4]
    RtcAlarm.AlarmSubSecondMask       = ALARM_SUBSECOND_MASK; 
 8000822:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 8000826:	618b      	str	r3, [r1, #24]
    RtcAlarm.AlarmTime.Seconds        = rtcAlarmSeconds;
 8000828:	708e      	strb	r6, [r1, #2]
    RtcAlarm.AlarmTime.Minutes        = rtcAlarmMinutes;
 800082a:	704a      	strb	r2, [r1, #1]
    RtcAlarm.AlarmTime.Hours          = rtcAlarmHours;
 800082c:	700c      	strb	r4, [r1, #0]
    RtcAlarm.AlarmDateWeekDay         = ( uint8_t )rtcAlarmDays;
 800082e:	f881 5020 	strb.w	r5, [r1, #32]
    RtcAlarm.AlarmTime.TimeFormat     = time.TimeFormat;
 8000832:	f881 9003 	strb.w	r9, [r1, #3]
    RtcAlarm.AlarmDateWeekDaySel      = RTC_ALARMDATEWEEKDAYSEL_DATE; 
 8000836:	2200      	movs	r2, #0
 8000838:	61ca      	str	r2, [r1, #28]
    RtcAlarm.AlarmMask                = RTC_ALARMMASK_NONE;
 800083a:	614a      	str	r2, [r1, #20]
    RtcAlarm.Alarm                    = RTC_ALARM_A;
 800083c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000840:	624b      	str	r3, [r1, #36]	; 0x24
    RtcAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000842:	60ca      	str	r2, [r1, #12]
    RtcAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000844:	610a      	str	r2, [r1, #16]
    HAL_RTC_SetAlarm_IT( &RtcHandle, &RtcAlarm, RTC_FORMAT_BIN );
 8000846:	480e      	ldr	r0, [pc, #56]	; (8000880 <RtcStartAlarm+0x15c>)
 8000848:	f003 ff44 	bl	80046d4 <HAL_RTC_SetAlarm_IT>
}
 800084c:	b003      	add	sp, #12
 800084e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rtcAlarmSubSeconds += ( timeout & PREDIV_S );
 8000852:	4638      	mov	r0, r7
 8000854:	e7b9      	b.n	80007ca <RtcStartAlarm+0xa6>
        if( rtcAlarmDays > DaysInMonth[date.Month - 1] )
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <RtcStartAlarm+0x160>)
 8000858:	449a      	add	sl, r3
 800085a:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 800085e:	b299      	uxth	r1, r3
 8000860:	42a9      	cmp	r1, r5
 8000862:	d2d9      	bcs.n	8000818 <RtcStartAlarm+0xf4>
            rtcAlarmDays = rtcAlarmDays % DaysInMonth[date.Month - 1];
 8000864:	fb95 f1f3 	sdiv	r1, r5, r3
 8000868:	fb03 5511 	mls	r5, r3, r1, r5
 800086c:	b2ad      	uxth	r5, r5
 800086e:	e7d3      	b.n	8000818 <RtcStartAlarm+0xf4>
 8000870:	200002ac 	.word	0x200002ac
 8000874:	0001517f 	.word	0x0001517f
 8000878:	080093f0 	.word	0x080093f0
 800087c:	20000260 	.word	0x20000260
 8000880:	20000288 	.word	0x20000288
 8000884:	080093e4 	.word	0x080093e4

08000888 <RtcGetTimerElapsedTime>:
{
 8000888:	b500      	push	{lr}
 800088a:	b087      	sub	sp, #28
  uint32_t calendarValue = ( uint32_t )RtcGetCalendarValue( &date, &time );
 800088c:	a901      	add	r1, sp, #4
 800088e:	4668      	mov	r0, sp
 8000890:	f7ff febe 	bl	8000610 <RtcGetCalendarValue>
  return( ( uint32_t )( calendarValue - RtcTimerContext.Time ) );
 8000894:	4b02      	ldr	r3, [pc, #8]	; (80008a0 <RtcGetTimerElapsedTime+0x18>)
 8000896:	681b      	ldr	r3, [r3, #0]
}
 8000898:	1ac0      	subs	r0, r0, r3
 800089a:	b007      	add	sp, #28
 800089c:	f85d fb04 	ldr.w	pc, [sp], #4
 80008a0:	200002ac 	.word	0x200002ac

080008a4 <RtcSetAlarm>:
{
 80008a4:	b510      	push	{r4, lr}
 80008a6:	4604      	mov	r4, r0
    if( ( int64_t )MIN_ALARM_DELAY < ( int64_t )( timeout - RtcGetTimerElapsedTime( ) ) )
 80008a8:	f7ff ffee 	bl	8000888 <RtcGetTimerElapsedTime>
 80008ac:	1a20      	subs	r0, r4, r0
 80008ae:	2803      	cmp	r0, #3
        LpmSetStopMode( LPM_RTC_ID, LPM_ENABLE );
 80008b0:	bf8c      	ite	hi
 80008b2:	2100      	movhi	r1, #0
        LpmSetStopMode( LPM_RTC_ID, LPM_DISABLE );
 80008b4:	2101      	movls	r1, #1
 80008b6:	2004      	movs	r0, #4
 80008b8:	f7ff fe8e 	bl	80005d8 <LpmSetStopMode>
    RtcStartAlarm( timeout );
 80008bc:	4620      	mov	r0, r4
 80008be:	f7ff ff31 	bl	8000724 <RtcStartAlarm>
}
 80008c2:	bd10      	pop	{r4, pc}

080008c4 <HAL_RTC_AlarmAEventCallback>:
 * \brief  Alarm A callback.
 *
 * \param [IN] hrtc RTC handle
 */
void HAL_RTC_AlarmAEventCallback( RTC_HandleTypeDef *hrtc )
{
 80008c4:	b508      	push	{r3, lr}
    TimerIrqHandler( );
 80008c6:	f000 f81d 	bl	8000904 <TimerIrqHandler>
}
 80008ca:	bd08      	pop	{r3, pc}

080008cc <myRadioOnDioIrq>:
    IrqFired = true;
}

void myRadioOnDioIrq(void)
{
	IrqFired = true;
 80008cc:	4b01      	ldr	r3, [pc, #4]	; (80008d4 <myRadioOnDioIrq+0x8>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	701a      	strb	r2, [r3, #0]
}
 80008d2:	4770      	bx	lr
 80008d4:	200002c8 	.word	0x200002c8

080008d8 <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 80008d8:	b570      	push	{r4, r5, r6, lr}
 80008da:	4604      	mov	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
 80008dc:	f7ff ff0a 	bl	80006f4 <RtcGetMinimumTimeout>
 80008e0:	4605      	mov	r5, r0
    obj->IsNext2Expire = true;
 80008e2:	2301      	movs	r3, #1
 80008e4:	7263      	strb	r3, [r4, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 80008e6:	6826      	ldr	r6, [r4, #0]
 80008e8:	f7ff ffce 	bl	8000888 <RtcGetTimerElapsedTime>
 80008ec:	4428      	add	r0, r5
 80008ee:	4286      	cmp	r6, r0
 80008f0:	d303      	bcc.n	80008fa <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
    }
    RtcSetAlarm( obj->Timestamp );
 80008f2:	6820      	ldr	r0, [r4, #0]
 80008f4:	f7ff ffd6 	bl	80008a4 <RtcSetAlarm>
}
 80008f8:	bd70      	pop	{r4, r5, r6, pc}
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 80008fa:	f7ff ffc5 	bl	8000888 <RtcGetTimerElapsedTime>
 80008fe:	4405      	add	r5, r0
 8000900:	6025      	str	r5, [r4, #0]
 8000902:	e7f6      	b.n	80008f2 <TimerSetTimeout+0x1a>

08000904 <TimerIrqHandler>:
{
 8000904:	b570      	push	{r4, r5, r6, lr}
    uint32_t old =  RtcGetTimerContext( );
 8000906:	f7ff feef 	bl	80006e8 <RtcGetTimerContext>
 800090a:	4604      	mov	r4, r0
    uint32_t now =  RtcSetTimerContext( );
 800090c:	f7ff fee0 	bl	80006d0 <RtcSetTimerContext>
    if( TimerListHead != NULL )
 8000910:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <TimerIrqHandler+0x8c>)
 8000912:	6819      	ldr	r1, [r3, #0]
 8000914:	2900      	cmp	r1, #0
 8000916:	d035      	beq.n	8000984 <TimerIrqHandler+0x80>
 8000918:	4602      	mov	r2, r0
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 800091a:	694b      	ldr	r3, [r1, #20]
 800091c:	b16b      	cbz	r3, 800093a <TimerIrqHandler+0x36>
    uint32_t deltaContext = now - old; // intentional wrap around
 800091e:	1b05      	subs	r5, r0, r4
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 8000920:	4608      	mov	r0, r1
                next->Timestamp = 0;
 8000922:	2600      	movs	r6, #0
                next->Timestamp -= deltaContext;
 8000924:	1aa4      	subs	r4, r4, r2
            if( next->Timestamp > deltaContext )
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	42aa      	cmp	r2, r5
                next->Timestamp -= deltaContext;
 800092a:	bf8c      	ite	hi
 800092c:	1912      	addhi	r2, r2, r4
                next->Timestamp = 0;
 800092e:	4632      	movls	r2, r6
 8000930:	601a      	str	r2, [r3, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 8000932:	6940      	ldr	r0, [r0, #20]
 8000934:	6943      	ldr	r3, [r0, #20]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d1f5      	bne.n	8000926 <TimerIrqHandler+0x22>
        TimerListHead = TimerListHead->Next;
 800093a:	694a      	ldr	r2, [r1, #20]
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <TimerIrqHandler+0x8c>)
 800093e:	601a      	str	r2, [r3, #0]
        cur->IsStarted = false;
 8000940:	2300      	movs	r3, #0
 8000942:	720b      	strb	r3, [r1, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 8000944:	68cb      	ldr	r3, [r1, #12]
 8000946:	b30b      	cbz	r3, 800098c <TimerIrqHandler+0x88>
 8000948:	6908      	ldr	r0, [r1, #16]
 800094a:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 800094c:	4b10      	ldr	r3, [pc, #64]	; (8000990 <TimerIrqHandler+0x8c>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	b1c3      	cbz	r3, 8000984 <TimerIrqHandler+0x80>
        cur = TimerListHead;
 8000952:	4c0f      	ldr	r4, [pc, #60]	; (8000990 <TimerIrqHandler+0x8c>)
        cur->IsStarted = false;
 8000954:	2600      	movs	r6, #0
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 8000956:	681d      	ldr	r5, [r3, #0]
 8000958:	f7ff ff96 	bl	8000888 <RtcGetTimerElapsedTime>
 800095c:	4285      	cmp	r5, r0
 800095e:	d20c      	bcs.n	800097a <TimerIrqHandler+0x76>
        cur = TimerListHead;
 8000960:	6823      	ldr	r3, [r4, #0]
        TimerListHead = TimerListHead->Next;
 8000962:	695a      	ldr	r2, [r3, #20]
 8000964:	6022      	str	r2, [r4, #0]
        cur->IsStarted = false;
 8000966:	721e      	strb	r6, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 8000968:	68da      	ldr	r2, [r3, #12]
 800096a:	b12a      	cbz	r2, 8000978 <TimerIrqHandler+0x74>
 800096c:	6918      	ldr	r0, [r3, #16]
 800096e:	4790      	blx	r2
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 8000970:	6823      	ldr	r3, [r4, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d1ef      	bne.n	8000956 <TimerIrqHandler+0x52>
 8000976:	e005      	b.n	8000984 <TimerIrqHandler+0x80>
        ExecuteCallBack( cur->Callback, cur->Context );
 8000978:	e7fe      	b.n	8000978 <TimerIrqHandler+0x74>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 800097a:	4b05      	ldr	r3, [pc, #20]	; (8000990 <TimerIrqHandler+0x8c>)
 800097c:	6818      	ldr	r0, [r3, #0]
 800097e:	b108      	cbz	r0, 8000984 <TimerIrqHandler+0x80>
 8000980:	7a43      	ldrb	r3, [r0, #9]
 8000982:	b103      	cbz	r3, 8000986 <TimerIrqHandler+0x82>
}
 8000984:	bd70      	pop	{r4, r5, r6, pc}
        TimerSetTimeout( TimerListHead );
 8000986:	f7ff ffa7 	bl	80008d8 <TimerSetTimeout>
}
 800098a:	e7fb      	b.n	8000984 <TimerIrqHandler+0x80>
        ExecuteCallBack( cur->Callback, cur->Context );
 800098c:	e7fe      	b.n	800098c <TimerIrqHandler+0x88>
 800098e:	bf00      	nop
 8000990:	200002cc 	.word	0x200002cc

08000994 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000994:	b530      	push	{r4, r5, lr}
 8000996:	b089      	sub	sp, #36	; 0x24
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000998:	ac01      	add	r4, sp, #4
 800099a:	4d08      	ldr	r5, [pc, #32]	; (80009bc <APPD_EnableCPU2+0x28>)
 800099c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800099e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009a4:	c403      	stmia	r4!, {r0, r1}
 80009a6:	f824 2b02 	strh.w	r2, [r4], #2
 80009aa:	0c12      	lsrs	r2, r2, #16
 80009ac:	7022      	strb	r2, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80009ae:	f006 fc17 	bl	80071e0 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80009b2:	a801      	add	r0, sp, #4
 80009b4:	f006 f8f1 	bl	8006b9a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
}
 80009b8:	b009      	add	sp, #36	; 0x24
 80009ba:	bd30      	pop	{r4, r5, pc}
 80009bc:	08009374 	.word	0x08009374

080009c0 <DbgOutputTraces>:
/* USER CODE END DbgOutputInit */
  return;
}

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 80009c0:	b508      	push	{r3, lr}
 80009c2:	4613      	mov	r3, r2
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 80009c4:	460a      	mov	r2, r1
 80009c6:	4601      	mov	r1, r0
 80009c8:	2000      	movs	r0, #0
 80009ca:	f000 fef7 	bl	80017bc <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
}
 80009ce:	bd08      	pop	{r3, pc}

080009d0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
  UNUSED(status);
  return;
}
 80009d0:	4770      	bx	lr
	...

080009d4 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80009d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009d8:	b088      	sub	sp, #32
 80009da:	4604      	mov	r4, r0
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80009dc:	f8d0 8004 	ldr.w	r8, [r0, #4]

  /* Read the firmware version of both the wireless firmware and the FUS */
  SHCI_GetWirelessFwInfo( &WirelessInfo );
 80009e0:	a804      	add	r0, sp, #16
 80009e2:	f006 f8f7 	bl	8006bd4 <SHCI_GetWirelessFwInfo>
  APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 80009e6:	4f9a      	ldr	r7, [pc, #616]	; (8000c50 <APPE_SysUserEvtRx+0x27c>)
 80009e8:	4638      	mov	r0, r7
 80009ea:	f006 fc45 	bl	8007278 <DbgTraceGetFileName>
 80009ee:	4601      	mov	r1, r0
 80009f0:	4e98      	ldr	r6, [pc, #608]	; (8000c54 <APPE_SysUserEvtRx+0x280>)
 80009f2:	4d99      	ldr	r5, [pc, #612]	; (8000c58 <APPE_SysUserEvtRx+0x284>)
 80009f4:	f240 1369 	movw	r3, #361	; 0x169
 80009f8:	4632      	mov	r2, r6
 80009fa:	4628      	mov	r0, r5
 80009fc:	f007 fcc2 	bl	8008384 <iprintf>
 8000a00:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8000a04:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8000a08:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8000a0c:	4893      	ldr	r0, [pc, #588]	; (8000c5c <APPE_SysUserEvtRx+0x288>)
 8000a0e:	f007 fcb9 	bl	8008384 <iprintf>
  APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8000a12:	4638      	mov	r0, r7
 8000a14:	f006 fc30 	bl	8007278 <DbgTraceGetFileName>
 8000a18:	4601      	mov	r1, r0
 8000a1a:	f44f 73b5 	mov.w	r3, #362	; 0x16a
 8000a1e:	4632      	mov	r2, r6
 8000a20:	4628      	mov	r0, r5
 8000a22:	f007 fcaf 	bl	8008384 <iprintf>
 8000a26:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8000a2a:	488d      	ldr	r0, [pc, #564]	; (8000c60 <APPE_SysUserEvtRx+0x28c>)
 8000a2c:	f007 fcaa 	bl	8008384 <iprintf>
  APP_DBG_MSG("FUS version %d.%d.%d\n\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8000a30:	4638      	mov	r0, r7
 8000a32:	f006 fc21 	bl	8007278 <DbgTraceGetFileName>
 8000a36:	4601      	mov	r1, r0
 8000a38:	f240 136b 	movw	r3, #363	; 0x16b
 8000a3c:	4632      	mov	r2, r6
 8000a3e:	4628      	mov	r0, r5
 8000a40:	f007 fca0 	bl	8008384 <iprintf>
 8000a44:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8000a48:	f89d 201b 	ldrb.w	r2, [sp, #27]
 8000a4c:	f89d 101a 	ldrb.w	r1, [sp, #26]
 8000a50:	4884      	ldr	r0, [pc, #528]	; (8000c64 <APPE_SysUserEvtRx+0x290>)
 8000a52:	f007 fc97 	bl	8008384 <iprintf>

  switch(p_sys_event->subevtcode)
 8000a56:	f8b8 300b 	ldrh.w	r3, [r8, #11]
 8000a5a:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000a5e:	2b07      	cmp	r3, #7
 8000a60:	f200 80b6 	bhi.w	8000bd0 <APPE_SysUserEvtRx+0x1fc>
 8000a64:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000a68:	00660008 	.word	0x00660008
 8000a6c:	00b40093 	.word	0x00b40093
 8000a70:	00c700b7 	.word	0x00c700b7
 8000a74:	00e500d5 	.word	0x00e500d5
static void APPE_SysEvtReadyProcessing( void * pPayload )
{
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000a78:	2300      	movs	r3, #0
 8000a7a:	9300      	str	r3, [sp, #0]
 8000a7c:	9301      	str	r3, [sp, #4]
 8000a7e:	9302      	str	r3, [sp, #8]
 8000a80:	f8ad 300c 	strh.w	r3, [sp, #12]
  uint32_t RevisionID=0;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;

  if(p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000a84:	6863      	ldr	r3, [r4, #4]
 8000a86:	7b5b      	ldrb	r3, [r3, #13]
 8000a88:	b17b      	cbz	r3, 8000aaa <APPE_SysUserEvtRx+0xd6>
    (void)SHCI_C2_Config(&config_param);

    APP_BLE_Init( );
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
  }
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d042      	beq.n	8000b14 <APPE_SysUserEvtRx+0x140>
    /* The packet shall not be released as this is not supported by the FUS */
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
  }
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n");
 8000a8e:	4870      	ldr	r0, [pc, #448]	; (8000c50 <APPE_SysUserEvtRx+0x27c>)
 8000a90:	f006 fbf2 	bl	8007278 <DbgTraceGetFileName>
 8000a94:	4601      	mov	r1, r0
 8000a96:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8000a9a:	4a73      	ldr	r2, [pc, #460]	; (8000c68 <APPE_SysUserEvtRx+0x294>)
 8000a9c:	486e      	ldr	r0, [pc, #440]	; (8000c58 <APPE_SysUserEvtRx+0x284>)
 8000a9e:	f007 fc71 	bl	8008384 <iprintf>
 8000aa2:	4872      	ldr	r0, [pc, #456]	; (8000c6c <APPE_SysUserEvtRx+0x298>)
 8000aa4:	f007 fcf4 	bl	8008490 <puts>
  }

  return;
 8000aa8:	e092      	b.n	8000bd0 <APPE_SysUserEvtRx+0x1fc>
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - WIRELESS_FW_RUNNING \n");
 8000aaa:	4f69      	ldr	r7, [pc, #420]	; (8000c50 <APPE_SysUserEvtRx+0x27c>)
 8000aac:	4638      	mov	r0, r7
 8000aae:	f006 fbe3 	bl	8007278 <DbgTraceGetFileName>
 8000ab2:	4601      	mov	r1, r0
 8000ab4:	4e6c      	ldr	r6, [pc, #432]	; (8000c68 <APPE_SysUserEvtRx+0x294>)
 8000ab6:	4d68      	ldr	r5, [pc, #416]	; (8000c58 <APPE_SysUserEvtRx+0x284>)
 8000ab8:	f240 13c3 	movw	r3, #451	; 0x1c3
 8000abc:	4632      	mov	r2, r6
 8000abe:	4628      	mov	r0, r5
 8000ac0:	f007 fc60 	bl	8008384 <iprintf>
 8000ac4:	486a      	ldr	r0, [pc, #424]	; (8000c70 <APPE_SysUserEvtRx+0x29c>)
 8000ac6:	f007 fce3 	bl	8008490 <puts>
    APPD_EnableCPU2( );
 8000aca:	f7ff ff63 	bl	8000994 <APPD_EnableCPU2>
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000ace:	230d      	movs	r3, #13
 8000ad0:	f88d 3000 	strb.w	r3, [sp]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000ad4:	237f      	movs	r3, #127	; 0x7f
 8000ad6:	f88d 3002 	strb.w	r3, [sp, #2]
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000ada:	4b66      	ldr	r3, [pc, #408]	; (8000c74 <APPE_SysUserEvtRx+0x2a0>)
 8000adc:	681c      	ldr	r4, [r3, #0]
 8000ade:	0c24      	lsrs	r4, r4, #16
    APP_DBG_MSG("DBGMCU_GetRevisionID= %lx \n\n", RevisionID);
 8000ae0:	4638      	mov	r0, r7
 8000ae2:	f006 fbc9 	bl	8007278 <DbgTraceGetFileName>
 8000ae6:	4601      	mov	r1, r0
 8000ae8:	f240 13db 	movw	r3, #475	; 0x1db
 8000aec:	4632      	mov	r2, r6
 8000aee:	4628      	mov	r0, r5
 8000af0:	f007 fc48 	bl	8008384 <iprintf>
 8000af4:	4621      	mov	r1, r4
 8000af6:	4860      	ldr	r0, [pc, #384]	; (8000c78 <APPE_SysUserEvtRx+0x2a4>)
 8000af8:	f007 fc44 	bl	8008384 <iprintf>
    config_param.RevisionID = RevisionID;
 8000afc:	f8ad 400c 	strh.w	r4, [sp, #12]
    (void)SHCI_C2_Config(&config_param);
 8000b00:	4668      	mov	r0, sp
 8000b02:	f006 f859 	bl	8006bb8 <SHCI_C2_Config>
    APP_BLE_Init( );
 8000b06:	f006 feb7 	bl	8007878 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f007 faa9 	bl	8008064 <UTIL_LPM_SetOffMode>
 8000b12:	e05d      	b.n	8000bd0 <APPE_SysUserEvtRx+0x1fc>
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n");
 8000b14:	484e      	ldr	r0, [pc, #312]	; (8000c50 <APPE_SysUserEvtRx+0x27c>)
 8000b16:	f006 fbaf 	bl	8007278 <DbgTraceGetFileName>
 8000b1a:	4601      	mov	r1, r0
 8000b1c:	f240 13e9 	movw	r3, #489	; 0x1e9
 8000b20:	4a51      	ldr	r2, [pc, #324]	; (8000c68 <APPE_SysUserEvtRx+0x294>)
 8000b22:	484d      	ldr	r0, [pc, #308]	; (8000c58 <APPE_SysUserEvtRx+0x284>)
 8000b24:	f007 fc2e 	bl	8008384 <iprintf>
 8000b28:	4854      	ldr	r0, [pc, #336]	; (8000c7c <APPE_SysUserEvtRx+0x2a8>)
 8000b2a:	f007 fcb1 	bl	8008490 <puts>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	7023      	strb	r3, [r4, #0]
 8000b32:	e04d      	b.n	8000bd0 <APPE_SysUserEvtRx+0x1fc>
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000b34:	6864      	ldr	r4, [r4, #4]
  APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n",(*p_sys_error_code));
 8000b36:	4846      	ldr	r0, [pc, #280]	; (8000c50 <APPE_SysUserEvtRx+0x27c>)
 8000b38:	f006 fb9e 	bl	8007278 <DbgTraceGetFileName>
 8000b3c:	4601      	mov	r1, r0
 8000b3e:	f240 13a5 	movw	r3, #421	; 0x1a5
 8000b42:	4a4f      	ldr	r2, [pc, #316]	; (8000c80 <APPE_SysUserEvtRx+0x2ac>)
 8000b44:	4844      	ldr	r0, [pc, #272]	; (8000c58 <APPE_SysUserEvtRx+0x284>)
 8000b46:	f007 fc1d 	bl	8008384 <iprintf>
 8000b4a:	7b61      	ldrb	r1, [r4, #13]
 8000b4c:	484d      	ldr	r0, [pc, #308]	; (8000c84 <APPE_SysUserEvtRx+0x2b0>)
 8000b4e:	f007 fc19 	bl	8008384 <iprintf>
  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8000b52:	7b63      	ldrb	r3, [r4, #13]
 8000b54:	b96b      	cbnz	r3, 8000b72 <APPE_SysUserEvtRx+0x19e>
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8000b56:	483e      	ldr	r0, [pc, #248]	; (8000c50 <APPE_SysUserEvtRx+0x27c>)
 8000b58:	f006 fb8e 	bl	8007278 <DbgTraceGetFileName>
 8000b5c:	4601      	mov	r1, r0
 8000b5e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8000b62:	4a47      	ldr	r2, [pc, #284]	; (8000c80 <APPE_SysUserEvtRx+0x2ac>)
 8000b64:	483c      	ldr	r0, [pc, #240]	; (8000c58 <APPE_SysUserEvtRx+0x284>)
 8000b66:	f007 fc0d 	bl	8008384 <iprintf>
 8000b6a:	4847      	ldr	r0, [pc, #284]	; (8000c88 <APPE_SysUserEvtRx+0x2b4>)
 8000b6c:	f007 fc90 	bl	8008490 <puts>
 8000b70:	e02e      	b.n	8000bd0 <APPE_SysUserEvtRx+0x1fc>
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8000b72:	4837      	ldr	r0, [pc, #220]	; (8000c50 <APPE_SysUserEvtRx+0x27c>)
 8000b74:	f006 fb80 	bl	8007278 <DbgTraceGetFileName>
 8000b78:	4601      	mov	r1, r0
 8000b7a:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
 8000b7e:	4a40      	ldr	r2, [pc, #256]	; (8000c80 <APPE_SysUserEvtRx+0x2ac>)
 8000b80:	4835      	ldr	r0, [pc, #212]	; (8000c58 <APPE_SysUserEvtRx+0x284>)
 8000b82:	f007 fbff 	bl	8008384 <iprintf>
 8000b86:	4841      	ldr	r0, [pc, #260]	; (8000c8c <APPE_SysUserEvtRx+0x2b8>)
 8000b88:	f007 fc82 	bl	8008490 <puts>
 8000b8c:	e020      	b.n	8000bd0 <APPE_SysUserEvtRx+0x1fc>
    APP_DBG_MSG("-- BLE NVM RAM HAS BEEN UPDATED BY CMO+ \n");
 8000b8e:	4e30      	ldr	r6, [pc, #192]	; (8000c50 <APPE_SysUserEvtRx+0x27c>)
 8000b90:	4630      	mov	r0, r6
 8000b92:	f006 fb71 	bl	8007278 <DbgTraceGetFileName>
 8000b96:	4601      	mov	r1, r0
 8000b98:	4d2e      	ldr	r5, [pc, #184]	; (8000c54 <APPE_SysUserEvtRx+0x280>)
 8000b9a:	4c2f      	ldr	r4, [pc, #188]	; (8000c58 <APPE_SysUserEvtRx+0x284>)
 8000b9c:	f44f 73bc 	mov.w	r3, #376	; 0x178
 8000ba0:	462a      	mov	r2, r5
 8000ba2:	4620      	mov	r0, r4
 8000ba4:	f007 fbee 	bl	8008384 <iprintf>
 8000ba8:	4839      	ldr	r0, [pc, #228]	; (8000c90 <APPE_SysUserEvtRx+0x2bc>)
 8000baa:	f007 fc71 	bl	8008490 <puts>
    APP_DBG_MSG("SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE : StartAddress = %lx , Size = %ld\n",
 8000bae:	4630      	mov	r0, r6
 8000bb0:	f006 fb62 	bl	8007278 <DbgTraceGetFileName>
 8000bb4:	4601      	mov	r1, r0
 8000bb6:	f240 1379 	movw	r3, #377	; 0x179
 8000bba:	462a      	mov	r2, r5
 8000bbc:	4620      	mov	r0, r4
 8000bbe:	f007 fbe1 	bl	8008384 <iprintf>
 8000bc2:	f8d8 2011 	ldr.w	r2, [r8, #17]
 8000bc6:	f8d8 100d 	ldr.w	r1, [r8, #13]
 8000bca:	4832      	ldr	r0, [pc, #200]	; (8000c94 <APPE_SysUserEvtRx+0x2c0>)
 8000bcc:	f007 fbda 	bl	8008384 <iprintf>
}
 8000bd0:	b008      	add	sp, #32
 8000bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8000bd6:	481e      	ldr	r0, [pc, #120]	; (8000c50 <APPE_SysUserEvtRx+0x27c>)
 8000bd8:	f006 fb4e 	bl	8007278 <DbgTraceGetFileName>
 8000bdc:	4601      	mov	r1, r0
 8000bde:	f240 137f 	movw	r3, #383	; 0x17f
 8000be2:	4a1c      	ldr	r2, [pc, #112]	; (8000c54 <APPE_SysUserEvtRx+0x280>)
 8000be4:	481c      	ldr	r0, [pc, #112]	; (8000c58 <APPE_SysUserEvtRx+0x284>)
 8000be6:	f007 fbcd 	bl	8008384 <iprintf>
 8000bea:	f8d8 100d 	ldr.w	r1, [r8, #13]
 8000bee:	482a      	ldr	r0, [pc, #168]	; (8000c98 <APPE_SysUserEvtRx+0x2c4>)
 8000bf0:	f007 fbc8 	bl	8008384 <iprintf>
    break;
 8000bf4:	e7ec      	b.n	8000bd0 <APPE_SysUserEvtRx+0x1fc>
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_END_WRITE\n");
 8000bf6:	4816      	ldr	r0, [pc, #88]	; (8000c50 <APPE_SysUserEvtRx+0x27c>)
 8000bf8:	f006 fb3e 	bl	8007278 <DbgTraceGetFileName>
 8000bfc:	4601      	mov	r1, r0
 8000bfe:	f44f 73c2 	mov.w	r3, #388	; 0x184
 8000c02:	4a14      	ldr	r2, [pc, #80]	; (8000c54 <APPE_SysUserEvtRx+0x280>)
 8000c04:	4814      	ldr	r0, [pc, #80]	; (8000c58 <APPE_SysUserEvtRx+0x284>)
 8000c06:	f007 fbbd 	bl	8008384 <iprintf>
 8000c0a:	4824      	ldr	r0, [pc, #144]	; (8000c9c <APPE_SysUserEvtRx+0x2c8>)
 8000c0c:	f007 fc40 	bl	8008490 <puts>
    break;
 8000c10:	e7de      	b.n	8000bd0 <APPE_SysUserEvtRx+0x1fc>
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8000c12:	480f      	ldr	r0, [pc, #60]	; (8000c50 <APPE_SysUserEvtRx+0x27c>)
 8000c14:	f006 fb30 	bl	8007278 <DbgTraceGetFileName>
 8000c18:	4601      	mov	r1, r0
 8000c1a:	f44f 73c4 	mov.w	r3, #392	; 0x188
 8000c1e:	4a0d      	ldr	r2, [pc, #52]	; (8000c54 <APPE_SysUserEvtRx+0x280>)
 8000c20:	480d      	ldr	r0, [pc, #52]	; (8000c58 <APPE_SysUserEvtRx+0x284>)
 8000c22:	f007 fbaf 	bl	8008384 <iprintf>
 8000c26:	f8d8 100d 	ldr.w	r1, [r8, #13]
 8000c2a:	481d      	ldr	r0, [pc, #116]	; (8000ca0 <APPE_SysUserEvtRx+0x2cc>)
 8000c2c:	f007 fbaa 	bl	8008384 <iprintf>
    break;
 8000c30:	e7ce      	b.n	8000bd0 <APPE_SysUserEvtRx+0x1fc>
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_END_ERASE\n");
 8000c32:	4807      	ldr	r0, [pc, #28]	; (8000c50 <APPE_SysUserEvtRx+0x27c>)
 8000c34:	f006 fb20 	bl	8007278 <DbgTraceGetFileName>
 8000c38:	4601      	mov	r1, r0
 8000c3a:	f240 138d 	movw	r3, #397	; 0x18d
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <APPE_SysUserEvtRx+0x280>)
 8000c40:	4805      	ldr	r0, [pc, #20]	; (8000c58 <APPE_SysUserEvtRx+0x284>)
 8000c42:	f007 fb9f 	bl	8008384 <iprintf>
 8000c46:	4817      	ldr	r0, [pc, #92]	; (8000ca4 <APPE_SysUserEvtRx+0x2d0>)
 8000c48:	f007 fc22 	bl	8008490 <puts>
  return;
 8000c4c:	e7c0      	b.n	8000bd0 <APPE_SysUserEvtRx+0x1fc>
 8000c4e:	bf00      	nop
 8000c50:	0800952c 	.word	0x0800952c
 8000c54:	08009804 	.word	0x08009804
 8000c58:	08009544 	.word	0x08009544
 8000c5c:	08009558 	.word	0x08009558
 8000c60:	0800957c 	.word	0x0800957c
 8000c64:	08009598 	.word	0x08009598
 8000c68:	0800982c 	.word	0x0800982c
 8000c6c:	0800962c 	.word	0x0800962c
 8000c70:	080095b0 	.word	0x080095b0
 8000c74:	e0042000 	.word	0xe0042000
 8000c78:	080095e0 	.word	0x080095e0
 8000c7c:	08009600 	.word	0x08009600
 8000c80:	08009818 	.word	0x08009818
 8000c84:	08009658 	.word	0x08009658
 8000c88:	08009684 	.word	0x08009684
 8000c8c:	080096bc 	.word	0x080096bc
 8000c90:	080096f0 	.word	0x080096f0
 8000c94:	0800971c 	.word	0x0800971c
 8000c98:	08009760 	.word	0x08009760
 8000c9c:	08009794 	.word	0x08009794
 8000ca0:	080097b0 	.word	0x080097b0
 8000ca4:	080097e8 	.word	0x080097e8

08000ca8 <MX_APPE_Config>:
{
 8000ca8:	b500      	push	{lr}
 8000caa:	b083      	sub	sp, #12
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 8000cac:	4b2b      	ldr	r3, [pc, #172]	; (8000d5c <MX_APPE_Config+0xb4>)
 8000cae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cb2:	611a      	str	r2, [r3, #16]
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cbc:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8000cc0:	d018      	beq.n	8000cf4 <MX_APPE_Config+0x4c>
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cca:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000cce:	d111      	bne.n	8000cf4 <MX_APPE_Config+0x4c>
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000cd0:	f001 ffb2 	bl	8002c38 <HAL_PWR_EnableBkUpAccess>
    HAL_PWR_EnableBkUpAccess();
 8000cd4:	f001 ffb0 	bl	8002c38 <HAL_PWR_EnableBkUpAccess>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cdc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000ce0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000ce4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000ce8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000cec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000cf0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000cfa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000cfe:	651a      	str	r2, [r3, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d06:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000d08:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <MX_APPE_Config+0xb8>)
 8000d0c:	223f      	movs	r2, #63	; 0x3f
 8000d0e:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000d10:	619a      	str	r2, [r3, #24]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000d12:	685a      	ldr	r2, [r3, #4]
 8000d14:	f442 127c 	orr.w	r2, r2, #4128768	; 0x3f0000
 8000d18:	605a      	str	r2, [r3, #4]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000d1a:	695a      	ldr	r2, [r3, #20]
 8000d1c:	f442 127c 	orr.w	r2, r2, #4128768	; 0x3f0000
 8000d20:	615a      	str	r2, [r3, #20]
  SET_BIT(IPCCx->C1MR, Channel);
 8000d22:	685a      	ldr	r2, [r3, #4]
 8000d24:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8000d28:	605a      	str	r2, [r3, #4]
  SET_BIT(IPCCx->C2MR, Channel);
 8000d2a:	695a      	ldr	r2, [r3, #20]
 8000d2c:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8000d30:	615a      	str	r2, [r3, #20]
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000d32:	2000      	movs	r0, #0
 8000d34:	f006 fae8 	bl	8007308 <OTP_Read>
  if (p_otp)
 8000d38:	b168      	cbz	r0, 8000d56 <MX_APPE_Config+0xae>
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000d3a:	7981      	ldrb	r1, [r0, #6]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000d3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <MX_APPE_Config+0xbc>)
 8000d42:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000d46:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8000d4a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8000d4e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000d52:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8000d56:	b003      	add	sp, #12
 8000d58:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d5c:	58004000 	.word	0x58004000
 8000d60:	58000c00 	.word	0x58000c00
 8000d64:	cafecafe 	.word	0xcafecafe

08000d68 <Init_Exti>:
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000d68:	4b02      	ldr	r3, [pc, #8]	; (8000d74 <Init_Exti+0xc>)
 8000d6a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000d6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 8000d72:	4770      	bx	lr
 8000d74:	58000800 	.word	0x58000800

08000d78 <MX_APPE_Init>:
{
 8000d78:	b510      	push	{r4, lr}
 8000d7a:	b088      	sub	sp, #32
  Init_Exti( );
 8000d7c:	f7ff fff4 	bl	8000d68 <Init_Exti>
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000d80:	4b21      	ldr	r3, [pc, #132]	; (8000e08 <MX_APPE_Init+0x90>)
 8000d82:	22ca      	movs	r2, #202	; 0xca
 8000d84:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000d86:	2253      	movs	r2, #83	; 0x53
 8000d88:	625a      	str	r2, [r3, #36]	; 0x24
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000d8a:	689a      	ldr	r2, [r3, #8]
 8000d8c:	f022 0207 	bic.w	r2, r2, #7
 8000d90:	609a      	str	r2, [r3, #8]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000d92:	22ff      	movs	r2, #255	; 0xff
 8000d94:	625a      	str	r2, [r3, #36]	; 0x24
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000d96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d9a:	6893      	ldr	r3, [r2, #8]
 8000d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000da0:	6093      	str	r3, [r2, #8]
  UTIL_LPM_Init();
 8000da2:	f007 f955 	bl	8008050 <UTIL_LPM_Init>
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000da6:	4a19      	ldr	r2, [pc, #100]	; (8000e0c <MX_APPE_Init+0x94>)
 8000da8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8000dac:	f023 0307 	bic.w	r3, r3, #7
 8000db0:	f043 0304 	orr.w	r3, r3, #4
 8000db4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  HAL_PWREx_EnableSRAMRetention();
 8000db8:	f001 ff4e 	bl	8002c58 <HAL_PWREx_EnableSRAMRetention>
  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000dbc:	4914      	ldr	r1, [pc, #80]	; (8000e10 <MX_APPE_Init+0x98>)
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f000 fa72 	bl	80012a8 <HW_TS_Init>
  TL_Init();
 8000dc4:	f006 f918 	bl	8006ff8 <TL_Init>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000dc8:	4a12      	ldr	r2, [pc, #72]	; (8000e14 <MX_APPE_Init+0x9c>)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2004      	movs	r0, #4
 8000dce:	f007 fa89 	bl	80082e4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000dd2:	4c11      	ldr	r4, [pc, #68]	; (8000e18 <MX_APPE_Init+0xa0>)
 8000dd4:	9400      	str	r4, [sp, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <MX_APPE_Init+0xa4>)
 8000dd8:	9301      	str	r3, [sp, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000dda:	4669      	mov	r1, sp
 8000ddc:	4810      	ldr	r0, [pc, #64]	; (8000e20 <MX_APPE_Init+0xa8>)
 8000dde:	f006 f83f 	bl	8006e60 <shci_init>
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000de2:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 8000de6:	9302      	str	r3, [sp, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000de8:	f504 7306 	add.w	r3, r4, #536	; 0x218
 8000dec:	9303      	str	r3, [sp, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000dee:	f504 7449 	add.w	r4, r4, #804	; 0x324
 8000df2:	9404      	str	r4, [sp, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000df4:	f240 533c 	movw	r3, #1340	; 0x53c
 8000df8:	9305      	str	r3, [sp, #20]
  TL_MM_Init( &tl_mm_config );
 8000dfa:	a802      	add	r0, sp, #8
 8000dfc:	f006 f9c2 	bl	8007184 <TL_MM_Init>
  TL_Enable();
 8000e00:	f006 f8f6 	bl	8006ff0 <TL_Enable>
}
 8000e04:	b008      	add	sp, #32
 8000e06:	bd10      	pop	{r4, pc}
 8000e08:	40002800 	.word	0x40002800
 8000e0c:	58000400 	.word	0x58000400
 8000e10:	2000047c 	.word	0x2000047c
 8000e14:	08006ec1 	.word	0x08006ec1
 8000e18:	200301e8 	.word	0x200301e8
 8000e1c:	080009d1 	.word	0x080009d1
 8000e20:	080009d5 	.word	0x080009d5

08000e24 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000e24:	b570      	push	{r4, r5, r6, lr}
 8000e26:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8000e28:	f001 fa18 	bl	800225c <HAL_GetTick>
 8000e2c:	4606      	mov	r6, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000e32:	d10b      	bne.n	8000e4c <HAL_Delay+0x28>
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000e34:	4c08      	ldr	r4, [pc, #32]	; (8000e58 <HAL_Delay+0x34>)
  {
    wait += HAL_GetTickFreq();
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e36:	f001 fa11 	bl	800225c <HAL_GetTick>
 8000e3a:	1b80      	subs	r0, r0, r6
 8000e3c:	42a8      	cmp	r0, r5
 8000e3e:	d209      	bcs.n	8000e54 <HAL_Delay+0x30>
 8000e40:	6923      	ldr	r3, [r4, #16]
 8000e42:	f023 0304 	bic.w	r3, r3, #4
 8000e46:	6123      	str	r3, [r4, #16]
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 8000e48:	bf30      	wfi
 8000e4a:	e7f4      	b.n	8000e36 <HAL_Delay+0x12>
    wait += HAL_GetTickFreq();
 8000e4c:	f001 fa12 	bl	8002274 <HAL_GetTickFreq>
 8000e50:	4405      	add	r5, r0
 8000e52:	e7ef      	b.n	8000e34 <HAL_Delay+0x10>
  }
}
 8000e54:	bd70      	pop	{r4, r5, r6, pc}
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8000e5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e62:	f007 f973 	bl	800814c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000e66:	bd08      	pop	{r3, pc}

08000e68 <UTIL_SEQ_Idle>:
{
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
}
 8000e68:	4770      	bx	lr

08000e6a <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000e6a:	b508      	push	{r3, lr}
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	f007 f96c 	bl	800814c <UTIL_SEQ_Run>

  return;
}
 8000e74:	bd08      	pop	{r3, pc}

08000e76 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000e76:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000e78:	2100      	movs	r1, #0
 8000e7a:	2004      	movs	r0, #4
 8000e7c:	f007 f908 	bl	8008090 <UTIL_SEQ_SetTask>
  return;
}
 8000e80:	bd08      	pop	{r3, pc}

08000e82 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000e82:	b508      	push	{r3, lr}
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000e84:	2002      	movs	r0, #2
 8000e86:	f007 f935 	bl	80080f4 <UTIL_SEQ_SetEvt>
  return;
}
 8000e8a:	bd08      	pop	{r3, pc}

08000e8c <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000e8c:	b508      	push	{r3, lr}
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000e8e:	2002      	movs	r0, #2
 8000e90:	f007 f9f2 	bl	8008278 <UTIL_SEQ_WaitEvt>
  return;
}
 8000e94:	bd08      	pop	{r3, pc}

08000e96 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e96:	b500      	push	{lr}
 8000e98:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000ea0:	f042 0204 	orr.w	r2, r2, #4
 8000ea4:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000ea6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000ea8:	f002 0204 	and.w	r2, r2, #4
 8000eac:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000eae:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000eb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000eb2:	f042 0201 	orr.w	r2, r2, #1
 8000eb6:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000ec0:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	4611      	mov	r1, r2
 8000ec6:	200b      	movs	r0, #11
 8000ec8:	f001 f9f8 	bl	80022bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ecc:	200b      	movs	r0, #11
 8000ece:	f001 fa39 	bl	8002344 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	200c      	movs	r0, #12
 8000ed8:	f001 f9f0 	bl	80022bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000edc:	200c      	movs	r0, #12
 8000ede:	f001 fa31 	bl	8002344 <HAL_NVIC_EnableIRQ>

}
 8000ee2:	b003      	add	sp, #12
 8000ee4:	f85d fb04 	ldr.w	pc, [sp], #4

08000ee8 <MX_GPIO_Init>:
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
     PA2   ------> RCC_LSCO
*/
void MX_GPIO_Init(void)
{
 8000ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000eec:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eee:	2400      	movs	r4, #0
 8000ef0:	9405      	str	r4, [sp, #20]
 8000ef2:	9406      	str	r4, [sp, #24]
 8000ef4:	9407      	str	r4, [sp, #28]
 8000ef6:	9408      	str	r4, [sp, #32]
 8000ef8:	9409      	str	r4, [sp, #36]	; 0x24
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000efe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f00:	f042 0204 	orr.w	r2, r2, #4
 8000f04:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f08:	f002 0204 	and.w	r2, r2, #4
 8000f0c:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 8000f0e:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f16:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f1a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000f1e:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8000f20:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f24:	f042 0202 	orr.w	r2, r2, #2
 8000f28:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f2c:	f002 0202 	and.w	r2, r2, #2
 8000f30:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000f32:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f36:	f042 0201 	orr.w	r2, r2, #1
 8000f3a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f3e:	f002 0201 	and.w	r2, r2, #1
 8000f42:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000f44:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f48:	f042 0210 	orr.w	r2, r2, #16
 8000f4c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f50:	f003 0310 	and.w	r3, r3, #16
 8000f54:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000f56:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GNSS_ANT_SWITCH_Pin|EFECT_HALL_OUT_Pin|RX1_LED_Pin, GPIO_PIN_RESET);
 8000f58:	4d3d      	ldr	r5, [pc, #244]	; (8001050 <MX_GPIO_Init+0x168>)
 8000f5a:	4622      	mov	r2, r4
 8000f5c:	f44f 7192 	mov.w	r1, #292	; 0x124
 8000f60:	4628      	mov	r0, r5
 8000f62:	f001 fdf3 	bl	8002b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LR_NRESET_Pin|VCC_SENSORS_MCU_Pin|VCC_24GHZ_SW_Pin|NSS_Pin
 8000f66:	4622      	mov	r2, r4
 8000f68:	f248 111b 	movw	r1, #33051	; 0x811b
 8000f6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f70:	f001 fdec 	bl	8002b4c <HAL_GPIO_WritePin>
                          |LNA_PON_MCU_Pin|BLE_WIFI_SEL_SWITCH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX1_LED_GPIO_Port, TX1_LED_Pin, GPIO_PIN_RESET);
 8000f74:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8001058 <MX_GPIO_Init+0x170>
 8000f78:	4622      	mov	r2, r4
 8000f7a:	2110      	movs	r1, #16
 8000f7c:	4648      	mov	r0, r9
 8000f7e:	f001 fde5 	bl	8002b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f82:	2308      	movs	r3, #8
 8000f84:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f86:	2603      	movs	r6, #3
 8000f88:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f8c:	a905      	add	r1, sp, #20
 8000f8e:	4831      	ldr	r0, [pc, #196]	; (8001054 <MX_GPIO_Init+0x16c>)
 8000f90:	f001 fc9a 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GNSS_ANT_SWITCH_Pin|EFECT_HALL_OUT_Pin|RX1_LED_Pin;
 8000f94:	f44f 7392 	mov.w	r3, #292	; 0x124
 8000f98:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	2701      	movs	r7, #1
 8000f9c:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa2:	a905      	add	r1, sp, #20
 8000fa4:	4628      	mov	r0, r5
 8000fa6:	f001 fc8f 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PB1_INPUT_SWITCH_Pin|LR_BUSY_Pin|ACC_INT1_Pin;
 8000faa:	f240 2303 	movw	r3, #515	; 0x203
 8000fae:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb4:	a905      	add	r1, sp, #20
 8000fb6:	4628      	mov	r0, r5
 8000fb8:	f001 fc86 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = LR_NRESET_Pin|VCC_SENSORS_MCU_Pin|VCC_24GHZ_SW_Pin|NSS_Pin
 8000fbc:	f248 131b 	movw	r3, #33051	; 0x811b
 8000fc0:	9305      	str	r3, [sp, #20]
                          |LNA_PON_MCU_Pin|BLE_WIFI_SEL_SWITCH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc2:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc8:	a905      	add	r1, sp, #20
 8000fca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fce:	f001 fc7b 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_LSCO;
 8000fde:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe0:	a905      	add	r1, sp, #20
 8000fe2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe6:	f001 fc6f 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TX1_LED_Pin;
 8000fea:	f04f 0810 	mov.w	r8, #16
 8000fee:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff2:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(TX1_LED_GPIO_Port, &GPIO_InitStruct);
 8000ff8:	a905      	add	r1, sp, #20
 8000ffa:	4648      	mov	r0, r9
 8000ffc:	f001 fc64 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001000:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001004:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001006:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	a905      	add	r1, sp, #20
 800100c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001010:	f001 fc5a 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LR_IRQ_Pin;
 8001014:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001018:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800101c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(LR_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001020:	a905      	add	r1, sp, #20
 8001022:	4628      	mov	r0, r5
 8001024:	f001 fc50 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001028:	23c0      	movs	r3, #192	; 0xc0
 800102a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800102c:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001030:	a905      	add	r1, sp, #20
 8001032:	4628      	mov	r0, r5
 8001034:	f001 fc48 	bl	80028c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001038:	4622      	mov	r2, r4
 800103a:	4621      	mov	r1, r4
 800103c:	200a      	movs	r0, #10
 800103e:	f001 f93d 	bl	80022bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001042:	200a      	movs	r0, #10
 8001044:	f001 f97e 	bl	8002344 <HAL_NVIC_EnableIRQ>

}
 8001048:	b00b      	add	sp, #44	; 0x2c
 800104a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800104e:	bf00      	nop
 8001050:	48000400 	.word	0x48000400
 8001054:	48001c00 	.word	0x48001c00
 8001058:	48001000 	.word	0x48001000

0800105c <ReadRtcSsrValue>:
static uint32_t ReadRtcSsrValue(void)
{
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800105c:	4b07      	ldr	r3, [pc, #28]	; (800107c <ReadRtcSsrValue+0x20>)
 800105e:	6a9a      	ldr	r2, [r3, #40]	; 0x28

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001062:	b29b      	uxth	r3, r3
  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001064:	b292      	uxth	r2, r2

  while(first_read != second_read)
 8001066:	429a      	cmp	r2, r3
 8001068:	d006      	beq.n	8001078 <ReadRtcSsrValue+0x1c>
  {
    first_read = second_read;

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800106a:	4904      	ldr	r1, [pc, #16]	; (800107c <ReadRtcSsrValue+0x20>)
 800106c:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800106e:	4618      	mov	r0, r3
 8001070:	b293      	uxth	r3, r2
  while(first_read != second_read)
 8001072:	4283      	cmp	r3, r0
 8001074:	d1fa      	bne.n	800106c <ReadRtcSsrValue+0x10>
 8001076:	4770      	bx	lr
  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001078:	4618      	mov	r0, r3
  }

  return second_read;
}
 800107a:	4770      	bx	lr
 800107c:	40002800 	.word	0x40002800

08001080 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001080:	b430      	push	{r4, r5}
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001082:	4b21      	ldr	r3, [pc, #132]	; (8001108 <UnlinkTimer+0x88>)
 8001084:	781a      	ldrb	r2, [r3, #0]
 8001086:	4603      	mov	r3, r0
 8001088:	4282      	cmp	r2, r0
 800108a:	d029      	beq.n	80010e0 <UnlinkTimer+0x60>
    PreviousRunningTimerID = CurrentRunningTimerID;
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 800108c:	4c1e      	ldr	r4, [pc, #120]	; (8001108 <UnlinkTimer+0x88>)
 800108e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001092:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8001096:	7e05      	ldrb	r5, [r0, #24]
    next_id = aTimerContext[TimerID].NextID;
 8001098:	7e42      	ldrb	r2, [r0, #25]
 800109a:	b2d2      	uxtb	r2, r2

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800109c:	7e40      	ldrb	r0, [r0, #25]
 800109e:	b2c0      	uxtb	r0, r0
 80010a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80010a4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80010a8:	7660      	strb	r0, [r4, #25]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80010aa:	2a06      	cmp	r2, #6
 80010ac:	d00b      	beq.n	80010c6 <UnlinkTimer+0x46>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80010ae:	4816      	ldr	r0, [pc, #88]	; (8001108 <UnlinkTimer+0x88>)
 80010b0:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 80010b4:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80010b8:	7e24      	ldrb	r4, [r4, #24]
 80010ba:	b2e4      	uxtb	r4, r4
 80010bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80010c0:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80010c4:	7614      	strb	r4, [r2, #24]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80010c6:	4a10      	ldr	r2, [pc, #64]	; (8001108 <UnlinkTimer+0x88>)
 80010c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80010cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80010d0:	2001      	movs	r0, #1
 80010d2:	7418      	strb	r0, [r3, #16]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80010d4:	7813      	ldrb	r3, [r2, #0]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b06      	cmp	r3, #6
 80010da:	d00d      	beq.n	80010f8 <UnlinkTimer+0x78>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
  }

  return;
}
 80010dc:	bc30      	pop	{r4, r5}
 80010de:	4770      	bx	lr
    PreviousRunningTimerID = CurrentRunningTimerID;
 80010e0:	4a09      	ldr	r2, [pc, #36]	; (8001108 <UnlinkTimer+0x88>)
 80010e2:	7810      	ldrb	r0, [r2, #0]
 80010e4:	b2c0      	uxtb	r0, r0
 80010e6:	7050      	strb	r0, [r2, #1]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80010e8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80010ec:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80010f0:	7e40      	ldrb	r0, [r0, #25]
 80010f2:	b2c0      	uxtb	r0, r0
 80010f4:	7010      	strb	r0, [r2, #0]
 80010f6:	e7e6      	b.n	80010c6 <UnlinkTimer+0x46>
  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80010f8:	2900      	cmp	r1, #0
 80010fa:	d1ef      	bne.n	80010dc <UnlinkTimer+0x5c>
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80010fc:	4613      	mov	r3, r2
 80010fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001102:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return;
 8001106:	e7e9      	b.n	80010dc <UnlinkTimer+0x5c>
 8001108:	20000090 	.word	0x20000090

0800110c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 800110c:	b508      	push	{r3, lr}
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800110e:	4b12      	ldr	r3, [pc, #72]	; (8001158 <ReturnTimeElapsed+0x4c>)
 8001110:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001118:	d102      	bne.n	8001120 <ReturnTimeElapsed+0x14>
    return_value = return_value*AsynchPrescalerUserConfig;
    return_value = return_value >> WakeupTimerDivider;
  }
  else
  {
    return_value = 0;
 800111a:	2000      	movs	r0, #0
  }

  return (uint16_t)return_value;
}
 800111c:	b280      	uxth	r0, r0
 800111e:	bd08      	pop	{r3, pc}
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001120:	f7ff ff9c 	bl	800105c <ReadRtcSsrValue>
    if (SSRValueOnLastSetup >= return_value)
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <ReturnTimeElapsed+0x4c>)
 8001126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800112a:	4283      	cmp	r3, r0
 800112c:	d30b      	bcc.n	8001146 <ReturnTimeElapsed+0x3a>
      return_value = SSRValueOnLastSetup - return_value;
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <ReturnTimeElapsed+0x4c>)
 8001130:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001134:	1a18      	subs	r0, r3, r0
    return_value = return_value*AsynchPrescalerUserConfig;
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <ReturnTimeElapsed+0x50>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	fb00 f003 	mul.w	r0, r0, r3
    return_value = return_value >> WakeupTimerDivider;
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <ReturnTimeElapsed+0x54>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	40d8      	lsrs	r0, r3
 8001144:	e7ea      	b.n	800111c <ReturnTimeElapsed+0x10>
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001146:	4b04      	ldr	r3, [pc, #16]	; (8001158 <ReturnTimeElapsed+0x4c>)
 8001148:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <ReturnTimeElapsed+0x58>)
 800114e:	881b      	ldrh	r3, [r3, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001150:	4413      	add	r3, r2
 8001152:	1a18      	subs	r0, r3, r0
 8001154:	e7ef      	b.n	8001136 <ReturnTimeElapsed+0x2a>
 8001156:	bf00      	nop
 8001158:	20000090 	.word	0x20000090
 800115c:	200002d0 	.word	0x200002d0
 8001160:	200002d6 	.word	0x200002d6
 8001164:	200002d4 	.word	0x200002d4

08001168 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800116a:	4b49      	ldr	r3, [pc, #292]	; (8001290 <RescheduleTimerList+0x128>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001172:	d006      	beq.n	8001182 <RescheduleTimerList+0x1a>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001174:	4b47      	ldr	r3, [pc, #284]	; (8001294 <RescheduleTimerList+0x12c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	68d3      	ldr	r3, [r2, #12]
 800117c:	f013 0f04 	tst.w	r3, #4
 8001180:	d1fb      	bne.n	800117a <RescheduleTimerList+0x12>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001182:	4b44      	ldr	r3, [pc, #272]	; (8001294 <RescheduleTimerList+0x12c>)
 8001184:	681e      	ldr	r6, [r3, #0]
 8001186:	6832      	ldr	r2, [r6, #0]
 8001188:	6893      	ldr	r3, [r2, #8]
 800118a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800118e:	6093      	str	r3, [r2, #8]

  localTimerID = CurrentRunningTimerID;
 8001190:	4a41      	ldr	r2, [pc, #260]	; (8001298 <RescheduleTimerList+0x130>)
 8001192:	7813      	ldrb	r3, [r2, #0]
 8001194:	b2dc      	uxtb	r4, r3

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001196:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800119a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800119e:	68dd      	ldr	r5, [r3, #12]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80011a0:	f7ff ffb4 	bl	800110c <ReturnTimeElapsed>

  if(timecountleft < time_elapsed )
 80011a4:	4607      	mov	r7, r0
 80011a6:	42a8      	cmp	r0, r5
 80011a8:	d94d      	bls.n	8001246 <RescheduleTimerList+0xde>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80011aa:	4b3b      	ldr	r3, [pc, #236]	; (8001298 <RescheduleTimerList+0x130>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011b2:	2c06      	cmp	r4, #6
    wakeup_timer_value = 0;
 80011b4:	bf18      	it	ne
 80011b6:	2500      	movne	r5, #0
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011b8:	d05c      	beq.n	8001274 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80011ba:	4937      	ldr	r1, [pc, #220]	; (8001298 <RescheduleTimerList+0x130>)
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80011bc:	2000      	movs	r0, #0
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80011be:	4623      	mov	r3, r4
 80011c0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80011c4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80011c8:	68d2      	ldr	r2, [r2, #12]
 80011ca:	4297      	cmp	r7, r2
      aTimerContext[localTimerID].CountLeft = 0;
 80011cc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80011d0:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80011d4:	bf8f      	iteee	hi
 80011d6:	60e0      	strhi	r0, [r4, #12]
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80011d8:	68e2      	ldrls	r2, [r4, #12]
 80011da:	1bd2      	subls	r2, r2, r7
 80011dc:	60e2      	strls	r2, [r4, #12]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80011de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80011e2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80011e6:	7e5c      	ldrb	r4, [r3, #25]
 80011e8:	b2e4      	uxtb	r4, r4
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011ea:	2c06      	cmp	r4, #6
 80011ec:	d1e7      	bne.n	80011be <RescheduleTimerList+0x56>
  if(Value == 0)
 80011ee:	2d00      	cmp	r5, #0
 80011f0:	d040      	beq.n	8001274 <RescheduleTimerList+0x10c>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80011f2:	2d01      	cmp	r5, #1
 80011f4:	d947      	bls.n	8001286 <RescheduleTimerList+0x11e>
      Value -= 1;
 80011f6:	3d01      	subs	r5, #1
 80011f8:	b2ad      	uxth	r5, r5
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80011fa:	6832      	ldr	r2, [r6, #0]
 80011fc:	68d3      	ldr	r3, [r2, #12]
 80011fe:	f013 0f04 	tst.w	r3, #4
 8001202:	d0fb      	beq.n	80011fc <RescheduleTimerList+0x94>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001204:	68d3      	ldr	r3, [r2, #12]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f463 6390 	orn	r3, r3, #1152	; 0x480
 800120c:	60d3      	str	r3, [r2, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800120e:	4b23      	ldr	r3, [pc, #140]	; (800129c <RescheduleTimerList+0x134>)
 8001210:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001214:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001216:	2003      	movs	r0, #3
 8001218:	f001 f8f4 	bl	8002404 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800121c:	4a1c      	ldr	r2, [pc, #112]	; (8001290 <RescheduleTimerList+0x128>)
 800121e:	6953      	ldr	r3, [r2, #20]
 8001220:	0c1b      	lsrs	r3, r3, #16
 8001222:	041b      	lsls	r3, r3, #16
 8001224:	431d      	orrs	r5, r3
 8001226:	6155      	str	r5, [r2, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001228:	f7ff ff18 	bl	800105c <ReadRtcSsrValue>
 800122c:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <RescheduleTimerList+0x130>)
 800122e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8001232:	4b18      	ldr	r3, [pc, #96]	; (8001294 <RescheduleTimerList+0x12c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	6893      	ldr	r3, [r2, #8]
 800123a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800123e:	6093      	str	r3, [r2, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001240:	f3af 8000 	nop.w
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);

  return ;
}
 8001244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001246:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <RescheduleTimerList+0x138>)
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	fa10 f383 	uxtah	r3, r0, r3
 800124e:	42ab      	cmp	r3, r5
 8001250:	d209      	bcs.n	8001266 <RescheduleTimerList+0xfe>
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <RescheduleTimerList+0x138>)
 8001254:	881d      	ldrh	r5, [r3, #0]
 8001256:	b2ad      	uxth	r5, r5
      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <RescheduleTimerList+0x130>)
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001260:	2c06      	cmp	r4, #6
 8001262:	d1aa      	bne.n	80011ba <RescheduleTimerList+0x52>
 8001264:	e7c3      	b.n	80011ee <RescheduleTimerList+0x86>
      wakeup_timer_value = timecountleft - time_elapsed;
 8001266:	1a2d      	subs	r5, r5, r0
 8001268:	b2ad      	uxth	r5, r5
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <RescheduleTimerList+0x130>)
 800126c:	2201      	movs	r2, #1
 800126e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8001272:	e7f5      	b.n	8001260 <RescheduleTimerList+0xf8>
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001274:	f7ff fef2 	bl	800105c <ReadRtcSsrValue>
 8001278:	4b07      	ldr	r3, [pc, #28]	; (8001298 <RescheduleTimerList+0x130>)
 800127a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800127e:	2003      	movs	r0, #3
 8001280:	f001 f8a8 	bl	80023d4 <HAL_NVIC_SetPendingIRQ>
 8001284:	e7de      	b.n	8001244 <RescheduleTimerList+0xdc>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001286:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <RescheduleTimerList+0x13c>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d1b3      	bne.n	80011f6 <RescheduleTimerList+0x8e>
 800128e:	e7b4      	b.n	80011fa <RescheduleTimerList+0x92>
 8001290:	40002800 	.word	0x40002800
 8001294:	200002d8 	.word	0x200002d8
 8001298:	20000090 	.word	0x20000090
 800129c:	58000800 	.word	0x58000800
 80012a0:	200002d2 	.word	0x200002d2
 80012a4:	200002d6 	.word	0x200002d6

080012a8 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 80012a8:	b510      	push	{r4, lr}
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 80012aa:	4b49      	ldr	r3, [pc, #292]	; (80013d0 <HW_TS_Init+0x128>)
 80012ac:	6019      	str	r1, [r3, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80012ae:	680b      	ldr	r3, [r1, #0]
 80012b0:	22ca      	movs	r2, #202	; 0xca
 80012b2:	625a      	str	r2, [r3, #36]	; 0x24
 80012b4:	680b      	ldr	r3, [r1, #0]
 80012b6:	2253      	movs	r2, #83	; 0x53
 80012b8:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80012ba:	4946      	ldr	r1, [pc, #280]	; (80013d4 <HW_TS_Init+0x12c>)
 80012bc:	688b      	ldr	r3, [r1, #8]
 80012be:	f043 0320 	orr.w	r3, r3, #32
 80012c2:	608b      	str	r3, [r1, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80012c4:	688b      	ldr	r3, [r1, #8]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	f1c3 0304 	rsb	r3, r3, #4
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	4b41      	ldr	r3, [pc, #260]	; (80013d8 <HW_TS_Init+0x130>)
 80012d2:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80012d4:	690b      	ldr	r3, [r1, #16]
 80012d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012da:	f44f 01fe 	mov.w	r1, #8323072	; 0x7f0000
 80012de:	fa91 f1a1 	rbit	r1, r1
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 80012e2:	fab1 f181 	clz	r1, r1
 80012e6:	40cb      	lsrs	r3, r1
 80012e8:	3301      	adds	r3, #1
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	493b      	ldr	r1, [pc, #236]	; (80013dc <HW_TS_Init+0x134>)
 80012ee:	700b      	strb	r3, [r1, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80012f0:	4938      	ldr	r1, [pc, #224]	; (80013d4 <HW_TS_Init+0x12c>)
 80012f2:	6909      	ldr	r1, [r1, #16]
 80012f4:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80012f8:	3101      	adds	r1, #1
 80012fa:	4c39      	ldr	r4, [pc, #228]	; (80013e0 <HW_TS_Init+0x138>)
 80012fc:	8021      	strh	r1, [r4, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80012fe:	3901      	subs	r1, #1
 8001300:	fb03 f301 	mul.w	r3, r3, r1
 8001304:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001308:	40d3      	lsrs	r3, r2

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800130a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800130e:	4293      	cmp	r3, r2
 8001310:	d94e      	bls.n	80013b0 <HW_TS_Init+0x108>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001312:	4b34      	ldr	r3, [pc, #208]	; (80013e4 <HW_TS_Init+0x13c>)
 8001314:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001318:	801a      	strh	r2, [r3, #0]
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800131a:	4b33      	ldr	r3, [pc, #204]	; (80013e8 <HW_TS_Init+0x140>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001322:	601a      	str	r2, [r3, #0]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001324:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001328:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800132c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001330:	2800      	cmp	r0, #0
 8001332:	d141      	bne.n	80013b8 <HW_TS_Init+0x110>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001334:	4b2d      	ldr	r3, [pc, #180]	; (80013ec <HW_TS_Init+0x144>)
 8001336:	2201      	movs	r2, #1
 8001338:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800133c:	f04f 32ff 	mov.w	r2, #4294967295
 8001340:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001344:	2200      	movs	r2, #0
 8001346:	741a      	strb	r2, [r3, #16]
 8001348:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800134c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001350:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001354:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001358:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800135c:	2206      	movs	r2, #6
 800135e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001360:	4c1b      	ldr	r4, [pc, #108]	; (80013d0 <HW_TS_Init+0x128>)
 8001362:	6822      	ldr	r2, [r4, #0]
 8001364:	6811      	ldr	r1, [r2, #0]
 8001366:	688b      	ldr	r3, [r1, #8]
 8001368:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800136c:	608b      	str	r3, [r1, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800136e:	6812      	ldr	r2, [r2, #0]
 8001370:	68d3      	ldr	r3, [r2, #12]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8001378:	60d3      	str	r3, [r2, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800137a:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <HW_TS_Init+0x140>)
 800137c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001380:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001382:	2003      	movs	r0, #3
 8001384:	f001 f83e 	bl	8002404 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001388:	6823      	ldr	r3, [r4, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	6893      	ldr	r3, [r2, #8]
 800138e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001392:	6093      	str	r3, [r2, #8]
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001394:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <HW_TS_Init+0x128>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	22ff      	movs	r2, #255	; 0xff
 800139c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800139e:	2200      	movs	r2, #0
 80013a0:	2103      	movs	r1, #3
 80013a2:	4608      	mov	r0, r1
 80013a4:	f000 ff8a 	bl	80022bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 ffcb 	bl	8002344 <HAL_NVIC_EnableIRQ>

  return;
}
 80013ae:	bd10      	pop	{r4, pc}
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	4a0c      	ldr	r2, [pc, #48]	; (80013e4 <HW_TS_Init+0x13c>)
 80013b4:	8013      	strh	r3, [r2, #0]
 80013b6:	e7b0      	b.n	800131a <HW_TS_Init+0x72>
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <HW_TS_Init+0x128>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80013c4:	d0e6      	beq.n	8001394 <HW_TS_Init+0xec>
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80013c6:	2003      	movs	r0, #3
 80013c8:	f001 f804 	bl	80023d4 <HAL_NVIC_SetPendingIRQ>
 80013cc:	e7e2      	b.n	8001394 <HW_TS_Init+0xec>
 80013ce:	bf00      	nop
 80013d0:	200002d8 	.word	0x200002d8
 80013d4:	40002800 	.word	0x40002800
 80013d8:	200002d6 	.word	0x200002d6
 80013dc:	200002d0 	.word	0x200002d0
 80013e0:	200002d4 	.word	0x200002d4
 80013e4:	200002d2 	.word	0x200002d2
 80013e8:	58000800 	.word	0x58000800
 80013ec:	20000090 	.word	0x20000090

080013f0 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80013f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013f2:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80013f6:	b672      	cpsid	i
 80013f8:	2400      	movs	r4, #0
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80013fa:	4f12      	ldr	r7, [pc, #72]	; (8001444 <HW_TS_Create+0x54>)
 80013fc:	b2e5      	uxtb	r5, r4
 80013fe:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8001402:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
 8001406:	7c36      	ldrb	r6, [r6, #16]
 8001408:	b126      	cbz	r6, 8001414 <HW_TS_Create+0x24>
  {
    loop++;
 800140a:	3501      	adds	r5, #1
 800140c:	b2ed      	uxtb	r5, r5
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800140e:	3401      	adds	r4, #1
 8001410:	2c06      	cmp	r4, #6
 8001412:	d1f3      	bne.n	80013fc <HW_TS_Create+0xc>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001414:	2d06      	cmp	r5, #6
 8001416:	d010      	beq.n	800143a <HW_TS_Create+0x4a>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001418:	4e0a      	ldr	r6, [pc, #40]	; (8001444 <HW_TS_Create+0x54>)
 800141a:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 800141e:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 8001422:	f04f 0e01 	mov.w	lr, #1
 8001426:	f884 e010 	strb.w	lr, [r4, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800142a:	f38c 8810 	msr	PRIMASK, ip

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 800142e:	6160      	str	r0, [r4, #20]
    aTimerContext[loop].TimerMode = TimerMode;
 8001430:	7462      	strb	r2, [r4, #17]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001432:	6063      	str	r3, [r4, #4]
    *pTimerId = loop;
 8001434:	700d      	strb	r5, [r1, #0]

    localreturnstatus = hw_ts_Successful;
 8001436:	2000      	movs	r0, #0

    localreturnstatus = hw_ts_Failed;
  }

  return(localreturnstatus);
}
 8001438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800143a:	f38c 8810 	msr	PRIMASK, ip
    localreturnstatus = hw_ts_Failed;
 800143e:	2001      	movs	r0, #1
 8001440:	e7fa      	b.n	8001438 <HW_TS_Create+0x48>
 8001442:	bf00      	nop
 8001444:	20000090 	.word	0x20000090

08001448 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001448:	b570      	push	{r4, r5, r6, lr}
 800144a:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800144c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001450:	b672      	cpsid	i
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001452:	2003      	movs	r0, #3
 8001454:	f000 ff8c 	bl	8002370 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001458:	4b26      	ldr	r3, [pc, #152]	; (80014f4 <HW_TS_Stop+0xac>)
 800145a:	681d      	ldr	r5, [r3, #0]
 800145c:	682b      	ldr	r3, [r5, #0]
 800145e:	22ca      	movs	r2, #202	; 0xca
 8001460:	625a      	str	r2, [r3, #36]	; 0x24
 8001462:	682b      	ldr	r3, [r5, #0]
 8001464:	2253      	movs	r2, #83	; 0x53
 8001466:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001468:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800146c:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <HW_TS_Stop+0xb0>)
 800146e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001472:	7c1b      	ldrb	r3, [r3, #16]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d00a      	beq.n	8001490 <HW_TS_Stop+0x48>
      RescheduleTimerList();
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800147a:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <HW_TS_Stop+0xac>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	22ff      	movs	r2, #255	; 0xff
 8001482:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001484:	2003      	movs	r0, #3
 8001486:	f000 ff5d 	bl	8002344 <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800148a:	f386 8810 	msr	PRIMASK, r6
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
}
 800148e:	bd70      	pop	{r4, r5, r6, pc}
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001490:	2100      	movs	r1, #0
 8001492:	4620      	mov	r0, r4
 8001494:	f7ff fdf4 	bl	8001080 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001498:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <HW_TS_Stop+0xb0>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b2db      	uxtb	r3, r3
    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800149e:	2b06      	cmp	r3, #6
 80014a0:	d007      	beq.n	80014b2 <HW_TS_Stop+0x6a>
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80014a2:	4a15      	ldr	r2, [pc, #84]	; (80014f8 <HW_TS_Stop+0xb0>)
 80014a4:	7852      	ldrb	r2, [r2, #1]
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d0e6      	beq.n	800147a <HW_TS_Stop+0x32>
      RescheduleTimerList();
 80014ac:	f7ff fe5c 	bl	8001168 <RescheduleTimerList>
 80014b0:	e7e3      	b.n	800147a <HW_TS_Stop+0x32>
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80014b2:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HW_TS_Stop+0xb4>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80014ba:	d004      	beq.n	80014c6 <HW_TS_Stop+0x7e>
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80014bc:	682a      	ldr	r2, [r5, #0]
 80014be:	68d3      	ldr	r3, [r2, #12]
 80014c0:	f013 0f04 	tst.w	r3, #4
 80014c4:	d1fb      	bne.n	80014be <HW_TS_Stop+0x76>
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80014c6:	682a      	ldr	r2, [r5, #0]
 80014c8:	6893      	ldr	r3, [r2, #8]
 80014ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014ce:	6093      	str	r3, [r2, #8]
      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80014d0:	682a      	ldr	r2, [r5, #0]
 80014d2:	68d3      	ldr	r3, [r2, #12]
 80014d4:	f013 0f04 	tst.w	r3, #4
 80014d8:	d0fb      	beq.n	80014d2 <HW_TS_Stop+0x8a>
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80014da:	68d3      	ldr	r3, [r2, #12]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	f463 6390 	orn	r3, r3, #1152	; 0x480
 80014e2:	60d3      	str	r3, [r2, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HW_TS_Stop+0xb8>)
 80014e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80014ea:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80014ec:	2003      	movs	r0, #3
 80014ee:	f000 ff89 	bl	8002404 <HAL_NVIC_ClearPendingIRQ>
 80014f2:	e7c2      	b.n	800147a <HW_TS_Stop+0x32>
 80014f4:	200002d8 	.word	0x200002d8
 80014f8:	20000090 	.word	0x20000090
 80014fc:	40002800 	.word	0x40002800
 8001500:	58000800 	.word	0x58000800

08001504 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001506:	4604      	mov	r4, r0
 8001508:	460e      	mov	r6, r1

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800150a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800150e:	4b6a      	ldr	r3, [pc, #424]	; (80016b8 <HW_TS_Start+0x1b4>)
 8001510:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001514:	7c1b      	ldrb	r3, [r3, #16]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d048      	beq.n	80015ae <HW_TS_Start+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800151c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001520:	b672      	cpsid	i
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001522:	2003      	movs	r0, #3
 8001524:	f000 ff24 	bl	8002370 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001528:	4b64      	ldr	r3, [pc, #400]	; (80016bc <HW_TS_Start+0x1b8>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	21ca      	movs	r1, #202	; 0xca
 8001530:	6251      	str	r1, [r2, #36]	; 0x24
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2253      	movs	r2, #83	; 0x53
 8001536:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001538:	4a5f      	ldr	r2, [pc, #380]	; (80016b8 <HW_TS_Start+0x1b4>)
 800153a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800153e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001542:	2102      	movs	r1, #2
 8001544:	7419      	strb	r1, [r3, #16]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001546:	60de      	str	r6, [r3, #12]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001548:	609e      	str	r6, [r3, #8]
  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800154a:	7813      	ldrb	r3, [r2, #0]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b06      	cmp	r3, #6
 8001550:	d130      	bne.n	80015b4 <HW_TS_Start+0xb0>
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001552:	4613      	mov	r3, r2
 8001554:	7812      	ldrb	r2, [r2, #0]
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	705a      	strb	r2, [r3, #1]
    CurrentRunningTimerID = TimerID;
 800155a:	701c      	strb	r4, [r3, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 800155c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001560:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8001564:	2106      	movs	r1, #6
 8001566:	7651      	strb	r1, [r2, #25]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001568:	f04f 32ff 	mov.w	r2, #4294967295
 800156c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    time_elapsed = 0;
 8001570:	2000      	movs	r0, #0

  time_elapsed =  linkTimer(timer_id);

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001572:	4a51      	ldr	r2, [pc, #324]	; (80016b8 <HW_TS_Start+0x1b4>)
 8001574:	7813      	ldrb	r3, [r2, #0]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001576:	7852      	ldrb	r2, [r2, #1]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	4293      	cmp	r3, r2
 800157c:	f040 8099 	bne.w	80016b2 <HW_TS_Start+0x1ae>
  {
    RescheduleTimerList();
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001580:	4b4d      	ldr	r3, [pc, #308]	; (80016b8 <HW_TS_Start+0x1b4>)
 8001582:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001586:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800158a:	68d2      	ldr	r2, [r2, #12]
 800158c:	1a10      	subs	r0, r2, r0
 800158e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8001592:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8001596:	60e0      	str	r0, [r4, #12]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001598:	4b48      	ldr	r3, [pc, #288]	; (80016bc <HW_TS_Start+0x1b8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	22ff      	movs	r2, #255	; 0xff
 80015a0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80015a2:	2003      	movs	r0, #3
 80015a4:	f000 fece 	bl	8002344 <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015a8:	f385 8810 	msr	PRIMASK, r5
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
}
 80015ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HW_TS_Stop( timer_id );
 80015ae:	f7ff ff4b 	bl	8001448 <HW_TS_Stop>
 80015b2:	e7b3      	b.n	800151c <HW_TS_Start+0x18>
    time_elapsed = ReturnTimeElapsed();
 80015b4:	f7ff fdaa 	bl	800110c <ReturnTimeElapsed>
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80015b8:	4b3f      	ldr	r3, [pc, #252]	; (80016b8 <HW_TS_Start+0x1b4>)
 80015ba:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80015be:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80015c2:	68d1      	ldr	r1, [r2, #12]
 80015c4:	4401      	add	r1, r0
 80015c6:	60d1      	str	r1, [r2, #12]
    time_left = aTimerContext[TimerID].CountLeft;
 80015c8:	68d1      	ldr	r1, [r2, #12]
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80015ca:	781a      	ldrb	r2, [r3, #0]
 80015cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80015d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	4299      	cmp	r1, r3
 80015d8:	d33b      	bcc.n	8001652 <HW_TS_Start+0x14e>
      timer_id_lookup = CurrentRunningTimerID;
 80015da:	4e37      	ldr	r6, [pc, #220]	; (80016b8 <HW_TS_Start+0x1b4>)
 80015dc:	7833      	ldrb	r3, [r6, #0]
 80015de:	b2da      	uxtb	r2, r3
      next_id = aTimerContext[timer_id_lookup].NextID;
 80015e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80015e4:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80015e8:	7e5b      	ldrb	r3, [r3, #25]
 80015ea:	b2db      	uxtb	r3, r3
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80015ec:	2b06      	cmp	r3, #6
 80015ee:	d014      	beq.n	800161a <HW_TS_Start+0x116>
 80015f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80015f4:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	4299      	cmp	r1, r3
 80015fc:	d30d      	bcc.n	800161a <HW_TS_Start+0x116>
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80015fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001602:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8001606:	7e53      	ldrb	r3, [r2, #25]
 8001608:	b2da      	uxtb	r2, r3
        next_id = aTimerContext[timer_id_lookup].NextID;
 800160a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800160e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001612:	7e5b      	ldrb	r3, [r3, #25]
 8001614:	b2db      	uxtb	r3, r3
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001616:	2b06      	cmp	r3, #6
 8001618:	d1ea      	bne.n	80015f0 <HW_TS_Start+0xec>
  next_id = aTimerContext[RefTimerID].NextID;
 800161a:	4694      	mov	ip, r2
 800161c:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 8001620:	4f25      	ldr	r7, [pc, #148]	; (80016b8 <HW_TS_Start+0x1b4>)
 8001622:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
 8001626:	7e73      	ldrb	r3, [r6, #25]
 8001628:	b2db      	uxtb	r3, r3
  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800162a:	2b06      	cmp	r3, #6
 800162c:	d004      	beq.n	8001638 <HW_TS_Start+0x134>
    aTimerContext[next_id].PreviousID = TimerID;
 800162e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8001632:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8001636:	760c      	strb	r4, [r1, #24]
  aTimerContext[TimerID].NextID = next_id;
 8001638:	491f      	ldr	r1, [pc, #124]	; (80016b8 <HW_TS_Start+0x1b4>)
 800163a:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 800163e:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8001642:	7673      	strb	r3, [r6, #25]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001644:	7632      	strb	r2, [r6, #24]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001646:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
 800164a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800164e:	764c      	strb	r4, [r1, #25]
  return;
 8001650:	e78f      	b.n	8001572 <HW_TS_Start+0x6e>
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001652:	4a19      	ldr	r2, [pc, #100]	; (80016b8 <HW_TS_Start+0x1b4>)
 8001654:	7813      	ldrb	r3, [r2, #0]
 8001656:	b2db      	uxtb	r3, r3
  if(RefTimerID != CurrentRunningTimerID)
 8001658:	7812      	ldrb	r2, [r2, #0]
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	4293      	cmp	r3, r2
 800165e:	d01c      	beq.n	800169a <HW_TS_Start+0x196>
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001660:	4915      	ldr	r1, [pc, #84]	; (80016b8 <HW_TS_Start+0x1b4>)
 8001662:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001666:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800166a:	7e12      	ldrb	r2, [r2, #24]
 800166c:	b2d6      	uxtb	r6, r2
    aTimerContext[previous_id].NextID = TimerID;
 800166e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001672:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8001676:	7654      	strb	r4, [r2, #25]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001678:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800167c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8001680:	7653      	strb	r3, [r2, #25]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001682:	7616      	strb	r6, [r2, #24]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001684:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001688:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800168c:	760c      	strb	r4, [r1, #24]
      PreviousRunningTimerID = CurrentRunningTimerID;
 800168e:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <HW_TS_Start+0x1b4>)
 8001690:	781a      	ldrb	r2, [r3, #0]
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	705a      	strb	r2, [r3, #1]
      CurrentRunningTimerID = TimerID;
 8001696:	701c      	strb	r4, [r3, #0]
 8001698:	e76b      	b.n	8001572 <HW_TS_Start+0x6e>
    aTimerContext[TimerID].NextID = RefTimerID;
 800169a:	4a07      	ldr	r2, [pc, #28]	; (80016b8 <HW_TS_Start+0x1b4>)
 800169c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80016a0:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80016a4:	764b      	strb	r3, [r1, #25]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80016a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80016aa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80016ae:	761c      	strb	r4, [r3, #24]
 80016b0:	e7ed      	b.n	800168e <HW_TS_Start+0x18a>
    RescheduleTimerList();
 80016b2:	f7ff fd59 	bl	8001168 <RescheduleTimerList>
 80016b6:	e76f      	b.n	8001598 <HW_TS_Start+0x94>
 80016b8:	20000090 	.word	0x20000090
 80016bc:	200002d8 	.word	0x200002d8

080016c0 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80016c0:	b508      	push	{r3, lr}
  pTimerCallBack();
 80016c2:	4790      	blx	r2

  return;
}
 80016c4:	bd08      	pop	{r3, pc}
	...

080016c8 <HW_TS_RTC_Wakeup_Handler>:
{
 80016c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016ca:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80016ce:	b672      	cpsid	i
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80016d0:	4b37      	ldr	r3, [pc, #220]	; (80017b0 <HW_TS_RTC_Wakeup_Handler+0xe8>)
 80016d2:	6819      	ldr	r1, [r3, #0]
 80016d4:	680b      	ldr	r3, [r1, #0]
 80016d6:	22ca      	movs	r2, #202	; 0xca
 80016d8:	625a      	str	r2, [r3, #36]	; 0x24
 80016da:	680b      	ldr	r3, [r1, #0]
 80016dc:	2253      	movs	r2, #83	; 0x53
 80016de:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 80016e0:	680a      	ldr	r2, [r1, #0]
 80016e2:	6893      	ldr	r3, [r2, #8]
 80016e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80016e8:	6093      	str	r3, [r2, #8]
  local_current_running_timer_id = CurrentRunningTimerID;
 80016ea:	4a32      	ldr	r2, [pc, #200]	; (80017b4 <HW_TS_RTC_Wakeup_Handler+0xec>)
 80016ec:	7813      	ldrb	r3, [r2, #0]
 80016ee:	b2dd      	uxtb	r5, r3
  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80016f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80016f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80016f8:	7c1b      	ldrb	r3, [r3, #16]
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d015      	beq.n	800172c <HW_TS_RTC_Wakeup_Handler+0x64>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001700:	680a      	ldr	r2, [r1, #0]
 8001702:	68d3      	ldr	r3, [r2, #12]
 8001704:	f013 0f04 	tst.w	r3, #4
 8001708:	d0fb      	beq.n	8001702 <HW_TS_RTC_Wakeup_Handler+0x3a>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800170a:	68d3      	ldr	r3, [r2, #12]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8001712:	60d3      	str	r3, [r2, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001714:	4b28      	ldr	r3, [pc, #160]	; (80017b8 <HW_TS_RTC_Wakeup_Handler+0xf0>)
 8001716:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800171a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800171c:	f384 8810 	msr	PRIMASK, r4
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001720:	4b23      	ldr	r3, [pc, #140]	; (80017b0 <HW_TS_RTC_Wakeup_Handler+0xe8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	22ff      	movs	r2, #255	; 0xff
 8001728:	625a      	str	r2, [r3, #36]	; 0x24
}
 800172a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800172c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001730:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001734:	685e      	ldr	r6, [r3, #4]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001736:	695f      	ldr	r7, [r3, #20]
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001738:	f892 3098 	ldrb.w	r3, [r2, #152]	; 0x98
 800173c:	2b00      	cmp	r3, #0
 800173e:	d032      	beq.n	80017a6 <HW_TS_RTC_Wakeup_Handler+0xde>
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001740:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001744:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001748:	7c5b      	ldrb	r3, [r3, #17]
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b01      	cmp	r3, #1
 800174e:	d012      	beq.n	8001776 <HW_TS_RTC_Wakeup_Handler+0xae>
 8001750:	f384 8810 	msr	PRIMASK, r4
        HW_TS_Stop(local_current_running_timer_id);
 8001754:	4628      	mov	r0, r5
 8001756:	f7ff fe77 	bl	8001448 <HW_TS_Stop>
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <HW_TS_RTC_Wakeup_Handler+0xe8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	21ca      	movs	r1, #202	; 0xca
 8001762:	6251      	str	r1, [r2, #36]	; 0x24
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2253      	movs	r2, #83	; 0x53
 8001768:	625a      	str	r2, [r3, #36]	; 0x24
      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 800176a:	4632      	mov	r2, r6
 800176c:	4629      	mov	r1, r5
 800176e:	4638      	mov	r0, r7
 8001770:	f7ff ffa6 	bl	80016c0 <HW_TS_RTC_Int_AppNot>
 8001774:	e7d4      	b.n	8001720 <HW_TS_RTC_Wakeup_Handler+0x58>
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001776:	2101      	movs	r1, #1
 8001778:	4628      	mov	r0, r5
 800177a:	f7ff fc81 	bl	8001080 <UnlinkTimer>
 800177e:	f384 8810 	msr	PRIMASK, r4
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001782:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001786:	4a0b      	ldr	r2, [pc, #44]	; (80017b4 <HW_TS_RTC_Wakeup_Handler+0xec>)
 8001788:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800178c:	6899      	ldr	r1, [r3, #8]
 800178e:	4628      	mov	r0, r5
 8001790:	f7ff feb8 	bl	8001504 <HW_TS_Start>
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HW_TS_RTC_Wakeup_Handler+0xe8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	21ca      	movs	r1, #202	; 0xca
 800179c:	6251      	str	r1, [r2, #36]	; 0x24
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2253      	movs	r2, #83	; 0x53
 80017a2:	625a      	str	r2, [r3, #36]	; 0x24
 80017a4:	e7e1      	b.n	800176a <HW_TS_RTC_Wakeup_Handler+0xa2>
      RescheduleTimerList();
 80017a6:	f7ff fcdf 	bl	8001168 <RescheduleTimerList>
 80017aa:	f384 8810 	msr	PRIMASK, r4
}
 80017ae:	e7b7      	b.n	8001720 <HW_TS_RTC_Wakeup_Handler+0x58>
 80017b0:	200002d8 	.word	0x200002d8
 80017b4:	20000090 	.word	0x20000090
 80017b8:	58000800 	.word	0x58000800

080017bc <HW_UART_Transmit_DMA>:
hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
    HAL_StatusTypeDef hal_status = HAL_OK;
    hw_status_t hw_status = hw_uart_ok;

    switch (hw_uart_id)
 80017bc:	b108      	cbz	r0, 80017c2 <HW_UART_Transmit_DMA+0x6>
    hw_status_t hw_status = hw_uart_ok;
 80017be:	2000      	movs	r0, #0
        default:
            break;
    }

    return hw_status;
}
 80017c0:	4770      	bx	lr
{
 80017c2:	b508      	push	{r3, lr}
            HW_huart1TxCb = cb;
 80017c4:	4807      	ldr	r0, [pc, #28]	; (80017e4 <HW_UART_Transmit_DMA+0x28>)
 80017c6:	6003      	str	r3, [r0, #0]
            huart1.Instance = USART1;
 80017c8:	4807      	ldr	r0, [pc, #28]	; (80017e8 <HW_UART_Transmit_DMA+0x2c>)
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <HW_UART_Transmit_DMA+0x30>)
 80017cc:	6003      	str	r3, [r0, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80017ce:	f003 fd57 	bl	8005280 <HAL_UART_Transmit_DMA>
    switch (hal_status)
 80017d2:	2802      	cmp	r0, #2
 80017d4:	d005      	beq.n	80017e2 <HW_UART_Transmit_DMA+0x26>
 80017d6:	2803      	cmp	r0, #3
 80017d8:	d003      	beq.n	80017e2 <HW_UART_Transmit_DMA+0x26>
    hw_status_t hw_status = hw_uart_ok;
 80017da:	2801      	cmp	r0, #1
 80017dc:	bf14      	ite	ne
 80017de:	2000      	movne	r0, #0
 80017e0:	2001      	moveq	r0, #1
}
 80017e2:	bd08      	pop	{r3, pc}
 80017e4:	20000428 	.word	0x20000428
 80017e8:	200005c4 	.word	0x200005c4
 80017ec:	40013800 	.word	0x40013800

080017f0 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80017f0:	b508      	push	{r3, lr}
    switch ((uint32_t)huart->Instance)
 80017f2:	6802      	ldr	r2, [r0, #0]
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <HAL_UART_TxCpltCallback+0x18>)
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d000      	beq.n	80017fc <HAL_UART_TxCpltCallback+0xc>
        default:
            break;
    }

    return;
}
 80017fa:	bd08      	pop	{r3, pc}
            if(HW_huart1TxCb)
 80017fc:	4b03      	ldr	r3, [pc, #12]	; (800180c <HAL_UART_TxCpltCallback+0x1c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0fa      	beq.n	80017fa <HAL_UART_TxCpltCallback+0xa>
                HW_huart1TxCb();
 8001804:	4798      	blx	r3
    return;
 8001806:	e7f8      	b.n	80017fa <HAL_UART_TxCpltCallback+0xa>
 8001808:	40013800 	.word	0x40013800
 800180c:	20000428 	.word	0x20000428

08001810 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 8001810:	b508      	push	{r3, lr}
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001812:	4805      	ldr	r0, [pc, #20]	; (8001828 <MX_IPCC_Init+0x18>)
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <MX_IPCC_Init+0x1c>)
 8001816:	6003      	str	r3, [r0, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001818:	f001 f9e0 	bl	8002bdc <HAL_IPCC_Init>
 800181c:	b900      	cbnz	r0, 8001820 <MX_IPCC_Init+0x10>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800181e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001820:	f000 f9b0 	bl	8001b84 <Error_Handler>
}
 8001824:	e7fb      	b.n	800181e <MX_IPCC_Init+0xe>
 8001826:	bf00      	nop
 8001828:	2000042c 	.word	0x2000042c
 800182c:	58000c00 	.word	0x58000c00

08001830 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{

  if(ipccHandle->Instance==IPCC)
 8001830:	6802      	ldr	r2, [r0, #0]
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_IPCC_MspInit+0x4c>)
 8001834:	429a      	cmp	r2, r3
 8001836:	d000      	beq.n	800183a <HAL_IPCC_MspInit+0xa>
 8001838:	4770      	bx	lr
{
 800183a:	b500      	push	{lr}
 800183c:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB3ENR, Periphs);
 800183e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001842:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001844:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001848:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800184a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800184c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001850:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001852:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001854:	2200      	movs	r2, #0
 8001856:	4611      	mov	r1, r2
 8001858:	202c      	movs	r0, #44	; 0x2c
 800185a:	f000 fd2f 	bl	80022bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800185e:	202c      	movs	r0, #44	; 0x2c
 8001860:	f000 fd70 	bl	8002344 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001864:	2200      	movs	r2, #0
 8001866:	4611      	mov	r1, r2
 8001868:	202d      	movs	r0, #45	; 0x2d
 800186a:	f000 fd27 	bl	80022bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800186e:	202d      	movs	r0, #45	; 0x2d
 8001870:	f000 fd68 	bl	8002344 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8001874:	b003      	add	sp, #12
 8001876:	f85d fb04 	ldr.w	pc, [sp], #4
 800187a:	bf00      	nop
 800187c:	58000c00 	.word	0x58000c00

08001880 <__io_getchar>:

	HAL_UART_Transmit(&huart1, &ch, 1, 100);
}

int __io_getchar(void)
{
 8001880:	b500      	push	{lr}
 8001882:	b083      	sub	sp, #12
	uint8_t ch = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_UART_Receive(&huart1, &ch, 1, 100);
 800188a:	2364      	movs	r3, #100	; 0x64
 800188c:	2201      	movs	r2, #1
 800188e:	f10d 0107 	add.w	r1, sp, #7
 8001892:	4804      	ldr	r0, [pc, #16]	; (80018a4 <__io_getchar+0x24>)
 8001894:	f004 fa49 	bl	8005d2a <HAL_UART_Receive>
	return ch;
}
 8001898:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800189c:	b003      	add	sp, #12
 800189e:	f85d fb04 	ldr.w	pc, [sp], #4
 80018a2:	bf00      	nop
 80018a4:	200005c4 	.word	0x200005c4

080018a8 <hal_spi_in_out>:



#if 1
uint8_t hal_spi_in_out( const uint8_t in_data )
{
 80018a8:	b500      	push	{lr}
 80018aa:	b087      	sub	sp, #28
 80018ac:	f88d 000f 	strb.w	r0, [sp, #15]

#if 1

	uint8_t data = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f88d 3017 	strb.w	r3, [sp, #23]

//    HAL_SPI_Transmit( &hspi1, (uint8_t *) &data, 1, 1000);
//    HAL_SPI_Receive( &hspi1, (uint8_t *) &data, 1, 1000);

    HAL_SPI_TransmitReceive(&hspi1, &in_data, &data, 1, 1000);
 80018b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	2301      	movs	r3, #1
 80018be:	f10d 0217 	add.w	r2, sp, #23
 80018c2:	f10d 010f 	add.w	r1, sp, #15
 80018c6:	4804      	ldr	r0, [pc, #16]	; (80018d8 <hal_spi_in_out+0x30>)
 80018c8:	f003 fb26 	bl	8004f18 <HAL_SPI_TransmitReceive>
//        {
//        };
//        return LL_SPI_ReceiveData8( &huart1 );

#endif
}
 80018cc:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80018d0:	b007      	add	sp, #28
 80018d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80018d6:	bf00      	nop
 80018d8:	200004a0 	.word	0x200004a0

080018dc <my_lr1110_hal_wait_on_busy>:
}



void my_lr1110_hal_wait_on_busy( void )
{
 80018dc:	b538      	push	{r3, r4, r5, lr}

    while( HAL_GPIO_ReadPin(LR_BUSY_GPIO_Port, LR_BUSY_Pin) == 1 )
 80018de:	4d04      	ldr	r5, [pc, #16]	; (80018f0 <my_lr1110_hal_wait_on_busy+0x14>)
 80018e0:	2401      	movs	r4, #1
 80018e2:	4621      	mov	r1, r4
 80018e4:	4628      	mov	r0, r5
 80018e6:	f001 f91f 	bl	8002b28 <HAL_GPIO_ReadPin>
 80018ea:	2801      	cmp	r0, #1
 80018ec:	d0f9      	beq.n	80018e2 <my_lr1110_hal_wait_on_busy+0x6>
    {
    };
}
 80018ee:	bd38      	pop	{r3, r4, r5, pc}
 80018f0:	48000400 	.word	0x48000400

080018f4 <my_lr1110_hal_check_device_ready>:

void my_lr1110_hal_check_device_ready(void )
{
 80018f4:	b508      	push	{r3, lr}

	        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2110      	movs	r1, #16
 80018fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018fe:	f001 f925 	bl	8002b4c <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 1);
 8001902:	2201      	movs	r2, #1
 8001904:	2110      	movs	r1, #16
 8001906:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800190a:	f001 f91f 	bl	8002b4c <HAL_GPIO_WritePin>
        my_lr1110_hal_wait_on_busy( );
 800190e:	f7ff ffe5 	bl	80018dc <my_lr1110_hal_wait_on_busy>
//        hal_gpio_set_value( lr1110_context->nss, 0 );
//        hal_gpio_set_value( lr1110_context->nss, 1 );
//        lr1110_hal_wait_on_busy( lr1110_context->busy );
//        radio_mode = RADIO_AWAKE;
//    }
}
 8001912:	bd08      	pop	{r3, pc}

08001914 <my_lr1110_hal_read>:
#endif
}

void my_lr1110_hal_read( const uint8_t* command, const uint16_t command_length,
                                     uint8_t* data, const uint16_t data_length )
{
 8001914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001918:	4681      	mov	r9, r0
 800191a:	460e      	mov	r6, r1
 800191c:	4690      	mov	r8, r2
 800191e:	461f      	mov	r7, r3
    my_lr1110_hal_check_device_ready(  );
 8001920:	f7ff ffe8 	bl	80018f4 <my_lr1110_hal_check_device_ready>

    // Put NSS low to start spi transaction
    //    hal_gpio_set_value( lr1110_context->nss, 0 );
    HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 0);
 8001924:	2200      	movs	r2, #0
 8001926:	2110      	movs	r1, #16
 8001928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192c:	f001 f90e 	bl	8002b4c <HAL_GPIO_WritePin>

    HAL_Delay(1);
 8001930:	2001      	movs	r0, #1
 8001932:	f7ff fa77 	bl	8000e24 <HAL_Delay>

    for( uint16_t i = 0; i < command_length; i++ )
 8001936:	b156      	cbz	r6, 800194e <my_lr1110_hal_read+0x3a>
 8001938:	f109 34ff 	add.w	r4, r9, #4294967295
 800193c:	3e01      	subs	r6, #1
 800193e:	fa19 f686 	uxtah	r6, r9, r6
    {
        hal_spi_in_out( command[i] );
 8001942:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001946:	f7ff ffaf 	bl	80018a8 <hal_spi_in_out>
    for( uint16_t i = 0; i < command_length; i++ )
 800194a:	42b4      	cmp	r4, r6
 800194c:	d1f9      	bne.n	8001942 <my_lr1110_hal_read+0x2e>
    }

//    hal_gpio_set_value( lr1110_context->nss, 1 );
    HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 1);
 800194e:	2201      	movs	r2, #1
 8001950:	2110      	movs	r1, #16
 8001952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001956:	f001 f8f9 	bl	8002b4c <HAL_GPIO_WritePin>

    if( data_length > 0 )
 800195a:	b91f      	cbnz	r7, 8001964 <my_lr1110_hal_read+0x50>
        // Put NSS high as the spi transaction is finished
//        hal_gpio_set_value( lr1110_context->nss, 1 );
        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 1);
    }

    my_lr1110_hal_wait_on_busy();
 800195c:	f7ff ffbe 	bl	80018dc <my_lr1110_hal_wait_on_busy>

}
 8001960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    	my_lr1110_hal_wait_on_busy(  );
 8001964:	f7ff ffba 	bl	80018dc <my_lr1110_hal_wait_on_busy>
    	HAL_Delay(10);
 8001968:	200a      	movs	r0, #10
 800196a:	f7ff fa5b 	bl	8000e24 <HAL_Delay>
        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	2110      	movs	r1, #16
 8001972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001976:	f001 f8e9 	bl	8002b4c <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800197a:	2001      	movs	r0, #1
 800197c:	f7ff fa52 	bl	8000e24 <HAL_Delay>
        hal_spi_in_out( 0x00 );
 8001980:	2000      	movs	r0, #0
 8001982:	f7ff ff91 	bl	80018a8 <hal_spi_in_out>
        for( uint16_t i = 0; i < data_length; i++ )
 8001986:	f108 34ff 	add.w	r4, r8, #4294967295
 800198a:	1e7d      	subs	r5, r7, #1
 800198c:	fa18 f585 	uxtah	r5, r8, r5
            data[i] = hal_spi_in_out( 0 );
 8001990:	2600      	movs	r6, #0
 8001992:	4630      	mov	r0, r6
 8001994:	f7ff ff88 	bl	80018a8 <hal_spi_in_out>
 8001998:	f804 0f01 	strb.w	r0, [r4, #1]!
        for( uint16_t i = 0; i < data_length; i++ )
 800199c:	42ac      	cmp	r4, r5
 800199e:	d1f8      	bne.n	8001992 <my_lr1110_hal_read+0x7e>
        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 1);
 80019a0:	2201      	movs	r2, #1
 80019a2:	2110      	movs	r1, #16
 80019a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a8:	f001 f8d0 	bl	8002b4c <HAL_GPIO_WritePin>
 80019ac:	e7d6      	b.n	800195c <my_lr1110_hal_read+0x48>

080019ae <my_lr1110_get_version>:
    HAL_GPIO_WritePin(BLE_WIFI_SEL_SWITCH_GPIO_Port, BLE_WIFI_SEL_SWITCH_Pin, 0);
}


void my_lr1110_get_version( char * hw, char * type, uint16_t * fw )
{
 80019ae:	b570      	push	{r4, r5, r6, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	4606      	mov	r6, r0
 80019b4:	460d      	mov	r5, r1
 80019b6:	4614      	mov	r4, r2
    uint8_t         cbuffer[2];
    uint8_t         rbuffer[4] = { 0x00 };
 80019b8:	2300      	movs	r3, #0
 80019ba:	9300      	str	r3, [sp, #0]

    cbuffer[0] = ( uint8_t )( 1 );
 80019bc:	2301      	movs	r3, #1
 80019be:	f88d 3004 	strb.w	r3, [sp, #4]
    cbuffer[1] = ( uint8_t )( 1 );
 80019c2:	f88d 3005 	strb.w	r3, [sp, #5]

    my_lr1110_hal_read( cbuffer, 2, rbuffer, 4 );
 80019c6:	2304      	movs	r3, #4
 80019c8:	466a      	mov	r2, sp
 80019ca:	2102      	movs	r1, #2
 80019cc:	eb0d 0003 	add.w	r0, sp, r3
 80019d0:	f7ff ffa0 	bl	8001914 <my_lr1110_hal_read>


	* hw   = rbuffer[0];
 80019d4:	f89d 3000 	ldrb.w	r3, [sp]
 80019d8:	7033      	strb	r3, [r6, #0]
	* type = rbuffer[1];
 80019da:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80019de:	702b      	strb	r3, [r5, #0]
	* fw    = ( ( uint16_t ) rbuffer[2] << 8 ) + ( uint16_t ) rbuffer[3];
 80019e0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80019e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80019e8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80019ec:	8023      	strh	r3, [r4, #0]

}
 80019ee:	b002      	add	sp, #8
 80019f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080019f4 <my_lr1110_reset>:


void my_lr1110_reset(void)
{
 80019f4:	b508      	push	{r3, lr}
	printf("LR1110 -- Reset\r\n");
 80019f6:	4809      	ldr	r0, [pc, #36]	; (8001a1c <my_lr1110_reset+0x28>)
 80019f8:	f006 fd4a 	bl	8008490 <puts>
	HAL_GPIO_WritePin(LR_NRESET_GPIO_Port, LR_NRESET_Pin, 0);
 80019fc:	2200      	movs	r2, #0
 80019fe:	2101      	movs	r1, #1
 8001a00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a04:	f001 f8a2 	bl	8002b4c <HAL_GPIO_WritePin>
	HAL_Delay( 1 );
 8001a08:	2001      	movs	r0, #1
 8001a0a:	f7ff fa0b 	bl	8000e24 <HAL_Delay>
	HAL_GPIO_WritePin(LR_NRESET_GPIO_Port, LR_NRESET_Pin, 1);
 8001a0e:	2201      	movs	r2, #1
 8001a10:	4611      	mov	r1, r2
 8001a12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a16:	f001 f899 	bl	8002b4c <HAL_GPIO_WritePin>
}
 8001a1a:	bd08      	pop	{r3, pc}
 8001a1c:	08009848 	.word	0x08009848

08001a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a20:	b510      	push	{r4, lr}
 8001a22:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a24:	2244      	movs	r2, #68	; 0x44
 8001a26:	2100      	movs	r1, #0
 8001a28:	a807      	add	r0, sp, #28
 8001a2a:	f006 fca3 	bl	8008374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a2e:	2400      	movs	r4, #0
 8001a30:	9400      	str	r4, [sp, #0]
 8001a32:	9401      	str	r4, [sp, #4]
 8001a34:	9402      	str	r4, [sp, #8]
 8001a36:	9403      	str	r4, [sp, #12]
 8001a38:	9404      	str	r4, [sp, #16]
 8001a3a:	9405      	str	r4, [sp, #20]
 8001a3c:	9406      	str	r4, [sp, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a3e:	f001 f8fb 	bl	8002c38 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001a42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a46:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a4a:	f023 0318 	bic.w	r3, r3, #24
 8001a4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001a52:	2307      	movs	r3, #7
 8001a54:	9307      	str	r3, [sp, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a5a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a64:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a66:	2340      	movs	r3, #64	; 0x40
 8001a68:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a6a:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a6c:	a807      	add	r0, sp, #28
 8001a6e:	f001 f9d9 	bl	8002e24 <HAL_RCC_OscConfig>
 8001a72:	b9a0      	cbnz	r0, 8001a9e <SystemClock_Config+0x7e>
  {
    Error_Handler();
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001a74:	236f      	movs	r3, #111	; 0x6f
 8001a76:	9300      	str	r3, [sp, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a80:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a82:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001a84:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001a86:	9306      	str	r3, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a88:	2101      	movs	r1, #1
 8001a8a:	4668      	mov	r0, sp
 8001a8c:	f001 fde0 	bl	8003650 <HAL_RCC_ClockConfig>
 8001a90:	b938      	cbnz	r0, 8001aa2 <SystemClock_Config+0x82>
  {
    Error_Handler();
  }
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSE);
 8001a92:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001a96:	f002 f95b 	bl	8003d50 <HAL_RCCEx_EnableLSCO>
}
 8001a9a:	b018      	add	sp, #96	; 0x60
 8001a9c:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8001a9e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <SystemClock_Config+0x80>
 8001aa2:	b672      	cpsid	i
 8001aa4:	e7fe      	b.n	8001aa4 <SystemClock_Config+0x84>

08001aa6 <PeriphCommonClock_Config>:
{
 8001aa6:	b500      	push	{lr}
 8001aa8:	b08d      	sub	sp, #52	; 0x34
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aaa:	2220      	movs	r2, #32
 8001aac:	2100      	movs	r1, #0
 8001aae:	a801      	add	r0, sp, #4
 8001ab0:	f006 fc60 	bl	8008374 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001ab4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001ab8:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001aba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001abe:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001ac4:	2310      	movs	r3, #16
 8001ac6:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ac8:	4668      	mov	r0, sp
 8001aca:	f001 ff9b 	bl	8003a04 <HAL_RCCEx_PeriphCLKConfig>
 8001ace:	b910      	cbnz	r0, 8001ad6 <PeriphCommonClock_Config+0x30>
}
 8001ad0:	b00d      	add	sp, #52	; 0x34
 8001ad2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ad6:	b672      	cpsid	i
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <PeriphCommonClock_Config+0x32>
	...

08001adc <main>:
{
 8001adc:	b500      	push	{lr}
 8001ade:	b083      	sub	sp, #12
  HAL_Init();
 8001ae0:	f000 fb9a 	bl	8002218 <HAL_Init>
  MX_APPE_Config();
 8001ae4:	f7ff f8e0 	bl	8000ca8 <MX_APPE_Config>
  SystemClock_Config();
 8001ae8:	f7ff ff9a 	bl	8001a20 <SystemClock_Config>
  PeriphCommonClock_Config();
 8001aec:	f7ff ffdb 	bl	8001aa6 <PeriphCommonClock_Config>
   MX_IPCC_Init();
 8001af0:	f7ff fe8e 	bl	8001810 <MX_IPCC_Init>
  MX_GPIO_Init();
 8001af4:	f7ff f9f8 	bl	8000ee8 <MX_GPIO_Init>
  MX_RF_Init();
 8001af8:	f000 f850 	bl	8001b9c <MX_RF_Init>
  MX_SPI1_Init();
 8001afc:	f000 f93a 	bl	8001d74 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001b00:	f000 fa6e 	bl	8001fe0 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8001b04:	f000 f890 	bl	8001c28 <MX_RTC_Init>
  MX_RNG_Init();
 8001b08:	f000 f84a 	bl	8001ba0 <MX_RNG_Init>
  MX_DMA_Init();
 8001b0c:	f7ff f9c3 	bl	8000e96 <MX_DMA_Init>
  printf("\r\n\r\n\r\n");
 8001b10:	4817      	ldr	r0, [pc, #92]	; (8001b70 <main+0x94>)
 8001b12:	f006 fcbd 	bl	8008490 <puts>
  printf("===================================================\r\n");
 8001b16:	4817      	ldr	r0, [pc, #92]	; (8001b74 <main+0x98>)
 8001b18:	f006 fcba 	bl	8008490 <puts>
  printf("||              Lora Asset Tracker               ||\r\n");
 8001b1c:	4816      	ldr	r0, [pc, #88]	; (8001b78 <main+0x9c>)
 8001b1e:	f006 fcb7 	bl	8008490 <puts>
  printf("===================================================\r\n\r\n");
 8001b22:	4816      	ldr	r0, [pc, #88]	; (8001b7c <main+0xa0>)
 8001b24:	f006 fcb4 	bl	8008490 <puts>
  my_lr1110_reset();
 8001b28:	f7ff ff64 	bl	80019f4 <my_lr1110_reset>
  HAL_Delay(500);
 8001b2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b30:	f7ff f978 	bl	8000e24 <HAL_Delay>
  my_lr1110_reset();
 8001b34:	f7ff ff5e 	bl	80019f4 <my_lr1110_reset>
  uint8_t hw = 0, type = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f88d 3007 	strb.w	r3, [sp, #7]
 8001b3e:	f88d 3006 	strb.w	r3, [sp, #6]
  uint16_t fw = 0;
 8001b42:	f8ad 3004 	strh.w	r3, [sp, #4]
  my_lr1110_get_version( &hw, &type, &fw );
 8001b46:	aa01      	add	r2, sp, #4
 8001b48:	f10d 0106 	add.w	r1, sp, #6
 8001b4c:	f10d 0007 	add.w	r0, sp, #7
 8001b50:	f7ff ff2d 	bl	80019ae <my_lr1110_get_version>
  printf( "LR1110 : hw:%#02X / type:%#02X / fw:%#04X\n\r", hw, type, fw );
 8001b54:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001b58:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8001b5c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001b60:	4807      	ldr	r0, [pc, #28]	; (8001b80 <main+0xa4>)
 8001b62:	f006 fc0f 	bl	8008384 <iprintf>
  MX_APPE_Init();
 8001b66:	f7ff f907 	bl	8000d78 <MX_APPE_Init>
    MX_APPE_Process();
 8001b6a:	f7ff f977 	bl	8000e5c <MX_APPE_Process>
  while (1)
 8001b6e:	e7fc      	b.n	8001b6a <main+0x8e>
 8001b70:	0800985c 	.word	0x0800985c
 8001b74:	08009864 	.word	0x08009864
 8001b78:	0800989c 	.word	0x0800989c
 8001b7c:	080098d4 	.word	0x080098d4
 8001b80:	0800990c 	.word	0x0800990c

08001b84 <Error_Handler>:
 8001b84:	b672      	cpsid	i
  while (1)
 8001b86:	e7fe      	b.n	8001b86 <Error_Handler+0x2>

08001b88 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001b88:	b508      	push	{r3, lr}
 8001b8a:	460a      	mov	r2, r1
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

	printf( "Wrong parameters value: file %s on line %lu\n", ( const char* )file, line );
 8001b8c:	4601      	mov	r1, r0
 8001b8e:	4802      	ldr	r0, [pc, #8]	; (8001b98 <assert_failed+0x10>)
 8001b90:	f006 fbf8 	bl	8008384 <iprintf>
	/* Infinite loop */
	while( 1 )
 8001b94:	e7fe      	b.n	8001b94 <assert_failed+0xc>
 8001b96:	bf00      	nop
 8001b98:	08009938 	.word	0x08009938

08001b9c <MX_RF_Init>:
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001b9c:	4770      	bx	lr
	...

08001ba0 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001ba0:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001ba2:	4806      	ldr	r0, [pc, #24]	; (8001bbc <MX_RNG_Init+0x1c>)
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <MX_RNG_Init+0x20>)
 8001ba6:	6003      	str	r3, [r0, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	6043      	str	r3, [r0, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001bac:	f002 f91c 	bl	8003de8 <HAL_RNG_Init>
 8001bb0:	b900      	cbnz	r0, 8001bb4 <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001bb2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001bb4:	f7ff ffe6 	bl	8001b84 <Error_Handler>
}
 8001bb8:	e7fb      	b.n	8001bb2 <MX_RNG_Init+0x12>
 8001bba:	bf00      	nop
 8001bbc:	20000468 	.word	0x20000468
 8001bc0:	58001000 	.word	0x58001000

08001bc4 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001bc4:	b510      	push	{r4, lr}
 8001bc6:	b08e      	sub	sp, #56	; 0x38
 8001bc8:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bca:	2230      	movs	r2, #48	; 0x30
 8001bcc:	2100      	movs	r1, #0
 8001bce:	a802      	add	r0, sp, #8
 8001bd0:	f006 fbd0 	bl	8008374 <memset>
  if(rngHandle->Instance==RNG)
 8001bd4:	6822      	ldr	r2, [r4, #0]
 8001bd6:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <HAL_RNG_MspInit+0x60>)
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d001      	beq.n	8001be0 <HAL_RNG_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001bdc:	b00e      	add	sp, #56	; 0x38
 8001bde:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001be0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001be4:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_LSE;
 8001be6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001bea:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bec:	a802      	add	r0, sp, #8
 8001bee:	f001 ff09 	bl	8003a04 <HAL_RCCEx_PeriphCLKConfig>
 8001bf2:	b998      	cbnz	r0, 8001c1c <HAL_RNG_MspInit+0x58>
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bfa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001bfe:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c06:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001c08:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(RNG_IRQn, 0, 0);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	2035      	movs	r0, #53	; 0x35
 8001c10:	f000 fb54 	bl	80022bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 8001c14:	2035      	movs	r0, #53	; 0x35
 8001c16:	f000 fb95 	bl	8002344 <HAL_NVIC_EnableIRQ>
}
 8001c1a:	e7df      	b.n	8001bdc <HAL_RNG_MspInit+0x18>
      Error_Handler();
 8001c1c:	f7ff ffb2 	bl	8001b84 <Error_Handler>
 8001c20:	e7e8      	b.n	8001bf4 <HAL_RNG_MspInit+0x30>
 8001c22:	bf00      	nop
 8001c24:	58001000 	.word	0x58001000

08001c28 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001c28:	b510      	push	{r4, lr}
 8001c2a:	b090      	sub	sp, #64	; 0x40

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c2c:	2400      	movs	r4, #0
 8001c2e:	940b      	str	r4, [sp, #44]	; 0x2c
 8001c30:	940c      	str	r4, [sp, #48]	; 0x30
 8001c32:	940d      	str	r4, [sp, #52]	; 0x34
 8001c34:	940e      	str	r4, [sp, #56]	; 0x38
 8001c36:	940f      	str	r4, [sp, #60]	; 0x3c
  RTC_DateTypeDef sDate = {0};
 8001c38:	940a      	str	r4, [sp, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001c3a:	2228      	movs	r2, #40	; 0x28
 8001c3c:	4621      	mov	r1, r4
 8001c3e:	4668      	mov	r0, sp
 8001c40:	f006 fb98 	bl	8008374 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c44:	4829      	ldr	r0, [pc, #164]	; (8001cec <MX_RTC_Init+0xc4>)
 8001c46:	4b2a      	ldr	r3, [pc, #168]	; (8001cf0 <MX_RTC_Init+0xc8>)
 8001c48:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c4a:	6044      	str	r4, [r0, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001c4c:	230f      	movs	r3, #15
 8001c4e:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001c50:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001c54:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c56:	6104      	str	r4, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c58:	6184      	str	r4, [r0, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001c5a:	6144      	str	r4, [r0, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c5c:	f002 fa18 	bl	8004090 <HAL_RTC_Init>
 8001c60:	2800      	cmp	r0, #0
 8001c62:	d137      	bne.n	8001cd4 <MX_RTC_Init+0xac>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001c64:	2200      	movs	r2, #0
 8001c66:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
  sTime.Minutes = 0;
 8001c6a:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
  sTime.Seconds = 0;
 8001c6e:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
  sTime.SubSeconds = 0x0;
 8001c72:	920c      	str	r2, [sp, #48]	; 0x30
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c74:	920e      	str	r2, [sp, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c76:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001c78:	a90b      	add	r1, sp, #44	; 0x2c
 8001c7a:	481c      	ldr	r0, [pc, #112]	; (8001cec <MX_RTC_Init+0xc4>)
 8001c7c:	f002 fad8 	bl	8004230 <HAL_RTC_SetTime>
 8001c80:	bb58      	cbnz	r0, 8001cda <MX_RTC_Init+0xb2>
  {
    Error_Handler();
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c82:	2301      	movs	r3, #1
 8001c84:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001c88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  sDate.Date = 1;
 8001c8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  sDate.Year = 0;
 8001c90:	2200      	movs	r2, #0
 8001c92:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001c96:	a90a      	add	r1, sp, #40	; 0x28
 8001c98:	4814      	ldr	r0, [pc, #80]	; (8001cec <MX_RTC_Init+0xc4>)
 8001c9a:	f002 fc07 	bl	80044ac <HAL_RTC_SetDate>
 8001c9e:	b9f8      	cbnz	r0, 8001ce0 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f88d 2000 	strb.w	r2, [sp]
  sAlarm.AlarmTime.Minutes = 0;
 8001ca6:	f88d 2001 	strb.w	r2, [sp, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8001caa:	f88d 2002 	strb.w	r2, [sp, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8001cae:	9201      	str	r2, [sp, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001cb0:	9203      	str	r2, [sp, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001cb2:	9204      	str	r2, [sp, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001cb4:	9205      	str	r2, [sp, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001cb6:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001cb8:	9207      	str	r2, [sp, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	f88d 3020 	strb.w	r3, [sp, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001cc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cc4:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001cc6:	4669      	mov	r1, sp
 8001cc8:	4808      	ldr	r0, [pc, #32]	; (8001cec <MX_RTC_Init+0xc4>)
 8001cca:	f002 fd03 	bl	80046d4 <HAL_RTC_SetAlarm_IT>
 8001cce:	b950      	cbnz	r0, 8001ce6 <MX_RTC_Init+0xbe>
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001cd0:	b010      	add	sp, #64	; 0x40
 8001cd2:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001cd4:	f7ff ff56 	bl	8001b84 <Error_Handler>
 8001cd8:	e7c4      	b.n	8001c64 <MX_RTC_Init+0x3c>
    Error_Handler();
 8001cda:	f7ff ff53 	bl	8001b84 <Error_Handler>
 8001cde:	e7d0      	b.n	8001c82 <MX_RTC_Init+0x5a>
    Error_Handler();
 8001ce0:	f7ff ff50 	bl	8001b84 <Error_Handler>
 8001ce4:	e7dc      	b.n	8001ca0 <MX_RTC_Init+0x78>
    Error_Handler();
 8001ce6:	f7ff ff4d 	bl	8001b84 <Error_Handler>
}
 8001cea:	e7f1      	b.n	8001cd0 <MX_RTC_Init+0xa8>
 8001cec:	2000047c 	.word	0x2000047c
 8001cf0:	40002800 	.word	0x40002800

08001cf4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001cf4:	b510      	push	{r4, lr}
 8001cf6:	b08e      	sub	sp, #56	; 0x38
 8001cf8:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cfa:	2230      	movs	r2, #48	; 0x30
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	a802      	add	r0, sp, #8
 8001d00:	f006 fb38 	bl	8008374 <memset>
  if(rtcHandle->Instance==RTC)
 8001d04:	6822      	ldr	r2, [r4, #0]
 8001d06:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <HAL_RTC_MspInit+0x7c>)
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d001      	beq.n	8001d10 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001d0c:	b00e      	add	sp, #56	; 0x38
 8001d0e:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d14:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d1a:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d1c:	a802      	add	r0, sp, #8
 8001d1e:	f001 fe71 	bl	8003a04 <HAL_RCCEx_PeriphCLKConfig>
 8001d22:	bb08      	cbnz	r0, 8001d68 <HAL_RTC_MspInit+0x74>
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d28:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001d2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001d34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d3a:	659a      	str	r2, [r3, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d42:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001d44:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	4611      	mov	r1, r2
 8001d4a:	2003      	movs	r0, #3
 8001d4c:	f000 fab6 	bl	80022bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001d50:	2003      	movs	r0, #3
 8001d52:	f000 faf7 	bl	8002344 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001d56:	2200      	movs	r2, #0
 8001d58:	4611      	mov	r1, r2
 8001d5a:	2029      	movs	r0, #41	; 0x29
 8001d5c:	f000 faae 	bl	80022bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001d60:	2029      	movs	r0, #41	; 0x29
 8001d62:	f000 faef 	bl	8002344 <HAL_NVIC_EnableIRQ>
}
 8001d66:	e7d1      	b.n	8001d0c <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8001d68:	f7ff ff0c 	bl	8001b84 <Error_Handler>
 8001d6c:	e7da      	b.n	8001d24 <HAL_RTC_MspInit+0x30>
 8001d6e:	bf00      	nop
 8001d70:	40002800 	.word	0x40002800

08001d74 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d74:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001d76:	4810      	ldr	r0, [pc, #64]	; (8001db8 <MX_SPI1_Init+0x44>)
 8001d78:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <MX_SPI1_Init+0x48>)
 8001d7a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d7c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001d80:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d82:	2300      	movs	r3, #0
 8001d84:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d86:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001d8a:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d8c:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d8e:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d94:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001d96:	2210      	movs	r2, #16
 8001d98:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d9a:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d9c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d9e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001da0:	2207      	movs	r2, #7
 8001da2:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001da4:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001da6:	2308      	movs	r3, #8
 8001da8:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001daa:	f002 ff7f 	bl	8004cac <HAL_SPI_Init>
 8001dae:	b900      	cbnz	r0, 8001db2 <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001db0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001db2:	f7ff fee7 	bl	8001b84 <Error_Handler>
}
 8001db6:	e7fb      	b.n	8001db0 <MX_SPI1_Init+0x3c>
 8001db8:	200004a0 	.word	0x200004a0
 8001dbc:	40013000 	.word	0x40013000

08001dc0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001dc0:	b500      	push	{lr}
 8001dc2:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	9303      	str	r3, [sp, #12]
 8001dc8:	9304      	str	r3, [sp, #16]
 8001dca:	9305      	str	r3, [sp, #20]
 8001dcc:	9306      	str	r3, [sp, #24]
 8001dce:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 8001dd0:	6802      	ldr	r2, [r0, #0]
 8001dd2:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <HAL_SPI_MspInit+0x64>)
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d002      	beq.n	8001dde <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001dd8:	b009      	add	sp, #36	; 0x24
 8001dda:	f85d fb04 	ldr.w	pc, [sp], #4
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001de4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001de8:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001dea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001dec:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001df0:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001df2:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001df4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001df6:	f042 0201 	orr.w	r2, r2, #1
 8001dfa:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001e04:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 8001e06:	23e0      	movs	r3, #224	; 0xe0
 8001e08:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e12:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e14:	2305      	movs	r3, #5
 8001e16:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e18:	a903      	add	r1, sp, #12
 8001e1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e1e:	f000 fd53 	bl	80028c8 <HAL_GPIO_Init>
}
 8001e22:	e7d9      	b.n	8001dd8 <HAL_SPI_MspInit+0x18>
 8001e24:	40013000 	.word	0x40013000

08001e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e28:	b500      	push	{lr}
 8001e2a:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e32:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001e36:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e3e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001e40:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	4611      	mov	r1, r2
 8001e46:	2005      	movs	r0, #5
 8001e48:	f000 fa38 	bl	80022bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001e4c:	2005      	movs	r0, #5
 8001e4e:	f000 fa79 	bl	8002344 <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	4611      	mov	r1, r2
 8001e56:	202e      	movs	r0, #46	; 0x2e
 8001e58:	f000 fa30 	bl	80022bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001e5c:	202e      	movs	r0, #46	; 0x2e
 8001e5e:	f000 fa71 	bl	8002344 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e62:	b003      	add	sp, #12
 8001e64:	f85d fb04 	ldr.w	pc, [sp], #4

08001e68 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <NMI_Handler>

08001e6a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e6a:	e7fe      	b.n	8001e6a <HardFault_Handler>

08001e6c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e6c:	e7fe      	b.n	8001e6c <MemManage_Handler>

08001e6e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e6e:	e7fe      	b.n	8001e6e <BusFault_Handler>

08001e70 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <UsageFault_Handler>

08001e72 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e72:	4770      	bx	lr

08001e74 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e74:	4770      	bx	lr

08001e76 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e76:	4770      	bx	lr

08001e78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e7a:	f000 f9e3 	bl	8002244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  HAL_SYSTICK_IRQHandler();
 8001e7e:	f000 fada 	bl	8002436 <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e82:	bd08      	pop	{r3, pc}

08001e84 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001e84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001e86:	f7ff fc1f 	bl	80016c8 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001e8a:	bd08      	pop	{r3, pc}

08001e8c <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001e8c:	4770      	bx	lr

08001e8e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001e8e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NSS_Pin);
 8001e90:	2010      	movs	r0, #16
 8001e92:	f000 fe75 	bl	8002b80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  myRadioOnDioIrq();
 8001e96:	f7fe fd19 	bl	80008cc <myRadioOnDioIrq>

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001e9a:	bd08      	pop	{r3, pc}

08001e9c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001e9e:	4802      	ldr	r0, [pc, #8]	; (8001ea8 <DMA1_Channel1_IRQHandler+0xc>)
 8001ea0:	f000 fcaf 	bl	8002802 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ea4:	bd08      	pop	{r3, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000504 	.word	0x20000504

08001eac <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001eac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001eae:	4802      	ldr	r0, [pc, #8]	; (8001eb8 <DMA1_Channel2_IRQHandler+0xc>)
 8001eb0:	f000 fca7 	bl	8002802 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001eb4:	bd08      	pop	{r3, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000564 	.word	0x20000564

08001ebc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ebc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ebe:	4802      	ldr	r0, [pc, #8]	; (8001ec8 <USART1_IRQHandler+0xc>)
 8001ec0:	f003 faa0 	bl	8005404 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ec4:	bd08      	pop	{r3, pc}
 8001ec6:	bf00      	nop
 8001ec8:	200005c4 	.word	0x200005c4

08001ecc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC A and B alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001ecc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001ece:	4802      	ldr	r0, [pc, #8]	; (8001ed8 <RTC_Alarm_IRQHandler+0xc>)
 8001ed0:	f002 f874 	bl	8003fbc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001ed4:	bd08      	pop	{r3, pc}
 8001ed6:	bf00      	nop
 8001ed8:	2000047c 	.word	0x2000047c

08001edc <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001edc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001ede:	f006 f883 	bl	8007fe8 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001ee2:	bd08      	pop	{r3, pc}

08001ee4 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001ee4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001ee6:	f006 f81f 	bl	8007f28 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001eea:	bd08      	pop	{r3, pc}

08001eec <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001eec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001eee:	f000 fe57 	bl	8002ba0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001ef2:	bd08      	pop	{r3, pc}

08001ef4 <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 8001ef4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8001ef6:	4802      	ldr	r0, [pc, #8]	; (8001f00 <RNG_IRQHandler+0xc>)
 8001ef8:	f001 ffac 	bl	8003e54 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 8001efc:	bd08      	pop	{r3, pc}
 8001efe:	bf00      	nop
 8001f00:	20000468 	.word	0x20000468

08001f04 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f04:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f06:	1e16      	subs	r6, r2, #0
 8001f08:	dd07      	ble.n	8001f1a <_read+0x16>
 8001f0a:	460c      	mov	r4, r1
 8001f0c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8001f0e:	f7ff fcb7 	bl	8001880 <__io_getchar>
 8001f12:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f16:	42a5      	cmp	r5, r4
 8001f18:	d1f9      	bne.n	8001f0e <_read+0xa>
	}

return len;
}
 8001f1a:	4630      	mov	r0, r6
 8001f1c:	bd70      	pop	{r4, r5, r6, pc}

08001f1e <_close>:
}

int _close(int file)
{
	return -1;
}
 8001f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f22:	4770      	bx	lr

08001f24 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001f24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f28:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	4770      	bx	lr

08001f2e <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001f2e:	2001      	movs	r0, #1
 8001f30:	4770      	bx	lr

08001f32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001f32:	2000      	movs	r0, #0
 8001f34:	4770      	bx	lr
	...

08001f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f38:	b508      	push	{r3, lr}
 8001f3a:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f3c:	4a0c      	ldr	r2, [pc, #48]	; (8001f70 <_sbrk+0x38>)
 8001f3e:	6812      	ldr	r2, [r2, #0]
 8001f40:	b152      	cbz	r2, 8001f58 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f42:	4a0b      	ldr	r2, [pc, #44]	; (8001f70 <_sbrk+0x38>)
 8001f44:	6810      	ldr	r0, [r2, #0]
 8001f46:	4403      	add	r3, r0
 8001f48:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <_sbrk+0x3c>)
 8001f4a:	490b      	ldr	r1, [pc, #44]	; (8001f78 <_sbrk+0x40>)
 8001f4c:	1a52      	subs	r2, r2, r1
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d806      	bhi.n	8001f60 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001f52:	4a07      	ldr	r2, [pc, #28]	; (8001f70 <_sbrk+0x38>)
 8001f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001f56:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8001f58:	4a05      	ldr	r2, [pc, #20]	; (8001f70 <_sbrk+0x38>)
 8001f5a:	4908      	ldr	r1, [pc, #32]	; (8001f7c <_sbrk+0x44>)
 8001f5c:	6011      	str	r1, [r2, #0]
 8001f5e:	e7f0      	b.n	8001f42 <_sbrk+0xa>
    errno = ENOMEM;
 8001f60:	f006 f9d0 	bl	8008304 <__errno>
 8001f64:	230c      	movs	r3, #12
 8001f66:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001f68:	f04f 30ff 	mov.w	r0, #4294967295
 8001f6c:	e7f3      	b.n	8001f56 <_sbrk+0x1e>
 8001f6e:	bf00      	nop
 8001f70:	200002dc 	.word	0x200002dc
 8001f74:	20003000 	.word	0x20003000
 8001f78:	00000400 	.word	0x00000400
 8001f7c:	20000670 	.word	0x20000670

08001f80 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001f80:	4a15      	ldr	r2, [pc, #84]	; (8001fd8 <SystemInit+0x58>)
 8001f82:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001f86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f8a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	f042 0201 	orr.w	r2, r2, #1
 8001f98:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001f9a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001f9e:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001fa0:	6819      	ldr	r1, [r3, #0]
 8001fa2:	f1a2 62a2 	sub.w	r2, r2, #84934656	; 0x5100000
 8001fa6:	f2a2 1205 	subw	r2, r2, #261	; 0x105
 8001faa:	400a      	ands	r2, r1
 8001fac:	601a      	str	r2, [r3, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001fae:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001fb2:	f022 0205 	bic.w	r2, r2, #5
 8001fb6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001fba:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001fbe:	f022 0201 	bic.w	r2, r2, #1
 8001fc2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001fc6:	4a05      	ldr	r2, [pc, #20]	; (8001fdc <SystemInit+0x5c>)
 8001fc8:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fd0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	619a      	str	r2, [r3, #24]
}
 8001fd6:	4770      	bx	lr
 8001fd8:	e000ed00 	.word	0xe000ed00
 8001fdc:	22041000 	.word	0x22041000

08001fe0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001fe0:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fe2:	4818      	ldr	r0, [pc, #96]	; (8002044 <MX_USART1_UART_Init+0x64>)
 8001fe4:	4b18      	ldr	r3, [pc, #96]	; (8002048 <MX_USART1_UART_Init+0x68>)
 8001fe6:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001fe8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001fec:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ff2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ff4:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ff6:	220c      	movs	r2, #12
 8001ff8:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ffa:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001ffc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002000:	61c2      	str	r2, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002002:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002004:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002006:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002008:	f003 ff60 	bl	8005ecc <HAL_UART_Init>
 800200c:	b970      	cbnz	r0, 800202c <MX_USART1_UART_Init+0x4c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800200e:	2100      	movs	r1, #0
 8002010:	480c      	ldr	r0, [pc, #48]	; (8002044 <MX_USART1_UART_Init+0x64>)
 8002012:	f004 f80f 	bl	8006034 <HAL_UARTEx_SetTxFifoThreshold>
 8002016:	b960      	cbnz	r0, 8002032 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002018:	2100      	movs	r1, #0
 800201a:	480a      	ldr	r0, [pc, #40]	; (8002044 <MX_USART1_UART_Init+0x64>)
 800201c:	f004 f850 	bl	80060c0 <HAL_UARTEx_SetRxFifoThreshold>
 8002020:	b950      	cbnz	r0, 8002038 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002022:	4808      	ldr	r0, [pc, #32]	; (8002044 <MX_USART1_UART_Init+0x64>)
 8002024:	f003 ffd4 	bl	8005fd0 <HAL_UARTEx_DisableFifoMode>
 8002028:	b948      	cbnz	r0, 800203e <MX_USART1_UART_Init+0x5e>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800202a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800202c:	f7ff fdaa 	bl	8001b84 <Error_Handler>
 8002030:	e7ed      	b.n	800200e <MX_USART1_UART_Init+0x2e>
    Error_Handler();
 8002032:	f7ff fda7 	bl	8001b84 <Error_Handler>
 8002036:	e7ef      	b.n	8002018 <MX_USART1_UART_Init+0x38>
    Error_Handler();
 8002038:	f7ff fda4 	bl	8001b84 <Error_Handler>
 800203c:	e7f1      	b.n	8002022 <MX_USART1_UART_Init+0x42>
    Error_Handler();
 800203e:	f7ff fda1 	bl	8001b84 <Error_Handler>
}
 8002042:	e7f2      	b.n	800202a <MX_USART1_UART_Init+0x4a>
 8002044:	200005c4 	.word	0x200005c4
 8002048:	40013800 	.word	0x40013800

0800204c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800204c:	b530      	push	{r4, r5, lr}
 800204e:	b095      	sub	sp, #84	; 0x54
 8002050:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002052:	2100      	movs	r1, #0
 8002054:	910f      	str	r1, [sp, #60]	; 0x3c
 8002056:	9110      	str	r1, [sp, #64]	; 0x40
 8002058:	9111      	str	r1, [sp, #68]	; 0x44
 800205a:	9112      	str	r1, [sp, #72]	; 0x48
 800205c:	9113      	str	r1, [sp, #76]	; 0x4c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800205e:	2230      	movs	r2, #48	; 0x30
 8002060:	a803      	add	r0, sp, #12
 8002062:	f006 f987 	bl	8008374 <memset>
  if(uartHandle->Instance==USART1)
 8002066:	6822      	ldr	r2, [r4, #0]
 8002068:	4b36      	ldr	r3, [pc, #216]	; (8002144 <HAL_UART_MspInit+0xf8>)
 800206a:	429a      	cmp	r2, r3
 800206c:	d001      	beq.n	8002072 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800206e:	b015      	add	sp, #84	; 0x54
 8002070:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002072:	2301      	movs	r3, #1
 8002074:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002076:	2300      	movs	r3, #0
 8002078:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800207a:	a803      	add	r0, sp, #12
 800207c:	f001 fcc2 	bl	8003a04 <HAL_RCCEx_PeriphCLKConfig>
 8002080:	2800      	cmp	r0, #0
 8002082:	d155      	bne.n	8002130 <HAL_UART_MspInit+0xe4>
  SET_BIT(RCC->APB2ENR, Periphs);
 8002084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002088:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800208a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800208e:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002090:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002092:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002096:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002098:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800209a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800209c:	f042 0201 	orr.w	r2, r2, #1
 80020a0:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80020aa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020ac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020b0:	930f      	str	r3, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	9310      	str	r3, [sp, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2500      	movs	r5, #0
 80020b8:	9511      	str	r5, [sp, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ba:	9512      	str	r5, [sp, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020bc:	2307      	movs	r3, #7
 80020be:	9313      	str	r3, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c0:	a90f      	add	r1, sp, #60	; 0x3c
 80020c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c6:	f000 fbff 	bl	80028c8 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80020ca:	481f      	ldr	r0, [pc, #124]	; (8002148 <HAL_UART_MspInit+0xfc>)
 80020cc:	4b1f      	ldr	r3, [pc, #124]	; (800214c <HAL_UART_MspInit+0x100>)
 80020ce:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80020d0:	230f      	movs	r3, #15
 80020d2:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020d4:	2310      	movs	r3, #16
 80020d6:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020d8:	60c5      	str	r5, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020da:	2380      	movs	r3, #128	; 0x80
 80020dc:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020de:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020e0:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80020e2:	61c5      	str	r5, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80020e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020e8:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80020ea:	f000 f9e3 	bl	80024b4 <HAL_DMA_Init>
 80020ee:	bb10      	cbnz	r0, 8002136 <HAL_UART_MspInit+0xea>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80020f0:	4b15      	ldr	r3, [pc, #84]	; (8002148 <HAL_UART_MspInit+0xfc>)
 80020f2:	67a3      	str	r3, [r4, #120]	; 0x78
 80020f4:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_usart1_rx.Instance = DMA1_Channel2;
 80020f6:	4816      	ldr	r0, [pc, #88]	; (8002150 <HAL_UART_MspInit+0x104>)
 80020f8:	4b16      	ldr	r3, [pc, #88]	; (8002154 <HAL_UART_MspInit+0x108>)
 80020fa:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80020fc:	230e      	movs	r3, #14
 80020fe:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002100:	2300      	movs	r3, #0
 8002102:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002104:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002106:	2280      	movs	r2, #128	; 0x80
 8002108:	6102      	str	r2, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800210a:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800210c:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800210e:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002110:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002112:	f000 f9cf 	bl	80024b4 <HAL_DMA_Init>
 8002116:	b988      	cbnz	r0, 800213c <HAL_UART_MspInit+0xf0>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002118:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <HAL_UART_MspInit+0x104>)
 800211a:	67e3      	str	r3, [r4, #124]	; 0x7c
 800211c:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800211e:	2200      	movs	r2, #0
 8002120:	4611      	mov	r1, r2
 8002122:	2024      	movs	r0, #36	; 0x24
 8002124:	f000 f8ca 	bl	80022bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002128:	2024      	movs	r0, #36	; 0x24
 800212a:	f000 f90b 	bl	8002344 <HAL_NVIC_EnableIRQ>
}
 800212e:	e79e      	b.n	800206e <HAL_UART_MspInit+0x22>
      Error_Handler();
 8002130:	f7ff fd28 	bl	8001b84 <Error_Handler>
 8002134:	e7a6      	b.n	8002084 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8002136:	f7ff fd25 	bl	8001b84 <Error_Handler>
 800213a:	e7d9      	b.n	80020f0 <HAL_UART_MspInit+0xa4>
      Error_Handler();
 800213c:	f7ff fd22 	bl	8001b84 <Error_Handler>
 8002140:	e7ea      	b.n	8002118 <HAL_UART_MspInit+0xcc>
 8002142:	bf00      	nop
 8002144:	40013800 	.word	0x40013800
 8002148:	20000504 	.word	0x20000504
 800214c:	40020008 	.word	0x40020008
 8002150:	20000564 	.word	0x20000564
 8002154:	4002001c 	.word	0x4002001c

08002158 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002158:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800215a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800215c:	3304      	adds	r3, #4

0800215e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800215e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002160:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002162:	d3f9      	bcc.n	8002158 <CopyDataInit>
  bx lr
 8002164:	4770      	bx	lr

08002166 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002166:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002168:	3004      	adds	r0, #4

0800216a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800216a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800216c:	d3fb      	bcc.n	8002166 <FillZerobss>
  bx lr
 800216e:	4770      	bx	lr

08002170 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002170:	480c      	ldr	r0, [pc, #48]	; (80021a4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002172:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002174:	f7ff ff04 	bl	8001f80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002178:	480b      	ldr	r0, [pc, #44]	; (80021a8 <LoopForever+0x8>)
 800217a:	490c      	ldr	r1, [pc, #48]	; (80021ac <LoopForever+0xc>)
 800217c:	4a0c      	ldr	r2, [pc, #48]	; (80021b0 <LoopForever+0x10>)
 800217e:	2300      	movs	r3, #0
 8002180:	f7ff ffed 	bl	800215e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002184:	480b      	ldr	r0, [pc, #44]	; (80021b4 <LoopForever+0x14>)
 8002186:	490c      	ldr	r1, [pc, #48]	; (80021b8 <LoopForever+0x18>)
 8002188:	2300      	movs	r3, #0
 800218a:	f7ff ffee 	bl	800216a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800218e:	480b      	ldr	r0, [pc, #44]	; (80021bc <LoopForever+0x1c>)
 8002190:	490b      	ldr	r1, [pc, #44]	; (80021c0 <LoopForever+0x20>)
 8002192:	2300      	movs	r3, #0
 8002194:	f7ff ffe9 	bl	800216a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002198:	f006 f8ba 	bl	8008310 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800219c:	f7ff fc9e 	bl	8001adc <main>

080021a0 <LoopForever>:

LoopForever:
  b LoopForever
 80021a0:	e7fe      	b.n	80021a0 <LoopForever>
 80021a2:	0000      	.short	0x0000
  ldr   r0, =_estack
 80021a4:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 80021a8:	20000004 	.word	0x20000004
 80021ac:	20000090 	.word	0x20000090
 80021b0:	0800a090 	.word	0x0800a090
  INIT_BSS _sbss, _ebss
 80021b4:	20000200 	.word	0x20000200
 80021b8:	2000066c 	.word	0x2000066c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80021bc:	200301e0 	.word	0x200301e0
 80021c0:	20030a57 	.word	0x20030a57

080021c4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021c4:	e7fe      	b.n	80021c4 <ADC1_IRQHandler>
	...

080021c8 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0U)
 80021c8:	4b11      	ldr	r3, [pc, #68]	; (8002210 <HAL_InitTick+0x48>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b90b      	cbnz	r3, 80021d2 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80021ce:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80021d0:	4770      	bx	lr
{
 80021d2:	b510      	push	{r4, lr}
 80021d4:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80021d6:	f000 fe15 	bl	8002e04 <HAL_RCC_GetHCLKFreq>
 80021da:	4b0d      	ldr	r3, [pc, #52]	; (8002210 <HAL_InitTick+0x48>)
 80021dc:	781a      	ldrb	r2, [r3, #0]
 80021de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80021e6:	fbb0 f0f3 	udiv	r0, r0, r3
 80021ea:	f000 f8dd 	bl	80023a8 <HAL_SYSTICK_Config>
 80021ee:	b968      	cbnz	r0, 800220c <HAL_InitTick+0x44>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021f0:	2c0f      	cmp	r4, #15
 80021f2:	d901      	bls.n	80021f8 <HAL_InitTick+0x30>
        status = HAL_ERROR;
 80021f4:	2001      	movs	r0, #1
 80021f6:	e00a      	b.n	800220e <HAL_InitTick+0x46>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021f8:	2200      	movs	r2, #0
 80021fa:	4621      	mov	r1, r4
 80021fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002200:	f000 f85c 	bl	80022bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002204:	4b03      	ldr	r3, [pc, #12]	; (8002214 <HAL_InitTick+0x4c>)
 8002206:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8002208:	2000      	movs	r0, #0
 800220a:	e000      	b.n	800220e <HAL_InitTick+0x46>
      status = HAL_ERROR;
 800220c:	2001      	movs	r0, #1
}
 800220e:	bd10      	pop	{r4, pc}
 8002210:	20000008 	.word	0x20000008
 8002214:	2000000c 	.word	0x2000000c

08002218 <HAL_Init>:
{
 8002218:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800221a:	4a09      	ldr	r2, [pc, #36]	; (8002240 <HAL_Init+0x28>)
 800221c:	6813      	ldr	r3, [r2, #0]
 800221e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002222:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002224:	2003      	movs	r0, #3
 8002226:	f000 f82b 	bl	8002280 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800222a:	200f      	movs	r0, #15
 800222c:	f7ff ffcc 	bl	80021c8 <HAL_InitTick>
 8002230:	b110      	cbz	r0, 8002238 <HAL_Init+0x20>
    status = HAL_ERROR;
 8002232:	2401      	movs	r4, #1
}
 8002234:	4620      	mov	r0, r4
 8002236:	bd10      	pop	{r4, pc}
 8002238:	4604      	mov	r4, r0
    HAL_MspInit();
 800223a:	f7ff fdf5 	bl	8001e28 <HAL_MspInit>
 800223e:	e7f9      	b.n	8002234 <HAL_Init+0x1c>
 8002240:	58004000 	.word	0x58004000

08002244 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002244:	4a03      	ldr	r2, [pc, #12]	; (8002254 <HAL_IncTick+0x10>)
 8002246:	6811      	ldr	r1, [r2, #0]
 8002248:	4b03      	ldr	r3, [pc, #12]	; (8002258 <HAL_IncTick+0x14>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	440b      	add	r3, r1
 800224e:	6013      	str	r3, [r2, #0]
}
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20000654 	.word	0x20000654
 8002258:	20000008 	.word	0x20000008

0800225c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800225c:	4b01      	ldr	r3, [pc, #4]	; (8002264 <HAL_GetTick+0x8>)
 800225e:	6818      	ldr	r0, [r3, #0]
}
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	20000654 	.word	0x20000654

08002268 <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 8002268:	4b01      	ldr	r3, [pc, #4]	; (8002270 <HAL_GetTickPrio+0x8>)
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	2000000c 	.word	0x2000000c

08002274 <HAL_GetTickFreq>:
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
  return uwTickFreq;
}
 8002274:	4b01      	ldr	r3, [pc, #4]	; (800227c <HAL_GetTickFreq+0x8>)
 8002276:	7818      	ldrb	r0, [r3, #0]
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	20000008 	.word	0x20000008

08002280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002280:	b510      	push	{r4, lr}
 8002282:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002284:	1ec3      	subs	r3, r0, #3
 8002286:	2b04      	cmp	r3, #4
 8002288:	d80e      	bhi.n	80022a8 <HAL_NVIC_SetPriorityGrouping+0x28>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800228a:	490a      	ldr	r1, [pc, #40]	; (80022b4 <HAL_NVIC_SetPriorityGrouping+0x34>)
 800228c:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800228e:	0223      	lsls	r3, r4, #8
 8002290:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002294:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8002298:	4014      	ands	r4, r2
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800229a:	4323      	orrs	r3, r4
  reg_value  =  (reg_value                                   |
 800229c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80022a4:	60cb      	str	r3, [r1, #12]

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80022a6:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80022a8:	218c      	movs	r1, #140	; 0x8c
 80022aa:	4803      	ldr	r0, [pc, #12]	; (80022b8 <HAL_NVIC_SetPriorityGrouping+0x38>)
 80022ac:	f7ff fc6c 	bl	8001b88 <assert_failed>
 80022b0:	e7eb      	b.n	800228a <HAL_NVIC_SetPriorityGrouping+0xa>
 80022b2:	bf00      	nop
 80022b4:	e000ed00 	.word	0xe000ed00
 80022b8:	08009a08 	.word	0x08009a08

080022bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022bc:	b570      	push	{r4, r5, r6, lr}
 80022be:	4605      	mov	r5, r0
 80022c0:	460c      	mov	r4, r1
 80022c2:	4616      	mov	r6, r2
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80022c4:	2a0f      	cmp	r2, #15
 80022c6:	d826      	bhi.n	8002316 <HAL_NVIC_SetPriority+0x5a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80022c8:	2c0f      	cmp	r4, #15
 80022ca:	d829      	bhi.n	8002320 <HAL_NVIC_SetPriority+0x64>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022cc:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <HAL_NVIC_SetPriority+0x7c>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d4:	f1c3 0107 	rsb	r1, r3, #7
 80022d8:	2904      	cmp	r1, #4
 80022da:	bf28      	it	cs
 80022dc:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022de:	1d1a      	adds	r2, r3, #4
 80022e0:	2a06      	cmp	r2, #6
 80022e2:	bf8c      	ite	hi
 80022e4:	3b03      	subhi	r3, #3
 80022e6:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ec:	fa02 f101 	lsl.w	r1, r2, r1
 80022f0:	ea24 0401 	bic.w	r4, r4, r1
 80022f4:	409c      	lsls	r4, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	ea26 0603 	bic.w	r6, r6, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022fe:	4334      	orrs	r4, r6
  if ((int32_t)(IRQn) >= 0)
 8002300:	2d00      	cmp	r5, #0
 8002302:	db12      	blt.n	800232a <HAL_NVIC_SetPriority+0x6e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002304:	0124      	lsls	r4, r4, #4
 8002306:	b2e4      	uxtb	r4, r4
 8002308:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 800230c:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 8002310:	f885 4300 	strb.w	r4, [r5, #768]	; 0x300

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002314:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002316:	21a4      	movs	r1, #164	; 0xa4
 8002318:	4808      	ldr	r0, [pc, #32]	; (800233c <HAL_NVIC_SetPriority+0x80>)
 800231a:	f7ff fc35 	bl	8001b88 <assert_failed>
 800231e:	e7d3      	b.n	80022c8 <HAL_NVIC_SetPriority+0xc>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002320:	21a5      	movs	r1, #165	; 0xa5
 8002322:	4806      	ldr	r0, [pc, #24]	; (800233c <HAL_NVIC_SetPriority+0x80>)
 8002324:	f7ff fc30 	bl	8001b88 <assert_failed>
 8002328:	e7d0      	b.n	80022cc <HAL_NVIC_SetPriority+0x10>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232a:	f005 050f 	and.w	r5, r5, #15
 800232e:	0124      	lsls	r4, r4, #4
 8002330:	b2e4      	uxtb	r4, r4
 8002332:	4b03      	ldr	r3, [pc, #12]	; (8002340 <HAL_NVIC_SetPriority+0x84>)
 8002334:	555c      	strb	r4, [r3, r5]
}
 8002336:	e7ed      	b.n	8002314 <HAL_NVIC_SetPriority+0x58>
 8002338:	e000ed00 	.word	0xe000ed00
 800233c:	08009a08 	.word	0x08009a08
 8002340:	e000ed14 	.word	0xe000ed14

08002344 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002344:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002346:	2800      	cmp	r0, #0
 8002348:	db09      	blt.n	800235e <HAL_NVIC_EnableIRQ+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800234a:	0942      	lsrs	r2, r0, #5
 800234c:	f000 001f 	and.w	r0, r0, #31
 8002350:	2301      	movs	r3, #1
 8002352:	fa03 f000 	lsl.w	r0, r3, r0
 8002356:	4b04      	ldr	r3, [pc, #16]	; (8002368 <HAL_NVIC_EnableIRQ+0x24>)
 8002358:	f843 0022 	str.w	r0, [r3, r2, lsl #2]

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800235c:	bd08      	pop	{r3, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800235e:	21b6      	movs	r1, #182	; 0xb6
 8002360:	4802      	ldr	r0, [pc, #8]	; (800236c <HAL_NVIC_EnableIRQ+0x28>)
 8002362:	f7ff fc11 	bl	8001b88 <assert_failed>
}
 8002366:	e7f9      	b.n	800235c <HAL_NVIC_EnableIRQ+0x18>
 8002368:	e000e100 	.word	0xe000e100
 800236c:	08009a08 	.word	0x08009a08

08002370 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002370:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002372:	2800      	cmp	r0, #0
 8002374:	db0e      	blt.n	8002394 <HAL_NVIC_DisableIRQ+0x24>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002376:	0943      	lsrs	r3, r0, #5
 8002378:	f000 001f 	and.w	r0, r0, #31
 800237c:	2201      	movs	r2, #1
 800237e:	fa02 f000 	lsl.w	r0, r2, r0
 8002382:	3320      	adds	r3, #32
 8002384:	4a06      	ldr	r2, [pc, #24]	; (80023a0 <HAL_NVIC_DisableIRQ+0x30>)
 8002386:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800238a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800238e:	f3bf 8f6f 	isb	sy

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002392:	bd08      	pop	{r3, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002394:	21c6      	movs	r1, #198	; 0xc6
 8002396:	4803      	ldr	r0, [pc, #12]	; (80023a4 <HAL_NVIC_DisableIRQ+0x34>)
 8002398:	f7ff fbf6 	bl	8001b88 <assert_failed>
}
 800239c:	e7f9      	b.n	8002392 <HAL_NVIC_DisableIRQ+0x22>
 800239e:	bf00      	nop
 80023a0:	e000e100 	.word	0xe000e100
 80023a4:	08009a08 	.word	0x08009a08

080023a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a8:	3801      	subs	r0, #1
 80023aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80023ae:	d20a      	bcs.n	80023c6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <HAL_SYSTICK_Config+0x24>)
 80023b2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b4:	4a06      	ldr	r2, [pc, #24]	; (80023d0 <HAL_SYSTICK_Config+0x28>)
 80023b6:	21f0      	movs	r1, #240	; 0xf0
 80023b8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023bc:	2000      	movs	r0, #0
 80023be:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023c0:	2207      	movs	r2, #7
 80023c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80023c6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	e000e010 	.word	0xe000e010
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80023d4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80023d6:	2800      	cmp	r0, #0
 80023d8:	db0a      	blt.n	80023f0 <HAL_NVIC_SetPendingIRQ+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023da:	0943      	lsrs	r3, r0, #5
 80023dc:	f000 001f 	and.w	r0, r0, #31
 80023e0:	2201      	movs	r2, #1
 80023e2:	fa02 f000 	lsl.w	r0, r2, r0
 80023e6:	3340      	adds	r3, #64	; 0x40
 80023e8:	4a04      	ldr	r2, [pc, #16]	; (80023fc <HAL_NVIC_SetPendingIRQ+0x28>)
 80023ea:	f842 0023 	str.w	r0, [r2, r3, lsl #2]

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
}
 80023ee:	bd08      	pop	{r3, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80023f0:	f240 1127 	movw	r1, #295	; 0x127
 80023f4:	4802      	ldr	r0, [pc, #8]	; (8002400 <HAL_NVIC_SetPendingIRQ+0x2c>)
 80023f6:	f7ff fbc7 	bl	8001b88 <assert_failed>
}
 80023fa:	e7f8      	b.n	80023ee <HAL_NVIC_SetPendingIRQ+0x1a>
 80023fc:	e000e100 	.word	0xe000e100
 8002400:	08009a08 	.word	0x08009a08

08002404 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002404:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002406:	2800      	cmp	r0, #0
 8002408:	db0a      	blt.n	8002420 <HAL_NVIC_ClearPendingIRQ+0x1c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800240a:	0943      	lsrs	r3, r0, #5
 800240c:	f000 001f 	and.w	r0, r0, #31
 8002410:	2201      	movs	r2, #1
 8002412:	fa02 f000 	lsl.w	r0, r2, r0
 8002416:	3360      	adds	r3, #96	; 0x60
 8002418:	4a04      	ldr	r2, [pc, #16]	; (800242c <HAL_NVIC_ClearPendingIRQ+0x28>)
 800241a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 800241e:	bd08      	pop	{r3, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002420:	f240 1149 	movw	r1, #329	; 0x149
 8002424:	4802      	ldr	r0, [pc, #8]	; (8002430 <HAL_NVIC_ClearPendingIRQ+0x2c>)
 8002426:	f7ff fbaf 	bl	8001b88 <assert_failed>
}
 800242a:	e7f8      	b.n	800241e <HAL_NVIC_ClearPendingIRQ+0x1a>
 800242c:	e000e100 	.word	0xe000e100
 8002430:	08009a08 	.word	0x08009a08

08002434 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002434:	4770      	bx	lr

08002436 <HAL_SYSTICK_IRQHandler>:
{
 8002436:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8002438:	f7ff fffc 	bl	8002434 <HAL_SYSTICK_Callback>
}
 800243c:	bd08      	pop	{r3, pc}

0800243e <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800243e:	b470      	push	{r4, r5, r6}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002440:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8002442:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8002444:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002446:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8002448:	b114      	cbz	r4, 8002450 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800244a:	6d84      	ldr	r4, [r0, #88]	; 0x58
 800244c:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 800244e:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002450:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002452:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002454:	f004 061c 	and.w	r6, r4, #28
 8002458:	2401      	movs	r4, #1
 800245a:	40b4      	lsls	r4, r6
 800245c:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800245e:	6804      	ldr	r4, [r0, #0]
 8002460:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002462:	6883      	ldr	r3, [r0, #8]
 8002464:	2b10      	cmp	r3, #16
 8002466:	d005      	beq.n	8002474 <DMA_SetConfig+0x36>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002468:	6803      	ldr	r3, [r0, #0]
 800246a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800246c:	6803      	ldr	r3, [r0, #0]
 800246e:	60da      	str	r2, [r3, #12]
  }
}
 8002470:	bc70      	pop	{r4, r5, r6}
 8002472:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8002474:	6803      	ldr	r3, [r0, #0]
 8002476:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002478:	6803      	ldr	r3, [r0, #0]
 800247a:	60d9      	str	r1, [r3, #12]
 800247c:	e7f8      	b.n	8002470 <DMA_SetConfig+0x32>
	...

08002480 <DMA_CalcDMAMUXChannelBaseAndMask>:
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002480:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002482:	f023 0303 	bic.w	r3, r3, #3
 8002486:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800248a:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800248e:	6483      	str	r3, [r0, #72]	; 0x48
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002490:	7803      	ldrb	r3, [r0, #0]
 8002492:	3b08      	subs	r3, #8
 8002494:	4a05      	ldr	r2, [pc, #20]	; (80024ac <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800249a:	4a05      	ldr	r2, [pc, #20]	; (80024b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 800249c:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800249e:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80024a2:	2201      	movs	r2, #1
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	6503      	str	r3, [r0, #80]	; 0x50
}
 80024aa:	4770      	bx	lr
 80024ac:	cccccccd 	.word	0xcccccccd
 80024b0:	40020880 	.word	0x40020880

080024b4 <HAL_DMA_Init>:
  if (hdma == NULL)
 80024b4:	2800      	cmp	r0, #0
 80024b6:	f000 80c3 	beq.w	8002640 <HAL_DMA_Init+0x18c>
{
 80024ba:	b510      	push	{r4, lr}
 80024bc:	4604      	mov	r4, r0
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 80024be:	6803      	ldr	r3, [r0, #0]
 80024c0:	4a60      	ldr	r2, [pc, #384]	; (8002644 <HAL_DMA_Init+0x190>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d015      	beq.n	80024f2 <HAL_DMA_Init+0x3e>
 80024c6:	3214      	adds	r2, #20
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d012      	beq.n	80024f2 <HAL_DMA_Init+0x3e>
 80024cc:	3214      	adds	r2, #20
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d00f      	beq.n	80024f2 <HAL_DMA_Init+0x3e>
 80024d2:	3214      	adds	r2, #20
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d00c      	beq.n	80024f2 <HAL_DMA_Init+0x3e>
 80024d8:	3214      	adds	r2, #20
 80024da:	4293      	cmp	r3, r2
 80024dc:	d009      	beq.n	80024f2 <HAL_DMA_Init+0x3e>
 80024de:	3214      	adds	r2, #20
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d006      	beq.n	80024f2 <HAL_DMA_Init+0x3e>
 80024e4:	3214      	adds	r2, #20
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d003      	beq.n	80024f2 <HAL_DMA_Init+0x3e>
 80024ea:	21a2      	movs	r1, #162	; 0xa2
 80024ec:	4856      	ldr	r0, [pc, #344]	; (8002648 <HAL_DMA_Init+0x194>)
 80024ee:	f7ff fb4b 	bl	8001b88 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80024f2:	68a3      	ldr	r3, [r4, #8]
 80024f4:	f033 0210 	bics.w	r2, r3, #16
 80024f8:	d002      	beq.n	8002500 <HAL_DMA_Init+0x4c>
 80024fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024fe:	d16e      	bne.n	80025de <HAL_DMA_Init+0x12a>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002500:	68e3      	ldr	r3, [r4, #12]
 8002502:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8002506:	d16f      	bne.n	80025e8 <HAL_DMA_Init+0x134>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002508:	6923      	ldr	r3, [r4, #16]
 800250a:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800250e:	d170      	bne.n	80025f2 <HAL_DMA_Init+0x13e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002510:	6963      	ldr	r3, [r4, #20]
 8002512:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8002516:	d002      	beq.n	800251e <HAL_DMA_Init+0x6a>
 8002518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800251c:	d16e      	bne.n	80025fc <HAL_DMA_Init+0x148>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800251e:	69a3      	ldr	r3, [r4, #24]
 8002520:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8002524:	d002      	beq.n	800252c <HAL_DMA_Init+0x78>
 8002526:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800252a:	d16c      	bne.n	8002606 <HAL_DMA_Init+0x152>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800252c:	69e3      	ldr	r3, [r4, #28]
 800252e:	f033 0320 	bics.w	r3, r3, #32
 8002532:	d003      	beq.n	800253c <HAL_DMA_Init+0x88>
 8002534:	21a8      	movs	r1, #168	; 0xa8
 8002536:	4844      	ldr	r0, [pc, #272]	; (8002648 <HAL_DMA_Init+0x194>)
 8002538:	f7ff fb26 	bl	8001b88 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800253c:	6a23      	ldr	r3, [r4, #32]
 800253e:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8002542:	d006      	beq.n	8002552 <HAL_DMA_Init+0x9e>
 8002544:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002548:	d003      	beq.n	8002552 <HAL_DMA_Init+0x9e>
 800254a:	21a9      	movs	r1, #169	; 0xa9
 800254c:	483e      	ldr	r0, [pc, #248]	; (8002648 <HAL_DMA_Init+0x194>)
 800254e:	f7ff fb1b 	bl	8001b88 <assert_failed>
  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 8002552:	6863      	ldr	r3, [r4, #4]
 8002554:	2b28      	cmp	r3, #40	; 0x28
 8002556:	d85b      	bhi.n	8002610 <HAL_DMA_Init+0x15c>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002558:	6822      	ldr	r2, [r4, #0]
 800255a:	4b3c      	ldr	r3, [pc, #240]	; (800264c <HAL_DMA_Init+0x198>)
 800255c:	4413      	add	r3, r2
 800255e:	493c      	ldr	r1, [pc, #240]	; (8002650 <HAL_DMA_Init+0x19c>)
 8002560:	fba1 1303 	umull	r1, r3, r1, r3
 8002564:	091b      	lsrs	r3, r3, #4
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	6463      	str	r3, [r4, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 800256a:	4b3a      	ldr	r3, [pc, #232]	; (8002654 <HAL_DMA_Init+0x1a0>)
 800256c:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800256e:	2302      	movs	r3, #2
 8002570:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 8002574:	6811      	ldr	r1, [r2, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002576:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800257a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 800257e:	68a3      	ldr	r3, [r4, #8]
 8002580:	68e0      	ldr	r0, [r4, #12]
 8002582:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002584:	6920      	ldr	r0, [r4, #16]
 8002586:	4303      	orrs	r3, r0
 8002588:	6960      	ldr	r0, [r4, #20]
 800258a:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800258c:	69a0      	ldr	r0, [r4, #24]
 800258e:	4303      	orrs	r3, r0
 8002590:	69e0      	ldr	r0, [r4, #28]
 8002592:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002594:	6a20      	ldr	r0, [r4, #32]
 8002596:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8002598:	430b      	orrs	r3, r1
  hdma->Instance->CCR = tmp;
 800259a:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800259c:	4620      	mov	r0, r4
 800259e:	f7ff ff6f 	bl	8002480 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80025a2:	68a3      	ldr	r3, [r4, #8]
 80025a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80025a8:	bf04      	itt	eq
 80025aa:	2300      	moveq	r3, #0
 80025ac:	6063      	streq	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80025ae:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80025b0:	6863      	ldr	r3, [r4, #4]
 80025b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025b6:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025b8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80025ba:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80025bc:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80025be:	6863      	ldr	r3, [r4, #4]
 80025c0:	1e5a      	subs	r2, r3, #1
 80025c2:	2a03      	cmp	r2, #3
 80025c4:	d929      	bls.n	800261a <HAL_DMA_Init+0x166>
    hdma->DMAmuxRequestGen = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80025ca:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80025cc:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ce:	2000      	movs	r0, #0
 80025d0:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 80025d2:	2301      	movs	r3, #1
 80025d4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 80025d8:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80025dc:	bd10      	pop	{r4, pc}
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80025de:	21a3      	movs	r1, #163	; 0xa3
 80025e0:	4819      	ldr	r0, [pc, #100]	; (8002648 <HAL_DMA_Init+0x194>)
 80025e2:	f7ff fad1 	bl	8001b88 <assert_failed>
 80025e6:	e78b      	b.n	8002500 <HAL_DMA_Init+0x4c>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80025e8:	21a4      	movs	r1, #164	; 0xa4
 80025ea:	4817      	ldr	r0, [pc, #92]	; (8002648 <HAL_DMA_Init+0x194>)
 80025ec:	f7ff facc 	bl	8001b88 <assert_failed>
 80025f0:	e78a      	b.n	8002508 <HAL_DMA_Init+0x54>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80025f2:	21a5      	movs	r1, #165	; 0xa5
 80025f4:	4814      	ldr	r0, [pc, #80]	; (8002648 <HAL_DMA_Init+0x194>)
 80025f6:	f7ff fac7 	bl	8001b88 <assert_failed>
 80025fa:	e789      	b.n	8002510 <HAL_DMA_Init+0x5c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80025fc:	21a6      	movs	r1, #166	; 0xa6
 80025fe:	4812      	ldr	r0, [pc, #72]	; (8002648 <HAL_DMA_Init+0x194>)
 8002600:	f7ff fac2 	bl	8001b88 <assert_failed>
 8002604:	e78b      	b.n	800251e <HAL_DMA_Init+0x6a>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002606:	21a7      	movs	r1, #167	; 0xa7
 8002608:	480f      	ldr	r0, [pc, #60]	; (8002648 <HAL_DMA_Init+0x194>)
 800260a:	f7ff fabd 	bl	8001b88 <assert_failed>
 800260e:	e78d      	b.n	800252c <HAL_DMA_Init+0x78>
  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 8002610:	21ab      	movs	r1, #171	; 0xab
 8002612:	480d      	ldr	r0, [pc, #52]	; (8002648 <HAL_DMA_Init+0x194>)
 8002614:	f7ff fab8 	bl	8001b88 <assert_failed>
 8002618:	e79e      	b.n	8002558 <HAL_DMA_Init+0xa4>
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800261a:	f003 033f 	and.w	r3, r3, #63	; 0x3f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800261e:	4a0e      	ldr	r2, [pc, #56]	; (8002658 <HAL_DMA_Init+0x1a4>)
 8002620:	441a      	add	r2, r3
 8002622:	0092      	lsls	r2, r2, #2
 8002624:	6562      	str	r2, [r4, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002626:	490d      	ldr	r1, [pc, #52]	; (800265c <HAL_DMA_Init+0x1a8>)
 8002628:	65a1      	str	r1, [r4, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800262a:	3b01      	subs	r3, #1
 800262c:	2101      	movs	r1, #1
 800262e:	fa01 f303 	lsl.w	r3, r1, r3
 8002632:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002638:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800263a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	e7c6      	b.n	80025ce <HAL_DMA_Init+0x11a>
    return HAL_ERROR;
 8002640:	2001      	movs	r0, #1
}
 8002642:	4770      	bx	lr
 8002644:	40020008 	.word	0x40020008
 8002648:	08009a44 	.word	0x08009a44
 800264c:	bffdfff8 	.word	0xbffdfff8
 8002650:	cccccccd 	.word	0xcccccccd
 8002654:	40020000 	.word	0x40020000
 8002658:	1000823f 	.word	0x1000823f
 800265c:	40020940 	.word	0x40020940

08002660 <HAL_DMA_Start_IT>:
{
 8002660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002662:	4604      	mov	r4, r0
 8002664:	460e      	mov	r6, r1
 8002666:	4617      	mov	r7, r2
 8002668:	461d      	mov	r5, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800266a:	1e5a      	subs	r2, r3, #1
 800266c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002670:	429a      	cmp	r2, r3
 8002672:	d810      	bhi.n	8002696 <HAL_DMA_Start_IT+0x36>
  __HAL_LOCK(hdma);
 8002674:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002678:	2b01      	cmp	r3, #1
 800267a:	d04a      	beq.n	8002712 <HAL_DMA_Start_IT+0xb2>
 800267c:	2301      	movs	r3, #1
 800267e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8002682:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b01      	cmp	r3, #1
 800268a:	d00a      	beq.n	80026a2 <HAL_DMA_Start_IT+0x42>
    __HAL_UNLOCK(hdma);
 800268c:	2300      	movs	r3, #0
 800268e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 8002692:	2002      	movs	r0, #2
}
 8002694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002696:	f240 11b5 	movw	r1, #437	; 0x1b5
 800269a:	481f      	ldr	r0, [pc, #124]	; (8002718 <HAL_DMA_Start_IT+0xb8>)
 800269c:	f7ff fa74 	bl	8001b88 <assert_failed>
 80026a0:	e7e8      	b.n	8002674 <HAL_DMA_Start_IT+0x14>
    hdma->State = HAL_DMA_STATE_BUSY;
 80026a2:	2302      	movs	r3, #2
 80026a4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026a8:	2300      	movs	r3, #0
 80026aa:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80026ac:	6822      	ldr	r2, [r4, #0]
 80026ae:	6813      	ldr	r3, [r2, #0]
 80026b0:	f023 0301 	bic.w	r3, r3, #1
 80026b4:	6013      	str	r3, [r2, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026b6:	462b      	mov	r3, r5
 80026b8:	463a      	mov	r2, r7
 80026ba:	4631      	mov	r1, r6
 80026bc:	4620      	mov	r0, r4
 80026be:	f7ff febe 	bl	800243e <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80026c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026c4:	b1d3      	cbz	r3, 80026fc <HAL_DMA_Start_IT+0x9c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026c6:	6822      	ldr	r2, [r4, #0]
 80026c8:	6813      	ldr	r3, [r2, #0]
 80026ca:	f043 030e 	orr.w	r3, r3, #14
 80026ce:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80026d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80026d8:	d003      	beq.n	80026e2 <HAL_DMA_Start_IT+0x82>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026e0:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80026e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026e4:	b11b      	cbz	r3, 80026ee <HAL_DMA_Start_IT+0x8e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026ec:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80026ee:	6822      	ldr	r2, [r4, #0]
 80026f0:	6813      	ldr	r3, [r2, #0]
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026f8:	2000      	movs	r0, #0
 80026fa:	e7cb      	b.n	8002694 <HAL_DMA_Start_IT+0x34>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026fc:	6822      	ldr	r2, [r4, #0]
 80026fe:	6813      	ldr	r3, [r2, #0]
 8002700:	f023 0304 	bic.w	r3, r3, #4
 8002704:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002706:	6822      	ldr	r2, [r4, #0]
 8002708:	6813      	ldr	r3, [r2, #0]
 800270a:	f043 030a 	orr.w	r3, r3, #10
 800270e:	6013      	str	r3, [r2, #0]
 8002710:	e7de      	b.n	80026d0 <HAL_DMA_Start_IT+0x70>
  __HAL_LOCK(hdma);
 8002712:	2002      	movs	r0, #2
 8002714:	e7be      	b.n	8002694 <HAL_DMA_Start_IT+0x34>
 8002716:	bf00      	nop
 8002718:	08009a44 	.word	0x08009a44

0800271c <HAL_DMA_Abort>:
  if (NULL == hdma)
 800271c:	4603      	mov	r3, r0
 800271e:	2800      	cmp	r0, #0
 8002720:	d034      	beq.n	800278c <HAL_DMA_Abort+0x70>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002722:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	2a02      	cmp	r2, #2
 800272a:	d006      	beq.n	800273a <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800272c:	2204      	movs	r2, #4
 800272e:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8002730:	2200      	movs	r2, #0
 8002732:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 8002736:	2001      	movs	r0, #1
 8002738:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800273a:	6801      	ldr	r1, [r0, #0]
 800273c:	680a      	ldr	r2, [r1, #0]
 800273e:	f022 020e 	bic.w	r2, r2, #14
 8002742:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002744:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002746:	680a      	ldr	r2, [r1, #0]
 8002748:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800274c:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800274e:	6801      	ldr	r1, [r0, #0]
 8002750:	680a      	ldr	r2, [r1, #0]
 8002752:	f022 0201 	bic.w	r2, r2, #1
 8002756:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002758:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800275a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800275c:	f002 011c 	and.w	r1, r2, #28
 8002760:	2201      	movs	r2, #1
 8002762:	408a      	lsls	r2, r1
 8002764:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002766:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002768:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800276a:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800276c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800276e:	b132      	cbz	r2, 800277e <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002770:	6811      	ldr	r1, [r2, #0]
 8002772:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002776:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002778:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800277a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800277c:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002784:	2000      	movs	r0, #0
 8002786:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 800278a:	4770      	bx	lr
    return HAL_ERROR;
 800278c:	2001      	movs	r0, #1
}
 800278e:	4770      	bx	lr

08002790 <HAL_DMA_Abort_IT>:
{
 8002790:	b508      	push	{r3, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002792:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d003      	beq.n	80027a4 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800279c:	2304      	movs	r3, #4
 800279e:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80027a0:	2001      	movs	r0, #1
}
 80027a2:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027a4:	6802      	ldr	r2, [r0, #0]
 80027a6:	6813      	ldr	r3, [r2, #0]
 80027a8:	f023 030e 	bic.w	r3, r3, #14
 80027ac:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80027ae:	6802      	ldr	r2, [r0, #0]
 80027b0:	6813      	ldr	r3, [r2, #0]
 80027b2:	f023 0301 	bic.w	r3, r3, #1
 80027b6:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027b8:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80027ba:	6813      	ldr	r3, [r2, #0]
 80027bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027c0:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80027c2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80027c4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80027c6:	f003 021c 	and.w	r2, r3, #28
 80027ca:	2301      	movs	r3, #1
 80027cc:	4093      	lsls	r3, r2
 80027ce:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027d0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80027d2:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80027d4:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80027d6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80027d8:	b133      	cbz	r3, 80027e8 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027e0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027e2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80027e4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80027e6:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80027e8:	2301      	movs	r3, #1
 80027ea:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80027ee:	2300      	movs	r3, #0
 80027f0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80027f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80027f6:	b113      	cbz	r3, 80027fe <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 80027f8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80027fa:	2000      	movs	r0, #0
 80027fc:	e7d1      	b.n	80027a2 <HAL_DMA_Abort_IT+0x12>
 80027fe:	2000      	movs	r0, #0
 8002800:	e7cf      	b.n	80027a2 <HAL_DMA_Abort_IT+0x12>

08002802 <HAL_DMA_IRQHandler>:
{
 8002802:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002804:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002806:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002808:	6804      	ldr	r4, [r0, #0]
 800280a:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800280c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800280e:	f003 031c 	and.w	r3, r3, #28
 8002812:	2204      	movs	r2, #4
 8002814:	409a      	lsls	r2, r3
 8002816:	420a      	tst	r2, r1
 8002818:	d015      	beq.n	8002846 <HAL_DMA_IRQHandler+0x44>
 800281a:	f015 0f04 	tst.w	r5, #4
 800281e:	d012      	beq.n	8002846 <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002820:	6823      	ldr	r3, [r4, #0]
 8002822:	f013 0f20 	tst.w	r3, #32
 8002826:	d103      	bne.n	8002830 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002828:	6823      	ldr	r3, [r4, #0]
 800282a:	f023 0304 	bic.w	r3, r3, #4
 800282e:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002830:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002832:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002834:	f003 021c 	and.w	r2, r3, #28
 8002838:	2304      	movs	r3, #4
 800283a:	4093      	lsls	r3, r2
 800283c:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 800283e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002840:	b103      	cbz	r3, 8002844 <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 8002842:	4798      	blx	r3
}
 8002844:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002846:	2202      	movs	r2, #2
 8002848:	409a      	lsls	r2, r3
 800284a:	420a      	tst	r2, r1
 800284c:	d01c      	beq.n	8002888 <HAL_DMA_IRQHandler+0x86>
 800284e:	f015 0f02 	tst.w	r5, #2
 8002852:	d019      	beq.n	8002888 <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002854:	6823      	ldr	r3, [r4, #0]
 8002856:	f013 0f20 	tst.w	r3, #32
 800285a:	d106      	bne.n	800286a <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800285c:	6823      	ldr	r3, [r4, #0]
 800285e:	f023 030a 	bic.w	r3, r3, #10
 8002862:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002864:	2301      	movs	r3, #1
 8002866:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800286a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800286c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800286e:	f003 021c 	and.w	r2, r3, #28
 8002872:	2302      	movs	r3, #2
 8002874:	4093      	lsls	r3, r2
 8002876:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002878:	2300      	movs	r3, #0
 800287a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 800287e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0df      	beq.n	8002844 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8002884:	4798      	blx	r3
 8002886:	e7dd      	b.n	8002844 <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002888:	2208      	movs	r2, #8
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	420b      	tst	r3, r1
 8002890:	d0d8      	beq.n	8002844 <HAL_DMA_IRQHandler+0x42>
 8002892:	f015 0f08 	tst.w	r5, #8
 8002896:	d0d5      	beq.n	8002844 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002898:	6823      	ldr	r3, [r4, #0]
 800289a:	f023 030e 	bic.w	r3, r3, #14
 800289e:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80028a0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80028a2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80028a4:	f003 031c 	and.w	r3, r3, #28
 80028a8:	2201      	movs	r2, #1
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028b0:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80028b2:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80028b6:	2300      	movs	r3, #0
 80028b8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80028bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0c0      	beq.n	8002844 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 80028c2:	4798      	blx	r3
  return;
 80028c4:	e7be      	b.n	8002844 <HAL_DMA_IRQHandler+0x42>
	...

080028c8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028cc:	4607      	mov	r7, r0
 80028ce:	460c      	mov	r4, r1
  uint32_t position = 0x00u;
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80028d0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80028d4:	d012      	beq.n	80028fc <HAL_GPIO_Init+0x34>
 80028d6:	4b8f      	ldr	r3, [pc, #572]	; (8002b14 <HAL_GPIO_Init+0x24c>)
 80028d8:	4298      	cmp	r0, r3
 80028da:	d00f      	beq.n	80028fc <HAL_GPIO_Init+0x34>
 80028dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028e0:	4298      	cmp	r0, r3
 80028e2:	d00b      	beq.n	80028fc <HAL_GPIO_Init+0x34>
 80028e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e8:	4298      	cmp	r0, r3
 80028ea:	d007      	beq.n	80028fc <HAL_GPIO_Init+0x34>
 80028ec:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80028f0:	4298      	cmp	r0, r3
 80028f2:	d003      	beq.n	80028fc <HAL_GPIO_Init+0x34>
 80028f4:	21a8      	movs	r1, #168	; 0xa8
 80028f6:	4888      	ldr	r0, [pc, #544]	; (8002b18 <HAL_GPIO_Init+0x250>)
 80028f8:	f7ff f946 	bl	8001b88 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80028fc:	6823      	ldr	r3, [r4, #0]
 80028fe:	b29a      	uxth	r2, r3
 8002900:	b112      	cbz	r2, 8002908 <HAL_GPIO_Init+0x40>
 8002902:	0c1b      	lsrs	r3, r3, #16
 8002904:	041b      	lsls	r3, r3, #16
 8002906:	b11b      	cbz	r3, 8002910 <HAL_GPIO_Init+0x48>
 8002908:	21a9      	movs	r1, #169	; 0xa9
 800290a:	4883      	ldr	r0, [pc, #524]	; (8002b18 <HAL_GPIO_Init+0x250>)
 800290c:	f7ff f93c 	bl	8001b88 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002910:	6863      	ldr	r3, [r4, #4]
 8002912:	2b03      	cmp	r3, #3
 8002914:	d915      	bls.n	8002942 <HAL_GPIO_Init+0x7a>
 8002916:	f1a3 0211 	sub.w	r2, r3, #17
 800291a:	2a01      	cmp	r2, #1
 800291c:	d911      	bls.n	8002942 <HAL_GPIO_Init+0x7a>
 800291e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002922:	f5b2 1f88 	cmp.w	r2, #1114112	; 0x110000
 8002926:	d00c      	beq.n	8002942 <HAL_GPIO_Init+0x7a>
 8002928:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800292c:	d009      	beq.n	8002942 <HAL_GPIO_Init+0x7a>
 800292e:	f5b2 1f90 	cmp.w	r2, #1179648	; 0x120000
 8002932:	d006      	beq.n	8002942 <HAL_GPIO_Init+0x7a>
 8002934:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002938:	d003      	beq.n	8002942 <HAL_GPIO_Init+0x7a>
 800293a:	21aa      	movs	r1, #170	; 0xaa
 800293c:	4876      	ldr	r0, [pc, #472]	; (8002b18 <HAL_GPIO_Init+0x250>)
 800293e:	f7ff f923 	bl	8001b88 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002942:	68a3      	ldr	r3, [r4, #8]
 8002944:	2b02      	cmp	r3, #2
 8002946:	d80b      	bhi.n	8002960 <HAL_GPIO_Init+0x98>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002948:	6823      	ldr	r3, [r4, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 80e0 	beq.w	8002b10 <HAL_GPIO_Init+0x248>
 8002950:	2500      	movs	r5, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002952:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8002b20 <HAL_GPIO_Init+0x258>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002956:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8002b14 <HAL_GPIO_Init+0x24c>
 800295a:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 8002b24 <HAL_GPIO_Init+0x25c>
 800295e:	e093      	b.n	8002a88 <HAL_GPIO_Init+0x1c0>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002960:	21ab      	movs	r1, #171	; 0xab
 8002962:	486d      	ldr	r0, [pc, #436]	; (8002b18 <HAL_GPIO_Init+0x250>)
 8002964:	f7ff f910 	bl	8001b88 <assert_failed>
 8002968:	e7ee      	b.n	8002948 <HAL_GPIO_Init+0x80>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800296a:	68e3      	ldr	r3, [r4, #12]
 800296c:	2b03      	cmp	r3, #3
 800296e:	d813      	bhi.n	8002998 <HAL_GPIO_Init+0xd0>
        temp = GPIOx->OSPEEDR;
 8002970:	68ba      	ldr	r2, [r7, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002972:	0069      	lsls	r1, r5, #1
 8002974:	2303      	movs	r3, #3
 8002976:	408b      	lsls	r3, r1
 8002978:	ea22 0203 	bic.w	r2, r2, r3
        temp |= (GPIO_Init->Speed << (position * 2u));
 800297c:	68e3      	ldr	r3, [r4, #12]
 800297e:	408b      	lsls	r3, r1
 8002980:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 8002982:	60bb      	str	r3, [r7, #8]
        temp = GPIOx->OTYPER;
 8002984:	687a      	ldr	r2, [r7, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002986:	ea22 0206 	bic.w	r2, r2, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800298a:	6863      	ldr	r3, [r4, #4]
 800298c:	f3c3 1600 	ubfx	r6, r3, #4, #1
 8002990:	40ae      	lsls	r6, r5
 8002992:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 8002994:	607e      	str	r6, [r7, #4]
 8002996:	e083      	b.n	8002aa0 <HAL_GPIO_Init+0x1d8>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002998:	21ba      	movs	r1, #186	; 0xba
 800299a:	485f      	ldr	r0, [pc, #380]	; (8002b18 <HAL_GPIO_Init+0x250>)
 800299c:	f7ff f8f4 	bl	8001b88 <assert_failed>
 80029a0:	e7e6      	b.n	8002970 <HAL_GPIO_Init+0xa8>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80029a2:	6923      	ldr	r3, [r4, #16]
 80029a4:	2b0f      	cmp	r3, #15
 80029a6:	f200 80a8 	bhi.w	8002afa <HAL_GPIO_Init+0x232>
        temp = GPIOx->AFR[position >> 3u];
 80029aa:	08ea      	lsrs	r2, r5, #3
 80029ac:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 80029b0:	6a10      	ldr	r0, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029b2:	f005 0307 	and.w	r3, r5, #7
 80029b6:	0099      	lsls	r1, r3, #2
 80029b8:	230f      	movs	r3, #15
 80029ba:	408b      	lsls	r3, r1
 80029bc:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029c0:	6923      	ldr	r3, [r4, #16]
 80029c2:	408b      	lsls	r3, r1
 80029c4:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3u] = temp;
 80029c6:	6213      	str	r3, [r2, #32]
      temp = GPIOx->MODER;
 80029c8:	683a      	ldr	r2, [r7, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029ca:	0069      	lsls	r1, r5, #1
 80029cc:	2303      	movs	r3, #3
 80029ce:	408b      	lsls	r3, r1
 80029d0:	ea22 0203 	bic.w	r2, r2, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029d4:	6863      	ldr	r3, [r4, #4]
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	408b      	lsls	r3, r1
 80029dc:	4313      	orrs	r3, r2
      GPIOx->MODER = temp;
 80029de:	603b      	str	r3, [r7, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029e0:	6863      	ldr	r3, [r4, #4]
 80029e2:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80029e6:	d04a      	beq.n	8002a7e <HAL_GPIO_Init+0x1b6>
        temp = SYSCFG->EXTICR[position >> 2u];
 80029e8:	f025 0303 	bic.w	r3, r5, #3
 80029ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80029f0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80029f4:	6898      	ldr	r0, [r3, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029f6:	f005 0203 	and.w	r2, r5, #3
 80029fa:	0091      	lsls	r1, r2, #2
 80029fc:	220f      	movs	r2, #15
 80029fe:	408a      	lsls	r2, r1
 8002a00:	ea20 0002 	bic.w	r0, r0, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a04:	f1b7 4f90 	cmp.w	r7, #1207959552	; 0x48000000
 8002a08:	d07c      	beq.n	8002b04 <HAL_GPIO_Init+0x23c>
 8002a0a:	454f      	cmp	r7, r9
 8002a0c:	d07c      	beq.n	8002b08 <HAL_GPIO_Init+0x240>
 8002a0e:	4557      	cmp	r7, sl
 8002a10:	d07c      	beq.n	8002b0c <HAL_GPIO_Init+0x244>
 8002a12:	4a42      	ldr	r2, [pc, #264]	; (8002b1c <HAL_GPIO_Init+0x254>)
 8002a14:	4297      	cmp	r7, r2
 8002a16:	bf0c      	ite	eq
 8002a18:	2204      	moveq	r2, #4
 8002a1a:	2207      	movne	r2, #7
 8002a1c:	408a      	lsls	r2, r1
 8002a1e:	4302      	orrs	r2, r0
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a20:	609a      	str	r2, [r3, #8]
        temp = EXTI->RTSR1;
 8002a22:	f8d8 2000 	ldr.w	r2, [r8]
        temp &= ~(iocurrent);
 8002a26:	ea6f 010b 	mvn.w	r1, fp
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a2a:	6863      	ldr	r3, [r4, #4]
 8002a2c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8002a30:	bf0c      	ite	eq
 8002a32:	400a      	andeq	r2, r1
        {
          temp |= iocurrent;
 8002a34:	ea4b 0202 	orrne.w	r2, fp, r2
        }
        EXTI->RTSR1 = temp;
 8002a38:	f8c8 2000 	str.w	r2, [r8]

        temp = EXTI->FTSR1;
 8002a3c:	f8d8 2004 	ldr.w	r2, [r8, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a40:	6863      	ldr	r3, [r4, #4]
 8002a42:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8002a46:	bf0c      	ite	eq
 8002a48:	400a      	andeq	r2, r1
        {
          temp |= iocurrent;
 8002a4a:	ea4b 0202 	orrne.w	r2, fp, r2
        }
        EXTI->FTSR1 = temp;
 8002a4e:	f8c8 2004 	str.w	r2, [r8, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a52:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a56:	6863      	ldr	r3, [r4, #4]
 8002a58:	f413 3f80 	tst.w	r3, #65536	; 0x10000
        temp &= ~(iocurrent);
 8002a5c:	bf0c      	ite	eq
 8002a5e:	400a      	andeq	r2, r1
        {
          temp |= iocurrent;
 8002a60:	ea4b 0202 	orrne.w	r2, fp, r2
        }
        EXTI->IMR1 = temp;
 8002a64:	f8c8 2080 	str.w	r2, [r8, #128]	; 0x80

        temp = EXTI->EMR1;
 8002a68:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a6c:	6862      	ldr	r2, [r4, #4]
 8002a6e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        temp &= ~(iocurrent);
 8002a72:	bf0c      	ite	eq
 8002a74:	400b      	andeq	r3, r1
        {
          temp |= iocurrent;
 8002a76:	ea4b 0303 	orrne.w	r3, fp, r3
        }
        EXTI->EMR1 = temp;
 8002a7a:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
      }
    }

    position++;
 8002a7e:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a80:	6823      	ldr	r3, [r4, #0]
 8002a82:	fa33 f205 	lsrs.w	r2, r3, r5
 8002a86:	d043      	beq.n	8002b10 <HAL_GPIO_Init+0x248>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a88:	2601      	movs	r6, #1
 8002a8a:	40ae      	lsls	r6, r5
    if (iocurrent != 0x00u)
 8002a8c:	ea16 0b03 	ands.w	fp, r6, r3
 8002a90:	d0f5      	beq.n	8002a7e <HAL_GPIO_Init+0x1b6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a92:	6863      	ldr	r3, [r4, #4]
 8002a94:	f003 0303 	and.w	r3, r3, #3
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	f67f af65 	bls.w	800296a <HAL_GPIO_Init+0xa2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aa0:	6863      	ldr	r3, [r4, #4]
 8002aa2:	f003 0303 	and.w	r3, r3, #3
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d08e      	beq.n	80029c8 <HAL_GPIO_Init+0x100>
        temp = GPIOx->PUPDR;
 8002aaa:	68fa      	ldr	r2, [r7, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002aac:	0069      	lsls	r1, r5, #1
 8002aae:	2303      	movs	r3, #3
 8002ab0:	408b      	lsls	r3, r1
 8002ab2:	ea22 0203 	bic.w	r2, r2, r3
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ab6:	68a3      	ldr	r3, [r4, #8]
 8002ab8:	408b      	lsls	r3, r1
 8002aba:	4313      	orrs	r3, r2
        GPIOx->PUPDR = temp;
 8002abc:	60fb      	str	r3, [r7, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002abe:	6863      	ldr	r3, [r4, #4]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	f47f af7f 	bne.w	80029c8 <HAL_GPIO_Init+0x100>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002aca:	f1b7 4f90 	cmp.w	r7, #1207959552	; 0x48000000
 8002ace:	f43f af68 	beq.w	80029a2 <HAL_GPIO_Init+0xda>
 8002ad2:	454f      	cmp	r7, r9
 8002ad4:	f43f af65 	beq.w	80029a2 <HAL_GPIO_Init+0xda>
 8002ad8:	4557      	cmp	r7, sl
 8002ada:	f43f af62 	beq.w	80029a2 <HAL_GPIO_Init+0xda>
 8002ade:	4b0f      	ldr	r3, [pc, #60]	; (8002b1c <HAL_GPIO_Init+0x254>)
 8002ae0:	429f      	cmp	r7, r3
 8002ae2:	f43f af5e 	beq.w	80029a2 <HAL_GPIO_Init+0xda>
 8002ae6:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002aea:	429f      	cmp	r7, r3
 8002aec:	f43f af59 	beq.w	80029a2 <HAL_GPIO_Init+0xda>
 8002af0:	21d5      	movs	r1, #213	; 0xd5
 8002af2:	4809      	ldr	r0, [pc, #36]	; (8002b18 <HAL_GPIO_Init+0x250>)
 8002af4:	f7ff f848 	bl	8001b88 <assert_failed>
 8002af8:	e753      	b.n	80029a2 <HAL_GPIO_Init+0xda>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002afa:	21d6      	movs	r1, #214	; 0xd6
 8002afc:	4806      	ldr	r0, [pc, #24]	; (8002b18 <HAL_GPIO_Init+0x250>)
 8002afe:	f7ff f843 	bl	8001b88 <assert_failed>
 8002b02:	e752      	b.n	80029aa <HAL_GPIO_Init+0xe2>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b04:	2200      	movs	r2, #0
 8002b06:	e789      	b.n	8002a1c <HAL_GPIO_Init+0x154>
 8002b08:	2201      	movs	r2, #1
 8002b0a:	e787      	b.n	8002a1c <HAL_GPIO_Init+0x154>
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	e785      	b.n	8002a1c <HAL_GPIO_Init+0x154>
  }
}
 8002b10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b14:	48000400 	.word	0x48000400
 8002b18:	08009a7c 	.word	0x08009a7c
 8002b1c:	48001000 	.word	0x48001000
 8002b20:	58000800 	.word	0x58000800
 8002b24:	48000800 	.word	0x48000800

08002b28 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b28:	b538      	push	{r3, r4, r5, lr}
 8002b2a:	4604      	mov	r4, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002b2c:	460d      	mov	r5, r1
 8002b2e:	b129      	cbz	r1, 8002b3c <HAL_GPIO_ReadPin+0x14>

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002b30:	6923      	ldr	r3, [r4, #16]
 8002b32:	421d      	tst	r5, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002b34:	bf14      	ite	ne
 8002b36:	2001      	movne	r0, #1
 8002b38:	2000      	moveq	r0, #0
 8002b3a:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002b3c:	f240 1173 	movw	r1, #371	; 0x173
 8002b40:	4801      	ldr	r0, [pc, #4]	; (8002b48 <HAL_GPIO_ReadPin+0x20>)
 8002b42:	f7ff f821 	bl	8001b88 <assert_failed>
 8002b46:	e7f3      	b.n	8002b30 <HAL_GPIO_ReadPin+0x8>
 8002b48:	08009a7c 	.word	0x08009a7c

08002b4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b4c:	b570      	push	{r4, r5, r6, lr}
 8002b4e:	4605      	mov	r5, r0
 8002b50:	4614      	mov	r4, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002b52:	460e      	mov	r6, r1
 8002b54:	b121      	cbz	r1, 8002b60 <HAL_GPIO_WritePin+0x14>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002b56:	2c01      	cmp	r4, #1
 8002b58:	d808      	bhi.n	8002b6c <HAL_GPIO_WritePin+0x20>

  if (PinState != GPIO_PIN_RESET)
 8002b5a:	b964      	cbnz	r4, 8002b76 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b5c:	62ae      	str	r6, [r5, #40]	; 0x28
  }
}
 8002b5e:	e00b      	b.n	8002b78 <HAL_GPIO_WritePin+0x2c>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002b60:	f240 1193 	movw	r1, #403	; 0x193
 8002b64:	4805      	ldr	r0, [pc, #20]	; (8002b7c <HAL_GPIO_WritePin+0x30>)
 8002b66:	f7ff f80f 	bl	8001b88 <assert_failed>
 8002b6a:	e7f4      	b.n	8002b56 <HAL_GPIO_WritePin+0xa>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002b6c:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8002b70:	4802      	ldr	r0, [pc, #8]	; (8002b7c <HAL_GPIO_WritePin+0x30>)
 8002b72:	f7ff f809 	bl	8001b88 <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b76:	61ae      	str	r6, [r5, #24]
}
 8002b78:	bd70      	pop	{r4, r5, r6, pc}
 8002b7a:	bf00      	nop
 8002b7c:	08009a7c 	.word	0x08009a7c

08002b80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b80:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b82:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	4203      	tst	r3, r0
 8002b88:	d100      	bne.n	8002b8c <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8002b8a:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b8c:	4b02      	ldr	r3, [pc, #8]	; (8002b98 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002b8e:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b90:	f7fd fd0c 	bl	80005ac <HAL_GPIO_EXTI_Callback>
}
 8002b94:	e7f9      	b.n	8002b8a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002b96:	bf00      	nop
 8002b98:	58000800 	.word	0x58000800

08002b9c <HAL_HSEM_FreeCallback>:
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002b9c:	4770      	bx	lr
	...

08002ba0 <HAL_HSEM_IRQHandler>:
{
 8002ba0:	b508      	push	{r3, lr}
  statusreg = HSEM_COMMON->MISR;
 8002ba2:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <HAL_HSEM_IRQHandler+0x18>)
 8002ba4:	68d8      	ldr	r0, [r3, #12]
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	ea22 0200 	bic.w	r2, r2, r0
 8002bac:	601a      	str	r2, [r3, #0]
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002bae:	6058      	str	r0, [r3, #4]
  HAL_HSEM_FreeCallback(statusreg);
 8002bb0:	f7ff fff4 	bl	8002b9c <HAL_HSEM_FreeCallback>
}
 8002bb4:	bd08      	pop	{r3, pc}
 8002bb6:	bf00      	nop
 8002bb8:	58001500 	.word	0x58001500

08002bbc <HAL_IPCC_RxCallback>:
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8002bbc:	4770      	bx	lr

08002bbe <HAL_IPCC_TxCallback>:
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8002bbe:	4770      	bx	lr

08002bc0 <IPCC_SetDefaultCallbacks>:
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002bc0:	1d03      	adds	r3, r0, #4
 8002bc2:	301c      	adds	r0, #28
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8002bc4:	4903      	ldr	r1, [pc, #12]	; (8002bd4 <IPCC_SetDefaultCallbacks+0x14>)
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8002bc6:	4a04      	ldr	r2, [pc, #16]	; (8002bd8 <IPCC_SetDefaultCallbacks+0x18>)
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8002bc8:	f843 1b04 	str.w	r1, [r3], #4
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8002bcc:	615a      	str	r2, [r3, #20]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002bce:	4283      	cmp	r3, r0
 8002bd0:	d1fa      	bne.n	8002bc8 <IPCC_SetDefaultCallbacks+0x8>
  }
}
 8002bd2:	4770      	bx	lr
 8002bd4:	08002bbd 	.word	0x08002bbd
 8002bd8:	08002bbf 	.word	0x08002bbf

08002bdc <HAL_IPCC_Init>:
  if (hipcc != NULL)
 8002bdc:	b328      	cbz	r0, 8002c2a <HAL_IPCC_Init+0x4e>
{
 8002bde:	b538      	push	{r3, r4, r5, lr}
 8002be0:	4605      	mov	r5, r0
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));
 8002be2:	6802      	ldr	r2, [r0, #0]
 8002be4:	4b12      	ldr	r3, [pc, #72]	; (8002c30 <HAL_IPCC_Init+0x54>)
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d003      	beq.n	8002bf2 <HAL_IPCC_Init+0x16>
 8002bea:	2186      	movs	r1, #134	; 0x86
 8002bec:	4811      	ldr	r0, [pc, #68]	; (8002c34 <HAL_IPCC_Init+0x58>)
 8002bee:	f7fe ffcb 	bl	8001b88 <assert_failed>
    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8002bf2:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 8002bf6:	b1a3      	cbz	r3, 8002c22 <HAL_IPCC_Init+0x46>
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002bf8:	4b0d      	ldr	r3, [pc, #52]	; (8002c30 <HAL_IPCC_Init+0x54>)
 8002bfa:	2400      	movs	r4, #0
 8002bfc:	601c      	str	r4, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8002bfe:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8002c02:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8002c04:	223f      	movs	r2, #63	; 0x3f
 8002c06:	609a      	str	r2, [r3, #8]
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	f042 1201 	orr.w	r2, r2, #65537	; 0x10001
 8002c0e:	601a      	str	r2, [r3, #0]
    IPCC_SetDefaultCallbacks(hipcc);
 8002c10:	4628      	mov	r0, r5
 8002c12:	f7ff ffd5 	bl	8002bc0 <IPCC_SetDefaultCallbacks>
    hipcc->callbackRequest = 0;
 8002c16:	636c      	str	r4, [r5, #52]	; 0x34
    hipcc->State = HAL_IPCC_STATE_READY;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  HAL_StatusTypeDef err = HAL_OK;
 8002c1e:	4620      	mov	r0, r4
}
 8002c20:	bd38      	pop	{r3, r4, r5, pc}
      HAL_IPCC_MspInit(hipcc);
 8002c22:	4628      	mov	r0, r5
 8002c24:	f7fe fe04 	bl	8001830 <HAL_IPCC_MspInit>
 8002c28:	e7e6      	b.n	8002bf8 <HAL_IPCC_Init+0x1c>
    err = HAL_ERROR;
 8002c2a:	2001      	movs	r0, #1
}
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	58000c00 	.word	0x58000c00
 8002c34:	08009ab8 	.word	0x08009ab8

08002c38 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c38:	4a02      	ldr	r2, [pc, #8]	; (8002c44 <HAL_PWR_EnableBkUpAccess+0xc>)
 8002c3a:	6813      	ldr	r3, [r2, #0]
 8002c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c40:	6013      	str	r3, [r2, #0]
}
 8002c42:	4770      	bx	lr
 8002c44:	58000400 	.word	0x58000400

08002c48 <HAL_PWR_DisableBkUpAccess>:
  *         (RTC registers, RTC backup data registers).
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c48:	4a02      	ldr	r2, [pc, #8]	; (8002c54 <HAL_PWR_DisableBkUpAccess+0xc>)
 8002c4a:	6813      	ldr	r3, [r2, #0]
 8002c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c50:	6013      	str	r3, [r2, #0]
}
 8002c52:	4770      	bx	lr
 8002c54:	58000400 	.word	0x58000400

08002c58 <HAL_PWREx_EnableSRAMRetention>:
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 8002c58:	4a02      	ldr	r2, [pc, #8]	; (8002c64 <HAL_PWREx_EnableSRAMRetention+0xc>)
 8002c5a:	6893      	ldr	r3, [r2, #8]
 8002c5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c60:	6093      	str	r3, [r2, #8]
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
  LL_PWR_EnableSRAM2Retention();
}
 8002c62:	4770      	bx	lr
 8002c64:	58000400 	.word	0x58000400

08002c68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002c68:	b570      	push	{r4, r5, r6, lr}
 8002c6a:	b088      	sub	sp, #32
 8002c6c:	4604      	mov	r4, r0
  uint32_t flash_clksrcfreq, msifreq;

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));
 8002c6e:	f030 0310 	bics.w	r3, r0, #16
 8002c72:	d04c      	beq.n	8002d0e <RCC_SetFlashLatencyFromMSIRange+0xa6>
 8002c74:	2b20      	cmp	r3, #32
 8002c76:	d04a      	beq.n	8002d0e <RCC_SetFlashLatencyFromMSIRange+0xa6>
 8002c78:	2b40      	cmp	r3, #64	; 0x40
 8002c7a:	d048      	beq.n	8002d0e <RCC_SetFlashLatencyFromMSIRange+0xa6>
 8002c7c:	2b60      	cmp	r3, #96	; 0x60
 8002c7e:	d046      	beq.n	8002d0e <RCC_SetFlashLatencyFromMSIRange+0xa6>
 8002c80:	2b80      	cmp	r3, #128	; 0x80
 8002c82:	d044      	beq.n	8002d0e <RCC_SetFlashLatencyFromMSIRange+0xa6>
 8002c84:	2ba0      	cmp	r3, #160	; 0xa0
 8002c86:	d042      	beq.n	8002d0e <RCC_SetFlashLatencyFromMSIRange+0xa6>
 8002c88:	f240 61dc 	movw	r1, #1756	; 0x6dc
 8002c8c:	4827      	ldr	r0, [pc, #156]	; (8002d2c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002c8e:	f7fe ff7b 	bl	8001b88 <assert_failed>

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002c92:	2cb0      	cmp	r4, #176	; 0xb0
 8002c94:	d93b      	bls.n	8002d0e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002c96:	4b26      	ldr	r3, [pc, #152]	; (8002d30 <RCC_SetFlashLatencyFromMSIRange+0xc8>)
 8002c98:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c9e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	4a23      	ldr	r2, [pc, #140]	; (8002d34 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8002ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cac:	fbb6 f6f3 	udiv	r6, r6, r3

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cb0:	4b21      	ldr	r3, [pc, #132]	; (8002d38 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 8002cb2:	fba3 3606 	umull	r3, r6, r3, r6
 8002cb6:	0cb6      	lsrs	r6, r6, #18
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002cb8:	4c20      	ldr	r4, [pc, #128]	; (8002d3c <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8002cba:	466d      	mov	r5, sp
 8002cbc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002cc0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002cc4:	3410      	adds	r4, #16
 8002cc6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002cca:	ac08      	add	r4, sp, #32
 8002ccc:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002cd0:	2300      	movs	r3, #0
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002cd2:	f855 2b04 	ldr.w	r2, [r5], #4
 8002cd6:	4296      	cmp	r6, r2
 8002cd8:	d91e      	bls.n	8002d18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002cda:	3301      	adds	r3, #1
 8002cdc:	2b04      	cmp	r3, #4
 8002cde:	d1f8      	bne.n	8002cd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002ce0:	2500      	movs	r5, #0
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8002ce2:	4a17      	ldr	r2, [pc, #92]	; (8002d40 <RCC_SetFlashLatencyFromMSIRange+0xd8>)
 8002ce4:	6813      	ldr	r3, [r2, #0]
 8002ce6:	f023 0307 	bic.w	r3, r3, #7
 8002cea:	432b      	orrs	r3, r5
 8002cec:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002cee:	f7ff fab5 	bl	800225c <HAL_GetTick>
 8002cf2:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002cf4:	4e12      	ldr	r6, [pc, #72]	; (8002d40 <RCC_SetFlashLatencyFromMSIRange+0xd8>)
 8002cf6:	6833      	ldr	r3, [r6, #0]
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	429d      	cmp	r5, r3
 8002cfe:	d011      	beq.n	8002d24 <RCC_SetFlashLatencyFromMSIRange+0xbc>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002d00:	f7ff faac 	bl	800225c <HAL_GetTick>
 8002d04:	1b00      	subs	r0, r0, r4
 8002d06:	2802      	cmp	r0, #2
 8002d08:	d9f5      	bls.n	8002cf6 <RCC_SetFlashLatencyFromMSIRange+0x8e>
    {
      return HAL_TIMEOUT;
 8002d0a:	2003      	movs	r0, #3
 8002d0c:	e00b      	b.n	8002d26 <RCC_SetFlashLatencyFromMSIRange+0xbe>
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002d0e:	0924      	lsrs	r4, r4, #4
 8002d10:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <RCC_SetFlashLatencyFromMSIRange+0xc8>)
 8002d12:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
 8002d16:	e7c0      	b.n	8002c9a <RCC_SetFlashLatencyFromMSIRange+0x32>
      latency = FLASH_LATENCY_RANGE[index];
 8002d18:	aa08      	add	r2, sp, #32
 8002d1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002d1e:	f853 5c10 	ldr.w	r5, [r3, #-16]
      break;
 8002d22:	e7de      	b.n	8002ce2 <RCC_SetFlashLatencyFromMSIRange+0x7a>
    }
  }
  return HAL_OK;
 8002d24:	2000      	movs	r0, #0
}
 8002d26:	b008      	add	sp, #32
 8002d28:	bd70      	pop	{r4, r5, r6, pc}
 8002d2a:	bf00      	nop
 8002d2c:	08009af4 	.word	0x08009af4
 8002d30:	080099c8 	.word	0x080099c8
 8002d34:	08009968 	.word	0x08009968
 8002d38:	431bde83 	.word	0x431bde83
 8002d3c:	08009390 	.word	0x08009390
 8002d40:	58004000 	.word	0x58004000

08002d44 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d48:	689b      	ldr	r3, [r3, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d4a:	f013 030c 	ands.w	r3, r3, #12
 8002d4e:	d10c      	bne.n	8002d6a <HAL_RCC_GetSysClockFreq+0x26>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002d5a:	2bb0      	cmp	r3, #176	; 0xb0
 8002d5c:	bf28      	it	cs
 8002d5e:	23b0      	movcs	r3, #176	; 0xb0
 8002d60:	091b      	lsrs	r3, r3, #4
 8002d62:	4a25      	ldr	r2, [pc, #148]	; (8002df8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d64:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002d68:	4770      	bx	lr
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d041      	beq.n	8002df2 <HAL_RCC_GetSysClockFreq+0xae>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d013      	beq.n	8002d9a <HAL_RCC_GetSysClockFreq+0x56>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d024      	beq.n	8002dca <HAL_RCC_GetSysClockFreq+0x86>
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d115      	bne.n	8002db0 <HAL_RCC_GetSysClockFreq+0x6c>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
          pllinputfreq = HSE_VALUE / 2U;
 8002d8e:	481b      	ldr	r0, [pc, #108]	; (8002dfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d90:	4a1b      	ldr	r2, [pc, #108]	; (8002e00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	bf18      	it	ne
 8002d96:	4610      	movne	r0, r2
 8002d98:	e018      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0x88>
 8002d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
      sysclockfreq = HSE_VALUE;
 8002da4:	4816      	ldr	r0, [pc, #88]	; (8002e00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002da6:	4a15      	ldr	r2, [pc, #84]	; (8002dfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	bf08      	it	eq
 8002dac:	4610      	moveq	r0, r2
 8002dae:	4770      	bx	lr
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002dba:	2bb0      	cmp	r3, #176	; 0xb0
 8002dbc:	bf28      	it	cs
 8002dbe:	23b0      	movcs	r3, #176	; 0xb0
 8002dc0:	091b      	lsrs	r3, r3, #4
 8002dc2:	4a0d      	ldr	r2, [pc, #52]	; (8002df8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002dc4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        break;
 8002dc8:	e000      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0x88>
    switch (pllsource)
 8002dca:	480d      	ldr	r0, [pc, #52]	; (8002e00 <HAL_RCC_GetSysClockFreq+0xbc>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd0:	68d9      	ldr	r1, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002dd2:	68da      	ldr	r2, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002dd4:	68db      	ldr	r3, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002dd6:	f3c1 2106 	ubfx	r1, r1, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8002dda:	fb00 f001 	mul.w	r0, r0, r1
 8002dde:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8002de2:	3201      	adds	r2, #1
 8002de4:	fbb0 f0f2 	udiv	r0, r0, r2
 8002de8:	0f5b      	lsrs	r3, r3, #29
 8002dea:	3301      	adds	r3, #1
 8002dec:	fbb0 f0f3 	udiv	r0, r0, r3
 8002df0:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8002df2:	4803      	ldr	r0, [pc, #12]	; (8002e00 <HAL_RCC_GetSysClockFreq+0xbc>)
}
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	080099c8 	.word	0x080099c8
 8002dfc:	01e84800 	.word	0x01e84800
 8002e00:	00f42400 	.word	0x00f42400

08002e04 <HAL_RCC_GetHCLKFreq>:
{
 8002e04:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002e06:	f7ff ff9d 	bl	8002d44 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002e14:	4a02      	ldr	r2, [pc, #8]	; (8002e20 <HAL_RCC_GetHCLKFreq+0x1c>)
 8002e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002e1a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002e1e:	bd08      	pop	{r3, pc}
 8002e20:	08009968 	.word	0x08009968

08002e24 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002e24:	2800      	cmp	r0, #0
 8002e26:	f000 83ff 	beq.w	8003628 <HAL_RCC_OscConfig+0x804>
{
 8002e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e2c:	4604      	mov	r4, r0
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002e2e:	6803      	ldr	r3, [r0, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 810c 	beq.w	800304e <HAL_RCC_OscConfig+0x22a>
 8002e36:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 8002e3a:	d140      	bne.n	8002ebe <HAL_RCC_OscConfig+0x9a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e3c:	6823      	ldr	r3, [r4, #0]
 8002e3e:	f013 0f20 	tst.w	r3, #32
 8002e42:	f000 80aa 	beq.w	8002f9a <HAL_RCC_OscConfig+0x176>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8002e46:	69e3      	ldr	r3, [r4, #28]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d83e      	bhi.n	8002eca <HAL_RCC_OscConfig+0xa6>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8002e4c:	6a23      	ldr	r3, [r4, #32]
 8002e4e:	2bff      	cmp	r3, #255	; 0xff
 8002e50:	d841      	bhi.n	8002ed6 <HAL_RCC_OscConfig+0xb2>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8002e52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e54:	f033 0310 	bics.w	r3, r3, #16
 8002e58:	d00e      	beq.n	8002e78 <HAL_RCC_OscConfig+0x54>
 8002e5a:	2b20      	cmp	r3, #32
 8002e5c:	d00c      	beq.n	8002e78 <HAL_RCC_OscConfig+0x54>
 8002e5e:	2b40      	cmp	r3, #64	; 0x40
 8002e60:	d00a      	beq.n	8002e78 <HAL_RCC_OscConfig+0x54>
 8002e62:	2b60      	cmp	r3, #96	; 0x60
 8002e64:	d008      	beq.n	8002e78 <HAL_RCC_OscConfig+0x54>
 8002e66:	2b80      	cmp	r3, #128	; 0x80
 8002e68:	d006      	beq.n	8002e78 <HAL_RCC_OscConfig+0x54>
 8002e6a:	2ba0      	cmp	r3, #160	; 0xa0
 8002e6c:	d004      	beq.n	8002e78 <HAL_RCC_OscConfig+0x54>
 8002e6e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002e72:	489c      	ldr	r0, [pc, #624]	; (80030e4 <HAL_RCC_OscConfig+0x2c0>)
 8002e74:	f7fe fe88 	bl	8001b88 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002e78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e7c:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002e7e:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002e80:	f013 030c 	ands.w	r3, r3, #12
 8002e84:	d031      	beq.n	8002eea <HAL_RCC_OscConfig+0xc6>
 8002e86:	2b0c      	cmp	r3, #12
 8002e88:	d02b      	beq.n	8002ee2 <HAL_RCC_OscConfig+0xbe>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e8a:	69e3      	ldr	r3, [r4, #28]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 80ba 	beq.w	8003006 <HAL_RCC_OscConfig+0x1e2>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002e92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e96:	6813      	ldr	r3, [r2, #0]
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002e9e:	f7ff f9dd 	bl	800225c <HAL_GetTick>
 8002ea2:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002ea4:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002ea8:	6833      	ldr	r3, [r6, #0]
 8002eaa:	f013 0f02 	tst.w	r3, #2
 8002eae:	d165      	bne.n	8002f7c <HAL_RCC_OscConfig+0x158>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002eb0:	f7ff f9d4 	bl	800225c <HAL_GetTick>
 8002eb4:	1b40      	subs	r0, r0, r5
 8002eb6:	2802      	cmp	r0, #2
 8002eb8:	d9f6      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x84>
            return HAL_TIMEOUT;
 8002eba:	2003      	movs	r0, #3
 8002ebc:	e3bf      	b.n	800363e <HAL_RCC_OscConfig+0x81a>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002ebe:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002ec2:	4888      	ldr	r0, [pc, #544]	; (80030e4 <HAL_RCC_OscConfig+0x2c0>)
 8002ec4:	f7fe fe60 	bl	8001b88 <assert_failed>
 8002ec8:	e7b8      	b.n	8002e3c <HAL_RCC_OscConfig+0x18>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8002eca:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8002ece:	4885      	ldr	r0, [pc, #532]	; (80030e4 <HAL_RCC_OscConfig+0x2c0>)
 8002ed0:	f7fe fe5a 	bl	8001b88 <assert_failed>
 8002ed4:	e7ba      	b.n	8002e4c <HAL_RCC_OscConfig+0x28>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8002ed6:	f240 118f 	movw	r1, #399	; 0x18f
 8002eda:	4882      	ldr	r0, [pc, #520]	; (80030e4 <HAL_RCC_OscConfig+0x2c0>)
 8002edc:	f7fe fe54 	bl	8001b88 <assert_failed>
 8002ee0:	e7b7      	b.n	8002e52 <HAL_RCC_OscConfig+0x2e>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002ee2:	f002 0203 	and.w	r2, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002ee6:	2a01      	cmp	r2, #1
 8002ee8:	d1cf      	bne.n	8002e8a <HAL_RCC_OscConfig+0x66>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f013 0f02 	tst.w	r3, #2
 8002ef4:	d003      	beq.n	8002efe <HAL_RCC_OscConfig+0xda>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ef6:	69e3      	ldr	r3, [r4, #28]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 8397 	beq.w	800362c <HAL_RCC_OscConfig+0x808>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002efe:	6a60      	ldr	r0, [r4, #36]	; 0x24
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f0a:	2bb0      	cmp	r3, #176	; 0xb0
 8002f0c:	bf28      	it	cs
 8002f0e:	23b0      	movcs	r3, #176	; 0xb0
 8002f10:	4298      	cmp	r0, r3
 8002f12:	d91e      	bls.n	8002f52 <HAL_RCC_OscConfig+0x12e>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f14:	f7ff fea8 	bl	8002c68 <RCC_SetFlashLatencyFromMSIRange>
 8002f18:	2800      	cmp	r0, #0
 8002f1a:	f040 8389 	bne.w	8003630 <HAL_RCC_OscConfig+0x80c>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002f1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f22:	6813      	ldr	r3, [r2, #0]
 8002f24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f28:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002f2a:	430b      	orrs	r3, r1
 8002f2c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002f2e:	6853      	ldr	r3, [r2, #4]
 8002f30:	6a21      	ldr	r1, [r4, #32]
 8002f32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f36:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002f3a:	6053      	str	r3, [r2, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f3c:	f7ff ff62 	bl	8002e04 <HAL_RCC_GetHCLKFreq>
 8002f40:	4b69      	ldr	r3, [pc, #420]	; (80030e8 <HAL_RCC_OscConfig+0x2c4>)
 8002f42:	6018      	str	r0, [r3, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f44:	4b69      	ldr	r3, [pc, #420]	; (80030ec <HAL_RCC_OscConfig+0x2c8>)
 8002f46:	6818      	ldr	r0, [r3, #0]
 8002f48:	f7ff f93e 	bl	80021c8 <HAL_InitTick>
 8002f4c:	b328      	cbz	r0, 8002f9a <HAL_RCC_OscConfig+0x176>
          return HAL_ERROR;
 8002f4e:	2001      	movs	r0, #1
 8002f50:	e375      	b.n	800363e <HAL_RCC_OscConfig+0x81a>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002f52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f56:	6813      	ldr	r3, [r2, #0]
 8002f58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f5c:	4303      	orrs	r3, r0
 8002f5e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002f60:	6853      	ldr	r3, [r2, #4]
 8002f62:	6a21      	ldr	r1, [r4, #32]
 8002f64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f68:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002f6c:	6053      	str	r3, [r2, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f6e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002f70:	f7ff fe7a 	bl	8002c68 <RCC_SetFlashLatencyFromMSIRange>
 8002f74:	2800      	cmp	r0, #0
 8002f76:	d0e1      	beq.n	8002f3c <HAL_RCC_OscConfig+0x118>
            return HAL_ERROR;
 8002f78:	2001      	movs	r0, #1
 8002f7a:	e360      	b.n	800363e <HAL_RCC_OscConfig+0x81a>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002f7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f80:	6813      	ldr	r3, [r2, #0]
 8002f82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f86:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002f88:	430b      	orrs	r3, r1
 8002f8a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002f8c:	6853      	ldr	r3, [r2, #4]
 8002f8e:	6a21      	ldr	r1, [r4, #32]
 8002f90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f94:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002f98:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f9a:	6823      	ldr	r3, [r4, #0]
 8002f9c:	f013 0f01 	tst.w	r3, #1
 8002fa0:	d055      	beq.n	800304e <HAL_RCC_OscConfig+0x22a>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002fa2:	6863      	ldr	r3, [r4, #4]
 8002fa4:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8002fa8:	d004      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x190>
 8002faa:	f240 11f9 	movw	r1, #505	; 0x1f9
 8002fae:	484d      	ldr	r0, [pc, #308]	; (80030e4 <HAL_RCC_OscConfig+0x2c0>)
 8002fb0:	f7fe fdea 	bl	8001b88 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002fb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fb8:	6893      	ldr	r3, [r2, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002fbe:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d03a      	beq.n	800303a <HAL_RCC_OscConfig+0x216>
 8002fc4:	2b0c      	cmp	r3, #12
 8002fc6:	d034      	beq.n	8003032 <HAL_RCC_OscConfig+0x20e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fc8:	6863      	ldr	r3, [r4, #4]
 8002fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002fce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fd2:	6813      	ldr	r3, [r2, #0]
 8002fd4:	bf0c      	ite	eq
 8002fd6:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002fda:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
 8002fde:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fe0:	6863      	ldr	r3, [r4, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d067      	beq.n	80030b6 <HAL_RCC_OscConfig+0x292>
        tickstart = HAL_GetTick();
 8002fe6:	f7ff f939 	bl	800225c <HAL_GetTick>
 8002fea:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002fec:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002ff0:	6833      	ldr	r3, [r6, #0]
 8002ff2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002ff6:	d12a      	bne.n	800304e <HAL_RCC_OscConfig+0x22a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff8:	f7ff f930 	bl	800225c <HAL_GetTick>
 8002ffc:	1b40      	subs	r0, r0, r5
 8002ffe:	2864      	cmp	r0, #100	; 0x64
 8003000:	d9f6      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x1cc>
            return HAL_TIMEOUT;
 8003002:	2003      	movs	r0, #3
 8003004:	e31b      	b.n	800363e <HAL_RCC_OscConfig+0x81a>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003006:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800300a:	6813      	ldr	r3, [r2, #0]
 800300c:	f023 0301 	bic.w	r3, r3, #1
 8003010:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003012:	f7ff f923 	bl	800225c <HAL_GetTick>
 8003016:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003018:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800301c:	6833      	ldr	r3, [r6, #0]
 800301e:	f013 0f02 	tst.w	r3, #2
 8003022:	d0ba      	beq.n	8002f9a <HAL_RCC_OscConfig+0x176>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003024:	f7ff f91a 	bl	800225c <HAL_GetTick>
 8003028:	1b40      	subs	r0, r0, r5
 800302a:	2802      	cmp	r0, #2
 800302c:	d9f6      	bls.n	800301c <HAL_RCC_OscConfig+0x1f8>
            return HAL_TIMEOUT;
 800302e:	2003      	movs	r0, #3
 8003030:	e305      	b.n	800363e <HAL_RCC_OscConfig+0x81a>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003032:	f002 0203 	and.w	r2, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003036:	2a03      	cmp	r2, #3
 8003038:	d1c6      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x1a4>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800303a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003044:	d003      	beq.n	800304e <HAL_RCC_OscConfig+0x22a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003046:	6863      	ldr	r3, [r4, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 82f3 	beq.w	8003634 <HAL_RCC_OscConfig+0x810>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800304e:	6823      	ldr	r3, [r4, #0]
 8003050:	f013 0f02 	tst.w	r3, #2
 8003054:	d063      	beq.n	800311e <HAL_RCC_OscConfig+0x2fa>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003056:	68e3      	ldr	r3, [r4, #12]
 8003058:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 800305c:	d004      	beq.n	8003068 <HAL_RCC_OscConfig+0x244>
 800305e:	f240 212f 	movw	r1, #559	; 0x22f
 8003062:	4820      	ldr	r0, [pc, #128]	; (80030e4 <HAL_RCC_OscConfig+0x2c0>)
 8003064:	f7fe fd90 	bl	8001b88 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003068:	6923      	ldr	r3, [r4, #16]
 800306a:	2b7f      	cmp	r3, #127	; 0x7f
 800306c:	d833      	bhi.n	80030d6 <HAL_RCC_OscConfig+0x2b2>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800306e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003072:	6893      	ldr	r3, [r2, #8]
 8003074:	f003 030c 	and.w	r3, r3, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003078:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800307a:	2b04      	cmp	r3, #4
 800307c:	d03c      	beq.n	80030f8 <HAL_RCC_OscConfig+0x2d4>
 800307e:	2b0c      	cmp	r3, #12
 8003080:	d036      	beq.n	80030f0 <HAL_RCC_OscConfig+0x2cc>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003082:	68e3      	ldr	r3, [r4, #12]
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 8090 	beq.w	80031aa <HAL_RCC_OscConfig+0x386>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800308a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800308e:	6813      	ldr	r3, [r2, #0]
 8003090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003094:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003096:	f7ff f8e1 	bl	800225c <HAL_GetTick>
 800309a:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800309c:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80030a0:	6833      	ldr	r3, [r6, #0]
 80030a2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80030a6:	d176      	bne.n	8003196 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a8:	f7ff f8d8 	bl	800225c <HAL_GetTick>
 80030ac:	1b40      	subs	r0, r0, r5
 80030ae:	2802      	cmp	r0, #2
 80030b0:	d9f6      	bls.n	80030a0 <HAL_RCC_OscConfig+0x27c>
            return HAL_TIMEOUT;
 80030b2:	2003      	movs	r0, #3
 80030b4:	e2c3      	b.n	800363e <HAL_RCC_OscConfig+0x81a>
        tickstart = HAL_GetTick();
 80030b6:	f7ff f8d1 	bl	800225c <HAL_GetTick>
 80030ba:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80030bc:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80030c0:	6833      	ldr	r3, [r6, #0]
 80030c2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80030c6:	d0c2      	beq.n	800304e <HAL_RCC_OscConfig+0x22a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c8:	f7ff f8c8 	bl	800225c <HAL_GetTick>
 80030cc:	1b40      	subs	r0, r0, r5
 80030ce:	2864      	cmp	r0, #100	; 0x64
 80030d0:	d9f6      	bls.n	80030c0 <HAL_RCC_OscConfig+0x29c>
            return HAL_TIMEOUT;
 80030d2:	2003      	movs	r0, #3
 80030d4:	e2b3      	b.n	800363e <HAL_RCC_OscConfig+0x81a>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80030d6:	f44f 710c 	mov.w	r1, #560	; 0x230
 80030da:	4802      	ldr	r0, [pc, #8]	; (80030e4 <HAL_RCC_OscConfig+0x2c0>)
 80030dc:	f7fe fd54 	bl	8001b88 <assert_failed>
 80030e0:	e7c5      	b.n	800306e <HAL_RCC_OscConfig+0x24a>
 80030e2:	bf00      	nop
 80030e4:	08009af4 	.word	0x08009af4
 80030e8:	20000004 	.word	0x20000004
 80030ec:	2000000c 	.word	0x2000000c
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80030f0:	f002 0203 	and.w	r2, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80030f4:	2a02      	cmp	r2, #2
 80030f6:	d1c4      	bne.n	8003082 <HAL_RCC_OscConfig+0x25e>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80030f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003102:	d003      	beq.n	800310c <HAL_RCC_OscConfig+0x2e8>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003104:	68e3      	ldr	r3, [r4, #12]
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 8296 	beq.w	8003638 <HAL_RCC_OscConfig+0x814>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800310c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003110:	6853      	ldr	r3, [r2, #4]
 8003112:	6921      	ldr	r1, [r4, #16]
 8003114:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003118:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800311c:	6053      	str	r3, [r2, #4]
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800311e:	6823      	ldr	r3, [r4, #0]
 8003120:	f013 0f18 	tst.w	r3, #24
 8003124:	f000 80f8 	beq.w	8003318 <HAL_RCC_OscConfig+0x4f4>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003128:	6963      	ldr	r3, [r4, #20]
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 80c2 	beq.w	80032b4 <HAL_RCC_OscConfig+0x490>
 8003130:	2b05      	cmp	r3, #5
 8003132:	d008      	beq.n	8003146 <HAL_RCC_OscConfig+0x322>
 8003134:	f44f 711d 	mov.w	r1, #628	; 0x274
 8003138:	48ce      	ldr	r0, [pc, #824]	; (8003474 <HAL_RCC_OscConfig+0x650>)
 800313a:	f7fe fd25 	bl	8001b88 <assert_failed>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800313e:	6963      	ldr	r3, [r4, #20]
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 80b7 	beq.w	80032b4 <HAL_RCC_OscConfig+0x490>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003146:	6823      	ldr	r3, [r4, #0]
 8003148:	f013 0f10 	tst.w	r3, #16
 800314c:	f000 8084 	beq.w	8003258 <HAL_RCC_OscConfig+0x434>
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));
 8003150:	69a3      	ldr	r3, [r4, #24]
 8003152:	2b0f      	cmp	r3, #15
 8003154:	d83f      	bhi.n	80031d6 <HAL_RCC_OscConfig+0x3b2>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800315a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800315e:	f013 0f02 	tst.w	r3, #2
 8003162:	d13e      	bne.n	80031e2 <HAL_RCC_OscConfig+0x3be>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003164:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003168:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800316c:	f043 0301 	orr.w	r3, r3, #1
 8003170:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8003174:	f7ff f872 	bl	800225c <HAL_GetTick>
 8003178:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800317a:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800317e:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8003182:	f013 0f02 	tst.w	r3, #2
 8003186:	d12c      	bne.n	80031e2 <HAL_RCC_OscConfig+0x3be>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003188:	f7ff f868 	bl	800225c <HAL_GetTick>
 800318c:	1b40      	subs	r0, r0, r5
 800318e:	2802      	cmp	r0, #2
 8003190:	d9f5      	bls.n	800317e <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 8003192:	2003      	movs	r0, #3
 8003194:	e253      	b.n	800363e <HAL_RCC_OscConfig+0x81a>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003196:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800319a:	6853      	ldr	r3, [r2, #4]
 800319c:	6921      	ldr	r1, [r4, #16]
 800319e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80031a2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80031a6:	6053      	str	r3, [r2, #4]
}
 80031a8:	e7b9      	b.n	800311e <HAL_RCC_OscConfig+0x2fa>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80031aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031ae:	6813      	ldr	r3, [r2, #0]
 80031b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031b4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80031b6:	f7ff f851 	bl	800225c <HAL_GetTick>
 80031ba:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80031bc:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80031c0:	6833      	ldr	r3, [r6, #0]
 80031c2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80031c6:	d0aa      	beq.n	800311e <HAL_RCC_OscConfig+0x2fa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c8:	f7ff f848 	bl	800225c <HAL_GetTick>
 80031cc:	1b40      	subs	r0, r0, r5
 80031ce:	2802      	cmp	r0, #2
 80031d0:	d9f6      	bls.n	80031c0 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 80031d2:	2003      	movs	r0, #3
 80031d4:	e233      	b.n	800363e <HAL_RCC_OscConfig+0x81a>
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));
 80031d6:	f44f 711f 	mov.w	r1, #636	; 0x27c
 80031da:	48a6      	ldr	r0, [pc, #664]	; (8003474 <HAL_RCC_OscConfig+0x650>)
 80031dc:	f7fe fcd4 	bl	8001b88 <assert_failed>
 80031e0:	e7b9      	b.n	8003156 <HAL_RCC_OscConfig+0x332>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80031e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031e6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80031ea:	f043 0304 	orr.w	r3, r3, #4
 80031ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        tickstart = HAL_GetTick();
 80031f2:	f7ff f833 	bl	800225c <HAL_GetTick>
 80031f6:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80031f8:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80031fc:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8003200:	f013 0f08 	tst.w	r3, #8
 8003204:	d106      	bne.n	8003214 <HAL_RCC_OscConfig+0x3f0>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003206:	f7ff f829 	bl	800225c <HAL_GetTick>
 800320a:	1b40      	subs	r0, r0, r5
 800320c:	2803      	cmp	r0, #3
 800320e:	d9f5      	bls.n	80031fc <HAL_RCC_OscConfig+0x3d8>
            return HAL_TIMEOUT;
 8003210:	2003      	movs	r0, #3
 8003212:	e214      	b.n	800363e <HAL_RCC_OscConfig+0x81a>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003214:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003218:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800321c:	69a1      	ldr	r1, [r4, #24]
 800321e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003222:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003226:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800322a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800322e:	f023 0301 	bic.w	r3, r3, #1
 8003232:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        tickstart = HAL_GetTick();
 8003236:	f7ff f811 	bl	800225c <HAL_GetTick>
 800323a:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800323c:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8003240:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8003244:	f013 0f02 	tst.w	r3, #2
 8003248:	d066      	beq.n	8003318 <HAL_RCC_OscConfig+0x4f4>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800324a:	f7ff f807 	bl	800225c <HAL_GetTick>
 800324e:	1b40      	subs	r0, r0, r5
 8003250:	2802      	cmp	r0, #2
 8003252:	d9f5      	bls.n	8003240 <HAL_RCC_OscConfig+0x41c>
            return HAL_TIMEOUT;
 8003254:	2003      	movs	r0, #3
 8003256:	e1f2      	b.n	800363e <HAL_RCC_OscConfig+0x81a>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003258:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800325c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        tickstart = HAL_GetTick();
 8003268:	f7fe fff8 	bl	800225c <HAL_GetTick>
 800326c:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800326e:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8003272:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8003276:	f013 0f02 	tst.w	r3, #2
 800327a:	d106      	bne.n	800328a <HAL_RCC_OscConfig+0x466>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800327c:	f7fe ffee 	bl	800225c <HAL_GetTick>
 8003280:	1b40      	subs	r0, r0, r5
 8003282:	2802      	cmp	r0, #2
 8003284:	d9f5      	bls.n	8003272 <HAL_RCC_OscConfig+0x44e>
            return HAL_TIMEOUT;
 8003286:	2003      	movs	r0, #3
 8003288:	e1d9      	b.n	800363e <HAL_RCC_OscConfig+0x81a>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800328a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800328e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003292:	f023 0304 	bic.w	r3, r3, #4
 8003296:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800329a:	4616      	mov	r6, r2
 800329c:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80032a0:	f013 0f08 	tst.w	r3, #8
 80032a4:	d038      	beq.n	8003318 <HAL_RCC_OscConfig+0x4f4>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80032a6:	f7fe ffd9 	bl	800225c <HAL_GetTick>
 80032aa:	1b40      	subs	r0, r0, r5
 80032ac:	2803      	cmp	r0, #3
 80032ae:	d9f5      	bls.n	800329c <HAL_RCC_OscConfig+0x478>
            return HAL_TIMEOUT;
 80032b0:	2003      	movs	r0, #3
 80032b2:	e1c4      	b.n	800363e <HAL_RCC_OscConfig+0x81a>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80032b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032b8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80032bc:	f023 0304 	bic.w	r3, r3, #4
 80032c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80032c4:	f7fe ffca 	bl	800225c <HAL_GetTick>
 80032c8:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80032ca:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80032ce:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80032d2:	f013 0f08 	tst.w	r3, #8
 80032d6:	d118      	bne.n	800330a <HAL_RCC_OscConfig+0x4e6>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80032d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032dc:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80032e0:	f023 0301 	bic.w	r3, r3, #1
 80032e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80032e8:	f7fe ffb8 	bl	800225c <HAL_GetTick>
 80032ec:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80032ee:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80032f2:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80032f6:	f013 0f02 	tst.w	r3, #2
 80032fa:	d00d      	beq.n	8003318 <HAL_RCC_OscConfig+0x4f4>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80032fc:	f7fe ffae 	bl	800225c <HAL_GetTick>
 8003300:	1b40      	subs	r0, r0, r5
 8003302:	2802      	cmp	r0, #2
 8003304:	d9f5      	bls.n	80032f2 <HAL_RCC_OscConfig+0x4ce>
          return HAL_TIMEOUT;
 8003306:	2003      	movs	r0, #3
 8003308:	e199      	b.n	800363e <HAL_RCC_OscConfig+0x81a>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800330a:	f7fe ffa7 	bl	800225c <HAL_GetTick>
 800330e:	1b40      	subs	r0, r0, r5
 8003310:	2803      	cmp	r0, #3
 8003312:	d9dc      	bls.n	80032ce <HAL_RCC_OscConfig+0x4aa>
          return HAL_TIMEOUT;
 8003314:	2003      	movs	r0, #3
 8003316:	e192      	b.n	800363e <HAL_RCC_OscConfig+0x81a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003318:	6823      	ldr	r3, [r4, #0]
 800331a:	f013 0f04 	tst.w	r3, #4
 800331e:	d077      	beq.n	8003410 <HAL_RCC_OscConfig+0x5ec>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003320:	68a3      	ldr	r3, [r4, #8]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d91a      	bls.n	800335c <HAL_RCC_OscConfig+0x538>
 8003326:	2b05      	cmp	r3, #5
 8003328:	d113      	bne.n	8003352 <HAL_RCC_OscConfig+0x52e>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800332a:	4b53      	ldr	r3, [pc, #332]	; (8003478 <HAL_RCC_OscConfig+0x654>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003332:	d040      	beq.n	80033b6 <HAL_RCC_OscConfig+0x592>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003338:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800333c:	f042 0204 	orr.w	r2, r2, #4
 8003340:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003344:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003348:	f042 0201 	orr.w	r2, r2, #1
 800334c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 8003350:	e01c      	b.n	800338c <HAL_RCC_OscConfig+0x568>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003352:	f240 21fb 	movw	r1, #763	; 0x2fb
 8003356:	4847      	ldr	r0, [pc, #284]	; (8003474 <HAL_RCC_OscConfig+0x650>)
 8003358:	f7fe fc16 	bl	8001b88 <assert_failed>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800335c:	4b46      	ldr	r3, [pc, #280]	; (8003478 <HAL_RCC_OscConfig+0x654>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003364:	d027      	beq.n	80033b6 <HAL_RCC_OscConfig+0x592>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003366:	68a3      	ldr	r3, [r4, #8]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d035      	beq.n	80033d8 <HAL_RCC_OscConfig+0x5b4>
 800336c:	2b05      	cmp	r3, #5
 800336e:	d0e1      	beq.n	8003334 <HAL_RCC_OscConfig+0x510>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003374:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003378:	f022 0201 	bic.w	r2, r2, #1
 800337c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003380:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003384:	f022 0204 	bic.w	r2, r2, #4
 8003388:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800338c:	68a3      	ldr	r3, [r4, #8]
 800338e:	b363      	cbz	r3, 80033ea <HAL_RCC_OscConfig+0x5c6>
      tickstart = HAL_GetTick();
 8003390:	f7fe ff64 	bl	800225c <HAL_GetTick>
 8003394:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003396:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800339a:	f241 3788 	movw	r7, #5000	; 0x1388
 800339e:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80033a2:	f013 0f02 	tst.w	r3, #2
 80033a6:	d133      	bne.n	8003410 <HAL_RCC_OscConfig+0x5ec>
 80033a8:	f7fe ff58 	bl	800225c <HAL_GetTick>
 80033ac:	1b40      	subs	r0, r0, r5
 80033ae:	42b8      	cmp	r0, r7
 80033b0:	d9f5      	bls.n	800339e <HAL_RCC_OscConfig+0x57a>
          return HAL_TIMEOUT;
 80033b2:	2003      	movs	r0, #3
 80033b4:	e143      	b.n	800363e <HAL_RCC_OscConfig+0x81a>
      HAL_PWR_EnableBkUpAccess();
 80033b6:	f7ff fc3f 	bl	8002c38 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 80033ba:	f7fe ff4f 	bl	800225c <HAL_GetTick>
 80033be:	4605      	mov	r5, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033c0:	4e2d      	ldr	r6, [pc, #180]	; (8003478 <HAL_RCC_OscConfig+0x654>)
 80033c2:	6833      	ldr	r3, [r6, #0]
 80033c4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80033c8:	d1cd      	bne.n	8003366 <HAL_RCC_OscConfig+0x542>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ca:	f7fe ff47 	bl	800225c <HAL_GetTick>
 80033ce:	1b40      	subs	r0, r0, r5
 80033d0:	2802      	cmp	r0, #2
 80033d2:	d9f6      	bls.n	80033c2 <HAL_RCC_OscConfig+0x59e>
          return HAL_TIMEOUT;
 80033d4:	2003      	movs	r0, #3
 80033d6:	e132      	b.n	800363e <HAL_RCC_OscConfig+0x81a>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80033d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033dc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80033e8:	e7d0      	b.n	800338c <HAL_RCC_OscConfig+0x568>
      tickstart = HAL_GetTick();
 80033ea:	f7fe ff37 	bl	800225c <HAL_GetTick>
 80033ee:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80033f0:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f4:	f241 3788 	movw	r7, #5000	; 0x1388
 80033f8:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80033fc:	f013 0f02 	tst.w	r3, #2
 8003400:	d006      	beq.n	8003410 <HAL_RCC_OscConfig+0x5ec>
 8003402:	f7fe ff2b 	bl	800225c <HAL_GetTick>
 8003406:	1b40      	subs	r0, r0, r5
 8003408:	42b8      	cmp	r0, r7
 800340a:	d9f5      	bls.n	80033f8 <HAL_RCC_OscConfig+0x5d4>
          return HAL_TIMEOUT;
 800340c:	2003      	movs	r0, #3
 800340e:	e116      	b.n	800363e <HAL_RCC_OscConfig+0x81a>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003410:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003412:	2b02      	cmp	r3, #2
 8003414:	d832      	bhi.n	800347c <HAL_RCC_OscConfig+0x658>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003416:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 810f 	beq.w	800363c <HAL_RCC_OscConfig+0x818>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800341e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003422:	6895      	ldr	r5, [r2, #8]
 8003424:	f005 050c 	and.w	r5, r5, #12
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003428:	68d6      	ldr	r6, [r2, #12]
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800342a:	2b02      	cmp	r3, #2
 800342c:	d02c      	beq.n	8003488 <HAL_RCC_OscConfig+0x664>
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800342e:	2d0c      	cmp	r5, #12
 8003430:	f000 8108 	beq.w	8003644 <HAL_RCC_OscConfig+0x820>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800343e:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	f022 0203 	bic.w	r2, r2, #3
 8003446:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800344e:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8003450:	f7fe ff04 	bl	800225c <HAL_GetTick>
 8003454:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003456:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800345a:	682b      	ldr	r3, [r5, #0]
 800345c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003460:	f000 80e0 	beq.w	8003624 <HAL_RCC_OscConfig+0x800>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003464:	f7fe fefa 	bl	800225c <HAL_GetTick>
 8003468:	1b00      	subs	r0, r0, r4
 800346a:	2802      	cmp	r0, #2
 800346c:	d9f5      	bls.n	800345a <HAL_RCC_OscConfig+0x636>
            return HAL_TIMEOUT;
 800346e:	2003      	movs	r0, #3
 8003470:	e0e5      	b.n	800363e <HAL_RCC_OscConfig+0x81a>
 8003472:	bf00      	nop
 8003474:	08009af4 	.word	0x08009af4
 8003478:	58000400 	.word	0x58000400
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800347c:	f240 3161 	movw	r1, #865	; 0x361
 8003480:	4871      	ldr	r0, [pc, #452]	; (8003648 <HAL_RCC_OscConfig+0x824>)
 8003482:	f7fe fb81 	bl	8001b88 <assert_failed>
 8003486:	e7c6      	b.n	8003416 <HAL_RCC_OscConfig+0x5f2>
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003488:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800348a:	2b03      	cmp	r3, #3
 800348c:	d842      	bhi.n	8003514 <HAL_RCC_OscConfig+0x6f0>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800348e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003490:	f033 0310 	bics.w	r3, r3, #16
 8003494:	d00a      	beq.n	80034ac <HAL_RCC_OscConfig+0x688>
 8003496:	2b20      	cmp	r3, #32
 8003498:	d008      	beq.n	80034ac <HAL_RCC_OscConfig+0x688>
 800349a:	2b40      	cmp	r3, #64	; 0x40
 800349c:	d006      	beq.n	80034ac <HAL_RCC_OscConfig+0x688>
 800349e:	2b60      	cmp	r3, #96	; 0x60
 80034a0:	d004      	beq.n	80034ac <HAL_RCC_OscConfig+0x688>
 80034a2:	f240 316d 	movw	r1, #877	; 0x36d
 80034a6:	4868      	ldr	r0, [pc, #416]	; (8003648 <HAL_RCC_OscConfig+0x824>)
 80034a8:	f7fe fb6e 	bl	8001b88 <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80034ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034ae:	3b06      	subs	r3, #6
 80034b0:	2b79      	cmp	r3, #121	; 0x79
 80034b2:	d835      	bhi.n	8003520 <HAL_RCC_OscConfig+0x6fc>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80034b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80034b6:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
 80034ba:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 80034be:	d835      	bhi.n	800352c <HAL_RCC_OscConfig+0x708>
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80034c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80034c2:	f103 437e 	add.w	r3, r3, #4261412864	; 0xfe000000
 80034c6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80034ca:	d835      	bhi.n	8003538 <HAL_RCC_OscConfig+0x714>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80034cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034ce:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80034d2:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80034d6:	d835      	bhi.n	8003544 <HAL_RCC_OscConfig+0x720>
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d8:	f006 0303 	and.w	r3, r6, #3
 80034dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80034de:	4293      	cmp	r3, r2
 80034e0:	d036      	beq.n	8003550 <HAL_RCC_OscConfig+0x72c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034e2:	2d0c      	cmp	r5, #12
 80034e4:	f000 80ac 	beq.w	8003640 <HAL_RCC_OscConfig+0x81c>
 80034e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034ec:	6813      	ldr	r3, [r2, #0]
 80034ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034f2:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 80034f4:	f7fe feb2 	bl	800225c <HAL_GetTick>
 80034f8:	4605      	mov	r5, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034fa:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80034fe:	6833      	ldr	r3, [r6, #0]
 8003500:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003504:	d045      	beq.n	8003592 <HAL_RCC_OscConfig+0x76e>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003506:	f7fe fea9 	bl	800225c <HAL_GetTick>
 800350a:	1b40      	subs	r0, r0, r5
 800350c:	2802      	cmp	r0, #2
 800350e:	d9f6      	bls.n	80034fe <HAL_RCC_OscConfig+0x6da>
                return HAL_TIMEOUT;
 8003510:	2003      	movs	r0, #3
 8003512:	e094      	b.n	800363e <HAL_RCC_OscConfig+0x81a>
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003514:	f44f 715b 	mov.w	r1, #876	; 0x36c
 8003518:	484b      	ldr	r0, [pc, #300]	; (8003648 <HAL_RCC_OscConfig+0x824>)
 800351a:	f7fe fb35 	bl	8001b88 <assert_failed>
 800351e:	e7b6      	b.n	800348e <HAL_RCC_OscConfig+0x66a>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003520:	f240 316e 	movw	r1, #878	; 0x36e
 8003524:	4848      	ldr	r0, [pc, #288]	; (8003648 <HAL_RCC_OscConfig+0x824>)
 8003526:	f7fe fb2f 	bl	8001b88 <assert_failed>
 800352a:	e7c3      	b.n	80034b4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800352c:	f240 316f 	movw	r1, #879	; 0x36f
 8003530:	4845      	ldr	r0, [pc, #276]	; (8003648 <HAL_RCC_OscConfig+0x824>)
 8003532:	f7fe fb29 	bl	8001b88 <assert_failed>
 8003536:	e7c3      	b.n	80034c0 <HAL_RCC_OscConfig+0x69c>
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003538:	f44f 715c 	mov.w	r1, #880	; 0x370
 800353c:	4842      	ldr	r0, [pc, #264]	; (8003648 <HAL_RCC_OscConfig+0x824>)
 800353e:	f7fe fb23 	bl	8001b88 <assert_failed>
 8003542:	e7c3      	b.n	80034cc <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003544:	f240 3171 	movw	r1, #881	; 0x371
 8003548:	483f      	ldr	r0, [pc, #252]	; (8003648 <HAL_RCC_OscConfig+0x824>)
 800354a:	f7fe fb1d 	bl	8001b88 <assert_failed>
 800354e:	e7c3      	b.n	80034d8 <HAL_RCC_OscConfig+0x6b4>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003550:	f006 0370 	and.w	r3, r6, #112	; 0x70
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003554:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003556:	4293      	cmp	r3, r2
 8003558:	d1c3      	bne.n	80034e2 <HAL_RCC_OscConfig+0x6be>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800355a:	f3c6 2306 	ubfx	r3, r6, #8, #7
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800355e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003560:	4293      	cmp	r3, r2
 8003562:	d1be      	bne.n	80034e2 <HAL_RCC_OscConfig+0x6be>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003564:	f406 1378 	and.w	r3, r6, #4063232	; 0x3e0000
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003568:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800356a:	4293      	cmp	r3, r2
 800356c:	d1b9      	bne.n	80034e2 <HAL_RCC_OscConfig+0x6be>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800356e:	f006 6360 	and.w	r3, r6, #234881024	; 0xe000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003572:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003574:	4293      	cmp	r3, r2
 8003576:	d1b4      	bne.n	80034e2 <HAL_RCC_OscConfig+0x6be>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003578:	f006 4660 	and.w	r6, r6, #3758096384	; 0xe0000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800357c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800357e:	429e      	cmp	r6, r3
 8003580:	d1af      	bne.n	80034e2 <HAL_RCC_OscConfig+0x6be>
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800358c:	d02e      	beq.n	80035ec <HAL_RCC_OscConfig+0x7c8>
  return HAL_OK;
 800358e:	2000      	movs	r0, #0
 8003590:	e055      	b.n	800363e <HAL_RCC_OscConfig+0x81a>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003592:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003596:	68d0      	ldr	r0, [r2, #12]
 8003598:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800359a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800359c:	430b      	orrs	r3, r1
 800359e:	492b      	ldr	r1, [pc, #172]	; (800364c <HAL_RCC_OscConfig+0x828>)
 80035a0:	4001      	ands	r1, r0
 80035a2:	430b      	orrs	r3, r1
 80035a4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80035a6:	430b      	orrs	r3, r1
 80035a8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80035aa:	430b      	orrs	r3, r1
 80035ac:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80035ae:	430b      	orrs	r3, r1
 80035b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035b2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80035b6:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80035b8:	6813      	ldr	r3, [r2, #0]
 80035ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035be:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035c0:	68d3      	ldr	r3, [r2, #12]
 80035c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c6:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 80035c8:	f7fe fe48 	bl	800225c <HAL_GetTick>
 80035cc:	4604      	mov	r4, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ce:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80035d2:	682b      	ldr	r3, [r5, #0]
 80035d4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80035d8:	d106      	bne.n	80035e8 <HAL_RCC_OscConfig+0x7c4>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035da:	f7fe fe3f 	bl	800225c <HAL_GetTick>
 80035de:	1b00      	subs	r0, r0, r4
 80035e0:	2802      	cmp	r0, #2
 80035e2:	d9f6      	bls.n	80035d2 <HAL_RCC_OscConfig+0x7ae>
                return HAL_TIMEOUT;
 80035e4:	2003      	movs	r0, #3
 80035e6:	e02a      	b.n	800363e <HAL_RCC_OscConfig+0x81a>
  return HAL_OK;
 80035e8:	2000      	movs	r0, #0
 80035ea:	e028      	b.n	800363e <HAL_RCC_OscConfig+0x81a>
 80035ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80035f6:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80035fe:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8003600:	f7fe fe2c 	bl	800225c <HAL_GetTick>
 8003604:	4604      	mov	r4, r0
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003606:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800360a:	682b      	ldr	r3, [r5, #0]
 800360c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003610:	d106      	bne.n	8003620 <HAL_RCC_OscConfig+0x7fc>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003612:	f7fe fe23 	bl	800225c <HAL_GetTick>
 8003616:	1b03      	subs	r3, r0, r4
 8003618:	2b02      	cmp	r3, #2
 800361a:	d9f6      	bls.n	800360a <HAL_RCC_OscConfig+0x7e6>
              return HAL_TIMEOUT;
 800361c:	2003      	movs	r0, #3
 800361e:	e00e      	b.n	800363e <HAL_RCC_OscConfig+0x81a>
  return HAL_OK;
 8003620:	2000      	movs	r0, #0
 8003622:	e00c      	b.n	800363e <HAL_RCC_OscConfig+0x81a>
 8003624:	2000      	movs	r0, #0
 8003626:	e00a      	b.n	800363e <HAL_RCC_OscConfig+0x81a>
    return HAL_ERROR;
 8003628:	2001      	movs	r0, #1
}
 800362a:	4770      	bx	lr
        return HAL_ERROR;
 800362c:	2001      	movs	r0, #1
 800362e:	e006      	b.n	800363e <HAL_RCC_OscConfig+0x81a>
            return HAL_ERROR;
 8003630:	2001      	movs	r0, #1
 8003632:	e004      	b.n	800363e <HAL_RCC_OscConfig+0x81a>
        return HAL_ERROR;
 8003634:	2001      	movs	r0, #1
 8003636:	e002      	b.n	800363e <HAL_RCC_OscConfig+0x81a>
        return HAL_ERROR;
 8003638:	2001      	movs	r0, #1
 800363a:	e000      	b.n	800363e <HAL_RCC_OscConfig+0x81a>
  return HAL_OK;
 800363c:	2000      	movs	r0, #0
}
 800363e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8003640:	2001      	movs	r0, #1
 8003642:	e7fc      	b.n	800363e <HAL_RCC_OscConfig+0x81a>
        return HAL_ERROR;
 8003644:	2001      	movs	r0, #1
 8003646:	e7fa      	b.n	800363e <HAL_RCC_OscConfig+0x81a>
 8003648:	08009af4 	.word	0x08009af4
 800364c:	11c1808c 	.word	0x11c1808c

08003650 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003650:	2800      	cmp	r0, #0
 8003652:	f000 81ab 	beq.w	80039ac <HAL_RCC_ClockConfig+0x35c>
{
 8003656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800365a:	460d      	mov	r5, r1
 800365c:	4604      	mov	r4, r0
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800365e:	6803      	ldr	r3, [r0, #0]
 8003660:	3b01      	subs	r3, #1
 8003662:	2b6e      	cmp	r3, #110	; 0x6e
 8003664:	d83c      	bhi.n	80036e0 <HAL_RCC_ClockConfig+0x90>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003666:	2d03      	cmp	r5, #3
 8003668:	d840      	bhi.n	80036ec <HAL_RCC_ClockConfig+0x9c>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800366a:	4bbb      	ldr	r3, [pc, #748]	; (8003958 <HAL_RCC_ClockConfig+0x308>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	42ab      	cmp	r3, r5
 8003674:	d340      	bcc.n	80036f8 <HAL_RCC_ClockConfig+0xa8>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003676:	6823      	ldr	r3, [r4, #0]
 8003678:	f013 0f02 	tst.w	r3, #2
 800367c:	d052      	beq.n	8003724 <HAL_RCC_ClockConfig+0xd4>
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
 800367e:	68a3      	ldr	r3, [r4, #8]
 8003680:	f033 0210 	bics.w	r2, r3, #16
 8003684:	d014      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x60>
 8003686:	2a80      	cmp	r2, #128	; 0x80
 8003688:	d012      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x60>
 800368a:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800368e:	2920      	cmp	r1, #32
 8003690:	d00e      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x60>
 8003692:	f023 0320 	bic.w	r3, r3, #32
 8003696:	2b50      	cmp	r3, #80	; 0x50
 8003698:	d00a      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x60>
 800369a:	2aa0      	cmp	r2, #160	; 0xa0
 800369c:	d008      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x60>
 800369e:	2ac0      	cmp	r2, #192	; 0xc0
 80036a0:	d006      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x60>
 80036a2:	2ae0      	cmp	r2, #224	; 0xe0
 80036a4:	d004      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x60>
 80036a6:	f240 4149 	movw	r1, #1097	; 0x449
 80036aa:	48ac      	ldr	r0, [pc, #688]	; (800395c <HAL_RCC_ClockConfig+0x30c>)
 80036ac:	f7fe fa6c 	bl	8001b88 <assert_failed>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80036b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036b4:	6893      	ldr	r3, [r2, #8]
 80036b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036ba:	68a1      	ldr	r1, [r4, #8]
 80036bc:	430b      	orrs	r3, r1
 80036be:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80036c0:	f7fe fdcc 	bl	800225c <HAL_GetTick>
 80036c4:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80036c6:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80036d0:	d128      	bne.n	8003724 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80036d2:	f7fe fdc3 	bl	800225c <HAL_GetTick>
 80036d6:	1b80      	subs	r0, r0, r6
 80036d8:	2802      	cmp	r0, #2
 80036da:	d9f6      	bls.n	80036ca <HAL_RCC_ClockConfig+0x7a>
        return HAL_TIMEOUT;
 80036dc:	2003      	movs	r0, #3
 80036de:	e163      	b.n	80039a8 <HAL_RCC_ClockConfig+0x358>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80036e0:	f240 412b 	movw	r1, #1067	; 0x42b
 80036e4:	489d      	ldr	r0, [pc, #628]	; (800395c <HAL_RCC_ClockConfig+0x30c>)
 80036e6:	f7fe fa4f 	bl	8001b88 <assert_failed>
 80036ea:	e7bc      	b.n	8003666 <HAL_RCC_ClockConfig+0x16>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80036ec:	f240 412c 	movw	r1, #1068	; 0x42c
 80036f0:	489a      	ldr	r0, [pc, #616]	; (800395c <HAL_RCC_ClockConfig+0x30c>)
 80036f2:	f7fe fa49 	bl	8001b88 <assert_failed>
 80036f6:	e7b8      	b.n	800366a <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f8:	4a97      	ldr	r2, [pc, #604]	; (8003958 <HAL_RCC_ClockConfig+0x308>)
 80036fa:	6813      	ldr	r3, [r2, #0]
 80036fc:	f023 0307 	bic.w	r3, r3, #7
 8003700:	432b      	orrs	r3, r5
 8003702:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003704:	f7fe fdaa 	bl	800225c <HAL_GetTick>
 8003708:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800370a:	4f93      	ldr	r7, [pc, #588]	; (8003958 <HAL_RCC_ClockConfig+0x308>)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	f003 0307 	and.w	r3, r3, #7
 8003712:	42ab      	cmp	r3, r5
 8003714:	d0af      	beq.n	8003676 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003716:	f7fe fda1 	bl	800225c <HAL_GetTick>
 800371a:	1b80      	subs	r0, r0, r6
 800371c:	2802      	cmp	r0, #2
 800371e:	d9f5      	bls.n	800370c <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8003720:	2003      	movs	r0, #3
 8003722:	e141      	b.n	80039a8 <HAL_RCC_ClockConfig+0x358>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003724:	6823      	ldr	r3, [r4, #0]
 8003726:	f013 0f20 	tst.w	r3, #32
 800372a:	d033      	beq.n	8003794 <HAL_RCC_ClockConfig+0x144>
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
 800372c:	6963      	ldr	r3, [r4, #20]
 800372e:	f033 0210 	bics.w	r2, r3, #16
 8003732:	d014      	beq.n	800375e <HAL_RCC_ClockConfig+0x10e>
 8003734:	2a80      	cmp	r2, #128	; 0x80
 8003736:	d012      	beq.n	800375e <HAL_RCC_ClockConfig+0x10e>
 8003738:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800373c:	2920      	cmp	r1, #32
 800373e:	d00e      	beq.n	800375e <HAL_RCC_ClockConfig+0x10e>
 8003740:	f023 0320 	bic.w	r3, r3, #32
 8003744:	2b50      	cmp	r3, #80	; 0x50
 8003746:	d00a      	beq.n	800375e <HAL_RCC_ClockConfig+0x10e>
 8003748:	2aa0      	cmp	r2, #160	; 0xa0
 800374a:	d008      	beq.n	800375e <HAL_RCC_ClockConfig+0x10e>
 800374c:	2ac0      	cmp	r2, #192	; 0xc0
 800374e:	d006      	beq.n	800375e <HAL_RCC_ClockConfig+0x10e>
 8003750:	2ae0      	cmp	r2, #224	; 0xe0
 8003752:	d004      	beq.n	800375e <HAL_RCC_ClockConfig+0x10e>
 8003754:	f240 415a 	movw	r1, #1114	; 0x45a
 8003758:	4880      	ldr	r0, [pc, #512]	; (800395c <HAL_RCC_ClockConfig+0x30c>)
 800375a:	f7fe fa15 	bl	8001b88 <assert_failed>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800375e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003762:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8003766:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800376a:	6961      	ldr	r1, [r4, #20]
 800376c:	430b      	orrs	r3, r1
 800376e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8003772:	f7fe fd73 	bl	800225c <HAL_GetTick>
 8003776:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003778:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 800377c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003780:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003784:	d106      	bne.n	8003794 <HAL_RCC_ClockConfig+0x144>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003786:	f7fe fd69 	bl	800225c <HAL_GetTick>
 800378a:	1b80      	subs	r0, r0, r6
 800378c:	2802      	cmp	r0, #2
 800378e:	d9f5      	bls.n	800377c <HAL_RCC_ClockConfig+0x12c>
        return HAL_TIMEOUT;
 8003790:	2003      	movs	r0, #3
 8003792:	e109      	b.n	80039a8 <HAL_RCC_ClockConfig+0x358>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003794:	6823      	ldr	r3, [r4, #0]
 8003796:	f013 0f40 	tst.w	r3, #64	; 0x40
 800379a:	d034      	beq.n	8003806 <HAL_RCC_ClockConfig+0x1b6>
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
 800379c:	69a3      	ldr	r3, [r4, #24]
 800379e:	f033 0210 	bics.w	r2, r3, #16
 80037a2:	d014      	beq.n	80037ce <HAL_RCC_ClockConfig+0x17e>
 80037a4:	2a80      	cmp	r2, #128	; 0x80
 80037a6:	d012      	beq.n	80037ce <HAL_RCC_ClockConfig+0x17e>
 80037a8:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80037ac:	2920      	cmp	r1, #32
 80037ae:	d00e      	beq.n	80037ce <HAL_RCC_ClockConfig+0x17e>
 80037b0:	f023 0320 	bic.w	r3, r3, #32
 80037b4:	2b50      	cmp	r3, #80	; 0x50
 80037b6:	d00a      	beq.n	80037ce <HAL_RCC_ClockConfig+0x17e>
 80037b8:	2aa0      	cmp	r2, #160	; 0xa0
 80037ba:	d008      	beq.n	80037ce <HAL_RCC_ClockConfig+0x17e>
 80037bc:	2ac0      	cmp	r2, #192	; 0xc0
 80037be:	d006      	beq.n	80037ce <HAL_RCC_ClockConfig+0x17e>
 80037c0:	2ae0      	cmp	r2, #224	; 0xe0
 80037c2:	d004      	beq.n	80037ce <HAL_RCC_ClockConfig+0x17e>
 80037c4:	f240 416a 	movw	r1, #1130	; 0x46a
 80037c8:	4864      	ldr	r0, [pc, #400]	; (800395c <HAL_RCC_ClockConfig+0x30c>)
 80037ca:	f7fe f9dd 	bl	8001b88 <assert_failed>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80037ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037d2:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 80037d6:	69a1      	ldr	r1, [r4, #24]
 80037d8:	f023 030f 	bic.w	r3, r3, #15
 80037dc:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 80037e0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 80037e4:	f7fe fd3a 	bl	800225c <HAL_GetTick>
 80037e8:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80037ea:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80037ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80037f2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80037f6:	d106      	bne.n	8003806 <HAL_RCC_ClockConfig+0x1b6>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80037f8:	f7fe fd30 	bl	800225c <HAL_GetTick>
 80037fc:	1b80      	subs	r0, r0, r6
 80037fe:	2802      	cmp	r0, #2
 8003800:	d9f5      	bls.n	80037ee <HAL_RCC_ClockConfig+0x19e>
        return HAL_TIMEOUT;
 8003802:	2003      	movs	r0, #3
 8003804:	e0d0      	b.n	80039a8 <HAL_RCC_ClockConfig+0x358>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003806:	6823      	ldr	r3, [r4, #0]
 8003808:	f013 0f04 	tst.w	r3, #4
 800380c:	d028      	beq.n	8003860 <HAL_RCC_ClockConfig+0x210>
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
 800380e:	68e3      	ldr	r3, [r4, #12]
 8003810:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8003814:	d00c      	beq.n	8003830 <HAL_RCC_ClockConfig+0x1e0>
 8003816:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800381a:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800381e:	d007      	beq.n	8003830 <HAL_RCC_ClockConfig+0x1e0>
 8003820:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003824:	d004      	beq.n	8003830 <HAL_RCC_ClockConfig+0x1e0>
 8003826:	f240 417b 	movw	r1, #1147	; 0x47b
 800382a:	484c      	ldr	r0, [pc, #304]	; (800395c <HAL_RCC_ClockConfig+0x30c>)
 800382c:	f7fe f9ac 	bl	8001b88 <assert_failed>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003830:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003834:	6893      	ldr	r3, [r2, #8]
 8003836:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800383a:	68e1      	ldr	r1, [r4, #12]
 800383c:	430b      	orrs	r3, r1
 800383e:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003840:	f7fe fd0c 	bl	800225c <HAL_GetTick>
 8003844:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003846:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003850:	d106      	bne.n	8003860 <HAL_RCC_ClockConfig+0x210>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003852:	f7fe fd03 	bl	800225c <HAL_GetTick>
 8003856:	1b80      	subs	r0, r0, r6
 8003858:	2802      	cmp	r0, #2
 800385a:	d9f6      	bls.n	800384a <HAL_RCC_ClockConfig+0x1fa>
        return HAL_TIMEOUT;
 800385c:	2003      	movs	r0, #3
 800385e:	e0a3      	b.n	80039a8 <HAL_RCC_ClockConfig+0x358>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003860:	6823      	ldr	r3, [r4, #0]
 8003862:	f013 0f08 	tst.w	r3, #8
 8003866:	d029      	beq.n	80038bc <HAL_RCC_ClockConfig+0x26c>
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
 8003868:	6923      	ldr	r3, [r4, #16]
 800386a:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800386e:	d00c      	beq.n	800388a <HAL_RCC_ClockConfig+0x23a>
 8003870:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003874:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8003878:	d007      	beq.n	800388a <HAL_RCC_ClockConfig+0x23a>
 800387a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800387e:	d004      	beq.n	800388a <HAL_RCC_ClockConfig+0x23a>
 8003880:	f240 418c 	movw	r1, #1164	; 0x48c
 8003884:	4835      	ldr	r0, [pc, #212]	; (800395c <HAL_RCC_ClockConfig+0x30c>)
 8003886:	f7fe f97f 	bl	8001b88 <assert_failed>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800388a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800388e:	6893      	ldr	r3, [r2, #8]
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003890:	6921      	ldr	r1, [r4, #16]
 8003892:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003896:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800389a:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800389c:	f7fe fcde 	bl	800225c <HAL_GetTick>
 80038a0:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80038a2:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80038ac:	d106      	bne.n	80038bc <HAL_RCC_ClockConfig+0x26c>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80038ae:	f7fe fcd5 	bl	800225c <HAL_GetTick>
 80038b2:	1b80      	subs	r0, r0, r6
 80038b4:	2802      	cmp	r0, #2
 80038b6:	d9f6      	bls.n	80038a6 <HAL_RCC_ClockConfig+0x256>
        return HAL_TIMEOUT;
 80038b8:	2003      	movs	r0, #3
 80038ba:	e075      	b.n	80039a8 <HAL_RCC_ClockConfig+0x358>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038bc:	6823      	ldr	r3, [r4, #0]
 80038be:	f013 0f01 	tst.w	r3, #1
 80038c2:	d04d      	beq.n	8003960 <HAL_RCC_ClockConfig+0x310>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80038c4:	6863      	ldr	r3, [r4, #4]
 80038c6:	2b03      	cmp	r3, #3
 80038c8:	d80d      	bhi.n	80038e6 <HAL_RCC_ClockConfig+0x296>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ca:	6863      	ldr	r3, [r4, #4]
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d010      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x2a2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038d0:	2b03      	cmp	r3, #3
 80038d2:	d016      	beq.n	8003902 <HAL_RCC_ClockConfig+0x2b2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038d4:	b9eb      	cbnz	r3, 8003912 <HAL_RCC_ClockConfig+0x2c2>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80038d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038da:	6812      	ldr	r2, [r2, #0]
 80038dc:	f012 0f02 	tst.w	r2, #2
 80038e0:	d11d      	bne.n	800391e <HAL_RCC_ClockConfig+0x2ce>
        return HAL_ERROR;
 80038e2:	2001      	movs	r0, #1
 80038e4:	e060      	b.n	80039a8 <HAL_RCC_ClockConfig+0x358>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80038e6:	f240 419d 	movw	r1, #1181	; 0x49d
 80038ea:	481c      	ldr	r0, [pc, #112]	; (800395c <HAL_RCC_ClockConfig+0x30c>)
 80038ec:	f7fe f94c 	bl	8001b88 <assert_failed>
 80038f0:	e7eb      	b.n	80038ca <HAL_RCC_ClockConfig+0x27a>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80038f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038f6:	6812      	ldr	r2, [r2, #0]
 80038f8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80038fc:	d10f      	bne.n	800391e <HAL_RCC_ClockConfig+0x2ce>
        return HAL_ERROR;
 80038fe:	2001      	movs	r0, #1
 8003900:	e052      	b.n	80039a8 <HAL_RCC_ClockConfig+0x358>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003902:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800390c:	d107      	bne.n	800391e <HAL_RCC_ClockConfig+0x2ce>
        return HAL_ERROR;
 800390e:	2001      	movs	r0, #1
 8003910:	e04a      	b.n	80039a8 <HAL_RCC_ClockConfig+0x358>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003912:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800391c:	d048      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x360>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800391e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003922:	688a      	ldr	r2, [r1, #8]
 8003924:	f022 0203 	bic.w	r2, r2, #3
 8003928:	4313      	orrs	r3, r2
 800392a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800392c:	f7fe fc96 	bl	800225c <HAL_GetTick>
 8003930:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003932:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003936:	f241 3888 	movw	r8, #5000	; 0x1388
 800393a:	68bb      	ldr	r3, [r7, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800393c:	6862      	ldr	r2, [r4, #4]
 800393e:	f003 030c 	and.w	r3, r3, #12
 8003942:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003946:	d00b      	beq.n	8003960 <HAL_RCC_ClockConfig+0x310>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003948:	f7fe fc88 	bl	800225c <HAL_GetTick>
 800394c:	1b80      	subs	r0, r0, r6
 800394e:	4540      	cmp	r0, r8
 8003950:	d9f3      	bls.n	800393a <HAL_RCC_ClockConfig+0x2ea>
        return HAL_TIMEOUT;
 8003952:	2003      	movs	r0, #3
 8003954:	e028      	b.n	80039a8 <HAL_RCC_ClockConfig+0x358>
 8003956:	bf00      	nop
 8003958:	58004000 	.word	0x58004000
 800395c:	08009af4 	.word	0x08009af4
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003960:	4b14      	ldr	r3, [pc, #80]	; (80039b4 <HAL_RCC_ClockConfig+0x364>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	42ab      	cmp	r3, r5
 800396a:	d915      	bls.n	8003998 <HAL_RCC_ClockConfig+0x348>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800396c:	4a11      	ldr	r2, [pc, #68]	; (80039b4 <HAL_RCC_ClockConfig+0x364>)
 800396e:	6813      	ldr	r3, [r2, #0]
 8003970:	f023 0307 	bic.w	r3, r3, #7
 8003974:	432b      	orrs	r3, r5
 8003976:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003978:	f7fe fc70 	bl	800225c <HAL_GetTick>
 800397c:	4604      	mov	r4, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800397e:	4e0d      	ldr	r6, [pc, #52]	; (80039b4 <HAL_RCC_ClockConfig+0x364>)
 8003980:	6833      	ldr	r3, [r6, #0]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	42ab      	cmp	r3, r5
 8003988:	d006      	beq.n	8003998 <HAL_RCC_ClockConfig+0x348>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800398a:	f7fe fc67 	bl	800225c <HAL_GetTick>
 800398e:	1b00      	subs	r0, r0, r4
 8003990:	2802      	cmp	r0, #2
 8003992:	d9f5      	bls.n	8003980 <HAL_RCC_ClockConfig+0x330>
        return HAL_TIMEOUT;
 8003994:	2003      	movs	r0, #3
 8003996:	e007      	b.n	80039a8 <HAL_RCC_ClockConfig+0x358>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003998:	f7ff fa34 	bl	8002e04 <HAL_RCC_GetHCLKFreq>
 800399c:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <HAL_RCC_ClockConfig+0x368>)
 800399e:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(HAL_GetTickPrio());
 80039a0:	f7fe fc62 	bl	8002268 <HAL_GetTickPrio>
 80039a4:	f7fe fc10 	bl	80021c8 <HAL_InitTick>
}
 80039a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80039ac:	2001      	movs	r0, #1
}
 80039ae:	4770      	bx	lr
        return HAL_ERROR;
 80039b0:	2001      	movs	r0, #1
 80039b2:	e7f9      	b.n	80039a8 <HAL_RCC_ClockConfig+0x358>
 80039b4:	58004000 	.word	0x58004000
 80039b8:	20000004 	.word	0x20000004

080039bc <HAL_RCC_GetPCLK1Freq>:
{
 80039bc:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80039be:	f7ff fa21 	bl	8002e04 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80039c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80039cc:	4a03      	ldr	r2, [pc, #12]	; (80039dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80039ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039d2:	f003 031f 	and.w	r3, r3, #31
}
 80039d6:	40d8      	lsrs	r0, r3
 80039d8:	bd08      	pop	{r3, pc}
 80039da:	bf00      	nop
 80039dc:	080099a8 	.word	0x080099a8

080039e0 <HAL_RCC_GetPCLK2Freq>:
{
 80039e0:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80039e2:	f7ff fa0f 	bl	8002e04 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80039e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80039f0:	4a03      	ldr	r2, [pc, #12]	; (8003a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f6:	f003 031f 	and.w	r3, r3, #31
}
 80039fa:	40d8      	lsrs	r0, r3
 80039fc:	bd08      	pop	{r3, pc}
 80039fe:	bf00      	nop
 8003a00:	080099a8 	.word	0x080099a8

08003a04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a06:	4604      	mov	r4, r0
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a08:	6803      	ldr	r3, [r0, #0]
 8003a0a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003a0e:	d053      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a14:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 8003a18:	f405 7540 	and.w	r5, r5, #768	; 0x300
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003a1c:	6a03      	ldr	r3, [r0, #32]
 8003a1e:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8003a22:	d006      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x2e>
 8003a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a28:	d003      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x2e>
 8003a2a:	21d4      	movs	r1, #212	; 0xd4
 8003a2c:	48c4      	ldr	r0, [pc, #784]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a2e:	f7fe f8ab 	bl	8001b88 <assert_failed>

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003a32:	6a23      	ldr	r3, [r4, #32]
 8003a34:	42ab      	cmp	r3, r5
 8003a36:	d101      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x38>
      status = ret;
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a38:	2500      	movs	r5, #0
 8003a3a:	e03e      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xb6>
      HAL_PWR_EnableBkUpAccess();
 8003a3c:	f7ff f8fc 	bl	8002c38 <HAL_PWR_EnableBkUpAccess>
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003a40:	b955      	cbnz	r5, 8003a58 <HAL_RCCEx_PeriphCLKConfig+0x54>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003a42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a46:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a4e:	6a21      	ldr	r1, [r4, #32]
 8003a50:	430b      	orrs	r3, r1
 8003a52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003a56:	e030      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xb6>
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a5c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003a60:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8003a64:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003a68:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003a6c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8003a70:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003a74:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003a78:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003a7c:	6a21      	ldr	r1, [r4, #32]
 8003a7e:	430a      	orrs	r2, r1
        LL_RCC_WriteReg(BDCR, bdcr);
 8003a80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a88:	f013 0f01 	tst.w	r3, #1
 8003a8c:	f000 811a 	beq.w	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
          tickstart = HAL_GetTick();
 8003a90:	f7fe fbe4 	bl	800225c <HAL_GetTick>
 8003a94:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003a96:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a9a:	f241 3788 	movw	r7, #5000	; 0x1388
 8003a9e:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8003aa2:	f013 0f02 	tst.w	r3, #2
 8003aa6:	f040 810f 	bne.w	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8003aaa:	f7fe fbd7 	bl	800225c <HAL_GetTick>
 8003aae:	1b40      	subs	r0, r0, r5
 8003ab0:	42b8      	cmp	r0, r7
 8003ab2:	d9f4      	bls.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
              ret = HAL_TIMEOUT;
 8003ab4:	2503      	movs	r5, #3
 8003ab6:	e000      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xb6>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003ab8:	2500      	movs	r5, #0
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003aba:	6823      	ldr	r3, [r4, #0]
 8003abc:	f013 0f01 	tst.w	r3, #1
 8003ac0:	d011      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8003ac2:	6863      	ldr	r3, [r4, #4]
 8003ac4:	2b03      	cmp	r3, #3
 8003ac6:	d904      	bls.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003ac8:	f44f 7189 	mov.w	r1, #274	; 0x112
 8003acc:	489c      	ldr	r0, [pc, #624]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ace:	f7fe f85b 	bl	8001b88 <assert_failed>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003ad2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ad6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003ada:	f023 0303 	bic.w	r3, r3, #3
 8003ade:	6861      	ldr	r1, [r4, #4]
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ae6:	6823      	ldr	r3, [r4, #0]
 8003ae8:	f013 0f02 	tst.w	r3, #2
 8003aec:	d011      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8003aee:	68a3      	ldr	r3, [r4, #8]
 8003af0:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8003af4:	d003      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003af6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003afa:	f040 80e7 	bne.w	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003afe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b02:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003b06:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003b0a:	68a1      	ldr	r1, [r4, #8]
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b12:	6823      	ldr	r3, [r4, #0]
 8003b14:	f013 0f10 	tst.w	r3, #16
 8003b18:	d01a      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8003b1a:	6923      	ldr	r3, [r4, #16]
 8003b1c:	f023 0304 	bic.w	r3, r3, #4
 8003b20:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b24:	d007      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8003b26:	4a87      	ldr	r2, [pc, #540]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d004      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8003b2c:	f240 1127 	movw	r1, #295	; 0x127
 8003b30:	4883      	ldr	r0, [pc, #524]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b32:	f7fe f829 	bl	8001b88 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b36:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003b38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b3c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003b40:	0c02      	lsrs	r2, r0, #16
 8003b42:	0412      	lsls	r2, r2, #16
 8003b44:	ea23 0302 	bic.w	r3, r3, r2
 8003b48:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b50:	6823      	ldr	r3, [r4, #0]
 8003b52:	f013 0f20 	tst.w	r3, #32
 8003b56:	d01a      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x18a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8003b58:	6963      	ldr	r3, [r4, #20]
 8003b5a:	f023 0310 	bic.w	r3, r3, #16
 8003b5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b62:	d007      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8003b64:	4a78      	ldr	r2, [pc, #480]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d004      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8003b6a:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8003b6e:	4874      	ldr	r0, [pc, #464]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b70:	f7fe f80a 	bl	8001b88 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b74:	6960      	ldr	r0, [r4, #20]
 8003b76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b7a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003b7e:	0c02      	lsrs	r2, r0, #16
 8003b80:	0412      	lsls	r2, r2, #16
 8003b82:	ea23 0302 	bic.w	r3, r3, r2
 8003b86:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b8e:	6823      	ldr	r3, [r4, #0]
 8003b90:	f013 0f04 	tst.w	r3, #4
 8003b94:	d019      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8003b96:	68e3      	ldr	r3, [r4, #12]
 8003b98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b9c:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8003ba0:	d003      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003ba2:	4a6a      	ldr	r2, [pc, #424]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	f040 8097 	bne.w	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003baa:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003bac:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8003bb0:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8003bb4:	0919      	lsrs	r1, r3, #4
 8003bb6:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8003bba:	ea22 0201 	bic.w	r2, r2, r1
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bca:	6823      	ldr	r3, [r4, #0]
 8003bcc:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003bd0:	d023      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8003bd2:	69a3      	ldr	r3, [r4, #24]
 8003bd4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003bd8:	f1b2 5fc0 	cmp.w	r2, #402653184	; 0x18000000
 8003bdc:	f000 8085 	beq.w	8003cea <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8003be0:	b173      	cbz	r3, 8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8003be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be6:	d00b      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8003be8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bec:	d008      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8003bee:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003bf2:	4853      	ldr	r0, [pc, #332]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bf4:	f7fd ffc8 	bl	8001b88 <assert_failed>

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bf8:	69a3      	ldr	r3, [r4, #24]
 8003bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bfe:	d171      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003c00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c04:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003c08:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c12:	69a3      	ldr	r3, [r4, #24]
 8003c14:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003c18:	d079      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x30a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c1a:	6823      	ldr	r3, [r4, #0]
 8003c1c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003c20:	d019      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8003c22:	69e3      	ldr	r3, [r4, #28]
 8003c24:	f033 5380 	bics.w	r3, r3, #268435456	; 0x10000000
 8003c28:	d007      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x236>
 8003c2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c2e:	d004      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x236>
 8003c30:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8003c34:	4842      	ldr	r0, [pc, #264]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c36:	f7fd ffa7 	bl	8001b88 <assert_failed>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003c3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c3e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003c42:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003c46:	69e1      	ldr	r1, [r4, #28]
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003c4e:	69e3      	ldr	r3, [r4, #28]
 8003c50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c54:	d062      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x318>
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003c5c:	d010      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));
 8003c5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c60:	f433 4280 	bics.w	r2, r3, #16384	; 0x4000
 8003c64:	d002      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x268>
 8003c66:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c6a:	d15c      	bne.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x322>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003c6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c70:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003c74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003c78:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003c7a:	430b      	orrs	r3, r1
 8003c7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003c80:	6823      	ldr	r3, [r4, #0]
 8003c82:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003c86:	d01b      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
 8003c88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c8a:	f033 0310 	bics.w	r3, r3, #16
 8003c8e:	d006      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8003c90:	2b20      	cmp	r3, #32
 8003c92:	d004      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8003c94:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8003c98:	4829      	ldr	r0, [pc, #164]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c9a:	f7fd ff75 	bl	8001b88 <assert_failed>
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));
 8003c9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d846      	bhi.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x32e>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003ca4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ca8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003caa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003cae:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003cb0:	430b      	orrs	r3, r1
 8003cb2:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003cb4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003cb6:	f023 0303 	bic.w	r3, r3, #3
 8003cba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003cbc:	430b      	orrs	r3, r1
 8003cbe:	6253      	str	r3, [r2, #36]	; 0x24
  }
#endif


  return status;
}
 8003cc0:	4628      	mov	r0, r5
 8003cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003cc4:	2500      	movs	r5, #0
 8003cc6:	e6f8      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xb6>
 8003cc8:	2500      	movs	r5, #0
 8003cca:	e6f6      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xb6>
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8003ccc:	f240 111d 	movw	r1, #285	; 0x11d
 8003cd0:	481b      	ldr	r0, [pc, #108]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cd2:	f7fd ff59 	bl	8001b88 <assert_failed>
 8003cd6:	e712      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xfa>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8003cd8:	f44f 719b 	mov.w	r1, #310	; 0x136
 8003cdc:	4818      	ldr	r0, [pc, #96]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cde:	f7fd ff53 	bl	8001b88 <assert_failed>
 8003ce2:	e762      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ce4:	f033 4280 	bics.w	r2, r3, #1073741824	; 0x40000000
 8003ce8:	d08a      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003cea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cee:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8003cf2:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8003cf6:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003cfa:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8003cfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d02:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8003d06:	430b      	orrs	r3, r1
 8003d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8003d0c:	e781      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x20e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003d0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d12:	68d3      	ldr	r3, [r2, #12]
 8003d14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d18:	60d3      	str	r3, [r2, #12]
 8003d1a:	e77e      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x216>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d1c:	68d3      	ldr	r3, [r2, #12]
 8003d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d22:	60d3      	str	r3, [r2, #12]
 8003d24:	e797      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x252>
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));
 8003d26:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8003d2a:	4805      	ldr	r0, [pc, #20]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d2c:	f7fd ff2c 	bl	8001b88 <assert_failed>
 8003d30:	e79c      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x268>
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));
 8003d32:	f240 11a3 	movw	r1, #419	; 0x1a3
 8003d36:	4802      	ldr	r0, [pc, #8]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d38:	f7fd ff26 	bl	8001b88 <assert_failed>
 8003d3c:	e7b2      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8003d3e:	bf00      	nop
 8003d40:	08009b2c 	.word	0x08009b2c
 8003d44:	000c0008 	.word	0x000c0008
 8003d48:	00300020 	.word	0x00300020
 8003d4c:	00030200 	.word	0x00030200

08003d50 <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 8003d50:	b510      	push	{r4, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus backupchanged;

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));
 8003d56:	f030 7300 	bics.w	r3, r0, #33554432	; 0x2000000
 8003d5a:	d004      	beq.n	8003d66 <HAL_RCCEx_EnableLSCO+0x16>
 8003d5c:	f44f 61b6 	mov.w	r1, #1456	; 0x5b0
 8003d60:	481f      	ldr	r0, [pc, #124]	; (8003de0 <HAL_RCCEx_EnableLSCO+0x90>)
 8003d62:	f7fd ff11 	bl	8001b88 <assert_failed>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d6c:	f042 0201 	orr.w	r2, r2, #1
 8003d70:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8003d7a:	9b00      	ldr	r3, [sp, #0]

  /* LSCO Pin Clock Enable */
  __LSCO1_CLK_ENABLE();

  /* Configure the LSCO pin in analog mode */
  GPIO_InitStruct.Pin   = LSCO1_PIN;
 8003d7c:	2304      	movs	r3, #4
 8003d7e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8003d80:	2302      	movs	r3, #2
 8003d82:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d84:	2303      	movs	r3, #3
 8003d86:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_LSCO;
 8003d8c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(LSCO1_GPIO_PORT, &GPIO_InitStruct);
 8003d8e:	a901      	add	r1, sp, #4
 8003d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d94:	f7fe fd98 	bl	80028c8 <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d98:	4b12      	ldr	r3, [pc, #72]	; (8003de4 <HAL_RCCEx_EnableLSCO+0x94>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003da0:	d00d      	beq.n	8003dbe <HAL_RCCEx_EnableLSCO+0x6e>
  else
  {
    backupchanged = RESET;
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 8003da2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003da6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003daa:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003dae:	ea43 0004 	orr.w	r0, r3, r4
 8003db2:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8003db6:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90

  if (backupchanged == SET)
  {
    HAL_PWR_DisableBkUpAccess();
  }
}
 8003dba:	b006      	add	sp, #24
 8003dbc:	bd10      	pop	{r4, pc}
    HAL_PWR_EnableBkUpAccess();
 8003dbe:	f7fe ff3b 	bl	8002c38 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 8003dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dc6:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8003dca:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 8003dce:	4320      	orrs	r0, r4
 8003dd0:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8003dd4:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
    HAL_PWR_DisableBkUpAccess();
 8003dd8:	f7fe ff36 	bl	8002c48 <HAL_PWR_DisableBkUpAccess>
}
 8003ddc:	e7ed      	b.n	8003dba <HAL_RCCEx_EnableLSCO+0x6a>
 8003dde:	bf00      	nop
 8003de0:	08009b2c 	.word	0x08009b2c
 8003de4:	58000400 	.word	0x58000400

08003de8 <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003de8:	b358      	cbz	r0, 8003e42 <HAL_RNG_Init+0x5a>
{
 8003dea:	b510      	push	{r4, lr}
 8003dec:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 8003dee:	6802      	ldr	r2, [r0, #0]
 8003df0:	4b15      	ldr	r3, [pc, #84]	; (8003e48 <HAL_RNG_Init+0x60>)
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d003      	beq.n	8003dfe <HAL_RNG_Init+0x16>
 8003df6:	21a3      	movs	r1, #163	; 0xa3
 8003df8:	4814      	ldr	r0, [pc, #80]	; (8003e4c <HAL_RNG_Init+0x64>)
 8003dfa:	f7fd fec5 	bl	8001b88 <assert_failed>
  assert_param(IS_RNG_CED(hrng->Init.ClockErrorDetection));
 8003dfe:	6863      	ldr	r3, [r4, #4]
 8003e00:	f033 0320 	bics.w	r3, r3, #32
 8003e04:	d003      	beq.n	8003e0e <HAL_RNG_Init+0x26>
 8003e06:	21a4      	movs	r1, #164	; 0xa4
 8003e08:	4810      	ldr	r0, [pc, #64]	; (8003e4c <HAL_RNG_Init+0x64>)
 8003e0a:	f7fd febd 	bl	8001b88 <assert_failed>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003e0e:	7a63      	ldrb	r3, [r4, #9]
 8003e10:	b193      	cbz	r3, 8003e38 <HAL_RNG_Init+0x50>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003e12:	2302      	movs	r3, #2
 8003e14:	7263      	strb	r3, [r4, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8003e16:	6822      	ldr	r2, [r4, #0]
 8003e18:	6813      	ldr	r3, [r2, #0]
 8003e1a:	f023 0320 	bic.w	r3, r3, #32
 8003e1e:	6861      	ldr	r1, [r4, #4]
 8003e20:	430b      	orrs	r3, r1
 8003e22:	6013      	str	r3, [r2, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003e24:	6822      	ldr	r2, [r4, #0]
 8003e26:	6813      	ldr	r3, [r2, #0]
 8003e28:	f043 0304 	orr.w	r3, r3, #4
 8003e2c:	6013      	str	r3, [r2, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	7263      	strb	r3, [r4, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003e32:	2000      	movs	r0, #0
 8003e34:	60e0      	str	r0, [r4, #12]

  /* Return function status */
  return HAL_OK;
}
 8003e36:	bd10      	pop	{r4, pc}
    hrng->Lock = HAL_UNLOCKED;
 8003e38:	7223      	strb	r3, [r4, #8]
    HAL_RNG_MspInit(hrng);
 8003e3a:	4620      	mov	r0, r4
 8003e3c:	f7fd fec2 	bl	8001bc4 <HAL_RNG_MspInit>
 8003e40:	e7e7      	b.n	8003e12 <HAL_RNG_Init+0x2a>
    return HAL_ERROR;
 8003e42:	2001      	movs	r0, #1
}
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	58001000 	.word	0x58001000
 8003e4c:	08009b68 	.word	0x08009b68

08003e50 <HAL_RNG_ReadyDataCallback>:
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8003e50:	4770      	bx	lr

08003e52 <HAL_RNG_ErrorCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8003e52:	4770      	bx	lr

08003e54 <HAL_RNG_IRQHandler>:
{
 8003e54:	b510      	push	{r4, lr}
 8003e56:	4604      	mov	r4, r0
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 8003e58:	6803      	ldr	r3, [r0, #0]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	f012 0f20 	tst.w	r2, #32
 8003e60:	d01b      	beq.n	8003e9a <HAL_RNG_IRQHandler+0x46>
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8003e62:	2310      	movs	r3, #16
 8003e64:	60c3      	str	r3, [r0, #12]
    hrng->State = HAL_RNG_STATE_ERROR;
 8003e66:	2304      	movs	r3, #4
 8003e68:	7263      	strb	r3, [r4, #9]
    HAL_RNG_ErrorCallback(hrng);
 8003e6a:	4620      	mov	r0, r4
 8003e6c:	f7ff fff1 	bl	8003e52 <HAL_RNG_ErrorCallback>
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8003e70:	6823      	ldr	r3, [r4, #0]
 8003e72:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8003e76:	605a      	str	r2, [r3, #4]
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 8003e78:	6823      	ldr	r3, [r4, #0]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	f012 0f01 	tst.w	r2, #1
 8003e80:	d00a      	beq.n	8003e98 <HAL_RNG_IRQHandler+0x44>
    __HAL_RNG_DISABLE_IT(hrng);
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	f022 0208 	bic.w	r2, r2, #8
 8003e88:	601a      	str	r2, [r3, #0]
    hrng->RandomNumber = hrng->Instance->DR;
 8003e8a:	6823      	ldr	r3, [r4, #0]
 8003e8c:	6899      	ldr	r1, [r3, #8]
 8003e8e:	6121      	str	r1, [r4, #16]
    if (hrng->State != HAL_RNG_STATE_ERROR)
 8003e90:	7a63      	ldrb	r3, [r4, #9]
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d107      	bne.n	8003ea8 <HAL_RNG_IRQHandler+0x54>
}
 8003e98:	bd10      	pop	{r4, pc}
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003ea0:	d0ea      	beq.n	8003e78 <HAL_RNG_IRQHandler+0x24>
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8003ea2:	2308      	movs	r3, #8
 8003ea4:	60c3      	str	r3, [r0, #12]
  if (rngclockerror == 1U)
 8003ea6:	e7de      	b.n	8003e66 <HAL_RNG_IRQHandler+0x12>
      hrng->State = HAL_RNG_STATE_READY;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	7263      	strb	r3, [r4, #9]
      __HAL_UNLOCK(hrng);
 8003eac:	2300      	movs	r3, #0
 8003eae:	7223      	strb	r3, [r4, #8]
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8003eb0:	4620      	mov	r0, r4
 8003eb2:	f7ff ffcd 	bl	8003e50 <HAL_RNG_ReadyDataCallback>
}
 8003eb6:	e7ef      	b.n	8003e98 <HAL_RNG_IRQHandler+0x44>

08003eb8 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8003eb8:	b538      	push	{r3, r4, r5, lr}
 8003eba:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));
 8003ebc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003ec0:	d048      	beq.n	8003f54 <HAL_RTC_DeactivateAlarm+0x9c>
 8003ec2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003ec6:	d131      	bne.n	8003f2c <HAL_RTC_DeactivateAlarm+0x74>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ec8:	f894 3020 	ldrb.w	r3, [r4, #32]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d03f      	beq.n	8003f50 <HAL_RTC_DeactivateAlarm+0x98>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	f884 3020 	strb.w	r3, [r4, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003edc:	6823      	ldr	r3, [r4, #0]
 8003ede:	22ca      	movs	r2, #202	; 0xca
 8003ee0:	625a      	str	r2, [r3, #36]	; 0x24
 8003ee2:	6823      	ldr	r3, [r4, #0]
 8003ee4:	2253      	movs	r2, #83	; 0x53
 8003ee6:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003ee8:	6822      	ldr	r2, [r4, #0]
 8003eea:	6893      	ldr	r3, [r2, #8]
 8003eec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ef0:	6093      	str	r3, [r2, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8003ef2:	6822      	ldr	r2, [r4, #0]
 8003ef4:	6893      	ldr	r3, [r2, #8]
 8003ef6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003efa:	6093      	str	r3, [r2, #8]

    tickstart = HAL_GetTick();
 8003efc:	f7fe f9ae 	bl	800225c <HAL_GetTick>
 8003f00:	4605      	mov	r5, r0

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003f02:	6823      	ldr	r3, [r4, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f013 0f02 	tst.w	r3, #2
 8003f0a:	d115      	bne.n	8003f38 <HAL_RTC_DeactivateAlarm+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003f0c:	f7fe f9a6 	bl	800225c <HAL_GetTick>
 8003f10:	1b43      	subs	r3, r0, r5
 8003f12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f16:	d9f4      	bls.n	8003f02 <HAL_RTC_DeactivateAlarm+0x4a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f18:	6823      	ldr	r3, [r4, #0]
 8003f1a:	22ff      	movs	r2, #255	; 0xff
 8003f1c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f1e:	2003      	movs	r0, #3
 8003f20:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003f24:	2300      	movs	r3, #0
 8003f26:	f884 3020 	strb.w	r3, [r4, #32]

        return HAL_TIMEOUT;
 8003f2a:	e00e      	b.n	8003f4a <HAL_RTC_DeactivateAlarm+0x92>
  assert_param(IS_RTC_ALARM(Alarm));
 8003f2c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003f30:	4821      	ldr	r0, [pc, #132]	; (8003fb8 <HAL_RTC_DeactivateAlarm+0x100>)
 8003f32:	f7fd fe29 	bl	8001b88 <assert_failed>
 8003f36:	e7c7      	b.n	8003ec8 <HAL_RTC_DeactivateAlarm+0x10>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	22ff      	movs	r2, #255	; 0xff
 8003f3c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003f44:	2000      	movs	r0, #0
 8003f46:	f884 0020 	strb.w	r0, [r4, #32]

  return HAL_OK;
}
 8003f4a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hrtc);
 8003f4c:	2002      	movs	r0, #2
 8003f4e:	e7fc      	b.n	8003f4a <HAL_RTC_DeactivateAlarm+0x92>
 8003f50:	2002      	movs	r0, #2
 8003f52:	e7fa      	b.n	8003f4a <HAL_RTC_DeactivateAlarm+0x92>
 8003f54:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d0f7      	beq.n	8003f4c <HAL_RTC_DeactivateAlarm+0x94>
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	f884 3020 	strb.w	r3, [r4, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f62:	2302      	movs	r3, #2
 8003f64:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f68:	6823      	ldr	r3, [r4, #0]
 8003f6a:	22ca      	movs	r2, #202	; 0xca
 8003f6c:	625a      	str	r2, [r3, #36]	; 0x24
 8003f6e:	6823      	ldr	r3, [r4, #0]
 8003f70:	2253      	movs	r2, #83	; 0x53
 8003f72:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003f74:	6822      	ldr	r2, [r4, #0]
 8003f76:	6893      	ldr	r3, [r2, #8]
 8003f78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f7c:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003f7e:	6822      	ldr	r2, [r4, #0]
 8003f80:	6893      	ldr	r3, [r2, #8]
 8003f82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f86:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003f88:	f7fe f968 	bl	800225c <HAL_GetTick>
 8003f8c:	4605      	mov	r5, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f013 0f01 	tst.w	r3, #1
 8003f96:	d1cf      	bne.n	8003f38 <HAL_RTC_DeactivateAlarm+0x80>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003f98:	f7fe f960 	bl	800225c <HAL_GetTick>
 8003f9c:	1b40      	subs	r0, r0, r5
 8003f9e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003fa2:	d9f4      	bls.n	8003f8e <HAL_RTC_DeactivateAlarm+0xd6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	22ff      	movs	r2, #255	; 0xff
 8003fa8:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003faa:	2003      	movs	r0, #3
 8003fac:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_TIMEOUT;
 8003fb6:	e7c8      	b.n	8003f4a <HAL_RTC_DeactivateAlarm+0x92>
 8003fb8:	08009ba0 	.word	0x08009ba0

08003fbc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003fbc:	b510      	push	{r4, lr}
 8003fbe:	4604      	mov	r4, r0
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003fc0:	6803      	ldr	r3, [r0, #0]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8003fc8:	d003      	beq.n	8003fd2 <HAL_RTC_AlarmIRQHandler+0x16>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003fd0:	d110      	bne.n	8003ff4 <HAL_RTC_AlarmIRQHandler+0x38>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003fd2:	6823      	ldr	r3, [r4, #0]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8003fda:	d003      	beq.n	8003fe4 <HAL_RTC_AlarmIRQHandler+0x28>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003fe2:	d110      	bne.n	8004006 <HAL_RTC_AlarmIRQHandler+0x4a>
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003fe4:	4b0d      	ldr	r3, [pc, #52]	; (800401c <HAL_RTC_AlarmIRQHandler+0x60>)
 8003fe6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003fea:	60da      	str	r2, [r3, #12]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003fec:	2301      	movs	r3, #1
 8003fee:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8003ff2:	bd10      	pop	{r4, pc}
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003ff4:	f7fc fc66 	bl	80008c4 <HAL_RTC_AlarmAEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003ff8:	6822      	ldr	r2, [r4, #0]
 8003ffa:	68d3      	ldr	r3, [r2, #12]
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	f463 73c0 	orn	r3, r3, #384	; 0x180
 8004002:	60d3      	str	r3, [r2, #12]
 8004004:	e7e5      	b.n	8003fd2 <HAL_RTC_AlarmIRQHandler+0x16>
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004006:	4620      	mov	r0, r4
 8004008:	f000 fd32 	bl	8004a70 <HAL_RTCEx_AlarmBEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800400c:	6822      	ldr	r2, [r4, #0]
 800400e:	68d3      	ldr	r3, [r2, #12]
 8004010:	b2db      	uxtb	r3, r3
 8004012:	f463 7320 	orn	r3, r3, #640	; 0x280
 8004016:	60d3      	str	r3, [r2, #12]
 8004018:	e7e4      	b.n	8003fe4 <HAL_RTC_AlarmIRQHandler+0x28>
 800401a:	bf00      	nop
 800401c:	58000800 	.word	0x58000800

08004020 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004020:	b538      	push	{r3, r4, r5, lr}
 8004022:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004024:	6802      	ldr	r2, [r0, #0]
 8004026:	68d3      	ldr	r3, [r2, #12]
 8004028:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800402c:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800402e:	f7fe f915 	bl	800225c <HAL_GetTick>
 8004032:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004034:	6823      	ldr	r3, [r4, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f013 0f20 	tst.w	r3, #32
 800403c:	d107      	bne.n	800404e <HAL_RTC_WaitForSynchro+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800403e:	f7fe f90d 	bl	800225c <HAL_GetTick>
 8004042:	1b40      	subs	r0, r0, r5
 8004044:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004048:	d9f4      	bls.n	8004034 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 800404a:	2003      	movs	r0, #3
 800404c:	e000      	b.n	8004050 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 800404e:	2000      	movs	r0, #0
}
 8004050:	bd38      	pop	{r3, r4, r5, pc}

08004052 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004052:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004054:	6803      	ldr	r3, [r0, #0]
 8004056:	68da      	ldr	r2, [r3, #12]
 8004058:	f012 0f40 	tst.w	r2, #64	; 0x40
 800405c:	d001      	beq.n	8004062 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800405e:	2000      	movs	r0, #0
}
 8004060:	bd38      	pop	{r3, r4, r5, pc}
 8004062:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004064:	f04f 32ff 	mov.w	r2, #4294967295
 8004068:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800406a:	f7fe f8f7 	bl	800225c <HAL_GetTick>
 800406e:	4605      	mov	r5, r0
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004070:	6823      	ldr	r3, [r4, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004078:	d107      	bne.n	800408a <RTC_EnterInitMode+0x38>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800407a:	f7fe f8ef 	bl	800225c <HAL_GetTick>
 800407e:	1b43      	subs	r3, r0, r5
 8004080:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004084:	d9f4      	bls.n	8004070 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8004086:	2003      	movs	r0, #3
 8004088:	e7ea      	b.n	8004060 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 800408a:	2000      	movs	r0, #0
 800408c:	e7e8      	b.n	8004060 <RTC_EnterInitMode+0xe>
	...

08004090 <HAL_RTC_Init>:
{
 8004090:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 8004092:	2800      	cmp	r0, #0
 8004094:	f000 80ae 	beq.w	80041f4 <HAL_RTC_Init+0x164>
 8004098:	4604      	mov	r4, r0
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 800409a:	6802      	ldr	r2, [r0, #0]
 800409c:	4b56      	ldr	r3, [pc, #344]	; (80041f8 <HAL_RTC_Init+0x168>)
 800409e:	429a      	cmp	r2, r3
 80040a0:	d003      	beq.n	80040aa <HAL_RTC_Init+0x1a>
 80040a2:	21ef      	movs	r1, #239	; 0xef
 80040a4:	4855      	ldr	r0, [pc, #340]	; (80041fc <HAL_RTC_Init+0x16c>)
 80040a6:	f7fd fd6f 	bl	8001b88 <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 80040aa:	6863      	ldr	r3, [r4, #4]
 80040ac:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 80040b0:	d16e      	bne.n	8004190 <HAL_RTC_Init+0x100>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 80040b2:	68a3      	ldr	r3, [r4, #8]
 80040b4:	2b7f      	cmp	r3, #127	; 0x7f
 80040b6:	d870      	bhi.n	800419a <HAL_RTC_Init+0x10a>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 80040b8:	68e3      	ldr	r3, [r4, #12]
 80040ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040be:	d271      	bcs.n	80041a4 <HAL_RTC_Init+0x114>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 80040c0:	6923      	ldr	r3, [r4, #16]
 80040c2:	f433 1300 	bics.w	r3, r3, #2097152	; 0x200000
 80040c6:	d006      	beq.n	80040d6 <HAL_RTC_Init+0x46>
 80040c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040cc:	d003      	beq.n	80040d6 <HAL_RTC_Init+0x46>
 80040ce:	21f3      	movs	r1, #243	; 0xf3
 80040d0:	484a      	ldr	r0, [pc, #296]	; (80041fc <HAL_RTC_Init+0x16c>)
 80040d2:	f7fd fd59 	bl	8001b88 <assert_failed>
  assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
 80040d6:	6963      	ldr	r3, [r4, #20]
 80040d8:	f033 0302 	bics.w	r3, r3, #2
 80040dc:	d003      	beq.n	80040e6 <HAL_RTC_Init+0x56>
 80040de:	21f4      	movs	r1, #244	; 0xf4
 80040e0:	4846      	ldr	r0, [pc, #280]	; (80041fc <HAL_RTC_Init+0x16c>)
 80040e2:	f7fd fd51 	bl	8001b88 <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 80040e6:	69a3      	ldr	r3, [r4, #24]
 80040e8:	f433 1380 	bics.w	r3, r3, #1048576	; 0x100000
 80040ec:	d003      	beq.n	80040f6 <HAL_RTC_Init+0x66>
 80040ee:	21f5      	movs	r1, #245	; 0xf5
 80040f0:	4842      	ldr	r0, [pc, #264]	; (80041fc <HAL_RTC_Init+0x16c>)
 80040f2:	f7fd fd49 	bl	8001b88 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 80040f6:	69e3      	ldr	r3, [r4, #28]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d158      	bne.n	80041ae <HAL_RTC_Init+0x11e>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80040fc:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8004100:	2b00      	cmp	r3, #0
 8004102:	d059      	beq.n	80041b8 <HAL_RTC_Init+0x128>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004104:	2302      	movs	r3, #2
 8004106:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800410a:	6823      	ldr	r3, [r4, #0]
 800410c:	22ca      	movs	r2, #202	; 0xca
 800410e:	625a      	str	r2, [r3, #36]	; 0x24
 8004110:	6823      	ldr	r3, [r4, #0]
 8004112:	2253      	movs	r2, #83	; 0x53
 8004114:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004116:	4620      	mov	r0, r4
 8004118:	f7ff ff9b 	bl	8004052 <RTC_EnterInitMode>
 800411c:	4605      	mov	r5, r0
 800411e:	2800      	cmp	r0, #0
 8004120:	d150      	bne.n	80041c4 <HAL_RTC_Init+0x134>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004122:	6822      	ldr	r2, [r4, #0]
 8004124:	6893      	ldr	r3, [r2, #8]
 8004126:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800412a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800412e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004130:	6822      	ldr	r2, [r4, #0]
 8004132:	6891      	ldr	r1, [r2, #8]
 8004134:	6863      	ldr	r3, [r4, #4]
 8004136:	6920      	ldr	r0, [r4, #16]
 8004138:	4303      	orrs	r3, r0
 800413a:	69a0      	ldr	r0, [r4, #24]
 800413c:	4303      	orrs	r3, r0
 800413e:	430b      	orrs	r3, r1
 8004140:	6093      	str	r3, [r2, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004142:	6823      	ldr	r3, [r4, #0]
 8004144:	68e2      	ldr	r2, [r4, #12]
 8004146:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004148:	6822      	ldr	r2, [r4, #0]
 800414a:	6913      	ldr	r3, [r2, #16]
 800414c:	68a1      	ldr	r1, [r4, #8]
 800414e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004152:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004154:	6822      	ldr	r2, [r4, #0]
 8004156:	68d3      	ldr	r3, [r2, #12]
 8004158:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800415c:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 800415e:	6822      	ldr	r2, [r4, #0]
 8004160:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004162:	f023 0302 	bic.w	r3, r3, #2
 8004166:	64d3      	str	r3, [r2, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004168:	6822      	ldr	r2, [r4, #0]
 800416a:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800416c:	69e3      	ldr	r3, [r4, #28]
 800416e:	6960      	ldr	r0, [r4, #20]
 8004170:	4303      	orrs	r3, r0
 8004172:	430b      	orrs	r3, r1
 8004174:	64d3      	str	r3, [r2, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004176:	6823      	ldr	r3, [r4, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f013 0f20 	tst.w	r3, #32
 800417e:	d029      	beq.n	80041d4 <HAL_RTC_Init+0x144>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	22ff      	movs	r2, #255	; 0xff
 8004184:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8004186:	2301      	movs	r3, #1
 8004188:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800418c:	4628      	mov	r0, r5
 800418e:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8004190:	21f0      	movs	r1, #240	; 0xf0
 8004192:	481a      	ldr	r0, [pc, #104]	; (80041fc <HAL_RTC_Init+0x16c>)
 8004194:	f7fd fcf8 	bl	8001b88 <assert_failed>
 8004198:	e78b      	b.n	80040b2 <HAL_RTC_Init+0x22>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 800419a:	21f1      	movs	r1, #241	; 0xf1
 800419c:	4817      	ldr	r0, [pc, #92]	; (80041fc <HAL_RTC_Init+0x16c>)
 800419e:	f7fd fcf3 	bl	8001b88 <assert_failed>
 80041a2:	e789      	b.n	80040b8 <HAL_RTC_Init+0x28>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 80041a4:	21f2      	movs	r1, #242	; 0xf2
 80041a6:	4815      	ldr	r0, [pc, #84]	; (80041fc <HAL_RTC_Init+0x16c>)
 80041a8:	f7fd fcee 	bl	8001b88 <assert_failed>
 80041ac:	e788      	b.n	80040c0 <HAL_RTC_Init+0x30>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 80041ae:	21f6      	movs	r1, #246	; 0xf6
 80041b0:	4812      	ldr	r0, [pc, #72]	; (80041fc <HAL_RTC_Init+0x16c>)
 80041b2:	f7fd fce9 	bl	8001b88 <assert_failed>
 80041b6:	e7a1      	b.n	80040fc <HAL_RTC_Init+0x6c>
    hrtc->Lock = HAL_UNLOCKED;
 80041b8:	f884 3020 	strb.w	r3, [r4, #32]
    HAL_RTC_MspInit(hrtc);
 80041bc:	4620      	mov	r0, r4
 80041be:	f7fd fd99 	bl	8001cf4 <HAL_RTC_MspInit>
 80041c2:	e79f      	b.n	8004104 <HAL_RTC_Init+0x74>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	22ff      	movs	r2, #255	; 0xff
 80041c8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80041ca:	2304      	movs	r3, #4
 80041cc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    return HAL_ERROR;
 80041d0:	2501      	movs	r5, #1
 80041d2:	e7db      	b.n	800418c <HAL_RTC_Init+0xfc>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80041d4:	4620      	mov	r0, r4
 80041d6:	f7ff ff23 	bl	8004020 <HAL_RTC_WaitForSynchro>
 80041da:	2800      	cmp	r0, #0
 80041dc:	d0d0      	beq.n	8004180 <HAL_RTC_Init+0xf0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041de:	6823      	ldr	r3, [r4, #0]
 80041e0:	22ff      	movs	r2, #255	; 0xff
 80041e2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80041e4:	2304      	movs	r3, #4
 80041e6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 80041ea:	2300      	movs	r3, #0
 80041ec:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 80041f0:	2501      	movs	r5, #1
 80041f2:	e7cb      	b.n	800418c <HAL_RTC_Init+0xfc>
    return HAL_ERROR;
 80041f4:	2501      	movs	r5, #1
 80041f6:	e7c9      	b.n	800418c <HAL_RTC_Init+0xfc>
 80041f8:	40002800 	.word	0x40002800
 80041fc:	08009ba0 	.word	0x08009ba0

08004200 <RTC_ByteToBcd2>:
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
  uint8_t Param = Value;

  while (Param >= 10U)
 8004200:	2809      	cmp	r0, #9
 8004202:	d909      	bls.n	8004218 <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0U;
 8004204:	2300      	movs	r3, #0
  {
    bcdhigh++;
 8004206:	3301      	adds	r3, #1
    Param -= 10U;
 8004208:	380a      	subs	r0, #10
 800420a:	b2c0      	uxtb	r0, r0
  while (Param >= 10U)
 800420c:	2809      	cmp	r0, #9
 800420e:	d8fa      	bhi.n	8004206 <RTC_ByteToBcd2+0x6>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8004210:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8004214:	b2c0      	uxtb	r0, r0
 8004216:	4770      	bx	lr
  uint32_t bcdhigh = 0U;
 8004218:	2300      	movs	r3, #0
 800421a:	e7f9      	b.n	8004210 <RTC_ByteToBcd2+0x10>

0800421c <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800421c:	0903      	lsrs	r3, r0, #4
 800421e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004222:	f000 000f 	and.w	r0, r0, #15
 8004226:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800422a:	b2c0      	uxtb	r0, r0
 800422c:	4770      	bx	lr
	...

08004230 <HAL_RTC_SetTime>:
{
 8004230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004234:	4604      	mov	r4, r0
 8004236:	460d      	mov	r5, r1
  assert_param(IS_RTC_FORMAT(Format));
 8004238:	2a01      	cmp	r2, #1
 800423a:	d81f      	bhi.n	800427c <HAL_RTC_SetTime+0x4c>
  __HAL_LOCK(hrtc);
 800423c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8004240:	2b01      	cmp	r3, #1
 8004242:	f000 80fb 	beq.w	800443c <HAL_RTC_SetTime+0x20c>
 8004246:	2301      	movs	r3, #1
 8004248:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800424c:	2302      	movs	r3, #2
 800424e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  if (Format == RTC_FORMAT_BIN)
 8004252:	bb1a      	cbnz	r2, 800429c <HAL_RTC_SetTime+0x6c>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004254:	6803      	ldr	r3, [r0, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f013 0f40 	tst.w	r3, #64	; 0x40
 800425c:	d03a      	beq.n	80042d4 <HAL_RTC_SetTime+0xa4>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 800425e:	780b      	ldrb	r3, [r1, #0]
 8004260:	3b01      	subs	r3, #1
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b0b      	cmp	r3, #11
 8004266:	d82f      	bhi.n	80042c8 <HAL_RTC_SetTime+0x98>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8004268:	78eb      	ldrb	r3, [r5, #3]
 800426a:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 800426e:	d036      	beq.n	80042de <HAL_RTC_SetTime+0xae>
 8004270:	f240 21ff 	movw	r1, #767	; 0x2ff
 8004274:	4872      	ldr	r0, [pc, #456]	; (8004440 <HAL_RTC_SetTime+0x210>)
 8004276:	f7fd fc87 	bl	8001b88 <assert_failed>
 800427a:	e030      	b.n	80042de <HAL_RTC_SetTime+0xae>
  assert_param(IS_RTC_FORMAT(Format));
 800427c:	f240 21f3 	movw	r1, #755	; 0x2f3
 8004280:	486f      	ldr	r0, [pc, #444]	; (8004440 <HAL_RTC_SetTime+0x210>)
 8004282:	f7fd fc81 	bl	8001b88 <assert_failed>
  __HAL_LOCK(hrtc);
 8004286:	f894 3020 	ldrb.w	r3, [r4, #32]
 800428a:	2b01      	cmp	r3, #1
 800428c:	f000 80d4 	beq.w	8004438 <HAL_RTC_SetTime+0x208>
 8004290:	2301      	movs	r3, #1
 8004292:	f884 3020 	strb.w	r3, [r4, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004296:	2302      	movs	r3, #2
 8004298:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800429c:	6823      	ldr	r3, [r4, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80042a4:	d07f      	beq.n	80043a6 <HAL_RTC_SetTime+0x176>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 80042a6:	7828      	ldrb	r0, [r5, #0]
 80042a8:	f7ff ffb8 	bl	800421c <RTC_Bcd2ToByte>
 80042ac:	3801      	subs	r0, #1
 80042ae:	b2c0      	uxtb	r0, r0
 80042b0:	280b      	cmp	r0, #11
 80042b2:	d872      	bhi.n	800439a <HAL_RTC_SetTime+0x16a>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 80042b4:	78eb      	ldrb	r3, [r5, #3]
 80042b6:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 80042ba:	d07b      	beq.n	80043b4 <HAL_RTC_SetTime+0x184>
 80042bc:	f240 3113 	movw	r1, #787	; 0x313
 80042c0:	485f      	ldr	r0, [pc, #380]	; (8004440 <HAL_RTC_SetTime+0x210>)
 80042c2:	f7fd fc61 	bl	8001b88 <assert_failed>
 80042c6:	e075      	b.n	80043b4 <HAL_RTC_SetTime+0x184>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 80042c8:	f240 21fe 	movw	r1, #766	; 0x2fe
 80042cc:	485c      	ldr	r0, [pc, #368]	; (8004440 <HAL_RTC_SetTime+0x210>)
 80042ce:	f7fd fc5b 	bl	8001b88 <assert_failed>
 80042d2:	e7c9      	b.n	8004268 <HAL_RTC_SetTime+0x38>
      sTime->TimeFormat = 0x00U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	70cb      	strb	r3, [r1, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 80042d8:	780b      	ldrb	r3, [r1, #0]
 80042da:	2b17      	cmp	r3, #23
 80042dc:	d84b      	bhi.n	8004376 <HAL_RTC_SetTime+0x146>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80042de:	786b      	ldrb	r3, [r5, #1]
 80042e0:	2b3b      	cmp	r3, #59	; 0x3b
 80042e2:	d84e      	bhi.n	8004382 <HAL_RTC_SetTime+0x152>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 80042e4:	78ab      	ldrb	r3, [r5, #2]
 80042e6:	2b3b      	cmp	r3, #59	; 0x3b
 80042e8:	d851      	bhi.n	800438e <HAL_RTC_SetTime+0x15e>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80042ea:	7828      	ldrb	r0, [r5, #0]
 80042ec:	f7ff ff88 	bl	8004200 <RTC_ByteToBcd2>
 80042f0:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80042f2:	7868      	ldrb	r0, [r5, #1]
 80042f4:	f7ff ff84 	bl	8004200 <RTC_ByteToBcd2>
 80042f8:	4607      	mov	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80042fa:	78a8      	ldrb	r0, [r5, #2]
 80042fc:	f7ff ff80 	bl	8004200 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004300:	78ee      	ldrb	r6, [r5, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004302:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8004306:	ea46 4608 	orr.w	r6, r6, r8, lsl #16
 800430a:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800430e:	6823      	ldr	r3, [r4, #0]
 8004310:	22ca      	movs	r2, #202	; 0xca
 8004312:	625a      	str	r2, [r3, #36]	; 0x24
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	2253      	movs	r2, #83	; 0x53
 8004318:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800431a:	4620      	mov	r0, r4
 800431c:	f7ff fe99 	bl	8004052 <RTC_EnterInitMode>
 8004320:	4607      	mov	r7, r0
 8004322:	2800      	cmp	r0, #0
 8004324:	d16d      	bne.n	8004402 <HAL_RTC_SetTime+0x1d2>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004326:	6823      	ldr	r3, [r4, #0]
 8004328:	f006 367f 	and.w	r6, r6, #2139062143	; 0x7f7f7f7f
 800432c:	f026 46fe 	bic.w	r6, r6, #2130706432	; 0x7f000000
 8004330:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004332:	6822      	ldr	r2, [r4, #0]
 8004334:	6893      	ldr	r3, [r2, #8]
 8004336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800433a:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800433c:	6822      	ldr	r2, [r4, #0]
 800433e:	6891      	ldr	r1, [r2, #8]
 8004340:	68eb      	ldr	r3, [r5, #12]
 8004342:	6928      	ldr	r0, [r5, #16]
 8004344:	4303      	orrs	r3, r0
 8004346:	430b      	orrs	r3, r1
 8004348:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800434a:	6822      	ldr	r2, [r4, #0]
 800434c:	68d3      	ldr	r3, [r2, #12]
 800434e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004352:	60d3      	str	r3, [r2, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004354:	6823      	ldr	r3, [r4, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f013 0f20 	tst.w	r3, #32
 800435c:	d05c      	beq.n	8004418 <HAL_RTC_SetTime+0x1e8>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800435e:	6823      	ldr	r3, [r4, #0]
 8004360:	22ff      	movs	r2, #255	; 0xff
 8004362:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8004364:	2301      	movs	r3, #1
 8004366:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 800436a:	2300      	movs	r3, #0
 800436c:	f884 3020 	strb.w	r3, [r4, #32]
}
 8004370:	4638      	mov	r0, r7
 8004372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8004376:	f44f 7141 	mov.w	r1, #772	; 0x304
 800437a:	4831      	ldr	r0, [pc, #196]	; (8004440 <HAL_RTC_SetTime+0x210>)
 800437c:	f7fd fc04 	bl	8001b88 <assert_failed>
 8004380:	e7ad      	b.n	80042de <HAL_RTC_SetTime+0xae>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8004382:	f240 3106 	movw	r1, #774	; 0x306
 8004386:	482e      	ldr	r0, [pc, #184]	; (8004440 <HAL_RTC_SetTime+0x210>)
 8004388:	f7fd fbfe 	bl	8001b88 <assert_failed>
 800438c:	e7aa      	b.n	80042e4 <HAL_RTC_SetTime+0xb4>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 800438e:	f240 3107 	movw	r1, #775	; 0x307
 8004392:	482b      	ldr	r0, [pc, #172]	; (8004440 <HAL_RTC_SetTime+0x210>)
 8004394:	f7fd fbf8 	bl	8001b88 <assert_failed>
 8004398:	e7a7      	b.n	80042ea <HAL_RTC_SetTime+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 800439a:	f240 3112 	movw	r1, #786	; 0x312
 800439e:	4828      	ldr	r0, [pc, #160]	; (8004440 <HAL_RTC_SetTime+0x210>)
 80043a0:	f7fd fbf2 	bl	8001b88 <assert_failed>
 80043a4:	e786      	b.n	80042b4 <HAL_RTC_SetTime+0x84>
      sTime->TimeFormat = 0x00U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	70eb      	strb	r3, [r5, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 80043aa:	7828      	ldrb	r0, [r5, #0]
 80043ac:	f7ff ff36 	bl	800421c <RTC_Bcd2ToByte>
 80043b0:	2817      	cmp	r0, #23
 80043b2:	d814      	bhi.n	80043de <HAL_RTC_SetTime+0x1ae>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80043b4:	7868      	ldrb	r0, [r5, #1]
 80043b6:	f7ff ff31 	bl	800421c <RTC_Bcd2ToByte>
 80043ba:	283b      	cmp	r0, #59	; 0x3b
 80043bc:	d815      	bhi.n	80043ea <HAL_RTC_SetTime+0x1ba>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80043be:	78a8      	ldrb	r0, [r5, #2]
 80043c0:	f7ff ff2c 	bl	800421c <RTC_Bcd2ToByte>
 80043c4:	283b      	cmp	r0, #59	; 0x3b
 80043c6:	d816      	bhi.n	80043f6 <HAL_RTC_SetTime+0x1c6>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80043c8:	782e      	ldrb	r6, [r5, #0]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80043ca:	7868      	ldrb	r0, [r5, #1]
 80043cc:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80043ce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
              ((uint32_t)sTime->Seconds) | \
 80043d2:	78ae      	ldrb	r6, [r5, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80043d4:	4330      	orrs	r0, r6
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80043d6:	78ee      	ldrb	r6, [r5, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80043d8:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80043dc:	e797      	b.n	800430e <HAL_RTC_SetTime+0xde>
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 80043de:	f44f 7146 	mov.w	r1, #792	; 0x318
 80043e2:	4817      	ldr	r0, [pc, #92]	; (8004440 <HAL_RTC_SetTime+0x210>)
 80043e4:	f7fd fbd0 	bl	8001b88 <assert_failed>
 80043e8:	e7e4      	b.n	80043b4 <HAL_RTC_SetTime+0x184>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80043ea:	f240 311a 	movw	r1, #794	; 0x31a
 80043ee:	4814      	ldr	r0, [pc, #80]	; (8004440 <HAL_RTC_SetTime+0x210>)
 80043f0:	f7fd fbca 	bl	8001b88 <assert_failed>
 80043f4:	e7e3      	b.n	80043be <HAL_RTC_SetTime+0x18e>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80043f6:	f240 311b 	movw	r1, #795	; 0x31b
 80043fa:	4811      	ldr	r0, [pc, #68]	; (8004440 <HAL_RTC_SetTime+0x210>)
 80043fc:	f7fd fbc4 	bl	8001b88 <assert_failed>
 8004400:	e7e2      	b.n	80043c8 <HAL_RTC_SetTime+0x198>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	22ff      	movs	r2, #255	; 0xff
 8004406:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004408:	2304      	movs	r3, #4
 800440a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 800440e:	2300      	movs	r3, #0
 8004410:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8004414:	2701      	movs	r7, #1
 8004416:	e7ab      	b.n	8004370 <HAL_RTC_SetTime+0x140>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004418:	4620      	mov	r0, r4
 800441a:	f7ff fe01 	bl	8004020 <HAL_RTC_WaitForSynchro>
 800441e:	2800      	cmp	r0, #0
 8004420:	d09d      	beq.n	800435e <HAL_RTC_SetTime+0x12e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	22ff      	movs	r2, #255	; 0xff
 8004426:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004428:	2304      	movs	r3, #4
 800442a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 800442e:	2300      	movs	r3, #0
 8004430:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8004434:	2701      	movs	r7, #1
 8004436:	e79b      	b.n	8004370 <HAL_RTC_SetTime+0x140>
  __HAL_LOCK(hrtc);
 8004438:	2702      	movs	r7, #2
 800443a:	e799      	b.n	8004370 <HAL_RTC_SetTime+0x140>
 800443c:	2702      	movs	r7, #2
 800443e:	e797      	b.n	8004370 <HAL_RTC_SetTime+0x140>
 8004440:	08009ba0 	.word	0x08009ba0

08004444 <HAL_RTC_GetTime>:
{
 8004444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004446:	4605      	mov	r5, r0
 8004448:	460c      	mov	r4, r1
 800444a:	4616      	mov	r6, r2
  assert_param(IS_RTC_FORMAT(Format));
 800444c:	2a01      	cmp	r2, #1
 800444e:	d825      	bhi.n	800449c <HAL_RTC_GetTime+0x58>
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004450:	682b      	ldr	r3, [r5, #0]
 8004452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004454:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004456:	682b      	ldr	r3, [r5, #0]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800445e:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004460:	682b      	ldr	r3, [r5, #0]
 8004462:	681d      	ldr	r5, [r3, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004464:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8004468:	f3c5 4005 	ubfx	r0, r5, #16, #6
 800446c:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800446e:	f3c5 2706 	ubfx	r7, r5, #8, #7
 8004472:	7067      	strb	r7, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004474:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 8004478:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800447a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800447e:	70e3      	strb	r3, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 8004480:	b956      	cbnz	r6, 8004498 <HAL_RTC_GetTime+0x54>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004482:	f7ff fecb 	bl	800421c <RTC_Bcd2ToByte>
 8004486:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004488:	4638      	mov	r0, r7
 800448a:	f7ff fec7 	bl	800421c <RTC_Bcd2ToByte>
 800448e:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004490:	4628      	mov	r0, r5
 8004492:	f7ff fec3 	bl	800421c <RTC_Bcd2ToByte>
 8004496:	70a0      	strb	r0, [r4, #2]
}
 8004498:	2000      	movs	r0, #0
 800449a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_RTC_FORMAT(Format));
 800449c:	f240 3177 	movw	r1, #887	; 0x377
 80044a0:	4801      	ldr	r0, [pc, #4]	; (80044a8 <HAL_RTC_GetTime+0x64>)
 80044a2:	f7fd fb71 	bl	8001b88 <assert_failed>
 80044a6:	e7d3      	b.n	8004450 <HAL_RTC_GetTime+0xc>
 80044a8:	08009ba0 	.word	0x08009ba0

080044ac <HAL_RTC_SetDate>:
{
 80044ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ae:	4604      	mov	r4, r0
 80044b0:	460d      	mov	r5, r1
  assert_param(IS_RTC_FORMAT(Format));
 80044b2:	2a01      	cmp	r2, #1
 80044b4:	d860      	bhi.n	8004578 <HAL_RTC_SetDate+0xcc>
  __HAL_LOCK(hrtc);
 80044b6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	f000 80cf 	beq.w	800465e <HAL_RTC_SetDate+0x1b2>
 80044c0:	2301      	movs	r3, #1
 80044c2:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80044c6:	2302      	movs	r3, #2
 80044c8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80044cc:	2a00      	cmp	r2, #0
 80044ce:	d162      	bne.n	8004596 <HAL_RTC_SetDate+0xea>
 80044d0:	784b      	ldrb	r3, [r1, #1]
 80044d2:	f013 0f10 	tst.w	r3, #16
 80044d6:	d003      	beq.n	80044e0 <HAL_RTC_SetDate+0x34>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80044d8:	f023 0310 	bic.w	r3, r3, #16
 80044dc:	330a      	adds	r3, #10
 80044de:	704b      	strb	r3, [r1, #1]
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 80044e0:	782b      	ldrb	r3, [r5, #0]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b06      	cmp	r3, #6
 80044e8:	f200 80bb 	bhi.w	8004662 <HAL_RTC_SetDate+0x1b6>
    assert_param(IS_RTC_YEAR(sDate->Year));
 80044ec:	78eb      	ldrb	r3, [r5, #3]
 80044ee:	2b63      	cmp	r3, #99	; 0x63
 80044f0:	d874      	bhi.n	80045dc <HAL_RTC_SetDate+0x130>
    assert_param(IS_RTC_MONTH(sDate->Month));
 80044f2:	786b      	ldrb	r3, [r5, #1]
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b0b      	cmp	r3, #11
 80044fa:	d875      	bhi.n	80045e8 <HAL_RTC_SetDate+0x13c>
    assert_param(IS_RTC_DATE(sDate->Date));
 80044fc:	78ab      	ldrb	r3, [r5, #2]
 80044fe:	3b01      	subs	r3, #1
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b1e      	cmp	r3, #30
 8004504:	d876      	bhi.n	80045f4 <HAL_RTC_SetDate+0x148>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004506:	78e8      	ldrb	r0, [r5, #3]
 8004508:	f7ff fe7a 	bl	8004200 <RTC_ByteToBcd2>
 800450c:	4607      	mov	r7, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800450e:	7868      	ldrb	r0, [r5, #1]
 8004510:	f7ff fe76 	bl	8004200 <RTC_ByteToBcd2>
 8004514:	4606      	mov	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004516:	78a8      	ldrb	r0, [r5, #2]
 8004518:	f7ff fe72 	bl	8004200 <RTC_ByteToBcd2>
                  ((uint32_t)sDate->WeekDay << 13U));
 800451c:	782d      	ldrb	r5, [r5, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800451e:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 8004522:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8004526:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800452a:	6823      	ldr	r3, [r4, #0]
 800452c:	22ca      	movs	r2, #202	; 0xca
 800452e:	625a      	str	r2, [r3, #36]	; 0x24
 8004530:	6823      	ldr	r3, [r4, #0]
 8004532:	2253      	movs	r2, #83	; 0x53
 8004534:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004536:	4620      	mov	r0, r4
 8004538:	f7ff fd8b 	bl	8004052 <RTC_EnterInitMode>
 800453c:	4606      	mov	r6, r0
 800453e:	2800      	cmp	r0, #0
 8004540:	d170      	bne.n	8004624 <HAL_RTC_SetDate+0x178>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004542:	6823      	ldr	r3, [r4, #0]
 8004544:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8004548:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 800454c:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800454e:	6822      	ldr	r2, [r4, #0]
 8004550:	68d3      	ldr	r3, [r2, #12]
 8004552:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004556:	60d3      	str	r3, [r2, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004558:	6823      	ldr	r3, [r4, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f013 0f20 	tst.w	r3, #32
 8004560:	d06b      	beq.n	800463a <HAL_RTC_SetDate+0x18e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004562:	6823      	ldr	r3, [r4, #0]
 8004564:	22ff      	movs	r2, #255	; 0xff
 8004566:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8004568:	2301      	movs	r3, #1
 800456a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 800456e:	2300      	movs	r3, #0
 8004570:	f884 3020 	strb.w	r3, [r4, #32]
}
 8004574:	4630      	mov	r0, r6
 8004576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_RTC_FORMAT(Format));
 8004578:	f240 31a3 	movw	r1, #931	; 0x3a3
 800457c:	483f      	ldr	r0, [pc, #252]	; (800467c <HAL_RTC_SetDate+0x1d0>)
 800457e:	f7fd fb03 	bl	8001b88 <assert_failed>
  __HAL_LOCK(hrtc);
 8004582:	f894 3020 	ldrb.w	r3, [r4, #32]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d067      	beq.n	800465a <HAL_RTC_SetDate+0x1ae>
 800458a:	2301      	movs	r3, #1
 800458c:	f884 3020 	strb.w	r3, [r4, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004590:	2302      	movs	r3, #2
 8004592:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8004596:	782b      	ldrb	r3, [r5, #0]
 8004598:	3b01      	subs	r3, #1
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b06      	cmp	r3, #6
 800459e:	d866      	bhi.n	800466e <HAL_RTC_SetDate+0x1c2>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 80045a0:	78e8      	ldrb	r0, [r5, #3]
 80045a2:	f7ff fe3b 	bl	800421c <RTC_Bcd2ToByte>
 80045a6:	2863      	cmp	r0, #99	; 0x63
 80045a8:	d82a      	bhi.n	8004600 <HAL_RTC_SetDate+0x154>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 80045aa:	7868      	ldrb	r0, [r5, #1]
 80045ac:	f7ff fe36 	bl	800421c <RTC_Bcd2ToByte>
 80045b0:	3801      	subs	r0, #1
 80045b2:	b2c0      	uxtb	r0, r0
 80045b4:	280b      	cmp	r0, #11
 80045b6:	d829      	bhi.n	800460c <HAL_RTC_SetDate+0x160>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 80045b8:	78a8      	ldrb	r0, [r5, #2]
 80045ba:	f7ff fe2f 	bl	800421c <RTC_Bcd2ToByte>
 80045be:	3801      	subs	r0, #1
 80045c0:	b2c0      	uxtb	r0, r0
 80045c2:	281e      	cmp	r0, #30
 80045c4:	d828      	bhi.n	8004618 <HAL_RTC_SetDate+0x16c>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80045c6:	78eb      	ldrb	r3, [r5, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 80045c8:	7868      	ldrb	r0, [r5, #1]
 80045ca:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80045cc:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
                  ((uint32_t)sDate->Date) | \
 80045d0:	78ab      	ldrb	r3, [r5, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80045d2:	4318      	orrs	r0, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80045d4:	782d      	ldrb	r5, [r5, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80045d6:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 80045da:	e7a6      	b.n	800452a <HAL_RTC_SetDate+0x7e>
    assert_param(IS_RTC_YEAR(sDate->Year));
 80045dc:	f240 31b3 	movw	r1, #947	; 0x3b3
 80045e0:	4826      	ldr	r0, [pc, #152]	; (800467c <HAL_RTC_SetDate+0x1d0>)
 80045e2:	f7fd fad1 	bl	8001b88 <assert_failed>
 80045e6:	e784      	b.n	80044f2 <HAL_RTC_SetDate+0x46>
    assert_param(IS_RTC_MONTH(sDate->Month));
 80045e8:	f44f 716d 	mov.w	r1, #948	; 0x3b4
 80045ec:	4823      	ldr	r0, [pc, #140]	; (800467c <HAL_RTC_SetDate+0x1d0>)
 80045ee:	f7fd facb 	bl	8001b88 <assert_failed>
 80045f2:	e783      	b.n	80044fc <HAL_RTC_SetDate+0x50>
    assert_param(IS_RTC_DATE(sDate->Date));
 80045f4:	f240 31b5 	movw	r1, #949	; 0x3b5
 80045f8:	4820      	ldr	r0, [pc, #128]	; (800467c <HAL_RTC_SetDate+0x1d0>)
 80045fa:	f7fd fac5 	bl	8001b88 <assert_failed>
 80045fe:	e782      	b.n	8004506 <HAL_RTC_SetDate+0x5a>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8004600:	f240 31be 	movw	r1, #958	; 0x3be
 8004604:	481d      	ldr	r0, [pc, #116]	; (800467c <HAL_RTC_SetDate+0x1d0>)
 8004606:	f7fd fabf 	bl	8001b88 <assert_failed>
 800460a:	e7ce      	b.n	80045aa <HAL_RTC_SetDate+0xfe>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 800460c:	f240 31bf 	movw	r1, #959	; 0x3bf
 8004610:	481a      	ldr	r0, [pc, #104]	; (800467c <HAL_RTC_SetDate+0x1d0>)
 8004612:	f7fd fab9 	bl	8001b88 <assert_failed>
 8004616:	e7cf      	b.n	80045b8 <HAL_RTC_SetDate+0x10c>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8004618:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800461c:	4817      	ldr	r0, [pc, #92]	; (800467c <HAL_RTC_SetDate+0x1d0>)
 800461e:	f7fd fab3 	bl	8001b88 <assert_failed>
 8004622:	e7d0      	b.n	80045c6 <HAL_RTC_SetDate+0x11a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004624:	6823      	ldr	r3, [r4, #0]
 8004626:	22ff      	movs	r2, #255	; 0xff
 8004628:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800462a:	2304      	movs	r3, #4
 800462c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8004630:	2300      	movs	r3, #0
 8004632:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8004636:	2601      	movs	r6, #1
 8004638:	e79c      	b.n	8004574 <HAL_RTC_SetDate+0xc8>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800463a:	4620      	mov	r0, r4
 800463c:	f7ff fcf0 	bl	8004020 <HAL_RTC_WaitForSynchro>
 8004640:	2800      	cmp	r0, #0
 8004642:	d08e      	beq.n	8004562 <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004644:	6823      	ldr	r3, [r4, #0]
 8004646:	22ff      	movs	r2, #255	; 0xff
 8004648:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800464a:	2304      	movs	r3, #4
 800464c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8004650:	2300      	movs	r3, #0
 8004652:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8004656:	2601      	movs	r6, #1
 8004658:	e78c      	b.n	8004574 <HAL_RTC_SetDate+0xc8>
  __HAL_LOCK(hrtc);
 800465a:	2602      	movs	r6, #2
 800465c:	e78a      	b.n	8004574 <HAL_RTC_SetDate+0xc8>
 800465e:	2602      	movs	r6, #2
 8004660:	e788      	b.n	8004574 <HAL_RTC_SetDate+0xc8>
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8004662:	f240 31af 	movw	r1, #943	; 0x3af
 8004666:	4805      	ldr	r0, [pc, #20]	; (800467c <HAL_RTC_SetDate+0x1d0>)
 8004668:	f7fd fa8e 	bl	8001b88 <assert_failed>
  if (Format == RTC_FORMAT_BIN)
 800466c:	e73e      	b.n	80044ec <HAL_RTC_SetDate+0x40>
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 800466e:	f240 31af 	movw	r1, #943	; 0x3af
 8004672:	4802      	ldr	r0, [pc, #8]	; (800467c <HAL_RTC_SetDate+0x1d0>)
 8004674:	f7fd fa88 	bl	8001b88 <assert_failed>
  if (Format == RTC_FORMAT_BIN)
 8004678:	e792      	b.n	80045a0 <HAL_RTC_SetDate+0xf4>
 800467a:	bf00      	nop
 800467c:	08009ba0 	.word	0x08009ba0

08004680 <HAL_RTC_GetDate>:
{
 8004680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004682:	4606      	mov	r6, r0
 8004684:	460c      	mov	r4, r1
 8004686:	4615      	mov	r5, r2
  assert_param(IS_RTC_FORMAT(Format));
 8004688:	2a01      	cmp	r2, #1
 800468a:	d81b      	bhi.n	80046c4 <HAL_RTC_GetDate+0x44>
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800468c:	6833      	ldr	r3, [r6, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004690:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8004694:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004696:	f3c3 2704 	ubfx	r7, r3, #8, #5
 800469a:	7067      	strb	r7, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800469c:	f003 063f 	and.w	r6, r3, #63	; 0x3f
 80046a0:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80046a2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80046a6:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 80046a8:	b955      	cbnz	r5, 80046c0 <HAL_RTC_GetDate+0x40>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80046aa:	f7ff fdb7 	bl	800421c <RTC_Bcd2ToByte>
 80046ae:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80046b0:	4638      	mov	r0, r7
 80046b2:	f7ff fdb3 	bl	800421c <RTC_Bcd2ToByte>
 80046b6:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80046b8:	4630      	mov	r0, r6
 80046ba:	f7ff fdaf 	bl	800421c <RTC_Bcd2ToByte>
 80046be:	70a0      	strb	r0, [r4, #2]
}
 80046c0:	2000      	movs	r0, #0
 80046c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_RTC_FORMAT(Format));
 80046c4:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80046c8:	4801      	ldr	r0, [pc, #4]	; (80046d0 <HAL_RTC_GetDate+0x50>)
 80046ca:	f7fd fa5d 	bl	8001b88 <assert_failed>
 80046ce:	e7dd      	b.n	800468c <HAL_RTC_GetDate+0xc>
 80046d0:	08009ba0 	.word	0x08009ba0

080046d4 <HAL_RTC_SetAlarm_IT>:
{
 80046d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046d8:	4604      	mov	r4, r0
 80046da:	460d      	mov	r5, r1
 80046dc:	4616      	mov	r6, r2
  assert_param(IS_RTC_FORMAT(Format));
 80046de:	2a01      	cmp	r2, #1
 80046e0:	d857      	bhi.n	8004792 <HAL_RTC_SetAlarm_IT+0xbe>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 80046e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80046e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046e8:	d002      	beq.n	80046f0 <HAL_RTC_SetAlarm_IT+0x1c>
 80046ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046ee:	d156      	bne.n	800479e <HAL_RTC_SetAlarm_IT+0xca>
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 80046f0:	696b      	ldr	r3, [r5, #20]
 80046f2:	f013 3f7f 	tst.w	r3, #2139062143	; 0x7f7f7f7f
 80046f6:	d158      	bne.n	80047aa <HAL_RTC_SetAlarm_IT+0xd6>
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 80046f8:	69eb      	ldr	r3, [r5, #28]
 80046fa:	f033 4380 	bics.w	r3, r3, #1073741824	; 0x40000000
 80046fe:	d004      	beq.n	800470a <HAL_RTC_SetAlarm_IT+0x36>
 8004700:	f240 5142 	movw	r1, #1346	; 0x542
 8004704:	48ad      	ldr	r0, [pc, #692]	; (80049bc <HAL_RTC_SetAlarm_IT+0x2e8>)
 8004706:	f7fd fa3f 	bl	8001b88 <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 800470a:	686b      	ldr	r3, [r5, #4]
 800470c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004710:	d251      	bcs.n	80047b6 <HAL_RTC_SetAlarm_IT+0xe2>
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 8004712:	69ab      	ldr	r3, [r5, #24]
 8004714:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 8004718:	d019      	beq.n	800474e <HAL_RTC_SetAlarm_IT+0x7a>
 800471a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800471e:	d016      	beq.n	800474e <HAL_RTC_SetAlarm_IT+0x7a>
 8004720:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004724:	d013      	beq.n	800474e <HAL_RTC_SetAlarm_IT+0x7a>
 8004726:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800472a:	d010      	beq.n	800474e <HAL_RTC_SetAlarm_IT+0x7a>
 800472c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004730:	d00d      	beq.n	800474e <HAL_RTC_SetAlarm_IT+0x7a>
 8004732:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8004736:	d00a      	beq.n	800474e <HAL_RTC_SetAlarm_IT+0x7a>
 8004738:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800473c:	d007      	beq.n	800474e <HAL_RTC_SetAlarm_IT+0x7a>
 800473e:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8004742:	d004      	beq.n	800474e <HAL_RTC_SetAlarm_IT+0x7a>
 8004744:	f240 5144 	movw	r1, #1348	; 0x544
 8004748:	489c      	ldr	r0, [pc, #624]	; (80049bc <HAL_RTC_SetAlarm_IT+0x2e8>)
 800474a:	f7fd fa1d 	bl	8001b88 <assert_failed>
  __HAL_LOCK(hrtc);
 800474e:	f894 3020 	ldrb.w	r3, [r4, #32]
 8004752:	2b01      	cmp	r3, #1
 8004754:	f000 8188 	beq.w	8004a68 <HAL_RTC_SetAlarm_IT+0x394>
 8004758:	2301      	movs	r3, #1
 800475a:	f884 3020 	strb.w	r3, [r4, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800475e:	2302      	movs	r3, #2
 8004760:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  if (Format == RTC_FORMAT_BIN)
 8004764:	2e00      	cmp	r6, #0
 8004766:	f040 8088 	bne.w	800487a <HAL_RTC_SetAlarm_IT+0x1a6>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004772:	d02c      	beq.n	80047ce <HAL_RTC_SetAlarm_IT+0xfa>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 8004774:	782b      	ldrb	r3, [r5, #0]
 8004776:	3b01      	subs	r3, #1
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b0b      	cmp	r3, #11
 800477c:	d821      	bhi.n	80047c2 <HAL_RTC_SetAlarm_IT+0xee>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 800477e:	78eb      	ldrb	r3, [r5, #3]
 8004780:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 8004784:	d028      	beq.n	80047d8 <HAL_RTC_SetAlarm_IT+0x104>
 8004786:	f44f 61aa 	mov.w	r1, #1360	; 0x550
 800478a:	488c      	ldr	r0, [pc, #560]	; (80049bc <HAL_RTC_SetAlarm_IT+0x2e8>)
 800478c:	f7fd f9fc 	bl	8001b88 <assert_failed>
 8004790:	e022      	b.n	80047d8 <HAL_RTC_SetAlarm_IT+0x104>
  assert_param(IS_RTC_FORMAT(Format));
 8004792:	f240 513f 	movw	r1, #1343	; 0x53f
 8004796:	4889      	ldr	r0, [pc, #548]	; (80049bc <HAL_RTC_SetAlarm_IT+0x2e8>)
 8004798:	f7fd f9f6 	bl	8001b88 <assert_failed>
 800479c:	e7a1      	b.n	80046e2 <HAL_RTC_SetAlarm_IT+0xe>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 800479e:	f44f 61a8 	mov.w	r1, #1344	; 0x540
 80047a2:	4886      	ldr	r0, [pc, #536]	; (80049bc <HAL_RTC_SetAlarm_IT+0x2e8>)
 80047a4:	f7fd f9f0 	bl	8001b88 <assert_failed>
 80047a8:	e7a2      	b.n	80046f0 <HAL_RTC_SetAlarm_IT+0x1c>
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 80047aa:	f240 5141 	movw	r1, #1345	; 0x541
 80047ae:	4883      	ldr	r0, [pc, #524]	; (80049bc <HAL_RTC_SetAlarm_IT+0x2e8>)
 80047b0:	f7fd f9ea 	bl	8001b88 <assert_failed>
 80047b4:	e7a0      	b.n	80046f8 <HAL_RTC_SetAlarm_IT+0x24>
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 80047b6:	f240 5143 	movw	r1, #1347	; 0x543
 80047ba:	4880      	ldr	r0, [pc, #512]	; (80049bc <HAL_RTC_SetAlarm_IT+0x2e8>)
 80047bc:	f7fd f9e4 	bl	8001b88 <assert_failed>
 80047c0:	e7a7      	b.n	8004712 <HAL_RTC_SetAlarm_IT+0x3e>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 80047c2:	f240 514f 	movw	r1, #1359	; 0x54f
 80047c6:	487d      	ldr	r0, [pc, #500]	; (80049bc <HAL_RTC_SetAlarm_IT+0x2e8>)
 80047c8:	f7fd f9de 	bl	8001b88 <assert_failed>
 80047cc:	e7d7      	b.n	800477e <HAL_RTC_SetAlarm_IT+0xaa>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	70eb      	strb	r3, [r5, #3]
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 80047d2:	782b      	ldrb	r3, [r5, #0]
 80047d4:	2b17      	cmp	r3, #23
 80047d6:	d82c      	bhi.n	8004832 <HAL_RTC_SetAlarm_IT+0x15e>
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 80047d8:	786b      	ldrb	r3, [r5, #1]
 80047da:	2b3b      	cmp	r3, #59	; 0x3b
 80047dc:	d82f      	bhi.n	800483e <HAL_RTC_SetAlarm_IT+0x16a>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 80047de:	78ab      	ldrb	r3, [r5, #2]
 80047e0:	2b3b      	cmp	r3, #59	; 0x3b
 80047e2:	d832      	bhi.n	800484a <HAL_RTC_SetAlarm_IT+0x176>
    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 80047e4:	69eb      	ldr	r3, [r5, #28]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d13b      	bne.n	8004862 <HAL_RTC_SetAlarm_IT+0x18e>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 80047ea:	f895 3020 	ldrb.w	r3, [r5, #32]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b1e      	cmp	r3, #30
 80047f4:	d82f      	bhi.n	8004856 <HAL_RTC_SetAlarm_IT+0x182>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80047f6:	7828      	ldrb	r0, [r5, #0]
 80047f8:	f7ff fd02 	bl	8004200 <RTC_ByteToBcd2>
 80047fc:	4680      	mov	r8, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80047fe:	7868      	ldrb	r0, [r5, #1]
 8004800:	f7ff fcfe 	bl	8004200 <RTC_ByteToBcd2>
 8004804:	4607      	mov	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004806:	78a8      	ldrb	r0, [r5, #2]
 8004808:	f7ff fcfa 	bl	8004200 <RTC_ByteToBcd2>
 800480c:	4606      	mov	r6, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800480e:	f895 0020 	ldrb.w	r0, [r5, #32]
 8004812:	f7ff fcf5 	bl	8004200 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004816:	69eb      	ldr	r3, [r5, #28]
 8004818:	696a      	ldr	r2, [r5, #20]
 800481a:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800481c:	78ea      	ldrb	r2, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800481e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004822:	431e      	orrs	r6, r3
 8004824:	ea46 4608 	orr.w	r6, r6, r8, lsl #16
 8004828:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
 800482c:	ea46 6600 	orr.w	r6, r6, r0, lsl #24
 8004830:	e06d      	b.n	800490e <HAL_RTC_SetAlarm_IT+0x23a>
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 8004832:	f240 5155 	movw	r1, #1365	; 0x555
 8004836:	4861      	ldr	r0, [pc, #388]	; (80049bc <HAL_RTC_SetAlarm_IT+0x2e8>)
 8004838:	f7fd f9a6 	bl	8001b88 <assert_failed>
 800483c:	e7cc      	b.n	80047d8 <HAL_RTC_SetAlarm_IT+0x104>
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 800483e:	f240 5157 	movw	r1, #1367	; 0x557
 8004842:	485e      	ldr	r0, [pc, #376]	; (80049bc <HAL_RTC_SetAlarm_IT+0x2e8>)
 8004844:	f7fd f9a0 	bl	8001b88 <assert_failed>
 8004848:	e7c9      	b.n	80047de <HAL_RTC_SetAlarm_IT+0x10a>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 800484a:	f44f 61ab 	mov.w	r1, #1368	; 0x558
 800484e:	485b      	ldr	r0, [pc, #364]	; (80049bc <HAL_RTC_SetAlarm_IT+0x2e8>)
 8004850:	f7fd f99a 	bl	8001b88 <assert_failed>
 8004854:	e7c6      	b.n	80047e4 <HAL_RTC_SetAlarm_IT+0x110>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 8004856:	f240 515c 	movw	r1, #1372	; 0x55c
 800485a:	4858      	ldr	r0, [pc, #352]	; (80049bc <HAL_RTC_SetAlarm_IT+0x2e8>)
 800485c:	f7fd f994 	bl	8001b88 <assert_failed>
 8004860:	e7c9      	b.n	80047f6 <HAL_RTC_SetAlarm_IT+0x122>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 8004862:	f895 3020 	ldrb.w	r3, [r5, #32]
 8004866:	3b01      	subs	r3, #1
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b06      	cmp	r3, #6
 800486c:	d9c3      	bls.n	80047f6 <HAL_RTC_SetAlarm_IT+0x122>
 800486e:	f44f 61ac 	mov.w	r1, #1376	; 0x560
 8004872:	4852      	ldr	r0, [pc, #328]	; (80049bc <HAL_RTC_SetAlarm_IT+0x2e8>)
 8004874:	f7fd f988 	bl	8001b88 <assert_failed>
 8004878:	e7bd      	b.n	80047f6 <HAL_RTC_SetAlarm_IT+0x122>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004882:	d016      	beq.n	80048b2 <HAL_RTC_SetAlarm_IT+0x1de>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8004884:	7828      	ldrb	r0, [r5, #0]
 8004886:	f7ff fcc9 	bl	800421c <RTC_Bcd2ToByte>
 800488a:	1e43      	subs	r3, r0, #1
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b0b      	cmp	r3, #11
 8004890:	d809      	bhi.n	80048a6 <HAL_RTC_SetAlarm_IT+0x1d2>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 8004892:	78eb      	ldrb	r3, [r5, #3]
 8004894:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 8004898:	d012      	beq.n	80048c0 <HAL_RTC_SetAlarm_IT+0x1ec>
 800489a:	f240 516f 	movw	r1, #1391	; 0x56f
 800489e:	4847      	ldr	r0, [pc, #284]	; (80049bc <HAL_RTC_SetAlarm_IT+0x2e8>)
 80048a0:	f7fd f972 	bl	8001b88 <assert_failed>
 80048a4:	e00c      	b.n	80048c0 <HAL_RTC_SetAlarm_IT+0x1ec>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 80048a6:	f240 516e 	movw	r1, #1390	; 0x56e
 80048aa:	4844      	ldr	r0, [pc, #272]	; (80049bc <HAL_RTC_SetAlarm_IT+0x2e8>)
 80048ac:	f7fd f96c 	bl	8001b88 <assert_failed>
 80048b0:	e7ef      	b.n	8004892 <HAL_RTC_SetAlarm_IT+0x1be>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	70eb      	strb	r3, [r5, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 80048b6:	7828      	ldrb	r0, [r5, #0]
 80048b8:	f7ff fcb0 	bl	800421c <RTC_Bcd2ToByte>
 80048bc:	2817      	cmp	r0, #23
 80048be:	d856      	bhi.n	800496e <HAL_RTC_SetAlarm_IT+0x29a>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 80048c0:	7868      	ldrb	r0, [r5, #1]
 80048c2:	f7ff fcab 	bl	800421c <RTC_Bcd2ToByte>
 80048c6:	283b      	cmp	r0, #59	; 0x3b
 80048c8:	d857      	bhi.n	800497a <HAL_RTC_SetAlarm_IT+0x2a6>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 80048ca:	78a8      	ldrb	r0, [r5, #2]
 80048cc:	f7ff fca6 	bl	800421c <RTC_Bcd2ToByte>
 80048d0:	283b      	cmp	r0, #59	; 0x3b
 80048d2:	d858      	bhi.n	8004986 <HAL_RTC_SetAlarm_IT+0x2b2>
    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 80048d4:	69eb      	ldr	r3, [r5, #28]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d161      	bne.n	800499e <HAL_RTC_SetAlarm_IT+0x2ca>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 80048da:	f895 0020 	ldrb.w	r0, [r5, #32]
 80048de:	f7ff fc9d 	bl	800421c <RTC_Bcd2ToByte>
 80048e2:	1e43      	subs	r3, r0, #1
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b1e      	cmp	r3, #30
 80048e8:	d853      	bhi.n	8004992 <HAL_RTC_SetAlarm_IT+0x2be>
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80048ea:	69eb      	ldr	r3, [r5, #28]
 80048ec:	696e      	ldr	r6, [r5, #20]
 80048ee:	431e      	orrs	r6, r3
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80048f0:	78ab      	ldrb	r3, [r5, #2]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80048f2:	431e      	orrs	r6, r3
 80048f4:	782b      	ldrb	r3, [r5, #0]
 80048f6:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80048fa:	786b      	ldrb	r3, [r5, #1]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80048fc:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004900:	78e8      	ldrb	r0, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004902:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004906:	f895 0020 	ldrb.w	r0, [r5, #32]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800490a:	ea46 6600 	orr.w	r6, r6, r0, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800490e:	686f      	ldr	r7, [r5, #4]
 8004910:	69ab      	ldr	r3, [r5, #24]
 8004912:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004914:	6823      	ldr	r3, [r4, #0]
 8004916:	22ca      	movs	r2, #202	; 0xca
 8004918:	625a      	str	r2, [r3, #36]	; 0x24
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	2253      	movs	r2, #83	; 0x53
 800491e:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004920:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004926:	d04b      	beq.n	80049c0 <HAL_RTC_SetAlarm_IT+0x2ec>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004928:	6822      	ldr	r2, [r4, #0]
 800492a:	6893      	ldr	r3, [r2, #8]
 800492c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004930:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004932:	6822      	ldr	r2, [r4, #0]
 8004934:	68d3      	ldr	r3, [r2, #12]
 8004936:	b2db      	uxtb	r3, r3
 8004938:	f463 7320 	orn	r3, r3, #640	; 0x280
 800493c:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 800493e:	f7fd fc8d 	bl	800225c <HAL_GetTick>
 8004942:	4605      	mov	r5, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	68da      	ldr	r2, [r3, #12]
 8004948:	f012 0f02 	tst.w	r2, #2
 800494c:	d169      	bne.n	8004a22 <HAL_RTC_SetAlarm_IT+0x34e>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800494e:	f7fd fc85 	bl	800225c <HAL_GetTick>
 8004952:	1b40      	subs	r0, r0, r5
 8004954:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004958:	d9f4      	bls.n	8004944 <HAL_RTC_SetAlarm_IT+0x270>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800495a:	6823      	ldr	r3, [r4, #0]
 800495c:	22ff      	movs	r2, #255	; 0xff
 800495e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004960:	2003      	movs	r0, #3
 8004962:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8004966:	2300      	movs	r3, #0
 8004968:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_TIMEOUT;
 800496c:	e07a      	b.n	8004a64 <HAL_RTC_SetAlarm_IT+0x390>
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 800496e:	f240 5174 	movw	r1, #1396	; 0x574
 8004972:	4812      	ldr	r0, [pc, #72]	; (80049bc <HAL_RTC_SetAlarm_IT+0x2e8>)
 8004974:	f7fd f908 	bl	8001b88 <assert_failed>
 8004978:	e7a2      	b.n	80048c0 <HAL_RTC_SetAlarm_IT+0x1ec>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 800497a:	f240 5177 	movw	r1, #1399	; 0x577
 800497e:	480f      	ldr	r0, [pc, #60]	; (80049bc <HAL_RTC_SetAlarm_IT+0x2e8>)
 8004980:	f7fd f902 	bl	8001b88 <assert_failed>
 8004984:	e7a1      	b.n	80048ca <HAL_RTC_SetAlarm_IT+0x1f6>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8004986:	f44f 61af 	mov.w	r1, #1400	; 0x578
 800498a:	480c      	ldr	r0, [pc, #48]	; (80049bc <HAL_RTC_SetAlarm_IT+0x2e8>)
 800498c:	f7fd f8fc 	bl	8001b88 <assert_failed>
 8004990:	e7a0      	b.n	80048d4 <HAL_RTC_SetAlarm_IT+0x200>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8004992:	f240 517c 	movw	r1, #1404	; 0x57c
 8004996:	4809      	ldr	r0, [pc, #36]	; (80049bc <HAL_RTC_SetAlarm_IT+0x2e8>)
 8004998:	f7fd f8f6 	bl	8001b88 <assert_failed>
 800499c:	e7a5      	b.n	80048ea <HAL_RTC_SetAlarm_IT+0x216>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 800499e:	f895 0020 	ldrb.w	r0, [r5, #32]
 80049a2:	f7ff fc3b 	bl	800421c <RTC_Bcd2ToByte>
 80049a6:	1e43      	subs	r3, r0, #1
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b06      	cmp	r3, #6
 80049ac:	d99d      	bls.n	80048ea <HAL_RTC_SetAlarm_IT+0x216>
 80049ae:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 80049b2:	4802      	ldr	r0, [pc, #8]	; (80049bc <HAL_RTC_SetAlarm_IT+0x2e8>)
 80049b4:	f7fd f8e8 	bl	8001b88 <assert_failed>
 80049b8:	e797      	b.n	80048ea <HAL_RTC_SetAlarm_IT+0x216>
 80049ba:	bf00      	nop
 80049bc:	08009ba0 	.word	0x08009ba0
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80049c0:	6822      	ldr	r2, [r4, #0]
 80049c2:	6893      	ldr	r3, [r2, #8]
 80049c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049c8:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80049ca:	6822      	ldr	r2, [r4, #0]
 80049cc:	68d3      	ldr	r3, [r2, #12]
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	f463 73c0 	orn	r3, r3, #384	; 0x180
 80049d4:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 80049d6:	f7fd fc41 	bl	800225c <HAL_GetTick>
 80049da:	4605      	mov	r5, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80049dc:	6823      	ldr	r3, [r4, #0]
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	f012 0f01 	tst.w	r2, #1
 80049e4:	d10f      	bne.n	8004a06 <HAL_RTC_SetAlarm_IT+0x332>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80049e6:	f7fd fc39 	bl	800225c <HAL_GetTick>
 80049ea:	1b40      	subs	r0, r0, r5
 80049ec:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80049f0:	d9f4      	bls.n	80049dc <HAL_RTC_SetAlarm_IT+0x308>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049f2:	6823      	ldr	r3, [r4, #0]
 80049f4:	22ff      	movs	r2, #255	; 0xff
 80049f6:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049f8:	2003      	movs	r0, #3
 80049fa:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 80049fe:	2300      	movs	r3, #0
 8004a00:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_TIMEOUT;
 8004a04:	e02e      	b.n	8004a64 <HAL_RTC_SetAlarm_IT+0x390>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004a06:	61de      	str	r6, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004a08:	6823      	ldr	r3, [r4, #0]
 8004a0a:	645f      	str	r7, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004a0c:	6822      	ldr	r2, [r4, #0]
 8004a0e:	6893      	ldr	r3, [r2, #8]
 8004a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a14:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004a16:	6822      	ldr	r2, [r4, #0]
 8004a18:	6893      	ldr	r3, [r2, #8]
 8004a1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a1e:	6093      	str	r3, [r2, #8]
 8004a20:	e00c      	b.n	8004a3c <HAL_RTC_SetAlarm_IT+0x368>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004a22:	621e      	str	r6, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	649f      	str	r7, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004a28:	6822      	ldr	r2, [r4, #0]
 8004a2a:	6893      	ldr	r3, [r2, #8]
 8004a2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a30:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004a32:	6822      	ldr	r2, [r4, #0]
 8004a34:	6893      	ldr	r3, [r2, #8]
 8004a36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a3a:	6093      	str	r3, [r2, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004a3c:	4b0b      	ldr	r3, [pc, #44]	; (8004a6c <HAL_RTC_SetAlarm_IT+0x398>)
 8004a3e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004a42:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004a46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004a50:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a52:	6823      	ldr	r3, [r4, #0]
 8004a54:	22ff      	movs	r2, #255	; 0xff
 8004a56:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 8004a5e:	2000      	movs	r0, #0
 8004a60:	f884 0020 	strb.w	r0, [r4, #32]
}
 8004a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hrtc);
 8004a68:	2002      	movs	r0, #2
 8004a6a:	e7fb      	b.n	8004a64 <HAL_RTC_SetAlarm_IT+0x390>
 8004a6c:	58000800 	.word	0x58000800

08004a70 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004a70:	4770      	bx	lr
	...

08004a74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a78:	b082      	sub	sp, #8
 8004a7a:	4681      	mov	r9, r0
 8004a7c:	460f      	mov	r7, r1
 8004a7e:	4616      	mov	r6, r2
 8004a80:	461d      	mov	r5, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a82:	f7fd fbeb 	bl	800225c <HAL_GetTick>
 8004a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a88:	442b      	add	r3, r5
 8004a8a:	eba3 0800 	sub.w	r8, r3, r0
  tmp_tickstart = HAL_GetTick();
 8004a8e:	f7fd fbe5 	bl	800225c <HAL_GetTick>
 8004a92:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a94:	4b2c      	ldr	r3, [pc, #176]	; (8004b48 <SPI_WaitFlagStateUntilTimeout+0xd4>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8004a9c:	fb08 f303 	mul.w	r3, r8, r3
 8004aa0:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004aa2:	f8d9 3000 	ldr.w	r3, [r9]
 8004aa6:	689c      	ldr	r4, [r3, #8]
 8004aa8:	ea37 0204 	bics.w	r2, r7, r4
 8004aac:	bf0c      	ite	eq
 8004aae:	2401      	moveq	r4, #1
 8004ab0:	2400      	movne	r4, #0
 8004ab2:	42b4      	cmp	r4, r6
 8004ab4:	d044      	beq.n	8004b40 <SPI_WaitFlagStateUntilTimeout+0xcc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ab6:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004aba:	d0f4      	beq.n	8004aa6 <SPI_WaitFlagStateUntilTimeout+0x32>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004abc:	f7fd fbce 	bl	800225c <HAL_GetTick>
 8004ac0:	eba0 000a 	sub.w	r0, r0, sl
 8004ac4:	4540      	cmp	r0, r8
 8004ac6:	d207      	bcs.n	8004ad8 <SPI_WaitFlagStateUntilTimeout+0x64>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ac8:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	bf08      	it	eq
 8004ace:	4698      	moveq	r8, r3
      }
      count--;
 8004ad0:	9b01      	ldr	r3, [sp, #4]
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	9301      	str	r3, [sp, #4]
 8004ad6:	e7e4      	b.n	8004aa2 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ad8:	f8d9 2000 	ldr.w	r2, [r9]
 8004adc:	6853      	ldr	r3, [r2, #4]
 8004ade:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004ae2:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ae4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004ae8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aec:	d00c      	beq.n	8004b08 <SPI_WaitFlagStateUntilTimeout+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004aee:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8004af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004af6:	d016      	beq.n	8004b26 <SPI_WaitFlagStateUntilTimeout+0xb2>
        hspi->State = HAL_SPI_STATE_READY;
 8004af8:	2301      	movs	r3, #1
 8004afa:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8004afe:	2300      	movs	r3, #0
 8004b00:	f889 305c 	strb.w	r3, [r9, #92]	; 0x5c
        return HAL_TIMEOUT;
 8004b04:	2003      	movs	r0, #3
 8004b06:	e01c      	b.n	8004b42 <SPI_WaitFlagStateUntilTimeout+0xce>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b08:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004b0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b10:	d002      	beq.n	8004b18 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b16:	d1ea      	bne.n	8004aee <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8004b18:	f8d9 2000 	ldr.w	r2, [r9]
 8004b1c:	6813      	ldr	r3, [r2, #0]
 8004b1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b22:	6013      	str	r3, [r2, #0]
 8004b24:	e7e3      	b.n	8004aee <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8004b26:	f8d9 2000 	ldr.w	r2, [r9]
 8004b2a:	6813      	ldr	r3, [r2, #0]
 8004b2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b30:	6013      	str	r3, [r2, #0]
 8004b32:	f8d9 2000 	ldr.w	r2, [r9]
 8004b36:	6813      	ldr	r3, [r2, #0]
 8004b38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	e7db      	b.n	8004af8 <SPI_WaitFlagStateUntilTimeout+0x84>
    }
  }

  return HAL_OK;
 8004b40:	2000      	movs	r0, #0
}
 8004b42:	b002      	add	sp, #8
 8004b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b48:	20000004 	.word	0x20000004

08004b4c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b50:	b083      	sub	sp, #12
 8004b52:	4681      	mov	r9, r0
 8004b54:	460d      	mov	r5, r1
 8004b56:	4616      	mov	r6, r2
 8004b58:	461f      	mov	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004b60:	f7fd fb7c 	bl	800225c <HAL_GetTick>
 8004b64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b66:	443b      	add	r3, r7
 8004b68:	eba3 0800 	sub.w	r8, r3, r0
  tmp_tickstart = HAL_GetTick();
 8004b6c:	f7fd fb76 	bl	800225c <HAL_GetTick>
 8004b70:	4682      	mov	sl, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004b72:	f8d9 b000 	ldr.w	fp, [r9]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004b76:	4b33      	ldr	r3, [pc, #204]	; (8004c44 <SPI_WaitFifoStateUntilTimeout+0xf8>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004b7e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004b82:	0d1b      	lsrs	r3, r3, #20
 8004b84:	fb08 f303 	mul.w	r3, r8, r3
 8004b88:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8004b8a:	f8d9 3000 	ldr.w	r3, [r9]
 8004b8e:	e002      	b.n	8004b96 <SPI_WaitFifoStateUntilTimeout+0x4a>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8004b90:	f1b7 3fff 	cmp.w	r7, #4294967295
 8004b94:	d110      	bne.n	8004bb8 <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8004b96:	689c      	ldr	r4, [r3, #8]
 8004b98:	402c      	ands	r4, r5
 8004b9a:	42b4      	cmp	r4, r6
 8004b9c:	d04e      	beq.n	8004c3c <SPI_WaitFifoStateUntilTimeout+0xf0>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004b9e:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 8004ba2:	d1f5      	bne.n	8004b90 <SPI_WaitFifoStateUntilTimeout+0x44>
 8004ba4:	2e00      	cmp	r6, #0
 8004ba6:	d1f3      	bne.n	8004b90 <SPI_WaitFifoStateUntilTimeout+0x44>
      tmpreg8 = *ptmpreg8;
 8004ba8:	f89b 200c 	ldrb.w	r2, [fp, #12]
 8004bac:	b2d2      	uxtb	r2, r2
 8004bae:	f88d 2003 	strb.w	r2, [sp, #3]
      UNUSED(tmpreg8);
 8004bb2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8004bb6:	e7eb      	b.n	8004b90 <SPI_WaitFifoStateUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bb8:	f7fd fb50 	bl	800225c <HAL_GetTick>
 8004bbc:	eba0 000a 	sub.w	r0, r0, sl
 8004bc0:	4540      	cmp	r0, r8
 8004bc2:	d207      	bcs.n	8004bd4 <SPI_WaitFifoStateUntilTimeout+0x88>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bc4:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	bf08      	it	eq
 8004bca:	4698      	moveq	r8, r3
      }
      count--;
 8004bcc:	9b01      	ldr	r3, [sp, #4]
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	9301      	str	r3, [sp, #4]
 8004bd2:	e7da      	b.n	8004b8a <SPI_WaitFifoStateUntilTimeout+0x3e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bd4:	f8d9 2000 	ldr.w	r2, [r9]
 8004bd8:	6853      	ldr	r3, [r2, #4]
 8004bda:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004bde:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004be0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004be4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004be8:	d00c      	beq.n	8004c04 <SPI_WaitFifoStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bea:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8004bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bf2:	d016      	beq.n	8004c22 <SPI_WaitFifoStateUntilTimeout+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	f889 305c 	strb.w	r3, [r9, #92]	; 0x5c
        return HAL_TIMEOUT;
 8004c00:	2003      	movs	r0, #3
 8004c02:	e01c      	b.n	8004c3e <SPI_WaitFifoStateUntilTimeout+0xf2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c04:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c0c:	d002      	beq.n	8004c14 <SPI_WaitFifoStateUntilTimeout+0xc8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c12:	d1ea      	bne.n	8004bea <SPI_WaitFifoStateUntilTimeout+0x9e>
          __HAL_SPI_DISABLE(hspi);
 8004c14:	f8d9 2000 	ldr.w	r2, [r9]
 8004c18:	6813      	ldr	r3, [r2, #0]
 8004c1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c1e:	6013      	str	r3, [r2, #0]
 8004c20:	e7e3      	b.n	8004bea <SPI_WaitFifoStateUntilTimeout+0x9e>
          SPI_RESET_CRC(hspi);
 8004c22:	f8d9 2000 	ldr.w	r2, [r9]
 8004c26:	6813      	ldr	r3, [r2, #0]
 8004c28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	f8d9 2000 	ldr.w	r2, [r9]
 8004c32:	6813      	ldr	r3, [r2, #0]
 8004c34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c38:	6013      	str	r3, [r2, #0]
 8004c3a:	e7db      	b.n	8004bf4 <SPI_WaitFifoStateUntilTimeout+0xa8>
    }
  }

  return HAL_OK;
 8004c3c:	2000      	movs	r0, #0
}
 8004c3e:	b003      	add	sp, #12
 8004c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c44:	20000004 	.word	0x20000004

08004c48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c48:	b570      	push	{r4, r5, r6, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	4604      	mov	r4, r0
 8004c4e:	460d      	mov	r5, r1
 8004c50:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c52:	9200      	str	r2, [sp, #0]
 8004c54:	460b      	mov	r3, r1
 8004c56:	2200      	movs	r2, #0
 8004c58:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004c5c:	f7ff ff76 	bl	8004b4c <SPI_WaitFifoStateUntilTimeout>
 8004c60:	b9b0      	cbnz	r0, 8004c90 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c62:	9600      	str	r6, [sp, #0]
 8004c64:	462b      	mov	r3, r5
 8004c66:	2200      	movs	r2, #0
 8004c68:	2180      	movs	r1, #128	; 0x80
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	f7ff ff02 	bl	8004a74 <SPI_WaitFlagStateUntilTimeout>
 8004c70:	b9a8      	cbnz	r0, 8004c9e <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c72:	9600      	str	r6, [sp, #0]
 8004c74:	462b      	mov	r3, r5
 8004c76:	2200      	movs	r2, #0
 8004c78:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	f7ff ff65 	bl	8004b4c <SPI_WaitFifoStateUntilTimeout>
 8004c82:	b150      	cbz	r0, 8004c9a <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c84:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004c86:	f043 0320 	orr.w	r3, r3, #32
 8004c8a:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c8c:	2003      	movs	r0, #3
 8004c8e:	e004      	b.n	8004c9a <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c90:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004c92:	f043 0320 	orr.w	r3, r3, #32
 8004c96:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c98:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8004c9a:	b002      	add	sp, #8
 8004c9c:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c9e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004ca0:	f043 0320 	orr.w	r3, r3, #32
 8004ca4:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ca6:	2003      	movs	r0, #3
 8004ca8:	e7f7      	b.n	8004c9a <SPI_EndRxTxTransaction+0x52>
	...

08004cac <HAL_SPI_Init>:
  if (hspi == NULL)
 8004cac:	2800      	cmp	r0, #0
 8004cae:	f000 8125 	beq.w	8004efc <HAL_SPI_Init+0x250>
{
 8004cb2:	b510      	push	{r4, lr}
 8004cb4:	4604      	mov	r4, r0
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004cb6:	6802      	ldr	r2, [r0, #0]
 8004cb8:	4b95      	ldr	r3, [pc, #596]	; (8004f10 <HAL_SPI_Init+0x264>)
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d004      	beq.n	8004cc8 <HAL_SPI_Init+0x1c>
 8004cbe:	f240 1145 	movw	r1, #325	; 0x145
 8004cc2:	4894      	ldr	r0, [pc, #592]	; (8004f14 <HAL_SPI_Init+0x268>)
 8004cc4:	f7fc ff60 	bl	8001b88 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004cc8:	6863      	ldr	r3, [r4, #4]
 8004cca:	b11b      	cbz	r3, 8004cd4 <HAL_SPI_Init+0x28>
 8004ccc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cd0:	f040 80b8 	bne.w	8004e44 <HAL_SPI_Init+0x198>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004cd4:	68a3      	ldr	r3, [r4, #8]
 8004cd6:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8004cda:	d003      	beq.n	8004ce4 <HAL_SPI_Init+0x38>
 8004cdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ce0:	f040 80b6 	bne.w	8004e50 <HAL_SPI_Init+0x1a4>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004ce4:	68e3      	ldr	r3, [r4, #12]
 8004ce6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004cea:	d018      	beq.n	8004d1e <HAL_SPI_Init+0x72>
 8004cec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cf0:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8004cf4:	d013      	beq.n	8004d1e <HAL_SPI_Init+0x72>
 8004cf6:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
 8004cfa:	d010      	beq.n	8004d1e <HAL_SPI_Init+0x72>
 8004cfc:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8004d00:	d00d      	beq.n	8004d1e <HAL_SPI_Init+0x72>
 8004d02:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8004d06:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 8004d0a:	d008      	beq.n	8004d1e <HAL_SPI_Init+0x72>
 8004d0c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004d10:	d005      	beq.n	8004d1e <HAL_SPI_Init+0x72>
 8004d12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d1a:	f040 809f 	bne.w	8004e5c <HAL_SPI_Init+0x1b0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004d1e:	69a3      	ldr	r3, [r4, #24]
 8004d20:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 8004d24:	d003      	beq.n	8004d2e <HAL_SPI_Init+0x82>
 8004d26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d2a:	f040 809d 	bne.w	8004e68 <HAL_SPI_Init+0x1bc>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8004d2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d30:	f033 0308 	bics.w	r3, r3, #8
 8004d34:	f040 809e 	bne.w	8004e74 <HAL_SPI_Init+0x1c8>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004d38:	69e3      	ldr	r3, [r4, #28]
 8004d3a:	f033 0308 	bics.w	r3, r3, #8
 8004d3e:	d00a      	beq.n	8004d56 <HAL_SPI_Init+0xaa>
 8004d40:	2b10      	cmp	r3, #16
 8004d42:	d008      	beq.n	8004d56 <HAL_SPI_Init+0xaa>
 8004d44:	2b20      	cmp	r3, #32
 8004d46:	d006      	beq.n	8004d56 <HAL_SPI_Init+0xaa>
 8004d48:	2b30      	cmp	r3, #48	; 0x30
 8004d4a:	d004      	beq.n	8004d56 <HAL_SPI_Init+0xaa>
 8004d4c:	f240 114b 	movw	r1, #331	; 0x14b
 8004d50:	4870      	ldr	r0, [pc, #448]	; (8004f14 <HAL_SPI_Init+0x268>)
 8004d52:	f7fc ff19 	bl	8001b88 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004d56:	6a23      	ldr	r3, [r4, #32]
 8004d58:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8004d5c:	d004      	beq.n	8004d68 <HAL_SPI_Init+0xbc>
 8004d5e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004d62:	486c      	ldr	r0, [pc, #432]	; (8004f14 <HAL_SPI_Init+0x268>)
 8004d64:	f7fc ff10 	bl	8001b88 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004d68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 8091 	beq.w	8004e92 <HAL_SPI_Init+0x1e6>
 8004d70:	2b10      	cmp	r3, #16
 8004d72:	f040 8085 	bne.w	8004e80 <HAL_SPI_Init+0x1d4>
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004d76:	69e3      	ldr	r3, [r4, #28]
 8004d78:	f033 0308 	bics.w	r3, r3, #8
 8004d7c:	d00a      	beq.n	8004d94 <HAL_SPI_Init+0xe8>
 8004d7e:	2b10      	cmp	r3, #16
 8004d80:	d008      	beq.n	8004d94 <HAL_SPI_Init+0xe8>
 8004d82:	2b20      	cmp	r3, #32
 8004d84:	d006      	beq.n	8004d94 <HAL_SPI_Init+0xe8>
 8004d86:	2b30      	cmp	r3, #48	; 0x30
 8004d88:	d004      	beq.n	8004d94 <HAL_SPI_Init+0xe8>
 8004d8a:	f240 115f 	movw	r1, #351	; 0x15f
 8004d8e:	4861      	ldr	r0, [pc, #388]	; (8004f14 <HAL_SPI_Init+0x268>)
 8004d90:	f7fc fefa 	bl	8001b88 <assert_failed>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d94:	2300      	movs	r3, #0
 8004d96:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d98:	6163      	str	r3, [r4, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d9e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 80a2 	beq.w	8004eec <HAL_SPI_Init+0x240>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004da8:	2302      	movs	r3, #2
 8004daa:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8004dae:	6822      	ldr	r2, [r4, #0]
 8004db0:	6813      	ldr	r3, [r2, #0]
 8004db2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004db6:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004db8:	68e3      	ldr	r3, [r4, #12]
 8004dba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dbe:	f200 80a2 	bhi.w	8004f06 <HAL_SPI_Init+0x25a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004dc2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dc6:	f000 809b 	beq.w	8004f00 <HAL_SPI_Init+0x254>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004dca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004dd2:	6822      	ldr	r2, [r4, #0]
 8004dd4:	6863      	ldr	r3, [r4, #4]
 8004dd6:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004dda:	68a0      	ldr	r0, [r4, #8]
 8004ddc:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8004de0:	4303      	orrs	r3, r0
 8004de2:	6920      	ldr	r0, [r4, #16]
 8004de4:	f000 0002 	and.w	r0, r0, #2
 8004de8:	4303      	orrs	r3, r0
 8004dea:	6960      	ldr	r0, [r4, #20]
 8004dec:	f000 0001 	and.w	r0, r0, #1
 8004df0:	4303      	orrs	r3, r0
 8004df2:	69a0      	ldr	r0, [r4, #24]
 8004df4:	f400 7000 	and.w	r0, r0, #512	; 0x200
 8004df8:	4303      	orrs	r3, r0
 8004dfa:	69e0      	ldr	r0, [r4, #28]
 8004dfc:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8004e00:	4303      	orrs	r3, r0
 8004e02:	6a20      	ldr	r0, [r4, #32]
 8004e04:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8004e08:	4303      	orrs	r3, r0
 8004e0a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004e0c:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8004e10:	4303      	orrs	r3, r0
 8004e12:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e14:	6822      	ldr	r2, [r4, #0]
 8004e16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e18:	f003 0310 	and.w	r3, r3, #16
 8004e1c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004e1e:	f000 0008 	and.w	r0, r0, #8
 8004e22:	4303      	orrs	r3, r0
 8004e24:	68e0      	ldr	r0, [r4, #12]
 8004e26:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 8004e2a:	4303      	orrs	r3, r0
 8004e2c:	8b60      	ldrh	r0, [r4, #26]
 8004e2e:	f000 0004 	and.w	r0, r0, #4
 8004e32:	4303      	orrs	r3, r0
 8004e34:	430b      	orrs	r3, r1
 8004e36:	6053      	str	r3, [r2, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e38:	2000      	movs	r0, #0
 8004e3a:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8004e42:	bd10      	pop	{r4, pc}
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004e44:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004e48:	4832      	ldr	r0, [pc, #200]	; (8004f14 <HAL_SPI_Init+0x268>)
 8004e4a:	f7fc fe9d 	bl	8001b88 <assert_failed>
 8004e4e:	e741      	b.n	8004cd4 <HAL_SPI_Init+0x28>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004e50:	f240 1147 	movw	r1, #327	; 0x147
 8004e54:	482f      	ldr	r0, [pc, #188]	; (8004f14 <HAL_SPI_Init+0x268>)
 8004e56:	f7fc fe97 	bl	8001b88 <assert_failed>
 8004e5a:	e743      	b.n	8004ce4 <HAL_SPI_Init+0x38>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004e5c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004e60:	482c      	ldr	r0, [pc, #176]	; (8004f14 <HAL_SPI_Init+0x268>)
 8004e62:	f7fc fe91 	bl	8001b88 <assert_failed>
 8004e66:	e75a      	b.n	8004d1e <HAL_SPI_Init+0x72>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004e68:	f240 1149 	movw	r1, #329	; 0x149
 8004e6c:	4829      	ldr	r0, [pc, #164]	; (8004f14 <HAL_SPI_Init+0x268>)
 8004e6e:	f7fc fe8b 	bl	8001b88 <assert_failed>
 8004e72:	e75c      	b.n	8004d2e <HAL_SPI_Init+0x82>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8004e74:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004e78:	4826      	ldr	r0, [pc, #152]	; (8004f14 <HAL_SPI_Init+0x268>)
 8004e7a:	f7fc fe85 	bl	8001b88 <assert_failed>
 8004e7e:	e75b      	b.n	8004d38 <HAL_SPI_Init+0x8c>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004e80:	f240 114d 	movw	r1, #333	; 0x14d
 8004e84:	4823      	ldr	r0, [pc, #140]	; (8004f14 <HAL_SPI_Init+0x268>)
 8004e86:	f7fc fe7f 	bl	8001b88 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f47f af72 	bne.w	8004d76 <HAL_SPI_Init+0xca>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004e92:	6923      	ldr	r3, [r4, #16]
 8004e94:	f033 0302 	bics.w	r3, r3, #2
 8004e98:	d004      	beq.n	8004ea4 <HAL_SPI_Init+0x1f8>
 8004e9a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8004e9e:	481d      	ldr	r0, [pc, #116]	; (8004f14 <HAL_SPI_Init+0x268>)
 8004ea0:	f7fc fe72 	bl	8001b88 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004ea4:	6963      	ldr	r3, [r4, #20]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d806      	bhi.n	8004eb8 <HAL_SPI_Init+0x20c>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eaa:	6863      	ldr	r3, [r4, #4]
 8004eac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eb0:	d008      	beq.n	8004ec4 <HAL_SPI_Init+0x218>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61e3      	str	r3, [r4, #28]
 8004eb6:	e770      	b.n	8004d9a <HAL_SPI_Init+0xee>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004eb8:	f240 1151 	movw	r1, #337	; 0x151
 8004ebc:	4815      	ldr	r0, [pc, #84]	; (8004f14 <HAL_SPI_Init+0x268>)
 8004ebe:	f7fc fe63 	bl	8001b88 <assert_failed>
 8004ec2:	e7f2      	b.n	8004eaa <HAL_SPI_Init+0x1fe>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004ec4:	69e3      	ldr	r3, [r4, #28]
 8004ec6:	f033 0308 	bics.w	r3, r3, #8
 8004eca:	f43f af66 	beq.w	8004d9a <HAL_SPI_Init+0xee>
 8004ece:	2b10      	cmp	r3, #16
 8004ed0:	f43f af63 	beq.w	8004d9a <HAL_SPI_Init+0xee>
 8004ed4:	2b20      	cmp	r3, #32
 8004ed6:	f43f af60 	beq.w	8004d9a <HAL_SPI_Init+0xee>
 8004eda:	2b30      	cmp	r3, #48	; 0x30
 8004edc:	f43f af5d 	beq.w	8004d9a <HAL_SPI_Init+0xee>
 8004ee0:	f240 1155 	movw	r1, #341	; 0x155
 8004ee4:	480b      	ldr	r0, [pc, #44]	; (8004f14 <HAL_SPI_Init+0x268>)
 8004ee6:	f7fc fe4f 	bl	8001b88 <assert_failed>
 8004eea:	e756      	b.n	8004d9a <HAL_SPI_Init+0xee>
    hspi->Lock = HAL_UNLOCKED;
 8004eec:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	f7fc ff65 	bl	8001dc0 <HAL_SPI_MspInit>
 8004ef6:	e757      	b.n	8004da8 <HAL_SPI_Init+0xfc>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004ef8:	2100      	movs	r1, #0
 8004efa:	e768      	b.n	8004dce <HAL_SPI_Init+0x122>
    return HAL_ERROR;
 8004efc:	2001      	movs	r0, #1
}
 8004efe:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f04:	e765      	b.n	8004dd2 <HAL_SPI_Init+0x126>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f06:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004f0a:	d1f5      	bne.n	8004ef8 <HAL_SPI_Init+0x24c>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	e760      	b.n	8004dd2 <HAL_SPI_Init+0x126>
 8004f10:	40013000 	.word	0x40013000
 8004f14:	08009bd8 	.word	0x08009bd8

08004f18 <HAL_SPI_TransmitReceive>:
{
 8004f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f1c:	4604      	mov	r4, r0
 8004f1e:	4688      	mov	r8, r1
 8004f20:	4691      	mov	r9, r2
 8004f22:	461f      	mov	r7, r3
 8004f24:	9e08      	ldr	r6, [sp, #32]
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8004f26:	6883      	ldr	r3, [r0, #8]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d167      	bne.n	8004ffc <HAL_SPI_TransmitReceive+0xe4>
  __HAL_LOCK(hspi);
 8004f2c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	f000 815d 	beq.w	80051f0 <HAL_SPI_TransmitReceive+0x2d8>
 8004f36:	2301      	movs	r3, #1
 8004f38:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8004f3c:	f7fd f98e 	bl	800225c <HAL_GetTick>
 8004f40:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 8004f42:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8004f46:	b2c0      	uxtb	r0, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f48:	2801      	cmp	r0, #1
 8004f4a:	d00b      	beq.n	8004f64 <HAL_SPI_TransmitReceive+0x4c>
 8004f4c:	6863      	ldr	r3, [r4, #4]
 8004f4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f52:	f040 8136 	bne.w	80051c2 <HAL_SPI_TransmitReceive+0x2aa>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f56:	68a3      	ldr	r3, [r4, #8]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f040 813b 	bne.w	80051d4 <HAL_SPI_TransmitReceive+0x2bc>
 8004f5e:	2804      	cmp	r0, #4
 8004f60:	f040 813a 	bne.w	80051d8 <HAL_SPI_TransmitReceive+0x2c0>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f64:	f1b8 0f00 	cmp.w	r8, #0
 8004f68:	f000 8138 	beq.w	80051dc <HAL_SPI_TransmitReceive+0x2c4>
 8004f6c:	f1b9 0f00 	cmp.w	r9, #0
 8004f70:	f000 8136 	beq.w	80051e0 <HAL_SPI_TransmitReceive+0x2c8>
 8004f74:	2f00      	cmp	r7, #0
 8004f76:	f000 8135 	beq.w	80051e4 <HAL_SPI_TransmitReceive+0x2cc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f7a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f82:	bf1c      	itt	ne
 8004f84:	2305      	movne	r3, #5
 8004f86:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f8e:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004f92:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004f96:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f9a:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004f9e:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004fa0:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8004fa2:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004fa4:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004fa6:	68e3      	ldr	r3, [r4, #12]
 8004fa8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fac:	d801      	bhi.n	8004fb2 <HAL_SPI_TransmitReceive+0x9a>
 8004fae:	2f01      	cmp	r7, #1
 8004fb0:	d92a      	bls.n	8005008 <HAL_SPI_TransmitReceive+0xf0>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fb2:	6822      	ldr	r2, [r4, #0]
 8004fb4:	6853      	ldr	r3, [r2, #4]
 8004fb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fba:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004fc4:	d103      	bne.n	8004fce <HAL_SPI_TransmitReceive+0xb6>
    __HAL_SPI_ENABLE(hspi);
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fcc:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fce:	68e3      	ldr	r3, [r4, #12]
 8004fd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fd4:	d95d      	bls.n	8005092 <HAL_SPI_TransmitReceive+0x17a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fd6:	6863      	ldr	r3, [r4, #4]
 8004fd8:	b10b      	cbz	r3, 8004fde <HAL_SPI_TransmitReceive+0xc6>
 8004fda:	2f01      	cmp	r7, #1
 8004fdc:	d10a      	bne.n	8004ff4 <HAL_SPI_TransmitReceive+0xdc>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fde:	6823      	ldr	r3, [r4, #0]
 8004fe0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004fe2:	8812      	ldrh	r2, [r2, #0]
 8004fe4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fe6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004fe8:	3302      	adds	r3, #2
 8004fea:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8004fec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004ff4:	2701      	movs	r7, #1
        txallowed = 0U;
 8004ff6:	f04f 0800 	mov.w	r8, #0
 8004ffa:	e02a      	b.n	8005052 <HAL_SPI_TransmitReceive+0x13a>
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8004ffc:	f240 41f3 	movw	r1, #1267	; 0x4f3
 8005000:	487c      	ldr	r0, [pc, #496]	; (80051f4 <HAL_SPI_TransmitReceive+0x2dc>)
 8005002:	f7fc fdc1 	bl	8001b88 <assert_failed>
 8005006:	e791      	b.n	8004f2c <HAL_SPI_TransmitReceive+0x14>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005008:	6822      	ldr	r2, [r4, #0]
 800500a:	6853      	ldr	r3, [r2, #4]
 800500c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005010:	6053      	str	r3, [r2, #4]
 8005012:	e7d3      	b.n	8004fbc <HAL_SPI_TransmitReceive+0xa4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005014:	6822      	ldr	r2, [r4, #0]
 8005016:	6893      	ldr	r3, [r2, #8]
 8005018:	f013 0301 	ands.w	r3, r3, #1
 800501c:	d010      	beq.n	8005040 <HAL_SPI_TransmitReceive+0x128>
 800501e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8005022:	b289      	uxth	r1, r1
 8005024:	b161      	cbz	r1, 8005040 <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005026:	68d1      	ldr	r1, [r2, #12]
 8005028:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800502a:	8011      	strh	r1, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800502c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800502e:	3202      	adds	r2, #2
 8005030:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8005032:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005036:	3a01      	subs	r2, #1
 8005038:	b292      	uxth	r2, r2
 800503a:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
        txallowed = 1U;
 800503e:	461f      	mov	r7, r3
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005040:	f7fd f90c 	bl	800225c <HAL_GetTick>
 8005044:	1b43      	subs	r3, r0, r5
 8005046:	42b3      	cmp	r3, r6
 8005048:	d303      	bcc.n	8005052 <HAL_SPI_TransmitReceive+0x13a>
 800504a:	f1b6 3fff 	cmp.w	r6, #4294967295
 800504e:	f040 80cb 	bne.w	80051e8 <HAL_SPI_TransmitReceive+0x2d0>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005052:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005054:	b29b      	uxth	r3, r3
 8005056:	b92b      	cbnz	r3, 8005064 <HAL_SPI_TransmitReceive+0x14c>
 8005058:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800505c:	b29b      	uxth	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	f000 80a5 	beq.w	80051ae <HAL_SPI_TransmitReceive+0x296>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005064:	6823      	ldr	r3, [r4, #0]
 8005066:	689a      	ldr	r2, [r3, #8]
 8005068:	f012 0f02 	tst.w	r2, #2
 800506c:	d0d2      	beq.n	8005014 <HAL_SPI_TransmitReceive+0xfc>
 800506e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005070:	b292      	uxth	r2, r2
 8005072:	2a00      	cmp	r2, #0
 8005074:	d0ce      	beq.n	8005014 <HAL_SPI_TransmitReceive+0xfc>
 8005076:	2f00      	cmp	r7, #0
 8005078:	d0cc      	beq.n	8005014 <HAL_SPI_TransmitReceive+0xfc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800507a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800507c:	8812      	ldrh	r2, [r2, #0]
 800507e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005080:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005082:	3302      	adds	r3, #2
 8005084:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005086:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005088:	3b01      	subs	r3, #1
 800508a:	b29b      	uxth	r3, r3
 800508c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800508e:	4647      	mov	r7, r8
 8005090:	e7c0      	b.n	8005014 <HAL_SPI_TransmitReceive+0xfc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005092:	6863      	ldr	r3, [r4, #4]
 8005094:	b10b      	cbz	r3, 800509a <HAL_SPI_TransmitReceive+0x182>
 8005096:	2f01      	cmp	r7, #1
 8005098:	d10e      	bne.n	80050b8 <HAL_SPI_TransmitReceive+0x1a0>
      if (hspi->TxXferCount > 1U)
 800509a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800509c:	b29b      	uxth	r3, r3
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d90e      	bls.n	80050c0 <HAL_SPI_TransmitReceive+0x1a8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050a2:	6823      	ldr	r3, [r4, #0]
 80050a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80050a6:	8812      	ldrh	r2, [r2, #0]
 80050a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050ac:	3302      	adds	r3, #2
 80050ae:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80050b0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050b2:	3b02      	subs	r3, #2
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80050b8:	2701      	movs	r7, #1
        txallowed = 0U;
 80050ba:	f04f 0800 	mov.w	r8, #0
 80050be:	e043      	b.n	8005148 <HAL_SPI_TransmitReceive+0x230>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80050c4:	7812      	ldrb	r2, [r2, #0]
 80050c6:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80050c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050ca:	3301      	adds	r3, #1
 80050cc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80050ce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050d0:	3b01      	subs	r3, #1
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80050d6:	e7ef      	b.n	80050b8 <HAL_SPI_TransmitReceive+0x1a0>
        if (hspi->TxXferCount > 1U)
 80050d8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80050da:	b292      	uxth	r2, r2
 80050dc:	2a01      	cmp	r2, #1
 80050de:	d90b      	bls.n	80050f8 <HAL_SPI_TransmitReceive+0x1e0>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80050e2:	8812      	ldrh	r2, [r2, #0]
 80050e4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80050e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050e8:	3302      	adds	r3, #2
 80050ea:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80050ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050ee:	3b02      	subs	r3, #2
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80050f4:	4647      	mov	r7, r8
 80050f6:	e038      	b.n	800516a <HAL_SPI_TransmitReceive+0x252>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80050f8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80050fa:	7812      	ldrb	r2, [r2, #0]
 80050fc:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 80050fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005100:	3301      	adds	r3, #1
 8005102:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8005104:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005106:	3b01      	subs	r3, #1
 8005108:	b29b      	uxth	r3, r3
 800510a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800510c:	4647      	mov	r7, r8
 800510e:	e02c      	b.n	800516a <HAL_SPI_TransmitReceive+0x252>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005110:	6821      	ldr	r1, [r4, #0]
 8005112:	684a      	ldr	r2, [r1, #4]
 8005114:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005118:	604a      	str	r2, [r1, #4]
        txallowed = 1U;
 800511a:	461f      	mov	r7, r3
 800511c:	e00c      	b.n	8005138 <HAL_SPI_TransmitReceive+0x220>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800511e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005120:	7b12      	ldrb	r2, [r2, #12]
 8005122:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr++;
 8005124:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005126:	3201      	adds	r2, #1
 8005128:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 800512a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800512e:	3a01      	subs	r2, #1
 8005130:	b292      	uxth	r2, r2
 8005132:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
        txallowed = 1U;
 8005136:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005138:	f7fd f890 	bl	800225c <HAL_GetTick>
 800513c:	1b40      	subs	r0, r0, r5
 800513e:	42b0      	cmp	r0, r6
 8005140:	d302      	bcc.n	8005148 <HAL_SPI_TransmitReceive+0x230>
 8005142:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005146:	d151      	bne.n	80051ec <HAL_SPI_TransmitReceive+0x2d4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005148:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800514a:	b29b      	uxth	r3, r3
 800514c:	b91b      	cbnz	r3, 8005156 <HAL_SPI_TransmitReceive+0x23e>
 800514e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005152:	b29b      	uxth	r3, r3
 8005154:	b35b      	cbz	r3, 80051ae <HAL_SPI_TransmitReceive+0x296>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	689a      	ldr	r2, [r3, #8]
 800515a:	f012 0f02 	tst.w	r2, #2
 800515e:	d004      	beq.n	800516a <HAL_SPI_TransmitReceive+0x252>
 8005160:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005162:	b292      	uxth	r2, r2
 8005164:	b10a      	cbz	r2, 800516a <HAL_SPI_TransmitReceive+0x252>
 8005166:	2f01      	cmp	r7, #1
 8005168:	d0b6      	beq.n	80050d8 <HAL_SPI_TransmitReceive+0x1c0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800516a:	6822      	ldr	r2, [r4, #0]
 800516c:	6893      	ldr	r3, [r2, #8]
 800516e:	f013 0301 	ands.w	r3, r3, #1
 8005172:	d0e1      	beq.n	8005138 <HAL_SPI_TransmitReceive+0x220>
 8005174:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8005178:	b289      	uxth	r1, r1
 800517a:	2900      	cmp	r1, #0
 800517c:	d0dc      	beq.n	8005138 <HAL_SPI_TransmitReceive+0x220>
        if (hspi->RxXferCount > 1U)
 800517e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8005182:	b289      	uxth	r1, r1
 8005184:	2901      	cmp	r1, #1
 8005186:	d9ca      	bls.n	800511e <HAL_SPI_TransmitReceive+0x206>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005188:	68d1      	ldr	r1, [r2, #12]
 800518a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800518c:	8011      	strh	r1, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800518e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005190:	3202      	adds	r2, #2
 8005192:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005194:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005198:	3a02      	subs	r2, #2
 800519a:	b292      	uxth	r2, r2
 800519c:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80051a0:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80051a4:	b292      	uxth	r2, r2
 80051a6:	2a01      	cmp	r2, #1
 80051a8:	d9b2      	bls.n	8005110 <HAL_SPI_TransmitReceive+0x1f8>
        txallowed = 1U;
 80051aa:	461f      	mov	r7, r3
 80051ac:	e7c4      	b.n	8005138 <HAL_SPI_TransmitReceive+0x220>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051ae:	462a      	mov	r2, r5
 80051b0:	4631      	mov	r1, r6
 80051b2:	4620      	mov	r0, r4
 80051b4:	f7ff fd48 	bl	8004c48 <SPI_EndRxTxTransaction>
 80051b8:	b120      	cbz	r0, 80051c4 <HAL_SPI_TransmitReceive+0x2ac>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051ba:	2320      	movs	r3, #32
 80051bc:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 80051be:	2001      	movs	r0, #1
 80051c0:	e000      	b.n	80051c4 <HAL_SPI_TransmitReceive+0x2ac>
    errorcode = HAL_BUSY;
 80051c2:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80051c4:	2301      	movs	r3, #1
 80051c6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80051ca:	2300      	movs	r3, #0
 80051cc:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80051d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 80051d4:	2002      	movs	r0, #2
 80051d6:	e7f5      	b.n	80051c4 <HAL_SPI_TransmitReceive+0x2ac>
 80051d8:	2002      	movs	r0, #2
 80051da:	e7f3      	b.n	80051c4 <HAL_SPI_TransmitReceive+0x2ac>
    errorcode = HAL_ERROR;
 80051dc:	2001      	movs	r0, #1
 80051de:	e7f1      	b.n	80051c4 <HAL_SPI_TransmitReceive+0x2ac>
 80051e0:	2001      	movs	r0, #1
 80051e2:	e7ef      	b.n	80051c4 <HAL_SPI_TransmitReceive+0x2ac>
 80051e4:	2001      	movs	r0, #1
 80051e6:	e7ed      	b.n	80051c4 <HAL_SPI_TransmitReceive+0x2ac>
        errorcode = HAL_TIMEOUT;
 80051e8:	2003      	movs	r0, #3
 80051ea:	e7eb      	b.n	80051c4 <HAL_SPI_TransmitReceive+0x2ac>
        errorcode = HAL_TIMEOUT;
 80051ec:	2003      	movs	r0, #3
 80051ee:	e7e9      	b.n	80051c4 <HAL_SPI_TransmitReceive+0x2ac>
  __HAL_LOCK(hspi);
 80051f0:	2002      	movs	r0, #2
 80051f2:	e7ed      	b.n	80051d0 <HAL_SPI_TransmitReceive+0x2b8>
 80051f4:	08009bd8 	.word	0x08009bd8

080051f8 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80051f8:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fa:	e852 3f00 	ldrex	r3, [r2]
 80051fe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005202:	e842 3100 	strex	r1, r3, [r2]
 8005206:	2900      	cmp	r1, #0
 8005208:	d1f6      	bne.n	80051f8 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800520a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520c:	f102 0308 	add.w	r3, r2, #8
 8005210:	e853 3f00 	ldrex	r3, [r3]
 8005214:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005218:	3208      	adds	r2, #8
 800521a:	e842 3100 	strex	r1, r3, [r2]
 800521e:	2900      	cmp	r1, #0
 8005220:	d1f3      	bne.n	800520a <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005222:	2320      	movs	r3, #32
 8005224:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 8005228:	4770      	bx	lr

0800522a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800522a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522c:	e852 3f00 	ldrex	r3, [r2]
 8005230:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005234:	e842 3100 	strex	r1, r3, [r2]
 8005238:	2900      	cmp	r1, #0
 800523a:	d1f6      	bne.n	800522a <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800523c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523e:	f102 0308 	add.w	r3, r2, #8
 8005242:	e853 3f00 	ldrex	r3, [r3]
 8005246:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800524a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524e:	3208      	adds	r2, #8
 8005250:	e842 3100 	strex	r1, r3, [r2]
 8005254:	2900      	cmp	r1, #0
 8005256:	d1f1      	bne.n	800523c <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005258:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800525a:	2b01      	cmp	r3, #1
 800525c:	d006      	beq.n	800526c <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800525e:	2320      	movs	r3, #32
 8005260:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005264:	2300      	movs	r3, #0
 8005266:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005268:	6703      	str	r3, [r0, #112]	; 0x70
}
 800526a:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800526c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526e:	e852 3f00 	ldrex	r3, [r2]
 8005272:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005276:	e842 3100 	strex	r1, r3, [r2]
 800527a:	2900      	cmp	r1, #0
 800527c:	d1f6      	bne.n	800526c <UART_EndRxTransfer+0x42>
 800527e:	e7ee      	b.n	800525e <UART_EndRxTransfer+0x34>

08005280 <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 8005280:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8005284:	2b20      	cmp	r3, #32
 8005286:	d14c      	bne.n	8005322 <HAL_UART_Transmit_DMA+0xa2>
{
 8005288:	b510      	push	{r4, lr}
 800528a:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800528c:	2900      	cmp	r1, #0
 800528e:	d04a      	beq.n	8005326 <HAL_UART_Transmit_DMA+0xa6>
 8005290:	2a00      	cmp	r2, #0
 8005292:	d04a      	beq.n	800532a <HAL_UART_Transmit_DMA+0xaa>
    __HAL_LOCK(huart);
 8005294:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005298:	2b01      	cmp	r3, #1
 800529a:	d048      	beq.n	800532e <HAL_UART_Transmit_DMA+0xae>
 800529c:	2301      	movs	r3, #1
 800529e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 80052a2:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 80052a4:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 80052a8:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ac:	2300      	movs	r3, #0
 80052ae:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052b2:	2321      	movs	r3, #33	; 0x21
 80052b4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 80052b8:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80052ba:	b1f3      	cbz	r3, 80052fa <HAL_UART_Transmit_DMA+0x7a>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80052bc:	491d      	ldr	r1, [pc, #116]	; (8005334 <HAL_UART_Transmit_DMA+0xb4>)
 80052be:	62d9      	str	r1, [r3, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80052c0:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80052c2:	491d      	ldr	r1, [pc, #116]	; (8005338 <HAL_UART_Transmit_DMA+0xb8>)
 80052c4:	6319      	str	r1, [r3, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80052c6:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80052c8:	491c      	ldr	r1, [pc, #112]	; (800533c <HAL_UART_Transmit_DMA+0xbc>)
 80052ca:	6359      	str	r1, [r3, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 80052cc:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80052ce:	2100      	movs	r1, #0
 80052d0:	6399      	str	r1, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80052d2:	6801      	ldr	r1, [r0, #0]
 80052d4:	4613      	mov	r3, r2
 80052d6:	f101 0228 	add.w	r2, r1, #40	; 0x28
 80052da:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80052dc:	6f80      	ldr	r0, [r0, #120]	; 0x78
 80052de:	f7fd f9bf 	bl	8002660 <HAL_DMA_Start_IT>
 80052e2:	b150      	cbz	r0, 80052fa <HAL_UART_Transmit_DMA+0x7a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80052e4:	2310      	movs	r3, #16
 80052e6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 80052ea:	2300      	movs	r3, #0
 80052ec:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 80052f0:	2320      	movs	r3, #32
 80052f2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 80052f6:	2001      	movs	r0, #1
 80052f8:	e012      	b.n	8005320 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	2240      	movs	r2, #64	; 0x40
 80052fe:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8005300:	2300      	movs	r3, #0
 8005302:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005306:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005308:	f102 0308 	add.w	r3, r2, #8
 800530c:	e853 3f00 	ldrex	r3, [r3]
 8005310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005314:	3208      	adds	r2, #8
 8005316:	e842 3100 	strex	r1, r3, [r2]
 800531a:	2900      	cmp	r1, #0
 800531c:	d1f3      	bne.n	8005306 <HAL_UART_Transmit_DMA+0x86>
    return HAL_OK;
 800531e:	2000      	movs	r0, #0
}
 8005320:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8005322:	2002      	movs	r0, #2
}
 8005324:	4770      	bx	lr
      return HAL_ERROR;
 8005326:	2001      	movs	r0, #1
 8005328:	e7fa      	b.n	8005320 <HAL_UART_Transmit_DMA+0xa0>
 800532a:	2001      	movs	r0, #1
 800532c:	e7f8      	b.n	8005320 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_LOCK(huart);
 800532e:	2002      	movs	r0, #2
 8005330:	e7f6      	b.n	8005320 <HAL_UART_Transmit_DMA+0xa0>
 8005332:	bf00      	nop
 8005334:	08005341 	.word	0x08005341
 8005338:	0800538b 	.word	0x0800538b
 800533c:	08005397 	.word	0x08005397

08005340 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005340:	b508      	push	{r3, lr}
 8005342:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005344:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f013 0f20 	tst.w	r3, #32
 800534e:	d118      	bne.n	8005382 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005356:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005358:	f102 0308 	add.w	r3, r2, #8
 800535c:	e853 3f00 	ldrex	r3, [r3]
 8005360:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005364:	3208      	adds	r2, #8
 8005366:	e842 3100 	strex	r1, r3, [r2]
 800536a:	2900      	cmp	r1, #0
 800536c:	d1f3      	bne.n	8005356 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800536e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005370:	e852 3f00 	ldrex	r3, [r2]
 8005374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005378:	e842 3100 	strex	r1, r3, [r2]
 800537c:	2900      	cmp	r1, #0
 800537e:	d1f6      	bne.n	800536e <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005380:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8005382:	f7fc fa35 	bl	80017f0 <HAL_UART_TxCpltCallback>
}
 8005386:	e7fb      	b.n	8005380 <UART_DMATransmitCplt+0x40>

08005388 <HAL_UART_TxHalfCpltCallback>:
}
 8005388:	4770      	bx	lr

0800538a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800538a:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800538c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800538e:	f7ff fffb 	bl	8005388 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005392:	bd08      	pop	{r3, pc}

08005394 <HAL_UART_ErrorCallback>:
}
 8005394:	4770      	bx	lr

08005396 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005396:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005398:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800539a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800539e:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80053aa:	d001      	beq.n	80053b0 <UART_DMAError+0x1a>
 80053ac:	2a21      	cmp	r2, #33	; 0x21
 80053ae:	d010      	beq.n	80053d2 <UART_DMAError+0x3c>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80053b8:	d001      	beq.n	80053be <UART_DMAError+0x28>
 80053ba:	2d22      	cmp	r5, #34	; 0x22
 80053bc:	d010      	beq.n	80053e0 <UART_DMAError+0x4a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80053be:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80053c2:	f043 0310 	orr.w	r3, r3, #16
 80053c6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053ca:	4620      	mov	r0, r4
 80053cc:	f7ff ffe2 	bl	8005394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053d0:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 80053d2:	2300      	movs	r3, #0
 80053d4:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80053d8:	4620      	mov	r0, r4
 80053da:	f7ff ff0d 	bl	80051f8 <UART_EndTxTransfer>
 80053de:	e7e7      	b.n	80053b0 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80053e6:	4620      	mov	r0, r4
 80053e8:	f7ff ff1f 	bl	800522a <UART_EndRxTransfer>
 80053ec:	e7e7      	b.n	80053be <UART_DMAError+0x28>

080053ee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053ee:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053f0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80053f8:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053fc:	f7ff ffca 	bl	8005394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005400:	bd08      	pop	{r3, pc}

08005402 <HAL_UARTEx_RxEventCallback>:
}
 8005402:	4770      	bx	lr

08005404 <HAL_UART_IRQHandler>:
{
 8005404:	b570      	push	{r4, r5, r6, lr}
 8005406:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005408:	6802      	ldr	r2, [r0, #0]
 800540a:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800540c:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800540e:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 8005410:	f640 050f 	movw	r5, #2063	; 0x80f
 8005414:	422b      	tst	r3, r5
 8005416:	d10d      	bne.n	8005434 <HAL_UART_IRQHandler+0x30>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005418:	f013 0f20 	tst.w	r3, #32
 800541c:	d010      	beq.n	8005440 <HAL_UART_IRQHandler+0x3c>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800541e:	f000 0520 	and.w	r5, r0, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005422:	f001 5680 	and.w	r6, r1, #268435456	; 0x10000000
 8005426:	4335      	orrs	r5, r6
 8005428:	d00a      	beq.n	8005440 <HAL_UART_IRQHandler+0x3c>
      if (huart->RxISR != NULL)
 800542a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800542c:	b38b      	cbz	r3, 8005492 <HAL_UART_IRQHandler+0x8e>
        huart->RxISR(huart);
 800542e:	4620      	mov	r0, r4
 8005430:	4798      	blx	r3
 8005432:	e02e      	b.n	8005492 <HAL_UART_IRQHandler+0x8e>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005434:	4db8      	ldr	r5, [pc, #736]	; (8005718 <HAL_UART_IRQHandler+0x314>)
 8005436:	400d      	ands	r5, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005438:	4eb8      	ldr	r6, [pc, #736]	; (800571c <HAL_UART_IRQHandler+0x318>)
 800543a:	4006      	ands	r6, r0
 800543c:	432e      	orrs	r6, r5
 800543e:	d129      	bne.n	8005494 <HAL_UART_IRQHandler+0x90>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005440:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8005442:	2d01      	cmp	r5, #1
 8005444:	f000 80c1 	beq.w	80055ca <HAL_UART_IRQHandler+0x1c6>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005448:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800544c:	d003      	beq.n	8005456 <HAL_UART_IRQHandler+0x52>
 800544e:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8005452:	f040 8152 	bne.w	80056fa <HAL_UART_IRQHandler+0x2f6>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005456:	f013 0f80 	tst.w	r3, #128	; 0x80
 800545a:	d006      	beq.n	800546a <HAL_UART_IRQHandler+0x66>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800545c:	f000 0280 	and.w	r2, r0, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005460:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8005464:	430a      	orrs	r2, r1
 8005466:	f040 814f 	bne.w	8005708 <HAL_UART_IRQHandler+0x304>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800546a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800546e:	d003      	beq.n	8005478 <HAL_UART_IRQHandler+0x74>
 8005470:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005474:	f040 8156 	bne.w	8005724 <HAL_UART_IRQHandler+0x320>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005478:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800547c:	d003      	beq.n	8005486 <HAL_UART_IRQHandler+0x82>
 800547e:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005482:	f040 8161 	bne.w	8005748 <HAL_UART_IRQHandler+0x344>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005486:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800548a:	d002      	beq.n	8005492 <HAL_UART_IRQHandler+0x8e>
 800548c:	2800      	cmp	r0, #0
 800548e:	f2c0 815f 	blt.w	8005750 <HAL_UART_IRQHandler+0x34c>
}
 8005492:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005494:	f013 0f01 	tst.w	r3, #1
 8005498:	d009      	beq.n	80054ae <HAL_UART_IRQHandler+0xaa>
 800549a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800549e:	d006      	beq.n	80054ae <HAL_UART_IRQHandler+0xaa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80054a0:	2601      	movs	r6, #1
 80054a2:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054a4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80054a8:	4332      	orrs	r2, r6
 80054aa:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054ae:	f013 0f02 	tst.w	r3, #2
 80054b2:	d074      	beq.n	800559e <HAL_UART_IRQHandler+0x19a>
 80054b4:	f011 0f01 	tst.w	r1, #1
 80054b8:	d014      	beq.n	80054e4 <HAL_UART_IRQHandler+0xe0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80054ba:	6822      	ldr	r2, [r4, #0]
 80054bc:	2602      	movs	r6, #2
 80054be:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054c0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80054c4:	f042 0204 	orr.w	r2, r2, #4
 80054c8:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054cc:	f013 0f04 	tst.w	r3, #4
 80054d0:	d008      	beq.n	80054e4 <HAL_UART_IRQHandler+0xe0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80054d2:	6822      	ldr	r2, [r4, #0]
 80054d4:	2604      	movs	r6, #4
 80054d6:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054d8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80054dc:	f042 0202 	orr.w	r2, r2, #2
 80054e0:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80054e4:	f013 0f08 	tst.w	r3, #8
 80054e8:	d00b      	beq.n	8005502 <HAL_UART_IRQHandler+0xfe>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80054ea:	f000 0220 	and.w	r2, r0, #32
 80054ee:	432a      	orrs	r2, r5
 80054f0:	d007      	beq.n	8005502 <HAL_UART_IRQHandler+0xfe>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054f2:	6822      	ldr	r2, [r4, #0]
 80054f4:	2508      	movs	r5, #8
 80054f6:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054f8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80054fc:	432a      	orrs	r2, r5
 80054fe:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005502:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005506:	d00c      	beq.n	8005522 <HAL_UART_IRQHandler+0x11e>
 8005508:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 800550c:	d009      	beq.n	8005522 <HAL_UART_IRQHandler+0x11e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800550e:	6822      	ldr	r2, [r4, #0]
 8005510:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8005514:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005516:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800551a:	f042 0220 	orr.w	r2, r2, #32
 800551e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005522:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005526:	2a00      	cmp	r2, #0
 8005528:	d0b3      	beq.n	8005492 <HAL_UART_IRQHandler+0x8e>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800552a:	f013 0f20 	tst.w	r3, #32
 800552e:	d00a      	beq.n	8005546 <HAL_UART_IRQHandler+0x142>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005530:	f000 0020 	and.w	r0, r0, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005534:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8005538:	ea50 0301 	orrs.w	r3, r0, r1
 800553c:	d003      	beq.n	8005546 <HAL_UART_IRQHandler+0x142>
        if (huart->RxISR != NULL)
 800553e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005540:	b10b      	cbz	r3, 8005546 <HAL_UART_IRQHandler+0x142>
          huart->RxISR(huart);
 8005542:	4620      	mov	r0, r4
 8005544:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8005546:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800554a:	6822      	ldr	r2, [r4, #0]
 800554c:	6892      	ldr	r2, [r2, #8]
 800554e:	f002 0240 	and.w	r2, r2, #64	; 0x40
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005552:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005556:	4313      	orrs	r3, r2
 8005558:	d030      	beq.n	80055bc <HAL_UART_IRQHandler+0x1b8>
        UART_EndRxTransfer(huart);
 800555a:	4620      	mov	r0, r4
 800555c:	f7ff fe65 	bl	800522a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005560:	6823      	ldr	r3, [r4, #0]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005568:	d024      	beq.n	80055b4 <HAL_UART_IRQHandler+0x1b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800556a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556c:	f102 0308 	add.w	r3, r2, #8
 8005570:	e853 3f00 	ldrex	r3, [r3]
 8005574:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005578:	3208      	adds	r2, #8
 800557a:	e842 3100 	strex	r1, r3, [r2]
 800557e:	2900      	cmp	r1, #0
 8005580:	d1f3      	bne.n	800556a <HAL_UART_IRQHandler+0x166>
          if (huart->hdmarx != NULL)
 8005582:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005584:	b193      	cbz	r3, 80055ac <HAL_UART_IRQHandler+0x1a8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005586:	4a66      	ldr	r2, [pc, #408]	; (8005720 <HAL_UART_IRQHandler+0x31c>)
 8005588:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800558a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800558c:	f7fd f900 	bl	8002790 <HAL_DMA_Abort_IT>
 8005590:	2800      	cmp	r0, #0
 8005592:	f43f af7e 	beq.w	8005492 <HAL_UART_IRQHandler+0x8e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005596:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005598:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800559a:	4798      	blx	r3
 800559c:	e779      	b.n	8005492 <HAL_UART_IRQHandler+0x8e>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800559e:	f013 0f04 	tst.w	r3, #4
 80055a2:	d09f      	beq.n	80054e4 <HAL_UART_IRQHandler+0xe0>
 80055a4:	f011 0f01 	tst.w	r1, #1
 80055a8:	d09c      	beq.n	80054e4 <HAL_UART_IRQHandler+0xe0>
 80055aa:	e792      	b.n	80054d2 <HAL_UART_IRQHandler+0xce>
            HAL_UART_ErrorCallback(huart);
 80055ac:	4620      	mov	r0, r4
 80055ae:	f7ff fef1 	bl	8005394 <HAL_UART_ErrorCallback>
 80055b2:	e76e      	b.n	8005492 <HAL_UART_IRQHandler+0x8e>
          HAL_UART_ErrorCallback(huart);
 80055b4:	4620      	mov	r0, r4
 80055b6:	f7ff feed 	bl	8005394 <HAL_UART_ErrorCallback>
 80055ba:	e76a      	b.n	8005492 <HAL_UART_IRQHandler+0x8e>
        HAL_UART_ErrorCallback(huart);
 80055bc:	4620      	mov	r0, r4
 80055be:	f7ff fee9 	bl	8005394 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c2:	2300      	movs	r3, #0
 80055c4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80055c8:	e763      	b.n	8005492 <HAL_UART_IRQHandler+0x8e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80055ca:	f013 0f10 	tst.w	r3, #16
 80055ce:	f43f af3b 	beq.w	8005448 <HAL_UART_IRQHandler+0x44>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80055d2:	f010 0f10 	tst.w	r0, #16
 80055d6:	f43f af37 	beq.w	8005448 <HAL_UART_IRQHandler+0x44>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055da:	2310      	movs	r3, #16
 80055dc:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055de:	6823      	ldr	r3, [r4, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80055e6:	d04e      	beq.n	8005686 <HAL_UART_IRQHandler+0x282>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055e8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80055ea:	6813      	ldr	r3, [r2, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f43f af4e 	beq.w	8005492 <HAL_UART_IRQHandler+0x8e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80055f6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80055fa:	4299      	cmp	r1, r3
 80055fc:	f67f af49 	bls.w	8005492 <HAL_UART_IRQHandler+0x8e>
        huart->RxXferCount = nb_remaining_rx_data;
 8005600:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005604:	6813      	ldr	r3, [r2, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f013 0f20 	tst.w	r3, #32
 800560c:	d131      	bne.n	8005672 <HAL_UART_IRQHandler+0x26e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800560e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005610:	e852 3f00 	ldrex	r3, [r2]
 8005614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005618:	e842 3100 	strex	r1, r3, [r2]
 800561c:	2900      	cmp	r1, #0
 800561e:	d1f6      	bne.n	800560e <HAL_UART_IRQHandler+0x20a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005620:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005622:	f102 0308 	add.w	r3, r2, #8
 8005626:	e853 3f00 	ldrex	r3, [r3]
 800562a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562e:	3208      	adds	r2, #8
 8005630:	e842 3100 	strex	r1, r3, [r2]
 8005634:	2900      	cmp	r1, #0
 8005636:	d1f3      	bne.n	8005620 <HAL_UART_IRQHandler+0x21c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005638:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563a:	f102 0308 	add.w	r3, r2, #8
 800563e:	e853 3f00 	ldrex	r3, [r3]
 8005642:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005646:	3208      	adds	r2, #8
 8005648:	e842 3100 	strex	r1, r3, [r2]
 800564c:	2900      	cmp	r1, #0
 800564e:	d1f3      	bne.n	8005638 <HAL_UART_IRQHandler+0x234>
          huart->RxState = HAL_UART_STATE_READY;
 8005650:	2320      	movs	r3, #32
 8005652:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005656:	2300      	movs	r3, #0
 8005658:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800565a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565c:	e852 3f00 	ldrex	r3, [r2]
 8005660:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005664:	e842 3100 	strex	r1, r3, [r2]
 8005668:	2900      	cmp	r1, #0
 800566a:	d1f6      	bne.n	800565a <HAL_UART_IRQHandler+0x256>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800566c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800566e:	f7fd f855 	bl	800271c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005672:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005676:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800567a:	1ac9      	subs	r1, r1, r3
 800567c:	b289      	uxth	r1, r1
 800567e:	4620      	mov	r0, r4
 8005680:	f7ff febf 	bl	8005402 <HAL_UARTEx_RxEventCallback>
 8005684:	e705      	b.n	8005492 <HAL_UART_IRQHandler+0x8e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005686:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800568a:	b29a      	uxth	r2, r3
      if (  (huart->RxXferCount > 0U)
 800568c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005690:	b29b      	uxth	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	f43f aefd 	beq.w	8005492 <HAL_UART_IRQHandler+0x8e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005698:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 800569c:	1a9b      	subs	r3, r3, r2
 800569e:	b299      	uxth	r1, r3
          &&(nb_rx_data > 0U) )
 80056a0:	2900      	cmp	r1, #0
 80056a2:	f43f aef6 	beq.w	8005492 <HAL_UART_IRQHandler+0x8e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056a6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a8:	e852 3f00 	ldrex	r3, [r2]
 80056ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b0:	e842 3000 	strex	r0, r3, [r2]
 80056b4:	2800      	cmp	r0, #0
 80056b6:	d1f6      	bne.n	80056a6 <HAL_UART_IRQHandler+0x2a2>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80056b8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ba:	f102 0308 	add.w	r3, r2, #8
 80056be:	e853 3f00 	ldrex	r3, [r3]
 80056c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056c6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ca:	3208      	adds	r2, #8
 80056cc:	e842 3000 	strex	r0, r3, [r2]
 80056d0:	2800      	cmp	r0, #0
 80056d2:	d1f1      	bne.n	80056b8 <HAL_UART_IRQHandler+0x2b4>
        huart->RxState = HAL_UART_STATE_READY;
 80056d4:	2320      	movs	r3, #32
 80056d6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056da:	2300      	movs	r3, #0
 80056dc:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 80056de:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056e0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e2:	e852 3f00 	ldrex	r3, [r2]
 80056e6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ea:	e842 3000 	strex	r0, r3, [r2]
 80056ee:	2800      	cmp	r0, #0
 80056f0:	d1f6      	bne.n	80056e0 <HAL_UART_IRQHandler+0x2dc>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056f2:	4620      	mov	r0, r4
 80056f4:	f7ff fe85 	bl	8005402 <HAL_UARTEx_RxEventCallback>
 80056f8:	e6cb      	b.n	8005492 <HAL_UART_IRQHandler+0x8e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80056fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80056fe:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8005700:	4620      	mov	r0, r4
 8005702:	f000 fc61 	bl	8005fc8 <HAL_UARTEx_WakeupCallback>
    return;
 8005706:	e6c4      	b.n	8005492 <HAL_UART_IRQHandler+0x8e>
    if (huart->TxISR != NULL)
 8005708:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800570a:	2b00      	cmp	r3, #0
 800570c:	f43f aec1 	beq.w	8005492 <HAL_UART_IRQHandler+0x8e>
      huart->TxISR(huart);
 8005710:	4620      	mov	r0, r4
 8005712:	4798      	blx	r3
 8005714:	e6bd      	b.n	8005492 <HAL_UART_IRQHandler+0x8e>
 8005716:	bf00      	nop
 8005718:	10000001 	.word	0x10000001
 800571c:	04000120 	.word	0x04000120
 8005720:	080053ef 	.word	0x080053ef
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005724:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005726:	e852 3f00 	ldrex	r3, [r2]
 800572a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572e:	e842 3100 	strex	r1, r3, [r2]
 8005732:	2900      	cmp	r1, #0
 8005734:	d1f6      	bne.n	8005724 <HAL_UART_IRQHandler+0x320>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005736:	2320      	movs	r3, #32
 8005738:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800573c:	2300      	movs	r3, #0
 800573e:	6763      	str	r3, [r4, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005740:	4620      	mov	r0, r4
 8005742:	f7fc f855 	bl	80017f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005746:	e6a4      	b.n	8005492 <HAL_UART_IRQHandler+0x8e>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005748:	4620      	mov	r0, r4
 800574a:	f000 fc3f 	bl	8005fcc <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800574e:	e6a0      	b.n	8005492 <HAL_UART_IRQHandler+0x8e>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005750:	4620      	mov	r0, r4
 8005752:	f000 fc3a 	bl	8005fca <HAL_UARTEx_RxFifoFullCallback>
    return;
 8005756:	e69c      	b.n	8005492 <HAL_UART_IRQHandler+0x8e>

08005758 <UART_SetConfig>:
{
 8005758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800575c:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800575e:	6842      	ldr	r2, [r0, #4]
 8005760:	4ba8      	ldr	r3, [pc, #672]	; (8005a04 <UART_SetConfig+0x2ac>)
 8005762:	429a      	cmp	r2, r3
 8005764:	f200 808f 	bhi.w	8005886 <UART_SetConfig+0x12e>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005768:	68a3      	ldr	r3, [r4, #8]
 800576a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800576e:	d007      	beq.n	8005780 <UART_SetConfig+0x28>
 8005770:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8005774:	d004      	beq.n	8005780 <UART_SetConfig+0x28>
 8005776:	f640 411d 	movw	r1, #3101	; 0xc1d
 800577a:	48a3      	ldr	r0, [pc, #652]	; (8005a08 <UART_SetConfig+0x2b0>)
 800577c:	f7fc fa04 	bl	8001b88 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005780:	6822      	ldr	r2, [r4, #0]
 8005782:	4ba2      	ldr	r3, [pc, #648]	; (8005a0c <UART_SetConfig+0x2b4>)
 8005784:	429a      	cmp	r2, r3
 8005786:	f000 8084 	beq.w	8005892 <UART_SetConfig+0x13a>
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800578a:	68e3      	ldr	r3, [r4, #12]
 800578c:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8005790:	d003      	beq.n	800579a <UART_SetConfig+0x42>
 8005792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005796:	f040 8086 	bne.w	80058a6 <UART_SetConfig+0x14e>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800579a:	6a23      	ldr	r3, [r4, #32]
 800579c:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 80057a0:	d004      	beq.n	80057ac <UART_SetConfig+0x54>
 80057a2:	f640 4126 	movw	r1, #3110	; 0xc26
 80057a6:	4898      	ldr	r0, [pc, #608]	; (8005a08 <UART_SetConfig+0x2b0>)
 80057a8:	f7fc f9ee 	bl	8001b88 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80057ac:	6923      	ldr	r3, [r4, #16]
 80057ae:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80057b2:	d002      	beq.n	80057ba <UART_SetConfig+0x62>
 80057b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80057b8:	d17b      	bne.n	80058b2 <UART_SetConfig+0x15a>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80057ba:	6963      	ldr	r3, [r4, #20]
 80057bc:	f033 020c 	bics.w	r2, r3, #12
 80057c0:	d100      	bne.n	80057c4 <UART_SetConfig+0x6c>
 80057c2:	b923      	cbnz	r3, 80057ce <UART_SetConfig+0x76>
 80057c4:	f640 412e 	movw	r1, #3118	; 0xc2e
 80057c8:	488f      	ldr	r0, [pc, #572]	; (8005a08 <UART_SetConfig+0x2b0>)
 80057ca:	f7fc f9dd 	bl	8001b88 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80057ce:	69a3      	ldr	r3, [r4, #24]
 80057d0:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 80057d4:	d007      	beq.n	80057e6 <UART_SetConfig+0x8e>
 80057d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057da:	d004      	beq.n	80057e6 <UART_SetConfig+0x8e>
 80057dc:	f640 412f 	movw	r1, #3119	; 0xc2f
 80057e0:	4889      	ldr	r0, [pc, #548]	; (8005a08 <UART_SetConfig+0x2b0>)
 80057e2:	f7fc f9d1 	bl	8001b88 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80057e6:	69e3      	ldr	r3, [r4, #28]
 80057e8:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 80057ec:	d004      	beq.n	80057f8 <UART_SetConfig+0xa0>
 80057ee:	f44f 6143 	mov.w	r1, #3120	; 0xc30
 80057f2:	4885      	ldr	r0, [pc, #532]	; (8005a08 <UART_SetConfig+0x2b0>)
 80057f4:	f7fc f9c8 	bl	8001b88 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 80057f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057fa:	2b0b      	cmp	r3, #11
 80057fc:	d85f      	bhi.n	80058be <UART_SetConfig+0x166>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057fe:	6821      	ldr	r1, [r4, #0]
 8005800:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005802:	68a3      	ldr	r3, [r4, #8]
 8005804:	6922      	ldr	r2, [r4, #16]
 8005806:	4313      	orrs	r3, r2
 8005808:	6962      	ldr	r2, [r4, #20]
 800580a:	4313      	orrs	r3, r2
 800580c:	69e2      	ldr	r2, [r4, #28]
 800580e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005810:	4a7f      	ldr	r2, [pc, #508]	; (8005a10 <UART_SetConfig+0x2b8>)
 8005812:	4002      	ands	r2, r0
 8005814:	4313      	orrs	r3, r2
 8005816:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005818:	6822      	ldr	r2, [r4, #0]
 800581a:	6853      	ldr	r3, [r2, #4]
 800581c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005820:	68e1      	ldr	r1, [r4, #12]
 8005822:	430b      	orrs	r3, r1
 8005824:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005826:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005828:	6822      	ldr	r2, [r4, #0]
 800582a:	4b78      	ldr	r3, [pc, #480]	; (8005a0c <UART_SetConfig+0x2b4>)
 800582c:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 800582e:	bf1c      	itt	ne
 8005830:	6a23      	ldrne	r3, [r4, #32]
 8005832:	4319      	orrne	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005834:	6893      	ldr	r3, [r2, #8]
 8005836:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800583a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800583e:	430b      	orrs	r3, r1
 8005840:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005842:	6822      	ldr	r2, [r4, #0]
 8005844:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005846:	f023 030f 	bic.w	r3, r3, #15
 800584a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800584c:	430b      	orrs	r3, r1
 800584e:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005850:	6823      	ldr	r3, [r4, #0]
 8005852:	4a70      	ldr	r2, [pc, #448]	; (8005a14 <UART_SetConfig+0x2bc>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d038      	beq.n	80058ca <UART_SetConfig+0x172>
 8005858:	4a6c      	ldr	r2, [pc, #432]	; (8005a0c <UART_SetConfig+0x2b4>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d047      	beq.n	80058ee <UART_SetConfig+0x196>
 800585e:	2310      	movs	r3, #16
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005860:	69e0      	ldr	r0, [r4, #28]
 8005862:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005866:	f000 809b 	beq.w	80059a0 <UART_SetConfig+0x248>
    switch (clocksource)
 800586a:	3b01      	subs	r3, #1
 800586c:	2b07      	cmp	r3, #7
 800586e:	f200 810c 	bhi.w	8005a8a <UART_SetConfig+0x332>
 8005872:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005876:	00d7      	.short	0x00d7
 8005878:	010a00fc 	.word	0x010a00fc
 800587c:	010a00f9 	.word	0x010a00f9
 8005880:	010a010a 	.word	0x010a010a
 8005884:	00c4      	.short	0x00c4
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005886:	f640 411c 	movw	r1, #3100	; 0xc1c
 800588a:	485f      	ldr	r0, [pc, #380]	; (8005a08 <UART_SetConfig+0x2b0>)
 800588c:	f7fc f97c 	bl	8001b88 <assert_failed>
 8005890:	e76a      	b.n	8005768 <UART_SetConfig+0x10>
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8005892:	68e3      	ldr	r3, [r4, #12]
 8005894:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8005898:	d088      	beq.n	80057ac <UART_SetConfig+0x54>
 800589a:	f640 4121 	movw	r1, #3105	; 0xc21
 800589e:	485a      	ldr	r0, [pc, #360]	; (8005a08 <UART_SetConfig+0x2b0>)
 80058a0:	f7fc f972 	bl	8001b88 <assert_failed>
 80058a4:	e782      	b.n	80057ac <UART_SetConfig+0x54>
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80058a6:	f640 4125 	movw	r1, #3109	; 0xc25
 80058aa:	4857      	ldr	r0, [pc, #348]	; (8005a08 <UART_SetConfig+0x2b0>)
 80058ac:	f7fc f96c 	bl	8001b88 <assert_failed>
 80058b0:	e773      	b.n	800579a <UART_SetConfig+0x42>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80058b2:	f640 412d 	movw	r1, #3117	; 0xc2d
 80058b6:	4854      	ldr	r0, [pc, #336]	; (8005a08 <UART_SetConfig+0x2b0>)
 80058b8:	f7fc f966 	bl	8001b88 <assert_failed>
 80058bc:	e77d      	b.n	80057ba <UART_SetConfig+0x62>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 80058be:	f640 4131 	movw	r1, #3121	; 0xc31
 80058c2:	4851      	ldr	r0, [pc, #324]	; (8005a08 <UART_SetConfig+0x2b0>)
 80058c4:	f7fc f960 	bl	8001b88 <assert_failed>
 80058c8:	e799      	b.n	80057fe <UART_SetConfig+0xa6>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80058ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058ce:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80058d2:	f002 0203 	and.w	r2, r2, #3
 80058d6:	2a03      	cmp	r2, #3
 80058d8:	d807      	bhi.n	80058ea <UART_SetConfig+0x192>
 80058da:	e8df f012 	tbh	[pc, r2, lsl #1]
 80058de:	0051      	.short	0x0051
 80058e0:	00dc0004 	.word	0x00dc0004
 80058e4:	00de      	.short	0x00de
 80058e6:	2304      	movs	r3, #4
 80058e8:	e7ba      	b.n	8005860 <UART_SetConfig+0x108>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058ea:	2310      	movs	r3, #16
 80058ec:	e7b8      	b.n	8005860 <UART_SetConfig+0x108>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80058ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80058fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058fe:	d04d      	beq.n	800599c <UART_SetConfig+0x244>
 8005900:	d80a      	bhi.n	8005918 <UART_SetConfig+0x1c0>
 8005902:	2b00      	cmp	r3, #0
 8005904:	d044      	beq.n	8005990 <UART_SetConfig+0x238>
 8005906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800590a:	bf18      	it	ne
 800590c:	2001      	movne	r0, #1
 800590e:	f040 80a1 	bne.w	8005a54 <UART_SetConfig+0x2fc>
        pclk = HAL_RCC_GetSysClockFreq();
 8005912:	f7fd fa17 	bl	8002d44 <HAL_RCC_GetSysClockFreq>
        break;
 8005916:	e03d      	b.n	8005994 <UART_SetConfig+0x23c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005918:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800591c:	d12e      	bne.n	800597c <UART_SetConfig+0x224>
        pclk = (uint32_t) LSE_VALUE;
 800591e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005922:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005924:	4b3c      	ldr	r3, [pc, #240]	; (8005a18 <UART_SetConfig+0x2c0>)
 8005926:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800592a:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800592e:	6865      	ldr	r5, [r4, #4]
 8005930:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8005934:	4299      	cmp	r1, r3
 8005936:	f200 809c 	bhi.w	8005a72 <UART_SetConfig+0x31a>
 800593a:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800593e:	f200 809a 	bhi.w	8005a76 <UART_SetConfig+0x31e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005942:	f04f 0800 	mov.w	r8, #0
 8005946:	b292      	uxth	r2, r2
 8005948:	2300      	movs	r3, #0
 800594a:	4641      	mov	r1, r8
 800594c:	f7fa fc68 	bl	8000220 <__aeabi_uldivmod>
 8005950:	020f      	lsls	r7, r1, #8
 8005952:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8005956:	0206      	lsls	r6, r0, #8
 8005958:	0868      	lsrs	r0, r5, #1
 800595a:	462a      	mov	r2, r5
 800595c:	4643      	mov	r3, r8
 800595e:	1830      	adds	r0, r6, r0
 8005960:	f147 0100 	adc.w	r1, r7, #0
 8005964:	f7fa fc5c 	bl	8000220 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005968:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800596c:	4b2b      	ldr	r3, [pc, #172]	; (8005a1c <UART_SetConfig+0x2c4>)
 800596e:	429a      	cmp	r2, r3
 8005970:	f200 8083 	bhi.w	8005a7a <UART_SetConfig+0x322>
          huart->Instance->BRR = usartdiv;
 8005974:	6823      	ldr	r3, [r4, #0]
 8005976:	60d8      	str	r0, [r3, #12]
 8005978:	4640      	mov	r0, r8
 800597a:	e06b      	b.n	8005a54 <UART_SetConfig+0x2fc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800597c:	2001      	movs	r0, #1
 800597e:	e069      	b.n	8005a54 <UART_SetConfig+0x2fc>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005980:	4a22      	ldr	r2, [pc, #136]	; (8005a0c <UART_SetConfig+0x2b4>)
 8005982:	4293      	cmp	r3, r2
 8005984:	bf18      	it	ne
 8005986:	2301      	movne	r3, #1
 8005988:	f47f af6a 	bne.w	8005860 <UART_SetConfig+0x108>
 800598c:	2001      	movs	r0, #1
 800598e:	e061      	b.n	8005a54 <UART_SetConfig+0x2fc>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005990:	f7fe f814 	bl	80039bc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005994:	2800      	cmp	r0, #0
 8005996:	d1c4      	bne.n	8005922 <UART_SetConfig+0x1ca>
 8005998:	2000      	movs	r0, #0
 800599a:	e05b      	b.n	8005a54 <UART_SetConfig+0x2fc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800599c:	4820      	ldr	r0, [pc, #128]	; (8005a20 <UART_SetConfig+0x2c8>)
 800599e:	e7c0      	b.n	8005922 <UART_SetConfig+0x1ca>
    switch (clocksource)
 80059a0:	3b01      	subs	r3, #1
 80059a2:	2b07      	cmp	r3, #7
 80059a4:	d86b      	bhi.n	8005a7e <UART_SetConfig+0x326>
 80059a6:	e8df f003 	tbb	[pc, r3]
 80059aa:	2804      	.short	0x2804
 80059ac:	6a6a256a 	.word	0x6a6a256a
 80059b0:	086a      	.short	0x086a
        pclk = HAL_RCC_GetPCLK2Freq();
 80059b2:	f7fe f815 	bl	80039e0 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80059b6:	2800      	cmp	r0, #0
 80059b8:	d063      	beq.n	8005a82 <UART_SetConfig+0x32a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059ba:	6862      	ldr	r2, [r4, #4]
 80059bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80059be:	4b16      	ldr	r3, [pc, #88]	; (8005a18 <UART_SetConfig+0x2c0>)
 80059c0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80059c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80059c8:	0853      	lsrs	r3, r2, #1
 80059ca:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80059ce:	fbb0 f0f2 	udiv	r0, r0, r2
 80059d2:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059d4:	f1a3 0110 	sub.w	r1, r3, #16
 80059d8:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80059dc:	4291      	cmp	r1, r2
 80059de:	d852      	bhi.n	8005a86 <UART_SetConfig+0x32e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059e0:	f020 000f 	bic.w	r0, r0, #15
 80059e4:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 80059e6:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059e8:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80059ec:	4318      	orrs	r0, r3
 80059ee:	60d0      	str	r0, [r2, #12]
 80059f0:	2000      	movs	r0, #0
 80059f2:	e02f      	b.n	8005a54 <UART_SetConfig+0x2fc>
        pclk = HAL_RCC_GetSysClockFreq();
 80059f4:	f7fd f9a6 	bl	8002d44 <HAL_RCC_GetSysClockFreq>
        break;
 80059f8:	e7dd      	b.n	80059b6 <UART_SetConfig+0x25e>
        pclk = (uint32_t) HSI_VALUE;
 80059fa:	4809      	ldr	r0, [pc, #36]	; (8005a20 <UART_SetConfig+0x2c8>)
 80059fc:	e7dd      	b.n	80059ba <UART_SetConfig+0x262>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059fe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005a02:	e012      	b.n	8005a2a <UART_SetConfig+0x2d2>
 8005a04:	007a1200 	.word	0x007a1200
 8005a08:	08009c10 	.word	0x08009c10
 8005a0c:	40008000 	.word	0x40008000
 8005a10:	cfff69f3 	.word	0xcfff69f3
 8005a14:	40013800 	.word	0x40013800
 8005a18:	08009c4c 	.word	0x08009c4c
 8005a1c:	000ffcff 	.word	0x000ffcff
 8005a20:	00f42400 	.word	0x00f42400
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a24:	f7fd ffdc 	bl	80039e0 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8005a28:	b388      	cbz	r0, 8005a8e <UART_SetConfig+0x336>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a2a:	6863      	ldr	r3, [r4, #4]
 8005a2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005a2e:	4a1c      	ldr	r2, [pc, #112]	; (8005aa0 <UART_SetConfig+0x348>)
 8005a30:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8005a34:	fbb0 f0f2 	udiv	r0, r0, r2
 8005a38:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005a3c:	fbb0 f0f3 	udiv	r0, r0, r3
 8005a40:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a42:	f1a0 0210 	sub.w	r2, r0, #16
 8005a46:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d821      	bhi.n	8005a92 <UART_SetConfig+0x33a>
        huart->Instance->BRR = usartdiv;
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	60d8      	str	r0, [r3, #12]
 8005a52:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8005a54:	2301      	movs	r3, #1
 8005a56:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005a5a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8005a62:	6763      	str	r3, [r4, #116]	; 0x74
}
 8005a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pclk = HAL_RCC_GetSysClockFreq();
 8005a68:	f7fd f96c 	bl	8002d44 <HAL_RCC_GetSysClockFreq>
        break;
 8005a6c:	e7dc      	b.n	8005a28 <UART_SetConfig+0x2d0>
        pclk = (uint32_t) HSI_VALUE;
 8005a6e:	480d      	ldr	r0, [pc, #52]	; (8005aa4 <UART_SetConfig+0x34c>)
 8005a70:	e7db      	b.n	8005a2a <UART_SetConfig+0x2d2>
        ret = HAL_ERROR;
 8005a72:	2001      	movs	r0, #1
 8005a74:	e7ee      	b.n	8005a54 <UART_SetConfig+0x2fc>
 8005a76:	2001      	movs	r0, #1
 8005a78:	e7ec      	b.n	8005a54 <UART_SetConfig+0x2fc>
          ret = HAL_ERROR;
 8005a7a:	2001      	movs	r0, #1
 8005a7c:	e7ea      	b.n	8005a54 <UART_SetConfig+0x2fc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a7e:	2001      	movs	r0, #1
 8005a80:	e7e8      	b.n	8005a54 <UART_SetConfig+0x2fc>
 8005a82:	2000      	movs	r0, #0
 8005a84:	e7e6      	b.n	8005a54 <UART_SetConfig+0x2fc>
        ret = HAL_ERROR;
 8005a86:	2001      	movs	r0, #1
 8005a88:	e7e4      	b.n	8005a54 <UART_SetConfig+0x2fc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a8a:	2001      	movs	r0, #1
 8005a8c:	e7e2      	b.n	8005a54 <UART_SetConfig+0x2fc>
 8005a8e:	2000      	movs	r0, #0
 8005a90:	e7e0      	b.n	8005a54 <UART_SetConfig+0x2fc>
        ret = HAL_ERROR;
 8005a92:	2001      	movs	r0, #1
 8005a94:	e7de      	b.n	8005a54 <UART_SetConfig+0x2fc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a96:	2302      	movs	r3, #2
 8005a98:	e6e2      	b.n	8005860 <UART_SetConfig+0x108>
 8005a9a:	2308      	movs	r3, #8
 8005a9c:	e6e0      	b.n	8005860 <UART_SetConfig+0x108>
 8005a9e:	bf00      	nop
 8005aa0:	08009c4c 	.word	0x08009c4c
 8005aa4:	00f42400 	.word	0x00f42400

08005aa8 <UART_AdvFeatureConfig>:
{
 8005aa8:	b510      	push	{r4, lr}
 8005aaa:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8005aac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005aae:	2bff      	cmp	r3, #255	; 0xff
 8005ab0:	f200 80ae 	bhi.w	8005c10 <UART_AdvFeatureConfig+0x168>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ab4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005ab6:	f013 0f01 	tst.w	r3, #1
 8005aba:	d00f      	beq.n	8005adc <UART_AdvFeatureConfig+0x34>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8005abc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005abe:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8005ac2:	d004      	beq.n	8005ace <UART_AdvFeatureConfig+0x26>
 8005ac4:	f640 41f9 	movw	r1, #3321	; 0xcf9
 8005ac8:	485e      	ldr	r0, [pc, #376]	; (8005c44 <UART_AdvFeatureConfig+0x19c>)
 8005aca:	f7fc f85d 	bl	8001b88 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ace:	6822      	ldr	r2, [r4, #0]
 8005ad0:	6853      	ldr	r3, [r2, #4]
 8005ad2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ad6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005ad8:	430b      	orrs	r3, r1
 8005ada:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005adc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005ade:	f013 0f02 	tst.w	r3, #2
 8005ae2:	d00f      	beq.n	8005b04 <UART_AdvFeatureConfig+0x5c>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8005ae4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005ae6:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8005aea:	d004      	beq.n	8005af6 <UART_AdvFeatureConfig+0x4e>
 8005aec:	f44f 6150 	mov.w	r1, #3328	; 0xd00
 8005af0:	4854      	ldr	r0, [pc, #336]	; (8005c44 <UART_AdvFeatureConfig+0x19c>)
 8005af2:	f7fc f849 	bl	8001b88 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005af6:	6822      	ldr	r2, [r4, #0]
 8005af8:	6853      	ldr	r3, [r2, #4]
 8005afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005afe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005b00:	430b      	orrs	r3, r1
 8005b02:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005b06:	f013 0f04 	tst.w	r3, #4
 8005b0a:	d00f      	beq.n	8005b2c <UART_AdvFeatureConfig+0x84>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8005b0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b0e:	f433 2380 	bics.w	r3, r3, #262144	; 0x40000
 8005b12:	d004      	beq.n	8005b1e <UART_AdvFeatureConfig+0x76>
 8005b14:	f640 5107 	movw	r1, #3335	; 0xd07
 8005b18:	484a      	ldr	r0, [pc, #296]	; (8005c44 <UART_AdvFeatureConfig+0x19c>)
 8005b1a:	f7fc f835 	bl	8001b88 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b1e:	6822      	ldr	r2, [r4, #0]
 8005b20:	6853      	ldr	r3, [r2, #4]
 8005b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b28:	430b      	orrs	r3, r1
 8005b2a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005b2e:	f013 0f08 	tst.w	r3, #8
 8005b32:	d00f      	beq.n	8005b54 <UART_AdvFeatureConfig+0xac>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8005b34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005b36:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8005b3a:	d004      	beq.n	8005b46 <UART_AdvFeatureConfig+0x9e>
 8005b3c:	f640 510e 	movw	r1, #3342	; 0xd0e
 8005b40:	4840      	ldr	r0, [pc, #256]	; (8005c44 <UART_AdvFeatureConfig+0x19c>)
 8005b42:	f7fc f821 	bl	8001b88 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b46:	6822      	ldr	r2, [r4, #0]
 8005b48:	6853      	ldr	r3, [r2, #4]
 8005b4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b4e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005b50:	430b      	orrs	r3, r1
 8005b52:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005b56:	f013 0f10 	tst.w	r3, #16
 8005b5a:	d00f      	beq.n	8005b7c <UART_AdvFeatureConfig+0xd4>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8005b5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b5e:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8005b62:	d004      	beq.n	8005b6e <UART_AdvFeatureConfig+0xc6>
 8005b64:	f640 5115 	movw	r1, #3349	; 0xd15
 8005b68:	4836      	ldr	r0, [pc, #216]	; (8005c44 <UART_AdvFeatureConfig+0x19c>)
 8005b6a:	f7fc f80d 	bl	8001b88 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b6e:	6822      	ldr	r2, [r4, #0]
 8005b70:	6893      	ldr	r3, [r2, #8]
 8005b72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b76:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005b7e:	f013 0f20 	tst.w	r3, #32
 8005b82:	d00f      	beq.n	8005ba4 <UART_AdvFeatureConfig+0xfc>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8005b84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b86:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8005b8a:	d004      	beq.n	8005b96 <UART_AdvFeatureConfig+0xee>
 8005b8c:	f640 511c 	movw	r1, #3356	; 0xd1c
 8005b90:	482c      	ldr	r0, [pc, #176]	; (8005c44 <UART_AdvFeatureConfig+0x19c>)
 8005b92:	f7fb fff9 	bl	8001b88 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b96:	6822      	ldr	r2, [r4, #0]
 8005b98:	6893      	ldr	r3, [r2, #8]
 8005b9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b9e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005ba0:	430b      	orrs	r3, r1
 8005ba2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ba4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005ba6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005baa:	d01c      	beq.n	8005be6 <UART_AdvFeatureConfig+0x13e>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8005bac:	6822      	ldr	r2, [r4, #0]
 8005bae:	4b26      	ldr	r3, [pc, #152]	; (8005c48 <UART_AdvFeatureConfig+0x1a0>)
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d004      	beq.n	8005bbe <UART_AdvFeatureConfig+0x116>
 8005bb4:	f640 5123 	movw	r1, #3363	; 0xd23
 8005bb8:	4822      	ldr	r0, [pc, #136]	; (8005c44 <UART_AdvFeatureConfig+0x19c>)
 8005bba:	f7fb ffe5 	bl	8001b88 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8005bbe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005bc0:	f433 1380 	bics.w	r3, r3, #1048576	; 0x100000
 8005bc4:	d004      	beq.n	8005bd0 <UART_AdvFeatureConfig+0x128>
 8005bc6:	f640 5124 	movw	r1, #3364	; 0xd24
 8005bca:	481e      	ldr	r0, [pc, #120]	; (8005c44 <UART_AdvFeatureConfig+0x19c>)
 8005bcc:	f7fb ffdc 	bl	8001b88 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bd0:	6822      	ldr	r2, [r4, #0]
 8005bd2:	6853      	ldr	r3, [r2, #4]
 8005bd4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005bd8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005bda:	430b      	orrs	r3, r1
 8005bdc:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bde:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005be0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005be4:	d01a      	beq.n	8005c1c <UART_AdvFeatureConfig+0x174>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005be6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005be8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005bec:	d00f      	beq.n	8005c0e <UART_AdvFeatureConfig+0x166>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8005bee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005bf0:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8005bf4:	d004      	beq.n	8005c00 <UART_AdvFeatureConfig+0x158>
 8005bf6:	f640 5131 	movw	r1, #3377	; 0xd31
 8005bfa:	4812      	ldr	r0, [pc, #72]	; (8005c44 <UART_AdvFeatureConfig+0x19c>)
 8005bfc:	f7fb ffc4 	bl	8001b88 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c00:	6822      	ldr	r2, [r4, #0]
 8005c02:	6853      	ldr	r3, [r2, #4]
 8005c04:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005c08:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005c0a:	430b      	orrs	r3, r1
 8005c0c:	6053      	str	r3, [r2, #4]
}
 8005c0e:	bd10      	pop	{r4, pc}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8005c10:	f640 41f4 	movw	r1, #3316	; 0xcf4
 8005c14:	480b      	ldr	r0, [pc, #44]	; (8005c44 <UART_AdvFeatureConfig+0x19c>)
 8005c16:	f7fb ffb7 	bl	8001b88 <assert_failed>
 8005c1a:	e74b      	b.n	8005ab4 <UART_AdvFeatureConfig+0xc>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8005c1c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005c1e:	f433 1300 	bics.w	r3, r3, #2097152	; 0x200000
 8005c22:	d007      	beq.n	8005c34 <UART_AdvFeatureConfig+0x18c>
 8005c24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c28:	d004      	beq.n	8005c34 <UART_AdvFeatureConfig+0x18c>
 8005c2a:	f640 5129 	movw	r1, #3369	; 0xd29
 8005c2e:	4805      	ldr	r0, [pc, #20]	; (8005c44 <UART_AdvFeatureConfig+0x19c>)
 8005c30:	f7fb ffaa 	bl	8001b88 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c34:	6822      	ldr	r2, [r4, #0]
 8005c36:	6853      	ldr	r3, [r2, #4]
 8005c38:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005c3c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005c3e:	430b      	orrs	r3, r1
 8005c40:	6053      	str	r3, [r2, #4]
 8005c42:	e7d0      	b.n	8005be6 <UART_AdvFeatureConfig+0x13e>
 8005c44:	08009c10 	.word	0x08009c10
 8005c48:	40013800 	.word	0x40013800

08005c4c <UART_WaitOnFlagUntilTimeout>:
{
 8005c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c50:	4680      	mov	r8, r0
 8005c52:	460e      	mov	r6, r1
 8005c54:	4615      	mov	r5, r2
 8005c56:	4699      	mov	r9, r3
 8005c58:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c5a:	f8d8 2000 	ldr.w	r2, [r8]
 8005c5e:	69d4      	ldr	r4, [r2, #28]
 8005c60:	ea36 0304 	bics.w	r3, r6, r4
 8005c64:	bf0c      	ite	eq
 8005c66:	2401      	moveq	r4, #1
 8005c68:	2400      	movne	r4, #0
 8005c6a:	42ac      	cmp	r4, r5
 8005c6c:	d15a      	bne.n	8005d24 <UART_WaitOnFlagUntilTimeout+0xd8>
    if (Timeout != HAL_MAX_DELAY)
 8005c6e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8005c72:	d0f4      	beq.n	8005c5e <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c74:	f7fc faf2 	bl	800225c <HAL_GetTick>
 8005c78:	eba0 0009 	sub.w	r0, r0, r9
 8005c7c:	42b8      	cmp	r0, r7
 8005c7e:	d830      	bhi.n	8005ce2 <UART_WaitOnFlagUntilTimeout+0x96>
 8005c80:	b37f      	cbz	r7, 8005ce2 <UART_WaitOnFlagUntilTimeout+0x96>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c82:	f8d8 3000 	ldr.w	r3, [r8]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	f012 0f04 	tst.w	r2, #4
 8005c8c:	d0e5      	beq.n	8005c5a <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c8e:	69da      	ldr	r2, [r3, #28]
 8005c90:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8005c94:	d0e1      	beq.n	8005c5a <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c9a:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005c9c:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca0:	e852 3f00 	ldrex	r3, [r2]
 8005ca4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca8:	e842 3100 	strex	r1, r3, [r2]
 8005cac:	2900      	cmp	r1, #0
 8005cae:	d1f5      	bne.n	8005c9c <UART_WaitOnFlagUntilTimeout+0x50>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb0:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb4:	f102 0308 	add.w	r3, r2, #8
 8005cb8:	e853 3f00 	ldrex	r3, [r3]
 8005cbc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc0:	3208      	adds	r2, #8
 8005cc2:	e842 3100 	strex	r1, r3, [r2]
 8005cc6:	2900      	cmp	r1, #0
 8005cc8:	d1f2      	bne.n	8005cb0 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 8005cca:	2320      	movs	r3, #32
 8005ccc:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005cd0:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cd4:	f8c8 308c 	str.w	r3, [r8, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 8005cd8:	2300      	movs	r3, #0
 8005cda:	f888 3080 	strb.w	r3, [r8, #128]	; 0x80
          return HAL_TIMEOUT;
 8005cde:	2003      	movs	r0, #3
 8005ce0:	e021      	b.n	8005d26 <UART_WaitOnFlagUntilTimeout+0xda>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005ce2:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce6:	e852 3f00 	ldrex	r3, [r2]
 8005cea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cee:	e842 3100 	strex	r1, r3, [r2]
 8005cf2:	2900      	cmp	r1, #0
 8005cf4:	d1f5      	bne.n	8005ce2 <UART_WaitOnFlagUntilTimeout+0x96>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf6:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfa:	f102 0308 	add.w	r3, r2, #8
 8005cfe:	e853 3f00 	ldrex	r3, [r3]
 8005d02:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d06:	3208      	adds	r2, #8
 8005d08:	e842 3100 	strex	r1, r3, [r2]
 8005d0c:	2900      	cmp	r1, #0
 8005d0e:	d1f2      	bne.n	8005cf6 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 8005d10:	2320      	movs	r3, #32
 8005d12:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005d16:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	f888 3080 	strb.w	r3, [r8, #128]	; 0x80
        return HAL_TIMEOUT;
 8005d20:	2003      	movs	r0, #3
 8005d22:	e000      	b.n	8005d26 <UART_WaitOnFlagUntilTimeout+0xda>
  return HAL_OK;
 8005d24:	2000      	movs	r0, #0
}
 8005d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005d2a <HAL_UART_Receive>:
{
 8005d2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d32:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8005d36:	2b20      	cmp	r3, #32
 8005d38:	f040 8081 	bne.w	8005e3e <HAL_UART_Receive+0x114>
 8005d3c:	4604      	mov	r4, r0
 8005d3e:	460d      	mov	r5, r1
 8005d40:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8005d42:	2900      	cmp	r1, #0
 8005d44:	d07f      	beq.n	8005e46 <HAL_UART_Receive+0x11c>
 8005d46:	2a00      	cmp	r2, #0
 8005d48:	d07f      	beq.n	8005e4a <HAL_UART_Receive+0x120>
    __HAL_LOCK(huart);
 8005d4a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d07d      	beq.n	8005e4e <HAL_UART_Receive+0x124>
 8005d52:	2301      	movs	r3, #1
 8005d54:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d5e:	2222      	movs	r2, #34	; 0x22
 8005d60:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d64:	66c3      	str	r3, [r0, #108]	; 0x6c
    tickstart = HAL_GetTick();
 8005d66:	f7fc fa79 	bl	800225c <HAL_GetTick>
 8005d6a:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 8005d6c:	f8a4 805c 	strh.w	r8, [r4, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005d70:	f8a4 805e 	strh.w	r8, [r4, #94]	; 0x5e
    UART_MASK_COMPUTATION(huart);
 8005d74:	68a3      	ldr	r3, [r4, #8]
 8005d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d7a:	d006      	beq.n	8005d8a <HAL_UART_Receive+0x60>
 8005d7c:	b9cb      	cbnz	r3, 8005db2 <HAL_UART_Receive+0x88>
 8005d7e:	6923      	ldr	r3, [r4, #16]
 8005d80:	b99b      	cbnz	r3, 8005daa <HAL_UART_Receive+0x80>
 8005d82:	23ff      	movs	r3, #255	; 0xff
 8005d84:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
 8005d88:	e019      	b.n	8005dbe <HAL_UART_Receive+0x94>
 8005d8a:	6923      	ldr	r3, [r4, #16]
 8005d8c:	b933      	cbnz	r3, 8005d9c <HAL_UART_Receive+0x72>
 8005d8e:	f240 18ff 	movw	r8, #511	; 0x1ff
 8005d92:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
      pdata16bits = (uint16_t *) pData;
 8005d96:	46ab      	mov	fp, r5
      pdata8bits  = NULL;
 8005d98:	2500      	movs	r5, #0
 8005d9a:	e014      	b.n	8005dc6 <HAL_UART_Receive+0x9c>
    UART_MASK_COMPUTATION(huart);
 8005d9c:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8005da0:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
      pdata16bits = NULL;
 8005da4:	f04f 0b00 	mov.w	fp, #0
 8005da8:	e00d      	b.n	8005dc6 <HAL_UART_Receive+0x9c>
    UART_MASK_COMPUTATION(huart);
 8005daa:	237f      	movs	r3, #127	; 0x7f
 8005dac:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
 8005db0:	e005      	b.n	8005dbe <HAL_UART_Receive+0x94>
 8005db2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005db6:	d012      	beq.n	8005dde <HAL_UART_Receive+0xb4>
 8005db8:	2300      	movs	r3, #0
 8005dba:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    uhMask = huart->Mask;
 8005dbe:	f8b4 8060 	ldrh.w	r8, [r4, #96]	; 0x60
      pdata16bits = NULL;
 8005dc2:	f04f 0b00 	mov.w	fp, #0
    __HAL_UNLOCK(huart);
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    while (huart->RxXferCount > 0U)
 8005dcc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	b37b      	cbz	r3, 8005e34 <HAL_UART_Receive+0x10a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005dd4:	f04f 0a00 	mov.w	sl, #0
 8005dd8:	f04f 0920 	mov.w	r9, #32
 8005ddc:	e019      	b.n	8005e12 <HAL_UART_Receive+0xe8>
    UART_MASK_COMPUTATION(huart);
 8005dde:	6923      	ldr	r3, [r4, #16]
 8005de0:	b91b      	cbnz	r3, 8005dea <HAL_UART_Receive+0xc0>
 8005de2:	237f      	movs	r3, #127	; 0x7f
 8005de4:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
 8005de8:	e7e9      	b.n	8005dbe <HAL_UART_Receive+0x94>
 8005dea:	233f      	movs	r3, #63	; 0x3f
 8005dec:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
 8005df0:	e7e5      	b.n	8005dbe <HAL_UART_Receive+0x94>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005df2:	6823      	ldr	r3, [r4, #0]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df6:	ea08 0303 	and.w	r3, r8, r3
 8005dfa:	f82b 3b02 	strh.w	r3, [fp], #2
      huart->RxXferCount--;
 8005dfe:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005e02:	3b01      	subs	r3, #1
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8005e0a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	b183      	cbz	r3, 8005e34 <HAL_UART_Receive+0x10a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005e12:	9600      	str	r6, [sp, #0]
 8005e14:	463b      	mov	r3, r7
 8005e16:	4652      	mov	r2, sl
 8005e18:	4649      	mov	r1, r9
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	f7ff ff16 	bl	8005c4c <UART_WaitOnFlagUntilTimeout>
 8005e20:	b9b8      	cbnz	r0, 8005e52 <HAL_UART_Receive+0x128>
      if (pdata8bits == NULL)
 8005e22:	2d00      	cmp	r5, #0
 8005e24:	d0e5      	beq.n	8005df2 <HAL_UART_Receive+0xc8>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005e26:	6823      	ldr	r3, [r4, #0]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	ea03 0308 	and.w	r3, r3, r8
 8005e2e:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 8005e32:	e7e4      	b.n	8005dfe <HAL_UART_Receive+0xd4>
    huart->RxState = HAL_UART_STATE_READY;
 8005e34:	2320      	movs	r3, #32
 8005e36:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    return HAL_OK;
 8005e3a:	2000      	movs	r0, #0
 8005e3c:	e000      	b.n	8005e40 <HAL_UART_Receive+0x116>
    return HAL_BUSY;
 8005e3e:	2002      	movs	r0, #2
}
 8005e40:	b003      	add	sp, #12
 8005e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return  HAL_ERROR;
 8005e46:	2001      	movs	r0, #1
 8005e48:	e7fa      	b.n	8005e40 <HAL_UART_Receive+0x116>
 8005e4a:	2001      	movs	r0, #1
 8005e4c:	e7f8      	b.n	8005e40 <HAL_UART_Receive+0x116>
    __HAL_LOCK(huart);
 8005e4e:	2002      	movs	r0, #2
 8005e50:	e7f6      	b.n	8005e40 <HAL_UART_Receive+0x116>
        return HAL_TIMEOUT;
 8005e52:	2003      	movs	r0, #3
 8005e54:	e7f4      	b.n	8005e40 <HAL_UART_Receive+0x116>

08005e56 <UART_CheckIdleState>:
{
 8005e56:	b530      	push	{r4, r5, lr}
 8005e58:	b083      	sub	sp, #12
 8005e5a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8005e62:	f7fc f9fb 	bl	800225c <HAL_GetTick>
 8005e66:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f013 0f08 	tst.w	r3, #8
 8005e70:	d10f      	bne.n	8005e92 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f013 0f04 	tst.w	r3, #4
 8005e7a:	d118      	bne.n	8005eae <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8005e7c:	2320      	movs	r3, #32
 8005e7e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005e82:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e86:	2000      	movs	r0, #0
 8005e88:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8005e8a:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8005e8e:	b003      	add	sp, #12
 8005e90:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	f7ff fed3 	bl	8005c4c <UART_WaitOnFlagUntilTimeout>
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d0e3      	beq.n	8005e72 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8005eaa:	2003      	movs	r0, #3
 8005eac:	e7ef      	b.n	8005e8e <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005eae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	462b      	mov	r3, r5
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	f7ff fec5 	bl	8005c4c <UART_WaitOnFlagUntilTimeout>
 8005ec2:	2800      	cmp	r0, #0
 8005ec4:	d0da      	beq.n	8005e7c <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8005ec6:	2003      	movs	r0, #3
 8005ec8:	e7e1      	b.n	8005e8e <UART_CheckIdleState+0x38>
	...

08005ecc <HAL_UART_Init>:
  if (huart == NULL)
 8005ecc:	2800      	cmp	r0, #0
 8005ece:	d04e      	beq.n	8005f6e <HAL_UART_Init+0xa2>
{
 8005ed0:	b510      	push	{r4, lr}
 8005ed2:	4604      	mov	r4, r0
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005ed4:	6983      	ldr	r3, [r0, #24]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d031      	beq.n	8005f3e <HAL_UART_Init+0x72>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005eda:	6803      	ldr	r3, [r0, #0]
 8005edc:	4a25      	ldr	r2, [pc, #148]	; (8005f74 <HAL_UART_Init+0xa8>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d008      	beq.n	8005ef4 <HAL_UART_Init+0x28>
 8005ee2:	f5a2 4238 	sub.w	r2, r2, #47104	; 0xb800
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d004      	beq.n	8005ef4 <HAL_UART_Init+0x28>
 8005eea:	f240 113b 	movw	r1, #315	; 0x13b
 8005eee:	4822      	ldr	r0, [pc, #136]	; (8005f78 <HAL_UART_Init+0xac>)
 8005ef0:	f7fb fe4a 	bl	8001b88 <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005ef4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005ef8:	b37b      	cbz	r3, 8005f5a <HAL_UART_Init+0x8e>
  huart->gState = HAL_UART_STATE_BUSY;
 8005efa:	2324      	movs	r3, #36	; 0x24
 8005efc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8005f00:	6822      	ldr	r2, [r4, #0]
 8005f02:	6813      	ldr	r3, [r2, #0]
 8005f04:	f023 0301 	bic.w	r3, r3, #1
 8005f08:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f0a:	4620      	mov	r0, r4
 8005f0c:	f7ff fc24 	bl	8005758 <UART_SetConfig>
 8005f10:	2801      	cmp	r0, #1
 8005f12:	d013      	beq.n	8005f3c <HAL_UART_Init+0x70>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005f16:	bb33      	cbnz	r3, 8005f66 <HAL_UART_Init+0x9a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f18:	6822      	ldr	r2, [r4, #0]
 8005f1a:	6853      	ldr	r3, [r2, #4]
 8005f1c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005f20:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f22:	6822      	ldr	r2, [r4, #0]
 8005f24:	6893      	ldr	r3, [r2, #8]
 8005f26:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005f2a:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8005f2c:	6822      	ldr	r2, [r4, #0]
 8005f2e:	6813      	ldr	r3, [r2, #0]
 8005f30:	f043 0301 	orr.w	r3, r3, #1
 8005f34:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8005f36:	4620      	mov	r0, r4
 8005f38:	f7ff ff8d 	bl	8005e56 <UART_CheckIdleState>
}
 8005f3c:	bd10      	pop	{r4, pc}
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8005f3e:	6803      	ldr	r3, [r0, #0]
 8005f40:	4a0c      	ldr	r2, [pc, #48]	; (8005f74 <HAL_UART_Init+0xa8>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d0d6      	beq.n	8005ef4 <HAL_UART_Init+0x28>
 8005f46:	f5a2 4238 	sub.w	r2, r2, #47104	; 0xb800
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d0d2      	beq.n	8005ef4 <HAL_UART_Init+0x28>
 8005f4e:	f240 1141 	movw	r1, #321	; 0x141
 8005f52:	4809      	ldr	r0, [pc, #36]	; (8005f78 <HAL_UART_Init+0xac>)
 8005f54:	f7fb fe18 	bl	8001b88 <assert_failed>
 8005f58:	e7cc      	b.n	8005ef4 <HAL_UART_Init+0x28>
    huart->Lock = HAL_UNLOCKED;
 8005f5a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8005f5e:	4620      	mov	r0, r4
 8005f60:	f7fc f874 	bl	800204c <HAL_UART_MspInit>
 8005f64:	e7c9      	b.n	8005efa <HAL_UART_Init+0x2e>
    UART_AdvFeatureConfig(huart);
 8005f66:	4620      	mov	r0, r4
 8005f68:	f7ff fd9e 	bl	8005aa8 <UART_AdvFeatureConfig>
 8005f6c:	e7d4      	b.n	8005f18 <HAL_UART_Init+0x4c>
    return HAL_ERROR;
 8005f6e:	2001      	movs	r0, #1
}
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	40013800 	.word	0x40013800
 8005f78:	08009c10 	.word	0x08009c10

08005f7c <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f7c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005f7e:	b92b      	cbnz	r3, 8005f8c <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8005f80:	2301      	movs	r3, #1
 8005f82:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f86:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8005f8a:	4770      	bx	lr
{
 8005f8c:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f8e:	6803      	ldr	r3, [r0, #0]
 8005f90:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f92:	6899      	ldr	r1, [r3, #8]
 8005f94:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f96:	4d0a      	ldr	r5, [pc, #40]	; (8005fc0 <UARTEx_SetNbDataToProcess+0x44>)
 8005f98:	5c6b      	ldrb	r3, [r5, r1]
 8005f9a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f9c:	4c09      	ldr	r4, [pc, #36]	; (8005fc4 <UARTEx_SetNbDataToProcess+0x48>)
 8005f9e:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fa0:	fb93 f3f1 	sdiv	r3, r3, r1
 8005fa4:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fa8:	f3c2 6242 	ubfx	r2, r2, #25, #3
 8005fac:	5cab      	ldrb	r3, [r5, r2]
 8005fae:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005fb0:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fb6:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8005fba:	bc30      	pop	{r4, r5}
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	08009ca8 	.word	0x08009ca8
 8005fc4:	08009ca0 	.word	0x08009ca0

08005fc8 <HAL_UARTEx_WakeupCallback>:
}
 8005fc8:	4770      	bx	lr

08005fca <HAL_UARTEx_RxFifoFullCallback>:
}
 8005fca:	4770      	bx	lr

08005fcc <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8005fcc:	4770      	bx	lr
	...

08005fd0 <HAL_UARTEx_DisableFifoMode>:
{
 8005fd0:	b510      	push	{r4, lr}
 8005fd2:	4604      	mov	r4, r0
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8005fd4:	6803      	ldr	r3, [r0, #0]
 8005fd6:	4a15      	ldr	r2, [pc, #84]	; (800602c <HAL_UARTEx_DisableFifoMode+0x5c>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d008      	beq.n	8005fee <HAL_UARTEx_DisableFifoMode+0x1e>
 8005fdc:	f5a2 4238 	sub.w	r2, r2, #47104	; 0xb800
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d004      	beq.n	8005fee <HAL_UARTEx_DisableFifoMode+0x1e>
 8005fe4:	f44f 710d 	mov.w	r1, #564	; 0x234
 8005fe8:	4811      	ldr	r0, [pc, #68]	; (8006030 <HAL_UARTEx_DisableFifoMode+0x60>)
 8005fea:	f7fb fdcd 	bl	8001b88 <assert_failed>
  __HAL_LOCK(huart);
 8005fee:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d017      	beq.n	8006026 <HAL_UARTEx_DisableFifoMode+0x56>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8005ffc:	2324      	movs	r3, #36	; 0x24
 8005ffe:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006002:	6822      	ldr	r2, [r4, #0]
 8006004:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006006:	6811      	ldr	r1, [r2, #0]
 8006008:	f021 0101 	bic.w	r1, r1, #1
 800600c:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800600e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006012:	2000      	movs	r0, #0
 8006014:	6660      	str	r0, [r4, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006016:	6822      	ldr	r2, [r4, #0]
 8006018:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800601a:	2320      	movs	r3, #32
 800601c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006020:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006024:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8006026:	2002      	movs	r0, #2
 8006028:	e7fc      	b.n	8006024 <HAL_UARTEx_DisableFifoMode+0x54>
 800602a:	bf00      	nop
 800602c:	40013800 	.word	0x40013800
 8006030:	08009c64 	.word	0x08009c64

08006034 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006034:	b570      	push	{r4, r5, r6, lr}
 8006036:	4604      	mov	r4, r0
 8006038:	460d      	mov	r5, r1
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800603a:	6803      	ldr	r3, [r0, #0]
 800603c:	4a1e      	ldr	r2, [pc, #120]	; (80060b8 <HAL_UARTEx_SetTxFifoThreshold+0x84>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d008      	beq.n	8006054 <HAL_UARTEx_SetTxFifoThreshold+0x20>
 8006042:	f5a2 4238 	sub.w	r2, r2, #47104	; 0xb800
 8006046:	4293      	cmp	r3, r2
 8006048:	d004      	beq.n	8006054 <HAL_UARTEx_SetTxFifoThreshold+0x20>
 800604a:	f240 2162 	movw	r1, #610	; 0x262
 800604e:	481b      	ldr	r0, [pc, #108]	; (80060bc <HAL_UARTEx_SetTxFifoThreshold+0x88>)
 8006050:	f7fb fd9a 	bl	8001b88 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 8006054:	f035 5300 	bics.w	r3, r5, #536870912	; 0x20000000
 8006058:	d00a      	beq.n	8006070 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
 800605a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800605e:	d007      	beq.n	8006070 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
 8006060:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006064:	d004      	beq.n	8006070 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
 8006066:	f240 2163 	movw	r1, #611	; 0x263
 800606a:	4814      	ldr	r0, [pc, #80]	; (80060bc <HAL_UARTEx_SetTxFifoThreshold+0x88>)
 800606c:	f7fb fd8c 	bl	8001b88 <assert_failed>
  __HAL_LOCK(huart);
 8006070:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8006074:	2b01      	cmp	r3, #1
 8006076:	d01d      	beq.n	80060b4 <HAL_UARTEx_SetTxFifoThreshold+0x80>
 8006078:	2301      	movs	r3, #1
 800607a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800607e:	2324      	movs	r3, #36	; 0x24
 8006080:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006084:	6823      	ldr	r3, [r4, #0]
 8006086:	681e      	ldr	r6, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	f022 0201 	bic.w	r2, r2, #1
 800608e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006090:	6823      	ldr	r3, [r4, #0]
 8006092:	6899      	ldr	r1, [r3, #8]
 8006094:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8006098:	430d      	orrs	r5, r1
 800609a:	609d      	str	r5, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800609c:	4620      	mov	r0, r4
 800609e:	f7ff ff6d 	bl	8005f7c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060a2:	6823      	ldr	r3, [r4, #0]
 80060a4:	601e      	str	r6, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80060a6:	2320      	movs	r3, #32
 80060a8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80060ac:	2000      	movs	r0, #0
 80060ae:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80060b2:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 80060b4:	2002      	movs	r0, #2
 80060b6:	e7fc      	b.n	80060b2 <HAL_UARTEx_SetTxFifoThreshold+0x7e>
 80060b8:	40013800 	.word	0x40013800
 80060bc:	08009c64 	.word	0x08009c64

080060c0 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80060c0:	b570      	push	{r4, r5, r6, lr}
 80060c2:	4604      	mov	r4, r0
 80060c4:	460d      	mov	r5, r1
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 80060c6:	6803      	ldr	r3, [r0, #0]
 80060c8:	4a1e      	ldr	r2, [pc, #120]	; (8006144 <HAL_UARTEx_SetRxFifoThreshold+0x84>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d008      	beq.n	80060e0 <HAL_UARTEx_SetRxFifoThreshold+0x20>
 80060ce:	f5a2 4238 	sub.w	r2, r2, #47104	; 0xb800
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d004      	beq.n	80060e0 <HAL_UARTEx_SetRxFifoThreshold+0x20>
 80060d6:	f240 2193 	movw	r1, #659	; 0x293
 80060da:	481b      	ldr	r0, [pc, #108]	; (8006148 <HAL_UARTEx_SetRxFifoThreshold+0x88>)
 80060dc:	f7fb fd54 	bl	8001b88 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 80060e0:	f035 7300 	bics.w	r3, r5, #33554432	; 0x2000000
 80060e4:	d00a      	beq.n	80060fc <HAL_UARTEx_SetRxFifoThreshold+0x3c>
 80060e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060ea:	d007      	beq.n	80060fc <HAL_UARTEx_SetRxFifoThreshold+0x3c>
 80060ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060f0:	d004      	beq.n	80060fc <HAL_UARTEx_SetRxFifoThreshold+0x3c>
 80060f2:	f44f 7125 	mov.w	r1, #660	; 0x294
 80060f6:	4814      	ldr	r0, [pc, #80]	; (8006148 <HAL_UARTEx_SetRxFifoThreshold+0x88>)
 80060f8:	f7fb fd46 	bl	8001b88 <assert_failed>
  __HAL_LOCK(huart);
 80060fc:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8006100:	2b01      	cmp	r3, #1
 8006102:	d01d      	beq.n	8006140 <HAL_UARTEx_SetRxFifoThreshold+0x80>
 8006104:	2301      	movs	r3, #1
 8006106:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800610a:	2324      	movs	r3, #36	; 0x24
 800610c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006110:	6823      	ldr	r3, [r4, #0]
 8006112:	681e      	ldr	r6, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	f022 0201 	bic.w	r2, r2, #1
 800611a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800611c:	6823      	ldr	r3, [r4, #0]
 800611e:	6899      	ldr	r1, [r3, #8]
 8006120:	f021 6160 	bic.w	r1, r1, #234881024	; 0xe000000
 8006124:	430d      	orrs	r5, r1
 8006126:	609d      	str	r5, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006128:	4620      	mov	r0, r4
 800612a:	f7ff ff27 	bl	8005f7c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800612e:	6823      	ldr	r3, [r4, #0]
 8006130:	601e      	str	r6, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006132:	2320      	movs	r3, #32
 8006134:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006138:	2000      	movs	r0, #0
 800613a:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800613e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8006140:	2002      	movs	r0, #2
 8006142:	e7fc      	b.n	800613e <HAL_UARTEx_SetRxFifoThreshold+0x7e>
 8006144:	40013800 	.word	0x40013800
 8006148:	08009c64 	.word	0x08009c64

0800614c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800614c:	b510      	push	{r4, lr}
 800614e:	b088      	sub	sp, #32
  struct hci_request rq;
  tBleStatus status = 0;
 8006150:	2400      	movs	r4, #0
 8006152:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006156:	2218      	movs	r2, #24
 8006158:	4621      	mov	r1, r4
 800615a:	a802      	add	r0, sp, #8
 800615c:	f000 fb76 	bl	800684c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006160:	233f      	movs	r3, #63	; 0x3f
 8006162:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x081;
 8006166:	2381      	movs	r3, #129	; 0x81
 8006168:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 800616c:	f10d 0307 	add.w	r3, sp, #7
 8006170:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 8006172:	2301      	movs	r3, #1
 8006174:	9307      	str	r3, [sp, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006176:	4621      	mov	r1, r4
 8006178:	a802      	add	r0, sp, #8
 800617a:	f000 fdd1 	bl	8006d20 <hci_send_req>
 800617e:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  return status;
 8006180:	bfac      	ite	ge
 8006182:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8006186:	20ff      	movlt	r0, #255	; 0xff
}
 8006188:	b008      	add	sp, #32
 800618a:	bd10      	pop	{r4, pc}

0800618c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800618c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006190:	b0cb      	sub	sp, #300	; 0x12c
 8006192:	469c      	mov	ip, r3
 8006194:	f89d 4154 	ldrb.w	r4, [sp, #340]	; 0x154
 8006198:	f89d 715c 	ldrb.w	r7, [sp, #348]	; 0x15c
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800619c:	ad04      	add	r5, sp, #16
 800619e:	f104 0a08 	add.w	sl, r4, #8
 80061a2:	eb05 0b0a 	add.w	fp, r5, sl
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80061a6:	f107 0609 	add.w	r6, r7, #9
 80061aa:	4426      	add	r6, r4
 80061ac:	19ab      	adds	r3, r5, r6
 80061ae:	9301      	str	r3, [sp, #4]
  tBleStatus status = 0;
 80061b0:	f10d 090f 	add.w	r9, sp, #15
 80061b4:	f04f 0800 	mov.w	r8, #0
 80061b8:	f88d 800f 	strb.w	r8, [sp, #15]
  int index_input = 0;
  cp0->Advertising_Type = Advertising_Type;
 80061bc:	f88d 0010 	strb.w	r0, [sp, #16]
  index_input += 1;
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80061c0:	f8ad 1011 	strh.w	r1, [sp, #17]
  index_input += 2;
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80061c4:	f8ad 2013 	strh.w	r2, [sp, #19]
  index_input += 2;
  cp0->Own_Address_Type = Own_Address_Type;
 80061c8:	f88d c015 	strb.w	ip, [sp, #21]
  index_input += 1;
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80061cc:	f89d 3150 	ldrb.w	r3, [sp, #336]	; 0x150
 80061d0:	f88d 3016 	strb.w	r3, [sp, #22]
  index_input += 1;
  cp0->Local_Name_Length = Local_Name_Length;
 80061d4:	f88d 4017 	strb.w	r4, [sp, #23]
  index_input += 1;
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80061d8:	4622      	mov	r2, r4
 80061da:	9956      	ldr	r1, [sp, #344]	; 0x158
 80061dc:	a806      	add	r0, sp, #24
 80061de:	f000 fb31 	bl	8006844 <Osal_MemCpy>
    index_input += Local_Name_Length;
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80061e2:	f805 700a 	strb.w	r7, [r5, sl]
    }
    index_input += 1;
 80061e6:	3409      	adds	r4, #9
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80061e8:	463a      	mov	r2, r7
 80061ea:	9958      	ldr	r1, [sp, #352]	; 0x160
 80061ec:	f10b 0001 	add.w	r0, fp, #1
 80061f0:	f000 fb28 	bl	8006844 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80061f4:	4427      	add	r7, r4
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 80061f6:	f8bd 3164 	ldrh.w	r3, [sp, #356]	; 0x164
 80061fa:	53ab      	strh	r3, [r5, r6]
    }
    index_input += 2;
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 80061fc:	f8bd 3168 	ldrh.w	r3, [sp, #360]	; 0x168
 8006200:	9a01      	ldr	r2, [sp, #4]
 8006202:	8053      	strh	r3, [r2, #2]
    }
    index_input += 2;
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006204:	2218      	movs	r2, #24
 8006206:	4641      	mov	r1, r8
 8006208:	a844      	add	r0, sp, #272	; 0x110
 800620a:	f000 fb1f 	bl	800684c <Osal_MemSet>
  rq.ogf = 0x3f;
 800620e:	233f      	movs	r3, #63	; 0x3f
 8006210:	f8ad 3110 	strh.w	r3, [sp, #272]	; 0x110
  rq.ocf = 0x083;
 8006214:	2383      	movs	r3, #131	; 0x83
 8006216:	f8ad 3112 	strh.w	r3, [sp, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800621a:	9546      	str	r5, [sp, #280]	; 0x118
    index_input += 2;
 800621c:	3704      	adds	r7, #4
  rq.clen = index_input;
 800621e:	9747      	str	r7, [sp, #284]	; 0x11c
  rq.rparam = &status;
 8006220:	f8cd 9120 	str.w	r9, [sp, #288]	; 0x120
  rq.rlen = 1;
 8006224:	2301      	movs	r3, #1
 8006226:	9349      	str	r3, [sp, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006228:	4641      	mov	r1, r8
 800622a:	a844      	add	r0, sp, #272	; 0x110
 800622c:	f000 fd78 	bl	8006d20 <hci_send_req>
 8006230:	4540      	cmp	r0, r8
    return BLE_STATUS_TIMEOUT;
  return status;
 8006232:	bfac      	ite	ge
 8006234:	f89d 000f 	ldrbge.w	r0, [sp, #15]
    return BLE_STATUS_TIMEOUT;
 8006238:	20ff      	movlt	r0, #255	; 0xff
}
 800623a:	b04b      	add	sp, #300	; 0x12c
 800623c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006240 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8006240:	b570      	push	{r4, r5, r6, lr}
 8006242:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8006244:	f10d 0507 	add.w	r5, sp, #7
 8006248:	2400      	movs	r4, #0
 800624a:	f88d 4007 	strb.w	r4, [sp, #7]
  int index_input = 0;
  cp0->IO_Capability = IO_Capability;
 800624e:	ae02      	add	r6, sp, #8
 8006250:	f88d 0008 	strb.w	r0, [sp, #8]
  index_input += 1;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006254:	2218      	movs	r2, #24
 8006256:	4621      	mov	r1, r4
 8006258:	a842      	add	r0, sp, #264	; 0x108
 800625a:	f000 faf7 	bl	800684c <Osal_MemSet>
  rq.ogf = 0x3f;
 800625e:	233f      	movs	r3, #63	; 0x3f
 8006260:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x085;
 8006264:	2385      	movs	r3, #133	; 0x85
 8006266:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 800626a:	9644      	str	r6, [sp, #272]	; 0x110
  rq.clen = index_input;
 800626c:	2301      	movs	r3, #1
 800626e:	9345      	str	r3, [sp, #276]	; 0x114
  rq.rparam = &status;
 8006270:	9546      	str	r5, [sp, #280]	; 0x118
  rq.rlen = 1;
 8006272:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006274:	4621      	mov	r1, r4
 8006276:	a842      	add	r0, sp, #264	; 0x108
 8006278:	f000 fd52 	bl	8006d20 <hci_send_req>
 800627c:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  return status;
 800627e:	bfac      	ite	ge
 8006280:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8006284:	20ff      	movlt	r0, #255	; 0xff
}
 8006286:	b048      	add	sp, #288	; 0x120
 8006288:	bd70      	pop	{r4, r5, r6, pc}

0800628a <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800628a:	b570      	push	{r4, r5, r6, lr}
 800628c:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800628e:	f10d 0607 	add.w	r6, sp, #7
 8006292:	2500      	movs	r5, #0
 8006294:	f88d 5007 	strb.w	r5, [sp, #7]
  int index_input = 0;
  cp0->Bonding_Mode = Bonding_Mode;
 8006298:	ac02      	add	r4, sp, #8
 800629a:	f88d 0008 	strb.w	r0, [sp, #8]
  index_input += 1;
  cp0->MITM_Mode = MITM_Mode;
 800629e:	f88d 1009 	strb.w	r1, [sp, #9]
  index_input += 1;
  cp0->SC_Support = SC_Support;
 80062a2:	f88d 200a 	strb.w	r2, [sp, #10]
  index_input += 1;
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80062a6:	f88d 300b 	strb.w	r3, [sp, #11]
  index_input += 1;
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80062aa:	f89d 3130 	ldrb.w	r3, [sp, #304]	; 0x130
 80062ae:	f88d 300c 	strb.w	r3, [sp, #12]
  index_input += 1;
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80062b2:	f89d 3134 	ldrb.w	r3, [sp, #308]	; 0x134
 80062b6:	f88d 300d 	strb.w	r3, [sp, #13]
  index_input += 1;
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80062ba:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 80062be:	f88d 300e 	strb.w	r3, [sp, #14]
  index_input += 1;
  cp0->Fixed_Pin = Fixed_Pin;
 80062c2:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 80062c4:	f8cd 300f 	str.w	r3, [sp, #15]
  index_input += 4;
  cp0->Identity_Address_Type = Identity_Address_Type;
 80062c8:	f89d 3140 	ldrb.w	r3, [sp, #320]	; 0x140
 80062cc:	f88d 3013 	strb.w	r3, [sp, #19]
  index_input += 1;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80062d0:	2218      	movs	r2, #24
 80062d2:	4629      	mov	r1, r5
 80062d4:	a842      	add	r0, sp, #264	; 0x108
 80062d6:	f000 fab9 	bl	800684c <Osal_MemSet>
  rq.ogf = 0x3f;
 80062da:	233f      	movs	r3, #63	; 0x3f
 80062dc:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x086;
 80062e0:	2386      	movs	r3, #134	; 0x86
 80062e2:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 80062e6:	9444      	str	r4, [sp, #272]	; 0x110
  rq.clen = index_input;
 80062e8:	230c      	movs	r3, #12
 80062ea:	9345      	str	r3, [sp, #276]	; 0x114
  rq.rparam = &status;
 80062ec:	9646      	str	r6, [sp, #280]	; 0x118
  rq.rlen = 1;
 80062ee:	2301      	movs	r3, #1
 80062f0:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80062f2:	4629      	mov	r1, r5
 80062f4:	a842      	add	r0, sp, #264	; 0x108
 80062f6:	f000 fd13 	bl	8006d20 <hci_send_req>
 80062fa:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  return status;
 80062fc:	bfac      	ite	ge
 80062fe:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8006302:	20ff      	movlt	r0, #255	; 0xff
}
 8006304:	b048      	add	sp, #288	; 0x120
 8006306:	bd70      	pop	{r4, r5, r6, pc}

08006308 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8006308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800630c:	b0c8      	sub	sp, #288	; 0x120
 800630e:	4607      	mov	r7, r0
 8006310:	460e      	mov	r6, r1
 8006312:	4615      	mov	r5, r2
 8006314:	4698      	mov	r8, r3
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006316:	2207      	movs	r2, #7
 8006318:	2100      	movs	r1, #0
 800631a:	4668      	mov	r0, sp
 800631c:	f000 fa96 	bl	800684c <Osal_MemSet>
  int index_input = 0;
  cp0->Role = Role;
 8006320:	ac02      	add	r4, sp, #8
 8006322:	f88d 7008 	strb.w	r7, [sp, #8]
  index_input += 1;
  cp0->privacy_enabled = privacy_enabled;
 8006326:	f88d 6009 	strb.w	r6, [sp, #9]
  index_input += 1;
  cp0->device_name_char_len = device_name_char_len;
 800632a:	f88d 500a 	strb.w	r5, [sp, #10]
  index_input += 1;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800632e:	2218      	movs	r2, #24
 8006330:	2100      	movs	r1, #0
 8006332:	a842      	add	r0, sp, #264	; 0x108
 8006334:	f000 fa8a 	bl	800684c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006338:	233f      	movs	r3, #63	; 0x3f
 800633a:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x08a;
 800633e:	238a      	movs	r3, #138	; 0x8a
 8006340:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 8006344:	9444      	str	r4, [sp, #272]	; 0x110
  rq.clen = index_input;
 8006346:	2303      	movs	r3, #3
 8006348:	9345      	str	r3, [sp, #276]	; 0x114
  rq.rparam = &resp;
 800634a:	f8cd d118 	str.w	sp, [sp, #280]	; 0x118
  rq.rlen = sizeof(resp);
 800634e:	2307      	movs	r3, #7
 8006350:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006352:	2100      	movs	r1, #0
 8006354:	a842      	add	r0, sp, #264	; 0x108
 8006356:	f000 fce3 	bl	8006d20 <hci_send_req>
 800635a:	2800      	cmp	r0, #0
 800635c:	db17      	blt.n	800638e <aci_gap_init+0x86>
    return BLE_STATUS_TIMEOUT;
  if ( resp.Status )
 800635e:	f89d 0000 	ldrb.w	r0, [sp]
 8006362:	b988      	cbnz	r0, 8006388 <aci_gap_init+0x80>
    return resp.Status;
  *Service_Handle = resp.Service_Handle;
 8006364:	9b00      	ldr	r3, [sp, #0]
 8006366:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800636a:	f8a8 3000 	strh.w	r3, [r8]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800636e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006372:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8006376:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800637a:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 800637c:	8013      	strh	r3, [r2, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800637e:	9b01      	ldr	r3, [sp, #4]
 8006380:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8006384:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
 8006386:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 8006388:	b048      	add	sp, #288	; 0x120
 800638a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 800638e:	20ff      	movs	r0, #255	; 0xff
 8006390:	e7fa      	b.n	8006388 <aci_gap_init+0x80>

08006392 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8006392:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006394:	b0c9      	sub	sp, #292	; 0x124
 8006396:	4604      	mov	r4, r0
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8006398:	f10d 0607 	add.w	r6, sp, #7
 800639c:	2500      	movs	r5, #0
 800639e:	f88d 5007 	strb.w	r5, [sp, #7]
  int index_input = 0;
  cp0->AdvDataLen = AdvDataLen;
 80063a2:	af02      	add	r7, sp, #8
 80063a4:	f88d 0008 	strb.w	r0, [sp, #8]
  index_input += 1;
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80063a8:	4602      	mov	r2, r0
 80063aa:	f10d 0009 	add.w	r0, sp, #9
 80063ae:	f000 fa49 	bl	8006844 <Osal_MemCpy>
  index_input += AdvDataLen;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80063b2:	2218      	movs	r2, #24
 80063b4:	4629      	mov	r1, r5
 80063b6:	a842      	add	r0, sp, #264	; 0x108
 80063b8:	f000 fa48 	bl	800684c <Osal_MemSet>
  rq.ogf = 0x3f;
 80063bc:	233f      	movs	r3, #63	; 0x3f
 80063be:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x08e;
 80063c2:	238e      	movs	r3, #142	; 0x8e
 80063c4:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 80063c8:	9744      	str	r7, [sp, #272]	; 0x110
  index_input += AdvDataLen;
 80063ca:	3401      	adds	r4, #1
  rq.clen = index_input;
 80063cc:	9445      	str	r4, [sp, #276]	; 0x114
  rq.rparam = &status;
 80063ce:	9646      	str	r6, [sp, #280]	; 0x118
  rq.rlen = 1;
 80063d0:	2301      	movs	r3, #1
 80063d2:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80063d4:	4629      	mov	r1, r5
 80063d6:	a842      	add	r0, sp, #264	; 0x108
 80063d8:	f000 fca2 	bl	8006d20 <hci_send_req>
 80063dc:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  return status;
 80063de:	bfac      	ite	ge
 80063e0:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 80063e4:	20ff      	movlt	r0, #255	; 0xff
}
 80063e6:	b049      	add	sp, #292	; 0x124
 80063e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080063ea <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 80063ea:	b510      	push	{r4, lr}
 80063ec:	b088      	sub	sp, #32
  struct hci_request rq;
  tBleStatus status = 0;
 80063ee:	2400      	movs	r4, #0
 80063f0:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80063f4:	2218      	movs	r2, #24
 80063f6:	4621      	mov	r1, r4
 80063f8:	a802      	add	r0, sp, #8
 80063fa:	f000 fa27 	bl	800684c <Osal_MemSet>
  rq.ogf = 0x3f;
 80063fe:	233f      	movs	r3, #63	; 0x3f
 8006400:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x092;
 8006404:	2392      	movs	r3, #146	; 0x92
 8006406:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 800640a:	f10d 0307 	add.w	r3, sp, #7
 800640e:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 8006410:	2301      	movs	r3, #1
 8006412:	9307      	str	r3, [sp, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006414:	4621      	mov	r1, r4
 8006416:	a802      	add	r0, sp, #8
 8006418:	f000 fc82 	bl	8006d20 <hci_send_req>
 800641c:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  return status;
 800641e:	bfac      	ite	ge
 8006420:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8006424:	20ff      	movlt	r0, #255	; 0xff
}
 8006426:	b008      	add	sp, #32
 8006428:	bd10      	pop	{r4, pc}

0800642a <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800642a:	b510      	push	{r4, lr}
 800642c:	b088      	sub	sp, #32
  struct hci_request rq;
  tBleStatus status = 0;
 800642e:	2400      	movs	r4, #0
 8006430:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006434:	2218      	movs	r2, #24
 8006436:	4621      	mov	r1, r4
 8006438:	a802      	add	r0, sp, #8
 800643a:	f000 fa07 	bl	800684c <Osal_MemSet>
  rq.ogf = 0x3f;
 800643e:	233f      	movs	r3, #63	; 0x3f
 8006440:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x101;
 8006444:	f240 1301 	movw	r3, #257	; 0x101
 8006448:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 800644c:	f10d 0307 	add.w	r3, sp, #7
 8006450:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 8006452:	2301      	movs	r3, #1
 8006454:	9307      	str	r3, [sp, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006456:	4621      	mov	r1, r4
 8006458:	a802      	add	r0, sp, #8
 800645a:	f000 fc61 	bl	8006d20 <hci_send_req>
 800645e:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  return status;
 8006460:	bfac      	ite	ge
 8006462:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8006466:	20ff      	movlt	r0, #255	; 0xff
}
 8006468:	b008      	add	sp, #32
 800646a:	bd10      	pop	{r4, pc}

0800646c <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800646c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006470:	b0c8      	sub	sp, #288	; 0x120
 8006472:	460f      	mov	r7, r1
 8006474:	4616      	mov	r6, r2
 8006476:	461c      	mov	r4, r3
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8006478:	2801      	cmp	r0, #1
 800647a:	d00a      	beq.n	8006492 <aci_gatt_add_service+0x26>
 800647c:	2802      	cmp	r0, #2
 800647e:	d042      	beq.n	8006506 <aci_gatt_add_service+0x9a>
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006480:	2203      	movs	r2, #3
 8006482:	2100      	movs	r1, #0
 8006484:	a801      	add	r0, sp, #4
 8006486:	f000 f9e1 	bl	800684c <Osal_MemSet>
    uint8_t size;
    switch ( Service_UUID_Type )
    {
      case 1: size = 2; break;
      case 2: size = 16; break;
      default: return BLE_STATUS_ERROR;
 800648a:	2097      	movs	r0, #151	; 0x97
 800648c:	e038      	b.n	8006500 <aci_gatt_add_service+0x94>
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
  if ( hci_send_req(&rq, FALSE) < 0 )
    return BLE_STATUS_TIMEOUT;
 800648e:	20ff      	movs	r0, #255	; 0xff
 8006490:	e036      	b.n	8006500 <aci_gatt_add_service+0x94>
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006492:	2203      	movs	r2, #3
 8006494:	2100      	movs	r1, #0
 8006496:	a801      	add	r0, sp, #4
 8006498:	f000 f9d8 	bl	800684c <Osal_MemSet>
  cp0->Service_UUID_Type = Service_UUID_Type;
 800649c:	2301      	movs	r3, #1
 800649e:	f88d 3008 	strb.w	r3, [sp, #8]
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80064a2:	f10d 080b 	add.w	r8, sp, #11
      case 1: size = 2; break;
 80064a6:	2502      	movs	r5, #2
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80064a8:	462a      	mov	r2, r5
 80064aa:	4639      	mov	r1, r7
 80064ac:	f10d 0009 	add.w	r0, sp, #9
 80064b0:	f000 f9c8 	bl	8006844 <Osal_MemCpy>
      cp1->Service_Type = Service_Type;
 80064b4:	f888 6000 	strb.w	r6, [r8]
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80064b8:	f888 4001 	strb.w	r4, [r8, #1]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80064bc:	2218      	movs	r2, #24
 80064be:	2100      	movs	r1, #0
 80064c0:	a842      	add	r0, sp, #264	; 0x108
 80064c2:	f000 f9c3 	bl	800684c <Osal_MemSet>
  rq.ogf = 0x3f;
 80064c6:	233f      	movs	r3, #63	; 0x3f
 80064c8:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x102;
 80064cc:	f44f 7381 	mov.w	r3, #258	; 0x102
 80064d0:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 80064d4:	ab02      	add	r3, sp, #8
 80064d6:	9344      	str	r3, [sp, #272]	; 0x110
    index_input += 1;
 80064d8:	3503      	adds	r5, #3
  rq.clen = index_input;
 80064da:	9545      	str	r5, [sp, #276]	; 0x114
  rq.rparam = &resp;
 80064dc:	ab01      	add	r3, sp, #4
 80064de:	9346      	str	r3, [sp, #280]	; 0x118
  rq.rlen = sizeof(resp);
 80064e0:	2303      	movs	r3, #3
 80064e2:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80064e4:	2100      	movs	r1, #0
 80064e6:	a842      	add	r0, sp, #264	; 0x108
 80064e8:	f000 fc1a 	bl	8006d20 <hci_send_req>
 80064ec:	2800      	cmp	r0, #0
 80064ee:	dbce      	blt.n	800648e <aci_gatt_add_service+0x22>
  if ( resp.Status )
 80064f0:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80064f4:	b920      	cbnz	r0, 8006500 <aci_gatt_add_service+0x94>
    return resp.Status;
  *Service_Handle = resp.Service_Handle;
 80064f6:	9b01      	ldr	r3, [sp, #4]
 80064f8:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80064fc:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 80064fe:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 8006500:	b048      	add	sp, #288	; 0x120
 8006502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006506:	2203      	movs	r2, #3
 8006508:	2100      	movs	r1, #0
 800650a:	a801      	add	r0, sp, #4
 800650c:	f000 f99e 	bl	800684c <Osal_MemSet>
  cp0->Service_UUID_Type = Service_UUID_Type;
 8006510:	2302      	movs	r3, #2
 8006512:	f88d 3008 	strb.w	r3, [sp, #8]
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8006516:	f10d 0819 	add.w	r8, sp, #25
      case 2: size = 16; break;
 800651a:	2510      	movs	r5, #16
 800651c:	e7c4      	b.n	80064a8 <aci_gatt_add_service+0x3c>

0800651e <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800651e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006520:	b0c9      	sub	sp, #292	; 0x124
 8006522:	4604      	mov	r4, r0
 8006524:	4616      	mov	r6, r2
 8006526:	461d      	mov	r5, r3
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8006528:	2901      	cmp	r1, #1
 800652a:	d00a      	beq.n	8006542 <aci_gatt_add_char+0x24>
 800652c:	2902      	cmp	r1, #2
 800652e:	d04f      	beq.n	80065d0 <aci_gatt_add_char+0xb2>
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006530:	2203      	movs	r2, #3
 8006532:	2100      	movs	r1, #0
 8006534:	a801      	add	r0, sp, #4
 8006536:	f000 f989 	bl	800684c <Osal_MemSet>
    uint8_t size;
    switch ( Char_UUID_Type )
    {
      case 1: size = 2; break;
      case 2: size = 16; break;
      default: return BLE_STATUS_ERROR;
 800653a:	2097      	movs	r0, #151	; 0x97
 800653c:	e046      	b.n	80065cc <aci_gatt_add_char+0xae>
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
  if ( hci_send_req(&rq, FALSE) < 0 )
    return BLE_STATUS_TIMEOUT;
 800653e:	20ff      	movs	r0, #255	; 0xff
 8006540:	e044      	b.n	80065cc <aci_gatt_add_char+0xae>
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006542:	2203      	movs	r2, #3
 8006544:	2100      	movs	r1, #0
 8006546:	a801      	add	r0, sp, #4
 8006548:	f000 f980 	bl	800684c <Osal_MemSet>
  cp0->Service_Handle = Service_Handle;
 800654c:	f8ad 4008 	strh.w	r4, [sp, #8]
  cp0->Char_UUID_Type = Char_UUID_Type;
 8006550:	2301      	movs	r3, #1
 8006552:	f88d 300a 	strb.w	r3, [sp, #10]
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8006556:	f10d 040d 	add.w	r4, sp, #13
      case 1: size = 2; break;
 800655a:	2702      	movs	r7, #2
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800655c:	463a      	mov	r2, r7
 800655e:	4631      	mov	r1, r6
 8006560:	f10d 000b 	add.w	r0, sp, #11
 8006564:	f000 f96e 	bl	8006844 <Osal_MemCpy>
      cp1->Char_Value_Length = Char_Value_Length;
 8006568:	8025      	strh	r5, [r4, #0]
      cp1->Char_Properties = Char_Properties;
 800656a:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800656e:	70a3      	strb	r3, [r4, #2]
      cp1->Security_Permissions = Security_Permissions;
 8006570:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
 8006574:	70e3      	strb	r3, [r4, #3]
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8006576:	f89d 3140 	ldrb.w	r3, [sp, #320]	; 0x140
 800657a:	7123      	strb	r3, [r4, #4]
      cp1->Enc_Key_Size = Enc_Key_Size;
 800657c:	f89d 3144 	ldrb.w	r3, [sp, #324]	; 0x144
 8006580:	7163      	strb	r3, [r4, #5]
      cp1->Is_Variable = Is_Variable;
 8006582:	f89d 3148 	ldrb.w	r3, [sp, #328]	; 0x148
 8006586:	71a3      	strb	r3, [r4, #6]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006588:	2218      	movs	r2, #24
 800658a:	2100      	movs	r1, #0
 800658c:	a842      	add	r0, sp, #264	; 0x108
 800658e:	f000 f95d 	bl	800684c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006592:	233f      	movs	r3, #63	; 0x3f
 8006594:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x104;
 8006598:	f44f 7382 	mov.w	r3, #260	; 0x104
 800659c:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 80065a0:	ab02      	add	r3, sp, #8
 80065a2:	9344      	str	r3, [sp, #272]	; 0x110
    index_input += 1;
 80065a4:	370a      	adds	r7, #10
  rq.clen = index_input;
 80065a6:	9745      	str	r7, [sp, #276]	; 0x114
  rq.rparam = &resp;
 80065a8:	ab01      	add	r3, sp, #4
 80065aa:	9346      	str	r3, [sp, #280]	; 0x118
  rq.rlen = sizeof(resp);
 80065ac:	2303      	movs	r3, #3
 80065ae:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80065b0:	2100      	movs	r1, #0
 80065b2:	a842      	add	r0, sp, #264	; 0x108
 80065b4:	f000 fbb4 	bl	8006d20 <hci_send_req>
 80065b8:	2800      	cmp	r0, #0
 80065ba:	dbc0      	blt.n	800653e <aci_gatt_add_char+0x20>
  if ( resp.Status )
 80065bc:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80065c0:	b920      	cbnz	r0, 80065cc <aci_gatt_add_char+0xae>
    return resp.Status;
  *Char_Handle = resp.Char_Handle;
 80065c2:	9b01      	ldr	r3, [sp, #4]
 80065c4:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80065c8:	9a53      	ldr	r2, [sp, #332]	; 0x14c
 80065ca:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 80065cc:	b049      	add	sp, #292	; 0x124
 80065ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80065d0:	2203      	movs	r2, #3
 80065d2:	2100      	movs	r1, #0
 80065d4:	a801      	add	r0, sp, #4
 80065d6:	f000 f939 	bl	800684c <Osal_MemSet>
  cp0->Service_Handle = Service_Handle;
 80065da:	f8ad 4008 	strh.w	r4, [sp, #8]
  cp0->Char_UUID_Type = Char_UUID_Type;
 80065de:	2302      	movs	r3, #2
 80065e0:	f88d 300a 	strb.w	r3, [sp, #10]
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80065e4:	f10d 041b 	add.w	r4, sp, #27
      case 2: size = 16; break;
 80065e8:	2710      	movs	r7, #16
 80065ea:	e7b7      	b.n	800655c <aci_gatt_add_char+0x3e>

080065ec <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80065ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065ee:	b0c9      	sub	sp, #292	; 0x124
 80065f0:	461c      	mov	r4, r3
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 80065f2:	f10d 0707 	add.w	r7, sp, #7
 80065f6:	2600      	movs	r6, #0
 80065f8:	f88d 6007 	strb.w	r6, [sp, #7]
  int index_input = 0;
  cp0->Service_Handle = Service_Handle;
 80065fc:	ad02      	add	r5, sp, #8
 80065fe:	f8ad 0008 	strh.w	r0, [sp, #8]
  index_input += 2;
  cp0->Char_Handle = Char_Handle;
 8006602:	f8ad 100a 	strh.w	r1, [sp, #10]
  index_input += 2;
  cp0->Val_Offset = Val_Offset;
 8006606:	f88d 200c 	strb.w	r2, [sp, #12]
  index_input += 1;
  cp0->Char_Value_Length = Char_Value_Length;
 800660a:	f88d 300d 	strb.w	r3, [sp, #13]
  index_input += 1;
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800660e:	461a      	mov	r2, r3
 8006610:	994e      	ldr	r1, [sp, #312]	; 0x138
 8006612:	f10d 000e 	add.w	r0, sp, #14
 8006616:	f000 f915 	bl	8006844 <Osal_MemCpy>
  index_input += Char_Value_Length;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800661a:	2218      	movs	r2, #24
 800661c:	4631      	mov	r1, r6
 800661e:	a842      	add	r0, sp, #264	; 0x108
 8006620:	f000 f914 	bl	800684c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006624:	233f      	movs	r3, #63	; 0x3f
 8006626:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x106;
 800662a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800662e:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 8006632:	9544      	str	r5, [sp, #272]	; 0x110
  index_input += Char_Value_Length;
 8006634:	3406      	adds	r4, #6
  rq.clen = index_input;
 8006636:	9445      	str	r4, [sp, #276]	; 0x114
  rq.rparam = &status;
 8006638:	9746      	str	r7, [sp, #280]	; 0x118
  rq.rlen = 1;
 800663a:	2301      	movs	r3, #1
 800663c:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800663e:	4631      	mov	r1, r6
 8006640:	a842      	add	r0, sp, #264	; 0x108
 8006642:	f000 fb6d 	bl	8006d20 <hci_send_req>
 8006646:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  return status;
 8006648:	bfac      	ite	ge
 800664a:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800664e:	20ff      	movlt	r0, #255	; 0xff
}
 8006650:	b049      	add	sp, #292	; 0x124
 8006652:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006654 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8006654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006656:	b0c9      	sub	sp, #292	; 0x124
 8006658:	460c      	mov	r4, r1
 800665a:	4611      	mov	r1, r2
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800665c:	f10d 0707 	add.w	r7, sp, #7
 8006660:	2500      	movs	r5, #0
 8006662:	f88d 5007 	strb.w	r5, [sp, #7]
  int index_input = 0;
  cp0->Offset = Offset;
 8006666:	ae02      	add	r6, sp, #8
 8006668:	f88d 0008 	strb.w	r0, [sp, #8]
  index_input += 1;
  cp0->Length = Length;
 800666c:	f88d 4009 	strb.w	r4, [sp, #9]
  index_input += 1;
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8006670:	4622      	mov	r2, r4
 8006672:	f10d 000a 	add.w	r0, sp, #10
 8006676:	f000 f8e5 	bl	8006844 <Osal_MemCpy>
  index_input += Length;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800667a:	2218      	movs	r2, #24
 800667c:	4629      	mov	r1, r5
 800667e:	a842      	add	r0, sp, #264	; 0x108
 8006680:	f000 f8e4 	bl	800684c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006684:	233f      	movs	r3, #63	; 0x3f
 8006686:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x00c;
 800668a:	230c      	movs	r3, #12
 800668c:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 8006690:	9644      	str	r6, [sp, #272]	; 0x110
  index_input += Length;
 8006692:	3402      	adds	r4, #2
  rq.clen = index_input;
 8006694:	9445      	str	r4, [sp, #276]	; 0x114
  rq.rparam = &status;
 8006696:	9746      	str	r7, [sp, #280]	; 0x118
  rq.rlen = 1;
 8006698:	2301      	movs	r3, #1
 800669a:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800669c:	4629      	mov	r1, r5
 800669e:	a842      	add	r0, sp, #264	; 0x108
 80066a0:	f000 fb3e 	bl	8006d20 <hci_send_req>
 80066a4:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  return status;
 80066a6:	bfac      	ite	ge
 80066a8:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 80066ac:	20ff      	movlt	r0, #255	; 0xff
}
 80066ae:	b049      	add	sp, #292	; 0x124
 80066b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080066b2 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80066b2:	b570      	push	{r4, r5, r6, lr}
 80066b4:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 80066b6:	f10d 0607 	add.w	r6, sp, #7
 80066ba:	2400      	movs	r4, #0
 80066bc:	f88d 4007 	strb.w	r4, [sp, #7]
  int index_input = 0;
  cp0->En_High_Power = En_High_Power;
 80066c0:	ad02      	add	r5, sp, #8
 80066c2:	f88d 0008 	strb.w	r0, [sp, #8]
  index_input += 1;
  cp0->PA_Level = PA_Level;
 80066c6:	f88d 1009 	strb.w	r1, [sp, #9]
  index_input += 1;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80066ca:	2218      	movs	r2, #24
 80066cc:	4621      	mov	r1, r4
 80066ce:	a842      	add	r0, sp, #264	; 0x108
 80066d0:	f000 f8bc 	bl	800684c <Osal_MemSet>
  rq.ogf = 0x3f;
 80066d4:	233f      	movs	r3, #63	; 0x3f
 80066d6:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x00f;
 80066da:	230f      	movs	r3, #15
 80066dc:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 80066e0:	9544      	str	r5, [sp, #272]	; 0x110
  rq.clen = index_input;
 80066e2:	2302      	movs	r3, #2
 80066e4:	9345      	str	r3, [sp, #276]	; 0x114
  rq.rparam = &status;
 80066e6:	9646      	str	r6, [sp, #280]	; 0x118
  rq.rlen = 1;
 80066e8:	2301      	movs	r3, #1
 80066ea:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80066ec:	4621      	mov	r1, r4
 80066ee:	a842      	add	r0, sp, #264	; 0x108
 80066f0:	f000 fb16 	bl	8006d20 <hci_send_req>
 80066f4:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  return status;
 80066f6:	bfac      	ite	ge
 80066f8:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 80066fc:	20ff      	movlt	r0, #255	; 0xff
}
 80066fe:	b048      	add	sp, #288	; 0x120
 8006700:	bd70      	pop	{r4, r5, r6, pc}

08006702 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8006702:	b570      	push	{r4, r5, r6, lr}
 8006704:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8006706:	f10d 0507 	add.w	r5, sp, #7
 800670a:	2400      	movs	r4, #0
 800670c:	f88d 4007 	strb.w	r4, [sp, #7]
  int index_input = 0;
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8006710:	ae02      	add	r6, sp, #8
 8006712:	f8ad 0008 	strh.w	r0, [sp, #8]
  index_input += 2;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006716:	2218      	movs	r2, #24
 8006718:	4621      	mov	r1, r4
 800671a:	a842      	add	r0, sp, #264	; 0x108
 800671c:	f000 f896 	bl	800684c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006720:	233f      	movs	r3, #63	; 0x3f
 8006722:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x018;
 8006726:	2318      	movs	r3, #24
 8006728:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 800672c:	9644      	str	r6, [sp, #272]	; 0x110
  rq.clen = index_input;
 800672e:	2302      	movs	r3, #2
 8006730:	9345      	str	r3, [sp, #276]	; 0x114
  rq.rparam = &status;
 8006732:	9546      	str	r5, [sp, #280]	; 0x118
  rq.rlen = 1;
 8006734:	2301      	movs	r3, #1
 8006736:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006738:	4621      	mov	r1, r4
 800673a:	a842      	add	r0, sp, #264	; 0x108
 800673c:	f000 faf0 	bl	8006d20 <hci_send_req>
 8006740:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  return status;
 8006742:	bfac      	ite	ge
 8006744:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8006748:	20ff      	movlt	r0, #255	; 0xff
}
 800674a:	b048      	add	sp, #288	; 0x120
 800674c:	bd70      	pop	{r4, r5, r6, pc}

0800674e <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800674e:	b510      	push	{r4, lr}
 8006750:	b088      	sub	sp, #32
  struct hci_request rq;
  tBleStatus status = 0;
 8006752:	2400      	movs	r4, #0
 8006754:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006758:	2218      	movs	r2, #24
 800675a:	4621      	mov	r1, r4
 800675c:	a802      	add	r0, sp, #8
 800675e:	f000 f875 	bl	800684c <Osal_MemSet>
  rq.ogf = 0x03;
 8006762:	2303      	movs	r3, #3
 8006764:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x003;
 8006768:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 800676c:	f10d 0307 	add.w	r3, sp, #7
 8006770:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 8006772:	2301      	movs	r3, #1
 8006774:	9307      	str	r3, [sp, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006776:	4621      	mov	r1, r4
 8006778:	a802      	add	r0, sp, #8
 800677a:	f000 fad1 	bl	8006d20 <hci_send_req>
 800677e:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  return status;
 8006780:	bfac      	ite	ge
 8006782:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8006786:	20ff      	movlt	r0, #255	; 0xff
}
 8006788:	b008      	add	sp, #32
 800678a:	bd10      	pop	{r4, pc}

0800678c <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800678c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800678e:	b0c9      	sub	sp, #292	; 0x124
 8006790:	4604      	mov	r4, r0
 8006792:	460e      	mov	r6, r1
 8006794:	4615      	mov	r5, r2
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006796:	2205      	movs	r2, #5
 8006798:	2100      	movs	r1, #0
 800679a:	4668      	mov	r0, sp
 800679c:	f000 f856 	bl	800684c <Osal_MemSet>
  int index_input = 0;
  cp0->Connection_Handle = Connection_Handle;
 80067a0:	af02      	add	r7, sp, #8
 80067a2:	f8ad 4008 	strh.w	r4, [sp, #8]
  index_input += 2;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80067a6:	2218      	movs	r2, #24
 80067a8:	2100      	movs	r1, #0
 80067aa:	a842      	add	r0, sp, #264	; 0x108
 80067ac:	f000 f84e 	bl	800684c <Osal_MemSet>
  rq.ogf = 0x08;
 80067b0:	2308      	movs	r3, #8
 80067b2:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x030;
 80067b6:	2330      	movs	r3, #48	; 0x30
 80067b8:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 80067bc:	9744      	str	r7, [sp, #272]	; 0x110
  rq.clen = index_input;
 80067be:	2302      	movs	r3, #2
 80067c0:	9345      	str	r3, [sp, #276]	; 0x114
  rq.rparam = &resp;
 80067c2:	f8cd d118 	str.w	sp, [sp, #280]	; 0x118
  rq.rlen = sizeof(resp);
 80067c6:	2305      	movs	r3, #5
 80067c8:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80067ca:	2100      	movs	r1, #0
 80067cc:	a842      	add	r0, sp, #264	; 0x108
 80067ce:	f000 faa7 	bl	8006d20 <hci_send_req>
 80067d2:	2800      	cmp	r0, #0
 80067d4:	db0a      	blt.n	80067ec <hci_le_read_phy+0x60>
    return BLE_STATUS_TIMEOUT;
  if ( resp.Status )
 80067d6:	f89d 0000 	ldrb.w	r0, [sp]
 80067da:	b928      	cbnz	r0, 80067e8 <hci_le_read_phy+0x5c>
    return resp.Status;
  *TX_PHY = resp.TX_PHY;
 80067dc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80067e0:	7033      	strb	r3, [r6, #0]
  *RX_PHY = resp.RX_PHY;
 80067e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80067e6:	702b      	strb	r3, [r5, #0]
  return BLE_STATUS_SUCCESS;
}
 80067e8:	b049      	add	sp, #292	; 0x124
 80067ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 80067ec:	20ff      	movs	r0, #255	; 0xff
 80067ee:	e7fb      	b.n	80067e8 <hci_le_read_phy+0x5c>

080067f0 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80067f0:	b570      	push	{r4, r5, r6, lr}
 80067f2:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 80067f4:	f10d 0607 	add.w	r6, sp, #7
 80067f8:	2500      	movs	r5, #0
 80067fa:	f88d 5007 	strb.w	r5, [sp, #7]
  int index_input = 0;
  cp0->ALL_PHYS = ALL_PHYS;
 80067fe:	ac02      	add	r4, sp, #8
 8006800:	f88d 0008 	strb.w	r0, [sp, #8]
  index_input += 1;
  cp0->TX_PHYS = TX_PHYS;
 8006804:	f88d 1009 	strb.w	r1, [sp, #9]
  index_input += 1;
  cp0->RX_PHYS = RX_PHYS;
 8006808:	f88d 200a 	strb.w	r2, [sp, #10]
  index_input += 1;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800680c:	2218      	movs	r2, #24
 800680e:	4629      	mov	r1, r5
 8006810:	a842      	add	r0, sp, #264	; 0x108
 8006812:	f000 f81b 	bl	800684c <Osal_MemSet>
  rq.ogf = 0x08;
 8006816:	2308      	movs	r3, #8
 8006818:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x031;
 800681c:	2331      	movs	r3, #49	; 0x31
 800681e:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 8006822:	9444      	str	r4, [sp, #272]	; 0x110
  rq.clen = index_input;
 8006824:	2303      	movs	r3, #3
 8006826:	9345      	str	r3, [sp, #276]	; 0x114
  rq.rparam = &status;
 8006828:	9646      	str	r6, [sp, #280]	; 0x118
  rq.rlen = 1;
 800682a:	2301      	movs	r3, #1
 800682c:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800682e:	4629      	mov	r1, r5
 8006830:	a842      	add	r0, sp, #264	; 0x108
 8006832:	f000 fa75 	bl	8006d20 <hci_send_req>
 8006836:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  return status;
 8006838:	bfac      	ite	ge
 800683a:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800683e:	20ff      	movlt	r0, #255	; 0xff
}
 8006840:	b048      	add	sp, #288	; 0x120
 8006842:	bd70      	pop	{r4, r5, r6, pc}

08006844 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8006844:	b508      	push	{r3, lr}
  return memcpy( dest, src, size ); 
 8006846:	f001 fd87 	bl	8008358 <memcpy>
}
 800684a:	bd08      	pop	{r3, pc}

0800684c <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800684c:	b508      	push	{r3, lr}
  return memset( ptr, value, size );
 800684e:	f001 fd91 	bl	8008374 <memset>
}
 8006852:	bd08      	pop	{r3, pc}

08006854 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8006854:	b510      	push	{r4, lr}
 8006856:	b084      	sub	sp, #16
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);

  switch(event_pckt->evt)
 8006858:	7843      	ldrb	r3, [r0, #1]
 800685a:	2bff      	cmp	r3, #255	; 0xff
 800685c:	d003      	beq.n	8006866 <PeerToPeer_Event_Handler+0x12>
  return_value = SVCCTL_EvtNotAck;
 800685e:	2400      	movs	r4, #0
    default:
      break;
  }

  return(return_value);
}/* end SVCCTL_EvtAckStatus_t */
 8006860:	4620      	mov	r0, r4
 8006862:	b004      	add	sp, #16
 8006864:	bd10      	pop	{r4, pc}
 8006866:	4604      	mov	r4, r0
      switch(blecore_evt->ecode)
 8006868:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 800686c:	f640 4301 	movw	r3, #3073	; 0xc01
 8006870:	429a      	cmp	r2, r3
 8006872:	d001      	beq.n	8006878 <PeerToPeer_Event_Handler+0x24>
  return_value = SVCCTL_EvtNotAck;
 8006874:	2400      	movs	r4, #0
 8006876:	e7f3      	b.n	8006860 <PeerToPeer_Event_Handler+0xc>
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8006878:	f8b0 2007 	ldrh.w	r2, [r0, #7]
 800687c:	4b19      	ldr	r3, [pc, #100]	; (80068e4 <PeerToPeer_Event_Handler+0x90>)
 800687e:	889b      	ldrh	r3, [r3, #4]
 8006880:	3302      	adds	r3, #2
 8006882:	429a      	cmp	r2, r3
 8006884:	d006      	beq.n	8006894 <PeerToPeer_Event_Handler+0x40>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8006886:	4b17      	ldr	r3, [pc, #92]	; (80068e4 <PeerToPeer_Event_Handler+0x90>)
 8006888:	885b      	ldrh	r3, [r3, #2]
 800688a:	3301      	adds	r3, #1
 800688c:	429a      	cmp	r2, r3
 800688e:	d00f      	beq.n	80068b0 <PeerToPeer_Event_Handler+0x5c>
  return_value = SVCCTL_EvtNotAck;
 8006890:	2400      	movs	r4, #0
 8006892:	e7e5      	b.n	8006860 <PeerToPeer_Event_Handler+0xc>
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8006894:	7b44      	ldrb	r4, [r0, #13]
 8006896:	f014 0401 	ands.w	r4, r4, #1
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800689a:	bf19      	ittee	ne
 800689c:	2300      	movne	r3, #0
 800689e:	f88d 3000 	strbne.w	r3, [sp]
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 80068a2:	2401      	moveq	r4, #1
 80068a4:	f88d 4000 	strbeq.w	r4, [sp]
                P2PS_STM_App_Notification(&Notification);
 80068a8:	4668      	mov	r0, sp
 80068aa:	f001 facb 	bl	8007e44 <P2PS_STM_App_Notification>
 80068ae:	e7d7      	b.n	8006860 <PeerToPeer_Event_Handler+0xc>
              BLE_DBG_P2P_STM_MSG("-- GATT : LED CONFIGURATION RECEIVED\n");
 80068b0:	480d      	ldr	r0, [pc, #52]	; (80068e8 <PeerToPeer_Event_Handler+0x94>)
 80068b2:	f000 fce1 	bl	8007278 <DbgTraceGetFileName>
 80068b6:	4601      	mov	r1, r0
 80068b8:	2395      	movs	r3, #149	; 0x95
 80068ba:	4a0c      	ldr	r2, [pc, #48]	; (80068ec <PeerToPeer_Event_Handler+0x98>)
 80068bc:	480c      	ldr	r0, [pc, #48]	; (80068f0 <PeerToPeer_Event_Handler+0x9c>)
 80068be:	f001 fd61 	bl	8008384 <iprintf>
 80068c2:	480c      	ldr	r0, [pc, #48]	; (80068f4 <PeerToPeer_Event_Handler+0xa0>)
 80068c4:	f001 fde4 	bl	8008490 <puts>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	f88d 3000 	strb.w	r3, [sp]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 80068ce:	f8b4 300b 	ldrh.w	r3, [r4, #11]
 80068d2:	f88d 3008 	strb.w	r3, [sp, #8]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 80068d6:	340d      	adds	r4, #13
 80068d8:	9401      	str	r4, [sp, #4]
              P2PS_STM_App_Notification(&Notification);  
 80068da:	4668      	mov	r0, sp
 80068dc:	f001 fab2 	bl	8007e44 <P2PS_STM_App_Notification>
  return_value = SVCCTL_EvtNotAck;
 80068e0:	2400      	movs	r4, #0
 80068e2:	e7bd      	b.n	8006860 <PeerToPeer_Event_Handler+0xc>
 80068e4:	2000012c 	.word	0x2000012c
 80068e8:	08009cb0 	.word	0x08009cb0
 80068ec:	08009d0c 	.word	0x08009d0c
 80068f0:	08009544 	.word	0x08009544
 80068f4:	08009ce4 	.word	0x08009ce4

080068f8 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 80068f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068fc:	b08b      	sub	sp, #44	; 0x2c
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 80068fe:	4862      	ldr	r0, [pc, #392]	; (8006a88 <P2PS_STM_Init+0x190>)
 8006900:	f000 f90a 	bl	8006b18 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8006904:	238f      	movs	r3, #143	; 0x8f
 8006906:	f88d 3018 	strb.w	r3, [sp, #24]
 800690a:	23e5      	movs	r3, #229	; 0xe5
 800690c:	f88d 3019 	strb.w	r3, [sp, #25]
 8006910:	23b3      	movs	r3, #179	; 0xb3
 8006912:	f88d 301a 	strb.w	r3, [sp, #26]
 8006916:	23d5      	movs	r3, #213	; 0xd5
 8006918:	f88d 301b 	strb.w	r3, [sp, #27]
 800691c:	232e      	movs	r3, #46	; 0x2e
 800691e:	f88d 301c 	strb.w	r3, [sp, #28]
 8006922:	237f      	movs	r3, #127	; 0x7f
 8006924:	f88d 301d 	strb.w	r3, [sp, #29]
 8006928:	234a      	movs	r3, #74	; 0x4a
 800692a:	f88d 301e 	strb.w	r3, [sp, #30]
 800692e:	2398      	movs	r3, #152	; 0x98
 8006930:	f88d 301f 	strb.w	r3, [sp, #31]
 8006934:	232a      	movs	r3, #42	; 0x2a
 8006936:	f88d 3020 	strb.w	r3, [sp, #32]
 800693a:	2348      	movs	r3, #72	; 0x48
 800693c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8006940:	237a      	movs	r3, #122	; 0x7a
 8006942:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 8006946:	23cc      	movs	r3, #204	; 0xcc
 8006948:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800694c:	2340      	movs	r3, #64	; 0x40
 800694e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8006952:	27fe      	movs	r7, #254	; 0xfe
 8006954:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
 8006958:	2400      	movs	r4, #0
 800695a:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
 800695e:	f88d 4027 	strb.w	r4, [sp, #39]	; 0x27
    aci_gatt_add_service(UUID_TYPE_128,
 8006962:	4b4a      	ldr	r3, [pc, #296]	; (8006a8c <P2PS_STM_Init+0x194>)
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	2308      	movs	r3, #8
 8006968:	2201      	movs	r2, #1
 800696a:	a906      	add	r1, sp, #24
 800696c:	2002      	movs	r0, #2
 800696e:	f7ff fd7d 	bl	800646c <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8006972:	f04f 0b19 	mov.w	fp, #25
 8006976:	f88d b018 	strb.w	fp, [sp, #24]
 800697a:	26ed      	movs	r6, #237	; 0xed
 800697c:	f88d 6019 	strb.w	r6, [sp, #25]
 8006980:	f04f 0a82 	mov.w	sl, #130	; 0x82
 8006984:	f88d a01a 	strb.w	sl, [sp, #26]
 8006988:	f06f 0351 	mvn.w	r3, #81	; 0x51
 800698c:	f88d 301b 	strb.w	r3, [sp, #27]
 8006990:	f88d 601c 	strb.w	r6, [sp, #28]
 8006994:	f04f 0221 	mov.w	r2, #33	; 0x21
 8006998:	f88d 201d 	strb.w	r2, [sp, #29]
 800699c:	f04f 014c 	mov.w	r1, #76	; 0x4c
 80069a0:	f88d 101e 	strb.w	r1, [sp, #30]
 80069a4:	f06f 0062 	mvn.w	r0, #98	; 0x62
 80069a8:	f88d 001f 	strb.w	r0, [sp, #31]
 80069ac:	f04f 0841 	mov.w	r8, #65	; 0x41
 80069b0:	f88d 8020 	strb.w	r8, [sp, #32]
 80069b4:	f04f 0545 	mov.w	r5, #69	; 0x45
 80069b8:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 80069bc:	f04f 0c22 	mov.w	ip, #34	; 0x22
 80069c0:	f88d c022 	strb.w	ip, [sp, #34]	; 0x22
 80069c4:	f04f 098e 	mov.w	r9, #142	; 0x8e
 80069c8:	f88d 9023 	strb.w	r9, [sp, #35]	; 0x23
 80069cc:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
 80069d0:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
 80069d4:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
 80069d8:	f88d 4027 	strb.w	r4, [sp, #39]	; 0x27
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 80069dc:	4b2b      	ldr	r3, [pc, #172]	; (8006a8c <P2PS_STM_Init+0x194>)
 80069de:	f833 0b02 	ldrh.w	r0, [r3], #2
 80069e2:	9305      	str	r3, [sp, #20]
 80069e4:	2501      	movs	r5, #1
 80069e6:	9504      	str	r5, [sp, #16]
 80069e8:	f04f 0e0a 	mov.w	lr, #10
 80069ec:	f8cd e00c 	str.w	lr, [sp, #12]
 80069f0:	9502      	str	r5, [sp, #8]
 80069f2:	9401      	str	r4, [sp, #4]
 80069f4:	2306      	movs	r3, #6
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	2302      	movs	r3, #2
 80069fa:	f10d 0e18 	add.w	lr, sp, #24
 80069fe:	4672      	mov	r2, lr
 8006a00:	4619      	mov	r1, r3
 8006a02:	f7ff fd8c 	bl	800651e <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8006a06:	f88d b018 	strb.w	fp, [sp, #24]
 8006a0a:	f88d 6019 	strb.w	r6, [sp, #25]
 8006a0e:	f88d a01a 	strb.w	sl, [sp, #26]
 8006a12:	f06f 0351 	mvn.w	r3, #81	; 0x51
 8006a16:	f88d 301b 	strb.w	r3, [sp, #27]
 8006a1a:	f88d 601c 	strb.w	r6, [sp, #28]
 8006a1e:	f04f 0221 	mov.w	r2, #33	; 0x21
 8006a22:	f88d 201d 	strb.w	r2, [sp, #29]
 8006a26:	f04f 014c 	mov.w	r1, #76	; 0x4c
 8006a2a:	f88d 101e 	strb.w	r1, [sp, #30]
 8006a2e:	f06f 0062 	mvn.w	r0, #98	; 0x62
 8006a32:	f88d 001f 	strb.w	r0, [sp, #31]
 8006a36:	f88d 8020 	strb.w	r8, [sp, #32]
 8006a3a:	f04f 0345 	mov.w	r3, #69	; 0x45
 8006a3e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8006a42:	f04f 0c22 	mov.w	ip, #34	; 0x22
 8006a46:	f88d c022 	strb.w	ip, [sp, #34]	; 0x22
 8006a4a:	f88d 9023 	strb.w	r9, [sp, #35]	; 0x23
 8006a4e:	2342      	movs	r3, #66	; 0x42
 8006a50:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8006a54:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
 8006a58:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
 8006a5c:	f88d 4027 	strb.w	r4, [sp, #39]	; 0x27
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8006a60:	4b0a      	ldr	r3, [pc, #40]	; (8006a8c <P2PS_STM_Init+0x194>)
 8006a62:	f833 0b04 	ldrh.w	r0, [r3], #4
 8006a66:	9305      	str	r3, [sp, #20]
 8006a68:	9504      	str	r5, [sp, #16]
 8006a6a:	230a      	movs	r3, #10
 8006a6c:	9303      	str	r3, [sp, #12]
 8006a6e:	9502      	str	r5, [sp, #8]
 8006a70:	9401      	str	r4, [sp, #4]
 8006a72:	2310      	movs	r3, #16
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	2302      	movs	r3, #2
 8006a78:	aa06      	add	r2, sp, #24
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	f7ff fd4f 	bl	800651e <aci_gatt_add_char>
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
}
 8006a80:	b00b      	add	sp, #44	; 0x2c
 8006a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a86:	bf00      	nop
 8006a88:	08006855 	.word	0x08006855
 8006a8c:	2000012c 	.word	0x2000012c

08006a90 <BAS_Init>:
void BVOPUS_STM_Init(void);

__weak void BAS_Init( void )
{
  return;
}
 8006a90:	4770      	bx	lr

08006a92 <BLS_Init>:

__weak void BLS_Init( void )
{
  return;
}
 8006a92:	4770      	bx	lr

08006a94 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
  return;
}
 8006a94:	4770      	bx	lr

08006a96 <DIS_Init>:
__weak void DIS_Init( void )
{
  return;
}
 8006a96:	4770      	bx	lr

08006a98 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
  return;
}
 8006a98:	4770      	bx	lr

08006a9a <HIDS_Init>:
__weak void HIDS_Init( void )
{
  return;
}
 8006a9a:	4770      	bx	lr

08006a9c <HRS_Init>:
__weak void HRS_Init( void )
{
  return;
}
 8006a9c:	4770      	bx	lr

08006a9e <HTS_Init>:
__weak void HTS_Init( void )
{
  return;
}
 8006a9e:	4770      	bx	lr

08006aa0 <IAS_Init>:
__weak void IAS_Init( void )
{
  return;
}
 8006aa0:	4770      	bx	lr

08006aa2 <LLS_Init>:
__weak void LLS_Init( void )
{
  return;
}
 8006aa2:	4770      	bx	lr

08006aa4 <TPS_Init>:
__weak void TPS_Init( void )
{
  return;
}
 8006aa4:	4770      	bx	lr

08006aa6 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
  return;
}
 8006aa6:	4770      	bx	lr

08006aa8 <ZDD_STM_Init>:
  return;
}
__weak void ZDD_STM_Init( void )
{
  return;
}
 8006aa8:	4770      	bx	lr

08006aaa <OTAS_STM_Init>:
__weak void OTAS_STM_Init( void )
{
  return;
}
 8006aaa:	4770      	bx	lr

08006aac <MESH_Init>:
__weak void MESH_Init( void )
{
  return;
}
 8006aac:	4770      	bx	lr

08006aae <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
  return;
}
 8006aae:	4770      	bx	lr

08006ab0 <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
  return;
}
 8006ab0:	4770      	bx	lr

08006ab2 <SVCCTL_SvcInit>:

  return;
}

__weak void SVCCTL_SvcInit(void)
{
 8006ab2:	b508      	push	{r3, lr}
  BAS_Init();
 8006ab4:	f7ff ffec 	bl	8006a90 <BAS_Init>

  BLS_Init();
 8006ab8:	f7ff ffeb 	bl	8006a92 <BLS_Init>

  CRS_STM_Init();
 8006abc:	f7ff ffea 	bl	8006a94 <CRS_STM_Init>

  DIS_Init();
 8006ac0:	f7ff ffe9 	bl	8006a96 <DIS_Init>

  EDS_STM_Init();
 8006ac4:	f7ff ffe8 	bl	8006a98 <EDS_STM_Init>

  HIDS_Init();
 8006ac8:	f7ff ffe7 	bl	8006a9a <HIDS_Init>

  HRS_Init();
 8006acc:	f7ff ffe6 	bl	8006a9c <HRS_Init>

  HTS_Init();
 8006ad0:	f7ff ffe5 	bl	8006a9e <HTS_Init>

  IAS_Init();
 8006ad4:	f7ff ffe4 	bl	8006aa0 <IAS_Init>

  LLS_Init();
 8006ad8:	f7ff ffe3 	bl	8006aa2 <LLS_Init>

  TPS_Init();
 8006adc:	f7ff ffe2 	bl	8006aa4 <TPS_Init>

  MOTENV_STM_Init();
 8006ae0:	f7ff ffe1 	bl	8006aa6 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8006ae4:	f7ff ff08 	bl	80068f8 <P2PS_STM_Init>

  ZDD_STM_Init();
 8006ae8:	f7ff ffde 	bl	8006aa8 <ZDD_STM_Init>

  OTAS_STM_Init();
 8006aec:	f7ff ffdd 	bl	8006aaa <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8006af0:	f7ff ffdd 	bl	8006aae <BVOPUS_STM_Init>

  MESH_Init();
 8006af4:	f7ff ffda 	bl	8006aac <MESH_Init>

  SVCCTL_InitCustomSvc();
 8006af8:	f7ff ffda 	bl	8006ab0 <SVCCTL_InitCustomSvc>
  
  return;
}
 8006afc:	bd08      	pop	{r3, pc}
	...

08006b00 <SVCCTL_Init>:
{
 8006b00:	b508      	push	{r3, lr}
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8006b02:	4b04      	ldr	r3, [pc, #16]	; (8006b14 <SVCCTL_Init+0x14>)
 8006b04:	2200      	movs	r2, #0
 8006b06:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8006b08:	f883 2020 	strb.w	r2, [r3, #32]
  SVCCTL_SvcInit();
 8006b0c:	f7ff ffd1 	bl	8006ab2 <SVCCTL_SvcInit>
}
 8006b10:	bd08      	pop	{r3, pc}
 8006b12:	bf00      	nop
 8006b14:	20000134 	.word	0x20000134

08006b18 <SVCCTL_RegisterSvcHandler>:
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8006b18:	4a03      	ldr	r2, [pc, #12]	; (8006b28 <SVCCTL_RegisterSvcHandler+0x10>)
 8006b1a:	7f13      	ldrb	r3, [r2, #28]
 8006b1c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8006b20:	3301      	adds	r3, #1
 8006b22:	7713      	strb	r3, [r2, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
}
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	20000134 	.word	0x20000134

08006b2c <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8006b2c:	b570      	push	{r4, r5, r6, lr}
 8006b2e:	4604      	mov	r4, r0
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
  event_notification_status = SVCCTL_EvtNotAck;

  switch (event_pckt->evt)
 8006b30:	7843      	ldrb	r3, [r0, #1]
 8006b32:	2bff      	cmp	r3, #255	; 0xff
 8006b34:	d106      	bne.n	8006b44 <SVCCTL_UserEvtRx+0x18>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8006b36:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 8006b3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006b3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b42:	d003      	beq.n	8006b4c <SVCCTL_UserEvtRx+0x20>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8006b44:	4620      	mov	r0, r4
 8006b46:	f000 ffef 	bl	8007b28 <SVCCTL_App_Notification>
      return_status = SVCCTL_UserEvtFlowEnable;
      break;
  }

  return (return_status);
}
 8006b4a:	bd70      	pop	{r4, r5, r6, pc}
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006b4c:	4b0a      	ldr	r3, [pc, #40]	; (8006b78 <SVCCTL_UserEvtRx+0x4c>)
 8006b4e:	7f1b      	ldrb	r3, [r3, #28]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d0f7      	beq.n	8006b44 <SVCCTL_UserEvtRx+0x18>
 8006b54:	2500      	movs	r5, #0
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8006b56:	4e08      	ldr	r6, [pc, #32]	; (8006b78 <SVCCTL_UserEvtRx+0x4c>)
 8006b58:	b2eb      	uxtb	r3, r5
 8006b5a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8006b5e:	4620      	mov	r0, r4
 8006b60:	4798      	blx	r3
            if (event_notification_status != SVCCTL_EvtNotAck)
 8006b62:	b928      	cbnz	r0, 8006b70 <SVCCTL_UserEvtRx+0x44>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006b64:	3501      	adds	r5, #1
 8006b66:	7f32      	ldrb	r2, [r6, #28]
 8006b68:	b2eb      	uxtb	r3, r5
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d8f4      	bhi.n	8006b58 <SVCCTL_UserEvtRx+0x2c>
 8006b6e:	e7e9      	b.n	8006b44 <SVCCTL_UserEvtRx+0x18>
      return_status = SVCCTL_App_Notification(pckt);
 8006b70:	3802      	subs	r0, #2
 8006b72:	bf18      	it	ne
 8006b74:	2001      	movne	r0, #1
 8006b76:	e7e8      	b.n	8006b4a <SVCCTL_UserEvtRx+0x1e>
 8006b78:	20000134 	.word	0x20000134

08006b7c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8006b7c:	b500      	push	{lr}
 8006b7e:	b085      	sub	sp, #20
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8006b80:	466b      	mov	r3, sp
 8006b82:	f100 020c 	add.w	r2, r0, #12
 8006b86:	2125      	movs	r1, #37	; 0x25
 8006b88:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8006b8c:	f000 f9d2 	bl	8006f34 <shci_send>
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}
 8006b90:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8006b94:	b005      	add	sp, #20
 8006b96:	f85d fb04 	ldr.w	pc, [sp], #4

08006b9a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8006b9a:	b500      	push	{lr}
 8006b9c:	b085      	sub	sp, #20
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8006b9e:	466b      	mov	r3, sp
 8006ba0:	f100 020c 	add.w	r2, r0, #12
 8006ba4:	210f      	movs	r1, #15
 8006ba6:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8006baa:	f000 f9c3 	bl	8006f34 <shci_send>
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}
 8006bae:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8006bb2:	b005      	add	sp, #20
 8006bb4:	f85d fb04 	ldr.w	pc, [sp], #4

08006bb8 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8006bb8:	b500      	push	{lr}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	4602      	mov	r2, r0
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8006bbe:	466b      	mov	r3, sp
 8006bc0:	210e      	movs	r1, #14
 8006bc2:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8006bc6:	f000 f9b5 	bl	8006f34 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}
 8006bca:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8006bce:	b005      	add	sp, #20
 8006bd0:	f85d fb04 	ldr.w	pc, [sp], #4

08006bd4 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8006bd4:	b470      	push	{r4, r5, r6}
  uint32_t wireless_firmware_infoStack = 0;
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
  uint32_t fus_version = 0;
  uint32_t fus_memorySize = 0;

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8006bd6:	4b1d      	ldr	r3, [pc, #116]	; (8006c4c <SHCI_GetWirelessFwInfo+0x78>)
 8006bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006be2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8006be6:	681a      	ldr	r2, [r3, #0]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8006be8:	6811      	ldr	r1, [r2, #0]
 8006bea:	4b19      	ldr	r3, [pc, #100]	; (8006c50 <SHCI_GetWirelessFwInfo+0x7c>)
 8006bec:	4299      	cmp	r1, r3
 8006bee:	d026      	beq.n	8006c3e <SHCI_GetWirelessFwInfo+0x6a>

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8006bf0:	6913      	ldr	r3, [r2, #16]
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8006bf2:	6954      	ldr	r4, [r2, #20]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8006bf4:	6995      	ldr	r5, [r2, #24]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8006bf6:	6851      	ldr	r1, [r2, #4]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8006bf8:	6892      	ldr	r2, [r2, #8]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8006bfa:	0e1e      	lsrs	r6, r3, #24
 8006bfc:	7006      	strb	r6, [r0, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8006bfe:	0c1e      	lsrs	r6, r3, #16
 8006c00:	7046      	strb	r6, [r0, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006c02:	0a1e      	lsrs	r6, r3, #8
 8006c04:	7086      	strb	r6, [r0, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8006c06:	f3c3 1603 	ubfx	r6, r3, #4, #4
 8006c0a:	70c6      	strb	r6, [r0, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8006c0c:	f003 030f 	and.w	r3, r3, #15
 8006c10:	7103      	strb	r3, [r0, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8006c12:	0e23      	lsrs	r3, r4, #24
 8006c14:	7143      	strb	r3, [r0, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006c16:	0c23      	lsrs	r3, r4, #16
 8006c18:	7183      	strb	r3, [r0, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8006c1a:	0a23      	lsrs	r3, r4, #8
 8006c1c:	71c3      	strb	r3, [r0, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8006c1e:	7204      	strb	r4, [r0, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8006c20:	7245      	strb	r5, [r0, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8006c22:	0e0b      	lsrs	r3, r1, #24
 8006c24:	7283      	strb	r3, [r0, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8006c26:	0c0b      	lsrs	r3, r1, #16
 8006c28:	72c3      	strb	r3, [r0, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006c2a:	0a09      	lsrs	r1, r1, #8
 8006c2c:	7301      	strb	r1, [r0, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8006c2e:	0e13      	lsrs	r3, r2, #24
 8006c30:	7343      	strb	r3, [r0, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006c32:	0c13      	lsrs	r3, r2, #16
 8006c34:	7383      	strb	r3, [r0, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8006c36:	73c2      	strb	r2, [r0, #15]

  return (SHCI_Success);
}
 8006c38:	2000      	movs	r0, #0
 8006c3a:	bc70      	pop	{r4, r5, r6}
 8006c3c:	4770      	bx	lr
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8006c3e:	6953      	ldr	r3, [r2, #20]
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8006c40:	6994      	ldr	r4, [r2, #24]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8006c42:	69d5      	ldr	r5, [r2, #28]
    fus_version =  p_fus_device_info_table->FusVersion;
 8006c44:	68d1      	ldr	r1, [r2, #12]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8006c46:	6912      	ldr	r2, [r2, #16]
 8006c48:	e7d7      	b.n	8006bfa <SHCI_GetWirelessFwInfo+0x26>
 8006c4a:	bf00      	nop
 8006c4c:	58004000 	.word	0x58004000
 8006c50:	a94656b9 	.word	0xa94656b9

08006c54 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006c54:	b570      	push	{r4, r5, r6, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	460c      	mov	r4, r1
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006c5a:	684a      	ldr	r2, [r1, #4]
 8006c5c:	4b0d      	ldr	r3, [pc, #52]	; (8006c94 <hci_init+0x40>)
 8006c5e:	601a      	str	r2, [r3, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8006c60:	4d0d      	ldr	r5, [pc, #52]	; (8006c98 <hci_init+0x44>)
 8006c62:	61e8      	str	r0, [r5, #28]

  hci_register_io_bus (&hciContext.io);
 8006c64:	4628      	mov	r0, r5
 8006c66:	f000 f8e5 	bl	8006e34 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006c6a:	6826      	ldr	r6, [r4, #0]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8006c6c:	480b      	ldr	r0, [pc, #44]	; (8006c9c <hci_init+0x48>)
 8006c6e:	f000 fb61 	bl	8007334 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8006c72:	4c0b      	ldr	r4, [pc, #44]	; (8006ca0 <hci_init+0x4c>)
 8006c74:	4620      	mov	r0, r4
 8006c76:	f840 6b04 	str.w	r6, [r0], #4

  LST_init_head (&HciAsynchEventQueue);
 8006c7a:	f000 fb5b 	bl	8007334 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	7323      	strb	r3, [r4, #12]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8006c82:	682b      	ldr	r3, [r5, #0]
 8006c84:	b123      	cbz	r3, 8006c90 <hci_init+0x3c>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006c86:	9602      	str	r6, [sp, #8]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8006c88:	4a06      	ldr	r2, [pc, #24]	; (8006ca4 <hci_init+0x50>)
 8006c8a:	9200      	str	r2, [sp, #0]
    hciContext.io.Init(&Conf);
 8006c8c:	4668      	mov	r0, sp
 8006c8e:	4798      	blx	r3
}
 8006c90:	b004      	add	sp, #16
 8006c92:	bd70      	pop	{r4, r5, r6, pc}
 8006c94:	200002e8 	.word	0x200002e8
 8006c98:	200002ec 	.word	0x200002ec
 8006c9c:	200002e0 	.word	0x200002e0
 8006ca0:	20000158 	.word	0x20000158
 8006ca4:	08006e01 	.word	0x08006e01

08006ca8 <hci_user_evt_proc>:
{
 8006ca8:	b500      	push	{lr}
 8006caa:	b085      	sub	sp, #20
  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006cac:	4819      	ldr	r0, [pc, #100]	; (8006d14 <hci_user_evt_proc+0x6c>)
 8006cae:	f000 fb44 	bl	800733a <LST_is_empty>
 8006cb2:	b910      	cbnz	r0, 8006cba <hci_user_evt_proc+0x12>
 8006cb4:	4b18      	ldr	r3, [pc, #96]	; (8006d18 <hci_user_evt_proc+0x70>)
 8006cb6:	7b1b      	ldrb	r3, [r3, #12]
 8006cb8:	b94b      	cbnz	r3, 8006cce <hci_user_evt_proc+0x26>
  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006cba:	4816      	ldr	r0, [pc, #88]	; (8006d14 <hci_user_evt_proc+0x6c>)
 8006cbc:	f000 fb3d 	bl	800733a <LST_is_empty>
 8006cc0:	b910      	cbnz	r0, 8006cc8 <hci_user_evt_proc+0x20>
 8006cc2:	4b15      	ldr	r3, [pc, #84]	; (8006d18 <hci_user_evt_proc+0x70>)
 8006cc4:	7b1b      	ldrb	r3, [r3, #12]
 8006cc6:	bb0b      	cbnz	r3, 8006d0c <hci_user_evt_proc+0x64>
}
 8006cc8:	b005      	add	sp, #20
 8006cca:	f85d fb04 	ldr.w	pc, [sp], #4
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006cce:	a903      	add	r1, sp, #12
 8006cd0:	4810      	ldr	r0, [pc, #64]	; (8006d14 <hci_user_evt_proc+0x6c>)
 8006cd2:	f000 fb61 	bl	8007398 <LST_remove_head>
    if (hciContext.UserEvtRx != NULL)
 8006cd6:	4b11      	ldr	r3, [pc, #68]	; (8006d1c <hci_user_evt_proc+0x74>)
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	b183      	cbz	r3, 8006cfe <hci_user_evt_proc+0x56>
      UserEvtRxParam.pckt = phcievtbuffer;
 8006cdc:	9a03      	ldr	r2, [sp, #12]
 8006cde:	9202      	str	r2, [sp, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f88d 2004 	strb.w	r2, [sp, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006ce6:	a801      	add	r0, sp, #4
 8006ce8:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8006cea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006cee:	4a0a      	ldr	r2, [pc, #40]	; (8006d18 <hci_user_evt_proc+0x70>)
 8006cf0:	7313      	strb	r3, [r2, #12]
    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8006cf2:	b93b      	cbnz	r3, 8006d04 <hci_user_evt_proc+0x5c>
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006cf4:	9903      	ldr	r1, [sp, #12]
 8006cf6:	4807      	ldr	r0, [pc, #28]	; (8006d14 <hci_user_evt_proc+0x6c>)
 8006cf8:	f000 fb2a 	bl	8007350 <LST_insert_head>
 8006cfc:	e7dd      	b.n	8006cba <hci_user_evt_proc+0x12>
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006cfe:	4b06      	ldr	r3, [pc, #24]	; (8006d18 <hci_user_evt_proc+0x70>)
 8006d00:	2201      	movs	r2, #1
 8006d02:	731a      	strb	r2, [r3, #12]
      TL_MM_EvtDone( phcievtbuffer );
 8006d04:	9803      	ldr	r0, [sp, #12]
 8006d06:	f000 fa5d 	bl	80071c4 <TL_MM_EvtDone>
 8006d0a:	e7d6      	b.n	8006cba <hci_user_evt_proc+0x12>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8006d0c:	4801      	ldr	r0, [pc, #4]	; (8006d14 <hci_user_evt_proc+0x6c>)
 8006d0e:	f001 f889 	bl	8007e24 <hci_notify_asynch_evt>
  return;
 8006d12:	e7d9      	b.n	8006cc8 <hci_user_evt_proc+0x20>
 8006d14:	2000015c 	.word	0x2000015c
 8006d18:	20000158 	.word	0x20000158
 8006d1c:	200002ec 	.word	0x200002ec

08006d20 <hci_send_req>:
{
 8006d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d24:	b082      	sub	sp, #8
 8006d26:	4680      	mov	r8, r0

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
  if(hcicmdstatus == HCI_TL_CmdBusy)
  {
    if(StatusNotCallBackFunction != 0)
 8006d28:	4b31      	ldr	r3, [pc, #196]	; (8006df0 <hci_send_req+0xd0>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	b10b      	cbz	r3, 8006d32 <hci_send_req+0x12>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8006d2e:	2000      	movs	r0, #0
 8006d30:	4798      	blx	r3
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8006d32:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8006d36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d3a:	f8b8 2000 	ldrh.w	r2, [r8]
 8006d3e:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8006d42:	b29f      	uxth	r7, r3
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8006d44:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8006d48:	f8d8 1008 	ldr.w	r1, [r8, #8]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8006d4c:	4829      	ldr	r0, [pc, #164]	; (8006df4 <hci_send_req+0xd4>)
 8006d4e:	6800      	ldr	r0, [r0, #0]
 8006d50:	f8a0 3009 	strh.w	r3, [r0, #9]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8006d54:	72c2      	strb	r2, [r0, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8006d56:	b2d2      	uxtb	r2, r2
 8006d58:	300c      	adds	r0, #12
 8006d5a:	f001 fafd 	bl	8008358 <memcpy>
  hciContext.io.Send(0,0);
 8006d5e:	4b26      	ldr	r3, [pc, #152]	; (8006df8 <hci_send_req+0xd8>)
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	2100      	movs	r1, #0
 8006d64:	4608      	mov	r0, r1
 8006d66:	4798      	blx	r3
  local_cmd_status = HCI_TL_CmdBusy;
 8006d68:	2600      	movs	r6, #0
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006d6a:	4d24      	ldr	r5, [pc, #144]	; (8006dfc <hci_send_req+0xdc>)
 8006d6c:	e032      	b.n	8006dd4 <hci_send_req+0xb4>
        if(pcommand_status_event->cmdcode == opcode)
 8006d6e:	f8b4 300d 	ldrh.w	r3, [r4, #13]
 8006d72:	42bb      	cmp	r3, r7
 8006d74:	d004      	beq.n	8006d80 <hci_send_req+0x60>
        if(pcommand_status_event->numcmd != 0)
 8006d76:	7b23      	ldrb	r3, [r4, #12]
          local_cmd_status = HCI_TL_CmdAvailable;
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	bf18      	it	ne
 8006d7c:	2601      	movne	r6, #1
 8006d7e:	e018      	b.n	8006db2 <hci_send_req+0x92>
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8006d80:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006d84:	7ae2      	ldrb	r2, [r4, #11]
 8006d86:	701a      	strb	r2, [r3, #0]
 8006d88:	e7f5      	b.n	8006d76 <hci_send_req+0x56>
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8006d8a:	7aa2      	ldrb	r2, [r4, #10]
 8006d8c:	3a03      	subs	r2, #3
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8006d8e:	b2d2      	uxtb	r2, r2
 8006d90:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	bfa8      	it	ge
 8006d98:	461a      	movge	r2, r3
 8006d9a:	f8c8 2014 	str.w	r2, [r8, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8006d9e:	f104 010e 	add.w	r1, r4, #14
 8006da2:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8006da6:	f001 fad7 	bl	8008358 <memcpy>
        if(pcommand_complete_event->numcmd != 0)
 8006daa:	7ae3      	ldrb	r3, [r4, #11]
          local_cmd_status = HCI_TL_CmdAvailable;
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	bf18      	it	ne
 8006db0:	2601      	movne	r6, #1
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006db2:	4628      	mov	r0, r5
 8006db4:	f000 fac1 	bl	800733a <LST_is_empty>
 8006db8:	b958      	cbnz	r0, 8006dd2 <hci_send_req+0xb2>
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8006dba:	a901      	add	r1, sp, #4
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	f000 faeb 	bl	8007398 <LST_remove_head>
      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8006dc2:	9c01      	ldr	r4, [sp, #4]
 8006dc4:	7a63      	ldrb	r3, [r4, #9]
 8006dc6:	2b0f      	cmp	r3, #15
 8006dc8:	d0d1      	beq.n	8006d6e <hci_send_req+0x4e>
        if(pcommand_complete_event->cmdcode == opcode)
 8006dca:	89a3      	ldrh	r3, [r4, #12]
 8006dcc:	42bb      	cmp	r3, r7
 8006dce:	d1ec      	bne.n	8006daa <hci_send_req+0x8a>
 8006dd0:	e7db      	b.n	8006d8a <hci_send_req+0x6a>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8006dd2:	b926      	cbnz	r6, 8006dde <hci_send_req+0xbe>
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8006dd4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8006dd8:	f001 f82f 	bl	8007e3a <hci_cmd_resp_wait>
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006ddc:	e7e9      	b.n	8006db2 <hci_send_req+0x92>
    }
  }
  else
  {
    if(StatusNotCallBackFunction != 0)
 8006dde:	4b04      	ldr	r3, [pc, #16]	; (8006df0 <hci_send_req+0xd0>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	b10b      	cbz	r3, 8006de8 <hci_send_req+0xc8>
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8006de4:	2001      	movs	r0, #1
 8006de6:	4798      	blx	r3
}
 8006de8:	2000      	movs	r0, #0
 8006dea:	b002      	add	sp, #8
 8006dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006df0:	200002e8 	.word	0x200002e8
 8006df4:	20000158 	.word	0x20000158
 8006df8:	200002ec 	.word	0x200002ec
 8006dfc:	200002e0 	.word	0x200002e0

08006e00 <TlEvtReceived>:

  return;
}

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8006e00:	b510      	push	{r4, lr}
 8006e02:	4601      	mov	r1, r0
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8006e04:	7a43      	ldrb	r3, [r0, #9]
 8006e06:	3b0e      	subs	r3, #14
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d907      	bls.n	8006e1e <TlEvtReceived+0x1e>
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8006e0e:	4c07      	ldr	r4, [pc, #28]	; (8006e2c <TlEvtReceived+0x2c>)
 8006e10:	4620      	mov	r0, r4
 8006e12:	f000 faa9 	bl	8007368 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8006e16:	4620      	mov	r0, r4
 8006e18:	f001 f804 	bl	8007e24 <hci_notify_asynch_evt>
  }

  return;
}
 8006e1c:	bd10      	pop	{r4, pc}
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8006e1e:	4804      	ldr	r0, [pc, #16]	; (8006e30 <TlEvtReceived+0x30>)
 8006e20:	f000 faa2 	bl	8007368 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8006e24:	2000      	movs	r0, #0
 8006e26:	f001 f803 	bl	8007e30 <hci_cmd_resp_release>
 8006e2a:	e7f7      	b.n	8006e1c <TlEvtReceived+0x1c>
 8006e2c:	2000015c 	.word	0x2000015c
 8006e30:	200002e0 	.word	0x200002e0

08006e34 <hci_register_io_bus>:


void hci_register_io_bus(tHciIO* fops)
{
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8006e34:	4b02      	ldr	r3, [pc, #8]	; (8006e40 <hci_register_io_bus+0xc>)
 8006e36:	6003      	str	r3, [r0, #0]
  fops->Send    = TL_BLE_SendCmd;
 8006e38:	4b02      	ldr	r3, [pc, #8]	; (8006e44 <hci_register_io_bus+0x10>)
 8006e3a:	6103      	str	r3, [r0, #16]

  return;
}
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	08007045 	.word	0x08007045
 8006e44:	0800708d 	.word	0x0800708d

08006e48 <TlUserEvtReceived>:

  return;
}

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8006e48:	b510      	push	{r4, lr}
 8006e4a:	4601      	mov	r1, r0
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8006e4c:	4c03      	ldr	r4, [pc, #12]	; (8006e5c <TlUserEvtReceived+0x14>)
 8006e4e:	4620      	mov	r0, r4
 8006e50:	f000 fa8a 	bl	8007368 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8006e54:	4620      	mov	r0, r4
 8006e56:	f7fa f80e 	bl	8000e76 <shci_notify_asynch_evt>

  return;
}
 8006e5a:	bd10      	pop	{r4, pc}
 8006e5c:	20000168 	.word	0x20000168

08006e60 <shci_init>:
{
 8006e60:	b570      	push	{r4, r5, r6, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	460c      	mov	r4, r1
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006e66:	4d11      	ldr	r5, [pc, #68]	; (8006eac <shci_init+0x4c>)
 8006e68:	684b      	ldr	r3, [r1, #4]
 8006e6a:	602b      	str	r3, [r5, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8006e6c:	4b10      	ldr	r3, [pc, #64]	; (8006eb0 <shci_init+0x50>)
 8006e6e:	61d8      	str	r0, [r3, #28]
  shci_register_io_bus (&shciContext.io);
 8006e70:	4618      	mov	r0, r3
 8006e72:	f000 f89b 	bl	8006fac <shci_register_io_bus>
  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006e76:	6826      	ldr	r6, [r4, #0]
  pCmdBuffer = p_cmdbuffer;
 8006e78:	4c0e      	ldr	r4, [pc, #56]	; (8006eb4 <shci_init+0x54>)
 8006e7a:	60a6      	str	r6, [r4, #8]
  LST_init_head (&SHciAsynchEventQueue);
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	f000 fa59 	bl	8007334 <LST_init_head>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8006e82:	2301      	movs	r3, #1
 8006e84:	7323      	strb	r3, [r4, #12]
    if(StatusNotCallBackFunction != 0)
 8006e86:	682b      	ldr	r3, [r5, #0]
 8006e88:	b10b      	cbz	r3, 8006e8e <shci_init+0x2e>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8006e8a:	2001      	movs	r0, #1
 8006e8c:	4798      	blx	r3
  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8006e8e:	4b09      	ldr	r3, [pc, #36]	; (8006eb4 <shci_init+0x54>)
 8006e90:	2201      	movs	r2, #1
 8006e92:	735a      	strb	r2, [r3, #13]
  if (shciContext.io.Init)
 8006e94:	4b06      	ldr	r3, [pc, #24]	; (8006eb0 <shci_init+0x50>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	b133      	cbz	r3, 8006ea8 <shci_init+0x48>
    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006e9a:	9603      	str	r6, [sp, #12]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8006e9c:	4a06      	ldr	r2, [pc, #24]	; (8006eb8 <shci_init+0x58>)
 8006e9e:	9201      	str	r2, [sp, #4]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8006ea0:	4a06      	ldr	r2, [pc, #24]	; (8006ebc <shci_init+0x5c>)
 8006ea2:	9202      	str	r2, [sp, #8]
    shciContext.io.Init(&Conf);
 8006ea4:	a801      	add	r0, sp, #4
 8006ea6:	4798      	blx	r3
}
 8006ea8:	b004      	add	sp, #16
 8006eaa:	bd70      	pop	{r4, r5, r6, pc}
 8006eac:	2000030c 	.word	0x2000030c
 8006eb0:	20000310 	.word	0x20000310
 8006eb4:	20000168 	.word	0x20000168
 8006eb8:	08006fa1 	.word	0x08006fa1
 8006ebc:	08006e49 	.word	0x08006e49

08006ec0 <shci_user_evt_proc>:
{
 8006ec0:	b500      	push	{lr}
 8006ec2:	b085      	sub	sp, #20
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8006ec4:	4819      	ldr	r0, [pc, #100]	; (8006f2c <shci_user_evt_proc+0x6c>)
 8006ec6:	f000 fa38 	bl	800733a <LST_is_empty>
 8006eca:	b910      	cbnz	r0, 8006ed2 <shci_user_evt_proc+0x12>
 8006ecc:	4b17      	ldr	r3, [pc, #92]	; (8006f2c <shci_user_evt_proc+0x6c>)
 8006ece:	7b5b      	ldrb	r3, [r3, #13]
 8006ed0:	b94b      	cbnz	r3, 8006ee6 <shci_user_evt_proc+0x26>
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8006ed2:	4816      	ldr	r0, [pc, #88]	; (8006f2c <shci_user_evt_proc+0x6c>)
 8006ed4:	f000 fa31 	bl	800733a <LST_is_empty>
 8006ed8:	b910      	cbnz	r0, 8006ee0 <shci_user_evt_proc+0x20>
 8006eda:	4b14      	ldr	r3, [pc, #80]	; (8006f2c <shci_user_evt_proc+0x6c>)
 8006edc:	7b5b      	ldrb	r3, [r3, #13]
 8006ede:	bb0b      	cbnz	r3, 8006f24 <shci_user_evt_proc+0x64>
}
 8006ee0:	b005      	add	sp, #20
 8006ee2:	f85d fb04 	ldr.w	pc, [sp], #4
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006ee6:	a903      	add	r1, sp, #12
 8006ee8:	4810      	ldr	r0, [pc, #64]	; (8006f2c <shci_user_evt_proc+0x6c>)
 8006eea:	f000 fa55 	bl	8007398 <LST_remove_head>
    if (shciContext.UserEvtRx != NULL)
 8006eee:	4b10      	ldr	r3, [pc, #64]	; (8006f30 <shci_user_evt_proc+0x70>)
 8006ef0:	69db      	ldr	r3, [r3, #28]
 8006ef2:	b183      	cbz	r3, 8006f16 <shci_user_evt_proc+0x56>
      UserEvtRxParam.pckt = phcievtbuffer;
 8006ef4:	9a03      	ldr	r2, [sp, #12]
 8006ef6:	9202      	str	r2, [sp, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f88d 2004 	strb.w	r2, [sp, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006efe:	a801      	add	r0, sp, #4
 8006f00:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8006f02:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006f06:	4a09      	ldr	r2, [pc, #36]	; (8006f2c <shci_user_evt_proc+0x6c>)
 8006f08:	7353      	strb	r3, [r2, #13]
    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8006f0a:	b93b      	cbnz	r3, 8006f1c <shci_user_evt_proc+0x5c>
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006f0c:	9903      	ldr	r1, [sp, #12]
 8006f0e:	4807      	ldr	r0, [pc, #28]	; (8006f2c <shci_user_evt_proc+0x6c>)
 8006f10:	f000 fa1e 	bl	8007350 <LST_insert_head>
 8006f14:	e7dd      	b.n	8006ed2 <shci_user_evt_proc+0x12>
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8006f16:	4b05      	ldr	r3, [pc, #20]	; (8006f2c <shci_user_evt_proc+0x6c>)
 8006f18:	2201      	movs	r2, #1
 8006f1a:	735a      	strb	r2, [r3, #13]
      TL_MM_EvtDone( phcievtbuffer );
 8006f1c:	9803      	ldr	r0, [sp, #12]
 8006f1e:	f000 f951 	bl	80071c4 <TL_MM_EvtDone>
 8006f22:	e7d6      	b.n	8006ed2 <shci_user_evt_proc+0x12>
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8006f24:	4801      	ldr	r0, [pc, #4]	; (8006f2c <shci_user_evt_proc+0x6c>)
 8006f26:	f7f9 ffa6 	bl	8000e76 <shci_notify_asynch_evt>
  return;
 8006f2a:	e7d9      	b.n	8006ee0 <shci_user_evt_proc+0x20>
 8006f2c:	20000168 	.word	0x20000168
 8006f30:	20000310 	.word	0x20000310

08006f34 <shci_send>:
{
 8006f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f38:	4681      	mov	r9, r0
 8006f3a:	460d      	mov	r5, r1
 8006f3c:	4690      	mov	r8, r2
 8006f3e:	461e      	mov	r6, r3
    if(StatusNotCallBackFunction != 0)
 8006f40:	4b14      	ldr	r3, [pc, #80]	; (8006f94 <shci_send+0x60>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	b10b      	cbz	r3, 8006f4a <shci_send+0x16>
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8006f46:	2000      	movs	r0, #0
 8006f48:	4798      	blx	r3
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8006f4a:	4c13      	ldr	r4, [pc, #76]	; (8006f98 <shci_send+0x64>)
 8006f4c:	2700      	movs	r7, #0
 8006f4e:	7327      	strb	r7, [r4, #12]
  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8006f50:	68a0      	ldr	r0, [r4, #8]
 8006f52:	f8a0 9009 	strh.w	r9, [r0, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8006f56:	72c5      	strb	r5, [r0, #11]
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8006f58:	462a      	mov	r2, r5
 8006f5a:	4641      	mov	r1, r8
 8006f5c:	300c      	adds	r0, #12
 8006f5e:	f001 f9fb 	bl	8008358 <memcpy>
  shciContext.io.Send(0,0);
 8006f62:	4b0e      	ldr	r3, [pc, #56]	; (8006f9c <shci_send+0x68>)
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	4639      	mov	r1, r7
 8006f68:	4638      	mov	r0, r7
 8006f6a:	4798      	blx	r3
  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8006f6c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8006f70:	f7f9 ff8c 	bl	8000e8c <shci_cmd_resp_wait>
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8006f74:	68a1      	ldr	r1, [r4, #8]
 8006f76:	788a      	ldrb	r2, [r1, #2]
 8006f78:	3203      	adds	r2, #3
 8006f7a:	f106 0008 	add.w	r0, r6, #8
 8006f7e:	f001 f9eb 	bl	8008358 <memcpy>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8006f82:	2301      	movs	r3, #1
 8006f84:	7323      	strb	r3, [r4, #12]
    if(StatusNotCallBackFunction != 0)
 8006f86:	4b03      	ldr	r3, [pc, #12]	; (8006f94 <shci_send+0x60>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	b10b      	cbz	r3, 8006f90 <shci_send+0x5c>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8006f8c:	2001      	movs	r0, #1
 8006f8e:	4798      	blx	r3
}
 8006f90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f94:	2000030c 	.word	0x2000030c
 8006f98:	20000168 	.word	0x20000168
 8006f9c:	20000310 	.word	0x20000310

08006fa0 <TlCmdEvtReceived>:
{
 8006fa0:	b508      	push	{r3, lr}
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8006fa2:	2000      	movs	r0, #0
 8006fa4:	f7f9 ff6d 	bl	8000e82 <shci_cmd_resp_release>
}
 8006fa8:	bd08      	pop	{r3, pc}
	...

08006fac <shci_register_io_bus>:


void shci_register_io_bus(tSHciIO* fops)
{
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8006fac:	4b02      	ldr	r3, [pc, #8]	; (8006fb8 <shci_register_io_bus+0xc>)
 8006fae:	6003      	str	r3, [r0, #0]
  fops->Send    = TL_SYS_SendCmd;
 8006fb0:	4b02      	ldr	r3, [pc, #8]	; (8006fbc <shci_register_io_bus+0x10>)
 8006fb2:	6103      	str	r3, [r0, #16]

  return;
}
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	080070e5 	.word	0x080070e5
 8006fbc:	08007121 	.word	0x08007121

08006fc0 <SendFreeBuf>:

  return;
}

static void SendFreeBuf( void )
{
 8006fc0:	b530      	push	{r4, r5, lr}
 8006fc2:	b083      	sub	sp, #12
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8006fc4:	4c08      	ldr	r4, [pc, #32]	; (8006fe8 <SendFreeBuf+0x28>)
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8006fc6:	4d09      	ldr	r5, [pc, #36]	; (8006fec <SendFreeBuf+0x2c>)
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8006fc8:	4620      	mov	r0, r4
 8006fca:	f000 f9b6 	bl	800733a <LST_is_empty>
 8006fce:	b948      	cbnz	r0, 8006fe4 <SendFreeBuf+0x24>
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8006fd0:	a901      	add	r1, sp, #4
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	f000 f9e0 	bl	8007398 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8006fd8:	692b      	ldr	r3, [r5, #16]
 8006fda:	9901      	ldr	r1, [sp, #4]
 8006fdc:	6918      	ldr	r0, [r3, #16]
 8006fde:	f000 f9c3 	bl	8007368 <LST_insert_tail>
 8006fe2:	e7f1      	b.n	8006fc8 <SendFreeBuf+0x8>
  }

  return;
}
 8006fe4:	b003      	add	sp, #12
 8006fe6:	bd30      	pop	{r4, r5, pc}
 8006fe8:	20000338 	.word	0x20000338
 8006fec:	20030000 	.word	0x20030000

08006ff0 <TL_Enable>:
{
 8006ff0:	b508      	push	{r3, lr}
  HW_IPCC_Enable();
 8006ff2:	f000 ff2b 	bl	8007e4c <HW_IPCC_Enable>
}
 8006ff6:	bd08      	pop	{r3, pc}

08006ff8 <TL_Init>:
{
 8006ff8:	b508      	push	{r3, lr}
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8006ffa:	4a10      	ldr	r2, [pc, #64]	; (800703c <TL_Init+0x44>)
 8006ffc:	4b10      	ldr	r3, [pc, #64]	; (8007040 <TL_Init+0x48>)
 8006ffe:	6013      	str	r3, [r2, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8007000:	f103 0120 	add.w	r1, r3, #32
 8007004:	6051      	str	r1, [r2, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8007006:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800700a:	6091      	str	r1, [r2, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800700c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8007010:	6211      	str	r1, [r2, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8007012:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8007016:	6251      	str	r1, [r2, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8007018:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 800701c:	60d1      	str	r1, [r2, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800701e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8007022:	6111      	str	r1, [r2, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8007024:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8007028:	6151      	str	r1, [r2, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800702a:	f103 0174 	add.w	r1, r3, #116	; 0x74
 800702e:	6191      	str	r1, [r2, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8007030:	3380      	adds	r3, #128	; 0x80
 8007032:	61d3      	str	r3, [r2, #28]
  HW_IPCC_Init();
 8007034:	f000 ff32 	bl	8007e9c <HW_IPCC_Init>
}
 8007038:	bd08      	pop	{r3, pc}
 800703a:	bf00      	nop
 800703c:	20030000 	.word	0x20030000
 8007040:	20030028 	.word	0x20030028

08007044 <TL_BLE_Init>:
{
 8007044:	b538      	push	{r3, r4, r5, lr}
 8007046:	4604      	mov	r4, r0
  LST_init_head (&EvtQueue);
 8007048:	4d0b      	ldr	r5, [pc, #44]	; (8007078 <TL_BLE_Init+0x34>)
 800704a:	4628      	mov	r0, r5
 800704c:	f000 f972 	bl	8007334 <LST_init_head>
  p_bletable = TL_RefTable.p_ble_table;
 8007050:	4b0a      	ldr	r3, [pc, #40]	; (800707c <TL_BLE_Init+0x38>)
 8007052:	685b      	ldr	r3, [r3, #4]
  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007054:	68a2      	ldr	r2, [r4, #8]
 8007056:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8007058:	68e2      	ldr	r2, [r4, #12]
 800705a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800705c:	4a08      	ldr	r2, [pc, #32]	; (8007080 <TL_BLE_Init+0x3c>)
 800705e:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8007060:	609d      	str	r5, [r3, #8]
  HW_IPCC_BLE_Init();
 8007062:	f000 ff3d 	bl	8007ee0 <HW_IPCC_BLE_Init>
  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8007066:	6822      	ldr	r2, [r4, #0]
 8007068:	4b06      	ldr	r3, [pc, #24]	; (8007084 <TL_BLE_Init+0x40>)
 800706a:	601a      	str	r2, [r3, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800706c:	6862      	ldr	r2, [r4, #4]
 800706e:	4b06      	ldr	r3, [pc, #24]	; (8007088 <TL_BLE_Init+0x44>)
 8007070:	601a      	str	r2, [r3, #0]
}
 8007072:	2000      	movs	r0, #0
 8007074:	bd38      	pop	{r3, r4, r5, pc}
 8007076:	bf00      	nop
 8007078:	200300b4 	.word	0x200300b4
 800707c:	20030000 	.word	0x20030000
 8007080:	20030a48 	.word	0x20030a48
 8007084:	20000334 	.word	0x20000334
 8007088:	20000330 	.word	0x20000330

0800708c <TL_BLE_SendCmd>:
{
 800708c:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800708e:	4b05      	ldr	r3, [pc, #20]	; (80070a4 <TL_BLE_SendCmd+0x18>)
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	6812      	ldr	r2, [r2, #0]
 8007094:	2101      	movs	r1, #1
 8007096:	7211      	strb	r1, [r2, #8]
  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8007098:	685b      	ldr	r3, [r3, #4]
  HW_IPCC_BLE_SendCmd();
 800709a:	f000 ff29 	bl	8007ef0 <HW_IPCC_BLE_SendCmd>
}
 800709e:	2000      	movs	r0, #0
 80070a0:	bd08      	pop	{r3, pc}
 80070a2:	bf00      	nop
 80070a4:	20030000 	.word	0x20030000

080070a8 <HW_IPCC_BLE_RxEvtNot>:
{
 80070a8:	b530      	push	{r4, r5, lr}
 80070aa:	b083      	sub	sp, #12
  while(LST_is_empty(&EvtQueue) == FALSE)
 80070ac:	4c07      	ldr	r4, [pc, #28]	; (80070cc <HW_IPCC_BLE_RxEvtNot+0x24>)
    BLE_IoBusEvtCallBackFunction(phcievt);
 80070ae:	4d08      	ldr	r5, [pc, #32]	; (80070d0 <HW_IPCC_BLE_RxEvtNot+0x28>)
  while(LST_is_empty(&EvtQueue) == FALSE)
 80070b0:	4620      	mov	r0, r4
 80070b2:	f000 f942 	bl	800733a <LST_is_empty>
 80070b6:	b938      	cbnz	r0, 80070c8 <HW_IPCC_BLE_RxEvtNot+0x20>
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80070b8:	a901      	add	r1, sp, #4
 80070ba:	4620      	mov	r0, r4
 80070bc:	f000 f96c 	bl	8007398 <LST_remove_head>
    BLE_IoBusEvtCallBackFunction(phcievt);
 80070c0:	682b      	ldr	r3, [r5, #0]
 80070c2:	9801      	ldr	r0, [sp, #4]
 80070c4:	4798      	blx	r3
 80070c6:	e7f3      	b.n	80070b0 <HW_IPCC_BLE_RxEvtNot+0x8>
}
 80070c8:	b003      	add	sp, #12
 80070ca:	bd30      	pop	{r4, r5, pc}
 80070cc:	200300b4 	.word	0x200300b4
 80070d0:	20000334 	.word	0x20000334

080070d4 <HW_IPCC_BLE_AclDataAckNot>:
{
 80070d4:	b508      	push	{r3, lr}
  BLE_IoBusAclDataTxAck( );
 80070d6:	4b02      	ldr	r3, [pc, #8]	; (80070e0 <HW_IPCC_BLE_AclDataAckNot+0xc>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4798      	blx	r3
}
 80070dc:	bd08      	pop	{r3, pc}
 80070de:	bf00      	nop
 80070e0:	20000330 	.word	0x20000330

080070e4 <TL_SYS_Init>:
{
 80070e4:	b538      	push	{r3, r4, r5, lr}
 80070e6:	4604      	mov	r4, r0
  LST_init_head (&SystemEvtQueue);
 80070e8:	4d09      	ldr	r5, [pc, #36]	; (8007110 <TL_SYS_Init+0x2c>)
 80070ea:	4628      	mov	r0, r5
 80070ec:	f000 f922 	bl	8007334 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80070f0:	4b08      	ldr	r3, [pc, #32]	; (8007114 <TL_SYS_Init+0x30>)
 80070f2:	68db      	ldr	r3, [r3, #12]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80070f4:	68a2      	ldr	r2, [r4, #8]
 80070f6:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80070f8:	605d      	str	r5, [r3, #4]
  HW_IPCC_SYS_Init();
 80070fa:	f000 ff01 	bl	8007f00 <HW_IPCC_SYS_Init>
  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80070fe:	6822      	ldr	r2, [r4, #0]
 8007100:	4b05      	ldr	r3, [pc, #20]	; (8007118 <TL_SYS_Init+0x34>)
 8007102:	601a      	str	r2, [r3, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8007104:	6862      	ldr	r2, [r4, #4]
 8007106:	4b05      	ldr	r3, [pc, #20]	; (800711c <TL_SYS_Init+0x38>)
 8007108:	601a      	str	r2, [r3, #0]
}
 800710a:	2000      	movs	r0, #0
 800710c:	bd38      	pop	{r3, r4, r5, pc}
 800710e:	bf00      	nop
 8007110:	200300bc 	.word	0x200300bc
 8007114:	20030000 	.word	0x20030000
 8007118:	20000340 	.word	0x20000340
 800711c:	20000344 	.word	0x20000344

08007120 <TL_SYS_SendCmd>:
{
 8007120:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8007122:	4b05      	ldr	r3, [pc, #20]	; (8007138 <TL_SYS_SendCmd+0x18>)
 8007124:	68da      	ldr	r2, [r3, #12]
 8007126:	6812      	ldr	r2, [r2, #0]
 8007128:	2110      	movs	r1, #16
 800712a:	7211      	strb	r1, [r2, #8]
  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800712c:	68db      	ldr	r3, [r3, #12]
  HW_IPCC_SYS_SendCmd();
 800712e:	f000 feef 	bl	8007f10 <HW_IPCC_SYS_SendCmd>
}
 8007132:	2000      	movs	r0, #0
 8007134:	bd08      	pop	{r3, pc}
 8007136:	bf00      	nop
 8007138:	20030000 	.word	0x20030000

0800713c <HW_IPCC_SYS_CmdEvtNot>:
{
 800713c:	b508      	push	{r3, lr}
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800713e:	4b04      	ldr	r3, [pc, #16]	; (8007150 <HW_IPCC_SYS_CmdEvtNot+0x14>)
 8007140:	68da      	ldr	r2, [r3, #12]
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8007142:	68da      	ldr	r2, [r3, #12]
 8007144:	4b03      	ldr	r3, [pc, #12]	; (8007154 <HW_IPCC_SYS_CmdEvtNot+0x18>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6810      	ldr	r0, [r2, #0]
 800714a:	4798      	blx	r3
}
 800714c:	bd08      	pop	{r3, pc}
 800714e:	bf00      	nop
 8007150:	20030000 	.word	0x20030000
 8007154:	20000340 	.word	0x20000340

08007158 <HW_IPCC_SYS_EvtNot>:
{
 8007158:	b530      	push	{r4, r5, lr}
 800715a:	b083      	sub	sp, #12
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800715c:	4c07      	ldr	r4, [pc, #28]	; (800717c <HW_IPCC_SYS_EvtNot+0x24>)
    SYS_EVT_IoBusCallBackFunction( p_evt );
 800715e:	4d08      	ldr	r5, [pc, #32]	; (8007180 <HW_IPCC_SYS_EvtNot+0x28>)
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007160:	4620      	mov	r0, r4
 8007162:	f000 f8ea 	bl	800733a <LST_is_empty>
 8007166:	b938      	cbnz	r0, 8007178 <HW_IPCC_SYS_EvtNot+0x20>
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8007168:	a901      	add	r1, sp, #4
 800716a:	4620      	mov	r0, r4
 800716c:	f000 f914 	bl	8007398 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 8007170:	682b      	ldr	r3, [r5, #0]
 8007172:	9801      	ldr	r0, [sp, #4]
 8007174:	4798      	blx	r3
 8007176:	e7f3      	b.n	8007160 <HW_IPCC_SYS_EvtNot+0x8>
}
 8007178:	b003      	add	sp, #12
 800717a:	bd30      	pop	{r4, r5, pc}
 800717c:	200300bc 	.word	0x200300bc
 8007180:	20000344 	.word	0x20000344

08007184 <TL_MM_Init>:
{
 8007184:	b538      	push	{r3, r4, r5, lr}
 8007186:	4604      	mov	r4, r0
  LST_init_head (&FreeBufQueue);
 8007188:	4d0b      	ldr	r5, [pc, #44]	; (80071b8 <TL_MM_Init+0x34>)
 800718a:	4628      	mov	r0, r5
 800718c:	f000 f8d2 	bl	8007334 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8007190:	480a      	ldr	r0, [pc, #40]	; (80071bc <TL_MM_Init+0x38>)
 8007192:	f000 f8cf 	bl	8007334 <LST_init_head>
  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8007196:	4b0a      	ldr	r3, [pc, #40]	; (80071c0 <TL_MM_Init+0x3c>)
 8007198:	691b      	ldr	r3, [r3, #16]
  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800719a:	68a2      	ldr	r2, [r4, #8]
 800719c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800719e:	68e2      	ldr	r2, [r4, #12]
 80071a0:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80071a2:	611d      	str	r5, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80071a4:	6822      	ldr	r2, [r4, #0]
 80071a6:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80071a8:	6862      	ldr	r2, [r4, #4]
 80071aa:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80071ac:	6922      	ldr	r2, [r4, #16]
 80071ae:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80071b0:	6962      	ldr	r2, [r4, #20]
 80071b2:	619a      	str	r2, [r3, #24]
}
 80071b4:	bd38      	pop	{r3, r4, r5, pc}
 80071b6:	bf00      	nop
 80071b8:	200300c4 	.word	0x200300c4
 80071bc:	20000338 	.word	0x20000338
 80071c0:	20030000 	.word	0x20030000

080071c4 <TL_MM_EvtDone>:
{
 80071c4:	b508      	push	{r3, lr}
 80071c6:	4601      	mov	r1, r0
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80071c8:	4803      	ldr	r0, [pc, #12]	; (80071d8 <TL_MM_EvtDone+0x14>)
 80071ca:	f000 f8cd 	bl	8007368 <LST_insert_tail>
  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80071ce:	4803      	ldr	r0, [pc, #12]	; (80071dc <TL_MM_EvtDone+0x18>)
 80071d0:	f000 feea 	bl	8007fa8 <HW_IPCC_MM_SendFreeBuf>
}
 80071d4:	bd08      	pop	{r3, pc}
 80071d6:	bf00      	nop
 80071d8:	20000338 	.word	0x20000338
 80071dc:	08006fc1 	.word	0x08006fc1

080071e0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80071e0:	b510      	push	{r4, lr}
  LST_init_head (&TracesEvtQueue);
 80071e2:	4c05      	ldr	r4, [pc, #20]	; (80071f8 <TL_TRACES_Init+0x18>)
 80071e4:	4620      	mov	r0, r4
 80071e6:	f000 f8a5 	bl	8007334 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80071ea:	4b04      	ldr	r3, [pc, #16]	; (80071fc <TL_TRACES_Init+0x1c>)
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	601c      	str	r4, [r3, #0]

  HW_IPCC_TRACES_Init();
 80071f0:	f000 fef2 	bl	8007fd8 <HW_IPCC_TRACES_Init>

  return;
}
 80071f4:	bd10      	pop	{r4, pc}
 80071f6:	bf00      	nop
 80071f8:	200300cc 	.word	0x200300cc
 80071fc:	20030000 	.word	0x20030000

08007200 <TL_TRACES_EvtReceived>:
}

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
  (void)(hcievt);
}
 8007200:	4770      	bx	lr
	...

08007204 <HW_IPCC_TRACES_EvtNot>:
{
 8007204:	b510      	push	{r4, lr}
 8007206:	b082      	sub	sp, #8
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007208:	4c07      	ldr	r4, [pc, #28]	; (8007228 <HW_IPCC_TRACES_EvtNot+0x24>)
 800720a:	4620      	mov	r0, r4
 800720c:	f000 f895 	bl	800733a <LST_is_empty>
 8007210:	b938      	cbnz	r0, 8007222 <HW_IPCC_TRACES_EvtNot+0x1e>
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8007212:	a901      	add	r1, sp, #4
 8007214:	4620      	mov	r0, r4
 8007216:	f000 f8bf 	bl	8007398 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800721a:	9801      	ldr	r0, [sp, #4]
 800721c:	f7ff fff0 	bl	8007200 <TL_TRACES_EvtReceived>
 8007220:	e7f3      	b.n	800720a <HW_IPCC_TRACES_EvtNot+0x6>
}
 8007222:	b002      	add	sp, #8
 8007224:	bd10      	pop	{r4, pc}
 8007226:	bf00      	nop
 8007228:	200300cc 	.word	0x200300cc

0800722c <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800722c:	b530      	push	{r4, r5, lr}
 800722e:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007230:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007234:	b672      	cpsid	i

  BACKUP_PRIMASK();

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8007236:	4c0d      	ldr	r4, [pc, #52]	; (800726c <DbgTrace_TxCpltCallback+0x40>)
 8007238:	f10d 0106 	add.w	r1, sp, #6
 800723c:	4620      	mov	r0, r4
 800723e:	f000 f9f1 	bl	8007624 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8007242:	f10d 0106 	add.w	r1, sp, #6
 8007246:	4620      	mov	r0, r4
 8007248:	f000 fa5c 	bl	8007704 <CircularQueue_Sense>


  if ( buf != NULL) 
 800724c:	b140      	cbz	r0, 8007260 <DbgTrace_TxCpltCallback+0x34>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800724e:	f385 8810 	msr	PRIMASK, r5
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8007252:	4a07      	ldr	r2, [pc, #28]	; (8007270 <DbgTrace_TxCpltCallback+0x44>)
 8007254:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8007258:	f7f9 fbb2 	bl	80009c0 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800725c:	b003      	add	sp, #12
 800725e:	bd30      	pop	{r4, r5, pc}
    DbgTracePeripheralReady = SET;
 8007260:	4b04      	ldr	r3, [pc, #16]	; (8007274 <DbgTrace_TxCpltCallback+0x48>)
 8007262:	2201      	movs	r2, #1
 8007264:	701a      	strb	r2, [r3, #0]
 8007266:	f385 8810 	msr	PRIMASK, r5
}
 800726a:	e7f7      	b.n	800725c <DbgTrace_TxCpltCallback+0x30>
 800726c:	20000348 	.word	0x20000348
 8007270:	0800722d 	.word	0x0800722d
 8007274:	20000010 	.word	0x20000010

08007278 <DbgTraceGetFileName>:
{
 8007278:	b510      	push	{r4, lr}
 800727a:	4604      	mov	r4, r0
  if (strrchr(fullpath, '\\') != NULL)
 800727c:	215c      	movs	r1, #92	; 0x5c
 800727e:	f001 f90f 	bl	80084a0 <strrchr>
 8007282:	b108      	cbz	r0, 8007288 <DbgTraceGetFileName+0x10>
    ret = strrchr(fullpath, '\\') + 1;
 8007284:	3001      	adds	r0, #1
}
 8007286:	bd10      	pop	{r4, pc}
  else if (strrchr(fullpath, '/') != NULL)
 8007288:	212f      	movs	r1, #47	; 0x2f
 800728a:	4620      	mov	r0, r4
 800728c:	f001 f908 	bl	80084a0 <strrchr>
 8007290:	b108      	cbz	r0, 8007296 <DbgTraceGetFileName+0x1e>
    ret = strrchr(fullpath, '/') + 1;
 8007292:	3001      	adds	r0, #1
 8007294:	e7f7      	b.n	8007286 <DbgTraceGetFileName+0xe>
  const char *ret = fullpath;
 8007296:	4620      	mov	r0, r4
  return ret;
 8007298:	e7f5      	b.n	8007286 <DbgTraceGetFileName+0xe>
	...

0800729c <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800729c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800729e:	f3ef 8510 	mrs	r5, PRIMASK
  uint8_t* buffer;

  BACKUP_PRIMASK();

  /* Ignore flushes */
  if ( handle == -1 )
 80072a2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80072a6:	d020      	beq.n	80072ea <DbgTraceWrite+0x4e>
 80072a8:	4614      	mov	r4, r2
  {
    chars_written = ( size_t ) 0;
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 80072aa:	3801      	subs	r0, #1
 80072ac:	2801      	cmp	r0, #1
 80072ae:	d81e      	bhi.n	80072ee <DbgTraceWrite+0x52>
  {
    chars_written = ( size_t ) - 1;
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 80072b0:	b90a      	cbnz	r2, 80072b6 <DbgTraceWrite+0x1a>
  size_t chars_written = 0;
 80072b2:	4610      	mov	r0, r2
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 80072b4:	e01a      	b.n	80072ec <DbgTraceWrite+0x50>
  __ASM volatile ("cpsid i" : : : "memory");
 80072b6:	b672      	cpsid	i
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 80072b8:	b296      	uxth	r6, r2
 80072ba:	2301      	movs	r3, #1
 80072bc:	4632      	mov	r2, r6
 80072be:	480d      	ldr	r0, [pc, #52]	; (80072f4 <DbgTraceWrite+0x58>)
 80072c0:	f000 f876 	bl	80073b0 <CircularQueue_Add>
    if (buffer && DbgTracePeripheralReady)
 80072c4:	b110      	cbz	r0, 80072cc <DbgTraceWrite+0x30>
 80072c6:	4b0c      	ldr	r3, [pc, #48]	; (80072f8 <DbgTraceWrite+0x5c>)
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	b91b      	cbnz	r3, 80072d4 <DbgTraceWrite+0x38>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072cc:	f385 8810 	msr	PRIMASK, r5
    chars_written = bufSize;
 80072d0:	4620      	mov	r0, r4
}
 80072d2:	e00b      	b.n	80072ec <DbgTraceWrite+0x50>
      DbgTracePeripheralReady = RESET;
 80072d4:	4b08      	ldr	r3, [pc, #32]	; (80072f8 <DbgTraceWrite+0x5c>)
 80072d6:	2200      	movs	r2, #0
 80072d8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072da:	f385 8810 	msr	PRIMASK, r5
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 80072de:	4a07      	ldr	r2, [pc, #28]	; (80072fc <DbgTraceWrite+0x60>)
 80072e0:	4631      	mov	r1, r6
 80072e2:	f7f9 fb6d 	bl	80009c0 <DbgOutputTraces>
    chars_written = bufSize;
 80072e6:	4620      	mov	r0, r4
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 80072e8:	e000      	b.n	80072ec <DbgTraceWrite+0x50>
    chars_written = ( size_t ) 0;
 80072ea:	2000      	movs	r0, #0
}
 80072ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    chars_written = ( size_t ) - 1;
 80072ee:	f04f 30ff 	mov.w	r0, #4294967295
 80072f2:	e7fb      	b.n	80072ec <DbgTraceWrite+0x50>
 80072f4:	20000348 	.word	0x20000348
 80072f8:	20000010 	.word	0x20000010
 80072fc:	0800722d 	.word	0x0800722d

08007300 <_write>:
{
 8007300:	b508      	push	{r3, lr}
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8007302:	f7ff ffcb 	bl	800729c <DbgTraceWrite>
}
 8007306:	bd08      	pop	{r3, pc}

08007308 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8007308:	4602      	mov	r2, r0
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800730a:	4b08      	ldr	r3, [pc, #32]	; (800732c <OTP_Read+0x24>)
 800730c:	79db      	ldrb	r3, [r3, #7]
 800730e:	4283      	cmp	r3, r0
 8007310:	d009      	beq.n	8007326 <OTP_Read+0x1e>
  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8007312:	4806      	ldr	r0, [pc, #24]	; (800732c <OTP_Read+0x24>)
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007314:	4906      	ldr	r1, [pc, #24]	; (8007330 <OTP_Read+0x28>)
  {
    p_id -= 8 ;
 8007316:	3808      	subs	r0, #8
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007318:	79c3      	ldrb	r3, [r0, #7]
 800731a:	4293      	cmp	r3, r2
 800731c:	d004      	beq.n	8007328 <OTP_Read+0x20>
 800731e:	4288      	cmp	r0, r1
 8007320:	d1f9      	bne.n	8007316 <OTP_Read+0xe>
  }

  if((*( p_id + 7 )) != id)
  {
    p_id = 0 ;
 8007322:	2000      	movs	r0, #0
  }

  return p_id ;
 8007324:	4770      	bx	lr
  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8007326:	4801      	ldr	r0, [pc, #4]	; (800732c <OTP_Read+0x24>)
}
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	1fff73f8 	.word	0x1fff73f8
 8007330:	1fff7000 	.word	0x1fff7000

08007334 <LST_init_head>:
/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 8007334:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;
 8007336:	6040      	str	r0, [r0, #4]
}
 8007338:	4770      	bx	lr

0800733a <LST_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800733a:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800733e:	b672      	cpsid	i
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8007340:	6802      	ldr	r2, [r0, #0]
  {
    return_value = TRUE;
 8007342:	4290      	cmp	r0, r2
 8007344:	bf14      	ite	ne
 8007346:	2000      	movne	r0, #0
 8007348:	2001      	moveq	r0, #1
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800734a:	f383 8810 	msr	PRIMASK, r3
    return_value = FALSE;
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
}
 800734e:	4770      	bx	lr

08007350 <LST_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007350:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007354:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8007356:	6802      	ldr	r2, [r0, #0]
 8007358:	600a      	str	r2, [r1, #0]
  node->prev = listHead;
 800735a:	6048      	str	r0, [r1, #4]
  listHead->next = node;
 800735c:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 800735e:	680a      	ldr	r2, [r1, #0]
 8007360:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007362:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007366:	4770      	bx	lr

08007368 <LST_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007368:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800736c:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800736e:	6008      	str	r0, [r1, #0]
  node->prev = listHead->prev;
 8007370:	6842      	ldr	r2, [r0, #4]
 8007372:	604a      	str	r2, [r1, #4]
  listHead->prev = node;
 8007374:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 8007376:	684a      	ldr	r2, [r1, #4]
 8007378:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800737a:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800737e:	4770      	bx	lr

08007380 <LST_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007380:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007384:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8007386:	6842      	ldr	r2, [r0, #4]
 8007388:	6801      	ldr	r1, [r0, #0]
 800738a:	6011      	str	r1, [r2, #0]
  (node->next)->prev = node->prev;
 800738c:	6802      	ldr	r2, [r0, #0]
 800738e:	6841      	ldr	r1, [r0, #4]
 8007390:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007392:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007396:	4770      	bx	lr

08007398 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8007398:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800739a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800739e:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80073a0:	6803      	ldr	r3, [r0, #0]
 80073a2:	600b      	str	r3, [r1, #0]
  LST_remove_node (listHead->next);
 80073a4:	6800      	ldr	r0, [r0, #0]
 80073a6:	f7ff ffeb 	bl	8007380 <LST_remove_node>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073aa:	f384 8810 	msr	PRIMASK, r4

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80073ae:	bd10      	pop	{r4, pc}

080073b0 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 80073b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b4:	b089      	sub	sp, #36	; 0x24
 80073b6:	4604      	mov	r4, r0
 80073b8:	9103      	str	r1, [sp, #12]
 80073ba:	9202      	str	r2, [sp, #8]
 80073bc:	469b      	mov	fp, r3
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 80073be:	f8b0 9008 	ldrh.w	r9, [r0, #8]
 80073c2:	f1b9 0f00 	cmp.w	r9, #0
 80073c6:	f000 80f6 	beq.w	80075b6 <CircularQueue_Add+0x206>
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 80073ca:	6940      	ldr	r0, [r0, #20]
 80073cc:	b930      	cbnz	r0, 80073dc <CircularQueue_Add+0x2c>
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
  {
    elementSize = q->elementSize;
 80073ce:	f8cd 9008 	str.w	r9, [sp, #8]
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 80073d2:	f04f 0900 	mov.w	r9, #0
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 80073d6:	f8cd 9010 	str.w	r9, [sp, #16]
 80073da:	e0f0      	b.n	80075be <CircularQueue_Add+0x20e>
    elementSize = q->elementSize;
 80073dc:	f8cd 9008 	str.w	r9, [sp, #8]
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 80073e0:	2300      	movs	r3, #0
 80073e2:	9304      	str	r3, [sp, #16]
 80073e4:	e0eb      	b.n	80075be <CircularQueue_Add+0x20e>
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80073e6:	6820      	ldr	r0, [r4, #0]
 80073e8:	462a      	mov	r2, r5
 80073ea:	9903      	ldr	r1, [sp, #12]
 80073ec:	4441      	add	r1, r8
 80073ee:	4418      	add	r0, r3
 80073f0:	f000 ffb2 	bl	8008358 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 80073f4:	6963      	ldr	r3, [r4, #20]
 80073f6:	442b      	add	r3, r5
 80073f8:	6163      	str	r3, [r4, #20]
        /* Wrap */
        curBuffPosition = 0; 
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 80073fa:	eba6 0a05 	sub.w	sl, r6, r5
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 80073fe:	f8dd 9018 	ldr.w	r9, [sp, #24]
        NbCopiedBytes = NbBytesToCopy;
 8007402:	9501      	str	r5, [sp, #4]
        curBuffPosition = 0; 
 8007404:	2300      	movs	r3, #0
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
        q->last = 0;        
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 8007406:	f1ba 0f00 	cmp.w	sl, #0
 800740a:	f040 808e 	bne.w	800752a <CircularQueue_Add+0x17a>
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
        q->byteCount += NbBytesToCopy;
      }      
      
      /* One more element */
      q->elementCount++;
 800740e:	69a3      	ldr	r3, [r4, #24]
 8007410:	3301      	adds	r3, #1
 8007412:	61a3      	str	r3, [r4, #24]
    for (i=0; i < nbElements; i++) 
 8007414:	3701      	adds	r7, #1
 8007416:	44b0      	add	r8, r6
 8007418:	45bb      	cmp	fp, r7
 800741a:	f000 8094 	beq.w	8007546 <CircularQueue_Add+0x196>
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800741e:	6923      	ldr	r3, [r4, #16]
 8007420:	444b      	add	r3, r9
 8007422:	6862      	ldr	r2, [r4, #4]
 8007424:	4293      	cmp	r3, r2
 8007426:	bf28      	it	cs
 8007428:	1a9b      	subcs	r3, r3, r2
 800742a:	6123      	str	r3, [r4, #16]
      if (q->elementSize == 0) 
 800742c:	8922      	ldrh	r2, [r4, #8]
 800742e:	b992      	cbnz	r2, 8007456 <CircularQueue_Add+0xa6>
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8007430:	1c5a      	adds	r2, r3, #1
 8007432:	6821      	ldr	r1, [r4, #0]
 8007434:	9802      	ldr	r0, [sp, #8]
 8007436:	54c8      	strb	r0, [r1, r3]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8007438:	6863      	ldr	r3, [r4, #4]
 800743a:	4293      	cmp	r3, r2
 800743c:	bf98      	it	ls
 800743e:	1ad2      	subls	r2, r2, r3
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8007440:	1c53      	adds	r3, r2, #1
 8007442:	6821      	ldr	r1, [r4, #0]
 8007444:	9805      	ldr	r0, [sp, #20]
 8007446:	5488      	strb	r0, [r1, r2]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8007448:	6862      	ldr	r2, [r4, #4]
 800744a:	429a      	cmp	r2, r3
 800744c:	bf98      	it	ls
 800744e:	1a9b      	subls	r3, r3, r2
        q->byteCount += 2;
 8007450:	6962      	ldr	r2, [r4, #20]
 8007452:	3202      	adds	r2, #2
 8007454:	6162      	str	r2, [r4, #20]
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8007456:	6862      	ldr	r2, [r4, #4]
 8007458:	1ad2      	subs	r2, r2, r3
 800745a:	4635      	mov	r5, r6
 800745c:	4296      	cmp	r6, r2
 800745e:	bf28      	it	cs
 8007460:	4615      	movcs	r5, r2
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8007462:	4296      	cmp	r6, r2
 8007464:	d9bf      	bls.n	80073e6 <CircularQueue_Add+0x36>
 8007466:	42ae      	cmp	r6, r5
 8007468:	d902      	bls.n	8007470 <CircularQueue_Add+0xc0>
 800746a:	7f22      	ldrb	r2, [r4, #28]
 800746c:	2a00      	cmp	r2, #0
 800746e:	d0ba      	beq.n	80073e6 <CircularQueue_Add+0x36>
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8007470:	2d00      	cmp	r5, #0
 8007472:	d0cc      	beq.n	800740e <CircularQueue_Add+0x5e>
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8007474:	7f22      	ldrb	r2, [r4, #28]
 8007476:	f012 0f01 	tst.w	r2, #1
 800747a:	d025      	beq.n	80074c8 <CircularQueue_Add+0x118>
          if (q->elementSize == 0)
 800747c:	8922      	ldrh	r2, [r4, #8]
 800747e:	b942      	cbnz	r2, 8007492 <CircularQueue_Add+0xe2>
             q->qBuff[curBuffPosition-2] = 0xFF;
 8007480:	6822      	ldr	r2, [r4, #0]
 8007482:	441a      	add	r2, r3
 8007484:	21ff      	movs	r1, #255	; 0xff
 8007486:	f802 1c02 	strb.w	r1, [r2, #-2]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800748a:	6820      	ldr	r0, [r4, #0]
 800748c:	4418      	add	r0, r3
 800748e:	f800 1c01 	strb.w	r1, [r0, #-1]
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8007492:	6963      	ldr	r3, [r4, #20]
 8007494:	441d      	add	r5, r3
 8007496:	6165      	str	r5, [r4, #20]
          if (q->elementSize == 0)
 8007498:	8923      	ldrh	r3, [r4, #8]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d13f      	bne.n	800751e <CircularQueue_Add+0x16e>
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800749e:	6823      	ldr	r3, [r4, #0]
 80074a0:	9a02      	ldr	r2, [sp, #8]
 80074a2:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80074a4:	6823      	ldr	r3, [r4, #0]
 80074a6:	9a07      	ldr	r2, [sp, #28]
 80074a8:	705a      	strb	r2, [r3, #1]
            q->byteCount += 2;   
 80074aa:	6963      	ldr	r3, [r4, #20]
 80074ac:	3302      	adds	r3, #2
 80074ae:	6163      	str	r3, [r4, #20]
          NbBytesToCopy = elementSize; 
 80074b0:	46b2      	mov	sl, r6
          NbCopiedBytes = 0;
 80074b2:	2300      	movs	r3, #0
 80074b4:	9301      	str	r3, [sp, #4]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80074b6:	2302      	movs	r3, #2
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 80074b8:	9a04      	ldr	r2, [sp, #16]
 80074ba:	eb02 090a 	add.w	r9, r2, sl
 80074be:	fa1f f989 	uxth.w	r9, r9
        q->last = 0;        
 80074c2:	2200      	movs	r2, #0
 80074c4:	6122      	str	r2, [r4, #16]
 80074c6:	e79e      	b.n	8007406 <CircularQueue_Add+0x56>
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 80074c8:	f012 0f02 	tst.w	r2, #2
 80074cc:	d02b      	beq.n	8007526 <CircularQueue_Add+0x176>
          if (q->elementSize == 0)
 80074ce:	8922      	ldrh	r2, [r4, #8]
 80074d0:	2a00      	cmp	r2, #0
 80074d2:	d149      	bne.n	8007568 <CircularQueue_Add+0x1b8>
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 80074d4:	6822      	ldr	r2, [r4, #0]
 80074d6:	441a      	add	r2, r3
 80074d8:	f802 5c02 	strb.w	r5, [r2, #-2]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80074dc:	6822      	ldr	r2, [r4, #0]
 80074de:	441a      	add	r2, r3
 80074e0:	0a29      	lsrs	r1, r5, #8
 80074e2:	f802 1c01 	strb.w	r1, [r2, #-1]
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80074e6:	6820      	ldr	r0, [r4, #0]
 80074e8:	462a      	mov	r2, r5
 80074ea:	9903      	ldr	r1, [sp, #12]
 80074ec:	4441      	add	r1, r8
 80074ee:	4418      	add	r0, r3
 80074f0:	f000 ff32 	bl	8008358 <memcpy>
             q->byteCount += NbBytesToCopy; 
 80074f4:	6963      	ldr	r3, [r4, #20]
 80074f6:	442b      	add	r3, r5
 80074f8:	6163      	str	r3, [r4, #20]
             NbBytesToCopy = elementSize - NbBytesToCopy;
 80074fa:	eba6 0a05 	sub.w	sl, r6, r5
             q->elementCount++;
 80074fe:	69a3      	ldr	r3, [r4, #24]
 8007500:	3301      	adds	r3, #1
 8007502:	61a3      	str	r3, [r4, #24]
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8007504:	6823      	ldr	r3, [r4, #0]
 8007506:	f883 a000 	strb.w	sl, [r3]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800750a:	6823      	ldr	r3, [r4, #0]
 800750c:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8007510:	705a      	strb	r2, [r3, #1]
             q->byteCount += 2;              
 8007512:	6963      	ldr	r3, [r4, #20]
 8007514:	3302      	adds	r3, #2
 8007516:	6163      	str	r3, [r4, #20]
             NbCopiedBytes = NbBytesToCopy;             
 8007518:	9501      	str	r5, [sp, #4]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800751a:	2302      	movs	r3, #2
 800751c:	e7cc      	b.n	80074b8 <CircularQueue_Add+0x108>
          NbBytesToCopy = elementSize; 
 800751e:	46b2      	mov	sl, r6
          NbCopiedBytes = 0;
 8007520:	2300      	movs	r3, #0
 8007522:	9301      	str	r3, [sp, #4]
 8007524:	e7c8      	b.n	80074b8 <CircularQueue_Add+0x108>
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8007526:	46aa      	mov	sl, r5
 8007528:	e7c6      	b.n	80074b8 <CircularQueue_Add+0x108>
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800752a:	6820      	ldr	r0, [r4, #0]
 800752c:	9a01      	ldr	r2, [sp, #4]
 800752e:	eb02 0108 	add.w	r1, r2, r8
 8007532:	4652      	mov	r2, sl
 8007534:	9d03      	ldr	r5, [sp, #12]
 8007536:	4429      	add	r1, r5
 8007538:	4418      	add	r0, r3
 800753a:	f000 ff0d 	bl	8008358 <memcpy>
        q->byteCount += NbBytesToCopy;
 800753e:	6963      	ldr	r3, [r4, #20]
 8007540:	4453      	add	r3, sl
 8007542:	6163      	str	r3, [r4, #20]
 8007544:	e763      	b.n	800740e <CircularQueue_Add+0x5e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8007546:	6823      	ldr	r3, [r4, #0]
 8007548:	6920      	ldr	r0, [r4, #16]
 800754a:	9a04      	ldr	r2, [sp, #16]
 800754c:	4402      	add	r2, r0
 800754e:	4610      	mov	r0, r2
 8007550:	6862      	ldr	r2, [r4, #4]
 8007552:	4290      	cmp	r0, r2
 8007554:	bf28      	it	cs
 8007556:	1a80      	subcs	r0, r0, r2
 8007558:	4418      	add	r0, r3
  else
  {
    return NULL;
  }
  return ptr;
}
 800755a:	b009      	add	sp, #36	; 0x24
 800755c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return NULL;
 8007560:	2000      	movs	r0, #0
 8007562:	e7fa      	b.n	800755a <CircularQueue_Add+0x1aa>
 8007564:	2000      	movs	r0, #0
 8007566:	e7f8      	b.n	800755a <CircularQueue_Add+0x1aa>
            return NULL;
 8007568:	2000      	movs	r0, #0
 800756a:	e7f6      	b.n	800755a <CircularQueue_Add+0x1aa>
 800756c:	b292      	uxth	r2, r2
 800756e:	e005      	b.n	800757c <CircularQueue_Add+0x1cc>
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8007570:	9b02      	ldr	r3, [sp, #8]
 8007572:	9a04      	ldr	r2, [sp, #16]
 8007574:	4413      	add	r3, r2
 8007576:	fb0b f303 	mul.w	r3, fp, r3
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800757a:	2200      	movs	r2, #0
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800757c:	9902      	ldr	r1, [sp, #8]
 800757e:	2900      	cmp	r1, #0
 8007580:	d0ee      	beq.n	8007560 <CircularQueue_Add+0x1b0>
 8007582:	4403      	add	r3, r0
 8007584:	441a      	add	r2, r3
 8007586:	6863      	ldr	r3, [r4, #4]
 8007588:	429a      	cmp	r2, r3
 800758a:	d8eb      	bhi.n	8007564 <CircularQueue_Add+0x1b4>
    for (i=0; i < nbElements; i++) 
 800758c:	f1bb 0f00 	cmp.w	fp, #0
 8007590:	d0d9      	beq.n	8007546 <CircularQueue_Add+0x196>
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8007592:	460b      	mov	r3, r1
 8007594:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8007598:	9205      	str	r2, [sp, #20]
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800759a:	460e      	mov	r6, r1
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800759c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80075a0:	9207      	str	r2, [sp, #28]
 80075a2:	f04f 0800 	mov.w	r8, #0
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 80075a6:	f8cd 8004 	str.w	r8, [sp, #4]
    for (i=0; i < nbElements; i++) 
 80075aa:	4647      	mov	r7, r8
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 80075ac:	9a04      	ldr	r2, [sp, #16]
 80075ae:	4413      	add	r3, r2
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	9306      	str	r3, [sp, #24]
 80075b4:	e733      	b.n	800741e <CircularQueue_Add+0x6e>
  if (q->byteCount)
 80075b6:	6940      	ldr	r0, [r0, #20]
 80075b8:	bb10      	cbnz	r0, 8007600 <CircularQueue_Add+0x250>
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 80075ba:	2302      	movs	r3, #2
 80075bc:	9304      	str	r3, [sp, #16]
   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 80075be:	6923      	ldr	r3, [r4, #16]
 80075c0:	68e2      	ldr	r2, [r4, #12]
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d3d4      	bcc.n	8007570 <CircularQueue_Add+0x1c0>
 80075c6:	6862      	ldr	r2, [r4, #4]
 80075c8:	1ad2      	subs	r2, r2, r3
 80075ca:	eba2 0209 	sub.w	r2, r2, r9
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 80075ce:	9b02      	ldr	r3, [sp, #8]
 80075d0:	9904      	ldr	r1, [sp, #16]
 80075d2:	185d      	adds	r5, r3, r1
 80075d4:	fb0b f305 	mul.w	r3, fp, r5
 80075d8:	4293      	cmp	r3, r2
 80075da:	d3ce      	bcc.n	800757a <CircularQueue_Add+0x1ca>
 80075dc:	fbb2 f1f5 	udiv	r1, r2, r5
 80075e0:	fb05 2211 	mls	r2, r5, r1, r2
 80075e4:	b2d1      	uxtb	r1, r2
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 80075e6:	9e04      	ldr	r6, [sp, #16]
 80075e8:	42b1      	cmp	r1, r6
 80075ea:	d9c6      	bls.n	800757a <CircularQueue_Add+0x1ca>
 80075ec:	7f25      	ldrb	r5, [r4, #28]
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 80075ee:	f015 0201 	ands.w	r2, r5, #1
 80075f2:	bf18      	it	ne
 80075f4:	460a      	movne	r2, r1
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 80075f6:	f015 0f02 	tst.w	r5, #2
 80075fa:	d0b7      	beq.n	800756c <CircularQueue_Add+0x1bc>
 80075fc:	b2b2      	uxth	r2, r6
 80075fe:	e7bd      	b.n	800757c <CircularQueue_Add+0x1cc>
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8007600:	6821      	ldr	r1, [r4, #0]
 8007602:	6923      	ldr	r3, [r4, #16]
 8007604:	5cca      	ldrb	r2, [r1, r3]
 8007606:	3301      	adds	r3, #1
 8007608:	6865      	ldr	r5, [r4, #4]
 800760a:	42ab      	cmp	r3, r5
 800760c:	d300      	bcc.n	8007610 <CircularQueue_Add+0x260>
 800760e:	1b5b      	subs	r3, r3, r5
 8007610:	5ccb      	ldrb	r3, [r1, r3]
 8007612:	f102 0902 	add.w	r9, r2, #2
 8007616:	eb09 2903 	add.w	r9, r9, r3, lsl #8
 800761a:	fa1f f989 	uxth.w	r9, r9
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800761e:	2302      	movs	r3, #2
 8007620:	9304      	str	r3, [sp, #16]
 8007622:	e7cc      	b.n	80075be <CircularQueue_Add+0x20e>

08007624 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 8007624:	b4f0      	push	{r4, r5, r6, r7}
 8007626:	4603      	mov	r3, r0
  uint8_t  elemSizeStorageRoom = 0;
  uint8_t* ptr= NULL;
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8007628:	8900      	ldrh	r0, [r0, #8]
 800762a:	2800      	cmp	r0, #0
 800762c:	d038      	beq.n	80076a0 <CircularQueue_Remove+0x7c>
  uint16_t eltSize = 0;
  if (q->byteCount > 0) 
 800762e:	695e      	ldr	r6, [r3, #20]
 8007630:	2e00      	cmp	r6, #0
 8007632:	d032      	beq.n	800769a <CircularQueue_Remove+0x76>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8007634:	4604      	mov	r4, r0
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8007636:	2500      	movs	r5, #0
 8007638:	e042      	b.n	80076c0 <CircularQueue_Remove+0x9c>

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800763a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800763e:	4294      	cmp	r4, r2
 8007640:	d011      	beq.n	8007666 <CircularQueue_Remove+0x42>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8007642:	68da      	ldr	r2, [r3, #12]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8007644:	691f      	ldr	r7, [r3, #16]
 8007646:	42ba      	cmp	r2, r7
 8007648:	d93f      	bls.n	80076ca <CircularQueue_Remove+0xa6>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800764a:	2800      	cmp	r0, #0
 800764c:	d03d      	beq.n	80076ca <CircularQueue_Remove+0xa6>
 800764e:	685f      	ldr	r7, [r3, #4]
 8007650:	1aba      	subs	r2, r7, r2
 8007652:	4282      	cmp	r2, r0
 8007654:	d239      	bcs.n	80076ca <CircularQueue_Remove+0xa6>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8007656:	68da      	ldr	r2, [r3, #12]
 8007658:	1bd2      	subs	r2, r2, r7
 800765a:	4416      	add	r6, r2
 800765c:	615e      	str	r6, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800765e:	2200      	movs	r2, #0
 8007660:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8007662:	4604      	mov	r4, r0
 8007664:	e031      	b.n	80076ca <CircularQueue_Remove+0xa6>
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8007666:	b138      	cbz	r0, 8007678 <CircularQueue_Remove+0x54>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8007668:	68da      	ldr	r2, [r3, #12]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800766a:	691f      	ldr	r7, [r3, #16]
 800766c:	42ba      	cmp	r2, r7
 800766e:	d8ee      	bhi.n	800764e <CircularQueue_Remove+0x2a>
 8007670:	e02b      	b.n	80076ca <CircularQueue_Remove+0xa6>
 8007672:	f1c0 0001 	rsb	r0, r0, #1
 8007676:	e00b      	b.n	8007690 <CircularQueue_Remove+0x6c>
          q->byteCount -= (q->queueMaxSize - q->first);
 8007678:	6858      	ldr	r0, [r3, #4]
 800767a:	68da      	ldr	r2, [r3, #12]
 800767c:	1a12      	subs	r2, r2, r0
 800767e:	4416      	add	r6, r2
 8007680:	615e      	str	r6, [r3, #20]
          q->first = 0;
 8007682:	2200      	movs	r2, #0
 8007684:	60da      	str	r2, [r3, #12]
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	7814      	ldrb	r4, [r2, #0]
 800768a:	2801      	cmp	r0, #1
 800768c:	d9f1      	bls.n	8007672 <CircularQueue_Remove+0x4e>
 800768e:	2001      	movs	r0, #1
 8007690:	5c12      	ldrb	r2, [r2, r0]
 8007692:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 8007696:	b2a4      	uxth	r4, r4
 8007698:	e017      	b.n	80076ca <CircularQueue_Remove+0xa6>
  uint16_t eltSize = 0;
 800769a:	2400      	movs	r4, #0
  uint8_t* ptr= NULL;
 800769c:	4620      	mov	r0, r4
 800769e:	e02a      	b.n	80076f6 <CircularQueue_Remove+0xd2>
  if (q->byteCount > 0) 
 80076a0:	695e      	ldr	r6, [r3, #20]
 80076a2:	2e00      	cmp	r6, #0
 80076a4:	d02b      	beq.n	80076fe <CircularQueue_Remove+0xda>
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80076a6:	681d      	ldr	r5, [r3, #0]
 80076a8:	68da      	ldr	r2, [r3, #12]
 80076aa:	5cac      	ldrb	r4, [r5, r2]
 80076ac:	3201      	adds	r2, #1
 80076ae:	685f      	ldr	r7, [r3, #4]
 80076b0:	42ba      	cmp	r2, r7
 80076b2:	bf28      	it	cs
 80076b4:	1bd2      	subcs	r2, r2, r7
 80076b6:	5caa      	ldrb	r2, [r5, r2]
 80076b8:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 80076bc:	b2a4      	uxth	r4, r4
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80076be:	2502      	movs	r5, #2
     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 80076c0:	7f1a      	ldrb	r2, [r3, #28]
 80076c2:	f002 0203 	and.w	r2, r2, #3
 80076c6:	2a01      	cmp	r2, #1
 80076c8:	d0b7      	beq.n	800763a <CircularQueue_Remove+0x16>
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 80076ca:	6818      	ldr	r0, [r3, #0]
 80076cc:	68da      	ldr	r2, [r3, #12]
 80076ce:	442a      	add	r2, r5
 80076d0:	685e      	ldr	r6, [r3, #4]
 80076d2:	42b2      	cmp	r2, r6
 80076d4:	bf2c      	ite	cs
 80076d6:	1b97      	subcs	r7, r2, r6
 80076d8:	4617      	movcc	r7, r2
 80076da:	4438      	add	r0, r7

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 80076dc:	1967      	adds	r7, r4, r5
 80076de:	695d      	ldr	r5, [r3, #20]
 80076e0:	1bed      	subs	r5, r5, r7
 80076e2:	615d      	str	r5, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 80076e4:	b125      	cbz	r5, 80076f0 <CircularQueue_Remove+0xcc>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 80076e6:	4422      	add	r2, r4
 80076e8:	4296      	cmp	r6, r2
 80076ea:	bf98      	it	ls
 80076ec:	1b92      	subls	r2, r2, r6
 80076ee:	60da      	str	r2, [r3, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 80076f0:	699a      	ldr	r2, [r3, #24]
 80076f2:	3a01      	subs	r2, #1
 80076f4:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 80076f6:	b101      	cbz	r1, 80076fa <CircularQueue_Remove+0xd6>
  {
    *elementSize = eltSize;
 80076f8:	800c      	strh	r4, [r1, #0]
  }
  return ptr;
}
 80076fa:	bcf0      	pop	{r4, r5, r6, r7}
 80076fc:	4770      	bx	lr
  uint16_t eltSize = 0;
 80076fe:	4604      	mov	r4, r0
  uint8_t* ptr= NULL;
 8007700:	2000      	movs	r0, #0
 8007702:	e7f8      	b.n	80076f6 <CircularQueue_Remove+0xd2>

08007704 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 8007704:	b4f0      	push	{r4, r5, r6, r7}
  uint8_t  elemSizeStorageRoom = 0;
  uint8_t* x= NULL;
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8007706:	8905      	ldrh	r5, [r0, #8]
 8007708:	b36d      	cbz	r5, 8007766 <CircularQueue_Sense+0x62>
  uint16_t eltSize = 0;
  uint32_t FirstElemetPos = 0;
    
  if (q->byteCount > 0) 
 800770a:	6943      	ldr	r3, [r0, #20]
 800770c:	b343      	cbz	r3, 8007760 <CircularQueue_Sense+0x5c>
  {
    FirstElemetPos = q->first;
 800770e:	68c6      	ldr	r6, [r0, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8007710:	462c      	mov	r4, r5
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8007712:	2200      	movs	r2, #0
 8007714:	e036      	b.n	8007784 <CircularQueue_Sense+0x80>
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8007716:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800771a:	429c      	cmp	r4, r3
 800771c:	d00d      	beq.n	800773a <CircularQueue_Sense+0x36>
 800771e:	6903      	ldr	r3, [r0, #16]
 8007720:	42b3      	cmp	r3, r6
 8007722:	d234      	bcs.n	800778e <CircularQueue_Sense+0x8a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8007724:	2d00      	cmp	r5, #0
 8007726:	d032      	beq.n	800778e <CircularQueue_Sense+0x8a>
 8007728:	6843      	ldr	r3, [r0, #4]
 800772a:	1b9b      	subs	r3, r3, r6
      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800772c:	42ab      	cmp	r3, r5
 800772e:	bf38      	it	cc
 8007730:	462c      	movcc	r4, r5
 8007732:	42ab      	cmp	r3, r5
 8007734:	bf38      	it	cc
 8007736:	2600      	movcc	r6, #0
 8007738:	e029      	b.n	800778e <CircularQueue_Sense+0x8a>
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800773a:	b11d      	cbz	r5, 8007744 <CircularQueue_Sense+0x40>
 800773c:	6903      	ldr	r3, [r0, #16]
 800773e:	42b3      	cmp	r3, r6
 8007740:	d3f2      	bcc.n	8007728 <CircularQueue_Sense+0x24>
 8007742:	e024      	b.n	800778e <CircularQueue_Sense+0x8a>
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8007744:	6805      	ldr	r5, [r0, #0]
 8007746:	782c      	ldrb	r4, [r5, #0]
 8007748:	6843      	ldr	r3, [r0, #4]
 800774a:	2b01      	cmp	r3, #1
 800774c:	bf94      	ite	ls
 800774e:	f1c3 0301 	rsbls	r3, r3, #1
 8007752:	2301      	movhi	r3, #1
 8007754:	5ceb      	ldrb	r3, [r5, r3]
 8007756:	eb04 2403 	add.w	r4, r4, r3, lsl #8
 800775a:	b2a4      	uxth	r4, r4
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800775c:	2600      	movs	r6, #0
 800775e:	e016      	b.n	800778e <CircularQueue_Sense+0x8a>
  uint16_t eltSize = 0;
 8007760:	2400      	movs	r4, #0
  uint8_t* x= NULL;
 8007762:	4620      	mov	r0, r4
 8007764:	e01a      	b.n	800779c <CircularQueue_Sense+0x98>
  if (q->byteCount > 0) 
 8007766:	6943      	ldr	r3, [r0, #20]
 8007768:	b1e3      	cbz	r3, 80077a4 <CircularQueue_Sense+0xa0>
    FirstElemetPos = q->first;
 800776a:	68c6      	ldr	r6, [r0, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800776c:	6802      	ldr	r2, [r0, #0]
 800776e:	5d94      	ldrb	r4, [r2, r6]
 8007770:	1c73      	adds	r3, r6, #1
 8007772:	6847      	ldr	r7, [r0, #4]
 8007774:	42bb      	cmp	r3, r7
 8007776:	d300      	bcc.n	800777a <CircularQueue_Sense+0x76>
 8007778:	1bdb      	subs	r3, r3, r7
 800777a:	5cd3      	ldrb	r3, [r2, r3]
 800777c:	eb04 2403 	add.w	r4, r4, r3, lsl #8
 8007780:	b2a4      	uxth	r4, r4
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8007782:	2202      	movs	r2, #2
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8007784:	7f03      	ldrb	r3, [r0, #28]
 8007786:	f003 0303 	and.w	r3, r3, #3
 800778a:	2b01      	cmp	r3, #1
 800778c:	d0c3      	beq.n	8007716 <CircularQueue_Sense+0x12>
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800778e:	6803      	ldr	r3, [r0, #0]
 8007790:	4432      	add	r2, r6
 8007792:	6840      	ldr	r0, [r0, #4]
 8007794:	4282      	cmp	r2, r0
 8007796:	bf28      	it	cs
 8007798:	1a12      	subcs	r2, r2, r0
 800779a:	1898      	adds	r0, r3, r2
  }
  if (elementSize != NULL)
 800779c:	b101      	cbz	r1, 80077a0 <CircularQueue_Sense+0x9c>
  {
    *elementSize = eltSize;
 800779e:	800c      	strh	r4, [r1, #0]
  }
  return x;
}
 80077a0:	bcf0      	pop	{r4, r5, r6, r7}
 80077a2:	4770      	bx	lr
  uint16_t eltSize = 0;
 80077a4:	462c      	mov	r4, r5
  uint8_t* x= NULL;
 80077a6:	2000      	movs	r0, #0
 80077a8:	e7f8      	b.n	800779c <CircularQueue_Sense+0x98>

080077aa <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 80077aa:	4770      	bx	lr

080077ac <Adv_Cancel_Req>:
{
 80077ac:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 80077ae:	2100      	movs	r1, #0
 80077b0:	2001      	movs	r0, #1
 80077b2:	f000 fc6d 	bl	8008090 <UTIL_SEQ_SetTask>
}
 80077b6:	bd08      	pop	{r3, pc}

080077b8 <Adv_Cancel>:
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80077b8:	4b1c      	ldr	r3, [pc, #112]	; (800782c <Adv_Cancel+0x74>)
 80077ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80077be:	2b05      	cmp	r3, #5
 80077c0:	d100      	bne.n	80077c4 <Adv_Cancel+0xc>
 80077c2:	4770      	bx	lr
{
 80077c4:	b570      	push	{r4, r5, r6, lr}
    result = aci_gap_set_non_discoverable();
 80077c6:	f7fe fcc1 	bl	800614c <aci_gap_set_non_discoverable>
    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80077ca:	4b18      	ldr	r3, [pc, #96]	; (800782c <Adv_Cancel+0x74>)
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (result == BLE_STATUS_SUCCESS)
 80077d2:	b9e8      	cbnz	r0, 8007810 <Adv_Cancel+0x58>
      APP_DBG_MSG("  \r\n\r");APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 80077d4:	4e16      	ldr	r6, [pc, #88]	; (8007830 <Adv_Cancel+0x78>)
 80077d6:	4630      	mov	r0, r6
 80077d8:	f7ff fd4e 	bl	8007278 <DbgTraceGetFileName>
 80077dc:	4601      	mov	r1, r0
 80077de:	4d15      	ldr	r5, [pc, #84]	; (8007834 <Adv_Cancel+0x7c>)
 80077e0:	4c15      	ldr	r4, [pc, #84]	; (8007838 <Adv_Cancel+0x80>)
 80077e2:	f240 432c 	movw	r3, #1068	; 0x42c
 80077e6:	462a      	mov	r2, r5
 80077e8:	4620      	mov	r0, r4
 80077ea:	f000 fdcb 	bl	8008384 <iprintf>
 80077ee:	4813      	ldr	r0, [pc, #76]	; (800783c <Adv_Cancel+0x84>)
 80077f0:	f000 fdc8 	bl	8008384 <iprintf>
 80077f4:	4630      	mov	r0, r6
 80077f6:	f7ff fd3f 	bl	8007278 <DbgTraceGetFileName>
 80077fa:	4601      	mov	r1, r0
 80077fc:	f240 432c 	movw	r3, #1068	; 0x42c
 8007800:	462a      	mov	r2, r5
 8007802:	4620      	mov	r0, r4
 8007804:	f000 fdbe 	bl	8008384 <iprintf>
 8007808:	480d      	ldr	r0, [pc, #52]	; (8007840 <Adv_Cancel+0x88>)
 800780a:	f000 fdbb 	bl	8008384 <iprintf>
}
 800780e:	bd70      	pop	{r4, r5, r6, pc}
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 8007810:	4807      	ldr	r0, [pc, #28]	; (8007830 <Adv_Cancel+0x78>)
 8007812:	f7ff fd31 	bl	8007278 <DbgTraceGetFileName>
 8007816:	4601      	mov	r1, r0
 8007818:	f44f 6386 	mov.w	r3, #1072	; 0x430
 800781c:	4a05      	ldr	r2, [pc, #20]	; (8007834 <Adv_Cancel+0x7c>)
 800781e:	4806      	ldr	r0, [pc, #24]	; (8007838 <Adv_Cancel+0x80>)
 8007820:	f000 fdb0 	bl	8008384 <iprintf>
 8007824:	4807      	ldr	r0, [pc, #28]	; (8007844 <Adv_Cancel+0x8c>)
 8007826:	f000 fdad 	bl	8008384 <iprintf>
  return;
 800782a:	e7f0      	b.n	800780e <Adv_Cancel+0x56>
 800782c:	20000178 	.word	0x20000178
 8007830:	08009d28 	.word	0x08009d28
 8007834:	08009fc4 	.word	0x08009fc4
 8007838:	08009544 	.word	0x08009544
 800783c:	08009d44 	.word	0x08009d44
 8007840:	08009d4c 	.word	0x08009d4c
 8007844:	08009d68 	.word	0x08009d68

08007848 <BLE_UserEvtRx>:
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
  return;
}

static void BLE_UserEvtRx( void * pPayload )
{
 8007848:	b510      	push	{r4, lr}
 800784a:	4604      	mov	r4, r0
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800784c:	6840      	ldr	r0, [r0, #4]
 800784e:	3008      	adds	r0, #8
 8007850:	f7ff f96c 	bl	8006b2c <SVCCTL_UserEvtRx>
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8007854:	3800      	subs	r0, #0
 8007856:	bf18      	it	ne
 8007858:	2001      	movne	r0, #1
 800785a:	7020      	strb	r0, [r4, #0]
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
}
 800785c:	bd10      	pop	{r4, pc}

0800785e <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800785e:	b508      	push	{r3, lr}
  uint32_t task_id_list;
  switch (status)
 8007860:	b110      	cbz	r0, 8007868 <BLE_StatusNot+0xa>
 8007862:	2801      	cmp	r0, #1
 8007864:	d004      	beq.n	8007870 <BLE_StatusNot+0x12>

    default:
      break;
  }
  return;
}
 8007866:	bd08      	pop	{r3, pc}
      UTIL_SEQ_PauseTask(task_id_list);
 8007868:	2003      	movs	r0, #3
 800786a:	f000 fc29 	bl	80080c0 <UTIL_SEQ_PauseTask>
      break;
 800786e:	e7fa      	b.n	8007866 <BLE_StatusNot+0x8>
      UTIL_SEQ_ResumeTask(task_id_list);
 8007870:	2003      	movs	r0, #3
 8007872:	f000 fc33 	bl	80080dc <UTIL_SEQ_ResumeTask>
  return;
 8007876:	e7f6      	b.n	8007866 <BLE_StatusNot+0x8>

08007878 <APP_BLE_Init>:
{
 8007878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800787a:	b09b      	sub	sp, #108	; 0x6c
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800787c:	ac0d      	add	r4, sp, #52	; 0x34
 800787e:	4d91      	ldr	r5, [pc, #580]	; (8007ac4 <APP_BLE_Init+0x24c>)
 8007880:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007882:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007888:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800788a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800788c:	682b      	ldr	r3, [r5, #0]
 800788e:	7023      	strb	r3, [r4, #0]
  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8007890:	4b8d      	ldr	r3, [pc, #564]	; (8007ac8 <APP_BLE_Init+0x250>)
 8007892:	930b      	str	r3, [sp, #44]	; 0x2c
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8007894:	4b8d      	ldr	r3, [pc, #564]	; (8007acc <APP_BLE_Init+0x254>)
 8007896:	930c      	str	r3, [sp, #48]	; 0x30
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8007898:	a90b      	add	r1, sp, #44	; 0x2c
 800789a:	488d      	ldr	r0, [pc, #564]	; (8007ad0 <APP_BLE_Init+0x258>)
 800789c:	f7ff f9da 	bl	8006c54 <hci_init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80078a0:	2101      	movs	r1, #1
 80078a2:	2002      	movs	r0, #2
 80078a4:	f000 fbde 	bl	8008064 <UTIL_LPM_SetOffMode>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80078a8:	4a8a      	ldr	r2, [pc, #552]	; (8007ad4 <APP_BLE_Init+0x25c>)
 80078aa:	2100      	movs	r1, #0
 80078ac:	2002      	movs	r0, #2
 80078ae:	f000 fd19 	bl	80082e4 <UTIL_SEQ_RegTask>
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 80078b2:	a80d      	add	r0, sp, #52	; 0x34
 80078b4:	f7ff f962 	bl	8006b7c <SHCI_C2_BLE_Init>
 80078b8:	2800      	cmp	r0, #0
 80078ba:	f040 80e6 	bne.w	8007a8a <APP_BLE_Init+0x212>
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 80078be:	2300      	movs	r3, #0
 80078c0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  hci_reset();
 80078c4:	f7fe ff43 	bl	800674e <hci_reset>
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80078c8:	4b83      	ldr	r3, [pc, #524]	; (8007ad8 <APP_BLE_Init+0x260>)
 80078ca:	681a      	ldr	r2, [r3, #0]
  if(udn != 0xFFFFFFFF)
 80078cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80078d0:	f000 80de 	beq.w	8007a90 <APP_BLE_Init+0x218>
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 80078d4:	3304      	adds	r3, #4
 80078d6:	681b      	ldr	r3, [r3, #0]
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 80078d8:	4c80      	ldr	r4, [pc, #512]	; (8007adc <APP_BLE_Init+0x264>)
 80078da:	7022      	strb	r2, [r4, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 80078dc:	0a12      	lsrs	r2, r2, #8
 80078de:	7062      	strb	r2, [r4, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 80078e0:	70a3      	strb	r3, [r4, #2]
 80078e2:	0a1a      	lsrs	r2, r3, #8
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 80078e4:	70e2      	strb	r2, [r4, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 80078e6:	0c1a      	lsrs	r2, r3, #16
 80078e8:	7122      	strb	r2, [r4, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 80078ea:	0e1b      	lsrs	r3, r3, #24
 80078ec:	7163      	strb	r3, [r4, #5]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 80078ee:	4622      	mov	r2, r4
 80078f0:	2106      	movs	r1, #6
 80078f2:	2000      	movs	r0, #0
 80078f4:	f7fe feae 	bl	8006654 <aci_hal_write_config_data>
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 80078f8:	7962      	ldrb	r2, [r4, #5]
 80078fa:	4b79      	ldr	r3, [pc, #484]	; (8007ae0 <APP_BLE_Init+0x268>)
 80078fc:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 80078fe:	7922      	ldrb	r2, [r4, #4]
 8007900:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 8007902:	78e2      	ldrb	r2, [r4, #3]
 8007904:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 8007906:	78a2      	ldrb	r2, [r4, #2]
 8007908:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 800790a:	7862      	ldrb	r2, [r4, #1]
 800790c:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 800790e:	7822      	ldrb	r2, [r4, #0]
 8007910:	735a      	strb	r2, [r3, #13]
  aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8007912:	4a74      	ldr	r2, [pc, #464]	; (8007ae4 <APP_BLE_Init+0x26c>)
 8007914:	2110      	movs	r1, #16
 8007916:	2018      	movs	r0, #24
 8007918:	f7fe fe9c 	bl	8006654 <aci_hal_write_config_data>
  aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800791c:	4a72      	ldr	r2, [pc, #456]	; (8007ae8 <APP_BLE_Init+0x270>)
 800791e:	2110      	movs	r1, #16
 8007920:	2008      	movs	r0, #8
 8007922:	f7fe fe97 	bl	8006654 <aci_hal_write_config_data>
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8007926:	2118      	movs	r1, #24
 8007928:	2001      	movs	r0, #1
 800792a:	f7fe fec2 	bl	80066b2 <aci_hal_set_tx_power_level>
  aci_gatt_init();
 800792e:	f7fe fd7c 	bl	800642a <aci_gatt_init>
    aci_gap_init(role,
 8007932:	ab0b      	add	r3, sp, #44	; 0x2c
 8007934:	9301      	str	r3, [sp, #4]
 8007936:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	ab0a      	add	r3, sp, #40	; 0x28
 800793e:	2207      	movs	r2, #7
 8007940:	2100      	movs	r1, #0
 8007942:	2001      	movs	r0, #1
 8007944:	f7fe fce0 	bl	8006308 <aci_gap_init>
    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8007948:	4b68      	ldr	r3, [pc, #416]	; (8007aec <APP_BLE_Init+0x274>)
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	2307      	movs	r3, #7
 800794e:	2200      	movs	r2, #0
 8007950:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 8007954:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
 8007958:	f7fe fe48 	bl	80065ec <aci_gatt_update_char_value>
  if(aci_gatt_update_char_value(gap_service_handle,
 800795c:	ab09      	add	r3, sp, #36	; 0x24
 800795e:	9300      	str	r3, [sp, #0]
 8007960:	2302      	movs	r3, #2
 8007962:	2200      	movs	r2, #0
 8007964:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8007968:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
 800796c:	f7fe fe3e 	bl	80065ec <aci_gatt_update_char_value>
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8007970:	2202      	movs	r2, #2
 8007972:	4611      	mov	r1, r2
 8007974:	2000      	movs	r0, #0
 8007976:	f7fe ff3b 	bl	80067f0 <hci_le_set_default_phy>
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800797a:	4c5d      	ldr	r4, [pc, #372]	; (8007af0 <APP_BLE_Init+0x278>)
 800797c:	2501      	movs	r5, #1
 800797e:	7025      	strb	r5, [r4, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8007980:	4628      	mov	r0, r5
 8007982:	f7fe fc5d 	bl	8006240 <aci_gap_set_io_capability>
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8007986:	7065      	strb	r5, [r4, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8007988:	2208      	movs	r2, #8
 800798a:	7122      	strb	r2, [r4, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800798c:	2110      	movs	r1, #16
 800798e:	7161      	strb	r1, [r4, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8007990:	2300      	movs	r3, #0
 8007992:	70e3      	strb	r3, [r4, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8007994:	4857      	ldr	r0, [pc, #348]	; (8007af4 <APP_BLE_Init+0x27c>)
 8007996:	60a0      	str	r0, [r4, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8007998:	70a5      	strb	r5, [r4, #2]
  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800799a:	9304      	str	r3, [sp, #16]
 800799c:	9003      	str	r0, [sp, #12]
 800799e:	9302      	str	r3, [sp, #8]
 80079a0:	9101      	str	r1, [sp, #4]
 80079a2:	9200      	str	r2, [sp, #0]
 80079a4:	462a      	mov	r2, r5
 80079a6:	4629      	mov	r1, r5
 80079a8:	4628      	mov	r0, r5
 80079aa:	f7fe fc6e 	bl	800628a <aci_gap_set_authentication_requirement>
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80079ae:	78a3      	ldrb	r3, [r4, #2]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d175      	bne.n	8007aa0 <APP_BLE_Init+0x228>
  SVCCTL_Init();
 80079b4:	f7ff f8a4 	bl	8006b00 <SVCCTL_Init>
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80079b8:	4d4d      	ldr	r5, [pc, #308]	; (8007af0 <APP_BLE_Init+0x278>)
 80079ba:	2400      	movs	r4, #0
 80079bc:	f885 4080 	strb.w	r4, [r5, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80079c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80079c4:	82eb      	strh	r3, [r5, #22]
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80079c6:	4a4c      	ldr	r2, [pc, #304]	; (8007af8 <APP_BLE_Init+0x280>)
 80079c8:	4621      	mov	r1, r4
 80079ca:	2001      	movs	r0, #1
 80079cc:	f000 fc8a 	bl	80082e4 <UTIL_SEQ_RegTask>
  aci_hal_set_radio_activity_mask(0x0006);
 80079d0:	2006      	movs	r0, #6
 80079d2:	f7fe fe96 	bl	8006702 <aci_hal_set_radio_activity_mask>
  P2PS_APP_Init();
 80079d6:	f000 fa37 	bl	8007e48 <P2PS_APP_Init>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 80079da:	4b48      	ldr	r3, [pc, #288]	; (8007afc <APP_BLE_Init+0x284>)
 80079dc:	4622      	mov	r2, r4
 80079de:	f105 0181 	add.w	r1, r5, #129	; 0x81
 80079e2:	4620      	mov	r0, r4
 80079e4:	f7f9 fd04 	bl	80013f0 <HW_TS_Create>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 80079e8:	4b45      	ldr	r3, [pc, #276]	; (8007b00 <APP_BLE_Init+0x288>)
 80079ea:	4622      	mov	r2, r4
 80079ec:	f105 0182 	add.w	r1, r5, #130	; 0x82
 80079f0:	4620      	mov	r0, r4
 80079f2:	f7f9 fcfd 	bl	80013f0 <HW_TS_Create>
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80079f6:	766c      	strb	r4, [r5, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80079f8:	762c      	strb	r4, [r5, #24]
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 80079fa:	2680      	movs	r6, #128	; 0x80
 80079fc:	f8a5 6084 	strh.w	r6, [r5, #132]	; 0x84
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8007a00:	27a0      	movs	r7, #160	; 0xa0
 8007a02:	f8a5 7086 	strh.w	r7, [r5, #134]	; 0x86
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8007a06:	f895 0081 	ldrb.w	r0, [r5, #129]	; 0x81
 8007a0a:	f7f9 fd1d 	bl	8001448 <HW_TS_Stop>
    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
 8007a0e:	483d      	ldr	r0, [pc, #244]	; (8007b04 <APP_BLE_Init+0x28c>)
 8007a10:	f7ff fc32 	bl	8007278 <DbgTraceGetFileName>
 8007a14:	4601      	mov	r1, r0
 8007a16:	f240 33a3 	movw	r3, #931	; 0x3a3
 8007a1a:	4a3b      	ldr	r2, [pc, #236]	; (8007b08 <APP_BLE_Init+0x290>)
 8007a1c:	483b      	ldr	r0, [pc, #236]	; (8007b0c <APP_BLE_Init+0x294>)
 8007a1e:	f000 fcb1 	bl	8008384 <iprintf>
 8007a22:	f895 1080 	ldrb.w	r1, [r5, #128]	; 0x80
 8007a26:	483a      	ldr	r0, [pc, #232]	; (8007b10 <APP_BLE_Init+0x298>)
 8007a28:	f000 fcac 	bl	8008384 <iprintf>
    BleApplicationContext.Device_Connection_Status = New_Status;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
    ret = aci_gap_set_discoverable(
 8007a32:	9406      	str	r4, [sp, #24]
 8007a34:	9405      	str	r4, [sp, #20]
 8007a36:	f105 0319 	add.w	r3, r5, #25
 8007a3a:	9304      	str	r3, [sp, #16]
 8007a3c:	7e2b      	ldrb	r3, [r5, #24]
 8007a3e:	9303      	str	r3, [sp, #12]
 8007a40:	4b34      	ldr	r3, [pc, #208]	; (8007b14 <APP_BLE_Init+0x29c>)
 8007a42:	9302      	str	r3, [sp, #8]
 8007a44:	2308      	movs	r3, #8
 8007a46:	9301      	str	r3, [sp, #4]
 8007a48:	9400      	str	r4, [sp, #0]
 8007a4a:	4623      	mov	r3, r4
 8007a4c:	463a      	mov	r2, r7
 8007a4e:	4631      	mov	r1, r6
 8007a50:	4620      	mov	r0, r4
 8007a52:	f7fe fb9b 	bl	800618c <aci_gap_set_discoverable>
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 8007a56:	4922      	ldr	r1, [pc, #136]	; (8007ae0 <APP_BLE_Init+0x268>)
 8007a58:	200e      	movs	r0, #14
 8007a5a:	f7fe fc9a 	bl	8006392 <aci_gap_update_adv_data>
    if (ret == BLE_STATUS_SUCCESS)
 8007a5e:	4604      	mov	r4, r0
 8007a60:	bb08      	cbnz	r0, 8007aa6 <APP_BLE_Init+0x22e>
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 8007a62:	4828      	ldr	r0, [pc, #160]	; (8007b04 <APP_BLE_Init+0x28c>)
 8007a64:	f7ff fc08 	bl	8007278 <DbgTraceGetFileName>
 8007a68:	4601      	mov	r1, r0
 8007a6a:	f240 33ca 	movw	r3, #970	; 0x3ca
 8007a6e:	4a26      	ldr	r2, [pc, #152]	; (8007b08 <APP_BLE_Init+0x290>)
 8007a70:	4826      	ldr	r0, [pc, #152]	; (8007b0c <APP_BLE_Init+0x294>)
 8007a72:	f000 fc87 	bl	8008384 <iprintf>
 8007a76:	4828      	ldr	r0, [pc, #160]	; (8007b18 <APP_BLE_Init+0x2a0>)
 8007a78:	f000 fd0a 	bl	8008490 <puts>
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 8007a7c:	4927      	ldr	r1, [pc, #156]	; (8007b1c <APP_BLE_Init+0x2a4>)
 8007a7e:	f895 0081 	ldrb.w	r0, [r5, #129]	; 0x81
 8007a82:	f7f9 fd3f 	bl	8001504 <HW_TS_Start>
}
 8007a86:	b01b      	add	sp, #108	; 0x6c
 8007a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8007a8a:	f7fa f87b 	bl	8001b84 <Error_Handler>
 8007a8e:	e716      	b.n	80078be <APP_BLE_Init+0x46>
    otp_addr = OTP_Read(0);
 8007a90:	2000      	movs	r0, #0
 8007a92:	f7ff fc39 	bl	8007308 <OTP_Read>
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8007a96:	4c22      	ldr	r4, [pc, #136]	; (8007b20 <APP_BLE_Init+0x2a8>)
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	bf18      	it	ne
 8007a9c:	4604      	movne	r4, r0
 8007a9e:	e726      	b.n	80078ee <APP_BLE_Init+0x76>
     aci_gap_configure_whitelist();
 8007aa0:	f7fe fca3 	bl	80063ea <aci_gap_configure_whitelist>
 8007aa4:	e786      	b.n	80079b4 <APP_BLE_Init+0x13c>
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 8007aa6:	4817      	ldr	r0, [pc, #92]	; (8007b04 <APP_BLE_Init+0x28c>)
 8007aa8:	f7ff fbe6 	bl	8007278 <DbgTraceGetFileName>
 8007aac:	4601      	mov	r1, r0
 8007aae:	f240 33d7 	movw	r3, #983	; 0x3d7
 8007ab2:	4a15      	ldr	r2, [pc, #84]	; (8007b08 <APP_BLE_Init+0x290>)
 8007ab4:	4815      	ldr	r0, [pc, #84]	; (8007b0c <APP_BLE_Init+0x294>)
 8007ab6:	f000 fc65 	bl	8008384 <iprintf>
 8007aba:	4621      	mov	r1, r4
 8007abc:	4819      	ldr	r0, [pc, #100]	; (8007b24 <APP_BLE_Init+0x2ac>)
 8007abe:	f000 fc61 	bl	8008384 <iprintf>
  return;
 8007ac2:	e7e0      	b.n	8007a86 <APP_BLE_Init+0x20e>
 8007ac4:	080093b0 	.word	0x080093b0
 8007ac8:	200300d4 	.word	0x200300d4
 8007acc:	0800785f 	.word	0x0800785f
 8007ad0:	08007849 	.word	0x08007849
 8007ad4:	08006ca9 	.word	0x08006ca9
 8007ad8:	1fff7580 	.word	0x1fff7580
 8007adc:	20000368 	.word	0x20000368
 8007ae0:	20000014 	.word	0x20000014
 8007ae4:	08009f88 	.word	0x08009f88
 8007ae8:	08009f78 	.word	0x08009f78
 8007aec:	08009d8c 	.word	0x08009d8c
 8007af0:	20000178 	.word	0x20000178
 8007af4:	0001b207 	.word	0x0001b207
 8007af8:	080077b9 	.word	0x080077b9
 8007afc:	080077ad 	.word	0x080077ad
 8007b00:	080077ab 	.word	0x080077ab
 8007b04:	08009d28 	.word	0x08009d28
 8007b08:	08009fb8 	.word	0x08009fb8
 8007b0c:	08009544 	.word	0x08009544
 8007b10:	08009d94 	.word	0x08009d94
 8007b14:	08009fd0 	.word	0x08009fd0
 8007b18:	08009db0 	.word	0x08009db0
 8007b1c:	0001e046 	.word	0x0001e046
 8007b20:	08009f98 	.word	0x08009f98
 8007b24:	08009dd8 	.word	0x08009dd8

08007b28 <SVCCTL_App_Notification>:
{
 8007b28:	b570      	push	{r4, r5, r6, lr}
 8007b2a:	b08a      	sub	sp, #40	; 0x28
 8007b2c:	4604      	mov	r4, r0
  switch (event_pckt->evt)
 8007b2e:	7843      	ldrb	r3, [r0, #1]
 8007b30:	2b3e      	cmp	r3, #62	; 0x3e
 8007b32:	d07d      	beq.n	8007c30 <SVCCTL_App_Notification+0x108>
 8007b34:	2bff      	cmp	r3, #255	; 0xff
 8007b36:	f000 8133 	beq.w	8007da0 <SVCCTL_App_Notification+0x278>
 8007b3a:	2b05      	cmp	r3, #5
 8007b3c:	d002      	beq.n	8007b44 <SVCCTL_App_Notification+0x1c>
}
 8007b3e:	2001      	movs	r0, #1
 8007b40:	b00a      	add	sp, #40	; 0x28
 8007b42:	bd70      	pop	{r4, r5, r6, pc}
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8007b44:	8882      	ldrh	r2, [r0, #4]
 8007b46:	4ba1      	ldr	r3, [pc, #644]	; (8007dcc <SVCCTL_App_Notification+0x2a4>)
 8007b48:	8adb      	ldrh	r3, [r3, #22]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d04e      	beq.n	8007bec <SVCCTL_App_Notification+0xc4>
    Min_Inter = AdvIntervalMin;
 8007b4e:	4c9f      	ldr	r4, [pc, #636]	; (8007dcc <SVCCTL_App_Notification+0x2a4>)
 8007b50:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
    Max_Inter = AdvIntervalMax;
 8007b54:	f8b4 6086 	ldrh.w	r6, [r4, #134]	; 0x86
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8007b58:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
 8007b5c:	f7f9 fc74 	bl	8001448 <HW_TS_Stop>
    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
 8007b60:	489b      	ldr	r0, [pc, #620]	; (8007dd0 <SVCCTL_App_Notification+0x2a8>)
 8007b62:	f7ff fb89 	bl	8007278 <DbgTraceGetFileName>
 8007b66:	4601      	mov	r1, r0
 8007b68:	f240 33a3 	movw	r3, #931	; 0x3a3
 8007b6c:	4a99      	ldr	r2, [pc, #612]	; (8007dd4 <SVCCTL_App_Notification+0x2ac>)
 8007b6e:	489a      	ldr	r0, [pc, #616]	; (8007dd8 <SVCCTL_App_Notification+0x2b0>)
 8007b70:	f000 fc08 	bl	8008384 <iprintf>
 8007b74:	f894 1080 	ldrb.w	r1, [r4, #128]	; 0x80
 8007b78:	4898      	ldr	r0, [pc, #608]	; (8007ddc <SVCCTL_App_Notification+0x2b4>)
 8007b7a:	f000 fc03 	bl	8008384 <iprintf>
    BleApplicationContext.Device_Connection_Status = New_Status;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ret = aci_gap_set_discoverable(
 8007b84:	2000      	movs	r0, #0
 8007b86:	9006      	str	r0, [sp, #24]
 8007b88:	9005      	str	r0, [sp, #20]
 8007b8a:	f104 0319 	add.w	r3, r4, #25
 8007b8e:	9304      	str	r3, [sp, #16]
 8007b90:	7e23      	ldrb	r3, [r4, #24]
 8007b92:	9303      	str	r3, [sp, #12]
 8007b94:	4b92      	ldr	r3, [pc, #584]	; (8007de0 <SVCCTL_App_Notification+0x2b8>)
 8007b96:	9302      	str	r3, [sp, #8]
 8007b98:	2308      	movs	r3, #8
 8007b9a:	9301      	str	r3, [sp, #4]
 8007b9c:	9000      	str	r0, [sp, #0]
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	4632      	mov	r2, r6
 8007ba2:	4629      	mov	r1, r5
 8007ba4:	f7fe faf2 	bl	800618c <aci_gap_set_discoverable>
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 8007ba8:	498e      	ldr	r1, [pc, #568]	; (8007de4 <SVCCTL_App_Notification+0x2bc>)
 8007baa:	200e      	movs	r0, #14
 8007bac:	f7fe fbf1 	bl	8006392 <aci_gap_update_adv_data>
    if (ret == BLE_STATUS_SUCCESS)
 8007bb0:	4604      	mov	r4, r0
 8007bb2:	bb70      	cbnz	r0, 8007c12 <SVCCTL_App_Notification+0xea>
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 8007bb4:	4886      	ldr	r0, [pc, #536]	; (8007dd0 <SVCCTL_App_Notification+0x2a8>)
 8007bb6:	f7ff fb5f 	bl	8007278 <DbgTraceGetFileName>
 8007bba:	4601      	mov	r1, r0
 8007bbc:	f240 33ca 	movw	r3, #970	; 0x3ca
 8007bc0:	4a84      	ldr	r2, [pc, #528]	; (8007dd4 <SVCCTL_App_Notification+0x2ac>)
 8007bc2:	4885      	ldr	r0, [pc, #532]	; (8007dd8 <SVCCTL_App_Notification+0x2b0>)
 8007bc4:	f000 fbde 	bl	8008384 <iprintf>
 8007bc8:	4887      	ldr	r0, [pc, #540]	; (8007de8 <SVCCTL_App_Notification+0x2c0>)
 8007bca:	f000 fc61 	bl	8008490 <puts>
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 8007bce:	4987      	ldr	r1, [pc, #540]	; (8007dec <SVCCTL_App_Notification+0x2c4>)
 8007bd0:	4b7e      	ldr	r3, [pc, #504]	; (8007dcc <SVCCTL_App_Notification+0x2a4>)
 8007bd2:	f893 0081 	ldrb.w	r0, [r3, #129]	; 0x81
 8007bd6:	f7f9 fc95 	bl	8001504 <HW_TS_Start>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8007bda:	4885      	ldr	r0, [pc, #532]	; (8007df0 <SVCCTL_App_Notification+0x2c8>)
 8007bdc:	2301      	movs	r3, #1
 8007bde:	7003      	strb	r3, [r0, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007be0:	4b7a      	ldr	r3, [pc, #488]	; (8007dcc <SVCCTL_App_Notification+0x2a4>)
 8007be2:	8adb      	ldrh	r3, [r3, #22]
 8007be4:	8043      	strh	r3, [r0, #2]
      P2PS_APP_Notification(&handleNotification);
 8007be6:	f000 f92e 	bl	8007e46 <P2PS_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8007bea:	e7a8      	b.n	8007b3e <SVCCTL_App_Notification+0x16>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8007bec:	4b77      	ldr	r3, [pc, #476]	; (8007dcc <SVCCTL_App_Notification+0x2a4>)
 8007bee:	2200      	movs	r2, #0
 8007bf0:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007bf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 8007bf6:	4876      	ldr	r0, [pc, #472]	; (8007dd0 <SVCCTL_App_Notification+0x2a8>)
 8007bf8:	f7ff fb3e 	bl	8007278 <DbgTraceGetFileName>
 8007bfc:	4601      	mov	r1, r0
 8007bfe:	f44f 7305 	mov.w	r3, #532	; 0x214
 8007c02:	4a7c      	ldr	r2, [pc, #496]	; (8007df4 <SVCCTL_App_Notification+0x2cc>)
 8007c04:	4874      	ldr	r0, [pc, #464]	; (8007dd8 <SVCCTL_App_Notification+0x2b0>)
 8007c06:	f000 fbbd 	bl	8008384 <iprintf>
 8007c0a:	487b      	ldr	r0, [pc, #492]	; (8007df8 <SVCCTL_App_Notification+0x2d0>)
 8007c0c:	f000 fc40 	bl	8008490 <puts>
 8007c10:	e79d      	b.n	8007b4e <SVCCTL_App_Notification+0x26>
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 8007c12:	486f      	ldr	r0, [pc, #444]	; (8007dd0 <SVCCTL_App_Notification+0x2a8>)
 8007c14:	f7ff fb30 	bl	8007278 <DbgTraceGetFileName>
 8007c18:	4601      	mov	r1, r0
 8007c1a:	f240 33d7 	movw	r3, #983	; 0x3d7
 8007c1e:	4a6d      	ldr	r2, [pc, #436]	; (8007dd4 <SVCCTL_App_Notification+0x2ac>)
 8007c20:	486d      	ldr	r0, [pc, #436]	; (8007dd8 <SVCCTL_App_Notification+0x2b0>)
 8007c22:	f000 fbaf 	bl	8008384 <iprintf>
 8007c26:	4621      	mov	r1, r4
 8007c28:	4874      	ldr	r0, [pc, #464]	; (8007dfc <SVCCTL_App_Notification+0x2d4>)
 8007c2a:	f000 fbab 	bl	8008384 <iprintf>
 8007c2e:	e7d4      	b.n	8007bda <SVCCTL_App_Notification+0xb2>
      switch (meta_evt->subevent)
 8007c30:	78c3      	ldrb	r3, [r0, #3]
 8007c32:	2b03      	cmp	r3, #3
 8007c34:	d02a      	beq.n	8007c8c <SVCCTL_App_Notification+0x164>
 8007c36:	2b0c      	cmp	r3, #12
 8007c38:	d036      	beq.n	8007ca8 <SVCCTL_App_Notification+0x180>
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	f47f af7f 	bne.w	8007b3e <SVCCTL_App_Notification+0x16>
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8007c40:	4d62      	ldr	r5, [pc, #392]	; (8007dcc <SVCCTL_App_Notification+0x2a4>)
 8007c42:	f895 0081 	ldrb.w	r0, [r5, #129]	; 0x81
 8007c46:	f7f9 fbff 	bl	8001448 <HW_TS_Stop>
          APP_DBG_MSG("HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE for connection handle 0x%x\n", connection_complete_event->Connection_Handle);
 8007c4a:	4861      	ldr	r0, [pc, #388]	; (8007dd0 <SVCCTL_App_Notification+0x2a8>)
 8007c4c:	f7ff fb14 	bl	8007278 <DbgTraceGetFileName>
 8007c50:	4601      	mov	r1, r0
 8007c52:	f240 2363 	movw	r3, #611	; 0x263
 8007c56:	4a67      	ldr	r2, [pc, #412]	; (8007df4 <SVCCTL_App_Notification+0x2cc>)
 8007c58:	485f      	ldr	r0, [pc, #380]	; (8007dd8 <SVCCTL_App_Notification+0x2b0>)
 8007c5a:	f000 fb93 	bl	8008384 <iprintf>
 8007c5e:	f8b4 1005 	ldrh.w	r1, [r4, #5]
 8007c62:	4867      	ldr	r0, [pc, #412]	; (8007e00 <SVCCTL_App_Notification+0x2d8>)
 8007c64:	f000 fb8e 	bl	8008384 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8007c68:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8007c6c:	2b04      	cmp	r3, #4
 8007c6e:	bf0c      	ite	eq
 8007c70:	2306      	moveq	r3, #6
 8007c72:	2305      	movne	r3, #5
 8007c74:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8007c78:	f8b4 3005 	ldrh.w	r3, [r4, #5]
 8007c7c:	82eb      	strh	r3, [r5, #22]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8007c7e:	485c      	ldr	r0, [pc, #368]	; (8007df0 <SVCCTL_App_Notification+0x2c8>)
 8007c80:	2200      	movs	r2, #0
 8007c82:	7002      	strb	r2, [r0, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007c84:	8043      	strh	r3, [r0, #2]
          P2PS_APP_Notification(&handleNotification);
 8007c86:	f000 f8de 	bl	8007e46 <P2PS_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8007c8a:	e758      	b.n	8007b3e <SVCCTL_App_Notification+0x16>
          APP_DBG_MSG("\r\n\r** CONNECTION UPDATE EVENT WITH CLIENT \n");
 8007c8c:	4850      	ldr	r0, [pc, #320]	; (8007dd0 <SVCCTL_App_Notification+0x2a8>)
 8007c8e:	f7ff faf3 	bl	8007278 <DbgTraceGetFileName>
 8007c92:	4601      	mov	r1, r0
 8007c94:	f44f 730c 	mov.w	r3, #560	; 0x230
 8007c98:	4a56      	ldr	r2, [pc, #344]	; (8007df4 <SVCCTL_App_Notification+0x2cc>)
 8007c9a:	484f      	ldr	r0, [pc, #316]	; (8007dd8 <SVCCTL_App_Notification+0x2b0>)
 8007c9c:	f000 fb72 	bl	8008384 <iprintf>
 8007ca0:	4858      	ldr	r0, [pc, #352]	; (8007e04 <SVCCTL_App_Notification+0x2dc>)
 8007ca2:	f000 fbf5 	bl	8008490 <puts>
          break;
 8007ca6:	e74a      	b.n	8007b3e <SVCCTL_App_Notification+0x16>
          APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE \n");
 8007ca8:	4849      	ldr	r0, [pc, #292]	; (8007dd0 <SVCCTL_App_Notification+0x2a8>)
 8007caa:	f7ff fae5 	bl	8007278 <DbgTraceGetFileName>
 8007cae:	4601      	mov	r1, r0
 8007cb0:	f240 2337 	movw	r3, #567	; 0x237
 8007cb4:	4a4f      	ldr	r2, [pc, #316]	; (8007df4 <SVCCTL_App_Notification+0x2cc>)
 8007cb6:	4848      	ldr	r0, [pc, #288]	; (8007dd8 <SVCCTL_App_Notification+0x2b0>)
 8007cb8:	f000 fb64 	bl	8008384 <iprintf>
 8007cbc:	4852      	ldr	r0, [pc, #328]	; (8007e08 <SVCCTL_App_Notification+0x2e0>)
 8007cbe:	f000 fbe7 	bl	8008490 <puts>
          if (evt_le_phy_update_complete->Status == 0)
 8007cc2:	7923      	ldrb	r3, [r4, #4]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d13d      	bne.n	8007d44 <SVCCTL_App_Notification+0x21c>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status ok \n");
 8007cc8:	4841      	ldr	r0, [pc, #260]	; (8007dd0 <SVCCTL_App_Notification+0x2a8>)
 8007cca:	f7ff fad5 	bl	8007278 <DbgTraceGetFileName>
 8007cce:	4601      	mov	r1, r0
 8007cd0:	f240 233b 	movw	r3, #571	; 0x23b
 8007cd4:	4a47      	ldr	r2, [pc, #284]	; (8007df4 <SVCCTL_App_Notification+0x2cc>)
 8007cd6:	4840      	ldr	r0, [pc, #256]	; (8007dd8 <SVCCTL_App_Notification+0x2b0>)
 8007cd8:	f000 fb54 	bl	8008384 <iprintf>
 8007cdc:	484b      	ldr	r0, [pc, #300]	; (8007e0c <SVCCTL_App_Notification+0x2e4>)
 8007cde:	f000 fbd7 	bl	8008490 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 8007ce2:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 8007ce6:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8007cea:	4b38      	ldr	r3, [pc, #224]	; (8007dcc <SVCCTL_App_Notification+0x2a4>)
 8007cec:	8ad8      	ldrh	r0, [r3, #22]
 8007cee:	f7fe fd4d 	bl	800678c <hci_le_read_phy>
          if (ret == BLE_STATUS_SUCCESS)
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	d146      	bne.n	8007d84 <SVCCTL_App_Notification+0x25c>
            APP_DBG_MSG("Read_PHY success \n");
 8007cf6:	4836      	ldr	r0, [pc, #216]	; (8007dd0 <SVCCTL_App_Notification+0x2a8>)
 8007cf8:	f7ff fabe 	bl	8007278 <DbgTraceGetFileName>
 8007cfc:	4601      	mov	r1, r0
 8007cfe:	f240 2345 	movw	r3, #581	; 0x245
 8007d02:	4a3c      	ldr	r2, [pc, #240]	; (8007df4 <SVCCTL_App_Notification+0x2cc>)
 8007d04:	4834      	ldr	r0, [pc, #208]	; (8007dd8 <SVCCTL_App_Notification+0x2b0>)
 8007d06:	f000 fb3d 	bl	8008384 <iprintf>
 8007d0a:	4841      	ldr	r0, [pc, #260]	; (8007e10 <SVCCTL_App_Notification+0x2e8>)
 8007d0c:	f000 fbc0 	bl	8008490 <puts>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 8007d10:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8007d14:	2b02      	cmp	r3, #2
 8007d16:	d103      	bne.n	8007d20 <SVCCTL_App_Notification+0x1f8>
 8007d18:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d01f      	beq.n	8007d60 <SVCCTL_App_Notification+0x238>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 8007d20:	482b      	ldr	r0, [pc, #172]	; (8007dd0 <SVCCTL_App_Notification+0x2a8>)
 8007d22:	f7ff faa9 	bl	8007278 <DbgTraceGetFileName>
 8007d26:	4601      	mov	r1, r0
 8007d28:	f240 234d 	movw	r3, #589	; 0x24d
 8007d2c:	4a31      	ldr	r2, [pc, #196]	; (8007df4 <SVCCTL_App_Notification+0x2cc>)
 8007d2e:	482a      	ldr	r0, [pc, #168]	; (8007dd8 <SVCCTL_App_Notification+0x2b0>)
 8007d30:	f000 fb28 	bl	8008384 <iprintf>
 8007d34:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8007d38:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
 8007d3c:	4835      	ldr	r0, [pc, #212]	; (8007e14 <SVCCTL_App_Notification+0x2ec>)
 8007d3e:	f000 fb21 	bl	8008384 <iprintf>
 8007d42:	e6fc      	b.n	8007b3e <SVCCTL_App_Notification+0x16>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status nok \n");
 8007d44:	4822      	ldr	r0, [pc, #136]	; (8007dd0 <SVCCTL_App_Notification+0x2a8>)
 8007d46:	f7ff fa97 	bl	8007278 <DbgTraceGetFileName>
 8007d4a:	4601      	mov	r1, r0
 8007d4c:	f240 233f 	movw	r3, #575	; 0x23f
 8007d50:	4a28      	ldr	r2, [pc, #160]	; (8007df4 <SVCCTL_App_Notification+0x2cc>)
 8007d52:	4821      	ldr	r0, [pc, #132]	; (8007dd8 <SVCCTL_App_Notification+0x2b0>)
 8007d54:	f000 fb16 	bl	8008384 <iprintf>
 8007d58:	482f      	ldr	r0, [pc, #188]	; (8007e18 <SVCCTL_App_Notification+0x2f0>)
 8007d5a:	f000 fb99 	bl	8008490 <puts>
 8007d5e:	e7c0      	b.n	8007ce2 <SVCCTL_App_Notification+0x1ba>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 8007d60:	481b      	ldr	r0, [pc, #108]	; (8007dd0 <SVCCTL_App_Notification+0x2a8>)
 8007d62:	f7ff fa89 	bl	8007278 <DbgTraceGetFileName>
 8007d66:	4601      	mov	r1, r0
 8007d68:	f240 2349 	movw	r3, #585	; 0x249
 8007d6c:	4a21      	ldr	r2, [pc, #132]	; (8007df4 <SVCCTL_App_Notification+0x2cc>)
 8007d6e:	481a      	ldr	r0, [pc, #104]	; (8007dd8 <SVCCTL_App_Notification+0x2b0>)
 8007d70:	f000 fb08 	bl	8008384 <iprintf>
 8007d74:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8007d78:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
 8007d7c:	4825      	ldr	r0, [pc, #148]	; (8007e14 <SVCCTL_App_Notification+0x2ec>)
 8007d7e:	f000 fb01 	bl	8008384 <iprintf>
 8007d82:	e6dc      	b.n	8007b3e <SVCCTL_App_Notification+0x16>
            APP_DBG_MSG("Read conf not succeess \n");
 8007d84:	4812      	ldr	r0, [pc, #72]	; (8007dd0 <SVCCTL_App_Notification+0x2a8>)
 8007d86:	f7ff fa77 	bl	8007278 <DbgTraceGetFileName>
 8007d8a:	4601      	mov	r1, r0
 8007d8c:	f240 2352 	movw	r3, #594	; 0x252
 8007d90:	4a18      	ldr	r2, [pc, #96]	; (8007df4 <SVCCTL_App_Notification+0x2cc>)
 8007d92:	4811      	ldr	r0, [pc, #68]	; (8007dd8 <SVCCTL_App_Notification+0x2b0>)
 8007d94:	f000 faf6 	bl	8008384 <iprintf>
 8007d98:	4820      	ldr	r0, [pc, #128]	; (8007e1c <SVCCTL_App_Notification+0x2f4>)
 8007d9a:	f000 fb79 	bl	8008490 <puts>
 8007d9e:	e6ce      	b.n	8007b3e <SVCCTL_App_Notification+0x16>
      switch (blecore_evt->ecode)
 8007da0:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 8007da4:	f240 4307 	movw	r3, #1031	; 0x407
 8007da8:	429a      	cmp	r2, r3
 8007daa:	f47f aec8 	bne.w	8007b3e <SVCCTL_App_Notification+0x16>
        APP_DBG_MSG("\r\n\r** ACI_GAP_PROC_COMPLETE_VSEVT_CODE \n");
 8007dae:	4808      	ldr	r0, [pc, #32]	; (8007dd0 <SVCCTL_App_Notification+0x2a8>)
 8007db0:	f7ff fa62 	bl	8007278 <DbgTraceGetFileName>
 8007db4:	4601      	mov	r1, r0
 8007db6:	f240 239e 	movw	r3, #670	; 0x29e
 8007dba:	4a0e      	ldr	r2, [pc, #56]	; (8007df4 <SVCCTL_App_Notification+0x2cc>)
 8007dbc:	4806      	ldr	r0, [pc, #24]	; (8007dd8 <SVCCTL_App_Notification+0x2b0>)
 8007dbe:	f000 fae1 	bl	8008384 <iprintf>
 8007dc2:	4817      	ldr	r0, [pc, #92]	; (8007e20 <SVCCTL_App_Notification+0x2f8>)
 8007dc4:	f000 fb64 	bl	8008490 <puts>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8007dc8:	e6b9      	b.n	8007b3e <SVCCTL_App_Notification+0x16>
 8007dca:	bf00      	nop
 8007dcc:	20000178 	.word	0x20000178
 8007dd0:	08009d28 	.word	0x08009d28
 8007dd4:	08009fb8 	.word	0x08009fb8
 8007dd8:	08009544 	.word	0x08009544
 8007ddc:	08009d94 	.word	0x08009d94
 8007de0:	08009fd0 	.word	0x08009fd0
 8007de4:	20000014 	.word	0x20000014
 8007de8:	08009db0 	.word	0x08009db0
 8007dec:	0001e046 	.word	0x0001e046
 8007df0:	20000658 	.word	0x20000658
 8007df4:	08009fa0 	.word	0x08009fa0
 8007df8:	08009e08 	.word	0x08009e08
 8007dfc:	08009dd8 	.word	0x08009dd8
 8007e00:	08009f0c 	.word	0x08009f0c
 8007e04:	08009e30 	.word	0x08009e30
 8007e08:	08009e5c 	.word	0x08009e5c
 8007e0c:	08009e78 	.word	0x08009e78
 8007e10:	08009ec4 	.word	0x08009ec4
 8007e14:	08009ed8 	.word	0x08009ed8
 8007e18:	08009e9c 	.word	0x08009e9c
 8007e1c:	08009ef4 	.word	0x08009ef4
 8007e20:	08009f50 	.word	0x08009f50

08007e24 <hci_notify_asynch_evt>:
{
 8007e24:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8007e26:	2100      	movs	r1, #0
 8007e28:	2002      	movs	r0, #2
 8007e2a:	f000 f931 	bl	8008090 <UTIL_SEQ_SetTask>
}
 8007e2e:	bd08      	pop	{r3, pc}

08007e30 <hci_cmd_resp_release>:
{
 8007e30:	b508      	push	{r3, lr}
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007e32:	2001      	movs	r0, #1
 8007e34:	f000 f95e 	bl	80080f4 <UTIL_SEQ_SetEvt>
}
 8007e38:	bd08      	pop	{r3, pc}

08007e3a <hci_cmd_resp_wait>:
{
 8007e3a:	b508      	push	{r3, lr}
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007e3c:	2001      	movs	r0, #1
 8007e3e:	f000 fa1b 	bl	8008278 <UTIL_SEQ_WaitEvt>
}
 8007e42:	bd08      	pop	{r3, pc}

08007e44 <P2PS_STM_App_Notification>:
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
}
 8007e44:	4770      	bx	lr

08007e46 <P2PS_APP_Notification>:
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
}
 8007e46:	4770      	bx	lr

08007e48 <P2PS_APP_Init>:
{
/* USER CODE BEGIN P2PS_APP_Init */

/* USER CODE END P2PS_APP_Init */
  return;
}
 8007e48:	4770      	bx	lr
	...

08007e4c <HW_IPCC_Enable>:
}
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8007e4c:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8007e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e52:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8007e56:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007e5a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8007e5e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8007e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e66:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8007e68:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8007e6a:	4b0a      	ldr	r3, [pc, #40]	; (8007e94 <HW_IPCC_Enable+0x48>)
 8007e6c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8007e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e74:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8007e78:	6a1a      	ldr	r2, [r3, #32]
 8007e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e7e:	621a      	str	r2, [r3, #32]
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8007e80:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8007e82:	bf20      	wfe
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8007e84:	4a04      	ldr	r2, [pc, #16]	; (8007e98 <HW_IPCC_Enable+0x4c>)
 8007e86:	68d3      	ldr	r3, [r2, #12]
 8007e88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e8c:	60d3      	str	r3, [r2, #12]
  LL_PWR_EnableBootC2( );

  return;
}
 8007e8e:	b002      	add	sp, #8
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	58000800 	.word	0x58000800
 8007e98:	58000400 	.word	0x58000400

08007e9c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8007e9c:	b500      	push	{lr}
 8007e9e:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB3ENR, Periphs);
 8007ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ea4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ea6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007eaa:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8007eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007eb2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8007eb4:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8007eb6:	4b09      	ldr	r3, [pc, #36]	; (8007edc <HW_IPCC_Init+0x40>)
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	f042 0201 	orr.w	r2, r2, #1
 8007ebe:	601a      	str	r2, [r3, #0]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007ec6:	601a      	str	r2, [r3, #0]
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );

  LL_C1_IPCC_EnableIT_RXO( IPCC );
  LL_C1_IPCC_EnableIT_TXF( IPCC );

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8007ec8:	202c      	movs	r0, #44	; 0x2c
 8007eca:	f7fa fa3b 	bl	8002344 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8007ece:	202d      	movs	r0, #45	; 0x2d
 8007ed0:	f7fa fa38 	bl	8002344 <HAL_NVIC_EnableIRQ>

  return;
}
 8007ed4:	b003      	add	sp, #12
 8007ed6:	f85d fb04 	ldr.w	pc, [sp], #4
 8007eda:	bf00      	nop
 8007edc:	58000c00 	.word	0x58000c00

08007ee0 <HW_IPCC_BLE_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8007ee0:	4a02      	ldr	r2, [pc, #8]	; (8007eec <HW_IPCC_BLE_Init+0xc>)
 8007ee2:	6853      	ldr	r3, [r2, #4]
 8007ee4:	f023 0301 	bic.w	r3, r3, #1
 8007ee8:	6053      	str	r3, [r2, #4]
void HW_IPCC_BLE_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );

  return;
}
 8007eea:	4770      	bx	lr
 8007eec:	58000c00 	.word	0x58000c00

08007ef0 <HW_IPCC_BLE_SendCmd>:
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8007ef0:	4b02      	ldr	r3, [pc, #8]	; (8007efc <HW_IPCC_BLE_SendCmd+0xc>)
 8007ef2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007ef6:	609a      	str	r2, [r3, #8]
void HW_IPCC_BLE_SendCmd( void )
{
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );

  return;
}
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	58000c00 	.word	0x58000c00

08007f00 <HW_IPCC_SYS_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8007f00:	4a02      	ldr	r2, [pc, #8]	; (8007f0c <HW_IPCC_SYS_Init+0xc>)
 8007f02:	6853      	ldr	r3, [r2, #4]
 8007f04:	f023 0302 	bic.w	r3, r3, #2
 8007f08:	6053      	str	r3, [r2, #4]
void HW_IPCC_SYS_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );

  return;
}
 8007f0a:	4770      	bx	lr
 8007f0c:	58000c00 	.word	0x58000c00

08007f10 <HW_IPCC_SYS_SendCmd>:
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8007f10:	4b04      	ldr	r3, [pc, #16]	; (8007f24 <HW_IPCC_SYS_SendCmd+0x14>)
 8007f12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007f16:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8007f18:	685a      	ldr	r2, [r3, #4]
 8007f1a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007f1e:	605a      	str	r2, [r3, #4]
{
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );

  return;
}
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	58000c00 	.word	0x58000c00

08007f28 <HW_IPCC_Tx_Handler>:
{
 8007f28:	b510      	push	{r4, lr}
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8007f2a:	4b1d      	ldr	r3, [pc, #116]	; (8007fa0 <HW_IPCC_Tx_Handler+0x78>)
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	f013 0f02 	tst.w	r3, #2
 8007f32:	d104      	bne.n	8007f3e <HW_IPCC_Tx_Handler+0x16>
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8007f34:	4b1a      	ldr	r3, [pc, #104]	; (8007fa0 <HW_IPCC_Tx_Handler+0x78>)
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007f3c:	d014      	beq.n	8007f68 <HW_IPCC_Tx_Handler+0x40>
 8007f3e:	4b18      	ldr	r3, [pc, #96]	; (8007fa0 <HW_IPCC_Tx_Handler+0x78>)
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	f013 0f08 	tst.w	r3, #8
 8007f46:	d104      	bne.n	8007f52 <HW_IPCC_Tx_Handler+0x2a>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8007f48:	4b15      	ldr	r3, [pc, #84]	; (8007fa0 <HW_IPCC_Tx_Handler+0x78>)
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8007f50:	d012      	beq.n	8007f78 <HW_IPCC_Tx_Handler+0x50>
 8007f52:	4b13      	ldr	r3, [pc, #76]	; (8007fa0 <HW_IPCC_Tx_Handler+0x78>)
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	f013 0f20 	tst.w	r3, #32
 8007f5a:	d104      	bne.n	8007f66 <HW_IPCC_Tx_Handler+0x3e>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8007f5c:	4b10      	ldr	r3, [pc, #64]	; (8007fa0 <HW_IPCC_Tx_Handler+0x78>)
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8007f64:	d014      	beq.n	8007f90 <HW_IPCC_Tx_Handler+0x68>
}
 8007f66:	bd10      	pop	{r4, pc}
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8007f68:	4a0d      	ldr	r2, [pc, #52]	; (8007fa0 <HW_IPCC_Tx_Handler+0x78>)
 8007f6a:	6853      	ldr	r3, [r2, #4]
 8007f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f70:	6053      	str	r3, [r2, #4]

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );

  HW_IPCC_SYS_CmdEvtNot();
 8007f72:	f7ff f8e3 	bl	800713c <HW_IPCC_SYS_CmdEvtNot>

  return;
 8007f76:	e7f6      	b.n	8007f66 <HW_IPCC_Tx_Handler+0x3e>
 8007f78:	4c09      	ldr	r4, [pc, #36]	; (8007fa0 <HW_IPCC_Tx_Handler+0x78>)
 8007f7a:	6863      	ldr	r3, [r4, #4]
 8007f7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f80:	6063      	str	r3, [r4, #4]

static void HW_IPCC_MM_FreeBufHandler( void )
{
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );

  FreeBufCb();
 8007f82:	4b08      	ldr	r3, [pc, #32]	; (8007fa4 <HW_IPCC_Tx_Handler+0x7c>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4798      	blx	r3
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8007f88:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007f8c:	60a3      	str	r3, [r4, #8]

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );

  return;
 8007f8e:	e7ea      	b.n	8007f66 <HW_IPCC_Tx_Handler+0x3e>
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8007f90:	4a03      	ldr	r2, [pc, #12]	; (8007fa0 <HW_IPCC_Tx_Handler+0x78>)
 8007f92:	6853      	ldr	r3, [r2, #4]
 8007f94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007f98:	6053      	str	r3, [r2, #4]
  HW_IPCC_BLE_AclDataAckNot();
 8007f9a:	f7ff f89b 	bl	80070d4 <HW_IPCC_BLE_AclDataAckNot>
  return;
 8007f9e:	e7e2      	b.n	8007f66 <HW_IPCC_Tx_Handler+0x3e>
 8007fa0:	58000c00 	.word	0x58000c00
 8007fa4:	20000370 	.word	0x20000370

08007fa8 <HW_IPCC_MM_SendFreeBuf>:
{
 8007fa8:	b508      	push	{r3, lr}
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8007faa:	4b09      	ldr	r3, [pc, #36]	; (8007fd0 <HW_IPCC_MM_SendFreeBuf+0x28>)
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	f013 0f08 	tst.w	r3, #8
 8007fb2:	d105      	bne.n	8007fc0 <HW_IPCC_MM_SendFreeBuf+0x18>
    cb();
 8007fb4:	4780      	blx	r0
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8007fb6:	4b06      	ldr	r3, [pc, #24]	; (8007fd0 <HW_IPCC_MM_SendFreeBuf+0x28>)
 8007fb8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007fbc:	609a      	str	r2, [r3, #8]
}
 8007fbe:	bd08      	pop	{r3, pc}
    FreeBufCb = cb;
 8007fc0:	4b04      	ldr	r3, [pc, #16]	; (8007fd4 <HW_IPCC_MM_SendFreeBuf+0x2c>)
 8007fc2:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8007fc4:	4a02      	ldr	r2, [pc, #8]	; (8007fd0 <HW_IPCC_MM_SendFreeBuf+0x28>)
 8007fc6:	6853      	ldr	r3, [r2, #4]
 8007fc8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007fcc:	6053      	str	r3, [r2, #4]
}
 8007fce:	e7f6      	b.n	8007fbe <HW_IPCC_MM_SendFreeBuf+0x16>
 8007fd0:	58000c00 	.word	0x58000c00
 8007fd4:	20000370 	.word	0x20000370

08007fd8 <HW_IPCC_TRACES_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8007fd8:	4a02      	ldr	r2, [pc, #8]	; (8007fe4 <HW_IPCC_TRACES_Init+0xc>)
 8007fda:	6853      	ldr	r3, [r2, #4]
 8007fdc:	f023 0308 	bic.w	r3, r3, #8
 8007fe0:	6053      	str	r3, [r2, #4]
void HW_IPCC_TRACES_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );

  return;
}
 8007fe2:	4770      	bx	lr
 8007fe4:	58000c00 	.word	0x58000c00

08007fe8 <HW_IPCC_Rx_Handler>:
{
 8007fe8:	b508      	push	{r3, lr}
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8007fea:	4b18      	ldr	r3, [pc, #96]	; (800804c <HW_IPCC_Rx_Handler+0x64>)
 8007fec:	69db      	ldr	r3, [r3, #28]
 8007fee:	f013 0f02 	tst.w	r3, #2
 8007ff2:	d10a      	bne.n	800800a <HW_IPCC_Rx_Handler+0x22>
 8007ff4:	4b15      	ldr	r3, [pc, #84]	; (800804c <HW_IPCC_Rx_Handler+0x64>)
 8007ff6:	69db      	ldr	r3, [r3, #28]
 8007ff8:	f013 0f01 	tst.w	r3, #1
 8007ffc:	d110      	bne.n	8008020 <HW_IPCC_Rx_Handler+0x38>
 8007ffe:	4b13      	ldr	r3, [pc, #76]	; (800804c <HW_IPCC_Rx_Handler+0x64>)
 8008000:	69db      	ldr	r3, [r3, #28]
 8008002:	f013 0f08 	tst.w	r3, #8
 8008006:	d116      	bne.n	8008036 <HW_IPCC_Rx_Handler+0x4e>
}
 8008008:	bd08      	pop	{r3, pc}
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800800a:	4b10      	ldr	r3, [pc, #64]	; (800804c <HW_IPCC_Rx_Handler+0x64>)
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	f013 0f02 	tst.w	r3, #2
 8008012:	d1ef      	bne.n	8007ff4 <HW_IPCC_Rx_Handler+0xc>
  HW_IPCC_SYS_EvtNot();
 8008014:	f7ff f8a0 	bl	8007158 <HW_IPCC_SYS_EvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 8008018:	4b0c      	ldr	r3, [pc, #48]	; (800804c <HW_IPCC_Rx_Handler+0x64>)
 800801a:	2202      	movs	r2, #2
 800801c:	609a      	str	r2, [r3, #8]
  return;
 800801e:	e7f3      	b.n	8008008 <HW_IPCC_Rx_Handler+0x20>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8008020:	4b0a      	ldr	r3, [pc, #40]	; (800804c <HW_IPCC_Rx_Handler+0x64>)
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	f013 0f01 	tst.w	r3, #1
 8008028:	d1e9      	bne.n	8007ffe <HW_IPCC_Rx_Handler+0x16>
  HW_IPCC_BLE_RxEvtNot();
 800802a:	f7ff f83d 	bl	80070a8 <HW_IPCC_BLE_RxEvtNot>
 800802e:	4b07      	ldr	r3, [pc, #28]	; (800804c <HW_IPCC_Rx_Handler+0x64>)
 8008030:	2201      	movs	r2, #1
 8008032:	609a      	str	r2, [r3, #8]
  return;
 8008034:	e7e8      	b.n	8008008 <HW_IPCC_Rx_Handler+0x20>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8008036:	4b05      	ldr	r3, [pc, #20]	; (800804c <HW_IPCC_Rx_Handler+0x64>)
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	f013 0f08 	tst.w	r3, #8
 800803e:	d1e3      	bne.n	8008008 <HW_IPCC_Rx_Handler+0x20>

static void HW_IPCC_TRACES_EvtHandler( void )
{
  HW_IPCC_TRACES_EvtNot();
 8008040:	f7ff f8e0 	bl	8007204 <HW_IPCC_TRACES_EvtNot>
 8008044:	4b01      	ldr	r3, [pc, #4]	; (800804c <HW_IPCC_Rx_Handler+0x64>)
 8008046:	2208      	movs	r2, #8
 8008048:	609a      	str	r2, [r3, #8]
  return;
 800804a:	e7dd      	b.n	8008008 <HW_IPCC_Rx_Handler+0x20>
 800804c:	58000c00 	.word	0x58000c00

08008050 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8008050:	2300      	movs	r3, #0
 8008052:	4a02      	ldr	r2, [pc, #8]	; (800805c <UTIL_LPM_Init+0xc>)
 8008054:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8008056:	4a02      	ldr	r2, [pc, #8]	; (8008060 <UTIL_LPM_Init+0x10>)
 8008058:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800805a:	4770      	bx	lr
 800805c:	20000378 	.word	0x20000378
 8008060:	20000374 	.word	0x20000374

08008064 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008064:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008068:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 800806a:	b141      	cbz	r1, 800807e <UTIL_LPM_SetOffMode+0x1a>
 800806c:	2901      	cmp	r1, #1
 800806e:	d103      	bne.n	8008078 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8008070:	4906      	ldr	r1, [pc, #24]	; (800808c <UTIL_LPM_SetOffMode+0x28>)
 8008072:	680a      	ldr	r2, [r1, #0]
 8008074:	4310      	orrs	r0, r2
 8008076:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008078:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800807c:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 800807e:	4903      	ldr	r1, [pc, #12]	; (800808c <UTIL_LPM_SetOffMode+0x28>)
 8008080:	680a      	ldr	r2, [r1, #0]
 8008082:	ea22 0000 	bic.w	r0, r2, r0
 8008086:	6008      	str	r0, [r1, #0]
      break;
 8008088:	e7f6      	b.n	8008078 <UTIL_LPM_SetOffMode+0x14>
 800808a:	bf00      	nop
 800808c:	20000374 	.word	0x20000374

08008090 <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8008090:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008092:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008096:	b672      	cpsid	i
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 8008098:	4a07      	ldr	r2, [pc, #28]	; (80080b8 <UTIL_SEQ_SetTask+0x28>)
 800809a:	6813      	ldr	r3, [r2, #0]
 800809c:	4303      	orrs	r3, r0
 800809e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80080a0:	4a06      	ldr	r2, [pc, #24]	; (80080bc <UTIL_SEQ_SetTask+0x2c>)
 80080a2:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 80080a6:	4318      	orrs	r0, r3
 80080a8:	f842 0031 	str.w	r0, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080ac:	f384 8810 	msr	PRIMASK, r4

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 80080b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop
 80080b8:	20000418 	.word	0x20000418
 80080bc:	20000408 	.word	0x20000408

080080c0 <UTIL_SEQ_PauseTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080c0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80080c4:	b672      	cpsid	i

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskMask &= (~TaskId_bm);
 80080c6:	4a04      	ldr	r2, [pc, #16]	; (80080d8 <UTIL_SEQ_PauseTask+0x18>)
 80080c8:	6813      	ldr	r3, [r2, #0]
 80080ca:	ea23 0000 	bic.w	r0, r3, r0
 80080ce:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080d0:	f381 8810 	msr	PRIMASK, r1

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	20000028 	.word	0x20000028

080080dc <UTIL_SEQ_ResumeTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080dc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80080e0:	b672      	cpsid	i

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskMask |= TaskId_bm;
 80080e2:	4a03      	ldr	r2, [pc, #12]	; (80080f0 <UTIL_SEQ_ResumeTask+0x14>)
 80080e4:	6813      	ldr	r3, [r2, #0]
 80080e6:	4318      	orrs	r0, r3
 80080e8:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080ea:	f381 8810 	msr	PRIMASK, r1

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 80080ee:	4770      	bx	lr
 80080f0:	20000028 	.word	0x20000028

080080f4 <UTIL_SEQ_SetEvt>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080f4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80080f8:	b672      	cpsid	i

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  EvtSet |= EvtId_bm;
 80080fa:	4a03      	ldr	r2, [pc, #12]	; (8008108 <UTIL_SEQ_SetEvt+0x14>)
 80080fc:	6813      	ldr	r3, [r2, #0]
 80080fe:	4318      	orrs	r0, r3
 8008100:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008102:	f381 8810 	msr	PRIMASK, r1

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8008106:	4770      	bx	lr
 8008108:	20000380 	.word	0x20000380

0800810c <UTIL_SEQ_PreIdle>:
{
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 800810c:	4770      	bx	lr

0800810e <UTIL_SEQ_PostIdle>:
{
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 800810e:	4770      	bx	lr

08008110 <SEQ_BitPosition>:
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  uint8_t n = 0U;

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8008110:	0c03      	lsrs	r3, r0, #16
 8008112:	041b      	lsls	r3, r3, #16
 8008114:	b9ab      	cbnz	r3, 8008142 <SEQ_BitPosition+0x32>
 8008116:	0400      	lsls	r0, r0, #16
 8008118:	2310      	movs	r3, #16
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800811a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800811e:	d102      	bne.n	8008126 <SEQ_BitPosition+0x16>
 8008120:	3308      	adds	r3, #8
 8008122:	b2db      	uxtb	r3, r3
 8008124:	0200      	lsls	r0, r0, #8
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8008126:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800812a:	d102      	bne.n	8008132 <SEQ_BitPosition+0x22>
 800812c:	3304      	adds	r3, #4
 800812e:	b2db      	uxtb	r3, r3
 8008130:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[Value >> (32-4)];

  return (uint8_t)(31U-n);
 8008132:	f1c3 031f 	rsb	r3, r3, #31
  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8008136:	0f00      	lsrs	r0, r0, #28
  return (uint8_t)(31U-n);
 8008138:	4a03      	ldr	r2, [pc, #12]	; (8008148 <SEQ_BitPosition+0x38>)
 800813a:	5c10      	ldrb	r0, [r2, r0]
 800813c:	1a18      	subs	r0, r3, r0
}
 800813e:	b2c0      	uxtb	r0, r0
 8008140:	4770      	bx	lr
  uint8_t n = 0U;
 8008142:	2300      	movs	r3, #0
 8008144:	e7e9      	b.n	800811a <SEQ_BitPosition+0xa>
 8008146:	bf00      	nop
 8008148:	08009fd8 	.word	0x08009fd8

0800814c <UTIL_SEQ_Run>:
{
 800814c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  super_mask_backup = SuperMask;
 8008150:	4b41      	ldr	r3, [pc, #260]	; (8008258 <UTIL_SEQ_Run+0x10c>)
 8008152:	f8d3 8000 	ldr.w	r8, [r3]
  SuperMask &= Mask_bm;
 8008156:	ea08 0400 	and.w	r4, r8, r0
 800815a:	601c      	str	r4, [r3, #0]
  local_taskset = TaskSet;
 800815c:	4b3f      	ldr	r3, [pc, #252]	; (800825c <UTIL_SEQ_Run+0x110>)
 800815e:	681b      	ldr	r3, [r3, #0]
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8008160:	4a3f      	ldr	r2, [pc, #252]	; (8008260 <UTIL_SEQ_Run+0x114>)
 8008162:	6812      	ldr	r2, [r2, #0]
 8008164:	4013      	ands	r3, r2
 8008166:	4223      	tst	r3, r4
 8008168:	d051      	beq.n	800820e <UTIL_SEQ_Run+0xc2>
 800816a:	4f3e      	ldr	r7, [pc, #248]	; (8008264 <UTIL_SEQ_Run+0x118>)
 800816c:	4e3e      	ldr	r6, [pc, #248]	; (8008268 <UTIL_SEQ_Run+0x11c>)
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800816e:	4d3f      	ldr	r5, [pc, #252]	; (800826c <UTIL_SEQ_Run+0x120>)
 8008170:	e030      	b.n	80081d4 <UTIL_SEQ_Run+0x88>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8008172:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 8008176:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800817a:	ea09 0000 	and.w	r0, r9, r0
 800817e:	f7ff ffc7 	bl	8008110 <SEQ_BitPosition>
 8008182:	4a3b      	ldr	r2, [pc, #236]	; (8008270 <UTIL_SEQ_Run+0x124>)
 8008184:	6010      	str	r0, [r2, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8008186:	2301      	movs	r3, #1
 8008188:	fa03 f000 	lsl.w	r0, r3, r0
 800818c:	ea29 0000 	bic.w	r0, r9, r0
 8008190:	6060      	str	r0, [r4, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008192:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008196:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8008198:	6811      	ldr	r1, [r2, #0]
 800819a:	408b      	lsls	r3, r1
 800819c:	4c2f      	ldr	r4, [pc, #188]	; (800825c <UTIL_SEQ_Run+0x110>)
 800819e:	6821      	ldr	r1, [r4, #0]
 80081a0:	ea21 0103 	bic.w	r1, r1, r3
 80081a4:	6021      	str	r1, [r4, #0]
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80081a6:	68a9      	ldr	r1, [r5, #8]
 80081a8:	ea21 0103 	bic.w	r1, r1, r3
 80081ac:	60a9      	str	r1, [r5, #8]
 80081ae:	6829      	ldr	r1, [r5, #0]
 80081b0:	ea21 0303 	bic.w	r3, r1, r3
 80081b4:	602b      	str	r3, [r5, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081b6:	f380 8810 	msr	PRIMASK, r0
    TaskCb[CurrentTaskIdx]( );
 80081ba:	6812      	ldr	r2, [r2, #0]
 80081bc:	4b2d      	ldr	r3, [pc, #180]	; (8008274 <UTIL_SEQ_Run+0x128>)
 80081be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081c2:	4798      	blx	r3
    local_taskset = TaskSet;
 80081c4:	6822      	ldr	r2, [r4, #0]
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80081c6:	4b26      	ldr	r3, [pc, #152]	; (8008260 <UTIL_SEQ_Run+0x114>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4923      	ldr	r1, [pc, #140]	; (8008258 <UTIL_SEQ_Run+0x10c>)
 80081cc:	680c      	ldr	r4, [r1, #0]
 80081ce:	4013      	ands	r3, r2
 80081d0:	4223      	tst	r3, r4
 80081d2:	d01c      	beq.n	800820e <UTIL_SEQ_Run+0xc2>
 80081d4:	683a      	ldr	r2, [r7, #0]
 80081d6:	6833      	ldr	r3, [r6, #0]
 80081d8:	4013      	ands	r3, r2
 80081da:	d118      	bne.n	800820e <UTIL_SEQ_Run+0xc2>
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80081dc:	682a      	ldr	r2, [r5, #0]
 80081de:	4920      	ldr	r1, [pc, #128]	; (8008260 <UTIL_SEQ_Run+0x114>)
 80081e0:	6809      	ldr	r1, [r1, #0]
 80081e2:	4011      	ands	r1, r2
 80081e4:	4221      	tst	r1, r4
 80081e6:	d103      	bne.n	80081f0 <UTIL_SEQ_Run+0xa4>
 80081e8:	68aa      	ldr	r2, [r5, #8]
 80081ea:	4b1d      	ldr	r3, [pc, #116]	; (8008260 <UTIL_SEQ_Run+0x114>)
 80081ec:	681b      	ldr	r3, [r3, #0]
      counter++;
 80081ee:	2301      	movs	r3, #1
    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 80081f0:	491b      	ldr	r1, [pc, #108]	; (8008260 <UTIL_SEQ_Run+0x114>)
 80081f2:	6808      	ldr	r0, [r1, #0]
 80081f4:	4020      	ands	r0, r4
 80081f6:	4010      	ands	r0, r2
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80081f8:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 80081fc:	6852      	ldr	r2, [r2, #4]
 80081fe:	4210      	tst	r0, r2
 8008200:	d1b7      	bne.n	8008172 <UTIL_SEQ_Run+0x26>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8008202:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8008206:	f04f 31ff 	mov.w	r1, #4294967295
 800820a:	6051      	str	r1, [r2, #4]
 800820c:	e7b1      	b.n	8008172 <UTIL_SEQ_Run+0x26>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800820e:	4b18      	ldr	r3, [pc, #96]	; (8008270 <UTIL_SEQ_Run+0x124>)
 8008210:	f04f 32ff 	mov.w	r2, #4294967295
 8008214:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8008216:	f7ff ff79 	bl	800810c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800821a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800821e:	b672      	cpsid	i
  local_taskset = TaskSet;
 8008220:	4b0e      	ldr	r3, [pc, #56]	; (800825c <UTIL_SEQ_Run+0x110>)
 8008222:	681a      	ldr	r2, [r3, #0]
  if (!(((local_taskset & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8008224:	4b0e      	ldr	r3, [pc, #56]	; (8008260 <UTIL_SEQ_Run+0x114>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4013      	ands	r3, r2
 800822a:	4a0b      	ldr	r2, [pc, #44]	; (8008258 <UTIL_SEQ_Run+0x10c>)
 800822c:	6812      	ldr	r2, [r2, #0]
 800822e:	4213      	tst	r3, r2
 8008230:	d105      	bne.n	800823e <UTIL_SEQ_Run+0xf2>
 8008232:	4b0c      	ldr	r3, [pc, #48]	; (8008264 <UTIL_SEQ_Run+0x118>)
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	4b0c      	ldr	r3, [pc, #48]	; (8008268 <UTIL_SEQ_Run+0x11c>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	421a      	tst	r2, r3
 800823c:	d008      	beq.n	8008250 <UTIL_SEQ_Run+0x104>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800823e:	f384 8810 	msr	PRIMASK, r4
  UTIL_SEQ_PostIdle( );
 8008242:	f7ff ff64 	bl	800810e <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8008246:	4b04      	ldr	r3, [pc, #16]	; (8008258 <UTIL_SEQ_Run+0x10c>)
 8008248:	f8c3 8000 	str.w	r8, [r3]
}
 800824c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	UTIL_SEQ_Idle( );
 8008250:	f7f8 fe0a 	bl	8000e68 <UTIL_SEQ_Idle>
 8008254:	e7f3      	b.n	800823e <UTIL_SEQ_Run+0xf2>
 8008256:	bf00      	nop
 8008258:	20000024 	.word	0x20000024
 800825c:	20000418 	.word	0x20000418
 8008260:	20000028 	.word	0x20000028
 8008264:	20000380 	.word	0x20000380
 8008268:	20000384 	.word	0x20000384
 800826c:	20000408 	.word	0x20000408
 8008270:	2000037c 	.word	0x2000037c
 8008274:	20000388 	.word	0x20000388

08008278 <UTIL_SEQ_WaitEvt>:
{
 8008278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800827c:	4601      	mov	r1, r0
  current_task_idx = CurrentTaskIdx;
 800827e:	4b16      	ldr	r3, [pc, #88]	; (80082d8 <UTIL_SEQ_WaitEvt+0x60>)
 8008280:	f8d3 8000 	ldr.w	r8, [r3]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8008284:	f1b8 3fff 	cmp.w	r8, #4294967295
    wait_task_idx = 1 << CurrentTaskIdx;
 8008288:	bf1a      	itte	ne
 800828a:	2401      	movne	r4, #1
 800828c:	fa04 f408 	lslne.w	r4, r4, r8
    wait_task_idx = 0;
 8008290:	2400      	moveq	r4, #0
  event_waited_id_backup = EvtWaited;
 8008292:	4b12      	ldr	r3, [pc, #72]	; (80082dc <UTIL_SEQ_WaitEvt+0x64>)
 8008294:	681f      	ldr	r7, [r3, #0]
  EvtWaited = EvtId_bm;
 8008296:	6018      	str	r0, [r3, #0]
  while ((EvtSet & EvtWaited) == 0U)
 8008298:	4b11      	ldr	r3, [pc, #68]	; (80082e0 <UTIL_SEQ_WaitEvt+0x68>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4218      	tst	r0, r3
 800829e:	d108      	bne.n	80082b2 <UTIL_SEQ_WaitEvt+0x3a>
 80082a0:	4e0f      	ldr	r6, [pc, #60]	; (80082e0 <UTIL_SEQ_WaitEvt+0x68>)
 80082a2:	4d0e      	ldr	r5, [pc, #56]	; (80082dc <UTIL_SEQ_WaitEvt+0x64>)
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 80082a4:	4620      	mov	r0, r4
 80082a6:	f7f8 fde0 	bl	8000e6a <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 80082aa:	6833      	ldr	r3, [r6, #0]
 80082ac:	6829      	ldr	r1, [r5, #0]
 80082ae:	420b      	tst	r3, r1
 80082b0:	d0f8      	beq.n	80082a4 <UTIL_SEQ_WaitEvt+0x2c>
  CurrentTaskIdx = current_task_idx;
 80082b2:	4b09      	ldr	r3, [pc, #36]	; (80082d8 <UTIL_SEQ_WaitEvt+0x60>)
 80082b4:	f8c3 8000 	str.w	r8, [r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082b8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80082bc:	b672      	cpsid	i
  EvtSet &= (~EvtWaited);
 80082be:	4908      	ldr	r1, [pc, #32]	; (80082e0 <UTIL_SEQ_WaitEvt+0x68>)
 80082c0:	680b      	ldr	r3, [r1, #0]
 80082c2:	4a06      	ldr	r2, [pc, #24]	; (80082dc <UTIL_SEQ_WaitEvt+0x64>)
 80082c4:	6814      	ldr	r4, [r2, #0]
 80082c6:	ea23 0304 	bic.w	r3, r3, r4
 80082ca:	600b      	str	r3, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082cc:	f380 8810 	msr	PRIMASK, r0
  EvtWaited = event_waited_id_backup;
 80082d0:	6017      	str	r7, [r2, #0]
}
 80082d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082d6:	bf00      	nop
 80082d8:	2000037c 	.word	0x2000037c
 80082dc:	20000384 	.word	0x20000384
 80082e0:	20000380 	.word	0x20000380

080082e4 <UTIL_SEQ_RegTask>:
{
 80082e4:	b538      	push	{r3, r4, r5, lr}
 80082e6:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082e8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80082ec:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80082ee:	f7ff ff0f 	bl	8008110 <SEQ_BitPosition>
 80082f2:	4b03      	ldr	r3, [pc, #12]	; (8008300 <UTIL_SEQ_RegTask+0x1c>)
 80082f4:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082f8:	f385 8810 	msr	PRIMASK, r5
}
 80082fc:	bd38      	pop	{r3, r4, r5, pc}
 80082fe:	bf00      	nop
 8008300:	20000388 	.word	0x20000388

08008304 <__errno>:
 8008304:	4b01      	ldr	r3, [pc, #4]	; (800830c <__errno+0x8>)
 8008306:	6818      	ldr	r0, [r3, #0]
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	2000002c 	.word	0x2000002c

08008310 <__libc_init_array>:
 8008310:	b570      	push	{r4, r5, r6, lr}
 8008312:	4d0d      	ldr	r5, [pc, #52]	; (8008348 <__libc_init_array+0x38>)
 8008314:	4c0d      	ldr	r4, [pc, #52]	; (800834c <__libc_init_array+0x3c>)
 8008316:	1b64      	subs	r4, r4, r5
 8008318:	10a4      	asrs	r4, r4, #2
 800831a:	2600      	movs	r6, #0
 800831c:	42a6      	cmp	r6, r4
 800831e:	d109      	bne.n	8008334 <__libc_init_array+0x24>
 8008320:	4d0b      	ldr	r5, [pc, #44]	; (8008350 <__libc_init_array+0x40>)
 8008322:	4c0c      	ldr	r4, [pc, #48]	; (8008354 <__libc_init_array+0x44>)
 8008324:	f001 f81a 	bl	800935c <_init>
 8008328:	1b64      	subs	r4, r4, r5
 800832a:	10a4      	asrs	r4, r4, #2
 800832c:	2600      	movs	r6, #0
 800832e:	42a6      	cmp	r6, r4
 8008330:	d105      	bne.n	800833e <__libc_init_array+0x2e>
 8008332:	bd70      	pop	{r4, r5, r6, pc}
 8008334:	f855 3b04 	ldr.w	r3, [r5], #4
 8008338:	4798      	blx	r3
 800833a:	3601      	adds	r6, #1
 800833c:	e7ee      	b.n	800831c <__libc_init_array+0xc>
 800833e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008342:	4798      	blx	r3
 8008344:	3601      	adds	r6, #1
 8008346:	e7f2      	b.n	800832e <__libc_init_array+0x1e>
 8008348:	0800a088 	.word	0x0800a088
 800834c:	0800a088 	.word	0x0800a088
 8008350:	0800a088 	.word	0x0800a088
 8008354:	0800a08c 	.word	0x0800a08c

08008358 <memcpy>:
 8008358:	440a      	add	r2, r1
 800835a:	4291      	cmp	r1, r2
 800835c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008360:	d100      	bne.n	8008364 <memcpy+0xc>
 8008362:	4770      	bx	lr
 8008364:	b510      	push	{r4, lr}
 8008366:	f811 4b01 	ldrb.w	r4, [r1], #1
 800836a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800836e:	4291      	cmp	r1, r2
 8008370:	d1f9      	bne.n	8008366 <memcpy+0xe>
 8008372:	bd10      	pop	{r4, pc}

08008374 <memset>:
 8008374:	4402      	add	r2, r0
 8008376:	4603      	mov	r3, r0
 8008378:	4293      	cmp	r3, r2
 800837a:	d100      	bne.n	800837e <memset+0xa>
 800837c:	4770      	bx	lr
 800837e:	f803 1b01 	strb.w	r1, [r3], #1
 8008382:	e7f9      	b.n	8008378 <memset+0x4>

08008384 <iprintf>:
 8008384:	b40f      	push	{r0, r1, r2, r3}
 8008386:	4b0a      	ldr	r3, [pc, #40]	; (80083b0 <iprintf+0x2c>)
 8008388:	b513      	push	{r0, r1, r4, lr}
 800838a:	681c      	ldr	r4, [r3, #0]
 800838c:	b124      	cbz	r4, 8008398 <iprintf+0x14>
 800838e:	69a3      	ldr	r3, [r4, #24]
 8008390:	b913      	cbnz	r3, 8008398 <iprintf+0x14>
 8008392:	4620      	mov	r0, r4
 8008394:	f000 fa72 	bl	800887c <__sinit>
 8008398:	ab05      	add	r3, sp, #20
 800839a:	9a04      	ldr	r2, [sp, #16]
 800839c:	68a1      	ldr	r1, [r4, #8]
 800839e:	9301      	str	r3, [sp, #4]
 80083a0:	4620      	mov	r0, r4
 80083a2:	f000 fc43 	bl	8008c2c <_vfiprintf_r>
 80083a6:	b002      	add	sp, #8
 80083a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083ac:	b004      	add	sp, #16
 80083ae:	4770      	bx	lr
 80083b0:	2000002c 	.word	0x2000002c

080083b4 <_puts_r>:
 80083b4:	b570      	push	{r4, r5, r6, lr}
 80083b6:	460e      	mov	r6, r1
 80083b8:	4605      	mov	r5, r0
 80083ba:	b118      	cbz	r0, 80083c4 <_puts_r+0x10>
 80083bc:	6983      	ldr	r3, [r0, #24]
 80083be:	b90b      	cbnz	r3, 80083c4 <_puts_r+0x10>
 80083c0:	f000 fa5c 	bl	800887c <__sinit>
 80083c4:	69ab      	ldr	r3, [r5, #24]
 80083c6:	68ac      	ldr	r4, [r5, #8]
 80083c8:	b913      	cbnz	r3, 80083d0 <_puts_r+0x1c>
 80083ca:	4628      	mov	r0, r5
 80083cc:	f000 fa56 	bl	800887c <__sinit>
 80083d0:	4b2c      	ldr	r3, [pc, #176]	; (8008484 <_puts_r+0xd0>)
 80083d2:	429c      	cmp	r4, r3
 80083d4:	d120      	bne.n	8008418 <_puts_r+0x64>
 80083d6:	686c      	ldr	r4, [r5, #4]
 80083d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083da:	07db      	lsls	r3, r3, #31
 80083dc:	d405      	bmi.n	80083ea <_puts_r+0x36>
 80083de:	89a3      	ldrh	r3, [r4, #12]
 80083e0:	0598      	lsls	r0, r3, #22
 80083e2:	d402      	bmi.n	80083ea <_puts_r+0x36>
 80083e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083e6:	f000 fae7 	bl	80089b8 <__retarget_lock_acquire_recursive>
 80083ea:	89a3      	ldrh	r3, [r4, #12]
 80083ec:	0719      	lsls	r1, r3, #28
 80083ee:	d51d      	bpl.n	800842c <_puts_r+0x78>
 80083f0:	6923      	ldr	r3, [r4, #16]
 80083f2:	b1db      	cbz	r3, 800842c <_puts_r+0x78>
 80083f4:	3e01      	subs	r6, #1
 80083f6:	68a3      	ldr	r3, [r4, #8]
 80083f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80083fc:	3b01      	subs	r3, #1
 80083fe:	60a3      	str	r3, [r4, #8]
 8008400:	bb39      	cbnz	r1, 8008452 <_puts_r+0x9e>
 8008402:	2b00      	cmp	r3, #0
 8008404:	da38      	bge.n	8008478 <_puts_r+0xc4>
 8008406:	4622      	mov	r2, r4
 8008408:	210a      	movs	r1, #10
 800840a:	4628      	mov	r0, r5
 800840c:	f000 f85c 	bl	80084c8 <__swbuf_r>
 8008410:	3001      	adds	r0, #1
 8008412:	d011      	beq.n	8008438 <_puts_r+0x84>
 8008414:	250a      	movs	r5, #10
 8008416:	e011      	b.n	800843c <_puts_r+0x88>
 8008418:	4b1b      	ldr	r3, [pc, #108]	; (8008488 <_puts_r+0xd4>)
 800841a:	429c      	cmp	r4, r3
 800841c:	d101      	bne.n	8008422 <_puts_r+0x6e>
 800841e:	68ac      	ldr	r4, [r5, #8]
 8008420:	e7da      	b.n	80083d8 <_puts_r+0x24>
 8008422:	4b1a      	ldr	r3, [pc, #104]	; (800848c <_puts_r+0xd8>)
 8008424:	429c      	cmp	r4, r3
 8008426:	bf08      	it	eq
 8008428:	68ec      	ldreq	r4, [r5, #12]
 800842a:	e7d5      	b.n	80083d8 <_puts_r+0x24>
 800842c:	4621      	mov	r1, r4
 800842e:	4628      	mov	r0, r5
 8008430:	f000 f89c 	bl	800856c <__swsetup_r>
 8008434:	2800      	cmp	r0, #0
 8008436:	d0dd      	beq.n	80083f4 <_puts_r+0x40>
 8008438:	f04f 35ff 	mov.w	r5, #4294967295
 800843c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800843e:	07da      	lsls	r2, r3, #31
 8008440:	d405      	bmi.n	800844e <_puts_r+0x9a>
 8008442:	89a3      	ldrh	r3, [r4, #12]
 8008444:	059b      	lsls	r3, r3, #22
 8008446:	d402      	bmi.n	800844e <_puts_r+0x9a>
 8008448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800844a:	f000 fab6 	bl	80089ba <__retarget_lock_release_recursive>
 800844e:	4628      	mov	r0, r5
 8008450:	bd70      	pop	{r4, r5, r6, pc}
 8008452:	2b00      	cmp	r3, #0
 8008454:	da04      	bge.n	8008460 <_puts_r+0xac>
 8008456:	69a2      	ldr	r2, [r4, #24]
 8008458:	429a      	cmp	r2, r3
 800845a:	dc06      	bgt.n	800846a <_puts_r+0xb6>
 800845c:	290a      	cmp	r1, #10
 800845e:	d004      	beq.n	800846a <_puts_r+0xb6>
 8008460:	6823      	ldr	r3, [r4, #0]
 8008462:	1c5a      	adds	r2, r3, #1
 8008464:	6022      	str	r2, [r4, #0]
 8008466:	7019      	strb	r1, [r3, #0]
 8008468:	e7c5      	b.n	80083f6 <_puts_r+0x42>
 800846a:	4622      	mov	r2, r4
 800846c:	4628      	mov	r0, r5
 800846e:	f000 f82b 	bl	80084c8 <__swbuf_r>
 8008472:	3001      	adds	r0, #1
 8008474:	d1bf      	bne.n	80083f6 <_puts_r+0x42>
 8008476:	e7df      	b.n	8008438 <_puts_r+0x84>
 8008478:	6823      	ldr	r3, [r4, #0]
 800847a:	250a      	movs	r5, #10
 800847c:	1c5a      	adds	r2, r3, #1
 800847e:	6022      	str	r2, [r4, #0]
 8008480:	701d      	strb	r5, [r3, #0]
 8008482:	e7db      	b.n	800843c <_puts_r+0x88>
 8008484:	0800a00c 	.word	0x0800a00c
 8008488:	0800a02c 	.word	0x0800a02c
 800848c:	08009fec 	.word	0x08009fec

08008490 <puts>:
 8008490:	4b02      	ldr	r3, [pc, #8]	; (800849c <puts+0xc>)
 8008492:	4601      	mov	r1, r0
 8008494:	6818      	ldr	r0, [r3, #0]
 8008496:	f7ff bf8d 	b.w	80083b4 <_puts_r>
 800849a:	bf00      	nop
 800849c:	2000002c 	.word	0x2000002c

080084a0 <strrchr>:
 80084a0:	b538      	push	{r3, r4, r5, lr}
 80084a2:	4603      	mov	r3, r0
 80084a4:	460c      	mov	r4, r1
 80084a6:	b969      	cbnz	r1, 80084c4 <strrchr+0x24>
 80084a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084ac:	f000 bed5 	b.w	800925a <strchr>
 80084b0:	1c43      	adds	r3, r0, #1
 80084b2:	4605      	mov	r5, r0
 80084b4:	4621      	mov	r1, r4
 80084b6:	4618      	mov	r0, r3
 80084b8:	f000 fecf 	bl	800925a <strchr>
 80084bc:	2800      	cmp	r0, #0
 80084be:	d1f7      	bne.n	80084b0 <strrchr+0x10>
 80084c0:	4628      	mov	r0, r5
 80084c2:	bd38      	pop	{r3, r4, r5, pc}
 80084c4:	2500      	movs	r5, #0
 80084c6:	e7f5      	b.n	80084b4 <strrchr+0x14>

080084c8 <__swbuf_r>:
 80084c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ca:	460e      	mov	r6, r1
 80084cc:	4614      	mov	r4, r2
 80084ce:	4605      	mov	r5, r0
 80084d0:	b118      	cbz	r0, 80084da <__swbuf_r+0x12>
 80084d2:	6983      	ldr	r3, [r0, #24]
 80084d4:	b90b      	cbnz	r3, 80084da <__swbuf_r+0x12>
 80084d6:	f000 f9d1 	bl	800887c <__sinit>
 80084da:	4b21      	ldr	r3, [pc, #132]	; (8008560 <__swbuf_r+0x98>)
 80084dc:	429c      	cmp	r4, r3
 80084de:	d12b      	bne.n	8008538 <__swbuf_r+0x70>
 80084e0:	686c      	ldr	r4, [r5, #4]
 80084e2:	69a3      	ldr	r3, [r4, #24]
 80084e4:	60a3      	str	r3, [r4, #8]
 80084e6:	89a3      	ldrh	r3, [r4, #12]
 80084e8:	071a      	lsls	r2, r3, #28
 80084ea:	d52f      	bpl.n	800854c <__swbuf_r+0x84>
 80084ec:	6923      	ldr	r3, [r4, #16]
 80084ee:	b36b      	cbz	r3, 800854c <__swbuf_r+0x84>
 80084f0:	6923      	ldr	r3, [r4, #16]
 80084f2:	6820      	ldr	r0, [r4, #0]
 80084f4:	1ac0      	subs	r0, r0, r3
 80084f6:	6963      	ldr	r3, [r4, #20]
 80084f8:	b2f6      	uxtb	r6, r6
 80084fa:	4283      	cmp	r3, r0
 80084fc:	4637      	mov	r7, r6
 80084fe:	dc04      	bgt.n	800850a <__swbuf_r+0x42>
 8008500:	4621      	mov	r1, r4
 8008502:	4628      	mov	r0, r5
 8008504:	f000 f926 	bl	8008754 <_fflush_r>
 8008508:	bb30      	cbnz	r0, 8008558 <__swbuf_r+0x90>
 800850a:	68a3      	ldr	r3, [r4, #8]
 800850c:	3b01      	subs	r3, #1
 800850e:	60a3      	str	r3, [r4, #8]
 8008510:	6823      	ldr	r3, [r4, #0]
 8008512:	1c5a      	adds	r2, r3, #1
 8008514:	6022      	str	r2, [r4, #0]
 8008516:	701e      	strb	r6, [r3, #0]
 8008518:	6963      	ldr	r3, [r4, #20]
 800851a:	3001      	adds	r0, #1
 800851c:	4283      	cmp	r3, r0
 800851e:	d004      	beq.n	800852a <__swbuf_r+0x62>
 8008520:	89a3      	ldrh	r3, [r4, #12]
 8008522:	07db      	lsls	r3, r3, #31
 8008524:	d506      	bpl.n	8008534 <__swbuf_r+0x6c>
 8008526:	2e0a      	cmp	r6, #10
 8008528:	d104      	bne.n	8008534 <__swbuf_r+0x6c>
 800852a:	4621      	mov	r1, r4
 800852c:	4628      	mov	r0, r5
 800852e:	f000 f911 	bl	8008754 <_fflush_r>
 8008532:	b988      	cbnz	r0, 8008558 <__swbuf_r+0x90>
 8008534:	4638      	mov	r0, r7
 8008536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008538:	4b0a      	ldr	r3, [pc, #40]	; (8008564 <__swbuf_r+0x9c>)
 800853a:	429c      	cmp	r4, r3
 800853c:	d101      	bne.n	8008542 <__swbuf_r+0x7a>
 800853e:	68ac      	ldr	r4, [r5, #8]
 8008540:	e7cf      	b.n	80084e2 <__swbuf_r+0x1a>
 8008542:	4b09      	ldr	r3, [pc, #36]	; (8008568 <__swbuf_r+0xa0>)
 8008544:	429c      	cmp	r4, r3
 8008546:	bf08      	it	eq
 8008548:	68ec      	ldreq	r4, [r5, #12]
 800854a:	e7ca      	b.n	80084e2 <__swbuf_r+0x1a>
 800854c:	4621      	mov	r1, r4
 800854e:	4628      	mov	r0, r5
 8008550:	f000 f80c 	bl	800856c <__swsetup_r>
 8008554:	2800      	cmp	r0, #0
 8008556:	d0cb      	beq.n	80084f0 <__swbuf_r+0x28>
 8008558:	f04f 37ff 	mov.w	r7, #4294967295
 800855c:	e7ea      	b.n	8008534 <__swbuf_r+0x6c>
 800855e:	bf00      	nop
 8008560:	0800a00c 	.word	0x0800a00c
 8008564:	0800a02c 	.word	0x0800a02c
 8008568:	08009fec 	.word	0x08009fec

0800856c <__swsetup_r>:
 800856c:	4b32      	ldr	r3, [pc, #200]	; (8008638 <__swsetup_r+0xcc>)
 800856e:	b570      	push	{r4, r5, r6, lr}
 8008570:	681d      	ldr	r5, [r3, #0]
 8008572:	4606      	mov	r6, r0
 8008574:	460c      	mov	r4, r1
 8008576:	b125      	cbz	r5, 8008582 <__swsetup_r+0x16>
 8008578:	69ab      	ldr	r3, [r5, #24]
 800857a:	b913      	cbnz	r3, 8008582 <__swsetup_r+0x16>
 800857c:	4628      	mov	r0, r5
 800857e:	f000 f97d 	bl	800887c <__sinit>
 8008582:	4b2e      	ldr	r3, [pc, #184]	; (800863c <__swsetup_r+0xd0>)
 8008584:	429c      	cmp	r4, r3
 8008586:	d10f      	bne.n	80085a8 <__swsetup_r+0x3c>
 8008588:	686c      	ldr	r4, [r5, #4]
 800858a:	89a3      	ldrh	r3, [r4, #12]
 800858c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008590:	0719      	lsls	r1, r3, #28
 8008592:	d42c      	bmi.n	80085ee <__swsetup_r+0x82>
 8008594:	06dd      	lsls	r5, r3, #27
 8008596:	d411      	bmi.n	80085bc <__swsetup_r+0x50>
 8008598:	2309      	movs	r3, #9
 800859a:	6033      	str	r3, [r6, #0]
 800859c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80085a0:	81a3      	strh	r3, [r4, #12]
 80085a2:	f04f 30ff 	mov.w	r0, #4294967295
 80085a6:	e03e      	b.n	8008626 <__swsetup_r+0xba>
 80085a8:	4b25      	ldr	r3, [pc, #148]	; (8008640 <__swsetup_r+0xd4>)
 80085aa:	429c      	cmp	r4, r3
 80085ac:	d101      	bne.n	80085b2 <__swsetup_r+0x46>
 80085ae:	68ac      	ldr	r4, [r5, #8]
 80085b0:	e7eb      	b.n	800858a <__swsetup_r+0x1e>
 80085b2:	4b24      	ldr	r3, [pc, #144]	; (8008644 <__swsetup_r+0xd8>)
 80085b4:	429c      	cmp	r4, r3
 80085b6:	bf08      	it	eq
 80085b8:	68ec      	ldreq	r4, [r5, #12]
 80085ba:	e7e6      	b.n	800858a <__swsetup_r+0x1e>
 80085bc:	0758      	lsls	r0, r3, #29
 80085be:	d512      	bpl.n	80085e6 <__swsetup_r+0x7a>
 80085c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085c2:	b141      	cbz	r1, 80085d6 <__swsetup_r+0x6a>
 80085c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085c8:	4299      	cmp	r1, r3
 80085ca:	d002      	beq.n	80085d2 <__swsetup_r+0x66>
 80085cc:	4630      	mov	r0, r6
 80085ce:	f000 fa59 	bl	8008a84 <_free_r>
 80085d2:	2300      	movs	r3, #0
 80085d4:	6363      	str	r3, [r4, #52]	; 0x34
 80085d6:	89a3      	ldrh	r3, [r4, #12]
 80085d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80085dc:	81a3      	strh	r3, [r4, #12]
 80085de:	2300      	movs	r3, #0
 80085e0:	6063      	str	r3, [r4, #4]
 80085e2:	6923      	ldr	r3, [r4, #16]
 80085e4:	6023      	str	r3, [r4, #0]
 80085e6:	89a3      	ldrh	r3, [r4, #12]
 80085e8:	f043 0308 	orr.w	r3, r3, #8
 80085ec:	81a3      	strh	r3, [r4, #12]
 80085ee:	6923      	ldr	r3, [r4, #16]
 80085f0:	b94b      	cbnz	r3, 8008606 <__swsetup_r+0x9a>
 80085f2:	89a3      	ldrh	r3, [r4, #12]
 80085f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80085f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085fc:	d003      	beq.n	8008606 <__swsetup_r+0x9a>
 80085fe:	4621      	mov	r1, r4
 8008600:	4630      	mov	r0, r6
 8008602:	f000 f9ff 	bl	8008a04 <__smakebuf_r>
 8008606:	89a0      	ldrh	r0, [r4, #12]
 8008608:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800860c:	f010 0301 	ands.w	r3, r0, #1
 8008610:	d00a      	beq.n	8008628 <__swsetup_r+0xbc>
 8008612:	2300      	movs	r3, #0
 8008614:	60a3      	str	r3, [r4, #8]
 8008616:	6963      	ldr	r3, [r4, #20]
 8008618:	425b      	negs	r3, r3
 800861a:	61a3      	str	r3, [r4, #24]
 800861c:	6923      	ldr	r3, [r4, #16]
 800861e:	b943      	cbnz	r3, 8008632 <__swsetup_r+0xc6>
 8008620:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008624:	d1ba      	bne.n	800859c <__swsetup_r+0x30>
 8008626:	bd70      	pop	{r4, r5, r6, pc}
 8008628:	0781      	lsls	r1, r0, #30
 800862a:	bf58      	it	pl
 800862c:	6963      	ldrpl	r3, [r4, #20]
 800862e:	60a3      	str	r3, [r4, #8]
 8008630:	e7f4      	b.n	800861c <__swsetup_r+0xb0>
 8008632:	2000      	movs	r0, #0
 8008634:	e7f7      	b.n	8008626 <__swsetup_r+0xba>
 8008636:	bf00      	nop
 8008638:	2000002c 	.word	0x2000002c
 800863c:	0800a00c 	.word	0x0800a00c
 8008640:	0800a02c 	.word	0x0800a02c
 8008644:	08009fec 	.word	0x08009fec

08008648 <__sflush_r>:
 8008648:	898a      	ldrh	r2, [r1, #12]
 800864a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800864e:	4605      	mov	r5, r0
 8008650:	0710      	lsls	r0, r2, #28
 8008652:	460c      	mov	r4, r1
 8008654:	d458      	bmi.n	8008708 <__sflush_r+0xc0>
 8008656:	684b      	ldr	r3, [r1, #4]
 8008658:	2b00      	cmp	r3, #0
 800865a:	dc05      	bgt.n	8008668 <__sflush_r+0x20>
 800865c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800865e:	2b00      	cmp	r3, #0
 8008660:	dc02      	bgt.n	8008668 <__sflush_r+0x20>
 8008662:	2000      	movs	r0, #0
 8008664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008668:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800866a:	2e00      	cmp	r6, #0
 800866c:	d0f9      	beq.n	8008662 <__sflush_r+0x1a>
 800866e:	2300      	movs	r3, #0
 8008670:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008674:	682f      	ldr	r7, [r5, #0]
 8008676:	602b      	str	r3, [r5, #0]
 8008678:	d032      	beq.n	80086e0 <__sflush_r+0x98>
 800867a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800867c:	89a3      	ldrh	r3, [r4, #12]
 800867e:	075a      	lsls	r2, r3, #29
 8008680:	d505      	bpl.n	800868e <__sflush_r+0x46>
 8008682:	6863      	ldr	r3, [r4, #4]
 8008684:	1ac0      	subs	r0, r0, r3
 8008686:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008688:	b10b      	cbz	r3, 800868e <__sflush_r+0x46>
 800868a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800868c:	1ac0      	subs	r0, r0, r3
 800868e:	2300      	movs	r3, #0
 8008690:	4602      	mov	r2, r0
 8008692:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008694:	6a21      	ldr	r1, [r4, #32]
 8008696:	4628      	mov	r0, r5
 8008698:	47b0      	blx	r6
 800869a:	1c43      	adds	r3, r0, #1
 800869c:	89a3      	ldrh	r3, [r4, #12]
 800869e:	d106      	bne.n	80086ae <__sflush_r+0x66>
 80086a0:	6829      	ldr	r1, [r5, #0]
 80086a2:	291d      	cmp	r1, #29
 80086a4:	d82c      	bhi.n	8008700 <__sflush_r+0xb8>
 80086a6:	4a2a      	ldr	r2, [pc, #168]	; (8008750 <__sflush_r+0x108>)
 80086a8:	40ca      	lsrs	r2, r1
 80086aa:	07d6      	lsls	r6, r2, #31
 80086ac:	d528      	bpl.n	8008700 <__sflush_r+0xb8>
 80086ae:	2200      	movs	r2, #0
 80086b0:	6062      	str	r2, [r4, #4]
 80086b2:	04d9      	lsls	r1, r3, #19
 80086b4:	6922      	ldr	r2, [r4, #16]
 80086b6:	6022      	str	r2, [r4, #0]
 80086b8:	d504      	bpl.n	80086c4 <__sflush_r+0x7c>
 80086ba:	1c42      	adds	r2, r0, #1
 80086bc:	d101      	bne.n	80086c2 <__sflush_r+0x7a>
 80086be:	682b      	ldr	r3, [r5, #0]
 80086c0:	b903      	cbnz	r3, 80086c4 <__sflush_r+0x7c>
 80086c2:	6560      	str	r0, [r4, #84]	; 0x54
 80086c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086c6:	602f      	str	r7, [r5, #0]
 80086c8:	2900      	cmp	r1, #0
 80086ca:	d0ca      	beq.n	8008662 <__sflush_r+0x1a>
 80086cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086d0:	4299      	cmp	r1, r3
 80086d2:	d002      	beq.n	80086da <__sflush_r+0x92>
 80086d4:	4628      	mov	r0, r5
 80086d6:	f000 f9d5 	bl	8008a84 <_free_r>
 80086da:	2000      	movs	r0, #0
 80086dc:	6360      	str	r0, [r4, #52]	; 0x34
 80086de:	e7c1      	b.n	8008664 <__sflush_r+0x1c>
 80086e0:	6a21      	ldr	r1, [r4, #32]
 80086e2:	2301      	movs	r3, #1
 80086e4:	4628      	mov	r0, r5
 80086e6:	47b0      	blx	r6
 80086e8:	1c41      	adds	r1, r0, #1
 80086ea:	d1c7      	bne.n	800867c <__sflush_r+0x34>
 80086ec:	682b      	ldr	r3, [r5, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d0c4      	beq.n	800867c <__sflush_r+0x34>
 80086f2:	2b1d      	cmp	r3, #29
 80086f4:	d001      	beq.n	80086fa <__sflush_r+0xb2>
 80086f6:	2b16      	cmp	r3, #22
 80086f8:	d101      	bne.n	80086fe <__sflush_r+0xb6>
 80086fa:	602f      	str	r7, [r5, #0]
 80086fc:	e7b1      	b.n	8008662 <__sflush_r+0x1a>
 80086fe:	89a3      	ldrh	r3, [r4, #12]
 8008700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008704:	81a3      	strh	r3, [r4, #12]
 8008706:	e7ad      	b.n	8008664 <__sflush_r+0x1c>
 8008708:	690f      	ldr	r7, [r1, #16]
 800870a:	2f00      	cmp	r7, #0
 800870c:	d0a9      	beq.n	8008662 <__sflush_r+0x1a>
 800870e:	0793      	lsls	r3, r2, #30
 8008710:	680e      	ldr	r6, [r1, #0]
 8008712:	bf08      	it	eq
 8008714:	694b      	ldreq	r3, [r1, #20]
 8008716:	600f      	str	r7, [r1, #0]
 8008718:	bf18      	it	ne
 800871a:	2300      	movne	r3, #0
 800871c:	eba6 0807 	sub.w	r8, r6, r7
 8008720:	608b      	str	r3, [r1, #8]
 8008722:	f1b8 0f00 	cmp.w	r8, #0
 8008726:	dd9c      	ble.n	8008662 <__sflush_r+0x1a>
 8008728:	6a21      	ldr	r1, [r4, #32]
 800872a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800872c:	4643      	mov	r3, r8
 800872e:	463a      	mov	r2, r7
 8008730:	4628      	mov	r0, r5
 8008732:	47b0      	blx	r6
 8008734:	2800      	cmp	r0, #0
 8008736:	dc06      	bgt.n	8008746 <__sflush_r+0xfe>
 8008738:	89a3      	ldrh	r3, [r4, #12]
 800873a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800873e:	81a3      	strh	r3, [r4, #12]
 8008740:	f04f 30ff 	mov.w	r0, #4294967295
 8008744:	e78e      	b.n	8008664 <__sflush_r+0x1c>
 8008746:	4407      	add	r7, r0
 8008748:	eba8 0800 	sub.w	r8, r8, r0
 800874c:	e7e9      	b.n	8008722 <__sflush_r+0xda>
 800874e:	bf00      	nop
 8008750:	20400001 	.word	0x20400001

08008754 <_fflush_r>:
 8008754:	b538      	push	{r3, r4, r5, lr}
 8008756:	690b      	ldr	r3, [r1, #16]
 8008758:	4605      	mov	r5, r0
 800875a:	460c      	mov	r4, r1
 800875c:	b913      	cbnz	r3, 8008764 <_fflush_r+0x10>
 800875e:	2500      	movs	r5, #0
 8008760:	4628      	mov	r0, r5
 8008762:	bd38      	pop	{r3, r4, r5, pc}
 8008764:	b118      	cbz	r0, 800876e <_fflush_r+0x1a>
 8008766:	6983      	ldr	r3, [r0, #24]
 8008768:	b90b      	cbnz	r3, 800876e <_fflush_r+0x1a>
 800876a:	f000 f887 	bl	800887c <__sinit>
 800876e:	4b14      	ldr	r3, [pc, #80]	; (80087c0 <_fflush_r+0x6c>)
 8008770:	429c      	cmp	r4, r3
 8008772:	d11b      	bne.n	80087ac <_fflush_r+0x58>
 8008774:	686c      	ldr	r4, [r5, #4]
 8008776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d0ef      	beq.n	800875e <_fflush_r+0xa>
 800877e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008780:	07d0      	lsls	r0, r2, #31
 8008782:	d404      	bmi.n	800878e <_fflush_r+0x3a>
 8008784:	0599      	lsls	r1, r3, #22
 8008786:	d402      	bmi.n	800878e <_fflush_r+0x3a>
 8008788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800878a:	f000 f915 	bl	80089b8 <__retarget_lock_acquire_recursive>
 800878e:	4628      	mov	r0, r5
 8008790:	4621      	mov	r1, r4
 8008792:	f7ff ff59 	bl	8008648 <__sflush_r>
 8008796:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008798:	07da      	lsls	r2, r3, #31
 800879a:	4605      	mov	r5, r0
 800879c:	d4e0      	bmi.n	8008760 <_fflush_r+0xc>
 800879e:	89a3      	ldrh	r3, [r4, #12]
 80087a0:	059b      	lsls	r3, r3, #22
 80087a2:	d4dd      	bmi.n	8008760 <_fflush_r+0xc>
 80087a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087a6:	f000 f908 	bl	80089ba <__retarget_lock_release_recursive>
 80087aa:	e7d9      	b.n	8008760 <_fflush_r+0xc>
 80087ac:	4b05      	ldr	r3, [pc, #20]	; (80087c4 <_fflush_r+0x70>)
 80087ae:	429c      	cmp	r4, r3
 80087b0:	d101      	bne.n	80087b6 <_fflush_r+0x62>
 80087b2:	68ac      	ldr	r4, [r5, #8]
 80087b4:	e7df      	b.n	8008776 <_fflush_r+0x22>
 80087b6:	4b04      	ldr	r3, [pc, #16]	; (80087c8 <_fflush_r+0x74>)
 80087b8:	429c      	cmp	r4, r3
 80087ba:	bf08      	it	eq
 80087bc:	68ec      	ldreq	r4, [r5, #12]
 80087be:	e7da      	b.n	8008776 <_fflush_r+0x22>
 80087c0:	0800a00c 	.word	0x0800a00c
 80087c4:	0800a02c 	.word	0x0800a02c
 80087c8:	08009fec 	.word	0x08009fec

080087cc <std>:
 80087cc:	2300      	movs	r3, #0
 80087ce:	b510      	push	{r4, lr}
 80087d0:	4604      	mov	r4, r0
 80087d2:	e9c0 3300 	strd	r3, r3, [r0]
 80087d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087da:	6083      	str	r3, [r0, #8]
 80087dc:	8181      	strh	r1, [r0, #12]
 80087de:	6643      	str	r3, [r0, #100]	; 0x64
 80087e0:	81c2      	strh	r2, [r0, #14]
 80087e2:	6183      	str	r3, [r0, #24]
 80087e4:	4619      	mov	r1, r3
 80087e6:	2208      	movs	r2, #8
 80087e8:	305c      	adds	r0, #92	; 0x5c
 80087ea:	f7ff fdc3 	bl	8008374 <memset>
 80087ee:	4b05      	ldr	r3, [pc, #20]	; (8008804 <std+0x38>)
 80087f0:	6263      	str	r3, [r4, #36]	; 0x24
 80087f2:	4b05      	ldr	r3, [pc, #20]	; (8008808 <std+0x3c>)
 80087f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80087f6:	4b05      	ldr	r3, [pc, #20]	; (800880c <std+0x40>)
 80087f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80087fa:	4b05      	ldr	r3, [pc, #20]	; (8008810 <std+0x44>)
 80087fc:	6224      	str	r4, [r4, #32]
 80087fe:	6323      	str	r3, [r4, #48]	; 0x30
 8008800:	bd10      	pop	{r4, pc}
 8008802:	bf00      	nop
 8008804:	080091d5 	.word	0x080091d5
 8008808:	080091f7 	.word	0x080091f7
 800880c:	0800922f 	.word	0x0800922f
 8008810:	08009253 	.word	0x08009253

08008814 <_cleanup_r>:
 8008814:	4901      	ldr	r1, [pc, #4]	; (800881c <_cleanup_r+0x8>)
 8008816:	f000 b8af 	b.w	8008978 <_fwalk_reent>
 800881a:	bf00      	nop
 800881c:	08008755 	.word	0x08008755

08008820 <__sfmoreglue>:
 8008820:	b570      	push	{r4, r5, r6, lr}
 8008822:	1e4a      	subs	r2, r1, #1
 8008824:	2568      	movs	r5, #104	; 0x68
 8008826:	4355      	muls	r5, r2
 8008828:	460e      	mov	r6, r1
 800882a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800882e:	f000 f979 	bl	8008b24 <_malloc_r>
 8008832:	4604      	mov	r4, r0
 8008834:	b140      	cbz	r0, 8008848 <__sfmoreglue+0x28>
 8008836:	2100      	movs	r1, #0
 8008838:	e9c0 1600 	strd	r1, r6, [r0]
 800883c:	300c      	adds	r0, #12
 800883e:	60a0      	str	r0, [r4, #8]
 8008840:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008844:	f7ff fd96 	bl	8008374 <memset>
 8008848:	4620      	mov	r0, r4
 800884a:	bd70      	pop	{r4, r5, r6, pc}

0800884c <__sfp_lock_acquire>:
 800884c:	4801      	ldr	r0, [pc, #4]	; (8008854 <__sfp_lock_acquire+0x8>)
 800884e:	f000 b8b3 	b.w	80089b8 <__retarget_lock_acquire_recursive>
 8008852:	bf00      	nop
 8008854:	20000664 	.word	0x20000664

08008858 <__sfp_lock_release>:
 8008858:	4801      	ldr	r0, [pc, #4]	; (8008860 <__sfp_lock_release+0x8>)
 800885a:	f000 b8ae 	b.w	80089ba <__retarget_lock_release_recursive>
 800885e:	bf00      	nop
 8008860:	20000664 	.word	0x20000664

08008864 <__sinit_lock_acquire>:
 8008864:	4801      	ldr	r0, [pc, #4]	; (800886c <__sinit_lock_acquire+0x8>)
 8008866:	f000 b8a7 	b.w	80089b8 <__retarget_lock_acquire_recursive>
 800886a:	bf00      	nop
 800886c:	2000065f 	.word	0x2000065f

08008870 <__sinit_lock_release>:
 8008870:	4801      	ldr	r0, [pc, #4]	; (8008878 <__sinit_lock_release+0x8>)
 8008872:	f000 b8a2 	b.w	80089ba <__retarget_lock_release_recursive>
 8008876:	bf00      	nop
 8008878:	2000065f 	.word	0x2000065f

0800887c <__sinit>:
 800887c:	b510      	push	{r4, lr}
 800887e:	4604      	mov	r4, r0
 8008880:	f7ff fff0 	bl	8008864 <__sinit_lock_acquire>
 8008884:	69a3      	ldr	r3, [r4, #24]
 8008886:	b11b      	cbz	r3, 8008890 <__sinit+0x14>
 8008888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800888c:	f7ff bff0 	b.w	8008870 <__sinit_lock_release>
 8008890:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008894:	6523      	str	r3, [r4, #80]	; 0x50
 8008896:	4b13      	ldr	r3, [pc, #76]	; (80088e4 <__sinit+0x68>)
 8008898:	4a13      	ldr	r2, [pc, #76]	; (80088e8 <__sinit+0x6c>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	62a2      	str	r2, [r4, #40]	; 0x28
 800889e:	42a3      	cmp	r3, r4
 80088a0:	bf04      	itt	eq
 80088a2:	2301      	moveq	r3, #1
 80088a4:	61a3      	streq	r3, [r4, #24]
 80088a6:	4620      	mov	r0, r4
 80088a8:	f000 f820 	bl	80088ec <__sfp>
 80088ac:	6060      	str	r0, [r4, #4]
 80088ae:	4620      	mov	r0, r4
 80088b0:	f000 f81c 	bl	80088ec <__sfp>
 80088b4:	60a0      	str	r0, [r4, #8]
 80088b6:	4620      	mov	r0, r4
 80088b8:	f000 f818 	bl	80088ec <__sfp>
 80088bc:	2200      	movs	r2, #0
 80088be:	60e0      	str	r0, [r4, #12]
 80088c0:	2104      	movs	r1, #4
 80088c2:	6860      	ldr	r0, [r4, #4]
 80088c4:	f7ff ff82 	bl	80087cc <std>
 80088c8:	68a0      	ldr	r0, [r4, #8]
 80088ca:	2201      	movs	r2, #1
 80088cc:	2109      	movs	r1, #9
 80088ce:	f7ff ff7d 	bl	80087cc <std>
 80088d2:	68e0      	ldr	r0, [r4, #12]
 80088d4:	2202      	movs	r2, #2
 80088d6:	2112      	movs	r1, #18
 80088d8:	f7ff ff78 	bl	80087cc <std>
 80088dc:	2301      	movs	r3, #1
 80088de:	61a3      	str	r3, [r4, #24]
 80088e0:	e7d2      	b.n	8008888 <__sinit+0xc>
 80088e2:	bf00      	nop
 80088e4:	08009fe8 	.word	0x08009fe8
 80088e8:	08008815 	.word	0x08008815

080088ec <__sfp>:
 80088ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ee:	4607      	mov	r7, r0
 80088f0:	f7ff ffac 	bl	800884c <__sfp_lock_acquire>
 80088f4:	4b1e      	ldr	r3, [pc, #120]	; (8008970 <__sfp+0x84>)
 80088f6:	681e      	ldr	r6, [r3, #0]
 80088f8:	69b3      	ldr	r3, [r6, #24]
 80088fa:	b913      	cbnz	r3, 8008902 <__sfp+0x16>
 80088fc:	4630      	mov	r0, r6
 80088fe:	f7ff ffbd 	bl	800887c <__sinit>
 8008902:	3648      	adds	r6, #72	; 0x48
 8008904:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008908:	3b01      	subs	r3, #1
 800890a:	d503      	bpl.n	8008914 <__sfp+0x28>
 800890c:	6833      	ldr	r3, [r6, #0]
 800890e:	b30b      	cbz	r3, 8008954 <__sfp+0x68>
 8008910:	6836      	ldr	r6, [r6, #0]
 8008912:	e7f7      	b.n	8008904 <__sfp+0x18>
 8008914:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008918:	b9d5      	cbnz	r5, 8008950 <__sfp+0x64>
 800891a:	4b16      	ldr	r3, [pc, #88]	; (8008974 <__sfp+0x88>)
 800891c:	60e3      	str	r3, [r4, #12]
 800891e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008922:	6665      	str	r5, [r4, #100]	; 0x64
 8008924:	f000 f847 	bl	80089b6 <__retarget_lock_init_recursive>
 8008928:	f7ff ff96 	bl	8008858 <__sfp_lock_release>
 800892c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008930:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008934:	6025      	str	r5, [r4, #0]
 8008936:	61a5      	str	r5, [r4, #24]
 8008938:	2208      	movs	r2, #8
 800893a:	4629      	mov	r1, r5
 800893c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008940:	f7ff fd18 	bl	8008374 <memset>
 8008944:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008948:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800894c:	4620      	mov	r0, r4
 800894e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008950:	3468      	adds	r4, #104	; 0x68
 8008952:	e7d9      	b.n	8008908 <__sfp+0x1c>
 8008954:	2104      	movs	r1, #4
 8008956:	4638      	mov	r0, r7
 8008958:	f7ff ff62 	bl	8008820 <__sfmoreglue>
 800895c:	4604      	mov	r4, r0
 800895e:	6030      	str	r0, [r6, #0]
 8008960:	2800      	cmp	r0, #0
 8008962:	d1d5      	bne.n	8008910 <__sfp+0x24>
 8008964:	f7ff ff78 	bl	8008858 <__sfp_lock_release>
 8008968:	230c      	movs	r3, #12
 800896a:	603b      	str	r3, [r7, #0]
 800896c:	e7ee      	b.n	800894c <__sfp+0x60>
 800896e:	bf00      	nop
 8008970:	08009fe8 	.word	0x08009fe8
 8008974:	ffff0001 	.word	0xffff0001

08008978 <_fwalk_reent>:
 8008978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800897c:	4606      	mov	r6, r0
 800897e:	4688      	mov	r8, r1
 8008980:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008984:	2700      	movs	r7, #0
 8008986:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800898a:	f1b9 0901 	subs.w	r9, r9, #1
 800898e:	d505      	bpl.n	800899c <_fwalk_reent+0x24>
 8008990:	6824      	ldr	r4, [r4, #0]
 8008992:	2c00      	cmp	r4, #0
 8008994:	d1f7      	bne.n	8008986 <_fwalk_reent+0xe>
 8008996:	4638      	mov	r0, r7
 8008998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800899c:	89ab      	ldrh	r3, [r5, #12]
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d907      	bls.n	80089b2 <_fwalk_reent+0x3a>
 80089a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089a6:	3301      	adds	r3, #1
 80089a8:	d003      	beq.n	80089b2 <_fwalk_reent+0x3a>
 80089aa:	4629      	mov	r1, r5
 80089ac:	4630      	mov	r0, r6
 80089ae:	47c0      	blx	r8
 80089b0:	4307      	orrs	r7, r0
 80089b2:	3568      	adds	r5, #104	; 0x68
 80089b4:	e7e9      	b.n	800898a <_fwalk_reent+0x12>

080089b6 <__retarget_lock_init_recursive>:
 80089b6:	4770      	bx	lr

080089b8 <__retarget_lock_acquire_recursive>:
 80089b8:	4770      	bx	lr

080089ba <__retarget_lock_release_recursive>:
 80089ba:	4770      	bx	lr

080089bc <__swhatbuf_r>:
 80089bc:	b570      	push	{r4, r5, r6, lr}
 80089be:	460e      	mov	r6, r1
 80089c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089c4:	2900      	cmp	r1, #0
 80089c6:	b096      	sub	sp, #88	; 0x58
 80089c8:	4614      	mov	r4, r2
 80089ca:	461d      	mov	r5, r3
 80089cc:	da07      	bge.n	80089de <__swhatbuf_r+0x22>
 80089ce:	2300      	movs	r3, #0
 80089d0:	602b      	str	r3, [r5, #0]
 80089d2:	89b3      	ldrh	r3, [r6, #12]
 80089d4:	061a      	lsls	r2, r3, #24
 80089d6:	d410      	bmi.n	80089fa <__swhatbuf_r+0x3e>
 80089d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089dc:	e00e      	b.n	80089fc <__swhatbuf_r+0x40>
 80089de:	466a      	mov	r2, sp
 80089e0:	f000 fc6a 	bl	80092b8 <_fstat_r>
 80089e4:	2800      	cmp	r0, #0
 80089e6:	dbf2      	blt.n	80089ce <__swhatbuf_r+0x12>
 80089e8:	9a01      	ldr	r2, [sp, #4]
 80089ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80089ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80089f2:	425a      	negs	r2, r3
 80089f4:	415a      	adcs	r2, r3
 80089f6:	602a      	str	r2, [r5, #0]
 80089f8:	e7ee      	b.n	80089d8 <__swhatbuf_r+0x1c>
 80089fa:	2340      	movs	r3, #64	; 0x40
 80089fc:	2000      	movs	r0, #0
 80089fe:	6023      	str	r3, [r4, #0]
 8008a00:	b016      	add	sp, #88	; 0x58
 8008a02:	bd70      	pop	{r4, r5, r6, pc}

08008a04 <__smakebuf_r>:
 8008a04:	898b      	ldrh	r3, [r1, #12]
 8008a06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a08:	079d      	lsls	r5, r3, #30
 8008a0a:	4606      	mov	r6, r0
 8008a0c:	460c      	mov	r4, r1
 8008a0e:	d507      	bpl.n	8008a20 <__smakebuf_r+0x1c>
 8008a10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a14:	6023      	str	r3, [r4, #0]
 8008a16:	6123      	str	r3, [r4, #16]
 8008a18:	2301      	movs	r3, #1
 8008a1a:	6163      	str	r3, [r4, #20]
 8008a1c:	b002      	add	sp, #8
 8008a1e:	bd70      	pop	{r4, r5, r6, pc}
 8008a20:	ab01      	add	r3, sp, #4
 8008a22:	466a      	mov	r2, sp
 8008a24:	f7ff ffca 	bl	80089bc <__swhatbuf_r>
 8008a28:	9900      	ldr	r1, [sp, #0]
 8008a2a:	4605      	mov	r5, r0
 8008a2c:	4630      	mov	r0, r6
 8008a2e:	f000 f879 	bl	8008b24 <_malloc_r>
 8008a32:	b948      	cbnz	r0, 8008a48 <__smakebuf_r+0x44>
 8008a34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a38:	059a      	lsls	r2, r3, #22
 8008a3a:	d4ef      	bmi.n	8008a1c <__smakebuf_r+0x18>
 8008a3c:	f023 0303 	bic.w	r3, r3, #3
 8008a40:	f043 0302 	orr.w	r3, r3, #2
 8008a44:	81a3      	strh	r3, [r4, #12]
 8008a46:	e7e3      	b.n	8008a10 <__smakebuf_r+0xc>
 8008a48:	4b0d      	ldr	r3, [pc, #52]	; (8008a80 <__smakebuf_r+0x7c>)
 8008a4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008a4c:	89a3      	ldrh	r3, [r4, #12]
 8008a4e:	6020      	str	r0, [r4, #0]
 8008a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a54:	81a3      	strh	r3, [r4, #12]
 8008a56:	9b00      	ldr	r3, [sp, #0]
 8008a58:	6163      	str	r3, [r4, #20]
 8008a5a:	9b01      	ldr	r3, [sp, #4]
 8008a5c:	6120      	str	r0, [r4, #16]
 8008a5e:	b15b      	cbz	r3, 8008a78 <__smakebuf_r+0x74>
 8008a60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a64:	4630      	mov	r0, r6
 8008a66:	f000 fc39 	bl	80092dc <_isatty_r>
 8008a6a:	b128      	cbz	r0, 8008a78 <__smakebuf_r+0x74>
 8008a6c:	89a3      	ldrh	r3, [r4, #12]
 8008a6e:	f023 0303 	bic.w	r3, r3, #3
 8008a72:	f043 0301 	orr.w	r3, r3, #1
 8008a76:	81a3      	strh	r3, [r4, #12]
 8008a78:	89a0      	ldrh	r0, [r4, #12]
 8008a7a:	4305      	orrs	r5, r0
 8008a7c:	81a5      	strh	r5, [r4, #12]
 8008a7e:	e7cd      	b.n	8008a1c <__smakebuf_r+0x18>
 8008a80:	08008815 	.word	0x08008815

08008a84 <_free_r>:
 8008a84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a86:	2900      	cmp	r1, #0
 8008a88:	d048      	beq.n	8008b1c <_free_r+0x98>
 8008a8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a8e:	9001      	str	r0, [sp, #4]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	f1a1 0404 	sub.w	r4, r1, #4
 8008a96:	bfb8      	it	lt
 8008a98:	18e4      	addlt	r4, r4, r3
 8008a9a:	f000 fc41 	bl	8009320 <__malloc_lock>
 8008a9e:	4a20      	ldr	r2, [pc, #128]	; (8008b20 <_free_r+0x9c>)
 8008aa0:	9801      	ldr	r0, [sp, #4]
 8008aa2:	6813      	ldr	r3, [r2, #0]
 8008aa4:	4615      	mov	r5, r2
 8008aa6:	b933      	cbnz	r3, 8008ab6 <_free_r+0x32>
 8008aa8:	6063      	str	r3, [r4, #4]
 8008aaa:	6014      	str	r4, [r2, #0]
 8008aac:	b003      	add	sp, #12
 8008aae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ab2:	f000 bc3b 	b.w	800932c <__malloc_unlock>
 8008ab6:	42a3      	cmp	r3, r4
 8008ab8:	d90b      	bls.n	8008ad2 <_free_r+0x4e>
 8008aba:	6821      	ldr	r1, [r4, #0]
 8008abc:	1862      	adds	r2, r4, r1
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	bf04      	itt	eq
 8008ac2:	681a      	ldreq	r2, [r3, #0]
 8008ac4:	685b      	ldreq	r3, [r3, #4]
 8008ac6:	6063      	str	r3, [r4, #4]
 8008ac8:	bf04      	itt	eq
 8008aca:	1852      	addeq	r2, r2, r1
 8008acc:	6022      	streq	r2, [r4, #0]
 8008ace:	602c      	str	r4, [r5, #0]
 8008ad0:	e7ec      	b.n	8008aac <_free_r+0x28>
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	b10b      	cbz	r3, 8008adc <_free_r+0x58>
 8008ad8:	42a3      	cmp	r3, r4
 8008ada:	d9fa      	bls.n	8008ad2 <_free_r+0x4e>
 8008adc:	6811      	ldr	r1, [r2, #0]
 8008ade:	1855      	adds	r5, r2, r1
 8008ae0:	42a5      	cmp	r5, r4
 8008ae2:	d10b      	bne.n	8008afc <_free_r+0x78>
 8008ae4:	6824      	ldr	r4, [r4, #0]
 8008ae6:	4421      	add	r1, r4
 8008ae8:	1854      	adds	r4, r2, r1
 8008aea:	42a3      	cmp	r3, r4
 8008aec:	6011      	str	r1, [r2, #0]
 8008aee:	d1dd      	bne.n	8008aac <_free_r+0x28>
 8008af0:	681c      	ldr	r4, [r3, #0]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	6053      	str	r3, [r2, #4]
 8008af6:	4421      	add	r1, r4
 8008af8:	6011      	str	r1, [r2, #0]
 8008afa:	e7d7      	b.n	8008aac <_free_r+0x28>
 8008afc:	d902      	bls.n	8008b04 <_free_r+0x80>
 8008afe:	230c      	movs	r3, #12
 8008b00:	6003      	str	r3, [r0, #0]
 8008b02:	e7d3      	b.n	8008aac <_free_r+0x28>
 8008b04:	6825      	ldr	r5, [r4, #0]
 8008b06:	1961      	adds	r1, r4, r5
 8008b08:	428b      	cmp	r3, r1
 8008b0a:	bf04      	itt	eq
 8008b0c:	6819      	ldreq	r1, [r3, #0]
 8008b0e:	685b      	ldreq	r3, [r3, #4]
 8008b10:	6063      	str	r3, [r4, #4]
 8008b12:	bf04      	itt	eq
 8008b14:	1949      	addeq	r1, r1, r5
 8008b16:	6021      	streq	r1, [r4, #0]
 8008b18:	6054      	str	r4, [r2, #4]
 8008b1a:	e7c7      	b.n	8008aac <_free_r+0x28>
 8008b1c:	b003      	add	sp, #12
 8008b1e:	bd30      	pop	{r4, r5, pc}
 8008b20:	2000041c 	.word	0x2000041c

08008b24 <_malloc_r>:
 8008b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b26:	1ccd      	adds	r5, r1, #3
 8008b28:	f025 0503 	bic.w	r5, r5, #3
 8008b2c:	3508      	adds	r5, #8
 8008b2e:	2d0c      	cmp	r5, #12
 8008b30:	bf38      	it	cc
 8008b32:	250c      	movcc	r5, #12
 8008b34:	2d00      	cmp	r5, #0
 8008b36:	4606      	mov	r6, r0
 8008b38:	db01      	blt.n	8008b3e <_malloc_r+0x1a>
 8008b3a:	42a9      	cmp	r1, r5
 8008b3c:	d903      	bls.n	8008b46 <_malloc_r+0x22>
 8008b3e:	230c      	movs	r3, #12
 8008b40:	6033      	str	r3, [r6, #0]
 8008b42:	2000      	movs	r0, #0
 8008b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b46:	f000 fbeb 	bl	8009320 <__malloc_lock>
 8008b4a:	4921      	ldr	r1, [pc, #132]	; (8008bd0 <_malloc_r+0xac>)
 8008b4c:	680a      	ldr	r2, [r1, #0]
 8008b4e:	4614      	mov	r4, r2
 8008b50:	b99c      	cbnz	r4, 8008b7a <_malloc_r+0x56>
 8008b52:	4f20      	ldr	r7, [pc, #128]	; (8008bd4 <_malloc_r+0xb0>)
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	b923      	cbnz	r3, 8008b62 <_malloc_r+0x3e>
 8008b58:	4621      	mov	r1, r4
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	f000 fb2a 	bl	80091b4 <_sbrk_r>
 8008b60:	6038      	str	r0, [r7, #0]
 8008b62:	4629      	mov	r1, r5
 8008b64:	4630      	mov	r0, r6
 8008b66:	f000 fb25 	bl	80091b4 <_sbrk_r>
 8008b6a:	1c43      	adds	r3, r0, #1
 8008b6c:	d123      	bne.n	8008bb6 <_malloc_r+0x92>
 8008b6e:	230c      	movs	r3, #12
 8008b70:	6033      	str	r3, [r6, #0]
 8008b72:	4630      	mov	r0, r6
 8008b74:	f000 fbda 	bl	800932c <__malloc_unlock>
 8008b78:	e7e3      	b.n	8008b42 <_malloc_r+0x1e>
 8008b7a:	6823      	ldr	r3, [r4, #0]
 8008b7c:	1b5b      	subs	r3, r3, r5
 8008b7e:	d417      	bmi.n	8008bb0 <_malloc_r+0x8c>
 8008b80:	2b0b      	cmp	r3, #11
 8008b82:	d903      	bls.n	8008b8c <_malloc_r+0x68>
 8008b84:	6023      	str	r3, [r4, #0]
 8008b86:	441c      	add	r4, r3
 8008b88:	6025      	str	r5, [r4, #0]
 8008b8a:	e004      	b.n	8008b96 <_malloc_r+0x72>
 8008b8c:	6863      	ldr	r3, [r4, #4]
 8008b8e:	42a2      	cmp	r2, r4
 8008b90:	bf0c      	ite	eq
 8008b92:	600b      	streq	r3, [r1, #0]
 8008b94:	6053      	strne	r3, [r2, #4]
 8008b96:	4630      	mov	r0, r6
 8008b98:	f000 fbc8 	bl	800932c <__malloc_unlock>
 8008b9c:	f104 000b 	add.w	r0, r4, #11
 8008ba0:	1d23      	adds	r3, r4, #4
 8008ba2:	f020 0007 	bic.w	r0, r0, #7
 8008ba6:	1ac2      	subs	r2, r0, r3
 8008ba8:	d0cc      	beq.n	8008b44 <_malloc_r+0x20>
 8008baa:	1a1b      	subs	r3, r3, r0
 8008bac:	50a3      	str	r3, [r4, r2]
 8008bae:	e7c9      	b.n	8008b44 <_malloc_r+0x20>
 8008bb0:	4622      	mov	r2, r4
 8008bb2:	6864      	ldr	r4, [r4, #4]
 8008bb4:	e7cc      	b.n	8008b50 <_malloc_r+0x2c>
 8008bb6:	1cc4      	adds	r4, r0, #3
 8008bb8:	f024 0403 	bic.w	r4, r4, #3
 8008bbc:	42a0      	cmp	r0, r4
 8008bbe:	d0e3      	beq.n	8008b88 <_malloc_r+0x64>
 8008bc0:	1a21      	subs	r1, r4, r0
 8008bc2:	4630      	mov	r0, r6
 8008bc4:	f000 faf6 	bl	80091b4 <_sbrk_r>
 8008bc8:	3001      	adds	r0, #1
 8008bca:	d1dd      	bne.n	8008b88 <_malloc_r+0x64>
 8008bcc:	e7cf      	b.n	8008b6e <_malloc_r+0x4a>
 8008bce:	bf00      	nop
 8008bd0:	2000041c 	.word	0x2000041c
 8008bd4:	20000420 	.word	0x20000420

08008bd8 <__sfputc_r>:
 8008bd8:	6893      	ldr	r3, [r2, #8]
 8008bda:	3b01      	subs	r3, #1
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	b410      	push	{r4}
 8008be0:	6093      	str	r3, [r2, #8]
 8008be2:	da08      	bge.n	8008bf6 <__sfputc_r+0x1e>
 8008be4:	6994      	ldr	r4, [r2, #24]
 8008be6:	42a3      	cmp	r3, r4
 8008be8:	db01      	blt.n	8008bee <__sfputc_r+0x16>
 8008bea:	290a      	cmp	r1, #10
 8008bec:	d103      	bne.n	8008bf6 <__sfputc_r+0x1e>
 8008bee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bf2:	f7ff bc69 	b.w	80084c8 <__swbuf_r>
 8008bf6:	6813      	ldr	r3, [r2, #0]
 8008bf8:	1c58      	adds	r0, r3, #1
 8008bfa:	6010      	str	r0, [r2, #0]
 8008bfc:	7019      	strb	r1, [r3, #0]
 8008bfe:	4608      	mov	r0, r1
 8008c00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c04:	4770      	bx	lr

08008c06 <__sfputs_r>:
 8008c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c08:	4606      	mov	r6, r0
 8008c0a:	460f      	mov	r7, r1
 8008c0c:	4614      	mov	r4, r2
 8008c0e:	18d5      	adds	r5, r2, r3
 8008c10:	42ac      	cmp	r4, r5
 8008c12:	d101      	bne.n	8008c18 <__sfputs_r+0x12>
 8008c14:	2000      	movs	r0, #0
 8008c16:	e007      	b.n	8008c28 <__sfputs_r+0x22>
 8008c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c1c:	463a      	mov	r2, r7
 8008c1e:	4630      	mov	r0, r6
 8008c20:	f7ff ffda 	bl	8008bd8 <__sfputc_r>
 8008c24:	1c43      	adds	r3, r0, #1
 8008c26:	d1f3      	bne.n	8008c10 <__sfputs_r+0xa>
 8008c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c2c <_vfiprintf_r>:
 8008c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c30:	460d      	mov	r5, r1
 8008c32:	b09d      	sub	sp, #116	; 0x74
 8008c34:	4614      	mov	r4, r2
 8008c36:	4698      	mov	r8, r3
 8008c38:	4606      	mov	r6, r0
 8008c3a:	b118      	cbz	r0, 8008c44 <_vfiprintf_r+0x18>
 8008c3c:	6983      	ldr	r3, [r0, #24]
 8008c3e:	b90b      	cbnz	r3, 8008c44 <_vfiprintf_r+0x18>
 8008c40:	f7ff fe1c 	bl	800887c <__sinit>
 8008c44:	4b89      	ldr	r3, [pc, #548]	; (8008e6c <_vfiprintf_r+0x240>)
 8008c46:	429d      	cmp	r5, r3
 8008c48:	d11b      	bne.n	8008c82 <_vfiprintf_r+0x56>
 8008c4a:	6875      	ldr	r5, [r6, #4]
 8008c4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c4e:	07d9      	lsls	r1, r3, #31
 8008c50:	d405      	bmi.n	8008c5e <_vfiprintf_r+0x32>
 8008c52:	89ab      	ldrh	r3, [r5, #12]
 8008c54:	059a      	lsls	r2, r3, #22
 8008c56:	d402      	bmi.n	8008c5e <_vfiprintf_r+0x32>
 8008c58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c5a:	f7ff fead 	bl	80089b8 <__retarget_lock_acquire_recursive>
 8008c5e:	89ab      	ldrh	r3, [r5, #12]
 8008c60:	071b      	lsls	r3, r3, #28
 8008c62:	d501      	bpl.n	8008c68 <_vfiprintf_r+0x3c>
 8008c64:	692b      	ldr	r3, [r5, #16]
 8008c66:	b9eb      	cbnz	r3, 8008ca4 <_vfiprintf_r+0x78>
 8008c68:	4629      	mov	r1, r5
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	f7ff fc7e 	bl	800856c <__swsetup_r>
 8008c70:	b1c0      	cbz	r0, 8008ca4 <_vfiprintf_r+0x78>
 8008c72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c74:	07dc      	lsls	r4, r3, #31
 8008c76:	d50e      	bpl.n	8008c96 <_vfiprintf_r+0x6a>
 8008c78:	f04f 30ff 	mov.w	r0, #4294967295
 8008c7c:	b01d      	add	sp, #116	; 0x74
 8008c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c82:	4b7b      	ldr	r3, [pc, #492]	; (8008e70 <_vfiprintf_r+0x244>)
 8008c84:	429d      	cmp	r5, r3
 8008c86:	d101      	bne.n	8008c8c <_vfiprintf_r+0x60>
 8008c88:	68b5      	ldr	r5, [r6, #8]
 8008c8a:	e7df      	b.n	8008c4c <_vfiprintf_r+0x20>
 8008c8c:	4b79      	ldr	r3, [pc, #484]	; (8008e74 <_vfiprintf_r+0x248>)
 8008c8e:	429d      	cmp	r5, r3
 8008c90:	bf08      	it	eq
 8008c92:	68f5      	ldreq	r5, [r6, #12]
 8008c94:	e7da      	b.n	8008c4c <_vfiprintf_r+0x20>
 8008c96:	89ab      	ldrh	r3, [r5, #12]
 8008c98:	0598      	lsls	r0, r3, #22
 8008c9a:	d4ed      	bmi.n	8008c78 <_vfiprintf_r+0x4c>
 8008c9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c9e:	f7ff fe8c 	bl	80089ba <__retarget_lock_release_recursive>
 8008ca2:	e7e9      	b.n	8008c78 <_vfiprintf_r+0x4c>
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ca8:	2320      	movs	r3, #32
 8008caa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cae:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cb2:	2330      	movs	r3, #48	; 0x30
 8008cb4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008e78 <_vfiprintf_r+0x24c>
 8008cb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cbc:	f04f 0901 	mov.w	r9, #1
 8008cc0:	4623      	mov	r3, r4
 8008cc2:	469a      	mov	sl, r3
 8008cc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cc8:	b10a      	cbz	r2, 8008cce <_vfiprintf_r+0xa2>
 8008cca:	2a25      	cmp	r2, #37	; 0x25
 8008ccc:	d1f9      	bne.n	8008cc2 <_vfiprintf_r+0x96>
 8008cce:	ebba 0b04 	subs.w	fp, sl, r4
 8008cd2:	d00b      	beq.n	8008cec <_vfiprintf_r+0xc0>
 8008cd4:	465b      	mov	r3, fp
 8008cd6:	4622      	mov	r2, r4
 8008cd8:	4629      	mov	r1, r5
 8008cda:	4630      	mov	r0, r6
 8008cdc:	f7ff ff93 	bl	8008c06 <__sfputs_r>
 8008ce0:	3001      	adds	r0, #1
 8008ce2:	f000 80aa 	beq.w	8008e3a <_vfiprintf_r+0x20e>
 8008ce6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ce8:	445a      	add	r2, fp
 8008cea:	9209      	str	r2, [sp, #36]	; 0x24
 8008cec:	f89a 3000 	ldrb.w	r3, [sl]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f000 80a2 	beq.w	8008e3a <_vfiprintf_r+0x20e>
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8008cfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d00:	f10a 0a01 	add.w	sl, sl, #1
 8008d04:	9304      	str	r3, [sp, #16]
 8008d06:	9307      	str	r3, [sp, #28]
 8008d08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d0c:	931a      	str	r3, [sp, #104]	; 0x68
 8008d0e:	4654      	mov	r4, sl
 8008d10:	2205      	movs	r2, #5
 8008d12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d16:	4858      	ldr	r0, [pc, #352]	; (8008e78 <_vfiprintf_r+0x24c>)
 8008d18:	f7f7 fa32 	bl	8000180 <memchr>
 8008d1c:	9a04      	ldr	r2, [sp, #16]
 8008d1e:	b9d8      	cbnz	r0, 8008d58 <_vfiprintf_r+0x12c>
 8008d20:	06d1      	lsls	r1, r2, #27
 8008d22:	bf44      	itt	mi
 8008d24:	2320      	movmi	r3, #32
 8008d26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d2a:	0713      	lsls	r3, r2, #28
 8008d2c:	bf44      	itt	mi
 8008d2e:	232b      	movmi	r3, #43	; 0x2b
 8008d30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d34:	f89a 3000 	ldrb.w	r3, [sl]
 8008d38:	2b2a      	cmp	r3, #42	; 0x2a
 8008d3a:	d015      	beq.n	8008d68 <_vfiprintf_r+0x13c>
 8008d3c:	9a07      	ldr	r2, [sp, #28]
 8008d3e:	4654      	mov	r4, sl
 8008d40:	2000      	movs	r0, #0
 8008d42:	f04f 0c0a 	mov.w	ip, #10
 8008d46:	4621      	mov	r1, r4
 8008d48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d4c:	3b30      	subs	r3, #48	; 0x30
 8008d4e:	2b09      	cmp	r3, #9
 8008d50:	d94e      	bls.n	8008df0 <_vfiprintf_r+0x1c4>
 8008d52:	b1b0      	cbz	r0, 8008d82 <_vfiprintf_r+0x156>
 8008d54:	9207      	str	r2, [sp, #28]
 8008d56:	e014      	b.n	8008d82 <_vfiprintf_r+0x156>
 8008d58:	eba0 0308 	sub.w	r3, r0, r8
 8008d5c:	fa09 f303 	lsl.w	r3, r9, r3
 8008d60:	4313      	orrs	r3, r2
 8008d62:	9304      	str	r3, [sp, #16]
 8008d64:	46a2      	mov	sl, r4
 8008d66:	e7d2      	b.n	8008d0e <_vfiprintf_r+0xe2>
 8008d68:	9b03      	ldr	r3, [sp, #12]
 8008d6a:	1d19      	adds	r1, r3, #4
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	9103      	str	r1, [sp, #12]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	bfbb      	ittet	lt
 8008d74:	425b      	neglt	r3, r3
 8008d76:	f042 0202 	orrlt.w	r2, r2, #2
 8008d7a:	9307      	strge	r3, [sp, #28]
 8008d7c:	9307      	strlt	r3, [sp, #28]
 8008d7e:	bfb8      	it	lt
 8008d80:	9204      	strlt	r2, [sp, #16]
 8008d82:	7823      	ldrb	r3, [r4, #0]
 8008d84:	2b2e      	cmp	r3, #46	; 0x2e
 8008d86:	d10c      	bne.n	8008da2 <_vfiprintf_r+0x176>
 8008d88:	7863      	ldrb	r3, [r4, #1]
 8008d8a:	2b2a      	cmp	r3, #42	; 0x2a
 8008d8c:	d135      	bne.n	8008dfa <_vfiprintf_r+0x1ce>
 8008d8e:	9b03      	ldr	r3, [sp, #12]
 8008d90:	1d1a      	adds	r2, r3, #4
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	9203      	str	r2, [sp, #12]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	bfb8      	it	lt
 8008d9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d9e:	3402      	adds	r4, #2
 8008da0:	9305      	str	r3, [sp, #20]
 8008da2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008e88 <_vfiprintf_r+0x25c>
 8008da6:	7821      	ldrb	r1, [r4, #0]
 8008da8:	2203      	movs	r2, #3
 8008daa:	4650      	mov	r0, sl
 8008dac:	f7f7 f9e8 	bl	8000180 <memchr>
 8008db0:	b140      	cbz	r0, 8008dc4 <_vfiprintf_r+0x198>
 8008db2:	2340      	movs	r3, #64	; 0x40
 8008db4:	eba0 000a 	sub.w	r0, r0, sl
 8008db8:	fa03 f000 	lsl.w	r0, r3, r0
 8008dbc:	9b04      	ldr	r3, [sp, #16]
 8008dbe:	4303      	orrs	r3, r0
 8008dc0:	3401      	adds	r4, #1
 8008dc2:	9304      	str	r3, [sp, #16]
 8008dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dc8:	482c      	ldr	r0, [pc, #176]	; (8008e7c <_vfiprintf_r+0x250>)
 8008dca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008dce:	2206      	movs	r2, #6
 8008dd0:	f7f7 f9d6 	bl	8000180 <memchr>
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	d03f      	beq.n	8008e58 <_vfiprintf_r+0x22c>
 8008dd8:	4b29      	ldr	r3, [pc, #164]	; (8008e80 <_vfiprintf_r+0x254>)
 8008dda:	bb1b      	cbnz	r3, 8008e24 <_vfiprintf_r+0x1f8>
 8008ddc:	9b03      	ldr	r3, [sp, #12]
 8008dde:	3307      	adds	r3, #7
 8008de0:	f023 0307 	bic.w	r3, r3, #7
 8008de4:	3308      	adds	r3, #8
 8008de6:	9303      	str	r3, [sp, #12]
 8008de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dea:	443b      	add	r3, r7
 8008dec:	9309      	str	r3, [sp, #36]	; 0x24
 8008dee:	e767      	b.n	8008cc0 <_vfiprintf_r+0x94>
 8008df0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008df4:	460c      	mov	r4, r1
 8008df6:	2001      	movs	r0, #1
 8008df8:	e7a5      	b.n	8008d46 <_vfiprintf_r+0x11a>
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	3401      	adds	r4, #1
 8008dfe:	9305      	str	r3, [sp, #20]
 8008e00:	4619      	mov	r1, r3
 8008e02:	f04f 0c0a 	mov.w	ip, #10
 8008e06:	4620      	mov	r0, r4
 8008e08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e0c:	3a30      	subs	r2, #48	; 0x30
 8008e0e:	2a09      	cmp	r2, #9
 8008e10:	d903      	bls.n	8008e1a <_vfiprintf_r+0x1ee>
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d0c5      	beq.n	8008da2 <_vfiprintf_r+0x176>
 8008e16:	9105      	str	r1, [sp, #20]
 8008e18:	e7c3      	b.n	8008da2 <_vfiprintf_r+0x176>
 8008e1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e1e:	4604      	mov	r4, r0
 8008e20:	2301      	movs	r3, #1
 8008e22:	e7f0      	b.n	8008e06 <_vfiprintf_r+0x1da>
 8008e24:	ab03      	add	r3, sp, #12
 8008e26:	9300      	str	r3, [sp, #0]
 8008e28:	462a      	mov	r2, r5
 8008e2a:	4b16      	ldr	r3, [pc, #88]	; (8008e84 <_vfiprintf_r+0x258>)
 8008e2c:	a904      	add	r1, sp, #16
 8008e2e:	4630      	mov	r0, r6
 8008e30:	f3af 8000 	nop.w
 8008e34:	4607      	mov	r7, r0
 8008e36:	1c78      	adds	r0, r7, #1
 8008e38:	d1d6      	bne.n	8008de8 <_vfiprintf_r+0x1bc>
 8008e3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e3c:	07d9      	lsls	r1, r3, #31
 8008e3e:	d405      	bmi.n	8008e4c <_vfiprintf_r+0x220>
 8008e40:	89ab      	ldrh	r3, [r5, #12]
 8008e42:	059a      	lsls	r2, r3, #22
 8008e44:	d402      	bmi.n	8008e4c <_vfiprintf_r+0x220>
 8008e46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e48:	f7ff fdb7 	bl	80089ba <__retarget_lock_release_recursive>
 8008e4c:	89ab      	ldrh	r3, [r5, #12]
 8008e4e:	065b      	lsls	r3, r3, #25
 8008e50:	f53f af12 	bmi.w	8008c78 <_vfiprintf_r+0x4c>
 8008e54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e56:	e711      	b.n	8008c7c <_vfiprintf_r+0x50>
 8008e58:	ab03      	add	r3, sp, #12
 8008e5a:	9300      	str	r3, [sp, #0]
 8008e5c:	462a      	mov	r2, r5
 8008e5e:	4b09      	ldr	r3, [pc, #36]	; (8008e84 <_vfiprintf_r+0x258>)
 8008e60:	a904      	add	r1, sp, #16
 8008e62:	4630      	mov	r0, r6
 8008e64:	f000 f880 	bl	8008f68 <_printf_i>
 8008e68:	e7e4      	b.n	8008e34 <_vfiprintf_r+0x208>
 8008e6a:	bf00      	nop
 8008e6c:	0800a00c 	.word	0x0800a00c
 8008e70:	0800a02c 	.word	0x0800a02c
 8008e74:	08009fec 	.word	0x08009fec
 8008e78:	0800a04c 	.word	0x0800a04c
 8008e7c:	0800a056 	.word	0x0800a056
 8008e80:	00000000 	.word	0x00000000
 8008e84:	08008c07 	.word	0x08008c07
 8008e88:	0800a052 	.word	0x0800a052

08008e8c <_printf_common>:
 8008e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e90:	4616      	mov	r6, r2
 8008e92:	4699      	mov	r9, r3
 8008e94:	688a      	ldr	r2, [r1, #8]
 8008e96:	690b      	ldr	r3, [r1, #16]
 8008e98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	bfb8      	it	lt
 8008ea0:	4613      	movlt	r3, r2
 8008ea2:	6033      	str	r3, [r6, #0]
 8008ea4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ea8:	4607      	mov	r7, r0
 8008eaa:	460c      	mov	r4, r1
 8008eac:	b10a      	cbz	r2, 8008eb2 <_printf_common+0x26>
 8008eae:	3301      	adds	r3, #1
 8008eb0:	6033      	str	r3, [r6, #0]
 8008eb2:	6823      	ldr	r3, [r4, #0]
 8008eb4:	0699      	lsls	r1, r3, #26
 8008eb6:	bf42      	ittt	mi
 8008eb8:	6833      	ldrmi	r3, [r6, #0]
 8008eba:	3302      	addmi	r3, #2
 8008ebc:	6033      	strmi	r3, [r6, #0]
 8008ebe:	6825      	ldr	r5, [r4, #0]
 8008ec0:	f015 0506 	ands.w	r5, r5, #6
 8008ec4:	d106      	bne.n	8008ed4 <_printf_common+0x48>
 8008ec6:	f104 0a19 	add.w	sl, r4, #25
 8008eca:	68e3      	ldr	r3, [r4, #12]
 8008ecc:	6832      	ldr	r2, [r6, #0]
 8008ece:	1a9b      	subs	r3, r3, r2
 8008ed0:	42ab      	cmp	r3, r5
 8008ed2:	dc26      	bgt.n	8008f22 <_printf_common+0x96>
 8008ed4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ed8:	1e13      	subs	r3, r2, #0
 8008eda:	6822      	ldr	r2, [r4, #0]
 8008edc:	bf18      	it	ne
 8008ede:	2301      	movne	r3, #1
 8008ee0:	0692      	lsls	r2, r2, #26
 8008ee2:	d42b      	bmi.n	8008f3c <_printf_common+0xb0>
 8008ee4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ee8:	4649      	mov	r1, r9
 8008eea:	4638      	mov	r0, r7
 8008eec:	47c0      	blx	r8
 8008eee:	3001      	adds	r0, #1
 8008ef0:	d01e      	beq.n	8008f30 <_printf_common+0xa4>
 8008ef2:	6823      	ldr	r3, [r4, #0]
 8008ef4:	68e5      	ldr	r5, [r4, #12]
 8008ef6:	6832      	ldr	r2, [r6, #0]
 8008ef8:	f003 0306 	and.w	r3, r3, #6
 8008efc:	2b04      	cmp	r3, #4
 8008efe:	bf08      	it	eq
 8008f00:	1aad      	subeq	r5, r5, r2
 8008f02:	68a3      	ldr	r3, [r4, #8]
 8008f04:	6922      	ldr	r2, [r4, #16]
 8008f06:	bf0c      	ite	eq
 8008f08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f0c:	2500      	movne	r5, #0
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	bfc4      	itt	gt
 8008f12:	1a9b      	subgt	r3, r3, r2
 8008f14:	18ed      	addgt	r5, r5, r3
 8008f16:	2600      	movs	r6, #0
 8008f18:	341a      	adds	r4, #26
 8008f1a:	42b5      	cmp	r5, r6
 8008f1c:	d11a      	bne.n	8008f54 <_printf_common+0xc8>
 8008f1e:	2000      	movs	r0, #0
 8008f20:	e008      	b.n	8008f34 <_printf_common+0xa8>
 8008f22:	2301      	movs	r3, #1
 8008f24:	4652      	mov	r2, sl
 8008f26:	4649      	mov	r1, r9
 8008f28:	4638      	mov	r0, r7
 8008f2a:	47c0      	blx	r8
 8008f2c:	3001      	adds	r0, #1
 8008f2e:	d103      	bne.n	8008f38 <_printf_common+0xac>
 8008f30:	f04f 30ff 	mov.w	r0, #4294967295
 8008f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f38:	3501      	adds	r5, #1
 8008f3a:	e7c6      	b.n	8008eca <_printf_common+0x3e>
 8008f3c:	18e1      	adds	r1, r4, r3
 8008f3e:	1c5a      	adds	r2, r3, #1
 8008f40:	2030      	movs	r0, #48	; 0x30
 8008f42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f46:	4422      	add	r2, r4
 8008f48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f50:	3302      	adds	r3, #2
 8008f52:	e7c7      	b.n	8008ee4 <_printf_common+0x58>
 8008f54:	2301      	movs	r3, #1
 8008f56:	4622      	mov	r2, r4
 8008f58:	4649      	mov	r1, r9
 8008f5a:	4638      	mov	r0, r7
 8008f5c:	47c0      	blx	r8
 8008f5e:	3001      	adds	r0, #1
 8008f60:	d0e6      	beq.n	8008f30 <_printf_common+0xa4>
 8008f62:	3601      	adds	r6, #1
 8008f64:	e7d9      	b.n	8008f1a <_printf_common+0x8e>
	...

08008f68 <_printf_i>:
 8008f68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f6c:	460c      	mov	r4, r1
 8008f6e:	4691      	mov	r9, r2
 8008f70:	7e27      	ldrb	r7, [r4, #24]
 8008f72:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008f74:	2f78      	cmp	r7, #120	; 0x78
 8008f76:	4680      	mov	r8, r0
 8008f78:	469a      	mov	sl, r3
 8008f7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f7e:	d807      	bhi.n	8008f90 <_printf_i+0x28>
 8008f80:	2f62      	cmp	r7, #98	; 0x62
 8008f82:	d80a      	bhi.n	8008f9a <_printf_i+0x32>
 8008f84:	2f00      	cmp	r7, #0
 8008f86:	f000 80d8 	beq.w	800913a <_printf_i+0x1d2>
 8008f8a:	2f58      	cmp	r7, #88	; 0x58
 8008f8c:	f000 80a3 	beq.w	80090d6 <_printf_i+0x16e>
 8008f90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008f94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f98:	e03a      	b.n	8009010 <_printf_i+0xa8>
 8008f9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f9e:	2b15      	cmp	r3, #21
 8008fa0:	d8f6      	bhi.n	8008f90 <_printf_i+0x28>
 8008fa2:	a001      	add	r0, pc, #4	; (adr r0, 8008fa8 <_printf_i+0x40>)
 8008fa4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008fa8:	08009001 	.word	0x08009001
 8008fac:	08009015 	.word	0x08009015
 8008fb0:	08008f91 	.word	0x08008f91
 8008fb4:	08008f91 	.word	0x08008f91
 8008fb8:	08008f91 	.word	0x08008f91
 8008fbc:	08008f91 	.word	0x08008f91
 8008fc0:	08009015 	.word	0x08009015
 8008fc4:	08008f91 	.word	0x08008f91
 8008fc8:	08008f91 	.word	0x08008f91
 8008fcc:	08008f91 	.word	0x08008f91
 8008fd0:	08008f91 	.word	0x08008f91
 8008fd4:	08009121 	.word	0x08009121
 8008fd8:	08009045 	.word	0x08009045
 8008fdc:	08009103 	.word	0x08009103
 8008fe0:	08008f91 	.word	0x08008f91
 8008fe4:	08008f91 	.word	0x08008f91
 8008fe8:	08009143 	.word	0x08009143
 8008fec:	08008f91 	.word	0x08008f91
 8008ff0:	08009045 	.word	0x08009045
 8008ff4:	08008f91 	.word	0x08008f91
 8008ff8:	08008f91 	.word	0x08008f91
 8008ffc:	0800910b 	.word	0x0800910b
 8009000:	680b      	ldr	r3, [r1, #0]
 8009002:	1d1a      	adds	r2, r3, #4
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	600a      	str	r2, [r1, #0]
 8009008:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800900c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009010:	2301      	movs	r3, #1
 8009012:	e0a3      	b.n	800915c <_printf_i+0x1f4>
 8009014:	6825      	ldr	r5, [r4, #0]
 8009016:	6808      	ldr	r0, [r1, #0]
 8009018:	062e      	lsls	r6, r5, #24
 800901a:	f100 0304 	add.w	r3, r0, #4
 800901e:	d50a      	bpl.n	8009036 <_printf_i+0xce>
 8009020:	6805      	ldr	r5, [r0, #0]
 8009022:	600b      	str	r3, [r1, #0]
 8009024:	2d00      	cmp	r5, #0
 8009026:	da03      	bge.n	8009030 <_printf_i+0xc8>
 8009028:	232d      	movs	r3, #45	; 0x2d
 800902a:	426d      	negs	r5, r5
 800902c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009030:	485e      	ldr	r0, [pc, #376]	; (80091ac <_printf_i+0x244>)
 8009032:	230a      	movs	r3, #10
 8009034:	e019      	b.n	800906a <_printf_i+0x102>
 8009036:	f015 0f40 	tst.w	r5, #64	; 0x40
 800903a:	6805      	ldr	r5, [r0, #0]
 800903c:	600b      	str	r3, [r1, #0]
 800903e:	bf18      	it	ne
 8009040:	b22d      	sxthne	r5, r5
 8009042:	e7ef      	b.n	8009024 <_printf_i+0xbc>
 8009044:	680b      	ldr	r3, [r1, #0]
 8009046:	6825      	ldr	r5, [r4, #0]
 8009048:	1d18      	adds	r0, r3, #4
 800904a:	6008      	str	r0, [r1, #0]
 800904c:	0628      	lsls	r0, r5, #24
 800904e:	d501      	bpl.n	8009054 <_printf_i+0xec>
 8009050:	681d      	ldr	r5, [r3, #0]
 8009052:	e002      	b.n	800905a <_printf_i+0xf2>
 8009054:	0669      	lsls	r1, r5, #25
 8009056:	d5fb      	bpl.n	8009050 <_printf_i+0xe8>
 8009058:	881d      	ldrh	r5, [r3, #0]
 800905a:	4854      	ldr	r0, [pc, #336]	; (80091ac <_printf_i+0x244>)
 800905c:	2f6f      	cmp	r7, #111	; 0x6f
 800905e:	bf0c      	ite	eq
 8009060:	2308      	moveq	r3, #8
 8009062:	230a      	movne	r3, #10
 8009064:	2100      	movs	r1, #0
 8009066:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800906a:	6866      	ldr	r6, [r4, #4]
 800906c:	60a6      	str	r6, [r4, #8]
 800906e:	2e00      	cmp	r6, #0
 8009070:	bfa2      	ittt	ge
 8009072:	6821      	ldrge	r1, [r4, #0]
 8009074:	f021 0104 	bicge.w	r1, r1, #4
 8009078:	6021      	strge	r1, [r4, #0]
 800907a:	b90d      	cbnz	r5, 8009080 <_printf_i+0x118>
 800907c:	2e00      	cmp	r6, #0
 800907e:	d04d      	beq.n	800911c <_printf_i+0x1b4>
 8009080:	4616      	mov	r6, r2
 8009082:	fbb5 f1f3 	udiv	r1, r5, r3
 8009086:	fb03 5711 	mls	r7, r3, r1, r5
 800908a:	5dc7      	ldrb	r7, [r0, r7]
 800908c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009090:	462f      	mov	r7, r5
 8009092:	42bb      	cmp	r3, r7
 8009094:	460d      	mov	r5, r1
 8009096:	d9f4      	bls.n	8009082 <_printf_i+0x11a>
 8009098:	2b08      	cmp	r3, #8
 800909a:	d10b      	bne.n	80090b4 <_printf_i+0x14c>
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	07df      	lsls	r7, r3, #31
 80090a0:	d508      	bpl.n	80090b4 <_printf_i+0x14c>
 80090a2:	6923      	ldr	r3, [r4, #16]
 80090a4:	6861      	ldr	r1, [r4, #4]
 80090a6:	4299      	cmp	r1, r3
 80090a8:	bfde      	ittt	le
 80090aa:	2330      	movle	r3, #48	; 0x30
 80090ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80090b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80090b4:	1b92      	subs	r2, r2, r6
 80090b6:	6122      	str	r2, [r4, #16]
 80090b8:	f8cd a000 	str.w	sl, [sp]
 80090bc:	464b      	mov	r3, r9
 80090be:	aa03      	add	r2, sp, #12
 80090c0:	4621      	mov	r1, r4
 80090c2:	4640      	mov	r0, r8
 80090c4:	f7ff fee2 	bl	8008e8c <_printf_common>
 80090c8:	3001      	adds	r0, #1
 80090ca:	d14c      	bne.n	8009166 <_printf_i+0x1fe>
 80090cc:	f04f 30ff 	mov.w	r0, #4294967295
 80090d0:	b004      	add	sp, #16
 80090d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090d6:	4835      	ldr	r0, [pc, #212]	; (80091ac <_printf_i+0x244>)
 80090d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80090dc:	6823      	ldr	r3, [r4, #0]
 80090de:	680e      	ldr	r6, [r1, #0]
 80090e0:	061f      	lsls	r7, r3, #24
 80090e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80090e6:	600e      	str	r6, [r1, #0]
 80090e8:	d514      	bpl.n	8009114 <_printf_i+0x1ac>
 80090ea:	07d9      	lsls	r1, r3, #31
 80090ec:	bf44      	itt	mi
 80090ee:	f043 0320 	orrmi.w	r3, r3, #32
 80090f2:	6023      	strmi	r3, [r4, #0]
 80090f4:	b91d      	cbnz	r5, 80090fe <_printf_i+0x196>
 80090f6:	6823      	ldr	r3, [r4, #0]
 80090f8:	f023 0320 	bic.w	r3, r3, #32
 80090fc:	6023      	str	r3, [r4, #0]
 80090fe:	2310      	movs	r3, #16
 8009100:	e7b0      	b.n	8009064 <_printf_i+0xfc>
 8009102:	6823      	ldr	r3, [r4, #0]
 8009104:	f043 0320 	orr.w	r3, r3, #32
 8009108:	6023      	str	r3, [r4, #0]
 800910a:	2378      	movs	r3, #120	; 0x78
 800910c:	4828      	ldr	r0, [pc, #160]	; (80091b0 <_printf_i+0x248>)
 800910e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009112:	e7e3      	b.n	80090dc <_printf_i+0x174>
 8009114:	065e      	lsls	r6, r3, #25
 8009116:	bf48      	it	mi
 8009118:	b2ad      	uxthmi	r5, r5
 800911a:	e7e6      	b.n	80090ea <_printf_i+0x182>
 800911c:	4616      	mov	r6, r2
 800911e:	e7bb      	b.n	8009098 <_printf_i+0x130>
 8009120:	680b      	ldr	r3, [r1, #0]
 8009122:	6826      	ldr	r6, [r4, #0]
 8009124:	6960      	ldr	r0, [r4, #20]
 8009126:	1d1d      	adds	r5, r3, #4
 8009128:	600d      	str	r5, [r1, #0]
 800912a:	0635      	lsls	r5, r6, #24
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	d501      	bpl.n	8009134 <_printf_i+0x1cc>
 8009130:	6018      	str	r0, [r3, #0]
 8009132:	e002      	b.n	800913a <_printf_i+0x1d2>
 8009134:	0671      	lsls	r1, r6, #25
 8009136:	d5fb      	bpl.n	8009130 <_printf_i+0x1c8>
 8009138:	8018      	strh	r0, [r3, #0]
 800913a:	2300      	movs	r3, #0
 800913c:	6123      	str	r3, [r4, #16]
 800913e:	4616      	mov	r6, r2
 8009140:	e7ba      	b.n	80090b8 <_printf_i+0x150>
 8009142:	680b      	ldr	r3, [r1, #0]
 8009144:	1d1a      	adds	r2, r3, #4
 8009146:	600a      	str	r2, [r1, #0]
 8009148:	681e      	ldr	r6, [r3, #0]
 800914a:	6862      	ldr	r2, [r4, #4]
 800914c:	2100      	movs	r1, #0
 800914e:	4630      	mov	r0, r6
 8009150:	f7f7 f816 	bl	8000180 <memchr>
 8009154:	b108      	cbz	r0, 800915a <_printf_i+0x1f2>
 8009156:	1b80      	subs	r0, r0, r6
 8009158:	6060      	str	r0, [r4, #4]
 800915a:	6863      	ldr	r3, [r4, #4]
 800915c:	6123      	str	r3, [r4, #16]
 800915e:	2300      	movs	r3, #0
 8009160:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009164:	e7a8      	b.n	80090b8 <_printf_i+0x150>
 8009166:	6923      	ldr	r3, [r4, #16]
 8009168:	4632      	mov	r2, r6
 800916a:	4649      	mov	r1, r9
 800916c:	4640      	mov	r0, r8
 800916e:	47d0      	blx	sl
 8009170:	3001      	adds	r0, #1
 8009172:	d0ab      	beq.n	80090cc <_printf_i+0x164>
 8009174:	6823      	ldr	r3, [r4, #0]
 8009176:	079b      	lsls	r3, r3, #30
 8009178:	d413      	bmi.n	80091a2 <_printf_i+0x23a>
 800917a:	68e0      	ldr	r0, [r4, #12]
 800917c:	9b03      	ldr	r3, [sp, #12]
 800917e:	4298      	cmp	r0, r3
 8009180:	bfb8      	it	lt
 8009182:	4618      	movlt	r0, r3
 8009184:	e7a4      	b.n	80090d0 <_printf_i+0x168>
 8009186:	2301      	movs	r3, #1
 8009188:	4632      	mov	r2, r6
 800918a:	4649      	mov	r1, r9
 800918c:	4640      	mov	r0, r8
 800918e:	47d0      	blx	sl
 8009190:	3001      	adds	r0, #1
 8009192:	d09b      	beq.n	80090cc <_printf_i+0x164>
 8009194:	3501      	adds	r5, #1
 8009196:	68e3      	ldr	r3, [r4, #12]
 8009198:	9903      	ldr	r1, [sp, #12]
 800919a:	1a5b      	subs	r3, r3, r1
 800919c:	42ab      	cmp	r3, r5
 800919e:	dcf2      	bgt.n	8009186 <_printf_i+0x21e>
 80091a0:	e7eb      	b.n	800917a <_printf_i+0x212>
 80091a2:	2500      	movs	r5, #0
 80091a4:	f104 0619 	add.w	r6, r4, #25
 80091a8:	e7f5      	b.n	8009196 <_printf_i+0x22e>
 80091aa:	bf00      	nop
 80091ac:	0800a05d 	.word	0x0800a05d
 80091b0:	0800a06e 	.word	0x0800a06e

080091b4 <_sbrk_r>:
 80091b4:	b538      	push	{r3, r4, r5, lr}
 80091b6:	4d06      	ldr	r5, [pc, #24]	; (80091d0 <_sbrk_r+0x1c>)
 80091b8:	2300      	movs	r3, #0
 80091ba:	4604      	mov	r4, r0
 80091bc:	4608      	mov	r0, r1
 80091be:	602b      	str	r3, [r5, #0]
 80091c0:	f7f8 feba 	bl	8001f38 <_sbrk>
 80091c4:	1c43      	adds	r3, r0, #1
 80091c6:	d102      	bne.n	80091ce <_sbrk_r+0x1a>
 80091c8:	682b      	ldr	r3, [r5, #0]
 80091ca:	b103      	cbz	r3, 80091ce <_sbrk_r+0x1a>
 80091cc:	6023      	str	r3, [r4, #0]
 80091ce:	bd38      	pop	{r3, r4, r5, pc}
 80091d0:	20000668 	.word	0x20000668

080091d4 <__sread>:
 80091d4:	b510      	push	{r4, lr}
 80091d6:	460c      	mov	r4, r1
 80091d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091dc:	f000 f8ac 	bl	8009338 <_read_r>
 80091e0:	2800      	cmp	r0, #0
 80091e2:	bfab      	itete	ge
 80091e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80091e6:	89a3      	ldrhlt	r3, [r4, #12]
 80091e8:	181b      	addge	r3, r3, r0
 80091ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80091ee:	bfac      	ite	ge
 80091f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80091f2:	81a3      	strhlt	r3, [r4, #12]
 80091f4:	bd10      	pop	{r4, pc}

080091f6 <__swrite>:
 80091f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091fa:	461f      	mov	r7, r3
 80091fc:	898b      	ldrh	r3, [r1, #12]
 80091fe:	05db      	lsls	r3, r3, #23
 8009200:	4605      	mov	r5, r0
 8009202:	460c      	mov	r4, r1
 8009204:	4616      	mov	r6, r2
 8009206:	d505      	bpl.n	8009214 <__swrite+0x1e>
 8009208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800920c:	2302      	movs	r3, #2
 800920e:	2200      	movs	r2, #0
 8009210:	f000 f874 	bl	80092fc <_lseek_r>
 8009214:	89a3      	ldrh	r3, [r4, #12]
 8009216:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800921a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800921e:	81a3      	strh	r3, [r4, #12]
 8009220:	4632      	mov	r2, r6
 8009222:	463b      	mov	r3, r7
 8009224:	4628      	mov	r0, r5
 8009226:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800922a:	f000 b823 	b.w	8009274 <_write_r>

0800922e <__sseek>:
 800922e:	b510      	push	{r4, lr}
 8009230:	460c      	mov	r4, r1
 8009232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009236:	f000 f861 	bl	80092fc <_lseek_r>
 800923a:	1c43      	adds	r3, r0, #1
 800923c:	89a3      	ldrh	r3, [r4, #12]
 800923e:	bf15      	itete	ne
 8009240:	6560      	strne	r0, [r4, #84]	; 0x54
 8009242:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009246:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800924a:	81a3      	strheq	r3, [r4, #12]
 800924c:	bf18      	it	ne
 800924e:	81a3      	strhne	r3, [r4, #12]
 8009250:	bd10      	pop	{r4, pc}

08009252 <__sclose>:
 8009252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009256:	f000 b81f 	b.w	8009298 <_close_r>

0800925a <strchr>:
 800925a:	b2c9      	uxtb	r1, r1
 800925c:	4603      	mov	r3, r0
 800925e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009262:	b11a      	cbz	r2, 800926c <strchr+0x12>
 8009264:	428a      	cmp	r2, r1
 8009266:	d1f9      	bne.n	800925c <strchr+0x2>
 8009268:	4618      	mov	r0, r3
 800926a:	4770      	bx	lr
 800926c:	2900      	cmp	r1, #0
 800926e:	bf18      	it	ne
 8009270:	2300      	movne	r3, #0
 8009272:	e7f9      	b.n	8009268 <strchr+0xe>

08009274 <_write_r>:
 8009274:	b538      	push	{r3, r4, r5, lr}
 8009276:	4d07      	ldr	r5, [pc, #28]	; (8009294 <_write_r+0x20>)
 8009278:	4604      	mov	r4, r0
 800927a:	4608      	mov	r0, r1
 800927c:	4611      	mov	r1, r2
 800927e:	2200      	movs	r2, #0
 8009280:	602a      	str	r2, [r5, #0]
 8009282:	461a      	mov	r2, r3
 8009284:	f7fe f83c 	bl	8007300 <_write>
 8009288:	1c43      	adds	r3, r0, #1
 800928a:	d102      	bne.n	8009292 <_write_r+0x1e>
 800928c:	682b      	ldr	r3, [r5, #0]
 800928e:	b103      	cbz	r3, 8009292 <_write_r+0x1e>
 8009290:	6023      	str	r3, [r4, #0]
 8009292:	bd38      	pop	{r3, r4, r5, pc}
 8009294:	20000668 	.word	0x20000668

08009298 <_close_r>:
 8009298:	b538      	push	{r3, r4, r5, lr}
 800929a:	4d06      	ldr	r5, [pc, #24]	; (80092b4 <_close_r+0x1c>)
 800929c:	2300      	movs	r3, #0
 800929e:	4604      	mov	r4, r0
 80092a0:	4608      	mov	r0, r1
 80092a2:	602b      	str	r3, [r5, #0]
 80092a4:	f7f8 fe3b 	bl	8001f1e <_close>
 80092a8:	1c43      	adds	r3, r0, #1
 80092aa:	d102      	bne.n	80092b2 <_close_r+0x1a>
 80092ac:	682b      	ldr	r3, [r5, #0]
 80092ae:	b103      	cbz	r3, 80092b2 <_close_r+0x1a>
 80092b0:	6023      	str	r3, [r4, #0]
 80092b2:	bd38      	pop	{r3, r4, r5, pc}
 80092b4:	20000668 	.word	0x20000668

080092b8 <_fstat_r>:
 80092b8:	b538      	push	{r3, r4, r5, lr}
 80092ba:	4d07      	ldr	r5, [pc, #28]	; (80092d8 <_fstat_r+0x20>)
 80092bc:	2300      	movs	r3, #0
 80092be:	4604      	mov	r4, r0
 80092c0:	4608      	mov	r0, r1
 80092c2:	4611      	mov	r1, r2
 80092c4:	602b      	str	r3, [r5, #0]
 80092c6:	f7f8 fe2d 	bl	8001f24 <_fstat>
 80092ca:	1c43      	adds	r3, r0, #1
 80092cc:	d102      	bne.n	80092d4 <_fstat_r+0x1c>
 80092ce:	682b      	ldr	r3, [r5, #0]
 80092d0:	b103      	cbz	r3, 80092d4 <_fstat_r+0x1c>
 80092d2:	6023      	str	r3, [r4, #0]
 80092d4:	bd38      	pop	{r3, r4, r5, pc}
 80092d6:	bf00      	nop
 80092d8:	20000668 	.word	0x20000668

080092dc <_isatty_r>:
 80092dc:	b538      	push	{r3, r4, r5, lr}
 80092de:	4d06      	ldr	r5, [pc, #24]	; (80092f8 <_isatty_r+0x1c>)
 80092e0:	2300      	movs	r3, #0
 80092e2:	4604      	mov	r4, r0
 80092e4:	4608      	mov	r0, r1
 80092e6:	602b      	str	r3, [r5, #0]
 80092e8:	f7f8 fe21 	bl	8001f2e <_isatty>
 80092ec:	1c43      	adds	r3, r0, #1
 80092ee:	d102      	bne.n	80092f6 <_isatty_r+0x1a>
 80092f0:	682b      	ldr	r3, [r5, #0]
 80092f2:	b103      	cbz	r3, 80092f6 <_isatty_r+0x1a>
 80092f4:	6023      	str	r3, [r4, #0]
 80092f6:	bd38      	pop	{r3, r4, r5, pc}
 80092f8:	20000668 	.word	0x20000668

080092fc <_lseek_r>:
 80092fc:	b538      	push	{r3, r4, r5, lr}
 80092fe:	4d07      	ldr	r5, [pc, #28]	; (800931c <_lseek_r+0x20>)
 8009300:	4604      	mov	r4, r0
 8009302:	4608      	mov	r0, r1
 8009304:	4611      	mov	r1, r2
 8009306:	2200      	movs	r2, #0
 8009308:	602a      	str	r2, [r5, #0]
 800930a:	461a      	mov	r2, r3
 800930c:	f7f8 fe11 	bl	8001f32 <_lseek>
 8009310:	1c43      	adds	r3, r0, #1
 8009312:	d102      	bne.n	800931a <_lseek_r+0x1e>
 8009314:	682b      	ldr	r3, [r5, #0]
 8009316:	b103      	cbz	r3, 800931a <_lseek_r+0x1e>
 8009318:	6023      	str	r3, [r4, #0]
 800931a:	bd38      	pop	{r3, r4, r5, pc}
 800931c:	20000668 	.word	0x20000668

08009320 <__malloc_lock>:
 8009320:	4801      	ldr	r0, [pc, #4]	; (8009328 <__malloc_lock+0x8>)
 8009322:	f7ff bb49 	b.w	80089b8 <__retarget_lock_acquire_recursive>
 8009326:	bf00      	nop
 8009328:	20000660 	.word	0x20000660

0800932c <__malloc_unlock>:
 800932c:	4801      	ldr	r0, [pc, #4]	; (8009334 <__malloc_unlock+0x8>)
 800932e:	f7ff bb44 	b.w	80089ba <__retarget_lock_release_recursive>
 8009332:	bf00      	nop
 8009334:	20000660 	.word	0x20000660

08009338 <_read_r>:
 8009338:	b538      	push	{r3, r4, r5, lr}
 800933a:	4d07      	ldr	r5, [pc, #28]	; (8009358 <_read_r+0x20>)
 800933c:	4604      	mov	r4, r0
 800933e:	4608      	mov	r0, r1
 8009340:	4611      	mov	r1, r2
 8009342:	2200      	movs	r2, #0
 8009344:	602a      	str	r2, [r5, #0]
 8009346:	461a      	mov	r2, r3
 8009348:	f7f8 fddc 	bl	8001f04 <_read>
 800934c:	1c43      	adds	r3, r0, #1
 800934e:	d102      	bne.n	8009356 <_read_r+0x1e>
 8009350:	682b      	ldr	r3, [r5, #0]
 8009352:	b103      	cbz	r3, 8009356 <_read_r+0x1e>
 8009354:	6023      	str	r3, [r4, #0]
 8009356:	bd38      	pop	{r3, r4, r5, pc}
 8009358:	20000668 	.word	0x20000668

0800935c <_init>:
 800935c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935e:	bf00      	nop
 8009360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009362:	bc08      	pop	{r3}
 8009364:	469e      	mov	lr, r3
 8009366:	4770      	bx	lr

08009368 <_fini>:
 8009368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800936a:	bf00      	nop
 800936c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800936e:	bc08      	pop	{r3}
 8009370:	469e      	mov	lr, r3
 8009372:	4770      	bx	lr
