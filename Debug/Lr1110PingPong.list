
Lr1110PingPong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000923c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d10  0800937c  0800937c  0001937c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a08c  0800a08c  0001a08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a094  0800a094  0001a094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a098  0800a098  0001a098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  20000004  0800a09c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000090  0800a128  00020090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003a  2000012c  0800a1c1  0002012c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 0000000e  20000168  0800a1fb  00020168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 00000088  20000178  0800a209  00020178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000046c  20000200  0800a291  00020200  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000066c  0800a291  0002066c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 17 .debug_info   00067696  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000b51f  00000000  00000000  000878c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    00022710  00000000  00000000  00092de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 000024d8  00000000  00000000  000b54f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00002ce0  00000000  00000000  000b79d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  00011536  00000000  00000000  000ba6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   000446d9  00000000  00000000  000cbbe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    000db48e  00000000  00000000  001102bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      00000053  00000000  00000000  001eb74d  2**0
                  CONTENTS, READONLY
 26 .debug_frame  000072ec  00000000  00000000  001eb7a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000200 	.word	0x20000200
 800015c:	00000000 	.word	0x00000000
 8000160:	08009364 	.word	0x08009364

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000204 	.word	0x20000204
 800017c:	08009364 	.word	0x08009364

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <BoardCriticalSectionBegin>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000518:	f3ef 8310 	mrs	r3, PRIMASK
uint8_t Uart2TxBuffer[UART2_FIFO_TX_SIZE];
uint8_t Uart2RxBuffer[UART2_FIFO_RX_SIZE];

void BoardCriticalSectionBegin( uint32_t *mask )
{
    *mask = __get_PRIMASK( );
 800051c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800051e:	b672      	cpsid	i
    __disable_irq( );
}
 8000520:	4770      	bx	lr

08000522 <BoardCriticalSectionEnd>:
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000522:	6803      	ldr	r3, [r0, #0]
 8000524:	f383 8810 	msr	PRIMASK, r3

void BoardCriticalSectionEnd( uint32_t *mask )
{
    __set_PRIMASK( *mask );
}
 8000528:	4770      	bx	lr

0800052a <EXTI0_IRQHandler>:
#endif
    }
}

void EXTI0_IRQHandler( void )
{
 800052a:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_0 );
 800052c:	2001      	movs	r0, #1
 800052e:	f002 fb2b 	bl	8002b88 <HAL_GPIO_EXTI_IRQHandler>
}
 8000532:	bd08      	pop	{r3, pc}

08000534 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler( void )
{
 8000534:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_1 );
 8000536:	2002      	movs	r0, #2
 8000538:	f002 fb26 	bl	8002b88 <HAL_GPIO_EXTI_IRQHandler>
}
 800053c:	bd08      	pop	{r3, pc}

0800053e <EXTI2_IRQHandler>:

void EXTI2_IRQHandler( void )
{
 800053e:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_2 );
 8000540:	2004      	movs	r0, #4
 8000542:	f002 fb21 	bl	8002b88 <HAL_GPIO_EXTI_IRQHandler>
}
 8000546:	bd08      	pop	{r3, pc}

08000548 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler( void )
{
 8000548:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_3 );
 800054a:	2008      	movs	r0, #8
 800054c:	f002 fb1c 	bl	8002b88 <HAL_GPIO_EXTI_IRQHandler>
}
 8000550:	bd08      	pop	{r3, pc}

08000552 <EXTI9_5_IRQHandler>:
//{
//    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_4 );
//}

void EXTI9_5_IRQHandler( void )
{
 8000552:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_5 );
 8000554:	2020      	movs	r0, #32
 8000556:	f002 fb17 	bl	8002b88 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_6 );
 800055a:	2040      	movs	r0, #64	; 0x40
 800055c:	f002 fb14 	bl	8002b88 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 8000560:	2080      	movs	r0, #128	; 0x80
 8000562:	f002 fb11 	bl	8002b88 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_8 );
 8000566:	f44f 7080 	mov.w	r0, #256	; 0x100
 800056a:	f002 fb0d 	bl	8002b88 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
 800056e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000572:	f002 fb09 	bl	8002b88 <HAL_GPIO_EXTI_IRQHandler>
}
 8000576:	bd08      	pop	{r3, pc}

08000578 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler( void )
{
 8000578:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_10 );
 800057a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800057e:	f002 fb03 	bl	8002b88 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_11 );
 8000582:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000586:	f002 faff 	bl	8002b88 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_12 );
 800058a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800058e:	f002 fafb 	bl	8002b88 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_13 );
 8000592:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000596:	f002 faf7 	bl	8002b88 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_14 );
 800059a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800059e:	f002 faf3 	bl	8002b88 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
 80005a2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80005a6:	f002 faef 	bl	8002b88 <HAL_GPIO_EXTI_IRQHandler>
}
 80005aa:	bd08      	pop	{r3, pc}

080005ac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback( uint16_t gpioPin )
{
 80005ac:	b508      	push	{r3, lr}
    uint8_t callbackIndex = 0;

    if( gpioPin > 0 )
 80005ae:	2801      	cmp	r0, #1
 80005b0:	d906      	bls.n	80005c0 <HAL_GPIO_EXTI_Callback+0x14>
    uint8_t callbackIndex = 0;
 80005b2:	2300      	movs	r3, #0
    {
        while( gpioPin != 0x01 )
        {
            gpioPin = gpioPin >> 1;
 80005b4:	0840      	lsrs	r0, r0, #1
            callbackIndex++;
 80005b6:	3301      	adds	r3, #1
 80005b8:	b2db      	uxtb	r3, r3
        while( gpioPin != 0x01 )
 80005ba:	2801      	cmp	r0, #1
 80005bc:	d1fa      	bne.n	80005b4 <HAL_GPIO_EXTI_Callback+0x8>
 80005be:	e000      	b.n	80005c2 <HAL_GPIO_EXTI_Callback+0x16>
    uint8_t callbackIndex = 0;
 80005c0:	2300      	movs	r3, #0
        }
    }

    if( ( GpioIrq[callbackIndex] != NULL ) && ( GpioIrq[callbackIndex]->IrqHandler != NULL ) )
 80005c2:	4a04      	ldr	r2, [pc, #16]	; (80005d4 <HAL_GPIO_EXTI_Callback+0x28>)
 80005c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c8:	b11b      	cbz	r3, 80005d2 <HAL_GPIO_EXTI_Callback+0x26>
 80005ca:	691a      	ldr	r2, [r3, #16]
 80005cc:	b10a      	cbz	r2, 80005d2 <HAL_GPIO_EXTI_Callback+0x26>
    {
        GpioIrq[callbackIndex]->IrqHandler( GpioIrq[callbackIndex]->Context );
 80005ce:	68d8      	ldr	r0, [r3, #12]
 80005d0:	4790      	blx	r2
    }
}
 80005d2:	bd08      	pop	{r3, pc}
 80005d4:	2000021c 	.word	0x2000021c

080005d8 <LpmSetStopMode>:
    CRITICAL_SECTION_END( );
    return;
}

void LpmSetStopMode( LpmId_t id, LpmSetMode_t mode )
{
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	b083      	sub	sp, #12
 80005dc:	4605      	mov	r5, r0
 80005de:	460c      	mov	r4, r1
    CRITICAL_SECTION_BEGIN( );
 80005e0:	a801      	add	r0, sp, #4
 80005e2:	f7ff ff99 	bl	8000518 <BoardCriticalSectionBegin>

    switch( mode )
 80005e6:	b154      	cbz	r4, 80005fe <LpmSetStopMode+0x26>
 80005e8:	2c01      	cmp	r4, #1
 80005ea:	d103      	bne.n	80005f4 <LpmSetStopMode+0x1c>
    {
        case LPM_DISABLE:
        {
            StopModeDisable |= ( uint32_t )id;
 80005ec:	4b07      	ldr	r3, [pc, #28]	; (800060c <LpmSetStopMode+0x34>)
 80005ee:	6818      	ldr	r0, [r3, #0]
 80005f0:	4328      	orrs	r0, r5
 80005f2:	6018      	str	r0, [r3, #0]
        {
            break;
        }
    }

    CRITICAL_SECTION_END( );
 80005f4:	a801      	add	r0, sp, #4
 80005f6:	f7ff ff94 	bl	8000522 <BoardCriticalSectionEnd>
    return;
}
 80005fa:	b003      	add	sp, #12
 80005fc:	bd30      	pop	{r4, r5, pc}
            StopModeDisable &= ~( uint32_t )id;
 80005fe:	4b03      	ldr	r3, [pc, #12]	; (800060c <LpmSetStopMode+0x34>)
 8000600:	6818      	ldr	r0, [r3, #0]
 8000602:	ea20 0005 	bic.w	r0, r0, r5
 8000606:	6018      	str	r0, [r3, #0]
            break;
 8000608:	e7f4      	b.n	80005f4 <LpmSetStopMode+0x1c>
 800060a:	bf00      	nop
 800060c:	2000025c 	.word	0x2000025c

08000610 <RtcGetCalendarValue>:

  return( ( uint32_t )( calendarValue - RtcTimerContext.Time ) );
}

static uint64_t RtcGetCalendarValue( RTC_DateTypeDef* date, RTC_TimeTypeDef* time )
{
 8000610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000614:	4681      	mov	r9, r0
 8000616:	4688      	mov	r8, r1
    uint32_t seconds;

    // Make sure it is correct due to asynchronus nature of RTC
    do
    {
        firstRead = RTC->SSR;
 8000618:	4e28      	ldr	r6, [pc, #160]	; (80006bc <RtcGetCalendarValue+0xac>)
        HAL_RTC_GetDate( &RtcHandle, date, RTC_FORMAT_BIN );
 800061a:	4d29      	ldr	r5, [pc, #164]	; (80006c0 <RtcGetCalendarValue+0xb0>)
 800061c:	2400      	movs	r4, #0
        firstRead = RTC->SSR;
 800061e:	6ab7      	ldr	r7, [r6, #40]	; 0x28
        HAL_RTC_GetDate( &RtcHandle, date, RTC_FORMAT_BIN );
 8000620:	4622      	mov	r2, r4
 8000622:	4649      	mov	r1, r9
 8000624:	4628      	mov	r0, r5
 8000626:	f004 f82f 	bl	8004688 <HAL_RTC_GetDate>
        HAL_RTC_GetTime( &RtcHandle, time, RTC_FORMAT_BIN );
 800062a:	4622      	mov	r2, r4
 800062c:	4641      	mov	r1, r8
 800062e:	4628      	mov	r0, r5
 8000630:	f003 ff0c 	bl	800444c <HAL_RTC_GetTime>
    }while( firstRead != RTC->SSR );
 8000634:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8000636:	42bb      	cmp	r3, r7
 8000638:	d1f1      	bne.n	800061e <RtcGetCalendarValue+0xe>

    // Calculte amount of elapsed days since 01/01/2000
    seconds = DIVC( ( DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR ) * date->Year , 4 );
 800063a:	f899 2003 	ldrb.w	r2, [r9, #3]
 800063e:	f240 53b5 	movw	r3, #1461	; 0x5b5
 8000642:	fb03 f302 	mul.w	r3, r3, r2
 8000646:	1cdc      	adds	r4, r3, #3

    correction = ( ( date->Year % 4 ) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM;
 8000648:	f012 0f03 	tst.w	r2, #3
 800064c:	4a1d      	ldr	r2, [pc, #116]	; (80006c4 <RtcGetCalendarValue+0xb4>)
 800064e:	481e      	ldr	r0, [pc, #120]	; (80006c8 <RtcGetCalendarValue+0xb8>)
 8000650:	bf08      	it	eq
 8000652:	4610      	moveq	r0, r2

    seconds += ( DIVC( ( date->Month-1 ) * ( 30 + 31 ), 2 ) - ( ( ( correction >> ( ( date->Month - 1 ) * 2 ) ) & 0x03 ) ) );
 8000654:	f899 2001 	ldrb.w	r2, [r9, #1]
 8000658:	3a01      	subs	r2, #1
 800065a:	ebc2 1302 	rsb	r3, r2, r2, lsl #4
 800065e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000662:	3301      	adds	r3, #1
 8000664:	eb03 71d3 	add.w	r1, r3, r3, lsr #31

    seconds += ( date->Date -1 );
 8000668:	f899 3002 	ldrb.w	r3, [r9, #2]
 800066c:	3b01      	subs	r3, #1
 800066e:	eb03 0394 	add.w	r3, r3, r4, lsr #2
 8000672:	eb03 0361 	add.w	r3, r3, r1, asr #1
    seconds += ( DIVC( ( date->Month-1 ) * ( 30 + 31 ), 2 ) - ( ( ( correction >> ( ( date->Month - 1 ) * 2 ) ) & 0x03 ) ) );
 8000676:	0052      	lsls	r2, r2, #1
 8000678:	fa20 f202 	lsr.w	r2, r0, r2
 800067c:	f002 0203 	and.w	r2, r2, #3
    seconds += ( date->Date -1 );
 8000680:	1a9b      	subs	r3, r3, r2
    // Convert from days to seconds
    seconds *= SECONDS_IN_1DAY;

    seconds += ( ( uint32_t )time->Seconds + 
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
                 ( ( uint32_t )time->Hours * SECONDS_IN_1HOUR ) ) ;
 8000682:	f898 1000 	ldrb.w	r1, [r8]
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
 8000686:	f898 2001 	ldrb.w	r2, [r8, #1]
 800068a:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800068e:	0092      	lsls	r2, r2, #2
 8000690:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8000694:	fb00 2201 	mla	r2, r0, r1, r2
    seconds += ( ( uint32_t )time->Seconds + 
 8000698:	f898 1002 	ldrb.w	r1, [r8, #2]
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
 800069c:	440a      	add	r2, r1
    seconds += ( ( uint32_t )time->Seconds + 
 800069e:	490b      	ldr	r1, [pc, #44]	; (80006cc <RtcGetCalendarValue+0xbc>)
 80006a0:	fb01 2303 	mla	r3, r1, r3, r2

    calendarValue = ( ( ( uint64_t )seconds ) << N_PREDIV_S ) + ( PREDIV_S - time->SubSeconds );
 80006a4:	0d99      	lsrs	r1, r3, #22
 80006a6:	0298      	lsls	r0, r3, #10
 80006a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80006ac:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 80006b0:	3303      	adds	r3, #3

    return( calendarValue );
}
 80006b2:	18c0      	adds	r0, r0, r3
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006bc:	40002800 	.word	0x40002800
 80006c0:	20000288 	.word	0x20000288
 80006c4:	00445550 	.word	0x00445550
 80006c8:	0099aaa0 	.word	0x0099aaa0
 80006cc:	00015180 	.word	0x00015180

080006d0 <RtcSetTimerContext>:
{
 80006d0:	b510      	push	{r4, lr}
    RtcTimerContext.Time = ( uint32_t )RtcGetCalendarValue( &RtcTimerContext.CalendarDate, &RtcTimerContext.CalendarTime );
 80006d2:	4c04      	ldr	r4, [pc, #16]	; (80006e4 <RtcSetTimerContext+0x14>)
 80006d4:	1d21      	adds	r1, r4, #4
 80006d6:	f104 0018 	add.w	r0, r4, #24
 80006da:	f7ff ff99 	bl	8000610 <RtcGetCalendarValue>
 80006de:	6020      	str	r0, [r4, #0]
}
 80006e0:	bd10      	pop	{r4, pc}
 80006e2:	bf00      	nop
 80006e4:	200002ac 	.word	0x200002ac

080006e8 <RtcGetTimerContext>:
}
 80006e8:	4b01      	ldr	r3, [pc, #4]	; (80006f0 <RtcGetTimerContext+0x8>)
 80006ea:	6818      	ldr	r0, [r3, #0]
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	200002ac 	.word	0x200002ac

080006f4 <RtcGetMinimumTimeout>:
}
 80006f4:	2003      	movs	r0, #3
 80006f6:	4770      	bx	lr

080006f8 <RtcStopAlarm>:
{
 80006f8:	b510      	push	{r4, lr}
    HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 80006fa:	4c08      	ldr	r4, [pc, #32]	; (800071c <RtcStopAlarm+0x24>)
 80006fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000700:	4620      	mov	r0, r4
 8000702:	f003 fbdd 	bl	8003ec0 <HAL_RTC_DeactivateAlarm>
    __HAL_RTC_ALARM_CLEAR_FLAG( &RtcHandle, RTC_FLAG_ALRAF );
 8000706:	6822      	ldr	r2, [r4, #0]
 8000708:	68d3      	ldr	r3, [r2, #12]
 800070a:	b2db      	uxtb	r3, r3
 800070c:	f463 73c0 	orn	r3, r3, #384	; 0x180
 8000710:	60d3      	str	r3, [r2, #12]
    __HAL_RTC_ALARM_EXTI_CLEAR_FLAG( );
 8000712:	4b03      	ldr	r3, [pc, #12]	; (8000720 <RtcStopAlarm+0x28>)
 8000714:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000718:	60da      	str	r2, [r3, #12]
}
 800071a:	bd10      	pop	{r4, pc}
 800071c:	20000288 	.word	0x20000288
 8000720:	58000800 	.word	0x58000800

08000724 <RtcStartAlarm>:
{
 8000724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000728:	b083      	sub	sp, #12
 800072a:	4680      	mov	r8, r0
    RTC_TimeTypeDef time = RtcTimerContext.CalendarTime;
 800072c:	4b50      	ldr	r3, [pc, #320]	; (8000870 <RtcStartAlarm+0x14c>)
 800072e:	791c      	ldrb	r4, [r3, #4]
 8000730:	795a      	ldrb	r2, [r3, #5]
 8000732:	9201      	str	r2, [sp, #4]
 8000734:	799e      	ldrb	r6, [r3, #6]
 8000736:	f893 9007 	ldrb.w	r9, [r3, #7]
 800073a:	689f      	ldr	r7, [r3, #8]
    RTC_DateTypeDef date = RtcTimerContext.CalendarDate;
 800073c:	f893 a019 	ldrb.w	sl, [r3, #25]
 8000740:	7e9d      	ldrb	r5, [r3, #26]
 8000742:	f893 b01b 	ldrb.w	fp, [r3, #27]
    RtcStopAlarm( );
 8000746:	f7ff ffd7 	bl	80006f8 <RtcStopAlarm>
    rtcAlarmSubSeconds =  PREDIV_S - time.SubSeconds;
 800074a:	f5c7 777f 	rsb	r7, r7, #1020	; 0x3fc
 800074e:	3703      	adds	r7, #3
    rtcAlarmSubSeconds += ( timeout & PREDIV_S );
 8000750:	f3c8 0309 	ubfx	r3, r8, #0, #10
 8000754:	fa13 f787 	uxtah	r7, r3, r7
 8000758:	b2bf      	uxth	r7, r7
    timeout >>= N_PREDIV_S;
 800075a:	ea4f 2398 	mov.w	r3, r8, lsr #10
    rtcAlarmDays =  date.Date;
 800075e:	b2ad      	uxth	r5, r5
    while( timeout >= TM_SECONDS_IN_1DAY )
 8000760:	4a44      	ldr	r2, [pc, #272]	; (8000874 <RtcStartAlarm+0x150>)
 8000762:	ebb2 2f98 	cmp.w	r2, r8, lsr #10
 8000766:	d207      	bcs.n	8000778 <RtcStartAlarm+0x54>
        timeout -= TM_SECONDS_IN_1DAY;
 8000768:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 800076c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
        rtcAlarmDays++;
 8000770:	3501      	adds	r5, #1
 8000772:	b2ad      	uxth	r5, r5
    while( timeout >= TM_SECONDS_IN_1DAY )
 8000774:	4293      	cmp	r3, r2
 8000776:	d8f7      	bhi.n	8000768 <RtcStartAlarm+0x44>
    rtcAlarmHours = time.Hours;
 8000778:	b2a4      	uxth	r4, r4
    while( timeout >= TM_SECONDS_IN_1HOUR )
 800077a:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800077e:	d306      	bcc.n	800078e <RtcStartAlarm+0x6a>
        timeout -= TM_SECONDS_IN_1HOUR;
 8000780:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
        rtcAlarmHours++;
 8000784:	3401      	adds	r4, #1
 8000786:	b2a4      	uxth	r4, r4
    while( timeout >= TM_SECONDS_IN_1HOUR )
 8000788:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800078c:	d2f8      	bcs.n	8000780 <RtcStartAlarm+0x5c>
    rtcAlarmMinutes = time.Minutes;
 800078e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    while( timeout >= TM_SECONDS_IN_1MINUTE )
 8000792:	2b3b      	cmp	r3, #59	; 0x3b
 8000794:	d904      	bls.n	80007a0 <RtcStartAlarm+0x7c>
        timeout -= TM_SECONDS_IN_1MINUTE;
 8000796:	3b3c      	subs	r3, #60	; 0x3c
        rtcAlarmMinutes++;
 8000798:	3201      	adds	r2, #1
 800079a:	b292      	uxth	r2, r2
    while( timeout >= TM_SECONDS_IN_1MINUTE )
 800079c:	2b3b      	cmp	r3, #59	; 0x3b
 800079e:	d8fa      	bhi.n	8000796 <RtcStartAlarm+0x72>
    rtcAlarmSeconds =  time.Seconds + timeout;
 80007a0:	441e      	add	r6, r3
 80007a2:	b2b6      	uxth	r6, r6
    while( rtcAlarmSubSeconds >= ( PREDIV_S + 1 ) )
 80007a4:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80007a8:	d353      	bcc.n	8000852 <RtcStartAlarm+0x12e>
    rtcAlarmSubSeconds += ( timeout & PREDIV_S );
 80007aa:	463b      	mov	r3, r7
        rtcAlarmSubSeconds -= ( PREDIV_S + 1 );
 80007ac:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80007b0:	b29b      	uxth	r3, r3
    while( rtcAlarmSubSeconds >= ( PREDIV_S + 1 ) )
 80007b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007b6:	d2f9      	bcs.n	80007ac <RtcStartAlarm+0x88>
 80007b8:	f3c7 0009 	ubfx	r0, r7, #0, #10
 80007bc:	f5a7 6380 	sub.w	r3, r7, #1024	; 0x400
 80007c0:	f3c3 2385 	ubfx	r3, r3, #10, #6
 80007c4:	3301      	adds	r3, #1
 80007c6:	441e      	add	r6, r3
 80007c8:	b2b6      	uxth	r6, r6
    while( rtcAlarmSeconds >= TM_SECONDS_IN_1MINUTE )
 80007ca:	2e3b      	cmp	r6, #59	; 0x3b
 80007cc:	d905      	bls.n	80007da <RtcStartAlarm+0xb6>
        rtcAlarmSeconds -= TM_SECONDS_IN_1MINUTE;
 80007ce:	3e3c      	subs	r6, #60	; 0x3c
 80007d0:	b2b6      	uxth	r6, r6
        rtcAlarmMinutes++;
 80007d2:	3201      	adds	r2, #1
 80007d4:	b292      	uxth	r2, r2
    while( rtcAlarmSeconds >= TM_SECONDS_IN_1MINUTE )
 80007d6:	2e3b      	cmp	r6, #59	; 0x3b
 80007d8:	d8f9      	bhi.n	80007ce <RtcStartAlarm+0xaa>
    while( rtcAlarmMinutes >= TM_MINUTES_IN_1HOUR )
 80007da:	2a3b      	cmp	r2, #59	; 0x3b
 80007dc:	d905      	bls.n	80007ea <RtcStartAlarm+0xc6>
        rtcAlarmMinutes -= TM_MINUTES_IN_1HOUR;
 80007de:	3a3c      	subs	r2, #60	; 0x3c
 80007e0:	b292      	uxth	r2, r2
        rtcAlarmHours++;
 80007e2:	3401      	adds	r4, #1
 80007e4:	b2a4      	uxth	r4, r4
    while( rtcAlarmMinutes >= TM_MINUTES_IN_1HOUR )
 80007e6:	2a3b      	cmp	r2, #59	; 0x3b
 80007e8:	d8f9      	bhi.n	80007de <RtcStartAlarm+0xba>
    while( rtcAlarmHours >= TM_HOURS_IN_1DAY )
 80007ea:	2c17      	cmp	r4, #23
 80007ec:	d905      	bls.n	80007fa <RtcStartAlarm+0xd6>
        rtcAlarmHours -= TM_HOURS_IN_1DAY;
 80007ee:	3c18      	subs	r4, #24
 80007f0:	b2a4      	uxth	r4, r4
        rtcAlarmDays++;
 80007f2:	3501      	adds	r5, #1
 80007f4:	b2ad      	uxth	r5, r5
    while( rtcAlarmHours >= TM_HOURS_IN_1DAY )
 80007f6:	2c17      	cmp	r4, #23
 80007f8:	d8f9      	bhi.n	80007ee <RtcStartAlarm+0xca>
    if( date.Year % 4 == 0 ) 
 80007fa:	f01b 0f03 	tst.w	fp, #3
 80007fe:	d12a      	bne.n	8000856 <RtcStartAlarm+0x132>
        if( rtcAlarmDays > DaysInMonthLeapYear[date.Month - 1] )
 8000800:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <RtcStartAlarm+0x154>)
 8000802:	449a      	add	sl, r3
 8000804:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 8000808:	b299      	uxth	r1, r3
 800080a:	42a9      	cmp	r1, r5
 800080c:	d204      	bcs.n	8000818 <RtcStartAlarm+0xf4>
            rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[date.Month - 1];
 800080e:	fb95 f1f3 	sdiv	r1, r5, r3
 8000812:	fb03 5511 	mls	r5, r3, r1, r5
 8000816:	b2ad      	uxth	r5, r5
    RtcAlarm.AlarmTime.SubSeconds     = PREDIV_S - rtcAlarmSubSeconds;
 8000818:	4918      	ldr	r1, [pc, #96]	; (800087c <RtcStartAlarm+0x158>)
 800081a:	f5c0 707f 	rsb	r0, r0, #1020	; 0x3fc
 800081e:	3003      	adds	r0, #3
 8000820:	6048      	str	r0, [r1, #4]
    RtcAlarm.AlarmSubSecondMask       = ALARM_SUBSECOND_MASK; 
 8000822:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 8000826:	618b      	str	r3, [r1, #24]
    RtcAlarm.AlarmTime.Seconds        = rtcAlarmSeconds;
 8000828:	708e      	strb	r6, [r1, #2]
    RtcAlarm.AlarmTime.Minutes        = rtcAlarmMinutes;
 800082a:	704a      	strb	r2, [r1, #1]
    RtcAlarm.AlarmTime.Hours          = rtcAlarmHours;
 800082c:	700c      	strb	r4, [r1, #0]
    RtcAlarm.AlarmDateWeekDay         = ( uint8_t )rtcAlarmDays;
 800082e:	f881 5020 	strb.w	r5, [r1, #32]
    RtcAlarm.AlarmTime.TimeFormat     = time.TimeFormat;
 8000832:	f881 9003 	strb.w	r9, [r1, #3]
    RtcAlarm.AlarmDateWeekDaySel      = RTC_ALARMDATEWEEKDAYSEL_DATE; 
 8000836:	2200      	movs	r2, #0
 8000838:	61ca      	str	r2, [r1, #28]
    RtcAlarm.AlarmMask                = RTC_ALARMMASK_NONE;
 800083a:	614a      	str	r2, [r1, #20]
    RtcAlarm.Alarm                    = RTC_ALARM_A;
 800083c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000840:	624b      	str	r3, [r1, #36]	; 0x24
    RtcAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000842:	60ca      	str	r2, [r1, #12]
    RtcAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000844:	610a      	str	r2, [r1, #16]
    HAL_RTC_SetAlarm_IT( &RtcHandle, &RtcAlarm, RTC_FORMAT_BIN );
 8000846:	480e      	ldr	r0, [pc, #56]	; (8000880 <RtcStartAlarm+0x15c>)
 8000848:	f003 ff48 	bl	80046dc <HAL_RTC_SetAlarm_IT>
}
 800084c:	b003      	add	sp, #12
 800084e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rtcAlarmSubSeconds += ( timeout & PREDIV_S );
 8000852:	4638      	mov	r0, r7
 8000854:	e7b9      	b.n	80007ca <RtcStartAlarm+0xa6>
        if( rtcAlarmDays > DaysInMonth[date.Month - 1] )
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <RtcStartAlarm+0x160>)
 8000858:	449a      	add	sl, r3
 800085a:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 800085e:	b299      	uxth	r1, r3
 8000860:	42a9      	cmp	r1, r5
 8000862:	d2d9      	bcs.n	8000818 <RtcStartAlarm+0xf4>
            rtcAlarmDays = rtcAlarmDays % DaysInMonth[date.Month - 1];
 8000864:	fb95 f1f3 	sdiv	r1, r5, r3
 8000868:	fb03 5511 	mls	r5, r3, r1, r5
 800086c:	b2ad      	uxth	r5, r5
 800086e:	e7d3      	b.n	8000818 <RtcStartAlarm+0xf4>
 8000870:	200002ac 	.word	0x200002ac
 8000874:	0001517f 	.word	0x0001517f
 8000878:	080093f8 	.word	0x080093f8
 800087c:	20000260 	.word	0x20000260
 8000880:	20000288 	.word	0x20000288
 8000884:	080093ec 	.word	0x080093ec

08000888 <RtcGetTimerElapsedTime>:
{
 8000888:	b500      	push	{lr}
 800088a:	b087      	sub	sp, #28
  uint32_t calendarValue = ( uint32_t )RtcGetCalendarValue( &date, &time );
 800088c:	a901      	add	r1, sp, #4
 800088e:	4668      	mov	r0, sp
 8000890:	f7ff febe 	bl	8000610 <RtcGetCalendarValue>
  return( ( uint32_t )( calendarValue - RtcTimerContext.Time ) );
 8000894:	4b02      	ldr	r3, [pc, #8]	; (80008a0 <RtcGetTimerElapsedTime+0x18>)
 8000896:	681b      	ldr	r3, [r3, #0]
}
 8000898:	1ac0      	subs	r0, r0, r3
 800089a:	b007      	add	sp, #28
 800089c:	f85d fb04 	ldr.w	pc, [sp], #4
 80008a0:	200002ac 	.word	0x200002ac

080008a4 <RtcSetAlarm>:
{
 80008a4:	b510      	push	{r4, lr}
 80008a6:	4604      	mov	r4, r0
    if( ( int64_t )MIN_ALARM_DELAY < ( int64_t )( timeout - RtcGetTimerElapsedTime( ) ) )
 80008a8:	f7ff ffee 	bl	8000888 <RtcGetTimerElapsedTime>
 80008ac:	1a20      	subs	r0, r4, r0
 80008ae:	2803      	cmp	r0, #3
        LpmSetStopMode( LPM_RTC_ID, LPM_ENABLE );
 80008b0:	bf8c      	ite	hi
 80008b2:	2100      	movhi	r1, #0
        LpmSetStopMode( LPM_RTC_ID, LPM_DISABLE );
 80008b4:	2101      	movls	r1, #1
 80008b6:	2004      	movs	r0, #4
 80008b8:	f7ff fe8e 	bl	80005d8 <LpmSetStopMode>
    RtcStartAlarm( timeout );
 80008bc:	4620      	mov	r0, r4
 80008be:	f7ff ff31 	bl	8000724 <RtcStartAlarm>
}
 80008c2:	bd10      	pop	{r4, pc}

080008c4 <HAL_RTC_AlarmAEventCallback>:
 * \brief  Alarm A callback.
 *
 * \param [IN] hrtc RTC handle
 */
void HAL_RTC_AlarmAEventCallback( RTC_HandleTypeDef *hrtc )
{
 80008c4:	b508      	push	{r3, lr}
    TimerIrqHandler( );
 80008c6:	f000 f81d 	bl	8000904 <TimerIrqHandler>
}
 80008ca:	bd08      	pop	{r3, pc}

080008cc <myRadioOnDioIrq>:
    IrqFired = true;
}

void myRadioOnDioIrq(void)
{
	IrqFired = true;
 80008cc:	4b01      	ldr	r3, [pc, #4]	; (80008d4 <myRadioOnDioIrq+0x8>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	701a      	strb	r2, [r3, #0]
}
 80008d2:	4770      	bx	lr
 80008d4:	200002c8 	.word	0x200002c8

080008d8 <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 80008d8:	b570      	push	{r4, r5, r6, lr}
 80008da:	4604      	mov	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
 80008dc:	f7ff ff0a 	bl	80006f4 <RtcGetMinimumTimeout>
 80008e0:	4605      	mov	r5, r0
    obj->IsNext2Expire = true;
 80008e2:	2301      	movs	r3, #1
 80008e4:	7263      	strb	r3, [r4, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 80008e6:	6826      	ldr	r6, [r4, #0]
 80008e8:	f7ff ffce 	bl	8000888 <RtcGetTimerElapsedTime>
 80008ec:	4428      	add	r0, r5
 80008ee:	4286      	cmp	r6, r0
 80008f0:	d303      	bcc.n	80008fa <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
    }
    RtcSetAlarm( obj->Timestamp );
 80008f2:	6820      	ldr	r0, [r4, #0]
 80008f4:	f7ff ffd6 	bl	80008a4 <RtcSetAlarm>
}
 80008f8:	bd70      	pop	{r4, r5, r6, pc}
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 80008fa:	f7ff ffc5 	bl	8000888 <RtcGetTimerElapsedTime>
 80008fe:	4405      	add	r5, r0
 8000900:	6025      	str	r5, [r4, #0]
 8000902:	e7f6      	b.n	80008f2 <TimerSetTimeout+0x1a>

08000904 <TimerIrqHandler>:
{
 8000904:	b570      	push	{r4, r5, r6, lr}
    uint32_t old =  RtcGetTimerContext( );
 8000906:	f7ff feef 	bl	80006e8 <RtcGetTimerContext>
 800090a:	4604      	mov	r4, r0
    uint32_t now =  RtcSetTimerContext( );
 800090c:	f7ff fee0 	bl	80006d0 <RtcSetTimerContext>
    if( TimerListHead != NULL )
 8000910:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <TimerIrqHandler+0x8c>)
 8000912:	6819      	ldr	r1, [r3, #0]
 8000914:	2900      	cmp	r1, #0
 8000916:	d035      	beq.n	8000984 <TimerIrqHandler+0x80>
 8000918:	4602      	mov	r2, r0
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 800091a:	694b      	ldr	r3, [r1, #20]
 800091c:	b16b      	cbz	r3, 800093a <TimerIrqHandler+0x36>
    uint32_t deltaContext = now - old; // intentional wrap around
 800091e:	1b05      	subs	r5, r0, r4
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 8000920:	4608      	mov	r0, r1
                next->Timestamp = 0;
 8000922:	2600      	movs	r6, #0
                next->Timestamp -= deltaContext;
 8000924:	1aa4      	subs	r4, r4, r2
            if( next->Timestamp > deltaContext )
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	42aa      	cmp	r2, r5
                next->Timestamp -= deltaContext;
 800092a:	bf8c      	ite	hi
 800092c:	1912      	addhi	r2, r2, r4
                next->Timestamp = 0;
 800092e:	4632      	movls	r2, r6
 8000930:	601a      	str	r2, [r3, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 8000932:	6940      	ldr	r0, [r0, #20]
 8000934:	6943      	ldr	r3, [r0, #20]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d1f5      	bne.n	8000926 <TimerIrqHandler+0x22>
        TimerListHead = TimerListHead->Next;
 800093a:	694a      	ldr	r2, [r1, #20]
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <TimerIrqHandler+0x8c>)
 800093e:	601a      	str	r2, [r3, #0]
        cur->IsStarted = false;
 8000940:	2300      	movs	r3, #0
 8000942:	720b      	strb	r3, [r1, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 8000944:	68cb      	ldr	r3, [r1, #12]
 8000946:	b30b      	cbz	r3, 800098c <TimerIrqHandler+0x88>
 8000948:	6908      	ldr	r0, [r1, #16]
 800094a:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 800094c:	4b10      	ldr	r3, [pc, #64]	; (8000990 <TimerIrqHandler+0x8c>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	b1c3      	cbz	r3, 8000984 <TimerIrqHandler+0x80>
        cur = TimerListHead;
 8000952:	4c0f      	ldr	r4, [pc, #60]	; (8000990 <TimerIrqHandler+0x8c>)
        cur->IsStarted = false;
 8000954:	2600      	movs	r6, #0
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 8000956:	681d      	ldr	r5, [r3, #0]
 8000958:	f7ff ff96 	bl	8000888 <RtcGetTimerElapsedTime>
 800095c:	4285      	cmp	r5, r0
 800095e:	d20c      	bcs.n	800097a <TimerIrqHandler+0x76>
        cur = TimerListHead;
 8000960:	6823      	ldr	r3, [r4, #0]
        TimerListHead = TimerListHead->Next;
 8000962:	695a      	ldr	r2, [r3, #20]
 8000964:	6022      	str	r2, [r4, #0]
        cur->IsStarted = false;
 8000966:	721e      	strb	r6, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 8000968:	68da      	ldr	r2, [r3, #12]
 800096a:	b12a      	cbz	r2, 8000978 <TimerIrqHandler+0x74>
 800096c:	6918      	ldr	r0, [r3, #16]
 800096e:	4790      	blx	r2
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 8000970:	6823      	ldr	r3, [r4, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d1ef      	bne.n	8000956 <TimerIrqHandler+0x52>
 8000976:	e005      	b.n	8000984 <TimerIrqHandler+0x80>
        ExecuteCallBack( cur->Callback, cur->Context );
 8000978:	e7fe      	b.n	8000978 <TimerIrqHandler+0x74>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 800097a:	4b05      	ldr	r3, [pc, #20]	; (8000990 <TimerIrqHandler+0x8c>)
 800097c:	6818      	ldr	r0, [r3, #0]
 800097e:	b108      	cbz	r0, 8000984 <TimerIrqHandler+0x80>
 8000980:	7a43      	ldrb	r3, [r0, #9]
 8000982:	b103      	cbz	r3, 8000986 <TimerIrqHandler+0x82>
}
 8000984:	bd70      	pop	{r4, r5, r6, pc}
        TimerSetTimeout( TimerListHead );
 8000986:	f7ff ffa7 	bl	80008d8 <TimerSetTimeout>
}
 800098a:	e7fb      	b.n	8000984 <TimerIrqHandler+0x80>
        ExecuteCallBack( cur->Callback, cur->Context );
 800098c:	e7fe      	b.n	800098c <TimerIrqHandler+0x88>
 800098e:	bf00      	nop
 8000990:	200002cc 	.word	0x200002cc

08000994 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000994:	b530      	push	{r4, r5, lr}
 8000996:	b089      	sub	sp, #36	; 0x24
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000998:	ac01      	add	r4, sp, #4
 800099a:	4d08      	ldr	r5, [pc, #32]	; (80009bc <APPD_EnableCPU2+0x28>)
 800099c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800099e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009a4:	c403      	stmia	r4!, {r0, r1}
 80009a6:	f824 2b02 	strh.w	r2, [r4], #2
 80009aa:	0c12      	lsrs	r2, r2, #16
 80009ac:	7022      	strb	r2, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80009ae:	f006 fc1b 	bl	80071e8 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80009b2:	a801      	add	r0, sp, #4
 80009b4:	f006 f8f5 	bl	8006ba2 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
}
 80009b8:	b009      	add	sp, #36	; 0x24
 80009ba:	bd30      	pop	{r4, r5, pc}
 80009bc:	0800937c 	.word	0x0800937c

080009c0 <DbgOutputTraces>:
/* USER CODE END DbgOutputInit */
  return;
}

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 80009c0:	b508      	push	{r3, lr}
 80009c2:	4613      	mov	r3, r2
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 80009c4:	460a      	mov	r2, r1
 80009c6:	4601      	mov	r1, r0
 80009c8:	2000      	movs	r0, #0
 80009ca:	f000 fef7 	bl	80017bc <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
}
 80009ce:	bd08      	pop	{r3, pc}

080009d0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
  UNUSED(status);
  return;
}
 80009d0:	4770      	bx	lr
	...

080009d4 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80009d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009d8:	b088      	sub	sp, #32
 80009da:	4604      	mov	r4, r0
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80009dc:	f8d0 8004 	ldr.w	r8, [r0, #4]

  /* Read the firmware version of both the wireless firmware and the FUS */
  SHCI_GetWirelessFwInfo( &WirelessInfo );
 80009e0:	a804      	add	r0, sp, #16
 80009e2:	f006 f8fb 	bl	8006bdc <SHCI_GetWirelessFwInfo>
  APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 80009e6:	4f9a      	ldr	r7, [pc, #616]	; (8000c50 <APPE_SysUserEvtRx+0x27c>)
 80009e8:	4638      	mov	r0, r7
 80009ea:	f006 fc49 	bl	8007280 <DbgTraceGetFileName>
 80009ee:	4601      	mov	r1, r0
 80009f0:	4e98      	ldr	r6, [pc, #608]	; (8000c54 <APPE_SysUserEvtRx+0x280>)
 80009f2:	4d99      	ldr	r5, [pc, #612]	; (8000c58 <APPE_SysUserEvtRx+0x284>)
 80009f4:	f240 1369 	movw	r3, #361	; 0x169
 80009f8:	4632      	mov	r2, r6
 80009fa:	4628      	mov	r0, r5
 80009fc:	f007 fcc6 	bl	800838c <iprintf>
 8000a00:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8000a04:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8000a08:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8000a0c:	4893      	ldr	r0, [pc, #588]	; (8000c5c <APPE_SysUserEvtRx+0x288>)
 8000a0e:	f007 fcbd 	bl	800838c <iprintf>
  APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8000a12:	4638      	mov	r0, r7
 8000a14:	f006 fc34 	bl	8007280 <DbgTraceGetFileName>
 8000a18:	4601      	mov	r1, r0
 8000a1a:	f44f 73b5 	mov.w	r3, #362	; 0x16a
 8000a1e:	4632      	mov	r2, r6
 8000a20:	4628      	mov	r0, r5
 8000a22:	f007 fcb3 	bl	800838c <iprintf>
 8000a26:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8000a2a:	488d      	ldr	r0, [pc, #564]	; (8000c60 <APPE_SysUserEvtRx+0x28c>)
 8000a2c:	f007 fcae 	bl	800838c <iprintf>
  APP_DBG_MSG("FUS version %d.%d.%d\n\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8000a30:	4638      	mov	r0, r7
 8000a32:	f006 fc25 	bl	8007280 <DbgTraceGetFileName>
 8000a36:	4601      	mov	r1, r0
 8000a38:	f240 136b 	movw	r3, #363	; 0x16b
 8000a3c:	4632      	mov	r2, r6
 8000a3e:	4628      	mov	r0, r5
 8000a40:	f007 fca4 	bl	800838c <iprintf>
 8000a44:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8000a48:	f89d 201b 	ldrb.w	r2, [sp, #27]
 8000a4c:	f89d 101a 	ldrb.w	r1, [sp, #26]
 8000a50:	4884      	ldr	r0, [pc, #528]	; (8000c64 <APPE_SysUserEvtRx+0x290>)
 8000a52:	f007 fc9b 	bl	800838c <iprintf>

  switch(p_sys_event->subevtcode)
 8000a56:	f8b8 300b 	ldrh.w	r3, [r8, #11]
 8000a5a:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000a5e:	2b07      	cmp	r3, #7
 8000a60:	f200 80b6 	bhi.w	8000bd0 <APPE_SysUserEvtRx+0x1fc>
 8000a64:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000a68:	00660008 	.word	0x00660008
 8000a6c:	00b40093 	.word	0x00b40093
 8000a70:	00c700b7 	.word	0x00c700b7
 8000a74:	00e500d5 	.word	0x00e500d5
static void APPE_SysEvtReadyProcessing( void * pPayload )
{
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000a78:	2300      	movs	r3, #0
 8000a7a:	9300      	str	r3, [sp, #0]
 8000a7c:	9301      	str	r3, [sp, #4]
 8000a7e:	9302      	str	r3, [sp, #8]
 8000a80:	f8ad 300c 	strh.w	r3, [sp, #12]
  uint32_t RevisionID=0;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;

  if(p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000a84:	6863      	ldr	r3, [r4, #4]
 8000a86:	7b5b      	ldrb	r3, [r3, #13]
 8000a88:	b17b      	cbz	r3, 8000aaa <APPE_SysUserEvtRx+0xd6>
    (void)SHCI_C2_Config(&config_param);

    APP_BLE_Init( );
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
  }
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d042      	beq.n	8000b14 <APPE_SysUserEvtRx+0x140>
    /* The packet shall not be released as this is not supported by the FUS */
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
  }
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n");
 8000a8e:	4870      	ldr	r0, [pc, #448]	; (8000c50 <APPE_SysUserEvtRx+0x27c>)
 8000a90:	f006 fbf6 	bl	8007280 <DbgTraceGetFileName>
 8000a94:	4601      	mov	r1, r0
 8000a96:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8000a9a:	4a73      	ldr	r2, [pc, #460]	; (8000c68 <APPE_SysUserEvtRx+0x294>)
 8000a9c:	486e      	ldr	r0, [pc, #440]	; (8000c58 <APPE_SysUserEvtRx+0x284>)
 8000a9e:	f007 fc75 	bl	800838c <iprintf>
 8000aa2:	4872      	ldr	r0, [pc, #456]	; (8000c6c <APPE_SysUserEvtRx+0x298>)
 8000aa4:	f007 fcf8 	bl	8008498 <puts>
  }

  return;
 8000aa8:	e092      	b.n	8000bd0 <APPE_SysUserEvtRx+0x1fc>
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - WIRELESS_FW_RUNNING \n");
 8000aaa:	4f69      	ldr	r7, [pc, #420]	; (8000c50 <APPE_SysUserEvtRx+0x27c>)
 8000aac:	4638      	mov	r0, r7
 8000aae:	f006 fbe7 	bl	8007280 <DbgTraceGetFileName>
 8000ab2:	4601      	mov	r1, r0
 8000ab4:	4e6c      	ldr	r6, [pc, #432]	; (8000c68 <APPE_SysUserEvtRx+0x294>)
 8000ab6:	4d68      	ldr	r5, [pc, #416]	; (8000c58 <APPE_SysUserEvtRx+0x284>)
 8000ab8:	f240 13c3 	movw	r3, #451	; 0x1c3
 8000abc:	4632      	mov	r2, r6
 8000abe:	4628      	mov	r0, r5
 8000ac0:	f007 fc64 	bl	800838c <iprintf>
 8000ac4:	486a      	ldr	r0, [pc, #424]	; (8000c70 <APPE_SysUserEvtRx+0x29c>)
 8000ac6:	f007 fce7 	bl	8008498 <puts>
    APPD_EnableCPU2( );
 8000aca:	f7ff ff63 	bl	8000994 <APPD_EnableCPU2>
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000ace:	230d      	movs	r3, #13
 8000ad0:	f88d 3000 	strb.w	r3, [sp]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000ad4:	237f      	movs	r3, #127	; 0x7f
 8000ad6:	f88d 3002 	strb.w	r3, [sp, #2]
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000ada:	4b66      	ldr	r3, [pc, #408]	; (8000c74 <APPE_SysUserEvtRx+0x2a0>)
 8000adc:	681c      	ldr	r4, [r3, #0]
 8000ade:	0c24      	lsrs	r4, r4, #16
    APP_DBG_MSG("DBGMCU_GetRevisionID= %lx \n\n", RevisionID);
 8000ae0:	4638      	mov	r0, r7
 8000ae2:	f006 fbcd 	bl	8007280 <DbgTraceGetFileName>
 8000ae6:	4601      	mov	r1, r0
 8000ae8:	f240 13db 	movw	r3, #475	; 0x1db
 8000aec:	4632      	mov	r2, r6
 8000aee:	4628      	mov	r0, r5
 8000af0:	f007 fc4c 	bl	800838c <iprintf>
 8000af4:	4621      	mov	r1, r4
 8000af6:	4860      	ldr	r0, [pc, #384]	; (8000c78 <APPE_SysUserEvtRx+0x2a4>)
 8000af8:	f007 fc48 	bl	800838c <iprintf>
    config_param.RevisionID = RevisionID;
 8000afc:	f8ad 400c 	strh.w	r4, [sp, #12]
    (void)SHCI_C2_Config(&config_param);
 8000b00:	4668      	mov	r0, sp
 8000b02:	f006 f85d 	bl	8006bc0 <SHCI_C2_Config>
    APP_BLE_Init( );
 8000b06:	f006 febb 	bl	8007880 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f007 faad 	bl	800806c <UTIL_LPM_SetOffMode>
 8000b12:	e05d      	b.n	8000bd0 <APPE_SysUserEvtRx+0x1fc>
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n");
 8000b14:	484e      	ldr	r0, [pc, #312]	; (8000c50 <APPE_SysUserEvtRx+0x27c>)
 8000b16:	f006 fbb3 	bl	8007280 <DbgTraceGetFileName>
 8000b1a:	4601      	mov	r1, r0
 8000b1c:	f240 13e9 	movw	r3, #489	; 0x1e9
 8000b20:	4a51      	ldr	r2, [pc, #324]	; (8000c68 <APPE_SysUserEvtRx+0x294>)
 8000b22:	484d      	ldr	r0, [pc, #308]	; (8000c58 <APPE_SysUserEvtRx+0x284>)
 8000b24:	f007 fc32 	bl	800838c <iprintf>
 8000b28:	4854      	ldr	r0, [pc, #336]	; (8000c7c <APPE_SysUserEvtRx+0x2a8>)
 8000b2a:	f007 fcb5 	bl	8008498 <puts>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	7023      	strb	r3, [r4, #0]
 8000b32:	e04d      	b.n	8000bd0 <APPE_SysUserEvtRx+0x1fc>
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000b34:	6864      	ldr	r4, [r4, #4]
  APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n",(*p_sys_error_code));
 8000b36:	4846      	ldr	r0, [pc, #280]	; (8000c50 <APPE_SysUserEvtRx+0x27c>)
 8000b38:	f006 fba2 	bl	8007280 <DbgTraceGetFileName>
 8000b3c:	4601      	mov	r1, r0
 8000b3e:	f240 13a5 	movw	r3, #421	; 0x1a5
 8000b42:	4a4f      	ldr	r2, [pc, #316]	; (8000c80 <APPE_SysUserEvtRx+0x2ac>)
 8000b44:	4844      	ldr	r0, [pc, #272]	; (8000c58 <APPE_SysUserEvtRx+0x284>)
 8000b46:	f007 fc21 	bl	800838c <iprintf>
 8000b4a:	7b61      	ldrb	r1, [r4, #13]
 8000b4c:	484d      	ldr	r0, [pc, #308]	; (8000c84 <APPE_SysUserEvtRx+0x2b0>)
 8000b4e:	f007 fc1d 	bl	800838c <iprintf>
  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8000b52:	7b63      	ldrb	r3, [r4, #13]
 8000b54:	b96b      	cbnz	r3, 8000b72 <APPE_SysUserEvtRx+0x19e>
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8000b56:	483e      	ldr	r0, [pc, #248]	; (8000c50 <APPE_SysUserEvtRx+0x27c>)
 8000b58:	f006 fb92 	bl	8007280 <DbgTraceGetFileName>
 8000b5c:	4601      	mov	r1, r0
 8000b5e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8000b62:	4a47      	ldr	r2, [pc, #284]	; (8000c80 <APPE_SysUserEvtRx+0x2ac>)
 8000b64:	483c      	ldr	r0, [pc, #240]	; (8000c58 <APPE_SysUserEvtRx+0x284>)
 8000b66:	f007 fc11 	bl	800838c <iprintf>
 8000b6a:	4847      	ldr	r0, [pc, #284]	; (8000c88 <APPE_SysUserEvtRx+0x2b4>)
 8000b6c:	f007 fc94 	bl	8008498 <puts>
 8000b70:	e02e      	b.n	8000bd0 <APPE_SysUserEvtRx+0x1fc>
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8000b72:	4837      	ldr	r0, [pc, #220]	; (8000c50 <APPE_SysUserEvtRx+0x27c>)
 8000b74:	f006 fb84 	bl	8007280 <DbgTraceGetFileName>
 8000b78:	4601      	mov	r1, r0
 8000b7a:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
 8000b7e:	4a40      	ldr	r2, [pc, #256]	; (8000c80 <APPE_SysUserEvtRx+0x2ac>)
 8000b80:	4835      	ldr	r0, [pc, #212]	; (8000c58 <APPE_SysUserEvtRx+0x284>)
 8000b82:	f007 fc03 	bl	800838c <iprintf>
 8000b86:	4841      	ldr	r0, [pc, #260]	; (8000c8c <APPE_SysUserEvtRx+0x2b8>)
 8000b88:	f007 fc86 	bl	8008498 <puts>
 8000b8c:	e020      	b.n	8000bd0 <APPE_SysUserEvtRx+0x1fc>
    APP_DBG_MSG("-- BLE NVM RAM HAS BEEN UPDATED BY CMO+ \n");
 8000b8e:	4e30      	ldr	r6, [pc, #192]	; (8000c50 <APPE_SysUserEvtRx+0x27c>)
 8000b90:	4630      	mov	r0, r6
 8000b92:	f006 fb75 	bl	8007280 <DbgTraceGetFileName>
 8000b96:	4601      	mov	r1, r0
 8000b98:	4d2e      	ldr	r5, [pc, #184]	; (8000c54 <APPE_SysUserEvtRx+0x280>)
 8000b9a:	4c2f      	ldr	r4, [pc, #188]	; (8000c58 <APPE_SysUserEvtRx+0x284>)
 8000b9c:	f44f 73bc 	mov.w	r3, #376	; 0x178
 8000ba0:	462a      	mov	r2, r5
 8000ba2:	4620      	mov	r0, r4
 8000ba4:	f007 fbf2 	bl	800838c <iprintf>
 8000ba8:	4839      	ldr	r0, [pc, #228]	; (8000c90 <APPE_SysUserEvtRx+0x2bc>)
 8000baa:	f007 fc75 	bl	8008498 <puts>
    APP_DBG_MSG("SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE : StartAddress = %lx , Size = %ld\n",
 8000bae:	4630      	mov	r0, r6
 8000bb0:	f006 fb66 	bl	8007280 <DbgTraceGetFileName>
 8000bb4:	4601      	mov	r1, r0
 8000bb6:	f240 1379 	movw	r3, #377	; 0x179
 8000bba:	462a      	mov	r2, r5
 8000bbc:	4620      	mov	r0, r4
 8000bbe:	f007 fbe5 	bl	800838c <iprintf>
 8000bc2:	f8d8 2011 	ldr.w	r2, [r8, #17]
 8000bc6:	f8d8 100d 	ldr.w	r1, [r8, #13]
 8000bca:	4832      	ldr	r0, [pc, #200]	; (8000c94 <APPE_SysUserEvtRx+0x2c0>)
 8000bcc:	f007 fbde 	bl	800838c <iprintf>
}
 8000bd0:	b008      	add	sp, #32
 8000bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8000bd6:	481e      	ldr	r0, [pc, #120]	; (8000c50 <APPE_SysUserEvtRx+0x27c>)
 8000bd8:	f006 fb52 	bl	8007280 <DbgTraceGetFileName>
 8000bdc:	4601      	mov	r1, r0
 8000bde:	f240 137f 	movw	r3, #383	; 0x17f
 8000be2:	4a1c      	ldr	r2, [pc, #112]	; (8000c54 <APPE_SysUserEvtRx+0x280>)
 8000be4:	481c      	ldr	r0, [pc, #112]	; (8000c58 <APPE_SysUserEvtRx+0x284>)
 8000be6:	f007 fbd1 	bl	800838c <iprintf>
 8000bea:	f8d8 100d 	ldr.w	r1, [r8, #13]
 8000bee:	482a      	ldr	r0, [pc, #168]	; (8000c98 <APPE_SysUserEvtRx+0x2c4>)
 8000bf0:	f007 fbcc 	bl	800838c <iprintf>
    break;
 8000bf4:	e7ec      	b.n	8000bd0 <APPE_SysUserEvtRx+0x1fc>
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_END_WRITE\n");
 8000bf6:	4816      	ldr	r0, [pc, #88]	; (8000c50 <APPE_SysUserEvtRx+0x27c>)
 8000bf8:	f006 fb42 	bl	8007280 <DbgTraceGetFileName>
 8000bfc:	4601      	mov	r1, r0
 8000bfe:	f44f 73c2 	mov.w	r3, #388	; 0x184
 8000c02:	4a14      	ldr	r2, [pc, #80]	; (8000c54 <APPE_SysUserEvtRx+0x280>)
 8000c04:	4814      	ldr	r0, [pc, #80]	; (8000c58 <APPE_SysUserEvtRx+0x284>)
 8000c06:	f007 fbc1 	bl	800838c <iprintf>
 8000c0a:	4824      	ldr	r0, [pc, #144]	; (8000c9c <APPE_SysUserEvtRx+0x2c8>)
 8000c0c:	f007 fc44 	bl	8008498 <puts>
    break;
 8000c10:	e7de      	b.n	8000bd0 <APPE_SysUserEvtRx+0x1fc>
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8000c12:	480f      	ldr	r0, [pc, #60]	; (8000c50 <APPE_SysUserEvtRx+0x27c>)
 8000c14:	f006 fb34 	bl	8007280 <DbgTraceGetFileName>
 8000c18:	4601      	mov	r1, r0
 8000c1a:	f44f 73c4 	mov.w	r3, #392	; 0x188
 8000c1e:	4a0d      	ldr	r2, [pc, #52]	; (8000c54 <APPE_SysUserEvtRx+0x280>)
 8000c20:	480d      	ldr	r0, [pc, #52]	; (8000c58 <APPE_SysUserEvtRx+0x284>)
 8000c22:	f007 fbb3 	bl	800838c <iprintf>
 8000c26:	f8d8 100d 	ldr.w	r1, [r8, #13]
 8000c2a:	481d      	ldr	r0, [pc, #116]	; (8000ca0 <APPE_SysUserEvtRx+0x2cc>)
 8000c2c:	f007 fbae 	bl	800838c <iprintf>
    break;
 8000c30:	e7ce      	b.n	8000bd0 <APPE_SysUserEvtRx+0x1fc>
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_END_ERASE\n");
 8000c32:	4807      	ldr	r0, [pc, #28]	; (8000c50 <APPE_SysUserEvtRx+0x27c>)
 8000c34:	f006 fb24 	bl	8007280 <DbgTraceGetFileName>
 8000c38:	4601      	mov	r1, r0
 8000c3a:	f240 138d 	movw	r3, #397	; 0x18d
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <APPE_SysUserEvtRx+0x280>)
 8000c40:	4805      	ldr	r0, [pc, #20]	; (8000c58 <APPE_SysUserEvtRx+0x284>)
 8000c42:	f007 fba3 	bl	800838c <iprintf>
 8000c46:	4817      	ldr	r0, [pc, #92]	; (8000ca4 <APPE_SysUserEvtRx+0x2d0>)
 8000c48:	f007 fc26 	bl	8008498 <puts>
  return;
 8000c4c:	e7c0      	b.n	8000bd0 <APPE_SysUserEvtRx+0x1fc>
 8000c4e:	bf00      	nop
 8000c50:	08009534 	.word	0x08009534
 8000c54:	0800980c 	.word	0x0800980c
 8000c58:	0800954c 	.word	0x0800954c
 8000c5c:	08009560 	.word	0x08009560
 8000c60:	08009584 	.word	0x08009584
 8000c64:	080095a0 	.word	0x080095a0
 8000c68:	08009834 	.word	0x08009834
 8000c6c:	08009634 	.word	0x08009634
 8000c70:	080095b8 	.word	0x080095b8
 8000c74:	e0042000 	.word	0xe0042000
 8000c78:	080095e8 	.word	0x080095e8
 8000c7c:	08009608 	.word	0x08009608
 8000c80:	08009820 	.word	0x08009820
 8000c84:	08009660 	.word	0x08009660
 8000c88:	0800968c 	.word	0x0800968c
 8000c8c:	080096c4 	.word	0x080096c4
 8000c90:	080096f8 	.word	0x080096f8
 8000c94:	08009724 	.word	0x08009724
 8000c98:	08009768 	.word	0x08009768
 8000c9c:	0800979c 	.word	0x0800979c
 8000ca0:	080097b8 	.word	0x080097b8
 8000ca4:	080097f0 	.word	0x080097f0

08000ca8 <MX_APPE_Config>:
{
 8000ca8:	b500      	push	{lr}
 8000caa:	b083      	sub	sp, #12
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 8000cac:	4b2b      	ldr	r3, [pc, #172]	; (8000d5c <MX_APPE_Config+0xb4>)
 8000cae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cb2:	611a      	str	r2, [r3, #16]
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cbc:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8000cc0:	d018      	beq.n	8000cf4 <MX_APPE_Config+0x4c>
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cca:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000cce:	d111      	bne.n	8000cf4 <MX_APPE_Config+0x4c>
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000cd0:	f001 ffb6 	bl	8002c40 <HAL_PWR_EnableBkUpAccess>
    HAL_PWR_EnableBkUpAccess();
 8000cd4:	f001 ffb4 	bl	8002c40 <HAL_PWR_EnableBkUpAccess>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cdc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000ce0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000ce4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000ce8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000cec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000cf0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000cfa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000cfe:	651a      	str	r2, [r3, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d06:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000d08:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <MX_APPE_Config+0xb8>)
 8000d0c:	223f      	movs	r2, #63	; 0x3f
 8000d0e:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000d10:	619a      	str	r2, [r3, #24]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000d12:	685a      	ldr	r2, [r3, #4]
 8000d14:	f442 127c 	orr.w	r2, r2, #4128768	; 0x3f0000
 8000d18:	605a      	str	r2, [r3, #4]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000d1a:	695a      	ldr	r2, [r3, #20]
 8000d1c:	f442 127c 	orr.w	r2, r2, #4128768	; 0x3f0000
 8000d20:	615a      	str	r2, [r3, #20]
  SET_BIT(IPCCx->C1MR, Channel);
 8000d22:	685a      	ldr	r2, [r3, #4]
 8000d24:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8000d28:	605a      	str	r2, [r3, #4]
  SET_BIT(IPCCx->C2MR, Channel);
 8000d2a:	695a      	ldr	r2, [r3, #20]
 8000d2c:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8000d30:	615a      	str	r2, [r3, #20]
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000d32:	2000      	movs	r0, #0
 8000d34:	f006 faec 	bl	8007310 <OTP_Read>
  if (p_otp)
 8000d38:	b168      	cbz	r0, 8000d56 <MX_APPE_Config+0xae>
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000d3a:	7981      	ldrb	r1, [r0, #6]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000d3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <MX_APPE_Config+0xbc>)
 8000d42:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000d46:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8000d4a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8000d4e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000d52:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8000d56:	b003      	add	sp, #12
 8000d58:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d5c:	58004000 	.word	0x58004000
 8000d60:	58000c00 	.word	0x58000c00
 8000d64:	cafecafe 	.word	0xcafecafe

08000d68 <Init_Exti>:
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000d68:	4b02      	ldr	r3, [pc, #8]	; (8000d74 <Init_Exti+0xc>)
 8000d6a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000d6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 8000d72:	4770      	bx	lr
 8000d74:	58000800 	.word	0x58000800

08000d78 <MX_APPE_Init>:
{
 8000d78:	b510      	push	{r4, lr}
 8000d7a:	b088      	sub	sp, #32
  Init_Exti( );
 8000d7c:	f7ff fff4 	bl	8000d68 <Init_Exti>
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000d80:	4b21      	ldr	r3, [pc, #132]	; (8000e08 <MX_APPE_Init+0x90>)
 8000d82:	22ca      	movs	r2, #202	; 0xca
 8000d84:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000d86:	2253      	movs	r2, #83	; 0x53
 8000d88:	625a      	str	r2, [r3, #36]	; 0x24
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000d8a:	689a      	ldr	r2, [r3, #8]
 8000d8c:	f022 0207 	bic.w	r2, r2, #7
 8000d90:	609a      	str	r2, [r3, #8]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000d92:	22ff      	movs	r2, #255	; 0xff
 8000d94:	625a      	str	r2, [r3, #36]	; 0x24
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000d96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d9a:	6893      	ldr	r3, [r2, #8]
 8000d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000da0:	6093      	str	r3, [r2, #8]
  UTIL_LPM_Init();
 8000da2:	f007 f959 	bl	8008058 <UTIL_LPM_Init>
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000da6:	4a19      	ldr	r2, [pc, #100]	; (8000e0c <MX_APPE_Init+0x94>)
 8000da8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8000dac:	f023 0307 	bic.w	r3, r3, #7
 8000db0:	f043 0304 	orr.w	r3, r3, #4
 8000db4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  HAL_PWREx_EnableSRAMRetention();
 8000db8:	f001 ff52 	bl	8002c60 <HAL_PWREx_EnableSRAMRetention>
  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000dbc:	4914      	ldr	r1, [pc, #80]	; (8000e10 <MX_APPE_Init+0x98>)
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f000 fa72 	bl	80012a8 <HW_TS_Init>
  TL_Init();
 8000dc4:	f006 f91c 	bl	8007000 <TL_Init>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000dc8:	4a12      	ldr	r2, [pc, #72]	; (8000e14 <MX_APPE_Init+0x9c>)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2004      	movs	r0, #4
 8000dce:	f007 fa8d 	bl	80082ec <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000dd2:	4c11      	ldr	r4, [pc, #68]	; (8000e18 <MX_APPE_Init+0xa0>)
 8000dd4:	9400      	str	r4, [sp, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <MX_APPE_Init+0xa4>)
 8000dd8:	9301      	str	r3, [sp, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000dda:	4669      	mov	r1, sp
 8000ddc:	4810      	ldr	r0, [pc, #64]	; (8000e20 <MX_APPE_Init+0xa8>)
 8000dde:	f006 f843 	bl	8006e68 <shci_init>
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000de2:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 8000de6:	9302      	str	r3, [sp, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000de8:	f504 7306 	add.w	r3, r4, #536	; 0x218
 8000dec:	9303      	str	r3, [sp, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000dee:	f504 7449 	add.w	r4, r4, #804	; 0x324
 8000df2:	9404      	str	r4, [sp, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000df4:	f240 533c 	movw	r3, #1340	; 0x53c
 8000df8:	9305      	str	r3, [sp, #20]
  TL_MM_Init( &tl_mm_config );
 8000dfa:	a802      	add	r0, sp, #8
 8000dfc:	f006 f9c6 	bl	800718c <TL_MM_Init>
  TL_Enable();
 8000e00:	f006 f8fa 	bl	8006ff8 <TL_Enable>
}
 8000e04:	b008      	add	sp, #32
 8000e06:	bd10      	pop	{r4, pc}
 8000e08:	40002800 	.word	0x40002800
 8000e0c:	58000400 	.word	0x58000400
 8000e10:	2000047c 	.word	0x2000047c
 8000e14:	08006ec9 	.word	0x08006ec9
 8000e18:	200301e8 	.word	0x200301e8
 8000e1c:	080009d1 	.word	0x080009d1
 8000e20:	080009d5 	.word	0x080009d5

08000e24 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000e24:	b570      	push	{r4, r5, r6, lr}
 8000e26:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8000e28:	f001 fa1c 	bl	8002264 <HAL_GetTick>
 8000e2c:	4606      	mov	r6, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000e32:	d10b      	bne.n	8000e4c <HAL_Delay+0x28>
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000e34:	4c08      	ldr	r4, [pc, #32]	; (8000e58 <HAL_Delay+0x34>)
  {
    wait += HAL_GetTickFreq();
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e36:	f001 fa15 	bl	8002264 <HAL_GetTick>
 8000e3a:	1b80      	subs	r0, r0, r6
 8000e3c:	42a8      	cmp	r0, r5
 8000e3e:	d209      	bcs.n	8000e54 <HAL_Delay+0x30>
 8000e40:	6923      	ldr	r3, [r4, #16]
 8000e42:	f023 0304 	bic.w	r3, r3, #4
 8000e46:	6123      	str	r3, [r4, #16]
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 8000e48:	bf30      	wfi
 8000e4a:	e7f4      	b.n	8000e36 <HAL_Delay+0x12>
    wait += HAL_GetTickFreq();
 8000e4c:	f001 fa16 	bl	800227c <HAL_GetTickFreq>
 8000e50:	4405      	add	r5, r0
 8000e52:	e7ef      	b.n	8000e34 <HAL_Delay+0x10>
  }
}
 8000e54:	bd70      	pop	{r4, r5, r6, pc}
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8000e5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e62:	f007 f977 	bl	8008154 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000e66:	bd08      	pop	{r3, pc}

08000e68 <UTIL_SEQ_Idle>:
{
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
}
 8000e68:	4770      	bx	lr

08000e6a <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000e6a:	b508      	push	{r3, lr}
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	f007 f970 	bl	8008154 <UTIL_SEQ_Run>

  return;
}
 8000e74:	bd08      	pop	{r3, pc}

08000e76 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000e76:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000e78:	2100      	movs	r1, #0
 8000e7a:	2004      	movs	r0, #4
 8000e7c:	f007 f90c 	bl	8008098 <UTIL_SEQ_SetTask>
  return;
}
 8000e80:	bd08      	pop	{r3, pc}

08000e82 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000e82:	b508      	push	{r3, lr}
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000e84:	2002      	movs	r0, #2
 8000e86:	f007 f939 	bl	80080fc <UTIL_SEQ_SetEvt>
  return;
}
 8000e8a:	bd08      	pop	{r3, pc}

08000e8c <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000e8c:	b508      	push	{r3, lr}
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000e8e:	2002      	movs	r0, #2
 8000e90:	f007 f9f6 	bl	8008280 <UTIL_SEQ_WaitEvt>
  return;
}
 8000e94:	bd08      	pop	{r3, pc}

08000e96 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e96:	b500      	push	{lr}
 8000e98:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000ea0:	f042 0204 	orr.w	r2, r2, #4
 8000ea4:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000ea6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000ea8:	f002 0204 	and.w	r2, r2, #4
 8000eac:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000eae:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000eb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000eb2:	f042 0201 	orr.w	r2, r2, #1
 8000eb6:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000ec0:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	4611      	mov	r1, r2
 8000ec6:	200b      	movs	r0, #11
 8000ec8:	f001 f9fc 	bl	80022c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ecc:	200b      	movs	r0, #11
 8000ece:	f001 fa3d 	bl	800234c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	200c      	movs	r0, #12
 8000ed8:	f001 f9f4 	bl	80022c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000edc:	200c      	movs	r0, #12
 8000ede:	f001 fa35 	bl	800234c <HAL_NVIC_EnableIRQ>

}
 8000ee2:	b003      	add	sp, #12
 8000ee4:	f85d fb04 	ldr.w	pc, [sp], #4

08000ee8 <MX_GPIO_Init>:
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
     PA2   ------> RCC_LSCO
*/
void MX_GPIO_Init(void)
{
 8000ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000eec:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eee:	2400      	movs	r4, #0
 8000ef0:	9405      	str	r4, [sp, #20]
 8000ef2:	9406      	str	r4, [sp, #24]
 8000ef4:	9407      	str	r4, [sp, #28]
 8000ef6:	9408      	str	r4, [sp, #32]
 8000ef8:	9409      	str	r4, [sp, #36]	; 0x24
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000efe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f00:	f042 0204 	orr.w	r2, r2, #4
 8000f04:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f08:	f002 0204 	and.w	r2, r2, #4
 8000f0c:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 8000f0e:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f16:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f1a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000f1e:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8000f20:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f24:	f042 0202 	orr.w	r2, r2, #2
 8000f28:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f2c:	f002 0202 	and.w	r2, r2, #2
 8000f30:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000f32:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f36:	f042 0201 	orr.w	r2, r2, #1
 8000f3a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f3e:	f002 0201 	and.w	r2, r2, #1
 8000f42:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000f44:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f48:	f042 0210 	orr.w	r2, r2, #16
 8000f4c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f50:	f003 0310 	and.w	r3, r3, #16
 8000f54:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000f56:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GNSS_ANT_SWITCH_Pin|EFECT_HALL_OUT_Pin|RX1_LED_Pin, GPIO_PIN_RESET);
 8000f58:	4d3d      	ldr	r5, [pc, #244]	; (8001050 <MX_GPIO_Init+0x168>)
 8000f5a:	4622      	mov	r2, r4
 8000f5c:	f44f 7192 	mov.w	r1, #292	; 0x124
 8000f60:	4628      	mov	r0, r5
 8000f62:	f001 fdf7 	bl	8002b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LR_NRESET_Pin|VCC_SENSORS_MCU_Pin|VCC_24GHZ_SW_Pin|NSS_Pin
 8000f66:	4622      	mov	r2, r4
 8000f68:	f248 111b 	movw	r1, #33051	; 0x811b
 8000f6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f70:	f001 fdf0 	bl	8002b54 <HAL_GPIO_WritePin>
                          |LNA_PON_MCU_Pin|BLE_WIFI_SEL_SWITCH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX1_LED_GPIO_Port, TX1_LED_Pin, GPIO_PIN_RESET);
 8000f74:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8001058 <MX_GPIO_Init+0x170>
 8000f78:	4622      	mov	r2, r4
 8000f7a:	2110      	movs	r1, #16
 8000f7c:	4648      	mov	r0, r9
 8000f7e:	f001 fde9 	bl	8002b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f82:	2308      	movs	r3, #8
 8000f84:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f86:	2603      	movs	r6, #3
 8000f88:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f8c:	a905      	add	r1, sp, #20
 8000f8e:	4831      	ldr	r0, [pc, #196]	; (8001054 <MX_GPIO_Init+0x16c>)
 8000f90:	f001 fc9e 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GNSS_ANT_SWITCH_Pin|EFECT_HALL_OUT_Pin|RX1_LED_Pin;
 8000f94:	f44f 7392 	mov.w	r3, #292	; 0x124
 8000f98:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	2701      	movs	r7, #1
 8000f9c:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa2:	a905      	add	r1, sp, #20
 8000fa4:	4628      	mov	r0, r5
 8000fa6:	f001 fc93 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PB1_INPUT_SWITCH_Pin|LR_BUSY_Pin|ACC_INT1_Pin;
 8000faa:	f240 2303 	movw	r3, #515	; 0x203
 8000fae:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb4:	a905      	add	r1, sp, #20
 8000fb6:	4628      	mov	r0, r5
 8000fb8:	f001 fc8a 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = LR_NRESET_Pin|VCC_SENSORS_MCU_Pin|VCC_24GHZ_SW_Pin|NSS_Pin
 8000fbc:	f248 131b 	movw	r3, #33051	; 0x811b
 8000fc0:	9305      	str	r3, [sp, #20]
                          |LNA_PON_MCU_Pin|BLE_WIFI_SEL_SWITCH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc2:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc8:	a905      	add	r1, sp, #20
 8000fca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fce:	f001 fc7f 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_LSCO;
 8000fde:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe0:	a905      	add	r1, sp, #20
 8000fe2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe6:	f001 fc73 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TX1_LED_Pin;
 8000fea:	f04f 0810 	mov.w	r8, #16
 8000fee:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff2:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(TX1_LED_GPIO_Port, &GPIO_InitStruct);
 8000ff8:	a905      	add	r1, sp, #20
 8000ffa:	4648      	mov	r0, r9
 8000ffc:	f001 fc68 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001000:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001004:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001006:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	a905      	add	r1, sp, #20
 800100c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001010:	f001 fc5e 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LR_IRQ_Pin;
 8001014:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001018:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800101c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(LR_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001020:	a905      	add	r1, sp, #20
 8001022:	4628      	mov	r0, r5
 8001024:	f001 fc54 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001028:	23c0      	movs	r3, #192	; 0xc0
 800102a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800102c:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001030:	a905      	add	r1, sp, #20
 8001032:	4628      	mov	r0, r5
 8001034:	f001 fc4c 	bl	80028d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001038:	4622      	mov	r2, r4
 800103a:	4621      	mov	r1, r4
 800103c:	200a      	movs	r0, #10
 800103e:	f001 f941 	bl	80022c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001042:	200a      	movs	r0, #10
 8001044:	f001 f982 	bl	800234c <HAL_NVIC_EnableIRQ>

}
 8001048:	b00b      	add	sp, #44	; 0x2c
 800104a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800104e:	bf00      	nop
 8001050:	48000400 	.word	0x48000400
 8001054:	48001c00 	.word	0x48001c00
 8001058:	48001000 	.word	0x48001000

0800105c <ReadRtcSsrValue>:
static uint32_t ReadRtcSsrValue(void)
{
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800105c:	4b07      	ldr	r3, [pc, #28]	; (800107c <ReadRtcSsrValue+0x20>)
 800105e:	6a9a      	ldr	r2, [r3, #40]	; 0x28

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001062:	b29b      	uxth	r3, r3
  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001064:	b292      	uxth	r2, r2

  while(first_read != second_read)
 8001066:	429a      	cmp	r2, r3
 8001068:	d006      	beq.n	8001078 <ReadRtcSsrValue+0x1c>
  {
    first_read = second_read;

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800106a:	4904      	ldr	r1, [pc, #16]	; (800107c <ReadRtcSsrValue+0x20>)
 800106c:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800106e:	4618      	mov	r0, r3
 8001070:	b293      	uxth	r3, r2
  while(first_read != second_read)
 8001072:	4283      	cmp	r3, r0
 8001074:	d1fa      	bne.n	800106c <ReadRtcSsrValue+0x10>
 8001076:	4770      	bx	lr
  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001078:	4618      	mov	r0, r3
  }

  return second_read;
}
 800107a:	4770      	bx	lr
 800107c:	40002800 	.word	0x40002800

08001080 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001080:	b430      	push	{r4, r5}
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001082:	4b21      	ldr	r3, [pc, #132]	; (8001108 <UnlinkTimer+0x88>)
 8001084:	781a      	ldrb	r2, [r3, #0]
 8001086:	4603      	mov	r3, r0
 8001088:	4282      	cmp	r2, r0
 800108a:	d029      	beq.n	80010e0 <UnlinkTimer+0x60>
    PreviousRunningTimerID = CurrentRunningTimerID;
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 800108c:	4c1e      	ldr	r4, [pc, #120]	; (8001108 <UnlinkTimer+0x88>)
 800108e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001092:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8001096:	7e05      	ldrb	r5, [r0, #24]
    next_id = aTimerContext[TimerID].NextID;
 8001098:	7e42      	ldrb	r2, [r0, #25]
 800109a:	b2d2      	uxtb	r2, r2

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800109c:	7e40      	ldrb	r0, [r0, #25]
 800109e:	b2c0      	uxtb	r0, r0
 80010a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80010a4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80010a8:	7660      	strb	r0, [r4, #25]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80010aa:	2a06      	cmp	r2, #6
 80010ac:	d00b      	beq.n	80010c6 <UnlinkTimer+0x46>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80010ae:	4816      	ldr	r0, [pc, #88]	; (8001108 <UnlinkTimer+0x88>)
 80010b0:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 80010b4:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80010b8:	7e24      	ldrb	r4, [r4, #24]
 80010ba:	b2e4      	uxtb	r4, r4
 80010bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80010c0:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80010c4:	7614      	strb	r4, [r2, #24]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80010c6:	4a10      	ldr	r2, [pc, #64]	; (8001108 <UnlinkTimer+0x88>)
 80010c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80010cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80010d0:	2001      	movs	r0, #1
 80010d2:	7418      	strb	r0, [r3, #16]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80010d4:	7813      	ldrb	r3, [r2, #0]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b06      	cmp	r3, #6
 80010da:	d00d      	beq.n	80010f8 <UnlinkTimer+0x78>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
  }

  return;
}
 80010dc:	bc30      	pop	{r4, r5}
 80010de:	4770      	bx	lr
    PreviousRunningTimerID = CurrentRunningTimerID;
 80010e0:	4a09      	ldr	r2, [pc, #36]	; (8001108 <UnlinkTimer+0x88>)
 80010e2:	7810      	ldrb	r0, [r2, #0]
 80010e4:	b2c0      	uxtb	r0, r0
 80010e6:	7050      	strb	r0, [r2, #1]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80010e8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80010ec:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80010f0:	7e40      	ldrb	r0, [r0, #25]
 80010f2:	b2c0      	uxtb	r0, r0
 80010f4:	7010      	strb	r0, [r2, #0]
 80010f6:	e7e6      	b.n	80010c6 <UnlinkTimer+0x46>
  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80010f8:	2900      	cmp	r1, #0
 80010fa:	d1ef      	bne.n	80010dc <UnlinkTimer+0x5c>
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80010fc:	4613      	mov	r3, r2
 80010fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001102:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return;
 8001106:	e7e9      	b.n	80010dc <UnlinkTimer+0x5c>
 8001108:	20000090 	.word	0x20000090

0800110c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 800110c:	b508      	push	{r3, lr}
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800110e:	4b12      	ldr	r3, [pc, #72]	; (8001158 <ReturnTimeElapsed+0x4c>)
 8001110:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001118:	d102      	bne.n	8001120 <ReturnTimeElapsed+0x14>
    return_value = return_value*AsynchPrescalerUserConfig;
    return_value = return_value >> WakeupTimerDivider;
  }
  else
  {
    return_value = 0;
 800111a:	2000      	movs	r0, #0
  }

  return (uint16_t)return_value;
}
 800111c:	b280      	uxth	r0, r0
 800111e:	bd08      	pop	{r3, pc}
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001120:	f7ff ff9c 	bl	800105c <ReadRtcSsrValue>
    if (SSRValueOnLastSetup >= return_value)
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <ReturnTimeElapsed+0x4c>)
 8001126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800112a:	4283      	cmp	r3, r0
 800112c:	d30b      	bcc.n	8001146 <ReturnTimeElapsed+0x3a>
      return_value = SSRValueOnLastSetup - return_value;
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <ReturnTimeElapsed+0x4c>)
 8001130:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001134:	1a18      	subs	r0, r3, r0
    return_value = return_value*AsynchPrescalerUserConfig;
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <ReturnTimeElapsed+0x50>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	fb00 f003 	mul.w	r0, r0, r3
    return_value = return_value >> WakeupTimerDivider;
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <ReturnTimeElapsed+0x54>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	40d8      	lsrs	r0, r3
 8001144:	e7ea      	b.n	800111c <ReturnTimeElapsed+0x10>
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001146:	4b04      	ldr	r3, [pc, #16]	; (8001158 <ReturnTimeElapsed+0x4c>)
 8001148:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <ReturnTimeElapsed+0x58>)
 800114e:	881b      	ldrh	r3, [r3, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001150:	4413      	add	r3, r2
 8001152:	1a18      	subs	r0, r3, r0
 8001154:	e7ef      	b.n	8001136 <ReturnTimeElapsed+0x2a>
 8001156:	bf00      	nop
 8001158:	20000090 	.word	0x20000090
 800115c:	200002d0 	.word	0x200002d0
 8001160:	200002d6 	.word	0x200002d6
 8001164:	200002d4 	.word	0x200002d4

08001168 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800116a:	4b49      	ldr	r3, [pc, #292]	; (8001290 <RescheduleTimerList+0x128>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001172:	d006      	beq.n	8001182 <RescheduleTimerList+0x1a>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001174:	4b47      	ldr	r3, [pc, #284]	; (8001294 <RescheduleTimerList+0x12c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	68d3      	ldr	r3, [r2, #12]
 800117c:	f013 0f04 	tst.w	r3, #4
 8001180:	d1fb      	bne.n	800117a <RescheduleTimerList+0x12>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001182:	4b44      	ldr	r3, [pc, #272]	; (8001294 <RescheduleTimerList+0x12c>)
 8001184:	681e      	ldr	r6, [r3, #0]
 8001186:	6832      	ldr	r2, [r6, #0]
 8001188:	6893      	ldr	r3, [r2, #8]
 800118a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800118e:	6093      	str	r3, [r2, #8]

  localTimerID = CurrentRunningTimerID;
 8001190:	4a41      	ldr	r2, [pc, #260]	; (8001298 <RescheduleTimerList+0x130>)
 8001192:	7813      	ldrb	r3, [r2, #0]
 8001194:	b2dc      	uxtb	r4, r3

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001196:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800119a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800119e:	68dd      	ldr	r5, [r3, #12]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80011a0:	f7ff ffb4 	bl	800110c <ReturnTimeElapsed>

  if(timecountleft < time_elapsed )
 80011a4:	4607      	mov	r7, r0
 80011a6:	42a8      	cmp	r0, r5
 80011a8:	d94d      	bls.n	8001246 <RescheduleTimerList+0xde>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80011aa:	4b3b      	ldr	r3, [pc, #236]	; (8001298 <RescheduleTimerList+0x130>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011b2:	2c06      	cmp	r4, #6
    wakeup_timer_value = 0;
 80011b4:	bf18      	it	ne
 80011b6:	2500      	movne	r5, #0
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011b8:	d05c      	beq.n	8001274 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80011ba:	4937      	ldr	r1, [pc, #220]	; (8001298 <RescheduleTimerList+0x130>)
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80011bc:	2000      	movs	r0, #0
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80011be:	4623      	mov	r3, r4
 80011c0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80011c4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80011c8:	68d2      	ldr	r2, [r2, #12]
 80011ca:	4297      	cmp	r7, r2
      aTimerContext[localTimerID].CountLeft = 0;
 80011cc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80011d0:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80011d4:	bf8f      	iteee	hi
 80011d6:	60e0      	strhi	r0, [r4, #12]
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80011d8:	68e2      	ldrls	r2, [r4, #12]
 80011da:	1bd2      	subls	r2, r2, r7
 80011dc:	60e2      	strls	r2, [r4, #12]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80011de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80011e2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80011e6:	7e5c      	ldrb	r4, [r3, #25]
 80011e8:	b2e4      	uxtb	r4, r4
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011ea:	2c06      	cmp	r4, #6
 80011ec:	d1e7      	bne.n	80011be <RescheduleTimerList+0x56>
  if(Value == 0)
 80011ee:	2d00      	cmp	r5, #0
 80011f0:	d040      	beq.n	8001274 <RescheduleTimerList+0x10c>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80011f2:	2d01      	cmp	r5, #1
 80011f4:	d947      	bls.n	8001286 <RescheduleTimerList+0x11e>
      Value -= 1;
 80011f6:	3d01      	subs	r5, #1
 80011f8:	b2ad      	uxth	r5, r5
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80011fa:	6832      	ldr	r2, [r6, #0]
 80011fc:	68d3      	ldr	r3, [r2, #12]
 80011fe:	f013 0f04 	tst.w	r3, #4
 8001202:	d0fb      	beq.n	80011fc <RescheduleTimerList+0x94>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001204:	68d3      	ldr	r3, [r2, #12]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f463 6390 	orn	r3, r3, #1152	; 0x480
 800120c:	60d3      	str	r3, [r2, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800120e:	4b23      	ldr	r3, [pc, #140]	; (800129c <RescheduleTimerList+0x134>)
 8001210:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001214:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001216:	2003      	movs	r0, #3
 8001218:	f001 f8f8 	bl	800240c <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800121c:	4a1c      	ldr	r2, [pc, #112]	; (8001290 <RescheduleTimerList+0x128>)
 800121e:	6953      	ldr	r3, [r2, #20]
 8001220:	0c1b      	lsrs	r3, r3, #16
 8001222:	041b      	lsls	r3, r3, #16
 8001224:	431d      	orrs	r5, r3
 8001226:	6155      	str	r5, [r2, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001228:	f7ff ff18 	bl	800105c <ReadRtcSsrValue>
 800122c:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <RescheduleTimerList+0x130>)
 800122e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8001232:	4b18      	ldr	r3, [pc, #96]	; (8001294 <RescheduleTimerList+0x12c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	6893      	ldr	r3, [r2, #8]
 800123a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800123e:	6093      	str	r3, [r2, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001240:	f3af 8000 	nop.w
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);

  return ;
}
 8001244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001246:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <RescheduleTimerList+0x138>)
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	fa10 f383 	uxtah	r3, r0, r3
 800124e:	42ab      	cmp	r3, r5
 8001250:	d209      	bcs.n	8001266 <RescheduleTimerList+0xfe>
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <RescheduleTimerList+0x138>)
 8001254:	881d      	ldrh	r5, [r3, #0]
 8001256:	b2ad      	uxth	r5, r5
      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <RescheduleTimerList+0x130>)
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001260:	2c06      	cmp	r4, #6
 8001262:	d1aa      	bne.n	80011ba <RescheduleTimerList+0x52>
 8001264:	e7c3      	b.n	80011ee <RescheduleTimerList+0x86>
      wakeup_timer_value = timecountleft - time_elapsed;
 8001266:	1a2d      	subs	r5, r5, r0
 8001268:	b2ad      	uxth	r5, r5
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <RescheduleTimerList+0x130>)
 800126c:	2201      	movs	r2, #1
 800126e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8001272:	e7f5      	b.n	8001260 <RescheduleTimerList+0xf8>
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001274:	f7ff fef2 	bl	800105c <ReadRtcSsrValue>
 8001278:	4b07      	ldr	r3, [pc, #28]	; (8001298 <RescheduleTimerList+0x130>)
 800127a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800127e:	2003      	movs	r0, #3
 8001280:	f001 f8ac 	bl	80023dc <HAL_NVIC_SetPendingIRQ>
 8001284:	e7de      	b.n	8001244 <RescheduleTimerList+0xdc>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001286:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <RescheduleTimerList+0x13c>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d1b3      	bne.n	80011f6 <RescheduleTimerList+0x8e>
 800128e:	e7b4      	b.n	80011fa <RescheduleTimerList+0x92>
 8001290:	40002800 	.word	0x40002800
 8001294:	200002d8 	.word	0x200002d8
 8001298:	20000090 	.word	0x20000090
 800129c:	58000800 	.word	0x58000800
 80012a0:	200002d2 	.word	0x200002d2
 80012a4:	200002d6 	.word	0x200002d6

080012a8 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 80012a8:	b510      	push	{r4, lr}
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 80012aa:	4b49      	ldr	r3, [pc, #292]	; (80013d0 <HW_TS_Init+0x128>)
 80012ac:	6019      	str	r1, [r3, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80012ae:	680b      	ldr	r3, [r1, #0]
 80012b0:	22ca      	movs	r2, #202	; 0xca
 80012b2:	625a      	str	r2, [r3, #36]	; 0x24
 80012b4:	680b      	ldr	r3, [r1, #0]
 80012b6:	2253      	movs	r2, #83	; 0x53
 80012b8:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80012ba:	4946      	ldr	r1, [pc, #280]	; (80013d4 <HW_TS_Init+0x12c>)
 80012bc:	688b      	ldr	r3, [r1, #8]
 80012be:	f043 0320 	orr.w	r3, r3, #32
 80012c2:	608b      	str	r3, [r1, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80012c4:	688b      	ldr	r3, [r1, #8]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	f1c3 0304 	rsb	r3, r3, #4
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	4b41      	ldr	r3, [pc, #260]	; (80013d8 <HW_TS_Init+0x130>)
 80012d2:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80012d4:	690b      	ldr	r3, [r1, #16]
 80012d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012da:	f44f 01fe 	mov.w	r1, #8323072	; 0x7f0000
 80012de:	fa91 f1a1 	rbit	r1, r1
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 80012e2:	fab1 f181 	clz	r1, r1
 80012e6:	40cb      	lsrs	r3, r1
 80012e8:	3301      	adds	r3, #1
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	493b      	ldr	r1, [pc, #236]	; (80013dc <HW_TS_Init+0x134>)
 80012ee:	700b      	strb	r3, [r1, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80012f0:	4938      	ldr	r1, [pc, #224]	; (80013d4 <HW_TS_Init+0x12c>)
 80012f2:	6909      	ldr	r1, [r1, #16]
 80012f4:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80012f8:	3101      	adds	r1, #1
 80012fa:	4c39      	ldr	r4, [pc, #228]	; (80013e0 <HW_TS_Init+0x138>)
 80012fc:	8021      	strh	r1, [r4, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80012fe:	3901      	subs	r1, #1
 8001300:	fb03 f301 	mul.w	r3, r3, r1
 8001304:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001308:	40d3      	lsrs	r3, r2

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800130a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800130e:	4293      	cmp	r3, r2
 8001310:	d94e      	bls.n	80013b0 <HW_TS_Init+0x108>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001312:	4b34      	ldr	r3, [pc, #208]	; (80013e4 <HW_TS_Init+0x13c>)
 8001314:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001318:	801a      	strh	r2, [r3, #0]
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800131a:	4b33      	ldr	r3, [pc, #204]	; (80013e8 <HW_TS_Init+0x140>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001322:	601a      	str	r2, [r3, #0]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001324:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001328:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800132c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001330:	2800      	cmp	r0, #0
 8001332:	d141      	bne.n	80013b8 <HW_TS_Init+0x110>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001334:	4b2d      	ldr	r3, [pc, #180]	; (80013ec <HW_TS_Init+0x144>)
 8001336:	2201      	movs	r2, #1
 8001338:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800133c:	f04f 32ff 	mov.w	r2, #4294967295
 8001340:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001344:	2200      	movs	r2, #0
 8001346:	741a      	strb	r2, [r3, #16]
 8001348:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800134c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001350:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001354:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001358:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800135c:	2206      	movs	r2, #6
 800135e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001360:	4c1b      	ldr	r4, [pc, #108]	; (80013d0 <HW_TS_Init+0x128>)
 8001362:	6822      	ldr	r2, [r4, #0]
 8001364:	6811      	ldr	r1, [r2, #0]
 8001366:	688b      	ldr	r3, [r1, #8]
 8001368:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800136c:	608b      	str	r3, [r1, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800136e:	6812      	ldr	r2, [r2, #0]
 8001370:	68d3      	ldr	r3, [r2, #12]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8001378:	60d3      	str	r3, [r2, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800137a:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <HW_TS_Init+0x140>)
 800137c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001380:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001382:	2003      	movs	r0, #3
 8001384:	f001 f842 	bl	800240c <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001388:	6823      	ldr	r3, [r4, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	6893      	ldr	r3, [r2, #8]
 800138e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001392:	6093      	str	r3, [r2, #8]
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001394:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <HW_TS_Init+0x128>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	22ff      	movs	r2, #255	; 0xff
 800139c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800139e:	2200      	movs	r2, #0
 80013a0:	2103      	movs	r1, #3
 80013a2:	4608      	mov	r0, r1
 80013a4:	f000 ff8e 	bl	80022c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 ffcf 	bl	800234c <HAL_NVIC_EnableIRQ>

  return;
}
 80013ae:	bd10      	pop	{r4, pc}
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	4a0c      	ldr	r2, [pc, #48]	; (80013e4 <HW_TS_Init+0x13c>)
 80013b4:	8013      	strh	r3, [r2, #0]
 80013b6:	e7b0      	b.n	800131a <HW_TS_Init+0x72>
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <HW_TS_Init+0x128>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80013c4:	d0e6      	beq.n	8001394 <HW_TS_Init+0xec>
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80013c6:	2003      	movs	r0, #3
 80013c8:	f001 f808 	bl	80023dc <HAL_NVIC_SetPendingIRQ>
 80013cc:	e7e2      	b.n	8001394 <HW_TS_Init+0xec>
 80013ce:	bf00      	nop
 80013d0:	200002d8 	.word	0x200002d8
 80013d4:	40002800 	.word	0x40002800
 80013d8:	200002d6 	.word	0x200002d6
 80013dc:	200002d0 	.word	0x200002d0
 80013e0:	200002d4 	.word	0x200002d4
 80013e4:	200002d2 	.word	0x200002d2
 80013e8:	58000800 	.word	0x58000800
 80013ec:	20000090 	.word	0x20000090

080013f0 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80013f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013f2:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80013f6:	b672      	cpsid	i
 80013f8:	2400      	movs	r4, #0
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80013fa:	4f12      	ldr	r7, [pc, #72]	; (8001444 <HW_TS_Create+0x54>)
 80013fc:	b2e5      	uxtb	r5, r4
 80013fe:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8001402:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
 8001406:	7c36      	ldrb	r6, [r6, #16]
 8001408:	b126      	cbz	r6, 8001414 <HW_TS_Create+0x24>
  {
    loop++;
 800140a:	3501      	adds	r5, #1
 800140c:	b2ed      	uxtb	r5, r5
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800140e:	3401      	adds	r4, #1
 8001410:	2c06      	cmp	r4, #6
 8001412:	d1f3      	bne.n	80013fc <HW_TS_Create+0xc>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001414:	2d06      	cmp	r5, #6
 8001416:	d010      	beq.n	800143a <HW_TS_Create+0x4a>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001418:	4e0a      	ldr	r6, [pc, #40]	; (8001444 <HW_TS_Create+0x54>)
 800141a:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 800141e:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 8001422:	f04f 0e01 	mov.w	lr, #1
 8001426:	f884 e010 	strb.w	lr, [r4, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800142a:	f38c 8810 	msr	PRIMASK, ip

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 800142e:	6160      	str	r0, [r4, #20]
    aTimerContext[loop].TimerMode = TimerMode;
 8001430:	7462      	strb	r2, [r4, #17]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001432:	6063      	str	r3, [r4, #4]
    *pTimerId = loop;
 8001434:	700d      	strb	r5, [r1, #0]

    localreturnstatus = hw_ts_Successful;
 8001436:	2000      	movs	r0, #0

    localreturnstatus = hw_ts_Failed;
  }

  return(localreturnstatus);
}
 8001438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800143a:	f38c 8810 	msr	PRIMASK, ip
    localreturnstatus = hw_ts_Failed;
 800143e:	2001      	movs	r0, #1
 8001440:	e7fa      	b.n	8001438 <HW_TS_Create+0x48>
 8001442:	bf00      	nop
 8001444:	20000090 	.word	0x20000090

08001448 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001448:	b570      	push	{r4, r5, r6, lr}
 800144a:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800144c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001450:	b672      	cpsid	i
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001452:	2003      	movs	r0, #3
 8001454:	f000 ff90 	bl	8002378 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001458:	4b26      	ldr	r3, [pc, #152]	; (80014f4 <HW_TS_Stop+0xac>)
 800145a:	681d      	ldr	r5, [r3, #0]
 800145c:	682b      	ldr	r3, [r5, #0]
 800145e:	22ca      	movs	r2, #202	; 0xca
 8001460:	625a      	str	r2, [r3, #36]	; 0x24
 8001462:	682b      	ldr	r3, [r5, #0]
 8001464:	2253      	movs	r2, #83	; 0x53
 8001466:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001468:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800146c:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <HW_TS_Stop+0xb0>)
 800146e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001472:	7c1b      	ldrb	r3, [r3, #16]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d00a      	beq.n	8001490 <HW_TS_Stop+0x48>
      RescheduleTimerList();
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800147a:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <HW_TS_Stop+0xac>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	22ff      	movs	r2, #255	; 0xff
 8001482:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001484:	2003      	movs	r0, #3
 8001486:	f000 ff61 	bl	800234c <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800148a:	f386 8810 	msr	PRIMASK, r6
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
}
 800148e:	bd70      	pop	{r4, r5, r6, pc}
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001490:	2100      	movs	r1, #0
 8001492:	4620      	mov	r0, r4
 8001494:	f7ff fdf4 	bl	8001080 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001498:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <HW_TS_Stop+0xb0>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b2db      	uxtb	r3, r3
    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800149e:	2b06      	cmp	r3, #6
 80014a0:	d007      	beq.n	80014b2 <HW_TS_Stop+0x6a>
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80014a2:	4a15      	ldr	r2, [pc, #84]	; (80014f8 <HW_TS_Stop+0xb0>)
 80014a4:	7852      	ldrb	r2, [r2, #1]
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d0e6      	beq.n	800147a <HW_TS_Stop+0x32>
      RescheduleTimerList();
 80014ac:	f7ff fe5c 	bl	8001168 <RescheduleTimerList>
 80014b0:	e7e3      	b.n	800147a <HW_TS_Stop+0x32>
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80014b2:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HW_TS_Stop+0xb4>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80014ba:	d004      	beq.n	80014c6 <HW_TS_Stop+0x7e>
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80014bc:	682a      	ldr	r2, [r5, #0]
 80014be:	68d3      	ldr	r3, [r2, #12]
 80014c0:	f013 0f04 	tst.w	r3, #4
 80014c4:	d1fb      	bne.n	80014be <HW_TS_Stop+0x76>
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80014c6:	682a      	ldr	r2, [r5, #0]
 80014c8:	6893      	ldr	r3, [r2, #8]
 80014ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014ce:	6093      	str	r3, [r2, #8]
      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80014d0:	682a      	ldr	r2, [r5, #0]
 80014d2:	68d3      	ldr	r3, [r2, #12]
 80014d4:	f013 0f04 	tst.w	r3, #4
 80014d8:	d0fb      	beq.n	80014d2 <HW_TS_Stop+0x8a>
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80014da:	68d3      	ldr	r3, [r2, #12]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	f463 6390 	orn	r3, r3, #1152	; 0x480
 80014e2:	60d3      	str	r3, [r2, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HW_TS_Stop+0xb8>)
 80014e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80014ea:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80014ec:	2003      	movs	r0, #3
 80014ee:	f000 ff8d 	bl	800240c <HAL_NVIC_ClearPendingIRQ>
 80014f2:	e7c2      	b.n	800147a <HW_TS_Stop+0x32>
 80014f4:	200002d8 	.word	0x200002d8
 80014f8:	20000090 	.word	0x20000090
 80014fc:	40002800 	.word	0x40002800
 8001500:	58000800 	.word	0x58000800

08001504 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001506:	4604      	mov	r4, r0
 8001508:	460e      	mov	r6, r1

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800150a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800150e:	4b6a      	ldr	r3, [pc, #424]	; (80016b8 <HW_TS_Start+0x1b4>)
 8001510:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001514:	7c1b      	ldrb	r3, [r3, #16]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d048      	beq.n	80015ae <HW_TS_Start+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800151c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001520:	b672      	cpsid	i
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001522:	2003      	movs	r0, #3
 8001524:	f000 ff28 	bl	8002378 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001528:	4b64      	ldr	r3, [pc, #400]	; (80016bc <HW_TS_Start+0x1b8>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	21ca      	movs	r1, #202	; 0xca
 8001530:	6251      	str	r1, [r2, #36]	; 0x24
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2253      	movs	r2, #83	; 0x53
 8001536:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001538:	4a5f      	ldr	r2, [pc, #380]	; (80016b8 <HW_TS_Start+0x1b4>)
 800153a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800153e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001542:	2102      	movs	r1, #2
 8001544:	7419      	strb	r1, [r3, #16]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001546:	60de      	str	r6, [r3, #12]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001548:	609e      	str	r6, [r3, #8]
  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800154a:	7813      	ldrb	r3, [r2, #0]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b06      	cmp	r3, #6
 8001550:	d130      	bne.n	80015b4 <HW_TS_Start+0xb0>
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001552:	4613      	mov	r3, r2
 8001554:	7812      	ldrb	r2, [r2, #0]
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	705a      	strb	r2, [r3, #1]
    CurrentRunningTimerID = TimerID;
 800155a:	701c      	strb	r4, [r3, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 800155c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001560:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8001564:	2106      	movs	r1, #6
 8001566:	7651      	strb	r1, [r2, #25]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001568:	f04f 32ff 	mov.w	r2, #4294967295
 800156c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    time_elapsed = 0;
 8001570:	2000      	movs	r0, #0

  time_elapsed =  linkTimer(timer_id);

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001572:	4a51      	ldr	r2, [pc, #324]	; (80016b8 <HW_TS_Start+0x1b4>)
 8001574:	7813      	ldrb	r3, [r2, #0]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001576:	7852      	ldrb	r2, [r2, #1]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	4293      	cmp	r3, r2
 800157c:	f040 8099 	bne.w	80016b2 <HW_TS_Start+0x1ae>
  {
    RescheduleTimerList();
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001580:	4b4d      	ldr	r3, [pc, #308]	; (80016b8 <HW_TS_Start+0x1b4>)
 8001582:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001586:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800158a:	68d2      	ldr	r2, [r2, #12]
 800158c:	1a10      	subs	r0, r2, r0
 800158e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8001592:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8001596:	60e0      	str	r0, [r4, #12]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001598:	4b48      	ldr	r3, [pc, #288]	; (80016bc <HW_TS_Start+0x1b8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	22ff      	movs	r2, #255	; 0xff
 80015a0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80015a2:	2003      	movs	r0, #3
 80015a4:	f000 fed2 	bl	800234c <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015a8:	f385 8810 	msr	PRIMASK, r5
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
}
 80015ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HW_TS_Stop( timer_id );
 80015ae:	f7ff ff4b 	bl	8001448 <HW_TS_Stop>
 80015b2:	e7b3      	b.n	800151c <HW_TS_Start+0x18>
    time_elapsed = ReturnTimeElapsed();
 80015b4:	f7ff fdaa 	bl	800110c <ReturnTimeElapsed>
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80015b8:	4b3f      	ldr	r3, [pc, #252]	; (80016b8 <HW_TS_Start+0x1b4>)
 80015ba:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80015be:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80015c2:	68d1      	ldr	r1, [r2, #12]
 80015c4:	4401      	add	r1, r0
 80015c6:	60d1      	str	r1, [r2, #12]
    time_left = aTimerContext[TimerID].CountLeft;
 80015c8:	68d1      	ldr	r1, [r2, #12]
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80015ca:	781a      	ldrb	r2, [r3, #0]
 80015cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80015d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	4299      	cmp	r1, r3
 80015d8:	d33b      	bcc.n	8001652 <HW_TS_Start+0x14e>
      timer_id_lookup = CurrentRunningTimerID;
 80015da:	4e37      	ldr	r6, [pc, #220]	; (80016b8 <HW_TS_Start+0x1b4>)
 80015dc:	7833      	ldrb	r3, [r6, #0]
 80015de:	b2da      	uxtb	r2, r3
      next_id = aTimerContext[timer_id_lookup].NextID;
 80015e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80015e4:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80015e8:	7e5b      	ldrb	r3, [r3, #25]
 80015ea:	b2db      	uxtb	r3, r3
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80015ec:	2b06      	cmp	r3, #6
 80015ee:	d014      	beq.n	800161a <HW_TS_Start+0x116>
 80015f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80015f4:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	4299      	cmp	r1, r3
 80015fc:	d30d      	bcc.n	800161a <HW_TS_Start+0x116>
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80015fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001602:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8001606:	7e53      	ldrb	r3, [r2, #25]
 8001608:	b2da      	uxtb	r2, r3
        next_id = aTimerContext[timer_id_lookup].NextID;
 800160a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800160e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001612:	7e5b      	ldrb	r3, [r3, #25]
 8001614:	b2db      	uxtb	r3, r3
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001616:	2b06      	cmp	r3, #6
 8001618:	d1ea      	bne.n	80015f0 <HW_TS_Start+0xec>
  next_id = aTimerContext[RefTimerID].NextID;
 800161a:	4694      	mov	ip, r2
 800161c:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 8001620:	4f25      	ldr	r7, [pc, #148]	; (80016b8 <HW_TS_Start+0x1b4>)
 8001622:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
 8001626:	7e73      	ldrb	r3, [r6, #25]
 8001628:	b2db      	uxtb	r3, r3
  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800162a:	2b06      	cmp	r3, #6
 800162c:	d004      	beq.n	8001638 <HW_TS_Start+0x134>
    aTimerContext[next_id].PreviousID = TimerID;
 800162e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8001632:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8001636:	760c      	strb	r4, [r1, #24]
  aTimerContext[TimerID].NextID = next_id;
 8001638:	491f      	ldr	r1, [pc, #124]	; (80016b8 <HW_TS_Start+0x1b4>)
 800163a:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 800163e:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8001642:	7673      	strb	r3, [r6, #25]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001644:	7632      	strb	r2, [r6, #24]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001646:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
 800164a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800164e:	764c      	strb	r4, [r1, #25]
  return;
 8001650:	e78f      	b.n	8001572 <HW_TS_Start+0x6e>
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001652:	4a19      	ldr	r2, [pc, #100]	; (80016b8 <HW_TS_Start+0x1b4>)
 8001654:	7813      	ldrb	r3, [r2, #0]
 8001656:	b2db      	uxtb	r3, r3
  if(RefTimerID != CurrentRunningTimerID)
 8001658:	7812      	ldrb	r2, [r2, #0]
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	4293      	cmp	r3, r2
 800165e:	d01c      	beq.n	800169a <HW_TS_Start+0x196>
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001660:	4915      	ldr	r1, [pc, #84]	; (80016b8 <HW_TS_Start+0x1b4>)
 8001662:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001666:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800166a:	7e12      	ldrb	r2, [r2, #24]
 800166c:	b2d6      	uxtb	r6, r2
    aTimerContext[previous_id].NextID = TimerID;
 800166e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001672:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8001676:	7654      	strb	r4, [r2, #25]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001678:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800167c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8001680:	7653      	strb	r3, [r2, #25]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001682:	7616      	strb	r6, [r2, #24]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001684:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001688:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800168c:	760c      	strb	r4, [r1, #24]
      PreviousRunningTimerID = CurrentRunningTimerID;
 800168e:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <HW_TS_Start+0x1b4>)
 8001690:	781a      	ldrb	r2, [r3, #0]
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	705a      	strb	r2, [r3, #1]
      CurrentRunningTimerID = TimerID;
 8001696:	701c      	strb	r4, [r3, #0]
 8001698:	e76b      	b.n	8001572 <HW_TS_Start+0x6e>
    aTimerContext[TimerID].NextID = RefTimerID;
 800169a:	4a07      	ldr	r2, [pc, #28]	; (80016b8 <HW_TS_Start+0x1b4>)
 800169c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80016a0:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80016a4:	764b      	strb	r3, [r1, #25]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80016a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80016aa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80016ae:	761c      	strb	r4, [r3, #24]
 80016b0:	e7ed      	b.n	800168e <HW_TS_Start+0x18a>
    RescheduleTimerList();
 80016b2:	f7ff fd59 	bl	8001168 <RescheduleTimerList>
 80016b6:	e76f      	b.n	8001598 <HW_TS_Start+0x94>
 80016b8:	20000090 	.word	0x20000090
 80016bc:	200002d8 	.word	0x200002d8

080016c0 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80016c0:	b508      	push	{r3, lr}
  pTimerCallBack();
 80016c2:	4790      	blx	r2

  return;
}
 80016c4:	bd08      	pop	{r3, pc}
	...

080016c8 <HW_TS_RTC_Wakeup_Handler>:
{
 80016c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016ca:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80016ce:	b672      	cpsid	i
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80016d0:	4b37      	ldr	r3, [pc, #220]	; (80017b0 <HW_TS_RTC_Wakeup_Handler+0xe8>)
 80016d2:	6819      	ldr	r1, [r3, #0]
 80016d4:	680b      	ldr	r3, [r1, #0]
 80016d6:	22ca      	movs	r2, #202	; 0xca
 80016d8:	625a      	str	r2, [r3, #36]	; 0x24
 80016da:	680b      	ldr	r3, [r1, #0]
 80016dc:	2253      	movs	r2, #83	; 0x53
 80016de:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 80016e0:	680a      	ldr	r2, [r1, #0]
 80016e2:	6893      	ldr	r3, [r2, #8]
 80016e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80016e8:	6093      	str	r3, [r2, #8]
  local_current_running_timer_id = CurrentRunningTimerID;
 80016ea:	4a32      	ldr	r2, [pc, #200]	; (80017b4 <HW_TS_RTC_Wakeup_Handler+0xec>)
 80016ec:	7813      	ldrb	r3, [r2, #0]
 80016ee:	b2dd      	uxtb	r5, r3
  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80016f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80016f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80016f8:	7c1b      	ldrb	r3, [r3, #16]
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d015      	beq.n	800172c <HW_TS_RTC_Wakeup_Handler+0x64>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001700:	680a      	ldr	r2, [r1, #0]
 8001702:	68d3      	ldr	r3, [r2, #12]
 8001704:	f013 0f04 	tst.w	r3, #4
 8001708:	d0fb      	beq.n	8001702 <HW_TS_RTC_Wakeup_Handler+0x3a>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800170a:	68d3      	ldr	r3, [r2, #12]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8001712:	60d3      	str	r3, [r2, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001714:	4b28      	ldr	r3, [pc, #160]	; (80017b8 <HW_TS_RTC_Wakeup_Handler+0xf0>)
 8001716:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800171a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800171c:	f384 8810 	msr	PRIMASK, r4
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001720:	4b23      	ldr	r3, [pc, #140]	; (80017b0 <HW_TS_RTC_Wakeup_Handler+0xe8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	22ff      	movs	r2, #255	; 0xff
 8001728:	625a      	str	r2, [r3, #36]	; 0x24
}
 800172a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800172c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001730:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001734:	685e      	ldr	r6, [r3, #4]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001736:	695f      	ldr	r7, [r3, #20]
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001738:	f892 3098 	ldrb.w	r3, [r2, #152]	; 0x98
 800173c:	2b00      	cmp	r3, #0
 800173e:	d032      	beq.n	80017a6 <HW_TS_RTC_Wakeup_Handler+0xde>
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001740:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001744:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001748:	7c5b      	ldrb	r3, [r3, #17]
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b01      	cmp	r3, #1
 800174e:	d012      	beq.n	8001776 <HW_TS_RTC_Wakeup_Handler+0xae>
 8001750:	f384 8810 	msr	PRIMASK, r4
        HW_TS_Stop(local_current_running_timer_id);
 8001754:	4628      	mov	r0, r5
 8001756:	f7ff fe77 	bl	8001448 <HW_TS_Stop>
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <HW_TS_RTC_Wakeup_Handler+0xe8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	21ca      	movs	r1, #202	; 0xca
 8001762:	6251      	str	r1, [r2, #36]	; 0x24
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2253      	movs	r2, #83	; 0x53
 8001768:	625a      	str	r2, [r3, #36]	; 0x24
      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 800176a:	4632      	mov	r2, r6
 800176c:	4629      	mov	r1, r5
 800176e:	4638      	mov	r0, r7
 8001770:	f7ff ffa6 	bl	80016c0 <HW_TS_RTC_Int_AppNot>
 8001774:	e7d4      	b.n	8001720 <HW_TS_RTC_Wakeup_Handler+0x58>
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001776:	2101      	movs	r1, #1
 8001778:	4628      	mov	r0, r5
 800177a:	f7ff fc81 	bl	8001080 <UnlinkTimer>
 800177e:	f384 8810 	msr	PRIMASK, r4
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001782:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001786:	4a0b      	ldr	r2, [pc, #44]	; (80017b4 <HW_TS_RTC_Wakeup_Handler+0xec>)
 8001788:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800178c:	6899      	ldr	r1, [r3, #8]
 800178e:	4628      	mov	r0, r5
 8001790:	f7ff feb8 	bl	8001504 <HW_TS_Start>
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HW_TS_RTC_Wakeup_Handler+0xe8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	21ca      	movs	r1, #202	; 0xca
 800179c:	6251      	str	r1, [r2, #36]	; 0x24
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2253      	movs	r2, #83	; 0x53
 80017a2:	625a      	str	r2, [r3, #36]	; 0x24
 80017a4:	e7e1      	b.n	800176a <HW_TS_RTC_Wakeup_Handler+0xa2>
      RescheduleTimerList();
 80017a6:	f7ff fcdf 	bl	8001168 <RescheduleTimerList>
 80017aa:	f384 8810 	msr	PRIMASK, r4
}
 80017ae:	e7b7      	b.n	8001720 <HW_TS_RTC_Wakeup_Handler+0x58>
 80017b0:	200002d8 	.word	0x200002d8
 80017b4:	20000090 	.word	0x20000090
 80017b8:	58000800 	.word	0x58000800

080017bc <HW_UART_Transmit_DMA>:
hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
    HAL_StatusTypeDef hal_status = HAL_OK;
    hw_status_t hw_status = hw_uart_ok;

    switch (hw_uart_id)
 80017bc:	b108      	cbz	r0, 80017c2 <HW_UART_Transmit_DMA+0x6>
    hw_status_t hw_status = hw_uart_ok;
 80017be:	2000      	movs	r0, #0
        default:
            break;
    }

    return hw_status;
}
 80017c0:	4770      	bx	lr
{
 80017c2:	b508      	push	{r3, lr}
            HW_huart1TxCb = cb;
 80017c4:	4807      	ldr	r0, [pc, #28]	; (80017e4 <HW_UART_Transmit_DMA+0x28>)
 80017c6:	6003      	str	r3, [r0, #0]
            huart1.Instance = USART1;
 80017c8:	4807      	ldr	r0, [pc, #28]	; (80017e8 <HW_UART_Transmit_DMA+0x2c>)
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <HW_UART_Transmit_DMA+0x30>)
 80017cc:	6003      	str	r3, [r0, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80017ce:	f003 fd5b 	bl	8005288 <HAL_UART_Transmit_DMA>
    switch (hal_status)
 80017d2:	2802      	cmp	r0, #2
 80017d4:	d005      	beq.n	80017e2 <HW_UART_Transmit_DMA+0x26>
 80017d6:	2803      	cmp	r0, #3
 80017d8:	d003      	beq.n	80017e2 <HW_UART_Transmit_DMA+0x26>
    hw_status_t hw_status = hw_uart_ok;
 80017da:	2801      	cmp	r0, #1
 80017dc:	bf14      	ite	ne
 80017de:	2000      	movne	r0, #0
 80017e0:	2001      	moveq	r0, #1
}
 80017e2:	bd08      	pop	{r3, pc}
 80017e4:	20000428 	.word	0x20000428
 80017e8:	200005c4 	.word	0x200005c4
 80017ec:	40013800 	.word	0x40013800

080017f0 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80017f0:	b508      	push	{r3, lr}
    switch ((uint32_t)huart->Instance)
 80017f2:	6802      	ldr	r2, [r0, #0]
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <HAL_UART_TxCpltCallback+0x18>)
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d000      	beq.n	80017fc <HAL_UART_TxCpltCallback+0xc>
        default:
            break;
    }

    return;
}
 80017fa:	bd08      	pop	{r3, pc}
            if(HW_huart1TxCb)
 80017fc:	4b03      	ldr	r3, [pc, #12]	; (800180c <HAL_UART_TxCpltCallback+0x1c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0fa      	beq.n	80017fa <HAL_UART_TxCpltCallback+0xa>
                HW_huart1TxCb();
 8001804:	4798      	blx	r3
    return;
 8001806:	e7f8      	b.n	80017fa <HAL_UART_TxCpltCallback+0xa>
 8001808:	40013800 	.word	0x40013800
 800180c:	20000428 	.word	0x20000428

08001810 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 8001810:	b508      	push	{r3, lr}
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001812:	4805      	ldr	r0, [pc, #20]	; (8001828 <MX_IPCC_Init+0x18>)
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <MX_IPCC_Init+0x1c>)
 8001816:	6003      	str	r3, [r0, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001818:	f001 f9e4 	bl	8002be4 <HAL_IPCC_Init>
 800181c:	b900      	cbnz	r0, 8001820 <MX_IPCC_Init+0x10>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800181e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001820:	f000 f9b4 	bl	8001b8c <Error_Handler>
}
 8001824:	e7fb      	b.n	800181e <MX_IPCC_Init+0xe>
 8001826:	bf00      	nop
 8001828:	2000042c 	.word	0x2000042c
 800182c:	58000c00 	.word	0x58000c00

08001830 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{

  if(ipccHandle->Instance==IPCC)
 8001830:	6802      	ldr	r2, [r0, #0]
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_IPCC_MspInit+0x4c>)
 8001834:	429a      	cmp	r2, r3
 8001836:	d000      	beq.n	800183a <HAL_IPCC_MspInit+0xa>
 8001838:	4770      	bx	lr
{
 800183a:	b500      	push	{lr}
 800183c:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB3ENR, Periphs);
 800183e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001842:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001844:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001848:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800184a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800184c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001850:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001852:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001854:	2200      	movs	r2, #0
 8001856:	4611      	mov	r1, r2
 8001858:	202c      	movs	r0, #44	; 0x2c
 800185a:	f000 fd33 	bl	80022c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800185e:	202c      	movs	r0, #44	; 0x2c
 8001860:	f000 fd74 	bl	800234c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001864:	2200      	movs	r2, #0
 8001866:	4611      	mov	r1, r2
 8001868:	202d      	movs	r0, #45	; 0x2d
 800186a:	f000 fd2b 	bl	80022c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800186e:	202d      	movs	r0, #45	; 0x2d
 8001870:	f000 fd6c 	bl	800234c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8001874:	b003      	add	sp, #12
 8001876:	f85d fb04 	ldr.w	pc, [sp], #4
 800187a:	bf00      	nop
 800187c:	58000c00 	.word	0x58000c00

08001880 <__io_getchar>:

	HAL_UART_Transmit(&huart1, &ch, 1, 100);
}

int __io_getchar(void)
{
 8001880:	b500      	push	{lr}
 8001882:	b083      	sub	sp, #12
	uint8_t ch = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_UART_Receive(&huart1, &ch, 1, 100);
 800188a:	2364      	movs	r3, #100	; 0x64
 800188c:	2201      	movs	r2, #1
 800188e:	f10d 0107 	add.w	r1, sp, #7
 8001892:	4804      	ldr	r0, [pc, #16]	; (80018a4 <__io_getchar+0x24>)
 8001894:	f004 fa4d 	bl	8005d32 <HAL_UART_Receive>
	return ch;
}
 8001898:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800189c:	b003      	add	sp, #12
 800189e:	f85d fb04 	ldr.w	pc, [sp], #4
 80018a2:	bf00      	nop
 80018a4:	200005c4 	.word	0x200005c4

080018a8 <hal_spi_in_out>:



#if 1
uint8_t hal_spi_in_out( const uint8_t in_data )
{
 80018a8:	b500      	push	{lr}
 80018aa:	b087      	sub	sp, #28
 80018ac:	f88d 000f 	strb.w	r0, [sp, #15]

#if 1

	uint8_t data = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f88d 3017 	strb.w	r3, [sp, #23]

//    HAL_SPI_Transmit( &hspi1, (uint8_t *) &data, 1, 1000);
//    HAL_SPI_Receive( &hspi1, (uint8_t *) &data, 1, 1000);

    HAL_SPI_TransmitReceive(&hspi1, &in_data, &data, 1, 1000);
 80018b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	2301      	movs	r3, #1
 80018be:	f10d 0217 	add.w	r2, sp, #23
 80018c2:	f10d 010f 	add.w	r1, sp, #15
 80018c6:	4804      	ldr	r0, [pc, #16]	; (80018d8 <hal_spi_in_out+0x30>)
 80018c8:	f003 fb2a 	bl	8004f20 <HAL_SPI_TransmitReceive>
//        {
//        };
//        return LL_SPI_ReceiveData8( &huart1 );

#endif
}
 80018cc:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80018d0:	b007      	add	sp, #28
 80018d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80018d6:	bf00      	nop
 80018d8:	200004a0 	.word	0x200004a0

080018dc <my_lr1110_hal_wait_on_busy>:
}



void my_lr1110_hal_wait_on_busy( void )
{
 80018dc:	b538      	push	{r3, r4, r5, lr}

    while( HAL_GPIO_ReadPin(LR_BUSY_GPIO_Port, LR_BUSY_Pin) == 1 )
 80018de:	4d04      	ldr	r5, [pc, #16]	; (80018f0 <my_lr1110_hal_wait_on_busy+0x14>)
 80018e0:	2401      	movs	r4, #1
 80018e2:	4621      	mov	r1, r4
 80018e4:	4628      	mov	r0, r5
 80018e6:	f001 f923 	bl	8002b30 <HAL_GPIO_ReadPin>
 80018ea:	2801      	cmp	r0, #1
 80018ec:	d0f9      	beq.n	80018e2 <my_lr1110_hal_wait_on_busy+0x6>
    {
    };
}
 80018ee:	bd38      	pop	{r3, r4, r5, pc}
 80018f0:	48000400 	.word	0x48000400

080018f4 <my_lr1110_hal_check_device_ready>:

void my_lr1110_hal_check_device_ready(void )
{
 80018f4:	b508      	push	{r3, lr}

	        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2110      	movs	r1, #16
 80018fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018fe:	f001 f929 	bl	8002b54 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 1);
 8001902:	2201      	movs	r2, #1
 8001904:	2110      	movs	r1, #16
 8001906:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800190a:	f001 f923 	bl	8002b54 <HAL_GPIO_WritePin>
        my_lr1110_hal_wait_on_busy( );
 800190e:	f7ff ffe5 	bl	80018dc <my_lr1110_hal_wait_on_busy>
//        hal_gpio_set_value( lr1110_context->nss, 0 );
//        hal_gpio_set_value( lr1110_context->nss, 1 );
//        lr1110_hal_wait_on_busy( lr1110_context->busy );
//        radio_mode = RADIO_AWAKE;
//    }
}
 8001912:	bd08      	pop	{r3, pc}

08001914 <my_lr1110_hal_read>:
#endif
}

void my_lr1110_hal_read( const uint8_t* command, const uint16_t command_length,
                                     uint8_t* data, const uint16_t data_length )
{
 8001914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001918:	4681      	mov	r9, r0
 800191a:	460e      	mov	r6, r1
 800191c:	4690      	mov	r8, r2
 800191e:	461f      	mov	r7, r3
    my_lr1110_hal_check_device_ready(  );
 8001920:	f7ff ffe8 	bl	80018f4 <my_lr1110_hal_check_device_ready>

    // Put NSS low to start spi transaction
    //    hal_gpio_set_value( lr1110_context->nss, 0 );
    HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 0);
 8001924:	2200      	movs	r2, #0
 8001926:	2110      	movs	r1, #16
 8001928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192c:	f001 f912 	bl	8002b54 <HAL_GPIO_WritePin>

    HAL_Delay(1);
 8001930:	2001      	movs	r0, #1
 8001932:	f7ff fa77 	bl	8000e24 <HAL_Delay>

    for( uint16_t i = 0; i < command_length; i++ )
 8001936:	b156      	cbz	r6, 800194e <my_lr1110_hal_read+0x3a>
 8001938:	f109 34ff 	add.w	r4, r9, #4294967295
 800193c:	3e01      	subs	r6, #1
 800193e:	fa19 f686 	uxtah	r6, r9, r6
    {
        hal_spi_in_out( command[i] );
 8001942:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001946:	f7ff ffaf 	bl	80018a8 <hal_spi_in_out>
    for( uint16_t i = 0; i < command_length; i++ )
 800194a:	42b4      	cmp	r4, r6
 800194c:	d1f9      	bne.n	8001942 <my_lr1110_hal_read+0x2e>
    }

//    hal_gpio_set_value( lr1110_context->nss, 1 );
    HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 1);
 800194e:	2201      	movs	r2, #1
 8001950:	2110      	movs	r1, #16
 8001952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001956:	f001 f8fd 	bl	8002b54 <HAL_GPIO_WritePin>

    if( data_length > 0 )
 800195a:	b91f      	cbnz	r7, 8001964 <my_lr1110_hal_read+0x50>
        // Put NSS high as the spi transaction is finished
//        hal_gpio_set_value( lr1110_context->nss, 1 );
        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 1);
    }

    my_lr1110_hal_wait_on_busy();
 800195c:	f7ff ffbe 	bl	80018dc <my_lr1110_hal_wait_on_busy>

}
 8001960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    	my_lr1110_hal_wait_on_busy(  );
 8001964:	f7ff ffba 	bl	80018dc <my_lr1110_hal_wait_on_busy>
    	HAL_Delay(10);
 8001968:	200a      	movs	r0, #10
 800196a:	f7ff fa5b 	bl	8000e24 <HAL_Delay>
        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	2110      	movs	r1, #16
 8001972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001976:	f001 f8ed 	bl	8002b54 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800197a:	2001      	movs	r0, #1
 800197c:	f7ff fa52 	bl	8000e24 <HAL_Delay>
        hal_spi_in_out( 0x00 );
 8001980:	2000      	movs	r0, #0
 8001982:	f7ff ff91 	bl	80018a8 <hal_spi_in_out>
        for( uint16_t i = 0; i < data_length; i++ )
 8001986:	f108 34ff 	add.w	r4, r8, #4294967295
 800198a:	1e7d      	subs	r5, r7, #1
 800198c:	fa18 f585 	uxtah	r5, r8, r5
            data[i] = hal_spi_in_out( 0 );
 8001990:	2600      	movs	r6, #0
 8001992:	4630      	mov	r0, r6
 8001994:	f7ff ff88 	bl	80018a8 <hal_spi_in_out>
 8001998:	f804 0f01 	strb.w	r0, [r4, #1]!
        for( uint16_t i = 0; i < data_length; i++ )
 800199c:	42ac      	cmp	r4, r5
 800199e:	d1f8      	bne.n	8001992 <my_lr1110_hal_read+0x7e>
        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 1);
 80019a0:	2201      	movs	r2, #1
 80019a2:	2110      	movs	r1, #16
 80019a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a8:	f001 f8d4 	bl	8002b54 <HAL_GPIO_WritePin>
 80019ac:	e7d6      	b.n	800195c <my_lr1110_hal_read+0x48>

080019ae <my_lr1110_get_version>:
    HAL_GPIO_WritePin(BLE_WIFI_SEL_SWITCH_GPIO_Port, BLE_WIFI_SEL_SWITCH_Pin, 0);
}


void my_lr1110_get_version( char * hw, char * type, uint16_t * fw )
{
 80019ae:	b570      	push	{r4, r5, r6, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	4606      	mov	r6, r0
 80019b4:	460d      	mov	r5, r1
 80019b6:	4614      	mov	r4, r2
    uint8_t         cbuffer[2];
    uint8_t         rbuffer[4] = { 0x00 };
 80019b8:	2300      	movs	r3, #0
 80019ba:	9300      	str	r3, [sp, #0]

    cbuffer[0] = ( uint8_t )( 1 );
 80019bc:	2301      	movs	r3, #1
 80019be:	f88d 3004 	strb.w	r3, [sp, #4]
    cbuffer[1] = ( uint8_t )( 1 );
 80019c2:	f88d 3005 	strb.w	r3, [sp, #5]

    my_lr1110_hal_read( cbuffer, 2, rbuffer, 4 );
 80019c6:	2304      	movs	r3, #4
 80019c8:	466a      	mov	r2, sp
 80019ca:	2102      	movs	r1, #2
 80019cc:	eb0d 0003 	add.w	r0, sp, r3
 80019d0:	f7ff ffa0 	bl	8001914 <my_lr1110_hal_read>


	* hw   = rbuffer[0];
 80019d4:	f89d 3000 	ldrb.w	r3, [sp]
 80019d8:	7033      	strb	r3, [r6, #0]
	* type = rbuffer[1];
 80019da:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80019de:	702b      	strb	r3, [r5, #0]
	* fw    = ( ( uint16_t ) rbuffer[2] << 8 ) + ( uint16_t ) rbuffer[3];
 80019e0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80019e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80019e8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80019ec:	8023      	strh	r3, [r4, #0]

}
 80019ee:	b002      	add	sp, #8
 80019f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080019f4 <my_lr1110_reset>:


void my_lr1110_reset(void)
{
 80019f4:	b508      	push	{r3, lr}
	printf("LR1110 -- Reset\r\n");
 80019f6:	4809      	ldr	r0, [pc, #36]	; (8001a1c <my_lr1110_reset+0x28>)
 80019f8:	f006 fd4e 	bl	8008498 <puts>
	HAL_GPIO_WritePin(LR_NRESET_GPIO_Port, LR_NRESET_Pin, 0);
 80019fc:	2200      	movs	r2, #0
 80019fe:	2101      	movs	r1, #1
 8001a00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a04:	f001 f8a6 	bl	8002b54 <HAL_GPIO_WritePin>
	HAL_Delay( 1 );
 8001a08:	2001      	movs	r0, #1
 8001a0a:	f7ff fa0b 	bl	8000e24 <HAL_Delay>
	HAL_GPIO_WritePin(LR_NRESET_GPIO_Port, LR_NRESET_Pin, 1);
 8001a0e:	2201      	movs	r2, #1
 8001a10:	4611      	mov	r1, r2
 8001a12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a16:	f001 f89d 	bl	8002b54 <HAL_GPIO_WritePin>
}
 8001a1a:	bd08      	pop	{r3, pc}
 8001a1c:	08009850 	.word	0x08009850

08001a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a20:	b510      	push	{r4, lr}
 8001a22:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a24:	2244      	movs	r2, #68	; 0x44
 8001a26:	2100      	movs	r1, #0
 8001a28:	a807      	add	r0, sp, #28
 8001a2a:	f006 fca7 	bl	800837c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a2e:	2400      	movs	r4, #0
 8001a30:	9400      	str	r4, [sp, #0]
 8001a32:	9401      	str	r4, [sp, #4]
 8001a34:	9402      	str	r4, [sp, #8]
 8001a36:	9403      	str	r4, [sp, #12]
 8001a38:	9404      	str	r4, [sp, #16]
 8001a3a:	9405      	str	r4, [sp, #20]
 8001a3c:	9406      	str	r4, [sp, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a3e:	f001 f8ff 	bl	8002c40 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001a42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a46:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a4a:	f023 0318 	bic.w	r3, r3, #24
 8001a4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001a52:	2307      	movs	r3, #7
 8001a54:	9307      	str	r3, [sp, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a5a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a64:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a66:	2340      	movs	r3, #64	; 0x40
 8001a68:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a6a:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a6c:	a807      	add	r0, sp, #28
 8001a6e:	f001 f9dd 	bl	8002e2c <HAL_RCC_OscConfig>
 8001a72:	b9a0      	cbnz	r0, 8001a9e <SystemClock_Config+0x7e>
  {
    Error_Handler();
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001a74:	236f      	movs	r3, #111	; 0x6f
 8001a76:	9300      	str	r3, [sp, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a80:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a82:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001a84:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001a86:	9306      	str	r3, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a88:	2101      	movs	r1, #1
 8001a8a:	4668      	mov	r0, sp
 8001a8c:	f001 fde4 	bl	8003658 <HAL_RCC_ClockConfig>
 8001a90:	b938      	cbnz	r0, 8001aa2 <SystemClock_Config+0x82>
  {
    Error_Handler();
  }
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSE);
 8001a92:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001a96:	f002 f95f 	bl	8003d58 <HAL_RCCEx_EnableLSCO>
}
 8001a9a:	b018      	add	sp, #96	; 0x60
 8001a9c:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8001a9e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <SystemClock_Config+0x80>
 8001aa2:	b672      	cpsid	i
 8001aa4:	e7fe      	b.n	8001aa4 <SystemClock_Config+0x84>

08001aa6 <PeriphCommonClock_Config>:
{
 8001aa6:	b500      	push	{lr}
 8001aa8:	b08d      	sub	sp, #52	; 0x34
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aaa:	2220      	movs	r2, #32
 8001aac:	2100      	movs	r1, #0
 8001aae:	a801      	add	r0, sp, #4
 8001ab0:	f006 fc64 	bl	800837c <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001ab4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001ab8:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001aba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001abe:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001ac4:	2310      	movs	r3, #16
 8001ac6:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ac8:	4668      	mov	r0, sp
 8001aca:	f001 ff9f 	bl	8003a0c <HAL_RCCEx_PeriphCLKConfig>
 8001ace:	b910      	cbnz	r0, 8001ad6 <PeriphCommonClock_Config+0x30>
}
 8001ad0:	b00d      	add	sp, #52	; 0x34
 8001ad2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ad6:	b672      	cpsid	i
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <PeriphCommonClock_Config+0x32>
	...

08001adc <main>:
{
 8001adc:	b500      	push	{lr}
 8001ade:	b083      	sub	sp, #12
  HAL_Init();
 8001ae0:	f000 fb9e 	bl	8002220 <HAL_Init>
  MX_APPE_Config();
 8001ae4:	f7ff f8e0 	bl	8000ca8 <MX_APPE_Config>
  SystemClock_Config();
 8001ae8:	f7ff ff9a 	bl	8001a20 <SystemClock_Config>
  PeriphCommonClock_Config();
 8001aec:	f7ff ffdb 	bl	8001aa6 <PeriphCommonClock_Config>
   MX_IPCC_Init();
 8001af0:	f7ff fe8e 	bl	8001810 <MX_IPCC_Init>
  MX_GPIO_Init();
 8001af4:	f7ff f9f8 	bl	8000ee8 <MX_GPIO_Init>
  MX_RF_Init();
 8001af8:	f000 f854 	bl	8001ba4 <MX_RF_Init>
  MX_SPI1_Init();
 8001afc:	f000 f93e 	bl	8001d7c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001b00:	f000 fa72 	bl	8001fe8 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8001b04:	f000 f894 	bl	8001c30 <MX_RTC_Init>
  MX_RNG_Init();
 8001b08:	f000 f84e 	bl	8001ba8 <MX_RNG_Init>
  MX_DMA_Init();
 8001b0c:	f7ff f9c3 	bl	8000e96 <MX_DMA_Init>
  printf("\r\n\r\n\r\n");
 8001b10:	4819      	ldr	r0, [pc, #100]	; (8001b78 <main+0x9c>)
 8001b12:	f006 fcc1 	bl	8008498 <puts>
  printf("===================================================\r\n");
 8001b16:	4819      	ldr	r0, [pc, #100]	; (8001b7c <main+0xa0>)
 8001b18:	f006 fcbe 	bl	8008498 <puts>
  printf("||       Lora Asset Tracker v%d.%d.%d                ||\r\n",
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	2200      	movs	r2, #0
 8001b20:	4611      	mov	r1, r2
 8001b22:	4817      	ldr	r0, [pc, #92]	; (8001b80 <main+0xa4>)
 8001b24:	f006 fc32 	bl	800838c <iprintf>
  printf("===================================================\r\n\r\n");
 8001b28:	4816      	ldr	r0, [pc, #88]	; (8001b84 <main+0xa8>)
 8001b2a:	f006 fcb5 	bl	8008498 <puts>
  my_lr1110_reset();
 8001b2e:	f7ff ff61 	bl	80019f4 <my_lr1110_reset>
  HAL_Delay(500);
 8001b32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b36:	f7ff f975 	bl	8000e24 <HAL_Delay>
  my_lr1110_reset();
 8001b3a:	f7ff ff5b 	bl	80019f4 <my_lr1110_reset>
  uint8_t hw = 0, type = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f88d 3007 	strb.w	r3, [sp, #7]
 8001b44:	f88d 3006 	strb.w	r3, [sp, #6]
  uint16_t fw = 0;
 8001b48:	f8ad 3004 	strh.w	r3, [sp, #4]
  my_lr1110_get_version( &hw, &type, &fw );
 8001b4c:	aa01      	add	r2, sp, #4
 8001b4e:	f10d 0106 	add.w	r1, sp, #6
 8001b52:	f10d 0007 	add.w	r0, sp, #7
 8001b56:	f7ff ff2a 	bl	80019ae <my_lr1110_get_version>
  printf( "LR1110 : hw:%#02X / type:%#02X / fw:%#04X\n\r", hw, type, fw );
 8001b5a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001b5e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8001b62:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001b66:	4808      	ldr	r0, [pc, #32]	; (8001b88 <main+0xac>)
 8001b68:	f006 fc10 	bl	800838c <iprintf>
  MX_APPE_Init();
 8001b6c:	f7ff f904 	bl	8000d78 <MX_APPE_Init>
    MX_APPE_Process();
 8001b70:	f7ff f974 	bl	8000e5c <MX_APPE_Process>
  while (1)
 8001b74:	e7fc      	b.n	8001b70 <main+0x94>
 8001b76:	bf00      	nop
 8001b78:	08009864 	.word	0x08009864
 8001b7c:	0800986c 	.word	0x0800986c
 8001b80:	080098a4 	.word	0x080098a4
 8001b84:	080098e0 	.word	0x080098e0
 8001b88:	08009918 	.word	0x08009918

08001b8c <Error_Handler>:
 8001b8c:	b672      	cpsid	i
  while (1)
 8001b8e:	e7fe      	b.n	8001b8e <Error_Handler+0x2>

08001b90 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001b90:	b508      	push	{r3, lr}
 8001b92:	460a      	mov	r2, r1
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

	printf( "Wrong parameters value: file %s on line %lu\n", ( const char* )file, line );
 8001b94:	4601      	mov	r1, r0
 8001b96:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <assert_failed+0x10>)
 8001b98:	f006 fbf8 	bl	800838c <iprintf>
	/* Infinite loop */
	while( 1 )
 8001b9c:	e7fe      	b.n	8001b9c <assert_failed+0xc>
 8001b9e:	bf00      	nop
 8001ba0:	08009944 	.word	0x08009944

08001ba4 <MX_RF_Init>:
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001ba4:	4770      	bx	lr
	...

08001ba8 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001ba8:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001baa:	4806      	ldr	r0, [pc, #24]	; (8001bc4 <MX_RNG_Init+0x1c>)
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <MX_RNG_Init+0x20>)
 8001bae:	6003      	str	r3, [r0, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	6043      	str	r3, [r0, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001bb4:	f002 f91c 	bl	8003df0 <HAL_RNG_Init>
 8001bb8:	b900      	cbnz	r0, 8001bbc <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001bba:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001bbc:	f7ff ffe6 	bl	8001b8c <Error_Handler>
}
 8001bc0:	e7fb      	b.n	8001bba <MX_RNG_Init+0x12>
 8001bc2:	bf00      	nop
 8001bc4:	20000468 	.word	0x20000468
 8001bc8:	58001000 	.word	0x58001000

08001bcc <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001bcc:	b510      	push	{r4, lr}
 8001bce:	b08e      	sub	sp, #56	; 0x38
 8001bd0:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bd2:	2230      	movs	r2, #48	; 0x30
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	a802      	add	r0, sp, #8
 8001bd8:	f006 fbd0 	bl	800837c <memset>
  if(rngHandle->Instance==RNG)
 8001bdc:	6822      	ldr	r2, [r4, #0]
 8001bde:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <HAL_RNG_MspInit+0x60>)
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d001      	beq.n	8001be8 <HAL_RNG_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001be4:	b00e      	add	sp, #56	; 0x38
 8001be6:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bec:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_LSE;
 8001bee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001bf2:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bf4:	a802      	add	r0, sp, #8
 8001bf6:	f001 ff09 	bl	8003a0c <HAL_RCCEx_PeriphCLKConfig>
 8001bfa:	b998      	cbnz	r0, 8001c24 <HAL_RNG_MspInit+0x58>
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c02:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001c06:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c0e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001c10:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(RNG_IRQn, 0, 0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	4611      	mov	r1, r2
 8001c16:	2035      	movs	r0, #53	; 0x35
 8001c18:	f000 fb54 	bl	80022c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 8001c1c:	2035      	movs	r0, #53	; 0x35
 8001c1e:	f000 fb95 	bl	800234c <HAL_NVIC_EnableIRQ>
}
 8001c22:	e7df      	b.n	8001be4 <HAL_RNG_MspInit+0x18>
      Error_Handler();
 8001c24:	f7ff ffb2 	bl	8001b8c <Error_Handler>
 8001c28:	e7e8      	b.n	8001bfc <HAL_RNG_MspInit+0x30>
 8001c2a:	bf00      	nop
 8001c2c:	58001000 	.word	0x58001000

08001c30 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001c30:	b510      	push	{r4, lr}
 8001c32:	b090      	sub	sp, #64	; 0x40

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c34:	2400      	movs	r4, #0
 8001c36:	940b      	str	r4, [sp, #44]	; 0x2c
 8001c38:	940c      	str	r4, [sp, #48]	; 0x30
 8001c3a:	940d      	str	r4, [sp, #52]	; 0x34
 8001c3c:	940e      	str	r4, [sp, #56]	; 0x38
 8001c3e:	940f      	str	r4, [sp, #60]	; 0x3c
  RTC_DateTypeDef sDate = {0};
 8001c40:	940a      	str	r4, [sp, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001c42:	2228      	movs	r2, #40	; 0x28
 8001c44:	4621      	mov	r1, r4
 8001c46:	4668      	mov	r0, sp
 8001c48:	f006 fb98 	bl	800837c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c4c:	4829      	ldr	r0, [pc, #164]	; (8001cf4 <MX_RTC_Init+0xc4>)
 8001c4e:	4b2a      	ldr	r3, [pc, #168]	; (8001cf8 <MX_RTC_Init+0xc8>)
 8001c50:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c52:	6044      	str	r4, [r0, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001c54:	230f      	movs	r3, #15
 8001c56:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001c58:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001c5c:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c5e:	6104      	str	r4, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c60:	6184      	str	r4, [r0, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001c62:	6144      	str	r4, [r0, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c64:	f002 fa18 	bl	8004098 <HAL_RTC_Init>
 8001c68:	2800      	cmp	r0, #0
 8001c6a:	d137      	bne.n	8001cdc <MX_RTC_Init+0xac>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
  sTime.Minutes = 0;
 8001c72:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
  sTime.Seconds = 0;
 8001c76:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
  sTime.SubSeconds = 0x0;
 8001c7a:	920c      	str	r2, [sp, #48]	; 0x30
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c7c:	920e      	str	r2, [sp, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c7e:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001c80:	a90b      	add	r1, sp, #44	; 0x2c
 8001c82:	481c      	ldr	r0, [pc, #112]	; (8001cf4 <MX_RTC_Init+0xc4>)
 8001c84:	f002 fad8 	bl	8004238 <HAL_RTC_SetTime>
 8001c88:	bb58      	cbnz	r0, 8001ce2 <MX_RTC_Init+0xb2>
  {
    Error_Handler();
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001c90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  sDate.Date = 1;
 8001c94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  sDate.Year = 0;
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001c9e:	a90a      	add	r1, sp, #40	; 0x28
 8001ca0:	4814      	ldr	r0, [pc, #80]	; (8001cf4 <MX_RTC_Init+0xc4>)
 8001ca2:	f002 fc07 	bl	80044b4 <HAL_RTC_SetDate>
 8001ca6:	b9f8      	cbnz	r0, 8001ce8 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f88d 2000 	strb.w	r2, [sp]
  sAlarm.AlarmTime.Minutes = 0;
 8001cae:	f88d 2001 	strb.w	r2, [sp, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8001cb2:	f88d 2002 	strb.w	r2, [sp, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8001cb6:	9201      	str	r2, [sp, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001cb8:	9203      	str	r2, [sp, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001cba:	9204      	str	r2, [sp, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001cbc:	9205      	str	r2, [sp, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001cbe:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001cc0:	9207      	str	r2, [sp, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	f88d 3020 	strb.w	r3, [sp, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001cc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ccc:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001cce:	4669      	mov	r1, sp
 8001cd0:	4808      	ldr	r0, [pc, #32]	; (8001cf4 <MX_RTC_Init+0xc4>)
 8001cd2:	f002 fd03 	bl	80046dc <HAL_RTC_SetAlarm_IT>
 8001cd6:	b950      	cbnz	r0, 8001cee <MX_RTC_Init+0xbe>
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001cd8:	b010      	add	sp, #64	; 0x40
 8001cda:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001cdc:	f7ff ff56 	bl	8001b8c <Error_Handler>
 8001ce0:	e7c4      	b.n	8001c6c <MX_RTC_Init+0x3c>
    Error_Handler();
 8001ce2:	f7ff ff53 	bl	8001b8c <Error_Handler>
 8001ce6:	e7d0      	b.n	8001c8a <MX_RTC_Init+0x5a>
    Error_Handler();
 8001ce8:	f7ff ff50 	bl	8001b8c <Error_Handler>
 8001cec:	e7dc      	b.n	8001ca8 <MX_RTC_Init+0x78>
    Error_Handler();
 8001cee:	f7ff ff4d 	bl	8001b8c <Error_Handler>
}
 8001cf2:	e7f1      	b.n	8001cd8 <MX_RTC_Init+0xa8>
 8001cf4:	2000047c 	.word	0x2000047c
 8001cf8:	40002800 	.word	0x40002800

08001cfc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001cfc:	b510      	push	{r4, lr}
 8001cfe:	b08e      	sub	sp, #56	; 0x38
 8001d00:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d02:	2230      	movs	r2, #48	; 0x30
 8001d04:	2100      	movs	r1, #0
 8001d06:	a802      	add	r0, sp, #8
 8001d08:	f006 fb38 	bl	800837c <memset>
  if(rtcHandle->Instance==RTC)
 8001d0c:	6822      	ldr	r2, [r4, #0]
 8001d0e:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <HAL_RTC_MspInit+0x7c>)
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d001      	beq.n	8001d18 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001d14:	b00e      	add	sp, #56	; 0x38
 8001d16:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d1c:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d22:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d24:	a802      	add	r0, sp, #8
 8001d26:	f001 fe71 	bl	8003a0c <HAL_RCCEx_PeriphCLKConfig>
 8001d2a:	bb08      	cbnz	r0, 8001d70 <HAL_RTC_MspInit+0x74>
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d30:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001d34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001d3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d42:	659a      	str	r2, [r3, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d4a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001d4c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	4611      	mov	r1, r2
 8001d52:	2003      	movs	r0, #3
 8001d54:	f000 fab6 	bl	80022c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001d58:	2003      	movs	r0, #3
 8001d5a:	f000 faf7 	bl	800234c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	4611      	mov	r1, r2
 8001d62:	2029      	movs	r0, #41	; 0x29
 8001d64:	f000 faae 	bl	80022c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001d68:	2029      	movs	r0, #41	; 0x29
 8001d6a:	f000 faef 	bl	800234c <HAL_NVIC_EnableIRQ>
}
 8001d6e:	e7d1      	b.n	8001d14 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8001d70:	f7ff ff0c 	bl	8001b8c <Error_Handler>
 8001d74:	e7da      	b.n	8001d2c <HAL_RTC_MspInit+0x30>
 8001d76:	bf00      	nop
 8001d78:	40002800 	.word	0x40002800

08001d7c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d7c:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001d7e:	4810      	ldr	r0, [pc, #64]	; (8001dc0 <MX_SPI1_Init+0x44>)
 8001d80:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <MX_SPI1_Init+0x48>)
 8001d82:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d84:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001d88:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d8e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001d92:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d94:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d96:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d9c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001d9e:	2210      	movs	r2, #16
 8001da0:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001da2:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001da4:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001da6:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001da8:	2207      	movs	r2, #7
 8001daa:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001dac:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001dae:	2308      	movs	r3, #8
 8001db0:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001db2:	f002 ff7f 	bl	8004cb4 <HAL_SPI_Init>
 8001db6:	b900      	cbnz	r0, 8001dba <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001db8:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001dba:	f7ff fee7 	bl	8001b8c <Error_Handler>
}
 8001dbe:	e7fb      	b.n	8001db8 <MX_SPI1_Init+0x3c>
 8001dc0:	200004a0 	.word	0x200004a0
 8001dc4:	40013000 	.word	0x40013000

08001dc8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001dc8:	b500      	push	{lr}
 8001dca:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	2300      	movs	r3, #0
 8001dce:	9303      	str	r3, [sp, #12]
 8001dd0:	9304      	str	r3, [sp, #16]
 8001dd2:	9305      	str	r3, [sp, #20]
 8001dd4:	9306      	str	r3, [sp, #24]
 8001dd6:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 8001dd8:	6802      	ldr	r2, [r0, #0]
 8001dda:	4b14      	ldr	r3, [pc, #80]	; (8001e2c <HAL_SPI_MspInit+0x64>)
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d002      	beq.n	8001de6 <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001de0:	b009      	add	sp, #36	; 0x24
 8001de2:	f85d fb04 	ldr.w	pc, [sp], #4
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001dec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001df0:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001df2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001df4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001df8:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001dfa:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001dfc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dfe:	f042 0201 	orr.w	r2, r2, #1
 8001e02:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001e0c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 8001e0e:	23e0      	movs	r3, #224	; 0xe0
 8001e10:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e1c:	2305      	movs	r3, #5
 8001e1e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e20:	a903      	add	r1, sp, #12
 8001e22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e26:	f000 fd53 	bl	80028d0 <HAL_GPIO_Init>
}
 8001e2a:	e7d9      	b.n	8001de0 <HAL_SPI_MspInit+0x18>
 8001e2c:	40013000 	.word	0x40013000

08001e30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e30:	b500      	push	{lr}
 8001e32:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e3a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001e3e:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e46:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001e48:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	4611      	mov	r1, r2
 8001e4e:	2005      	movs	r0, #5
 8001e50:	f000 fa38 	bl	80022c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001e54:	2005      	movs	r0, #5
 8001e56:	f000 fa79 	bl	800234c <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	4611      	mov	r1, r2
 8001e5e:	202e      	movs	r0, #46	; 0x2e
 8001e60:	f000 fa30 	bl	80022c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001e64:	202e      	movs	r0, #46	; 0x2e
 8001e66:	f000 fa71 	bl	800234c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e6a:	b003      	add	sp, #12
 8001e6c:	f85d fb04 	ldr.w	pc, [sp], #4

08001e70 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <NMI_Handler>

08001e72 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e72:	e7fe      	b.n	8001e72 <HardFault_Handler>

08001e74 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e74:	e7fe      	b.n	8001e74 <MemManage_Handler>

08001e76 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e76:	e7fe      	b.n	8001e76 <BusFault_Handler>

08001e78 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e78:	e7fe      	b.n	8001e78 <UsageFault_Handler>

08001e7a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e7a:	4770      	bx	lr

08001e7c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e7c:	4770      	bx	lr

08001e7e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e7e:	4770      	bx	lr

08001e80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e82:	f000 f9e3 	bl	800224c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  HAL_SYSTICK_IRQHandler();
 8001e86:	f000 fada 	bl	800243e <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e8a:	bd08      	pop	{r3, pc}

08001e8c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001e8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001e8e:	f7ff fc1b 	bl	80016c8 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001e92:	bd08      	pop	{r3, pc}

08001e94 <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001e94:	4770      	bx	lr

08001e96 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001e96:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NSS_Pin);
 8001e98:	2010      	movs	r0, #16
 8001e9a:	f000 fe75 	bl	8002b88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  myRadioOnDioIrq();
 8001e9e:	f7fe fd15 	bl	80008cc <myRadioOnDioIrq>

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001ea2:	bd08      	pop	{r3, pc}

08001ea4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ea4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001ea6:	4802      	ldr	r0, [pc, #8]	; (8001eb0 <DMA1_Channel1_IRQHandler+0xc>)
 8001ea8:	f000 fcaf 	bl	800280a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001eac:	bd08      	pop	{r3, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000504 	.word	0x20000504

08001eb4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001eb4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001eb6:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <DMA1_Channel2_IRQHandler+0xc>)
 8001eb8:	f000 fca7 	bl	800280a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001ebc:	bd08      	pop	{r3, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000564 	.word	0x20000564

08001ec4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ec4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ec6:	4802      	ldr	r0, [pc, #8]	; (8001ed0 <USART1_IRQHandler+0xc>)
 8001ec8:	f003 faa0 	bl	800540c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ecc:	bd08      	pop	{r3, pc}
 8001ece:	bf00      	nop
 8001ed0:	200005c4 	.word	0x200005c4

08001ed4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC A and B alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001ed4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001ed6:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <RTC_Alarm_IRQHandler+0xc>)
 8001ed8:	f002 f874 	bl	8003fc4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001edc:	bd08      	pop	{r3, pc}
 8001ede:	bf00      	nop
 8001ee0:	2000047c 	.word	0x2000047c

08001ee4 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001ee4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001ee6:	f006 f883 	bl	8007ff0 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001eea:	bd08      	pop	{r3, pc}

08001eec <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001eec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001eee:	f006 f81f 	bl	8007f30 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001ef2:	bd08      	pop	{r3, pc}

08001ef4 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001ef4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001ef6:	f000 fe57 	bl	8002ba8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001efa:	bd08      	pop	{r3, pc}

08001efc <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 8001efc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8001efe:	4802      	ldr	r0, [pc, #8]	; (8001f08 <RNG_IRQHandler+0xc>)
 8001f00:	f001 ffac 	bl	8003e5c <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 8001f04:	bd08      	pop	{r3, pc}
 8001f06:	bf00      	nop
 8001f08:	20000468 	.word	0x20000468

08001f0c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f0c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0e:	1e16      	subs	r6, r2, #0
 8001f10:	dd07      	ble.n	8001f22 <_read+0x16>
 8001f12:	460c      	mov	r4, r1
 8001f14:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8001f16:	f7ff fcb3 	bl	8001880 <__io_getchar>
 8001f1a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1e:	42a5      	cmp	r5, r4
 8001f20:	d1f9      	bne.n	8001f16 <_read+0xa>
	}

return len;
}
 8001f22:	4630      	mov	r0, r6
 8001f24:	bd70      	pop	{r4, r5, r6, pc}

08001f26 <_close>:
}

int _close(int file)
{
	return -1;
}
 8001f26:	f04f 30ff 	mov.w	r0, #4294967295
 8001f2a:	4770      	bx	lr

08001f2c <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001f2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f30:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001f32:	2000      	movs	r0, #0
 8001f34:	4770      	bx	lr

08001f36 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001f36:	2001      	movs	r0, #1
 8001f38:	4770      	bx	lr

08001f3a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	4770      	bx	lr
	...

08001f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f40:	b508      	push	{r3, lr}
 8001f42:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f44:	4a0c      	ldr	r2, [pc, #48]	; (8001f78 <_sbrk+0x38>)
 8001f46:	6812      	ldr	r2, [r2, #0]
 8001f48:	b152      	cbz	r2, 8001f60 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f4a:	4a0b      	ldr	r2, [pc, #44]	; (8001f78 <_sbrk+0x38>)
 8001f4c:	6810      	ldr	r0, [r2, #0]
 8001f4e:	4403      	add	r3, r0
 8001f50:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <_sbrk+0x3c>)
 8001f52:	490b      	ldr	r1, [pc, #44]	; (8001f80 <_sbrk+0x40>)
 8001f54:	1a52      	subs	r2, r2, r1
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d806      	bhi.n	8001f68 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001f5a:	4a07      	ldr	r2, [pc, #28]	; (8001f78 <_sbrk+0x38>)
 8001f5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001f5e:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8001f60:	4a05      	ldr	r2, [pc, #20]	; (8001f78 <_sbrk+0x38>)
 8001f62:	4908      	ldr	r1, [pc, #32]	; (8001f84 <_sbrk+0x44>)
 8001f64:	6011      	str	r1, [r2, #0]
 8001f66:	e7f0      	b.n	8001f4a <_sbrk+0xa>
    errno = ENOMEM;
 8001f68:	f006 f9d0 	bl	800830c <__errno>
 8001f6c:	230c      	movs	r3, #12
 8001f6e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001f70:	f04f 30ff 	mov.w	r0, #4294967295
 8001f74:	e7f3      	b.n	8001f5e <_sbrk+0x1e>
 8001f76:	bf00      	nop
 8001f78:	200002dc 	.word	0x200002dc
 8001f7c:	20003000 	.word	0x20003000
 8001f80:	00000400 	.word	0x00000400
 8001f84:	20000670 	.word	0x20000670

08001f88 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001f88:	4a15      	ldr	r2, [pc, #84]	; (8001fe0 <SystemInit+0x58>)
 8001f8a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001f8e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f92:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	f042 0201 	orr.w	r2, r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001fa2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001fa6:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001fa8:	6819      	ldr	r1, [r3, #0]
 8001faa:	f1a2 62a2 	sub.w	r2, r2, #84934656	; 0x5100000
 8001fae:	f2a2 1205 	subw	r2, r2, #261	; 0x105
 8001fb2:	400a      	ands	r2, r1
 8001fb4:	601a      	str	r2, [r3, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001fb6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001fba:	f022 0205 	bic.w	r2, r2, #5
 8001fbe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001fc2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001fc6:	f022 0201 	bic.w	r2, r2, #1
 8001fca:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001fce:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <SystemInit+0x5c>)
 8001fd0:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fd8:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001fda:	2200      	movs	r2, #0
 8001fdc:	619a      	str	r2, [r3, #24]
}
 8001fde:	4770      	bx	lr
 8001fe0:	e000ed00 	.word	0xe000ed00
 8001fe4:	22041000 	.word	0x22041000

08001fe8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001fe8:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fea:	4818      	ldr	r0, [pc, #96]	; (800204c <MX_USART1_UART_Init+0x64>)
 8001fec:	4b18      	ldr	r3, [pc, #96]	; (8002050 <MX_USART1_UART_Init+0x68>)
 8001fee:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001ff0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001ff4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ffa:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ffc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ffe:	220c      	movs	r2, #12
 8002000:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002002:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002004:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002008:	61c2      	str	r2, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800200a:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800200c:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800200e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002010:	f003 ff60 	bl	8005ed4 <HAL_UART_Init>
 8002014:	b970      	cbnz	r0, 8002034 <MX_USART1_UART_Init+0x4c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002016:	2100      	movs	r1, #0
 8002018:	480c      	ldr	r0, [pc, #48]	; (800204c <MX_USART1_UART_Init+0x64>)
 800201a:	f004 f80f 	bl	800603c <HAL_UARTEx_SetTxFifoThreshold>
 800201e:	b960      	cbnz	r0, 800203a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002020:	2100      	movs	r1, #0
 8002022:	480a      	ldr	r0, [pc, #40]	; (800204c <MX_USART1_UART_Init+0x64>)
 8002024:	f004 f850 	bl	80060c8 <HAL_UARTEx_SetRxFifoThreshold>
 8002028:	b950      	cbnz	r0, 8002040 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800202a:	4808      	ldr	r0, [pc, #32]	; (800204c <MX_USART1_UART_Init+0x64>)
 800202c:	f003 ffd4 	bl	8005fd8 <HAL_UARTEx_DisableFifoMode>
 8002030:	b948      	cbnz	r0, 8002046 <MX_USART1_UART_Init+0x5e>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002032:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002034:	f7ff fdaa 	bl	8001b8c <Error_Handler>
 8002038:	e7ed      	b.n	8002016 <MX_USART1_UART_Init+0x2e>
    Error_Handler();
 800203a:	f7ff fda7 	bl	8001b8c <Error_Handler>
 800203e:	e7ef      	b.n	8002020 <MX_USART1_UART_Init+0x38>
    Error_Handler();
 8002040:	f7ff fda4 	bl	8001b8c <Error_Handler>
 8002044:	e7f1      	b.n	800202a <MX_USART1_UART_Init+0x42>
    Error_Handler();
 8002046:	f7ff fda1 	bl	8001b8c <Error_Handler>
}
 800204a:	e7f2      	b.n	8002032 <MX_USART1_UART_Init+0x4a>
 800204c:	200005c4 	.word	0x200005c4
 8002050:	40013800 	.word	0x40013800

08002054 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002054:	b530      	push	{r4, r5, lr}
 8002056:	b095      	sub	sp, #84	; 0x54
 8002058:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205a:	2100      	movs	r1, #0
 800205c:	910f      	str	r1, [sp, #60]	; 0x3c
 800205e:	9110      	str	r1, [sp, #64]	; 0x40
 8002060:	9111      	str	r1, [sp, #68]	; 0x44
 8002062:	9112      	str	r1, [sp, #72]	; 0x48
 8002064:	9113      	str	r1, [sp, #76]	; 0x4c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002066:	2230      	movs	r2, #48	; 0x30
 8002068:	a803      	add	r0, sp, #12
 800206a:	f006 f987 	bl	800837c <memset>
  if(uartHandle->Instance==USART1)
 800206e:	6822      	ldr	r2, [r4, #0]
 8002070:	4b36      	ldr	r3, [pc, #216]	; (800214c <HAL_UART_MspInit+0xf8>)
 8002072:	429a      	cmp	r2, r3
 8002074:	d001      	beq.n	800207a <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002076:	b015      	add	sp, #84	; 0x54
 8002078:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800207a:	2301      	movs	r3, #1
 800207c:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800207e:	2300      	movs	r3, #0
 8002080:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002082:	a803      	add	r0, sp, #12
 8002084:	f001 fcc2 	bl	8003a0c <HAL_RCCEx_PeriphCLKConfig>
 8002088:	2800      	cmp	r0, #0
 800208a:	d155      	bne.n	8002138 <HAL_UART_MspInit+0xe4>
  SET_BIT(RCC->APB2ENR, Periphs);
 800208c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002090:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002092:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002096:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002098:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800209a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800209e:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80020a0:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020a4:	f042 0201 	orr.w	r2, r2, #1
 80020a8:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80020b2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020b4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020b8:	930f      	str	r3, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ba:	2302      	movs	r3, #2
 80020bc:	9310      	str	r3, [sp, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2500      	movs	r5, #0
 80020c0:	9511      	str	r5, [sp, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c2:	9512      	str	r5, [sp, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020c4:	2307      	movs	r3, #7
 80020c6:	9313      	str	r3, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c8:	a90f      	add	r1, sp, #60	; 0x3c
 80020ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ce:	f000 fbff 	bl	80028d0 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80020d2:	481f      	ldr	r0, [pc, #124]	; (8002150 <HAL_UART_MspInit+0xfc>)
 80020d4:	4b1f      	ldr	r3, [pc, #124]	; (8002154 <HAL_UART_MspInit+0x100>)
 80020d6:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80020d8:	230f      	movs	r3, #15
 80020da:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020dc:	2310      	movs	r3, #16
 80020de:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020e0:	60c5      	str	r5, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020e2:	2380      	movs	r3, #128	; 0x80
 80020e4:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020e6:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020e8:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80020ea:	61c5      	str	r5, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80020ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020f0:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80020f2:	f000 f9e3 	bl	80024bc <HAL_DMA_Init>
 80020f6:	bb10      	cbnz	r0, 800213e <HAL_UART_MspInit+0xea>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80020f8:	4b15      	ldr	r3, [pc, #84]	; (8002150 <HAL_UART_MspInit+0xfc>)
 80020fa:	67a3      	str	r3, [r4, #120]	; 0x78
 80020fc:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_usart1_rx.Instance = DMA1_Channel2;
 80020fe:	4816      	ldr	r0, [pc, #88]	; (8002158 <HAL_UART_MspInit+0x104>)
 8002100:	4b16      	ldr	r3, [pc, #88]	; (800215c <HAL_UART_MspInit+0x108>)
 8002102:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002104:	230e      	movs	r3, #14
 8002106:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002108:	2300      	movs	r3, #0
 800210a:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800210c:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800210e:	2280      	movs	r2, #128	; 0x80
 8002110:	6102      	str	r2, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002112:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002114:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002116:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002118:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800211a:	f000 f9cf 	bl	80024bc <HAL_DMA_Init>
 800211e:	b988      	cbnz	r0, 8002144 <HAL_UART_MspInit+0xf0>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002120:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <HAL_UART_MspInit+0x104>)
 8002122:	67e3      	str	r3, [r4, #124]	; 0x7c
 8002124:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	4611      	mov	r1, r2
 800212a:	2024      	movs	r0, #36	; 0x24
 800212c:	f000 f8ca 	bl	80022c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002130:	2024      	movs	r0, #36	; 0x24
 8002132:	f000 f90b 	bl	800234c <HAL_NVIC_EnableIRQ>
}
 8002136:	e79e      	b.n	8002076 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8002138:	f7ff fd28 	bl	8001b8c <Error_Handler>
 800213c:	e7a6      	b.n	800208c <HAL_UART_MspInit+0x38>
      Error_Handler();
 800213e:	f7ff fd25 	bl	8001b8c <Error_Handler>
 8002142:	e7d9      	b.n	80020f8 <HAL_UART_MspInit+0xa4>
      Error_Handler();
 8002144:	f7ff fd22 	bl	8001b8c <Error_Handler>
 8002148:	e7ea      	b.n	8002120 <HAL_UART_MspInit+0xcc>
 800214a:	bf00      	nop
 800214c:	40013800 	.word	0x40013800
 8002150:	20000504 	.word	0x20000504
 8002154:	40020008 	.word	0x40020008
 8002158:	20000564 	.word	0x20000564
 800215c:	4002001c 	.word	0x4002001c

08002160 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002160:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002162:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002164:	3304      	adds	r3, #4

08002166 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002166:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002168:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800216a:	d3f9      	bcc.n	8002160 <CopyDataInit>
  bx lr
 800216c:	4770      	bx	lr

0800216e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800216e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002170:	3004      	adds	r0, #4

08002172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002172:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002174:	d3fb      	bcc.n	800216e <FillZerobss>
  bx lr
 8002176:	4770      	bx	lr

08002178 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002178:	480c      	ldr	r0, [pc, #48]	; (80021ac <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800217a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800217c:	f7ff ff04 	bl	8001f88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002180:	480b      	ldr	r0, [pc, #44]	; (80021b0 <LoopForever+0x8>)
 8002182:	490c      	ldr	r1, [pc, #48]	; (80021b4 <LoopForever+0xc>)
 8002184:	4a0c      	ldr	r2, [pc, #48]	; (80021b8 <LoopForever+0x10>)
 8002186:	2300      	movs	r3, #0
 8002188:	f7ff ffed 	bl	8002166 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800218c:	480b      	ldr	r0, [pc, #44]	; (80021bc <LoopForever+0x14>)
 800218e:	490c      	ldr	r1, [pc, #48]	; (80021c0 <LoopForever+0x18>)
 8002190:	2300      	movs	r3, #0
 8002192:	f7ff ffee 	bl	8002172 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002196:	480b      	ldr	r0, [pc, #44]	; (80021c4 <LoopForever+0x1c>)
 8002198:	490b      	ldr	r1, [pc, #44]	; (80021c8 <LoopForever+0x20>)
 800219a:	2300      	movs	r3, #0
 800219c:	f7ff ffe9 	bl	8002172 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80021a0:	f006 f8ba 	bl	8008318 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80021a4:	f7ff fc9a 	bl	8001adc <main>

080021a8 <LoopForever>:

LoopForever:
  b LoopForever
 80021a8:	e7fe      	b.n	80021a8 <LoopForever>
 80021aa:	0000      	.short	0x0000
  ldr   r0, =_estack
 80021ac:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 80021b0:	20000004 	.word	0x20000004
 80021b4:	20000090 	.word	0x20000090
 80021b8:	0800a09c 	.word	0x0800a09c
  INIT_BSS _sbss, _ebss
 80021bc:	20000200 	.word	0x20000200
 80021c0:	2000066c 	.word	0x2000066c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80021c4:	200301e0 	.word	0x200301e0
 80021c8:	20030a57 	.word	0x20030a57

080021cc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021cc:	e7fe      	b.n	80021cc <ADC1_IRQHandler>
	...

080021d0 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0U)
 80021d0:	4b11      	ldr	r3, [pc, #68]	; (8002218 <HAL_InitTick+0x48>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	b90b      	cbnz	r3, 80021da <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80021d6:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80021d8:	4770      	bx	lr
{
 80021da:	b510      	push	{r4, lr}
 80021dc:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80021de:	f000 fe15 	bl	8002e0c <HAL_RCC_GetHCLKFreq>
 80021e2:	4b0d      	ldr	r3, [pc, #52]	; (8002218 <HAL_InitTick+0x48>)
 80021e4:	781a      	ldrb	r2, [r3, #0]
 80021e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80021ee:	fbb0 f0f3 	udiv	r0, r0, r3
 80021f2:	f000 f8dd 	bl	80023b0 <HAL_SYSTICK_Config>
 80021f6:	b968      	cbnz	r0, 8002214 <HAL_InitTick+0x44>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021f8:	2c0f      	cmp	r4, #15
 80021fa:	d901      	bls.n	8002200 <HAL_InitTick+0x30>
        status = HAL_ERROR;
 80021fc:	2001      	movs	r0, #1
 80021fe:	e00a      	b.n	8002216 <HAL_InitTick+0x46>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002200:	2200      	movs	r2, #0
 8002202:	4621      	mov	r1, r4
 8002204:	f04f 30ff 	mov.w	r0, #4294967295
 8002208:	f000 f85c 	bl	80022c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <HAL_InitTick+0x4c>)
 800220e:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8002210:	2000      	movs	r0, #0
 8002212:	e000      	b.n	8002216 <HAL_InitTick+0x46>
      status = HAL_ERROR;
 8002214:	2001      	movs	r0, #1
}
 8002216:	bd10      	pop	{r4, pc}
 8002218:	20000008 	.word	0x20000008
 800221c:	2000000c 	.word	0x2000000c

08002220 <HAL_Init>:
{
 8002220:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002222:	4a09      	ldr	r2, [pc, #36]	; (8002248 <HAL_Init+0x28>)
 8002224:	6813      	ldr	r3, [r2, #0]
 8002226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800222a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800222c:	2003      	movs	r0, #3
 800222e:	f000 f82b 	bl	8002288 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002232:	200f      	movs	r0, #15
 8002234:	f7ff ffcc 	bl	80021d0 <HAL_InitTick>
 8002238:	b110      	cbz	r0, 8002240 <HAL_Init+0x20>
    status = HAL_ERROR;
 800223a:	2401      	movs	r4, #1
}
 800223c:	4620      	mov	r0, r4
 800223e:	bd10      	pop	{r4, pc}
 8002240:	4604      	mov	r4, r0
    HAL_MspInit();
 8002242:	f7ff fdf5 	bl	8001e30 <HAL_MspInit>
 8002246:	e7f9      	b.n	800223c <HAL_Init+0x1c>
 8002248:	58004000 	.word	0x58004000

0800224c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800224c:	4a03      	ldr	r2, [pc, #12]	; (800225c <HAL_IncTick+0x10>)
 800224e:	6811      	ldr	r1, [r2, #0]
 8002250:	4b03      	ldr	r3, [pc, #12]	; (8002260 <HAL_IncTick+0x14>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	440b      	add	r3, r1
 8002256:	6013      	str	r3, [r2, #0]
}
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	20000654 	.word	0x20000654
 8002260:	20000008 	.word	0x20000008

08002264 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002264:	4b01      	ldr	r3, [pc, #4]	; (800226c <HAL_GetTick+0x8>)
 8002266:	6818      	ldr	r0, [r3, #0]
}
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	20000654 	.word	0x20000654

08002270 <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 8002270:	4b01      	ldr	r3, [pc, #4]	; (8002278 <HAL_GetTickPrio+0x8>)
 8002272:	6818      	ldr	r0, [r3, #0]
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	2000000c 	.word	0x2000000c

0800227c <HAL_GetTickFreq>:
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
  return uwTickFreq;
}
 800227c:	4b01      	ldr	r3, [pc, #4]	; (8002284 <HAL_GetTickFreq+0x8>)
 800227e:	7818      	ldrb	r0, [r3, #0]
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000008 	.word	0x20000008

08002288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002288:	b510      	push	{r4, lr}
 800228a:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800228c:	1ec3      	subs	r3, r0, #3
 800228e:	2b04      	cmp	r3, #4
 8002290:	d80e      	bhi.n	80022b0 <HAL_NVIC_SetPriorityGrouping+0x28>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002292:	490a      	ldr	r1, [pc, #40]	; (80022bc <HAL_NVIC_SetPriorityGrouping+0x34>)
 8002294:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002296:	0223      	lsls	r3, r4, #8
 8002298:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800229c:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80022a0:	4014      	ands	r4, r2
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a2:	4323      	orrs	r3, r4
  reg_value  =  (reg_value                                   |
 80022a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80022ac:	60cb      	str	r3, [r1, #12]

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80022ae:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80022b0:	218c      	movs	r1, #140	; 0x8c
 80022b2:	4803      	ldr	r0, [pc, #12]	; (80022c0 <HAL_NVIC_SetPriorityGrouping+0x38>)
 80022b4:	f7ff fc6c 	bl	8001b90 <assert_failed>
 80022b8:	e7eb      	b.n	8002292 <HAL_NVIC_SetPriorityGrouping+0xa>
 80022ba:	bf00      	nop
 80022bc:	e000ed00 	.word	0xe000ed00
 80022c0:	08009a14 	.word	0x08009a14

080022c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c4:	b570      	push	{r4, r5, r6, lr}
 80022c6:	4605      	mov	r5, r0
 80022c8:	460c      	mov	r4, r1
 80022ca:	4616      	mov	r6, r2
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80022cc:	2a0f      	cmp	r2, #15
 80022ce:	d826      	bhi.n	800231e <HAL_NVIC_SetPriority+0x5a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80022d0:	2c0f      	cmp	r4, #15
 80022d2:	d829      	bhi.n	8002328 <HAL_NVIC_SetPriority+0x64>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d4:	4b1a      	ldr	r3, [pc, #104]	; (8002340 <HAL_NVIC_SetPriority+0x7c>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022dc:	f1c3 0107 	rsb	r1, r3, #7
 80022e0:	2904      	cmp	r1, #4
 80022e2:	bf28      	it	cs
 80022e4:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022e6:	1d1a      	adds	r2, r3, #4
 80022e8:	2a06      	cmp	r2, #6
 80022ea:	bf8c      	ite	hi
 80022ec:	3b03      	subhi	r3, #3
 80022ee:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f0:	f04f 32ff 	mov.w	r2, #4294967295
 80022f4:	fa02 f101 	lsl.w	r1, r2, r1
 80022f8:	ea24 0401 	bic.w	r4, r4, r1
 80022fc:	409c      	lsls	r4, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	ea26 0603 	bic.w	r6, r6, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002306:	4334      	orrs	r4, r6
  if ((int32_t)(IRQn) >= 0)
 8002308:	2d00      	cmp	r5, #0
 800230a:	db12      	blt.n	8002332 <HAL_NVIC_SetPriority+0x6e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230c:	0124      	lsls	r4, r4, #4
 800230e:	b2e4      	uxtb	r4, r4
 8002310:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 8002314:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 8002318:	f885 4300 	strb.w	r4, [r5, #768]	; 0x300

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800231c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800231e:	21a4      	movs	r1, #164	; 0xa4
 8002320:	4808      	ldr	r0, [pc, #32]	; (8002344 <HAL_NVIC_SetPriority+0x80>)
 8002322:	f7ff fc35 	bl	8001b90 <assert_failed>
 8002326:	e7d3      	b.n	80022d0 <HAL_NVIC_SetPriority+0xc>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002328:	21a5      	movs	r1, #165	; 0xa5
 800232a:	4806      	ldr	r0, [pc, #24]	; (8002344 <HAL_NVIC_SetPriority+0x80>)
 800232c:	f7ff fc30 	bl	8001b90 <assert_failed>
 8002330:	e7d0      	b.n	80022d4 <HAL_NVIC_SetPriority+0x10>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002332:	f005 050f 	and.w	r5, r5, #15
 8002336:	0124      	lsls	r4, r4, #4
 8002338:	b2e4      	uxtb	r4, r4
 800233a:	4b03      	ldr	r3, [pc, #12]	; (8002348 <HAL_NVIC_SetPriority+0x84>)
 800233c:	555c      	strb	r4, [r3, r5]
}
 800233e:	e7ed      	b.n	800231c <HAL_NVIC_SetPriority+0x58>
 8002340:	e000ed00 	.word	0xe000ed00
 8002344:	08009a14 	.word	0x08009a14
 8002348:	e000ed14 	.word	0xe000ed14

0800234c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800234e:	2800      	cmp	r0, #0
 8002350:	db09      	blt.n	8002366 <HAL_NVIC_EnableIRQ+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002352:	0942      	lsrs	r2, r0, #5
 8002354:	f000 001f 	and.w	r0, r0, #31
 8002358:	2301      	movs	r3, #1
 800235a:	fa03 f000 	lsl.w	r0, r3, r0
 800235e:	4b04      	ldr	r3, [pc, #16]	; (8002370 <HAL_NVIC_EnableIRQ+0x24>)
 8002360:	f843 0022 	str.w	r0, [r3, r2, lsl #2]

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002364:	bd08      	pop	{r3, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002366:	21b6      	movs	r1, #182	; 0xb6
 8002368:	4802      	ldr	r0, [pc, #8]	; (8002374 <HAL_NVIC_EnableIRQ+0x28>)
 800236a:	f7ff fc11 	bl	8001b90 <assert_failed>
}
 800236e:	e7f9      	b.n	8002364 <HAL_NVIC_EnableIRQ+0x18>
 8002370:	e000e100 	.word	0xe000e100
 8002374:	08009a14 	.word	0x08009a14

08002378 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002378:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800237a:	2800      	cmp	r0, #0
 800237c:	db0e      	blt.n	800239c <HAL_NVIC_DisableIRQ+0x24>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800237e:	0943      	lsrs	r3, r0, #5
 8002380:	f000 001f 	and.w	r0, r0, #31
 8002384:	2201      	movs	r2, #1
 8002386:	fa02 f000 	lsl.w	r0, r2, r0
 800238a:	3320      	adds	r3, #32
 800238c:	4a06      	ldr	r2, [pc, #24]	; (80023a8 <HAL_NVIC_DisableIRQ+0x30>)
 800238e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002392:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002396:	f3bf 8f6f 	isb	sy

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800239a:	bd08      	pop	{r3, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800239c:	21c6      	movs	r1, #198	; 0xc6
 800239e:	4803      	ldr	r0, [pc, #12]	; (80023ac <HAL_NVIC_DisableIRQ+0x34>)
 80023a0:	f7ff fbf6 	bl	8001b90 <assert_failed>
}
 80023a4:	e7f9      	b.n	800239a <HAL_NVIC_DisableIRQ+0x22>
 80023a6:	bf00      	nop
 80023a8:	e000e100 	.word	0xe000e100
 80023ac:	08009a14 	.word	0x08009a14

080023b0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023b0:	3801      	subs	r0, #1
 80023b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80023b6:	d20a      	bcs.n	80023ce <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_SYSTICK_Config+0x24>)
 80023ba:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023bc:	4a06      	ldr	r2, [pc, #24]	; (80023d8 <HAL_SYSTICK_Config+0x28>)
 80023be:	21f0      	movs	r1, #240	; 0xf0
 80023c0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c4:	2000      	movs	r0, #0
 80023c6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023c8:	2207      	movs	r2, #7
 80023ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023cc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80023ce:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000e010 	.word	0xe000e010
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80023dc:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80023de:	2800      	cmp	r0, #0
 80023e0:	db0a      	blt.n	80023f8 <HAL_NVIC_SetPendingIRQ+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023e2:	0943      	lsrs	r3, r0, #5
 80023e4:	f000 001f 	and.w	r0, r0, #31
 80023e8:	2201      	movs	r2, #1
 80023ea:	fa02 f000 	lsl.w	r0, r2, r0
 80023ee:	3340      	adds	r3, #64	; 0x40
 80023f0:	4a04      	ldr	r2, [pc, #16]	; (8002404 <HAL_NVIC_SetPendingIRQ+0x28>)
 80023f2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
}
 80023f6:	bd08      	pop	{r3, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80023f8:	f240 1127 	movw	r1, #295	; 0x127
 80023fc:	4802      	ldr	r0, [pc, #8]	; (8002408 <HAL_NVIC_SetPendingIRQ+0x2c>)
 80023fe:	f7ff fbc7 	bl	8001b90 <assert_failed>
}
 8002402:	e7f8      	b.n	80023f6 <HAL_NVIC_SetPendingIRQ+0x1a>
 8002404:	e000e100 	.word	0xe000e100
 8002408:	08009a14 	.word	0x08009a14

0800240c <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800240c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800240e:	2800      	cmp	r0, #0
 8002410:	db0a      	blt.n	8002428 <HAL_NVIC_ClearPendingIRQ+0x1c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002412:	0943      	lsrs	r3, r0, #5
 8002414:	f000 001f 	and.w	r0, r0, #31
 8002418:	2201      	movs	r2, #1
 800241a:	fa02 f000 	lsl.w	r0, r2, r0
 800241e:	3360      	adds	r3, #96	; 0x60
 8002420:	4a04      	ldr	r2, [pc, #16]	; (8002434 <HAL_NVIC_ClearPendingIRQ+0x28>)
 8002422:	f842 0023 	str.w	r0, [r2, r3, lsl #2]

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8002426:	bd08      	pop	{r3, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002428:	f240 1149 	movw	r1, #329	; 0x149
 800242c:	4802      	ldr	r0, [pc, #8]	; (8002438 <HAL_NVIC_ClearPendingIRQ+0x2c>)
 800242e:	f7ff fbaf 	bl	8001b90 <assert_failed>
}
 8002432:	e7f8      	b.n	8002426 <HAL_NVIC_ClearPendingIRQ+0x1a>
 8002434:	e000e100 	.word	0xe000e100
 8002438:	08009a14 	.word	0x08009a14

0800243c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800243c:	4770      	bx	lr

0800243e <HAL_SYSTICK_IRQHandler>:
{
 800243e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8002440:	f7ff fffc 	bl	800243c <HAL_SYSTICK_Callback>
}
 8002444:	bd08      	pop	{r3, pc}

08002446 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002446:	b470      	push	{r4, r5, r6}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002448:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 800244a:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800244c:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800244e:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8002450:	b114      	cbz	r4, 8002458 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002452:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8002454:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8002456:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002458:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800245a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800245c:	f004 061c 	and.w	r6, r4, #28
 8002460:	2401      	movs	r4, #1
 8002462:	40b4      	lsls	r4, r6
 8002464:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002466:	6804      	ldr	r4, [r0, #0]
 8002468:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800246a:	6883      	ldr	r3, [r0, #8]
 800246c:	2b10      	cmp	r3, #16
 800246e:	d005      	beq.n	800247c <DMA_SetConfig+0x36>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002470:	6803      	ldr	r3, [r0, #0]
 8002472:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002474:	6803      	ldr	r3, [r0, #0]
 8002476:	60da      	str	r2, [r3, #12]
  }
}
 8002478:	bc70      	pop	{r4, r5, r6}
 800247a:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800247c:	6803      	ldr	r3, [r0, #0]
 800247e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002480:	6803      	ldr	r3, [r0, #0]
 8002482:	60d9      	str	r1, [r3, #12]
 8002484:	e7f8      	b.n	8002478 <DMA_SetConfig+0x32>
	...

08002488 <DMA_CalcDMAMUXChannelBaseAndMask>:
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002488:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800248a:	f023 0303 	bic.w	r3, r3, #3
 800248e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002492:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002496:	6483      	str	r3, [r0, #72]	; 0x48
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002498:	7803      	ldrb	r3, [r0, #0]
 800249a:	3b08      	subs	r3, #8
 800249c:	4a05      	ldr	r2, [pc, #20]	; (80024b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 800249e:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80024a2:	4a05      	ldr	r2, [pc, #20]	; (80024b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 80024a4:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80024a6:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80024aa:	2201      	movs	r2, #1
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	6503      	str	r3, [r0, #80]	; 0x50
}
 80024b2:	4770      	bx	lr
 80024b4:	cccccccd 	.word	0xcccccccd
 80024b8:	40020880 	.word	0x40020880

080024bc <HAL_DMA_Init>:
  if (hdma == NULL)
 80024bc:	2800      	cmp	r0, #0
 80024be:	f000 80c3 	beq.w	8002648 <HAL_DMA_Init+0x18c>
{
 80024c2:	b510      	push	{r4, lr}
 80024c4:	4604      	mov	r4, r0
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 80024c6:	6803      	ldr	r3, [r0, #0]
 80024c8:	4a60      	ldr	r2, [pc, #384]	; (800264c <HAL_DMA_Init+0x190>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d015      	beq.n	80024fa <HAL_DMA_Init+0x3e>
 80024ce:	3214      	adds	r2, #20
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d012      	beq.n	80024fa <HAL_DMA_Init+0x3e>
 80024d4:	3214      	adds	r2, #20
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d00f      	beq.n	80024fa <HAL_DMA_Init+0x3e>
 80024da:	3214      	adds	r2, #20
 80024dc:	4293      	cmp	r3, r2
 80024de:	d00c      	beq.n	80024fa <HAL_DMA_Init+0x3e>
 80024e0:	3214      	adds	r2, #20
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d009      	beq.n	80024fa <HAL_DMA_Init+0x3e>
 80024e6:	3214      	adds	r2, #20
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d006      	beq.n	80024fa <HAL_DMA_Init+0x3e>
 80024ec:	3214      	adds	r2, #20
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d003      	beq.n	80024fa <HAL_DMA_Init+0x3e>
 80024f2:	21a2      	movs	r1, #162	; 0xa2
 80024f4:	4856      	ldr	r0, [pc, #344]	; (8002650 <HAL_DMA_Init+0x194>)
 80024f6:	f7ff fb4b 	bl	8001b90 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80024fa:	68a3      	ldr	r3, [r4, #8]
 80024fc:	f033 0210 	bics.w	r2, r3, #16
 8002500:	d002      	beq.n	8002508 <HAL_DMA_Init+0x4c>
 8002502:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002506:	d16e      	bne.n	80025e6 <HAL_DMA_Init+0x12a>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002508:	68e3      	ldr	r3, [r4, #12]
 800250a:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 800250e:	d16f      	bne.n	80025f0 <HAL_DMA_Init+0x134>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002510:	6923      	ldr	r3, [r4, #16]
 8002512:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8002516:	d170      	bne.n	80025fa <HAL_DMA_Init+0x13e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002518:	6963      	ldr	r3, [r4, #20]
 800251a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800251e:	d002      	beq.n	8002526 <HAL_DMA_Init+0x6a>
 8002520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002524:	d16e      	bne.n	8002604 <HAL_DMA_Init+0x148>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002526:	69a3      	ldr	r3, [r4, #24]
 8002528:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800252c:	d002      	beq.n	8002534 <HAL_DMA_Init+0x78>
 800252e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002532:	d16c      	bne.n	800260e <HAL_DMA_Init+0x152>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002534:	69e3      	ldr	r3, [r4, #28]
 8002536:	f033 0320 	bics.w	r3, r3, #32
 800253a:	d003      	beq.n	8002544 <HAL_DMA_Init+0x88>
 800253c:	21a8      	movs	r1, #168	; 0xa8
 800253e:	4844      	ldr	r0, [pc, #272]	; (8002650 <HAL_DMA_Init+0x194>)
 8002540:	f7ff fb26 	bl	8001b90 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002544:	6a23      	ldr	r3, [r4, #32]
 8002546:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800254a:	d006      	beq.n	800255a <HAL_DMA_Init+0x9e>
 800254c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002550:	d003      	beq.n	800255a <HAL_DMA_Init+0x9e>
 8002552:	21a9      	movs	r1, #169	; 0xa9
 8002554:	483e      	ldr	r0, [pc, #248]	; (8002650 <HAL_DMA_Init+0x194>)
 8002556:	f7ff fb1b 	bl	8001b90 <assert_failed>
  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 800255a:	6863      	ldr	r3, [r4, #4]
 800255c:	2b28      	cmp	r3, #40	; 0x28
 800255e:	d85b      	bhi.n	8002618 <HAL_DMA_Init+0x15c>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002560:	6822      	ldr	r2, [r4, #0]
 8002562:	4b3c      	ldr	r3, [pc, #240]	; (8002654 <HAL_DMA_Init+0x198>)
 8002564:	4413      	add	r3, r2
 8002566:	493c      	ldr	r1, [pc, #240]	; (8002658 <HAL_DMA_Init+0x19c>)
 8002568:	fba1 1303 	umull	r1, r3, r1, r3
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	6463      	str	r3, [r4, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8002572:	4b3a      	ldr	r3, [pc, #232]	; (800265c <HAL_DMA_Init+0x1a0>)
 8002574:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8002576:	2302      	movs	r3, #2
 8002578:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 800257c:	6811      	ldr	r1, [r2, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800257e:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8002582:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 8002586:	68a3      	ldr	r3, [r4, #8]
 8002588:	68e0      	ldr	r0, [r4, #12]
 800258a:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800258c:	6920      	ldr	r0, [r4, #16]
 800258e:	4303      	orrs	r3, r0
 8002590:	6960      	ldr	r0, [r4, #20]
 8002592:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002594:	69a0      	ldr	r0, [r4, #24]
 8002596:	4303      	orrs	r3, r0
 8002598:	69e0      	ldr	r0, [r4, #28]
 800259a:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800259c:	6a20      	ldr	r0, [r4, #32]
 800259e:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 80025a0:	430b      	orrs	r3, r1
  hdma->Instance->CCR = tmp;
 80025a2:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80025a4:	4620      	mov	r0, r4
 80025a6:	f7ff ff6f 	bl	8002488 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80025aa:	68a3      	ldr	r3, [r4, #8]
 80025ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80025b0:	bf04      	itt	eq
 80025b2:	2300      	moveq	r3, #0
 80025b4:	6063      	streq	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80025b6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80025b8:	6863      	ldr	r3, [r4, #4]
 80025ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025be:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025c0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80025c2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80025c4:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80025c6:	6863      	ldr	r3, [r4, #4]
 80025c8:	1e5a      	subs	r2, r3, #1
 80025ca:	2a03      	cmp	r2, #3
 80025cc:	d929      	bls.n	8002622 <HAL_DMA_Init+0x166>
    hdma->DMAmuxRequestGen = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80025d2:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80025d4:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025d6:	2000      	movs	r0, #0
 80025d8:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 80025da:	2301      	movs	r3, #1
 80025dc:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 80025e0:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80025e4:	bd10      	pop	{r4, pc}
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80025e6:	21a3      	movs	r1, #163	; 0xa3
 80025e8:	4819      	ldr	r0, [pc, #100]	; (8002650 <HAL_DMA_Init+0x194>)
 80025ea:	f7ff fad1 	bl	8001b90 <assert_failed>
 80025ee:	e78b      	b.n	8002508 <HAL_DMA_Init+0x4c>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80025f0:	21a4      	movs	r1, #164	; 0xa4
 80025f2:	4817      	ldr	r0, [pc, #92]	; (8002650 <HAL_DMA_Init+0x194>)
 80025f4:	f7ff facc 	bl	8001b90 <assert_failed>
 80025f8:	e78a      	b.n	8002510 <HAL_DMA_Init+0x54>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80025fa:	21a5      	movs	r1, #165	; 0xa5
 80025fc:	4814      	ldr	r0, [pc, #80]	; (8002650 <HAL_DMA_Init+0x194>)
 80025fe:	f7ff fac7 	bl	8001b90 <assert_failed>
 8002602:	e789      	b.n	8002518 <HAL_DMA_Init+0x5c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002604:	21a6      	movs	r1, #166	; 0xa6
 8002606:	4812      	ldr	r0, [pc, #72]	; (8002650 <HAL_DMA_Init+0x194>)
 8002608:	f7ff fac2 	bl	8001b90 <assert_failed>
 800260c:	e78b      	b.n	8002526 <HAL_DMA_Init+0x6a>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800260e:	21a7      	movs	r1, #167	; 0xa7
 8002610:	480f      	ldr	r0, [pc, #60]	; (8002650 <HAL_DMA_Init+0x194>)
 8002612:	f7ff fabd 	bl	8001b90 <assert_failed>
 8002616:	e78d      	b.n	8002534 <HAL_DMA_Init+0x78>
  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 8002618:	21ab      	movs	r1, #171	; 0xab
 800261a:	480d      	ldr	r0, [pc, #52]	; (8002650 <HAL_DMA_Init+0x194>)
 800261c:	f7ff fab8 	bl	8001b90 <assert_failed>
 8002620:	e79e      	b.n	8002560 <HAL_DMA_Init+0xa4>
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002622:	f003 033f 	and.w	r3, r3, #63	; 0x3f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002626:	4a0e      	ldr	r2, [pc, #56]	; (8002660 <HAL_DMA_Init+0x1a4>)
 8002628:	441a      	add	r2, r3
 800262a:	0092      	lsls	r2, r2, #2
 800262c:	6562      	str	r2, [r4, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800262e:	490d      	ldr	r1, [pc, #52]	; (8002664 <HAL_DMA_Init+0x1a8>)
 8002630:	65a1      	str	r1, [r4, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002632:	3b01      	subs	r3, #1
 8002634:	2101      	movs	r1, #1
 8002636:	fa01 f303 	lsl.w	r3, r1, r3
 800263a:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002640:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002642:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	e7c6      	b.n	80025d6 <HAL_DMA_Init+0x11a>
    return HAL_ERROR;
 8002648:	2001      	movs	r0, #1
}
 800264a:	4770      	bx	lr
 800264c:	40020008 	.word	0x40020008
 8002650:	08009a50 	.word	0x08009a50
 8002654:	bffdfff8 	.word	0xbffdfff8
 8002658:	cccccccd 	.word	0xcccccccd
 800265c:	40020000 	.word	0x40020000
 8002660:	1000823f 	.word	0x1000823f
 8002664:	40020940 	.word	0x40020940

08002668 <HAL_DMA_Start_IT>:
{
 8002668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800266a:	4604      	mov	r4, r0
 800266c:	460e      	mov	r6, r1
 800266e:	4617      	mov	r7, r2
 8002670:	461d      	mov	r5, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002672:	1e5a      	subs	r2, r3, #1
 8002674:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002678:	429a      	cmp	r2, r3
 800267a:	d810      	bhi.n	800269e <HAL_DMA_Start_IT+0x36>
  __HAL_LOCK(hdma);
 800267c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002680:	2b01      	cmp	r3, #1
 8002682:	d04a      	beq.n	800271a <HAL_DMA_Start_IT+0xb2>
 8002684:	2301      	movs	r3, #1
 8002686:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 800268a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b01      	cmp	r3, #1
 8002692:	d00a      	beq.n	80026aa <HAL_DMA_Start_IT+0x42>
    __HAL_UNLOCK(hdma);
 8002694:	2300      	movs	r3, #0
 8002696:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 800269a:	2002      	movs	r0, #2
}
 800269c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800269e:	f240 11b5 	movw	r1, #437	; 0x1b5
 80026a2:	481f      	ldr	r0, [pc, #124]	; (8002720 <HAL_DMA_Start_IT+0xb8>)
 80026a4:	f7ff fa74 	bl	8001b90 <assert_failed>
 80026a8:	e7e8      	b.n	800267c <HAL_DMA_Start_IT+0x14>
    hdma->State = HAL_DMA_STATE_BUSY;
 80026aa:	2302      	movs	r3, #2
 80026ac:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026b0:	2300      	movs	r3, #0
 80026b2:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80026b4:	6822      	ldr	r2, [r4, #0]
 80026b6:	6813      	ldr	r3, [r2, #0]
 80026b8:	f023 0301 	bic.w	r3, r3, #1
 80026bc:	6013      	str	r3, [r2, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026be:	462b      	mov	r3, r5
 80026c0:	463a      	mov	r2, r7
 80026c2:	4631      	mov	r1, r6
 80026c4:	4620      	mov	r0, r4
 80026c6:	f7ff febe 	bl	8002446 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80026ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026cc:	b1d3      	cbz	r3, 8002704 <HAL_DMA_Start_IT+0x9c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026ce:	6822      	ldr	r2, [r4, #0]
 80026d0:	6813      	ldr	r3, [r2, #0]
 80026d2:	f043 030e 	orr.w	r3, r3, #14
 80026d6:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80026d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80026e0:	d003      	beq.n	80026ea <HAL_DMA_Start_IT+0x82>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026e8:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80026ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026ec:	b11b      	cbz	r3, 80026f6 <HAL_DMA_Start_IT+0x8e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026f4:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80026f6:	6822      	ldr	r2, [r4, #0]
 80026f8:	6813      	ldr	r3, [r2, #0]
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002700:	2000      	movs	r0, #0
 8002702:	e7cb      	b.n	800269c <HAL_DMA_Start_IT+0x34>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002704:	6822      	ldr	r2, [r4, #0]
 8002706:	6813      	ldr	r3, [r2, #0]
 8002708:	f023 0304 	bic.w	r3, r3, #4
 800270c:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800270e:	6822      	ldr	r2, [r4, #0]
 8002710:	6813      	ldr	r3, [r2, #0]
 8002712:	f043 030a 	orr.w	r3, r3, #10
 8002716:	6013      	str	r3, [r2, #0]
 8002718:	e7de      	b.n	80026d8 <HAL_DMA_Start_IT+0x70>
  __HAL_LOCK(hdma);
 800271a:	2002      	movs	r0, #2
 800271c:	e7be      	b.n	800269c <HAL_DMA_Start_IT+0x34>
 800271e:	bf00      	nop
 8002720:	08009a50 	.word	0x08009a50

08002724 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8002724:	4603      	mov	r3, r0
 8002726:	2800      	cmp	r0, #0
 8002728:	d034      	beq.n	8002794 <HAL_DMA_Abort+0x70>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800272a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	2a02      	cmp	r2, #2
 8002732:	d006      	beq.n	8002742 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002734:	2204      	movs	r2, #4
 8002736:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8002738:	2200      	movs	r2, #0
 800273a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 800273e:	2001      	movs	r0, #1
 8002740:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002742:	6801      	ldr	r1, [r0, #0]
 8002744:	680a      	ldr	r2, [r1, #0]
 8002746:	f022 020e 	bic.w	r2, r2, #14
 800274a:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800274c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800274e:	680a      	ldr	r2, [r1, #0]
 8002750:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002754:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8002756:	6801      	ldr	r1, [r0, #0]
 8002758:	680a      	ldr	r2, [r1, #0]
 800275a:	f022 0201 	bic.w	r2, r2, #1
 800275e:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002760:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8002762:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002764:	f002 011c 	and.w	r1, r2, #28
 8002768:	2201      	movs	r2, #1
 800276a:	408a      	lsls	r2, r1
 800276c:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800276e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002770:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002772:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8002774:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002776:	b132      	cbz	r2, 8002786 <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002778:	6811      	ldr	r1, [r2, #0]
 800277a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800277e:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002780:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002782:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002784:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800278c:	2000      	movs	r0, #0
 800278e:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8002792:	4770      	bx	lr
    return HAL_ERROR;
 8002794:	2001      	movs	r0, #1
}
 8002796:	4770      	bx	lr

08002798 <HAL_DMA_Abort_IT>:
{
 8002798:	b508      	push	{r3, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 800279a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d003      	beq.n	80027ac <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027a4:	2304      	movs	r3, #4
 80027a6:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80027a8:	2001      	movs	r0, #1
}
 80027aa:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027ac:	6802      	ldr	r2, [r0, #0]
 80027ae:	6813      	ldr	r3, [r2, #0]
 80027b0:	f023 030e 	bic.w	r3, r3, #14
 80027b4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80027b6:	6802      	ldr	r2, [r0, #0]
 80027b8:	6813      	ldr	r3, [r2, #0]
 80027ba:	f023 0301 	bic.w	r3, r3, #1
 80027be:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027c0:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80027c2:	6813      	ldr	r3, [r2, #0]
 80027c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027c8:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80027ca:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80027cc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80027ce:	f003 021c 	and.w	r2, r3, #28
 80027d2:	2301      	movs	r3, #1
 80027d4:	4093      	lsls	r3, r2
 80027d6:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027d8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80027da:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80027dc:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80027de:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80027e0:	b133      	cbz	r3, 80027f0 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027e8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027ea:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80027ec:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80027ee:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80027f0:	2301      	movs	r3, #1
 80027f2:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80027f6:	2300      	movs	r3, #0
 80027f8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80027fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80027fe:	b113      	cbz	r3, 8002806 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8002800:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002802:	2000      	movs	r0, #0
 8002804:	e7d1      	b.n	80027aa <HAL_DMA_Abort_IT+0x12>
 8002806:	2000      	movs	r0, #0
 8002808:	e7cf      	b.n	80027aa <HAL_DMA_Abort_IT+0x12>

0800280a <HAL_DMA_IRQHandler>:
{
 800280a:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800280c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800280e:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002810:	6804      	ldr	r4, [r0, #0]
 8002812:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002814:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002816:	f003 031c 	and.w	r3, r3, #28
 800281a:	2204      	movs	r2, #4
 800281c:	409a      	lsls	r2, r3
 800281e:	420a      	tst	r2, r1
 8002820:	d015      	beq.n	800284e <HAL_DMA_IRQHandler+0x44>
 8002822:	f015 0f04 	tst.w	r5, #4
 8002826:	d012      	beq.n	800284e <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002828:	6823      	ldr	r3, [r4, #0]
 800282a:	f013 0f20 	tst.w	r3, #32
 800282e:	d103      	bne.n	8002838 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002830:	6823      	ldr	r3, [r4, #0]
 8002832:	f023 0304 	bic.w	r3, r3, #4
 8002836:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002838:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800283a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800283c:	f003 021c 	and.w	r2, r3, #28
 8002840:	2304      	movs	r3, #4
 8002842:	4093      	lsls	r3, r2
 8002844:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8002846:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002848:	b103      	cbz	r3, 800284c <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 800284a:	4798      	blx	r3
}
 800284c:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800284e:	2202      	movs	r2, #2
 8002850:	409a      	lsls	r2, r3
 8002852:	420a      	tst	r2, r1
 8002854:	d01c      	beq.n	8002890 <HAL_DMA_IRQHandler+0x86>
 8002856:	f015 0f02 	tst.w	r5, #2
 800285a:	d019      	beq.n	8002890 <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800285c:	6823      	ldr	r3, [r4, #0]
 800285e:	f013 0f20 	tst.w	r3, #32
 8002862:	d106      	bne.n	8002872 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002864:	6823      	ldr	r3, [r4, #0]
 8002866:	f023 030a 	bic.w	r3, r3, #10
 800286a:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800286c:	2301      	movs	r3, #1
 800286e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002872:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002874:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002876:	f003 021c 	and.w	r2, r3, #28
 800287a:	2302      	movs	r3, #2
 800287c:	4093      	lsls	r3, r2
 800287e:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002880:	2300      	movs	r3, #0
 8002882:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8002886:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0df      	beq.n	800284c <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 800288c:	4798      	blx	r3
 800288e:	e7dd      	b.n	800284c <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002890:	2208      	movs	r2, #8
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	420b      	tst	r3, r1
 8002898:	d0d8      	beq.n	800284c <HAL_DMA_IRQHandler+0x42>
 800289a:	f015 0f08 	tst.w	r5, #8
 800289e:	d0d5      	beq.n	800284c <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028a0:	6823      	ldr	r3, [r4, #0]
 80028a2:	f023 030e 	bic.w	r3, r3, #14
 80028a6:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80028a8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80028aa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80028ac:	f003 031c 	and.w	r3, r3, #28
 80028b0:	2201      	movs	r2, #1
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028b8:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80028ba:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80028be:	2300      	movs	r3, #0
 80028c0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80028c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0c0      	beq.n	800284c <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 80028ca:	4798      	blx	r3
  return;
 80028cc:	e7be      	b.n	800284c <HAL_DMA_IRQHandler+0x42>
	...

080028d0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028d4:	4607      	mov	r7, r0
 80028d6:	460c      	mov	r4, r1
  uint32_t position = 0x00u;
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80028d8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80028dc:	d012      	beq.n	8002904 <HAL_GPIO_Init+0x34>
 80028de:	4b8f      	ldr	r3, [pc, #572]	; (8002b1c <HAL_GPIO_Init+0x24c>)
 80028e0:	4298      	cmp	r0, r3
 80028e2:	d00f      	beq.n	8002904 <HAL_GPIO_Init+0x34>
 80028e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028e8:	4298      	cmp	r0, r3
 80028ea:	d00b      	beq.n	8002904 <HAL_GPIO_Init+0x34>
 80028ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028f0:	4298      	cmp	r0, r3
 80028f2:	d007      	beq.n	8002904 <HAL_GPIO_Init+0x34>
 80028f4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80028f8:	4298      	cmp	r0, r3
 80028fa:	d003      	beq.n	8002904 <HAL_GPIO_Init+0x34>
 80028fc:	21a8      	movs	r1, #168	; 0xa8
 80028fe:	4888      	ldr	r0, [pc, #544]	; (8002b20 <HAL_GPIO_Init+0x250>)
 8002900:	f7ff f946 	bl	8001b90 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002904:	6823      	ldr	r3, [r4, #0]
 8002906:	b29a      	uxth	r2, r3
 8002908:	b112      	cbz	r2, 8002910 <HAL_GPIO_Init+0x40>
 800290a:	0c1b      	lsrs	r3, r3, #16
 800290c:	041b      	lsls	r3, r3, #16
 800290e:	b11b      	cbz	r3, 8002918 <HAL_GPIO_Init+0x48>
 8002910:	21a9      	movs	r1, #169	; 0xa9
 8002912:	4883      	ldr	r0, [pc, #524]	; (8002b20 <HAL_GPIO_Init+0x250>)
 8002914:	f7ff f93c 	bl	8001b90 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002918:	6863      	ldr	r3, [r4, #4]
 800291a:	2b03      	cmp	r3, #3
 800291c:	d915      	bls.n	800294a <HAL_GPIO_Init+0x7a>
 800291e:	f1a3 0211 	sub.w	r2, r3, #17
 8002922:	2a01      	cmp	r2, #1
 8002924:	d911      	bls.n	800294a <HAL_GPIO_Init+0x7a>
 8002926:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800292a:	f5b2 1f88 	cmp.w	r2, #1114112	; 0x110000
 800292e:	d00c      	beq.n	800294a <HAL_GPIO_Init+0x7a>
 8002930:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002934:	d009      	beq.n	800294a <HAL_GPIO_Init+0x7a>
 8002936:	f5b2 1f90 	cmp.w	r2, #1179648	; 0x120000
 800293a:	d006      	beq.n	800294a <HAL_GPIO_Init+0x7a>
 800293c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002940:	d003      	beq.n	800294a <HAL_GPIO_Init+0x7a>
 8002942:	21aa      	movs	r1, #170	; 0xaa
 8002944:	4876      	ldr	r0, [pc, #472]	; (8002b20 <HAL_GPIO_Init+0x250>)
 8002946:	f7ff f923 	bl	8001b90 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800294a:	68a3      	ldr	r3, [r4, #8]
 800294c:	2b02      	cmp	r3, #2
 800294e:	d80b      	bhi.n	8002968 <HAL_GPIO_Init+0x98>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002950:	6823      	ldr	r3, [r4, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 80e0 	beq.w	8002b18 <HAL_GPIO_Init+0x248>
 8002958:	2500      	movs	r5, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800295a:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8002b28 <HAL_GPIO_Init+0x258>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800295e:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8002b1c <HAL_GPIO_Init+0x24c>
 8002962:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 8002b2c <HAL_GPIO_Init+0x25c>
 8002966:	e093      	b.n	8002a90 <HAL_GPIO_Init+0x1c0>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002968:	21ab      	movs	r1, #171	; 0xab
 800296a:	486d      	ldr	r0, [pc, #436]	; (8002b20 <HAL_GPIO_Init+0x250>)
 800296c:	f7ff f910 	bl	8001b90 <assert_failed>
 8002970:	e7ee      	b.n	8002950 <HAL_GPIO_Init+0x80>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002972:	68e3      	ldr	r3, [r4, #12]
 8002974:	2b03      	cmp	r3, #3
 8002976:	d813      	bhi.n	80029a0 <HAL_GPIO_Init+0xd0>
        temp = GPIOx->OSPEEDR;
 8002978:	68ba      	ldr	r2, [r7, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800297a:	0069      	lsls	r1, r5, #1
 800297c:	2303      	movs	r3, #3
 800297e:	408b      	lsls	r3, r1
 8002980:	ea22 0203 	bic.w	r2, r2, r3
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002984:	68e3      	ldr	r3, [r4, #12]
 8002986:	408b      	lsls	r3, r1
 8002988:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 800298a:	60bb      	str	r3, [r7, #8]
        temp = GPIOx->OTYPER;
 800298c:	687a      	ldr	r2, [r7, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800298e:	ea22 0206 	bic.w	r2, r2, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002992:	6863      	ldr	r3, [r4, #4]
 8002994:	f3c3 1600 	ubfx	r6, r3, #4, #1
 8002998:	40ae      	lsls	r6, r5
 800299a:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 800299c:	607e      	str	r6, [r7, #4]
 800299e:	e083      	b.n	8002aa8 <HAL_GPIO_Init+0x1d8>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80029a0:	21ba      	movs	r1, #186	; 0xba
 80029a2:	485f      	ldr	r0, [pc, #380]	; (8002b20 <HAL_GPIO_Init+0x250>)
 80029a4:	f7ff f8f4 	bl	8001b90 <assert_failed>
 80029a8:	e7e6      	b.n	8002978 <HAL_GPIO_Init+0xa8>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80029aa:	6923      	ldr	r3, [r4, #16]
 80029ac:	2b0f      	cmp	r3, #15
 80029ae:	f200 80a8 	bhi.w	8002b02 <HAL_GPIO_Init+0x232>
        temp = GPIOx->AFR[position >> 3u];
 80029b2:	08ea      	lsrs	r2, r5, #3
 80029b4:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 80029b8:	6a10      	ldr	r0, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029ba:	f005 0307 	and.w	r3, r5, #7
 80029be:	0099      	lsls	r1, r3, #2
 80029c0:	230f      	movs	r3, #15
 80029c2:	408b      	lsls	r3, r1
 80029c4:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029c8:	6923      	ldr	r3, [r4, #16]
 80029ca:	408b      	lsls	r3, r1
 80029cc:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3u] = temp;
 80029ce:	6213      	str	r3, [r2, #32]
      temp = GPIOx->MODER;
 80029d0:	683a      	ldr	r2, [r7, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029d2:	0069      	lsls	r1, r5, #1
 80029d4:	2303      	movs	r3, #3
 80029d6:	408b      	lsls	r3, r1
 80029d8:	ea22 0203 	bic.w	r2, r2, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029dc:	6863      	ldr	r3, [r4, #4]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	408b      	lsls	r3, r1
 80029e4:	4313      	orrs	r3, r2
      GPIOx->MODER = temp;
 80029e6:	603b      	str	r3, [r7, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029e8:	6863      	ldr	r3, [r4, #4]
 80029ea:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80029ee:	d04a      	beq.n	8002a86 <HAL_GPIO_Init+0x1b6>
        temp = SYSCFG->EXTICR[position >> 2u];
 80029f0:	f025 0303 	bic.w	r3, r5, #3
 80029f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80029f8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80029fc:	6898      	ldr	r0, [r3, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029fe:	f005 0203 	and.w	r2, r5, #3
 8002a02:	0091      	lsls	r1, r2, #2
 8002a04:	220f      	movs	r2, #15
 8002a06:	408a      	lsls	r2, r1
 8002a08:	ea20 0002 	bic.w	r0, r0, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a0c:	f1b7 4f90 	cmp.w	r7, #1207959552	; 0x48000000
 8002a10:	d07c      	beq.n	8002b0c <HAL_GPIO_Init+0x23c>
 8002a12:	454f      	cmp	r7, r9
 8002a14:	d07c      	beq.n	8002b10 <HAL_GPIO_Init+0x240>
 8002a16:	4557      	cmp	r7, sl
 8002a18:	d07c      	beq.n	8002b14 <HAL_GPIO_Init+0x244>
 8002a1a:	4a42      	ldr	r2, [pc, #264]	; (8002b24 <HAL_GPIO_Init+0x254>)
 8002a1c:	4297      	cmp	r7, r2
 8002a1e:	bf0c      	ite	eq
 8002a20:	2204      	moveq	r2, #4
 8002a22:	2207      	movne	r2, #7
 8002a24:	408a      	lsls	r2, r1
 8002a26:	4302      	orrs	r2, r0
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a28:	609a      	str	r2, [r3, #8]
        temp = EXTI->RTSR1;
 8002a2a:	f8d8 2000 	ldr.w	r2, [r8]
        temp &= ~(iocurrent);
 8002a2e:	ea6f 010b 	mvn.w	r1, fp
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a32:	6863      	ldr	r3, [r4, #4]
 8002a34:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8002a38:	bf0c      	ite	eq
 8002a3a:	400a      	andeq	r2, r1
        {
          temp |= iocurrent;
 8002a3c:	ea4b 0202 	orrne.w	r2, fp, r2
        }
        EXTI->RTSR1 = temp;
 8002a40:	f8c8 2000 	str.w	r2, [r8]

        temp = EXTI->FTSR1;
 8002a44:	f8d8 2004 	ldr.w	r2, [r8, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a48:	6863      	ldr	r3, [r4, #4]
 8002a4a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8002a4e:	bf0c      	ite	eq
 8002a50:	400a      	andeq	r2, r1
        {
          temp |= iocurrent;
 8002a52:	ea4b 0202 	orrne.w	r2, fp, r2
        }
        EXTI->FTSR1 = temp;
 8002a56:	f8c8 2004 	str.w	r2, [r8, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a5a:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a5e:	6863      	ldr	r3, [r4, #4]
 8002a60:	f413 3f80 	tst.w	r3, #65536	; 0x10000
        temp &= ~(iocurrent);
 8002a64:	bf0c      	ite	eq
 8002a66:	400a      	andeq	r2, r1
        {
          temp |= iocurrent;
 8002a68:	ea4b 0202 	orrne.w	r2, fp, r2
        }
        EXTI->IMR1 = temp;
 8002a6c:	f8c8 2080 	str.w	r2, [r8, #128]	; 0x80

        temp = EXTI->EMR1;
 8002a70:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a74:	6862      	ldr	r2, [r4, #4]
 8002a76:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        temp &= ~(iocurrent);
 8002a7a:	bf0c      	ite	eq
 8002a7c:	400b      	andeq	r3, r1
        {
          temp |= iocurrent;
 8002a7e:	ea4b 0303 	orrne.w	r3, fp, r3
        }
        EXTI->EMR1 = temp;
 8002a82:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
      }
    }

    position++;
 8002a86:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a88:	6823      	ldr	r3, [r4, #0]
 8002a8a:	fa33 f205 	lsrs.w	r2, r3, r5
 8002a8e:	d043      	beq.n	8002b18 <HAL_GPIO_Init+0x248>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a90:	2601      	movs	r6, #1
 8002a92:	40ae      	lsls	r6, r5
    if (iocurrent != 0x00u)
 8002a94:	ea16 0b03 	ands.w	fp, r6, r3
 8002a98:	d0f5      	beq.n	8002a86 <HAL_GPIO_Init+0x1b6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a9a:	6863      	ldr	r3, [r4, #4]
 8002a9c:	f003 0303 	and.w	r3, r3, #3
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	f67f af65 	bls.w	8002972 <HAL_GPIO_Init+0xa2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aa8:	6863      	ldr	r3, [r4, #4]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	d08e      	beq.n	80029d0 <HAL_GPIO_Init+0x100>
        temp = GPIOx->PUPDR;
 8002ab2:	68fa      	ldr	r2, [r7, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ab4:	0069      	lsls	r1, r5, #1
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	408b      	lsls	r3, r1
 8002aba:	ea22 0203 	bic.w	r2, r2, r3
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002abe:	68a3      	ldr	r3, [r4, #8]
 8002ac0:	408b      	lsls	r3, r1
 8002ac2:	4313      	orrs	r3, r2
        GPIOx->PUPDR = temp;
 8002ac4:	60fb      	str	r3, [r7, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ac6:	6863      	ldr	r3, [r4, #4]
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	f47f af7f 	bne.w	80029d0 <HAL_GPIO_Init+0x100>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002ad2:	f1b7 4f90 	cmp.w	r7, #1207959552	; 0x48000000
 8002ad6:	f43f af68 	beq.w	80029aa <HAL_GPIO_Init+0xda>
 8002ada:	454f      	cmp	r7, r9
 8002adc:	f43f af65 	beq.w	80029aa <HAL_GPIO_Init+0xda>
 8002ae0:	4557      	cmp	r7, sl
 8002ae2:	f43f af62 	beq.w	80029aa <HAL_GPIO_Init+0xda>
 8002ae6:	4b0f      	ldr	r3, [pc, #60]	; (8002b24 <HAL_GPIO_Init+0x254>)
 8002ae8:	429f      	cmp	r7, r3
 8002aea:	f43f af5e 	beq.w	80029aa <HAL_GPIO_Init+0xda>
 8002aee:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002af2:	429f      	cmp	r7, r3
 8002af4:	f43f af59 	beq.w	80029aa <HAL_GPIO_Init+0xda>
 8002af8:	21d5      	movs	r1, #213	; 0xd5
 8002afa:	4809      	ldr	r0, [pc, #36]	; (8002b20 <HAL_GPIO_Init+0x250>)
 8002afc:	f7ff f848 	bl	8001b90 <assert_failed>
 8002b00:	e753      	b.n	80029aa <HAL_GPIO_Init+0xda>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002b02:	21d6      	movs	r1, #214	; 0xd6
 8002b04:	4806      	ldr	r0, [pc, #24]	; (8002b20 <HAL_GPIO_Init+0x250>)
 8002b06:	f7ff f843 	bl	8001b90 <assert_failed>
 8002b0a:	e752      	b.n	80029b2 <HAL_GPIO_Init+0xe2>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	e789      	b.n	8002a24 <HAL_GPIO_Init+0x154>
 8002b10:	2201      	movs	r2, #1
 8002b12:	e787      	b.n	8002a24 <HAL_GPIO_Init+0x154>
 8002b14:	2202      	movs	r2, #2
 8002b16:	e785      	b.n	8002a24 <HAL_GPIO_Init+0x154>
  }
}
 8002b18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b1c:	48000400 	.word	0x48000400
 8002b20:	08009a88 	.word	0x08009a88
 8002b24:	48001000 	.word	0x48001000
 8002b28:	58000800 	.word	0x58000800
 8002b2c:	48000800 	.word	0x48000800

08002b30 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b30:	b538      	push	{r3, r4, r5, lr}
 8002b32:	4604      	mov	r4, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002b34:	460d      	mov	r5, r1
 8002b36:	b129      	cbz	r1, 8002b44 <HAL_GPIO_ReadPin+0x14>

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002b38:	6923      	ldr	r3, [r4, #16]
 8002b3a:	421d      	tst	r5, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002b3c:	bf14      	ite	ne
 8002b3e:	2001      	movne	r0, #1
 8002b40:	2000      	moveq	r0, #0
 8002b42:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002b44:	f240 1173 	movw	r1, #371	; 0x173
 8002b48:	4801      	ldr	r0, [pc, #4]	; (8002b50 <HAL_GPIO_ReadPin+0x20>)
 8002b4a:	f7ff f821 	bl	8001b90 <assert_failed>
 8002b4e:	e7f3      	b.n	8002b38 <HAL_GPIO_ReadPin+0x8>
 8002b50:	08009a88 	.word	0x08009a88

08002b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b54:	b570      	push	{r4, r5, r6, lr}
 8002b56:	4605      	mov	r5, r0
 8002b58:	4614      	mov	r4, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002b5a:	460e      	mov	r6, r1
 8002b5c:	b121      	cbz	r1, 8002b68 <HAL_GPIO_WritePin+0x14>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002b5e:	2c01      	cmp	r4, #1
 8002b60:	d808      	bhi.n	8002b74 <HAL_GPIO_WritePin+0x20>

  if (PinState != GPIO_PIN_RESET)
 8002b62:	b964      	cbnz	r4, 8002b7e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b64:	62ae      	str	r6, [r5, #40]	; 0x28
  }
}
 8002b66:	e00b      	b.n	8002b80 <HAL_GPIO_WritePin+0x2c>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002b68:	f240 1193 	movw	r1, #403	; 0x193
 8002b6c:	4805      	ldr	r0, [pc, #20]	; (8002b84 <HAL_GPIO_WritePin+0x30>)
 8002b6e:	f7ff f80f 	bl	8001b90 <assert_failed>
 8002b72:	e7f4      	b.n	8002b5e <HAL_GPIO_WritePin+0xa>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002b74:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8002b78:	4802      	ldr	r0, [pc, #8]	; (8002b84 <HAL_GPIO_WritePin+0x30>)
 8002b7a:	f7ff f809 	bl	8001b90 <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b7e:	61ae      	str	r6, [r5, #24]
}
 8002b80:	bd70      	pop	{r4, r5, r6, pc}
 8002b82:	bf00      	nop
 8002b84:	08009a88 	.word	0x08009a88

08002b88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b88:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b8a:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	4203      	tst	r3, r0
 8002b90:	d100      	bne.n	8002b94 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8002b92:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b94:	4b02      	ldr	r3, [pc, #8]	; (8002ba0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002b96:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b98:	f7fd fd08 	bl	80005ac <HAL_GPIO_EXTI_Callback>
}
 8002b9c:	e7f9      	b.n	8002b92 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002b9e:	bf00      	nop
 8002ba0:	58000800 	.word	0x58000800

08002ba4 <HAL_HSEM_FreeCallback>:
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002ba4:	4770      	bx	lr
	...

08002ba8 <HAL_HSEM_IRQHandler>:
{
 8002ba8:	b508      	push	{r3, lr}
  statusreg = HSEM_COMMON->MISR;
 8002baa:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_HSEM_IRQHandler+0x18>)
 8002bac:	68d8      	ldr	r0, [r3, #12]
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	ea22 0200 	bic.w	r2, r2, r0
 8002bb4:	601a      	str	r2, [r3, #0]
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002bb6:	6058      	str	r0, [r3, #4]
  HAL_HSEM_FreeCallback(statusreg);
 8002bb8:	f7ff fff4 	bl	8002ba4 <HAL_HSEM_FreeCallback>
}
 8002bbc:	bd08      	pop	{r3, pc}
 8002bbe:	bf00      	nop
 8002bc0:	58001500 	.word	0x58001500

08002bc4 <HAL_IPCC_RxCallback>:
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8002bc4:	4770      	bx	lr

08002bc6 <HAL_IPCC_TxCallback>:
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8002bc6:	4770      	bx	lr

08002bc8 <IPCC_SetDefaultCallbacks>:
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002bc8:	1d03      	adds	r3, r0, #4
 8002bca:	301c      	adds	r0, #28
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8002bcc:	4903      	ldr	r1, [pc, #12]	; (8002bdc <IPCC_SetDefaultCallbacks+0x14>)
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8002bce:	4a04      	ldr	r2, [pc, #16]	; (8002be0 <IPCC_SetDefaultCallbacks+0x18>)
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8002bd0:	f843 1b04 	str.w	r1, [r3], #4
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8002bd4:	615a      	str	r2, [r3, #20]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002bd6:	4283      	cmp	r3, r0
 8002bd8:	d1fa      	bne.n	8002bd0 <IPCC_SetDefaultCallbacks+0x8>
  }
}
 8002bda:	4770      	bx	lr
 8002bdc:	08002bc5 	.word	0x08002bc5
 8002be0:	08002bc7 	.word	0x08002bc7

08002be4 <HAL_IPCC_Init>:
  if (hipcc != NULL)
 8002be4:	b328      	cbz	r0, 8002c32 <HAL_IPCC_Init+0x4e>
{
 8002be6:	b538      	push	{r3, r4, r5, lr}
 8002be8:	4605      	mov	r5, r0
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));
 8002bea:	6802      	ldr	r2, [r0, #0]
 8002bec:	4b12      	ldr	r3, [pc, #72]	; (8002c38 <HAL_IPCC_Init+0x54>)
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d003      	beq.n	8002bfa <HAL_IPCC_Init+0x16>
 8002bf2:	2186      	movs	r1, #134	; 0x86
 8002bf4:	4811      	ldr	r0, [pc, #68]	; (8002c3c <HAL_IPCC_Init+0x58>)
 8002bf6:	f7fe ffcb 	bl	8001b90 <assert_failed>
    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8002bfa:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 8002bfe:	b1a3      	cbz	r3, 8002c2a <HAL_IPCC_Init+0x46>
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002c00:	4b0d      	ldr	r3, [pc, #52]	; (8002c38 <HAL_IPCC_Init+0x54>)
 8002c02:	2400      	movs	r4, #0
 8002c04:	601c      	str	r4, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8002c06:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8002c0a:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8002c0c:	223f      	movs	r2, #63	; 0x3f
 8002c0e:	609a      	str	r2, [r3, #8]
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	f042 1201 	orr.w	r2, r2, #65537	; 0x10001
 8002c16:	601a      	str	r2, [r3, #0]
    IPCC_SetDefaultCallbacks(hipcc);
 8002c18:	4628      	mov	r0, r5
 8002c1a:	f7ff ffd5 	bl	8002bc8 <IPCC_SetDefaultCallbacks>
    hipcc->callbackRequest = 0;
 8002c1e:	636c      	str	r4, [r5, #52]	; 0x34
    hipcc->State = HAL_IPCC_STATE_READY;
 8002c20:	2301      	movs	r3, #1
 8002c22:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  HAL_StatusTypeDef err = HAL_OK;
 8002c26:	4620      	mov	r0, r4
}
 8002c28:	bd38      	pop	{r3, r4, r5, pc}
      HAL_IPCC_MspInit(hipcc);
 8002c2a:	4628      	mov	r0, r5
 8002c2c:	f7fe fe00 	bl	8001830 <HAL_IPCC_MspInit>
 8002c30:	e7e6      	b.n	8002c00 <HAL_IPCC_Init+0x1c>
    err = HAL_ERROR;
 8002c32:	2001      	movs	r0, #1
}
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	58000c00 	.word	0x58000c00
 8002c3c:	08009ac4 	.word	0x08009ac4

08002c40 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c40:	4a02      	ldr	r2, [pc, #8]	; (8002c4c <HAL_PWR_EnableBkUpAccess+0xc>)
 8002c42:	6813      	ldr	r3, [r2, #0]
 8002c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c48:	6013      	str	r3, [r2, #0]
}
 8002c4a:	4770      	bx	lr
 8002c4c:	58000400 	.word	0x58000400

08002c50 <HAL_PWR_DisableBkUpAccess>:
  *         (RTC registers, RTC backup data registers).
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c50:	4a02      	ldr	r2, [pc, #8]	; (8002c5c <HAL_PWR_DisableBkUpAccess+0xc>)
 8002c52:	6813      	ldr	r3, [r2, #0]
 8002c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c58:	6013      	str	r3, [r2, #0]
}
 8002c5a:	4770      	bx	lr
 8002c5c:	58000400 	.word	0x58000400

08002c60 <HAL_PWREx_EnableSRAMRetention>:
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 8002c60:	4a02      	ldr	r2, [pc, #8]	; (8002c6c <HAL_PWREx_EnableSRAMRetention+0xc>)
 8002c62:	6893      	ldr	r3, [r2, #8]
 8002c64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c68:	6093      	str	r3, [r2, #8]
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
  LL_PWR_EnableSRAM2Retention();
}
 8002c6a:	4770      	bx	lr
 8002c6c:	58000400 	.word	0x58000400

08002c70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002c70:	b570      	push	{r4, r5, r6, lr}
 8002c72:	b088      	sub	sp, #32
 8002c74:	4604      	mov	r4, r0
  uint32_t flash_clksrcfreq, msifreq;

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));
 8002c76:	f030 0310 	bics.w	r3, r0, #16
 8002c7a:	d04c      	beq.n	8002d16 <RCC_SetFlashLatencyFromMSIRange+0xa6>
 8002c7c:	2b20      	cmp	r3, #32
 8002c7e:	d04a      	beq.n	8002d16 <RCC_SetFlashLatencyFromMSIRange+0xa6>
 8002c80:	2b40      	cmp	r3, #64	; 0x40
 8002c82:	d048      	beq.n	8002d16 <RCC_SetFlashLatencyFromMSIRange+0xa6>
 8002c84:	2b60      	cmp	r3, #96	; 0x60
 8002c86:	d046      	beq.n	8002d16 <RCC_SetFlashLatencyFromMSIRange+0xa6>
 8002c88:	2b80      	cmp	r3, #128	; 0x80
 8002c8a:	d044      	beq.n	8002d16 <RCC_SetFlashLatencyFromMSIRange+0xa6>
 8002c8c:	2ba0      	cmp	r3, #160	; 0xa0
 8002c8e:	d042      	beq.n	8002d16 <RCC_SetFlashLatencyFromMSIRange+0xa6>
 8002c90:	f240 61dc 	movw	r1, #1756	; 0x6dc
 8002c94:	4827      	ldr	r0, [pc, #156]	; (8002d34 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002c96:	f7fe ff7b 	bl	8001b90 <assert_failed>

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002c9a:	2cb0      	cmp	r4, #176	; 0xb0
 8002c9c:	d93b      	bls.n	8002d16 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002c9e:	4b26      	ldr	r3, [pc, #152]	; (8002d38 <RCC_SetFlashLatencyFromMSIRange+0xc8>)
 8002ca0:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	4a23      	ldr	r2, [pc, #140]	; (8002d3c <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8002cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb4:	fbb6 f6f3 	udiv	r6, r6, r3

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cb8:	4b21      	ldr	r3, [pc, #132]	; (8002d40 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 8002cba:	fba3 3606 	umull	r3, r6, r3, r6
 8002cbe:	0cb6      	lsrs	r6, r6, #18
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002cc0:	4c20      	ldr	r4, [pc, #128]	; (8002d44 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8002cc2:	466d      	mov	r5, sp
 8002cc4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002cc8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002ccc:	3410      	adds	r4, #16
 8002cce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002cd2:	ac08      	add	r4, sp, #32
 8002cd4:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002cd8:	2300      	movs	r3, #0
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002cda:	f855 2b04 	ldr.w	r2, [r5], #4
 8002cde:	4296      	cmp	r6, r2
 8002ce0:	d91e      	bls.n	8002d20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d1f8      	bne.n	8002cda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002ce8:	2500      	movs	r5, #0
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8002cea:	4a17      	ldr	r2, [pc, #92]	; (8002d48 <RCC_SetFlashLatencyFromMSIRange+0xd8>)
 8002cec:	6813      	ldr	r3, [r2, #0]
 8002cee:	f023 0307 	bic.w	r3, r3, #7
 8002cf2:	432b      	orrs	r3, r5
 8002cf4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002cf6:	f7ff fab5 	bl	8002264 <HAL_GetTick>
 8002cfa:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002cfc:	4e12      	ldr	r6, [pc, #72]	; (8002d48 <RCC_SetFlashLatencyFromMSIRange+0xd8>)
 8002cfe:	6833      	ldr	r3, [r6, #0]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	429d      	cmp	r5, r3
 8002d06:	d011      	beq.n	8002d2c <RCC_SetFlashLatencyFromMSIRange+0xbc>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002d08:	f7ff faac 	bl	8002264 <HAL_GetTick>
 8002d0c:	1b00      	subs	r0, r0, r4
 8002d0e:	2802      	cmp	r0, #2
 8002d10:	d9f5      	bls.n	8002cfe <RCC_SetFlashLatencyFromMSIRange+0x8e>
    {
      return HAL_TIMEOUT;
 8002d12:	2003      	movs	r0, #3
 8002d14:	e00b      	b.n	8002d2e <RCC_SetFlashLatencyFromMSIRange+0xbe>
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002d16:	0924      	lsrs	r4, r4, #4
 8002d18:	4b07      	ldr	r3, [pc, #28]	; (8002d38 <RCC_SetFlashLatencyFromMSIRange+0xc8>)
 8002d1a:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
 8002d1e:	e7c0      	b.n	8002ca2 <RCC_SetFlashLatencyFromMSIRange+0x32>
      latency = FLASH_LATENCY_RANGE[index];
 8002d20:	aa08      	add	r2, sp, #32
 8002d22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002d26:	f853 5c10 	ldr.w	r5, [r3, #-16]
      break;
 8002d2a:	e7de      	b.n	8002cea <RCC_SetFlashLatencyFromMSIRange+0x7a>
    }
  }
  return HAL_OK;
 8002d2c:	2000      	movs	r0, #0
}
 8002d2e:	b008      	add	sp, #32
 8002d30:	bd70      	pop	{r4, r5, r6, pc}
 8002d32:	bf00      	nop
 8002d34:	08009b00 	.word	0x08009b00
 8002d38:	080099d4 	.word	0x080099d4
 8002d3c:	08009974 	.word	0x08009974
 8002d40:	431bde83 	.word	0x431bde83
 8002d44:	08009398 	.word	0x08009398
 8002d48:	58004000 	.word	0x58004000

08002d4c <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d50:	689b      	ldr	r3, [r3, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d52:	f013 030c 	ands.w	r3, r3, #12
 8002d56:	d10c      	bne.n	8002d72 <HAL_RCC_GetSysClockFreq+0x26>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002d62:	2bb0      	cmp	r3, #176	; 0xb0
 8002d64:	bf28      	it	cs
 8002d66:	23b0      	movcs	r3, #176	; 0xb0
 8002d68:	091b      	lsrs	r3, r3, #4
 8002d6a:	4a25      	ldr	r2, [pc, #148]	; (8002e00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d6c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002d70:	4770      	bx	lr
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d041      	beq.n	8002dfa <HAL_RCC_GetSysClockFreq+0xae>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d013      	beq.n	8002da2 <HAL_RCC_GetSysClockFreq+0x56>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d024      	beq.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x86>
 8002d88:	2b03      	cmp	r3, #3
 8002d8a:	d115      	bne.n	8002db8 <HAL_RCC_GetSysClockFreq+0x6c>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
          pllinputfreq = HSE_VALUE / 2U;
 8002d96:	481b      	ldr	r0, [pc, #108]	; (8002e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d98:	4a1b      	ldr	r2, [pc, #108]	; (8002e08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	bf18      	it	ne
 8002d9e:	4610      	movne	r0, r2
 8002da0:	e018      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x88>
 8002da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
      sysclockfreq = HSE_VALUE;
 8002dac:	4816      	ldr	r0, [pc, #88]	; (8002e08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dae:	4a15      	ldr	r2, [pc, #84]	; (8002e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	bf08      	it	eq
 8002db4:	4610      	moveq	r0, r2
 8002db6:	4770      	bx	lr
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002dc2:	2bb0      	cmp	r3, #176	; 0xb0
 8002dc4:	bf28      	it	cs
 8002dc6:	23b0      	movcs	r3, #176	; 0xb0
 8002dc8:	091b      	lsrs	r3, r3, #4
 8002dca:	4a0d      	ldr	r2, [pc, #52]	; (8002e00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002dcc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        break;
 8002dd0:	e000      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x88>
    switch (pllsource)
 8002dd2:	480d      	ldr	r0, [pc, #52]	; (8002e08 <HAL_RCC_GetSysClockFreq+0xbc>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd8:	68d9      	ldr	r1, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002dda:	68da      	ldr	r2, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002ddc:	68db      	ldr	r3, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002dde:	f3c1 2106 	ubfx	r1, r1, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8002de2:	fb00 f001 	mul.w	r0, r0, r1
 8002de6:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8002dea:	3201      	adds	r2, #1
 8002dec:	fbb0 f0f2 	udiv	r0, r0, r2
 8002df0:	0f5b      	lsrs	r3, r3, #29
 8002df2:	3301      	adds	r3, #1
 8002df4:	fbb0 f0f3 	udiv	r0, r0, r3
 8002df8:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8002dfa:	4803      	ldr	r0, [pc, #12]	; (8002e08 <HAL_RCC_GetSysClockFreq+0xbc>)
}
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	080099d4 	.word	0x080099d4
 8002e04:	01e84800 	.word	0x01e84800
 8002e08:	00f42400 	.word	0x00f42400

08002e0c <HAL_RCC_GetHCLKFreq>:
{
 8002e0c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002e0e:	f7ff ff9d 	bl	8002d4c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002e1c:	4a02      	ldr	r2, [pc, #8]	; (8002e28 <HAL_RCC_GetHCLKFreq+0x1c>)
 8002e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002e22:	fbb0 f0f3 	udiv	r0, r0, r3
 8002e26:	bd08      	pop	{r3, pc}
 8002e28:	08009974 	.word	0x08009974

08002e2c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002e2c:	2800      	cmp	r0, #0
 8002e2e:	f000 83ff 	beq.w	8003630 <HAL_RCC_OscConfig+0x804>
{
 8002e32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e34:	4604      	mov	r4, r0
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002e36:	6803      	ldr	r3, [r0, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 810c 	beq.w	8003056 <HAL_RCC_OscConfig+0x22a>
 8002e3e:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 8002e42:	d140      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x9a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e44:	6823      	ldr	r3, [r4, #0]
 8002e46:	f013 0f20 	tst.w	r3, #32
 8002e4a:	f000 80aa 	beq.w	8002fa2 <HAL_RCC_OscConfig+0x176>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8002e4e:	69e3      	ldr	r3, [r4, #28]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d83e      	bhi.n	8002ed2 <HAL_RCC_OscConfig+0xa6>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8002e54:	6a23      	ldr	r3, [r4, #32]
 8002e56:	2bff      	cmp	r3, #255	; 0xff
 8002e58:	d841      	bhi.n	8002ede <HAL_RCC_OscConfig+0xb2>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8002e5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e5c:	f033 0310 	bics.w	r3, r3, #16
 8002e60:	d00e      	beq.n	8002e80 <HAL_RCC_OscConfig+0x54>
 8002e62:	2b20      	cmp	r3, #32
 8002e64:	d00c      	beq.n	8002e80 <HAL_RCC_OscConfig+0x54>
 8002e66:	2b40      	cmp	r3, #64	; 0x40
 8002e68:	d00a      	beq.n	8002e80 <HAL_RCC_OscConfig+0x54>
 8002e6a:	2b60      	cmp	r3, #96	; 0x60
 8002e6c:	d008      	beq.n	8002e80 <HAL_RCC_OscConfig+0x54>
 8002e6e:	2b80      	cmp	r3, #128	; 0x80
 8002e70:	d006      	beq.n	8002e80 <HAL_RCC_OscConfig+0x54>
 8002e72:	2ba0      	cmp	r3, #160	; 0xa0
 8002e74:	d004      	beq.n	8002e80 <HAL_RCC_OscConfig+0x54>
 8002e76:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002e7a:	489c      	ldr	r0, [pc, #624]	; (80030ec <HAL_RCC_OscConfig+0x2c0>)
 8002e7c:	f7fe fe88 	bl	8001b90 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002e80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e84:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002e86:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002e88:	f013 030c 	ands.w	r3, r3, #12
 8002e8c:	d031      	beq.n	8002ef2 <HAL_RCC_OscConfig+0xc6>
 8002e8e:	2b0c      	cmp	r3, #12
 8002e90:	d02b      	beq.n	8002eea <HAL_RCC_OscConfig+0xbe>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e92:	69e3      	ldr	r3, [r4, #28]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 80ba 	beq.w	800300e <HAL_RCC_OscConfig+0x1e2>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002e9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e9e:	6813      	ldr	r3, [r2, #0]
 8002ea0:	f043 0301 	orr.w	r3, r3, #1
 8002ea4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002ea6:	f7ff f9dd 	bl	8002264 <HAL_GetTick>
 8002eaa:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002eac:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002eb0:	6833      	ldr	r3, [r6, #0]
 8002eb2:	f013 0f02 	tst.w	r3, #2
 8002eb6:	d165      	bne.n	8002f84 <HAL_RCC_OscConfig+0x158>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002eb8:	f7ff f9d4 	bl	8002264 <HAL_GetTick>
 8002ebc:	1b40      	subs	r0, r0, r5
 8002ebe:	2802      	cmp	r0, #2
 8002ec0:	d9f6      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x84>
            return HAL_TIMEOUT;
 8002ec2:	2003      	movs	r0, #3
 8002ec4:	e3bf      	b.n	8003646 <HAL_RCC_OscConfig+0x81a>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002ec6:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002eca:	4888      	ldr	r0, [pc, #544]	; (80030ec <HAL_RCC_OscConfig+0x2c0>)
 8002ecc:	f7fe fe60 	bl	8001b90 <assert_failed>
 8002ed0:	e7b8      	b.n	8002e44 <HAL_RCC_OscConfig+0x18>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8002ed2:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8002ed6:	4885      	ldr	r0, [pc, #532]	; (80030ec <HAL_RCC_OscConfig+0x2c0>)
 8002ed8:	f7fe fe5a 	bl	8001b90 <assert_failed>
 8002edc:	e7ba      	b.n	8002e54 <HAL_RCC_OscConfig+0x28>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8002ede:	f240 118f 	movw	r1, #399	; 0x18f
 8002ee2:	4882      	ldr	r0, [pc, #520]	; (80030ec <HAL_RCC_OscConfig+0x2c0>)
 8002ee4:	f7fe fe54 	bl	8001b90 <assert_failed>
 8002ee8:	e7b7      	b.n	8002e5a <HAL_RCC_OscConfig+0x2e>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002eea:	f002 0203 	and.w	r2, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002eee:	2a01      	cmp	r2, #1
 8002ef0:	d1cf      	bne.n	8002e92 <HAL_RCC_OscConfig+0x66>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f013 0f02 	tst.w	r3, #2
 8002efc:	d003      	beq.n	8002f06 <HAL_RCC_OscConfig+0xda>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002efe:	69e3      	ldr	r3, [r4, #28]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 8397 	beq.w	8003634 <HAL_RCC_OscConfig+0x808>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f06:	6a60      	ldr	r0, [r4, #36]	; 0x24
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f12:	2bb0      	cmp	r3, #176	; 0xb0
 8002f14:	bf28      	it	cs
 8002f16:	23b0      	movcs	r3, #176	; 0xb0
 8002f18:	4298      	cmp	r0, r3
 8002f1a:	d91e      	bls.n	8002f5a <HAL_RCC_OscConfig+0x12e>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f1c:	f7ff fea8 	bl	8002c70 <RCC_SetFlashLatencyFromMSIRange>
 8002f20:	2800      	cmp	r0, #0
 8002f22:	f040 8389 	bne.w	8003638 <HAL_RCC_OscConfig+0x80c>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002f26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f2a:	6813      	ldr	r3, [r2, #0]
 8002f2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f30:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002f32:	430b      	orrs	r3, r1
 8002f34:	6013      	str	r3, [r2, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002f36:	6853      	ldr	r3, [r2, #4]
 8002f38:	6a21      	ldr	r1, [r4, #32]
 8002f3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f3e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002f42:	6053      	str	r3, [r2, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f44:	f7ff ff62 	bl	8002e0c <HAL_RCC_GetHCLKFreq>
 8002f48:	4b69      	ldr	r3, [pc, #420]	; (80030f0 <HAL_RCC_OscConfig+0x2c4>)
 8002f4a:	6018      	str	r0, [r3, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f4c:	4b69      	ldr	r3, [pc, #420]	; (80030f4 <HAL_RCC_OscConfig+0x2c8>)
 8002f4e:	6818      	ldr	r0, [r3, #0]
 8002f50:	f7ff f93e 	bl	80021d0 <HAL_InitTick>
 8002f54:	b328      	cbz	r0, 8002fa2 <HAL_RCC_OscConfig+0x176>
          return HAL_ERROR;
 8002f56:	2001      	movs	r0, #1
 8002f58:	e375      	b.n	8003646 <HAL_RCC_OscConfig+0x81a>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002f5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f5e:	6813      	ldr	r3, [r2, #0]
 8002f60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f64:	4303      	orrs	r3, r0
 8002f66:	6013      	str	r3, [r2, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002f68:	6853      	ldr	r3, [r2, #4]
 8002f6a:	6a21      	ldr	r1, [r4, #32]
 8002f6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f70:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002f74:	6053      	str	r3, [r2, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f76:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002f78:	f7ff fe7a 	bl	8002c70 <RCC_SetFlashLatencyFromMSIRange>
 8002f7c:	2800      	cmp	r0, #0
 8002f7e:	d0e1      	beq.n	8002f44 <HAL_RCC_OscConfig+0x118>
            return HAL_ERROR;
 8002f80:	2001      	movs	r0, #1
 8002f82:	e360      	b.n	8003646 <HAL_RCC_OscConfig+0x81a>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002f84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f88:	6813      	ldr	r3, [r2, #0]
 8002f8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f8e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002f90:	430b      	orrs	r3, r1
 8002f92:	6013      	str	r3, [r2, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002f94:	6853      	ldr	r3, [r2, #4]
 8002f96:	6a21      	ldr	r1, [r4, #32]
 8002f98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f9c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002fa0:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fa2:	6823      	ldr	r3, [r4, #0]
 8002fa4:	f013 0f01 	tst.w	r3, #1
 8002fa8:	d055      	beq.n	8003056 <HAL_RCC_OscConfig+0x22a>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002faa:	6863      	ldr	r3, [r4, #4]
 8002fac:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8002fb0:	d004      	beq.n	8002fbc <HAL_RCC_OscConfig+0x190>
 8002fb2:	f240 11f9 	movw	r1, #505	; 0x1f9
 8002fb6:	484d      	ldr	r0, [pc, #308]	; (80030ec <HAL_RCC_OscConfig+0x2c0>)
 8002fb8:	f7fe fdea 	bl	8001b90 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002fbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fc0:	6893      	ldr	r3, [r2, #8]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002fc6:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d03a      	beq.n	8003042 <HAL_RCC_OscConfig+0x216>
 8002fcc:	2b0c      	cmp	r3, #12
 8002fce:	d034      	beq.n	800303a <HAL_RCC_OscConfig+0x20e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd0:	6863      	ldr	r3, [r4, #4]
 8002fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002fd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fda:	6813      	ldr	r3, [r2, #0]
 8002fdc:	bf0c      	ite	eq
 8002fde:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002fe2:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
 8002fe6:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fe8:	6863      	ldr	r3, [r4, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d067      	beq.n	80030be <HAL_RCC_OscConfig+0x292>
        tickstart = HAL_GetTick();
 8002fee:	f7ff f939 	bl	8002264 <HAL_GetTick>
 8002ff2:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002ff4:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002ff8:	6833      	ldr	r3, [r6, #0]
 8002ffa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002ffe:	d12a      	bne.n	8003056 <HAL_RCC_OscConfig+0x22a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003000:	f7ff f930 	bl	8002264 <HAL_GetTick>
 8003004:	1b40      	subs	r0, r0, r5
 8003006:	2864      	cmp	r0, #100	; 0x64
 8003008:	d9f6      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x1cc>
            return HAL_TIMEOUT;
 800300a:	2003      	movs	r0, #3
 800300c:	e31b      	b.n	8003646 <HAL_RCC_OscConfig+0x81a>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800300e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003012:	6813      	ldr	r3, [r2, #0]
 8003014:	f023 0301 	bic.w	r3, r3, #1
 8003018:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800301a:	f7ff f923 	bl	8002264 <HAL_GetTick>
 800301e:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003020:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8003024:	6833      	ldr	r3, [r6, #0]
 8003026:	f013 0f02 	tst.w	r3, #2
 800302a:	d0ba      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x176>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800302c:	f7ff f91a 	bl	8002264 <HAL_GetTick>
 8003030:	1b40      	subs	r0, r0, r5
 8003032:	2802      	cmp	r0, #2
 8003034:	d9f6      	bls.n	8003024 <HAL_RCC_OscConfig+0x1f8>
            return HAL_TIMEOUT;
 8003036:	2003      	movs	r0, #3
 8003038:	e305      	b.n	8003646 <HAL_RCC_OscConfig+0x81a>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800303a:	f002 0203 	and.w	r2, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800303e:	2a03      	cmp	r2, #3
 8003040:	d1c6      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x1a4>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800304c:	d003      	beq.n	8003056 <HAL_RCC_OscConfig+0x22a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800304e:	6863      	ldr	r3, [r4, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 82f3 	beq.w	800363c <HAL_RCC_OscConfig+0x810>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003056:	6823      	ldr	r3, [r4, #0]
 8003058:	f013 0f02 	tst.w	r3, #2
 800305c:	d063      	beq.n	8003126 <HAL_RCC_OscConfig+0x2fa>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800305e:	68e3      	ldr	r3, [r4, #12]
 8003060:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8003064:	d004      	beq.n	8003070 <HAL_RCC_OscConfig+0x244>
 8003066:	f240 212f 	movw	r1, #559	; 0x22f
 800306a:	4820      	ldr	r0, [pc, #128]	; (80030ec <HAL_RCC_OscConfig+0x2c0>)
 800306c:	f7fe fd90 	bl	8001b90 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003070:	6923      	ldr	r3, [r4, #16]
 8003072:	2b7f      	cmp	r3, #127	; 0x7f
 8003074:	d833      	bhi.n	80030de <HAL_RCC_OscConfig+0x2b2>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003076:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800307a:	6893      	ldr	r3, [r2, #8]
 800307c:	f003 030c 	and.w	r3, r3, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003080:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003082:	2b04      	cmp	r3, #4
 8003084:	d03c      	beq.n	8003100 <HAL_RCC_OscConfig+0x2d4>
 8003086:	2b0c      	cmp	r3, #12
 8003088:	d036      	beq.n	80030f8 <HAL_RCC_OscConfig+0x2cc>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800308a:	68e3      	ldr	r3, [r4, #12]
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 8090 	beq.w	80031b2 <HAL_RCC_OscConfig+0x386>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003092:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003096:	6813      	ldr	r3, [r2, #0]
 8003098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800309c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800309e:	f7ff f8e1 	bl	8002264 <HAL_GetTick>
 80030a2:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80030a4:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80030a8:	6833      	ldr	r3, [r6, #0]
 80030aa:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80030ae:	d176      	bne.n	800319e <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b0:	f7ff f8d8 	bl	8002264 <HAL_GetTick>
 80030b4:	1b40      	subs	r0, r0, r5
 80030b6:	2802      	cmp	r0, #2
 80030b8:	d9f6      	bls.n	80030a8 <HAL_RCC_OscConfig+0x27c>
            return HAL_TIMEOUT;
 80030ba:	2003      	movs	r0, #3
 80030bc:	e2c3      	b.n	8003646 <HAL_RCC_OscConfig+0x81a>
        tickstart = HAL_GetTick();
 80030be:	f7ff f8d1 	bl	8002264 <HAL_GetTick>
 80030c2:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80030c4:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80030c8:	6833      	ldr	r3, [r6, #0]
 80030ca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80030ce:	d0c2      	beq.n	8003056 <HAL_RCC_OscConfig+0x22a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d0:	f7ff f8c8 	bl	8002264 <HAL_GetTick>
 80030d4:	1b40      	subs	r0, r0, r5
 80030d6:	2864      	cmp	r0, #100	; 0x64
 80030d8:	d9f6      	bls.n	80030c8 <HAL_RCC_OscConfig+0x29c>
            return HAL_TIMEOUT;
 80030da:	2003      	movs	r0, #3
 80030dc:	e2b3      	b.n	8003646 <HAL_RCC_OscConfig+0x81a>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80030de:	f44f 710c 	mov.w	r1, #560	; 0x230
 80030e2:	4802      	ldr	r0, [pc, #8]	; (80030ec <HAL_RCC_OscConfig+0x2c0>)
 80030e4:	f7fe fd54 	bl	8001b90 <assert_failed>
 80030e8:	e7c5      	b.n	8003076 <HAL_RCC_OscConfig+0x24a>
 80030ea:	bf00      	nop
 80030ec:	08009b00 	.word	0x08009b00
 80030f0:	20000004 	.word	0x20000004
 80030f4:	2000000c 	.word	0x2000000c
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80030f8:	f002 0203 	and.w	r2, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80030fc:	2a02      	cmp	r2, #2
 80030fe:	d1c4      	bne.n	800308a <HAL_RCC_OscConfig+0x25e>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800310a:	d003      	beq.n	8003114 <HAL_RCC_OscConfig+0x2e8>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800310c:	68e3      	ldr	r3, [r4, #12]
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 8296 	beq.w	8003640 <HAL_RCC_OscConfig+0x814>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003114:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003118:	6853      	ldr	r3, [r2, #4]
 800311a:	6921      	ldr	r1, [r4, #16]
 800311c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003120:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003124:	6053      	str	r3, [r2, #4]
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003126:	6823      	ldr	r3, [r4, #0]
 8003128:	f013 0f18 	tst.w	r3, #24
 800312c:	f000 80f8 	beq.w	8003320 <HAL_RCC_OscConfig+0x4f4>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003130:	6963      	ldr	r3, [r4, #20]
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 80c2 	beq.w	80032bc <HAL_RCC_OscConfig+0x490>
 8003138:	2b05      	cmp	r3, #5
 800313a:	d008      	beq.n	800314e <HAL_RCC_OscConfig+0x322>
 800313c:	f44f 711d 	mov.w	r1, #628	; 0x274
 8003140:	48ce      	ldr	r0, [pc, #824]	; (800347c <HAL_RCC_OscConfig+0x650>)
 8003142:	f7fe fd25 	bl	8001b90 <assert_failed>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003146:	6963      	ldr	r3, [r4, #20]
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 80b7 	beq.w	80032bc <HAL_RCC_OscConfig+0x490>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800314e:	6823      	ldr	r3, [r4, #0]
 8003150:	f013 0f10 	tst.w	r3, #16
 8003154:	f000 8084 	beq.w	8003260 <HAL_RCC_OscConfig+0x434>
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));
 8003158:	69a3      	ldr	r3, [r4, #24]
 800315a:	2b0f      	cmp	r3, #15
 800315c:	d83f      	bhi.n	80031de <HAL_RCC_OscConfig+0x3b2>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800315e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003166:	f013 0f02 	tst.w	r3, #2
 800316a:	d13e      	bne.n	80031ea <HAL_RCC_OscConfig+0x3be>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800316c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003170:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 800317c:	f7ff f872 	bl	8002264 <HAL_GetTick>
 8003180:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003182:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8003186:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800318a:	f013 0f02 	tst.w	r3, #2
 800318e:	d12c      	bne.n	80031ea <HAL_RCC_OscConfig+0x3be>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003190:	f7ff f868 	bl	8002264 <HAL_GetTick>
 8003194:	1b40      	subs	r0, r0, r5
 8003196:	2802      	cmp	r0, #2
 8003198:	d9f5      	bls.n	8003186 <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 800319a:	2003      	movs	r0, #3
 800319c:	e253      	b.n	8003646 <HAL_RCC_OscConfig+0x81a>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800319e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031a2:	6853      	ldr	r3, [r2, #4]
 80031a4:	6921      	ldr	r1, [r4, #16]
 80031a6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80031aa:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80031ae:	6053      	str	r3, [r2, #4]
}
 80031b0:	e7b9      	b.n	8003126 <HAL_RCC_OscConfig+0x2fa>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80031b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031b6:	6813      	ldr	r3, [r2, #0]
 80031b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031bc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80031be:	f7ff f851 	bl	8002264 <HAL_GetTick>
 80031c2:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80031c4:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80031c8:	6833      	ldr	r3, [r6, #0]
 80031ca:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80031ce:	d0aa      	beq.n	8003126 <HAL_RCC_OscConfig+0x2fa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031d0:	f7ff f848 	bl	8002264 <HAL_GetTick>
 80031d4:	1b40      	subs	r0, r0, r5
 80031d6:	2802      	cmp	r0, #2
 80031d8:	d9f6      	bls.n	80031c8 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 80031da:	2003      	movs	r0, #3
 80031dc:	e233      	b.n	8003646 <HAL_RCC_OscConfig+0x81a>
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));
 80031de:	f44f 711f 	mov.w	r1, #636	; 0x27c
 80031e2:	48a6      	ldr	r0, [pc, #664]	; (800347c <HAL_RCC_OscConfig+0x650>)
 80031e4:	f7fe fcd4 	bl	8001b90 <assert_failed>
 80031e8:	e7b9      	b.n	800315e <HAL_RCC_OscConfig+0x332>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80031ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031ee:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80031f2:	f043 0304 	orr.w	r3, r3, #4
 80031f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        tickstart = HAL_GetTick();
 80031fa:	f7ff f833 	bl	8002264 <HAL_GetTick>
 80031fe:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003200:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8003204:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8003208:	f013 0f08 	tst.w	r3, #8
 800320c:	d106      	bne.n	800321c <HAL_RCC_OscConfig+0x3f0>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800320e:	f7ff f829 	bl	8002264 <HAL_GetTick>
 8003212:	1b40      	subs	r0, r0, r5
 8003214:	2803      	cmp	r0, #3
 8003216:	d9f5      	bls.n	8003204 <HAL_RCC_OscConfig+0x3d8>
            return HAL_TIMEOUT;
 8003218:	2003      	movs	r0, #3
 800321a:	e214      	b.n	8003646 <HAL_RCC_OscConfig+0x81a>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800321c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003220:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003224:	69a1      	ldr	r1, [r4, #24]
 8003226:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800322a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800322e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003232:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003236:	f023 0301 	bic.w	r3, r3, #1
 800323a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        tickstart = HAL_GetTick();
 800323e:	f7ff f811 	bl	8002264 <HAL_GetTick>
 8003242:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003244:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8003248:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800324c:	f013 0f02 	tst.w	r3, #2
 8003250:	d066      	beq.n	8003320 <HAL_RCC_OscConfig+0x4f4>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003252:	f7ff f807 	bl	8002264 <HAL_GetTick>
 8003256:	1b40      	subs	r0, r0, r5
 8003258:	2802      	cmp	r0, #2
 800325a:	d9f5      	bls.n	8003248 <HAL_RCC_OscConfig+0x41c>
            return HAL_TIMEOUT;
 800325c:	2003      	movs	r0, #3
 800325e:	e1f2      	b.n	8003646 <HAL_RCC_OscConfig+0x81a>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003260:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003264:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003268:	f043 0301 	orr.w	r3, r3, #1
 800326c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        tickstart = HAL_GetTick();
 8003270:	f7fe fff8 	bl	8002264 <HAL_GetTick>
 8003274:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003276:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800327a:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800327e:	f013 0f02 	tst.w	r3, #2
 8003282:	d106      	bne.n	8003292 <HAL_RCC_OscConfig+0x466>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003284:	f7fe ffee 	bl	8002264 <HAL_GetTick>
 8003288:	1b40      	subs	r0, r0, r5
 800328a:	2802      	cmp	r0, #2
 800328c:	d9f5      	bls.n	800327a <HAL_RCC_OscConfig+0x44e>
            return HAL_TIMEOUT;
 800328e:	2003      	movs	r0, #3
 8003290:	e1d9      	b.n	8003646 <HAL_RCC_OscConfig+0x81a>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003292:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003296:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800329a:	f023 0304 	bic.w	r3, r3, #4
 800329e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80032a2:	4616      	mov	r6, r2
 80032a4:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80032a8:	f013 0f08 	tst.w	r3, #8
 80032ac:	d038      	beq.n	8003320 <HAL_RCC_OscConfig+0x4f4>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80032ae:	f7fe ffd9 	bl	8002264 <HAL_GetTick>
 80032b2:	1b40      	subs	r0, r0, r5
 80032b4:	2803      	cmp	r0, #3
 80032b6:	d9f5      	bls.n	80032a4 <HAL_RCC_OscConfig+0x478>
            return HAL_TIMEOUT;
 80032b8:	2003      	movs	r0, #3
 80032ba:	e1c4      	b.n	8003646 <HAL_RCC_OscConfig+0x81a>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80032bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032c0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80032c4:	f023 0304 	bic.w	r3, r3, #4
 80032c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80032cc:	f7fe ffca 	bl	8002264 <HAL_GetTick>
 80032d0:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80032d2:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80032d6:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80032da:	f013 0f08 	tst.w	r3, #8
 80032de:	d118      	bne.n	8003312 <HAL_RCC_OscConfig+0x4e6>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80032e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032e4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80032e8:	f023 0301 	bic.w	r3, r3, #1
 80032ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80032f0:	f7fe ffb8 	bl	8002264 <HAL_GetTick>
 80032f4:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80032f6:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80032fa:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80032fe:	f013 0f02 	tst.w	r3, #2
 8003302:	d00d      	beq.n	8003320 <HAL_RCC_OscConfig+0x4f4>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003304:	f7fe ffae 	bl	8002264 <HAL_GetTick>
 8003308:	1b40      	subs	r0, r0, r5
 800330a:	2802      	cmp	r0, #2
 800330c:	d9f5      	bls.n	80032fa <HAL_RCC_OscConfig+0x4ce>
          return HAL_TIMEOUT;
 800330e:	2003      	movs	r0, #3
 8003310:	e199      	b.n	8003646 <HAL_RCC_OscConfig+0x81a>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003312:	f7fe ffa7 	bl	8002264 <HAL_GetTick>
 8003316:	1b40      	subs	r0, r0, r5
 8003318:	2803      	cmp	r0, #3
 800331a:	d9dc      	bls.n	80032d6 <HAL_RCC_OscConfig+0x4aa>
          return HAL_TIMEOUT;
 800331c:	2003      	movs	r0, #3
 800331e:	e192      	b.n	8003646 <HAL_RCC_OscConfig+0x81a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003320:	6823      	ldr	r3, [r4, #0]
 8003322:	f013 0f04 	tst.w	r3, #4
 8003326:	d077      	beq.n	8003418 <HAL_RCC_OscConfig+0x5ec>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003328:	68a3      	ldr	r3, [r4, #8]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d91a      	bls.n	8003364 <HAL_RCC_OscConfig+0x538>
 800332e:	2b05      	cmp	r3, #5
 8003330:	d113      	bne.n	800335a <HAL_RCC_OscConfig+0x52e>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003332:	4b53      	ldr	r3, [pc, #332]	; (8003480 <HAL_RCC_OscConfig+0x654>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f413 7f80 	tst.w	r3, #256	; 0x100
 800333a:	d040      	beq.n	80033be <HAL_RCC_OscConfig+0x592>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800333c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003340:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003344:	f042 0204 	orr.w	r2, r2, #4
 8003348:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800334c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003350:	f042 0201 	orr.w	r2, r2, #1
 8003354:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 8003358:	e01c      	b.n	8003394 <HAL_RCC_OscConfig+0x568>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800335a:	f240 21fb 	movw	r1, #763	; 0x2fb
 800335e:	4847      	ldr	r0, [pc, #284]	; (800347c <HAL_RCC_OscConfig+0x650>)
 8003360:	f7fe fc16 	bl	8001b90 <assert_failed>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003364:	4b46      	ldr	r3, [pc, #280]	; (8003480 <HAL_RCC_OscConfig+0x654>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f413 7f80 	tst.w	r3, #256	; 0x100
 800336c:	d027      	beq.n	80033be <HAL_RCC_OscConfig+0x592>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800336e:	68a3      	ldr	r3, [r4, #8]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d035      	beq.n	80033e0 <HAL_RCC_OscConfig+0x5b4>
 8003374:	2b05      	cmp	r3, #5
 8003376:	d0e1      	beq.n	800333c <HAL_RCC_OscConfig+0x510>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003380:	f022 0201 	bic.w	r2, r2, #1
 8003384:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003388:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800338c:	f022 0204 	bic.w	r2, r2, #4
 8003390:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003394:	68a3      	ldr	r3, [r4, #8]
 8003396:	b363      	cbz	r3, 80033f2 <HAL_RCC_OscConfig+0x5c6>
      tickstart = HAL_GetTick();
 8003398:	f7fe ff64 	bl	8002264 <HAL_GetTick>
 800339c:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800339e:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a2:	f241 3788 	movw	r7, #5000	; 0x1388
 80033a6:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80033aa:	f013 0f02 	tst.w	r3, #2
 80033ae:	d133      	bne.n	8003418 <HAL_RCC_OscConfig+0x5ec>
 80033b0:	f7fe ff58 	bl	8002264 <HAL_GetTick>
 80033b4:	1b40      	subs	r0, r0, r5
 80033b6:	42b8      	cmp	r0, r7
 80033b8:	d9f5      	bls.n	80033a6 <HAL_RCC_OscConfig+0x57a>
          return HAL_TIMEOUT;
 80033ba:	2003      	movs	r0, #3
 80033bc:	e143      	b.n	8003646 <HAL_RCC_OscConfig+0x81a>
      HAL_PWR_EnableBkUpAccess();
 80033be:	f7ff fc3f 	bl	8002c40 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 80033c2:	f7fe ff4f 	bl	8002264 <HAL_GetTick>
 80033c6:	4605      	mov	r5, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033c8:	4e2d      	ldr	r6, [pc, #180]	; (8003480 <HAL_RCC_OscConfig+0x654>)
 80033ca:	6833      	ldr	r3, [r6, #0]
 80033cc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80033d0:	d1cd      	bne.n	800336e <HAL_RCC_OscConfig+0x542>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d2:	f7fe ff47 	bl	8002264 <HAL_GetTick>
 80033d6:	1b40      	subs	r0, r0, r5
 80033d8:	2802      	cmp	r0, #2
 80033da:	d9f6      	bls.n	80033ca <HAL_RCC_OscConfig+0x59e>
          return HAL_TIMEOUT;
 80033dc:	2003      	movs	r0, #3
 80033de:	e132      	b.n	8003646 <HAL_RCC_OscConfig+0x81a>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80033e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033e4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80033e8:	f043 0301 	orr.w	r3, r3, #1
 80033ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80033f0:	e7d0      	b.n	8003394 <HAL_RCC_OscConfig+0x568>
      tickstart = HAL_GetTick();
 80033f2:	f7fe ff37 	bl	8002264 <HAL_GetTick>
 80033f6:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80033f8:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fc:	f241 3788 	movw	r7, #5000	; 0x1388
 8003400:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8003404:	f013 0f02 	tst.w	r3, #2
 8003408:	d006      	beq.n	8003418 <HAL_RCC_OscConfig+0x5ec>
 800340a:	f7fe ff2b 	bl	8002264 <HAL_GetTick>
 800340e:	1b40      	subs	r0, r0, r5
 8003410:	42b8      	cmp	r0, r7
 8003412:	d9f5      	bls.n	8003400 <HAL_RCC_OscConfig+0x5d4>
          return HAL_TIMEOUT;
 8003414:	2003      	movs	r0, #3
 8003416:	e116      	b.n	8003646 <HAL_RCC_OscConfig+0x81a>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003418:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800341a:	2b02      	cmp	r3, #2
 800341c:	d832      	bhi.n	8003484 <HAL_RCC_OscConfig+0x658>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800341e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 810f 	beq.w	8003644 <HAL_RCC_OscConfig+0x818>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003426:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800342a:	6895      	ldr	r5, [r2, #8]
 800342c:	f005 050c 	and.w	r5, r5, #12
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003430:	68d6      	ldr	r6, [r2, #12]
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003432:	2b02      	cmp	r3, #2
 8003434:	d02c      	beq.n	8003490 <HAL_RCC_OscConfig+0x664>
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003436:	2d0c      	cmp	r5, #12
 8003438:	f000 8108 	beq.w	800364c <HAL_RCC_OscConfig+0x820>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800343c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003446:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	f022 0203 	bic.w	r2, r2, #3
 800344e:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003456:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8003458:	f7fe ff04 	bl	8002264 <HAL_GetTick>
 800345c:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800345e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8003462:	682b      	ldr	r3, [r5, #0]
 8003464:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003468:	f000 80e0 	beq.w	800362c <HAL_RCC_OscConfig+0x800>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346c:	f7fe fefa 	bl	8002264 <HAL_GetTick>
 8003470:	1b00      	subs	r0, r0, r4
 8003472:	2802      	cmp	r0, #2
 8003474:	d9f5      	bls.n	8003462 <HAL_RCC_OscConfig+0x636>
            return HAL_TIMEOUT;
 8003476:	2003      	movs	r0, #3
 8003478:	e0e5      	b.n	8003646 <HAL_RCC_OscConfig+0x81a>
 800347a:	bf00      	nop
 800347c:	08009b00 	.word	0x08009b00
 8003480:	58000400 	.word	0x58000400
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003484:	f240 3161 	movw	r1, #865	; 0x361
 8003488:	4871      	ldr	r0, [pc, #452]	; (8003650 <HAL_RCC_OscConfig+0x824>)
 800348a:	f7fe fb81 	bl	8001b90 <assert_failed>
 800348e:	e7c6      	b.n	800341e <HAL_RCC_OscConfig+0x5f2>
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003490:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003492:	2b03      	cmp	r3, #3
 8003494:	d842      	bhi.n	800351c <HAL_RCC_OscConfig+0x6f0>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003496:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003498:	f033 0310 	bics.w	r3, r3, #16
 800349c:	d00a      	beq.n	80034b4 <HAL_RCC_OscConfig+0x688>
 800349e:	2b20      	cmp	r3, #32
 80034a0:	d008      	beq.n	80034b4 <HAL_RCC_OscConfig+0x688>
 80034a2:	2b40      	cmp	r3, #64	; 0x40
 80034a4:	d006      	beq.n	80034b4 <HAL_RCC_OscConfig+0x688>
 80034a6:	2b60      	cmp	r3, #96	; 0x60
 80034a8:	d004      	beq.n	80034b4 <HAL_RCC_OscConfig+0x688>
 80034aa:	f240 316d 	movw	r1, #877	; 0x36d
 80034ae:	4868      	ldr	r0, [pc, #416]	; (8003650 <HAL_RCC_OscConfig+0x824>)
 80034b0:	f7fe fb6e 	bl	8001b90 <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80034b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034b6:	3b06      	subs	r3, #6
 80034b8:	2b79      	cmp	r3, #121	; 0x79
 80034ba:	d835      	bhi.n	8003528 <HAL_RCC_OscConfig+0x6fc>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80034bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80034be:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
 80034c2:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 80034c6:	d835      	bhi.n	8003534 <HAL_RCC_OscConfig+0x708>
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80034c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80034ca:	f103 437e 	add.w	r3, r3, #4261412864	; 0xfe000000
 80034ce:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80034d2:	d835      	bhi.n	8003540 <HAL_RCC_OscConfig+0x714>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80034d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034d6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80034da:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80034de:	d835      	bhi.n	800354c <HAL_RCC_OscConfig+0x720>
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e0:	f006 0303 	and.w	r3, r6, #3
 80034e4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d036      	beq.n	8003558 <HAL_RCC_OscConfig+0x72c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034ea:	2d0c      	cmp	r5, #12
 80034ec:	f000 80ac 	beq.w	8003648 <HAL_RCC_OscConfig+0x81c>
 80034f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034f4:	6813      	ldr	r3, [r2, #0]
 80034f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034fa:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 80034fc:	f7fe feb2 	bl	8002264 <HAL_GetTick>
 8003500:	4605      	mov	r5, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003502:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8003506:	6833      	ldr	r3, [r6, #0]
 8003508:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800350c:	d045      	beq.n	800359a <HAL_RCC_OscConfig+0x76e>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800350e:	f7fe fea9 	bl	8002264 <HAL_GetTick>
 8003512:	1b40      	subs	r0, r0, r5
 8003514:	2802      	cmp	r0, #2
 8003516:	d9f6      	bls.n	8003506 <HAL_RCC_OscConfig+0x6da>
                return HAL_TIMEOUT;
 8003518:	2003      	movs	r0, #3
 800351a:	e094      	b.n	8003646 <HAL_RCC_OscConfig+0x81a>
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800351c:	f44f 715b 	mov.w	r1, #876	; 0x36c
 8003520:	484b      	ldr	r0, [pc, #300]	; (8003650 <HAL_RCC_OscConfig+0x824>)
 8003522:	f7fe fb35 	bl	8001b90 <assert_failed>
 8003526:	e7b6      	b.n	8003496 <HAL_RCC_OscConfig+0x66a>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003528:	f240 316e 	movw	r1, #878	; 0x36e
 800352c:	4848      	ldr	r0, [pc, #288]	; (8003650 <HAL_RCC_OscConfig+0x824>)
 800352e:	f7fe fb2f 	bl	8001b90 <assert_failed>
 8003532:	e7c3      	b.n	80034bc <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003534:	f240 316f 	movw	r1, #879	; 0x36f
 8003538:	4845      	ldr	r0, [pc, #276]	; (8003650 <HAL_RCC_OscConfig+0x824>)
 800353a:	f7fe fb29 	bl	8001b90 <assert_failed>
 800353e:	e7c3      	b.n	80034c8 <HAL_RCC_OscConfig+0x69c>
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003540:	f44f 715c 	mov.w	r1, #880	; 0x370
 8003544:	4842      	ldr	r0, [pc, #264]	; (8003650 <HAL_RCC_OscConfig+0x824>)
 8003546:	f7fe fb23 	bl	8001b90 <assert_failed>
 800354a:	e7c3      	b.n	80034d4 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800354c:	f240 3171 	movw	r1, #881	; 0x371
 8003550:	483f      	ldr	r0, [pc, #252]	; (8003650 <HAL_RCC_OscConfig+0x824>)
 8003552:	f7fe fb1d 	bl	8001b90 <assert_failed>
 8003556:	e7c3      	b.n	80034e0 <HAL_RCC_OscConfig+0x6b4>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003558:	f006 0370 	and.w	r3, r6, #112	; 0x70
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800355e:	4293      	cmp	r3, r2
 8003560:	d1c3      	bne.n	80034ea <HAL_RCC_OscConfig+0x6be>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003562:	f3c6 2306 	ubfx	r3, r6, #8, #7
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003566:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003568:	4293      	cmp	r3, r2
 800356a:	d1be      	bne.n	80034ea <HAL_RCC_OscConfig+0x6be>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800356c:	f406 1378 	and.w	r3, r6, #4063232	; 0x3e0000
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003570:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003572:	4293      	cmp	r3, r2
 8003574:	d1b9      	bne.n	80034ea <HAL_RCC_OscConfig+0x6be>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003576:	f006 6360 	and.w	r3, r6, #234881024	; 0xe000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800357a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800357c:	4293      	cmp	r3, r2
 800357e:	d1b4      	bne.n	80034ea <HAL_RCC_OscConfig+0x6be>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003580:	f006 4660 	and.w	r6, r6, #3758096384	; 0xe0000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003584:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003586:	429e      	cmp	r6, r3
 8003588:	d1af      	bne.n	80034ea <HAL_RCC_OscConfig+0x6be>
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800358a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003594:	d02e      	beq.n	80035f4 <HAL_RCC_OscConfig+0x7c8>
  return HAL_OK;
 8003596:	2000      	movs	r0, #0
 8003598:	e055      	b.n	8003646 <HAL_RCC_OscConfig+0x81a>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800359a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800359e:	68d0      	ldr	r0, [r2, #12]
 80035a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80035a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80035a4:	430b      	orrs	r3, r1
 80035a6:	492b      	ldr	r1, [pc, #172]	; (8003654 <HAL_RCC_OscConfig+0x828>)
 80035a8:	4001      	ands	r1, r0
 80035aa:	430b      	orrs	r3, r1
 80035ac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80035ae:	430b      	orrs	r3, r1
 80035b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80035b2:	430b      	orrs	r3, r1
 80035b4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80035b6:	430b      	orrs	r3, r1
 80035b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035ba:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80035be:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80035c0:	6813      	ldr	r3, [r2, #0]
 80035c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035c6:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035c8:	68d3      	ldr	r3, [r2, #12]
 80035ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ce:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 80035d0:	f7fe fe48 	bl	8002264 <HAL_GetTick>
 80035d4:	4604      	mov	r4, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035d6:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80035da:	682b      	ldr	r3, [r5, #0]
 80035dc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80035e0:	d106      	bne.n	80035f0 <HAL_RCC_OscConfig+0x7c4>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e2:	f7fe fe3f 	bl	8002264 <HAL_GetTick>
 80035e6:	1b00      	subs	r0, r0, r4
 80035e8:	2802      	cmp	r0, #2
 80035ea:	d9f6      	bls.n	80035da <HAL_RCC_OscConfig+0x7ae>
                return HAL_TIMEOUT;
 80035ec:	2003      	movs	r0, #3
 80035ee:	e02a      	b.n	8003646 <HAL_RCC_OscConfig+0x81a>
  return HAL_OK;
 80035f0:	2000      	movs	r0, #0
 80035f2:	e028      	b.n	8003646 <HAL_RCC_OscConfig+0x81a>
 80035f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80035fe:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003600:	68da      	ldr	r2, [r3, #12]
 8003602:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003606:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8003608:	f7fe fe2c 	bl	8002264 <HAL_GetTick>
 800360c:	4604      	mov	r4, r0
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800360e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8003612:	682b      	ldr	r3, [r5, #0]
 8003614:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003618:	d106      	bne.n	8003628 <HAL_RCC_OscConfig+0x7fc>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800361a:	f7fe fe23 	bl	8002264 <HAL_GetTick>
 800361e:	1b03      	subs	r3, r0, r4
 8003620:	2b02      	cmp	r3, #2
 8003622:	d9f6      	bls.n	8003612 <HAL_RCC_OscConfig+0x7e6>
              return HAL_TIMEOUT;
 8003624:	2003      	movs	r0, #3
 8003626:	e00e      	b.n	8003646 <HAL_RCC_OscConfig+0x81a>
  return HAL_OK;
 8003628:	2000      	movs	r0, #0
 800362a:	e00c      	b.n	8003646 <HAL_RCC_OscConfig+0x81a>
 800362c:	2000      	movs	r0, #0
 800362e:	e00a      	b.n	8003646 <HAL_RCC_OscConfig+0x81a>
    return HAL_ERROR;
 8003630:	2001      	movs	r0, #1
}
 8003632:	4770      	bx	lr
        return HAL_ERROR;
 8003634:	2001      	movs	r0, #1
 8003636:	e006      	b.n	8003646 <HAL_RCC_OscConfig+0x81a>
            return HAL_ERROR;
 8003638:	2001      	movs	r0, #1
 800363a:	e004      	b.n	8003646 <HAL_RCC_OscConfig+0x81a>
        return HAL_ERROR;
 800363c:	2001      	movs	r0, #1
 800363e:	e002      	b.n	8003646 <HAL_RCC_OscConfig+0x81a>
        return HAL_ERROR;
 8003640:	2001      	movs	r0, #1
 8003642:	e000      	b.n	8003646 <HAL_RCC_OscConfig+0x81a>
  return HAL_OK;
 8003644:	2000      	movs	r0, #0
}
 8003646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8003648:	2001      	movs	r0, #1
 800364a:	e7fc      	b.n	8003646 <HAL_RCC_OscConfig+0x81a>
        return HAL_ERROR;
 800364c:	2001      	movs	r0, #1
 800364e:	e7fa      	b.n	8003646 <HAL_RCC_OscConfig+0x81a>
 8003650:	08009b00 	.word	0x08009b00
 8003654:	11c1808c 	.word	0x11c1808c

08003658 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003658:	2800      	cmp	r0, #0
 800365a:	f000 81ab 	beq.w	80039b4 <HAL_RCC_ClockConfig+0x35c>
{
 800365e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003662:	460d      	mov	r5, r1
 8003664:	4604      	mov	r4, r0
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003666:	6803      	ldr	r3, [r0, #0]
 8003668:	3b01      	subs	r3, #1
 800366a:	2b6e      	cmp	r3, #110	; 0x6e
 800366c:	d83c      	bhi.n	80036e8 <HAL_RCC_ClockConfig+0x90>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800366e:	2d03      	cmp	r5, #3
 8003670:	d840      	bhi.n	80036f4 <HAL_RCC_ClockConfig+0x9c>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003672:	4bbb      	ldr	r3, [pc, #748]	; (8003960 <HAL_RCC_ClockConfig+0x308>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	42ab      	cmp	r3, r5
 800367c:	d340      	bcc.n	8003700 <HAL_RCC_ClockConfig+0xa8>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800367e:	6823      	ldr	r3, [r4, #0]
 8003680:	f013 0f02 	tst.w	r3, #2
 8003684:	d052      	beq.n	800372c <HAL_RCC_ClockConfig+0xd4>
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
 8003686:	68a3      	ldr	r3, [r4, #8]
 8003688:	f033 0210 	bics.w	r2, r3, #16
 800368c:	d014      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x60>
 800368e:	2a80      	cmp	r2, #128	; 0x80
 8003690:	d012      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x60>
 8003692:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003696:	2920      	cmp	r1, #32
 8003698:	d00e      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x60>
 800369a:	f023 0320 	bic.w	r3, r3, #32
 800369e:	2b50      	cmp	r3, #80	; 0x50
 80036a0:	d00a      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x60>
 80036a2:	2aa0      	cmp	r2, #160	; 0xa0
 80036a4:	d008      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x60>
 80036a6:	2ac0      	cmp	r2, #192	; 0xc0
 80036a8:	d006      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x60>
 80036aa:	2ae0      	cmp	r2, #224	; 0xe0
 80036ac:	d004      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x60>
 80036ae:	f240 4149 	movw	r1, #1097	; 0x449
 80036b2:	48ac      	ldr	r0, [pc, #688]	; (8003964 <HAL_RCC_ClockConfig+0x30c>)
 80036b4:	f7fe fa6c 	bl	8001b90 <assert_failed>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80036b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036bc:	6893      	ldr	r3, [r2, #8]
 80036be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036c2:	68a1      	ldr	r1, [r4, #8]
 80036c4:	430b      	orrs	r3, r1
 80036c6:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80036c8:	f7fe fdcc 	bl	8002264 <HAL_GetTick>
 80036cc:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80036ce:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80036d8:	d128      	bne.n	800372c <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80036da:	f7fe fdc3 	bl	8002264 <HAL_GetTick>
 80036de:	1b80      	subs	r0, r0, r6
 80036e0:	2802      	cmp	r0, #2
 80036e2:	d9f6      	bls.n	80036d2 <HAL_RCC_ClockConfig+0x7a>
        return HAL_TIMEOUT;
 80036e4:	2003      	movs	r0, #3
 80036e6:	e163      	b.n	80039b0 <HAL_RCC_ClockConfig+0x358>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80036e8:	f240 412b 	movw	r1, #1067	; 0x42b
 80036ec:	489d      	ldr	r0, [pc, #628]	; (8003964 <HAL_RCC_ClockConfig+0x30c>)
 80036ee:	f7fe fa4f 	bl	8001b90 <assert_failed>
 80036f2:	e7bc      	b.n	800366e <HAL_RCC_ClockConfig+0x16>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80036f4:	f240 412c 	movw	r1, #1068	; 0x42c
 80036f8:	489a      	ldr	r0, [pc, #616]	; (8003964 <HAL_RCC_ClockConfig+0x30c>)
 80036fa:	f7fe fa49 	bl	8001b90 <assert_failed>
 80036fe:	e7b8      	b.n	8003672 <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003700:	4a97      	ldr	r2, [pc, #604]	; (8003960 <HAL_RCC_ClockConfig+0x308>)
 8003702:	6813      	ldr	r3, [r2, #0]
 8003704:	f023 0307 	bic.w	r3, r3, #7
 8003708:	432b      	orrs	r3, r5
 800370a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800370c:	f7fe fdaa 	bl	8002264 <HAL_GetTick>
 8003710:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003712:	4f93      	ldr	r7, [pc, #588]	; (8003960 <HAL_RCC_ClockConfig+0x308>)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	42ab      	cmp	r3, r5
 800371c:	d0af      	beq.n	800367e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800371e:	f7fe fda1 	bl	8002264 <HAL_GetTick>
 8003722:	1b80      	subs	r0, r0, r6
 8003724:	2802      	cmp	r0, #2
 8003726:	d9f5      	bls.n	8003714 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8003728:	2003      	movs	r0, #3
 800372a:	e141      	b.n	80039b0 <HAL_RCC_ClockConfig+0x358>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800372c:	6823      	ldr	r3, [r4, #0]
 800372e:	f013 0f20 	tst.w	r3, #32
 8003732:	d033      	beq.n	800379c <HAL_RCC_ClockConfig+0x144>
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
 8003734:	6963      	ldr	r3, [r4, #20]
 8003736:	f033 0210 	bics.w	r2, r3, #16
 800373a:	d014      	beq.n	8003766 <HAL_RCC_ClockConfig+0x10e>
 800373c:	2a80      	cmp	r2, #128	; 0x80
 800373e:	d012      	beq.n	8003766 <HAL_RCC_ClockConfig+0x10e>
 8003740:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003744:	2920      	cmp	r1, #32
 8003746:	d00e      	beq.n	8003766 <HAL_RCC_ClockConfig+0x10e>
 8003748:	f023 0320 	bic.w	r3, r3, #32
 800374c:	2b50      	cmp	r3, #80	; 0x50
 800374e:	d00a      	beq.n	8003766 <HAL_RCC_ClockConfig+0x10e>
 8003750:	2aa0      	cmp	r2, #160	; 0xa0
 8003752:	d008      	beq.n	8003766 <HAL_RCC_ClockConfig+0x10e>
 8003754:	2ac0      	cmp	r2, #192	; 0xc0
 8003756:	d006      	beq.n	8003766 <HAL_RCC_ClockConfig+0x10e>
 8003758:	2ae0      	cmp	r2, #224	; 0xe0
 800375a:	d004      	beq.n	8003766 <HAL_RCC_ClockConfig+0x10e>
 800375c:	f240 415a 	movw	r1, #1114	; 0x45a
 8003760:	4880      	ldr	r0, [pc, #512]	; (8003964 <HAL_RCC_ClockConfig+0x30c>)
 8003762:	f7fe fa15 	bl	8001b90 <assert_failed>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003766:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800376a:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 800376e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003772:	6961      	ldr	r1, [r4, #20]
 8003774:	430b      	orrs	r3, r1
 8003776:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 800377a:	f7fe fd73 	bl	8002264 <HAL_GetTick>
 800377e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003780:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8003784:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003788:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800378c:	d106      	bne.n	800379c <HAL_RCC_ClockConfig+0x144>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800378e:	f7fe fd69 	bl	8002264 <HAL_GetTick>
 8003792:	1b80      	subs	r0, r0, r6
 8003794:	2802      	cmp	r0, #2
 8003796:	d9f5      	bls.n	8003784 <HAL_RCC_ClockConfig+0x12c>
        return HAL_TIMEOUT;
 8003798:	2003      	movs	r0, #3
 800379a:	e109      	b.n	80039b0 <HAL_RCC_ClockConfig+0x358>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800379c:	6823      	ldr	r3, [r4, #0]
 800379e:	f013 0f40 	tst.w	r3, #64	; 0x40
 80037a2:	d034      	beq.n	800380e <HAL_RCC_ClockConfig+0x1b6>
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
 80037a4:	69a3      	ldr	r3, [r4, #24]
 80037a6:	f033 0210 	bics.w	r2, r3, #16
 80037aa:	d014      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x17e>
 80037ac:	2a80      	cmp	r2, #128	; 0x80
 80037ae:	d012      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x17e>
 80037b0:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80037b4:	2920      	cmp	r1, #32
 80037b6:	d00e      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x17e>
 80037b8:	f023 0320 	bic.w	r3, r3, #32
 80037bc:	2b50      	cmp	r3, #80	; 0x50
 80037be:	d00a      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x17e>
 80037c0:	2aa0      	cmp	r2, #160	; 0xa0
 80037c2:	d008      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x17e>
 80037c4:	2ac0      	cmp	r2, #192	; 0xc0
 80037c6:	d006      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x17e>
 80037c8:	2ae0      	cmp	r2, #224	; 0xe0
 80037ca:	d004      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x17e>
 80037cc:	f240 416a 	movw	r1, #1130	; 0x46a
 80037d0:	4864      	ldr	r0, [pc, #400]	; (8003964 <HAL_RCC_ClockConfig+0x30c>)
 80037d2:	f7fe f9dd 	bl	8001b90 <assert_failed>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80037d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037da:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 80037de:	69a1      	ldr	r1, [r4, #24]
 80037e0:	f023 030f 	bic.w	r3, r3, #15
 80037e4:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 80037e8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 80037ec:	f7fe fd3a 	bl	8002264 <HAL_GetTick>
 80037f0:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80037f2:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80037f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80037fa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80037fe:	d106      	bne.n	800380e <HAL_RCC_ClockConfig+0x1b6>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003800:	f7fe fd30 	bl	8002264 <HAL_GetTick>
 8003804:	1b80      	subs	r0, r0, r6
 8003806:	2802      	cmp	r0, #2
 8003808:	d9f5      	bls.n	80037f6 <HAL_RCC_ClockConfig+0x19e>
        return HAL_TIMEOUT;
 800380a:	2003      	movs	r0, #3
 800380c:	e0d0      	b.n	80039b0 <HAL_RCC_ClockConfig+0x358>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800380e:	6823      	ldr	r3, [r4, #0]
 8003810:	f013 0f04 	tst.w	r3, #4
 8003814:	d028      	beq.n	8003868 <HAL_RCC_ClockConfig+0x210>
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
 8003816:	68e3      	ldr	r3, [r4, #12]
 8003818:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800381c:	d00c      	beq.n	8003838 <HAL_RCC_ClockConfig+0x1e0>
 800381e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003822:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8003826:	d007      	beq.n	8003838 <HAL_RCC_ClockConfig+0x1e0>
 8003828:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800382c:	d004      	beq.n	8003838 <HAL_RCC_ClockConfig+0x1e0>
 800382e:	f240 417b 	movw	r1, #1147	; 0x47b
 8003832:	484c      	ldr	r0, [pc, #304]	; (8003964 <HAL_RCC_ClockConfig+0x30c>)
 8003834:	f7fe f9ac 	bl	8001b90 <assert_failed>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003838:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800383c:	6893      	ldr	r3, [r2, #8]
 800383e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003842:	68e1      	ldr	r1, [r4, #12]
 8003844:	430b      	orrs	r3, r1
 8003846:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003848:	f7fe fd0c 	bl	8002264 <HAL_GetTick>
 800384c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800384e:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003858:	d106      	bne.n	8003868 <HAL_RCC_ClockConfig+0x210>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800385a:	f7fe fd03 	bl	8002264 <HAL_GetTick>
 800385e:	1b80      	subs	r0, r0, r6
 8003860:	2802      	cmp	r0, #2
 8003862:	d9f6      	bls.n	8003852 <HAL_RCC_ClockConfig+0x1fa>
        return HAL_TIMEOUT;
 8003864:	2003      	movs	r0, #3
 8003866:	e0a3      	b.n	80039b0 <HAL_RCC_ClockConfig+0x358>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003868:	6823      	ldr	r3, [r4, #0]
 800386a:	f013 0f08 	tst.w	r3, #8
 800386e:	d029      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x26c>
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
 8003870:	6923      	ldr	r3, [r4, #16]
 8003872:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8003876:	d00c      	beq.n	8003892 <HAL_RCC_ClockConfig+0x23a>
 8003878:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800387c:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8003880:	d007      	beq.n	8003892 <HAL_RCC_ClockConfig+0x23a>
 8003882:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003886:	d004      	beq.n	8003892 <HAL_RCC_ClockConfig+0x23a>
 8003888:	f240 418c 	movw	r1, #1164	; 0x48c
 800388c:	4835      	ldr	r0, [pc, #212]	; (8003964 <HAL_RCC_ClockConfig+0x30c>)
 800388e:	f7fe f97f 	bl	8001b90 <assert_failed>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003892:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003896:	6893      	ldr	r3, [r2, #8]
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003898:	6921      	ldr	r1, [r4, #16]
 800389a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800389e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80038a2:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80038a4:	f7fe fcde 	bl	8002264 <HAL_GetTick>
 80038a8:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80038aa:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80038b4:	d106      	bne.n	80038c4 <HAL_RCC_ClockConfig+0x26c>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80038b6:	f7fe fcd5 	bl	8002264 <HAL_GetTick>
 80038ba:	1b80      	subs	r0, r0, r6
 80038bc:	2802      	cmp	r0, #2
 80038be:	d9f6      	bls.n	80038ae <HAL_RCC_ClockConfig+0x256>
        return HAL_TIMEOUT;
 80038c0:	2003      	movs	r0, #3
 80038c2:	e075      	b.n	80039b0 <HAL_RCC_ClockConfig+0x358>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	f013 0f01 	tst.w	r3, #1
 80038ca:	d04d      	beq.n	8003968 <HAL_RCC_ClockConfig+0x310>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80038cc:	6863      	ldr	r3, [r4, #4]
 80038ce:	2b03      	cmp	r3, #3
 80038d0:	d80d      	bhi.n	80038ee <HAL_RCC_ClockConfig+0x296>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038d2:	6863      	ldr	r3, [r4, #4]
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d010      	beq.n	80038fa <HAL_RCC_ClockConfig+0x2a2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038d8:	2b03      	cmp	r3, #3
 80038da:	d016      	beq.n	800390a <HAL_RCC_ClockConfig+0x2b2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038dc:	b9eb      	cbnz	r3, 800391a <HAL_RCC_ClockConfig+0x2c2>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80038de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038e2:	6812      	ldr	r2, [r2, #0]
 80038e4:	f012 0f02 	tst.w	r2, #2
 80038e8:	d11d      	bne.n	8003926 <HAL_RCC_ClockConfig+0x2ce>
        return HAL_ERROR;
 80038ea:	2001      	movs	r0, #1
 80038ec:	e060      	b.n	80039b0 <HAL_RCC_ClockConfig+0x358>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80038ee:	f240 419d 	movw	r1, #1181	; 0x49d
 80038f2:	481c      	ldr	r0, [pc, #112]	; (8003964 <HAL_RCC_ClockConfig+0x30c>)
 80038f4:	f7fe f94c 	bl	8001b90 <assert_failed>
 80038f8:	e7eb      	b.n	80038d2 <HAL_RCC_ClockConfig+0x27a>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80038fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038fe:	6812      	ldr	r2, [r2, #0]
 8003900:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003904:	d10f      	bne.n	8003926 <HAL_RCC_ClockConfig+0x2ce>
        return HAL_ERROR;
 8003906:	2001      	movs	r0, #1
 8003908:	e052      	b.n	80039b0 <HAL_RCC_ClockConfig+0x358>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800390a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003914:	d107      	bne.n	8003926 <HAL_RCC_ClockConfig+0x2ce>
        return HAL_ERROR;
 8003916:	2001      	movs	r0, #1
 8003918:	e04a      	b.n	80039b0 <HAL_RCC_ClockConfig+0x358>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800391a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800391e:	6812      	ldr	r2, [r2, #0]
 8003920:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003924:	d048      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x360>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003926:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800392a:	688a      	ldr	r2, [r1, #8]
 800392c:	f022 0203 	bic.w	r2, r2, #3
 8003930:	4313      	orrs	r3, r2
 8003932:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003934:	f7fe fc96 	bl	8002264 <HAL_GetTick>
 8003938:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800393a:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800393e:	f241 3888 	movw	r8, #5000	; 0x1388
 8003942:	68bb      	ldr	r3, [r7, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003944:	6862      	ldr	r2, [r4, #4]
 8003946:	f003 030c 	and.w	r3, r3, #12
 800394a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800394e:	d00b      	beq.n	8003968 <HAL_RCC_ClockConfig+0x310>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003950:	f7fe fc88 	bl	8002264 <HAL_GetTick>
 8003954:	1b80      	subs	r0, r0, r6
 8003956:	4540      	cmp	r0, r8
 8003958:	d9f3      	bls.n	8003942 <HAL_RCC_ClockConfig+0x2ea>
        return HAL_TIMEOUT;
 800395a:	2003      	movs	r0, #3
 800395c:	e028      	b.n	80039b0 <HAL_RCC_ClockConfig+0x358>
 800395e:	bf00      	nop
 8003960:	58004000 	.word	0x58004000
 8003964:	08009b00 	.word	0x08009b00
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003968:	4b14      	ldr	r3, [pc, #80]	; (80039bc <HAL_RCC_ClockConfig+0x364>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	42ab      	cmp	r3, r5
 8003972:	d915      	bls.n	80039a0 <HAL_RCC_ClockConfig+0x348>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003974:	4a11      	ldr	r2, [pc, #68]	; (80039bc <HAL_RCC_ClockConfig+0x364>)
 8003976:	6813      	ldr	r3, [r2, #0]
 8003978:	f023 0307 	bic.w	r3, r3, #7
 800397c:	432b      	orrs	r3, r5
 800397e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003980:	f7fe fc70 	bl	8002264 <HAL_GetTick>
 8003984:	4604      	mov	r4, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003986:	4e0d      	ldr	r6, [pc, #52]	; (80039bc <HAL_RCC_ClockConfig+0x364>)
 8003988:	6833      	ldr	r3, [r6, #0]
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	42ab      	cmp	r3, r5
 8003990:	d006      	beq.n	80039a0 <HAL_RCC_ClockConfig+0x348>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003992:	f7fe fc67 	bl	8002264 <HAL_GetTick>
 8003996:	1b00      	subs	r0, r0, r4
 8003998:	2802      	cmp	r0, #2
 800399a:	d9f5      	bls.n	8003988 <HAL_RCC_ClockConfig+0x330>
        return HAL_TIMEOUT;
 800399c:	2003      	movs	r0, #3
 800399e:	e007      	b.n	80039b0 <HAL_RCC_ClockConfig+0x358>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80039a0:	f7ff fa34 	bl	8002e0c <HAL_RCC_GetHCLKFreq>
 80039a4:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <HAL_RCC_ClockConfig+0x368>)
 80039a6:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(HAL_GetTickPrio());
 80039a8:	f7fe fc62 	bl	8002270 <HAL_GetTickPrio>
 80039ac:	f7fe fc10 	bl	80021d0 <HAL_InitTick>
}
 80039b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80039b4:	2001      	movs	r0, #1
}
 80039b6:	4770      	bx	lr
        return HAL_ERROR;
 80039b8:	2001      	movs	r0, #1
 80039ba:	e7f9      	b.n	80039b0 <HAL_RCC_ClockConfig+0x358>
 80039bc:	58004000 	.word	0x58004000
 80039c0:	20000004 	.word	0x20000004

080039c4 <HAL_RCC_GetPCLK1Freq>:
{
 80039c4:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80039c6:	f7ff fa21 	bl	8002e0c <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80039ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80039d4:	4a03      	ldr	r2, [pc, #12]	; (80039e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039da:	f003 031f 	and.w	r3, r3, #31
}
 80039de:	40d8      	lsrs	r0, r3
 80039e0:	bd08      	pop	{r3, pc}
 80039e2:	bf00      	nop
 80039e4:	080099b4 	.word	0x080099b4

080039e8 <HAL_RCC_GetPCLK2Freq>:
{
 80039e8:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80039ea:	f7ff fa0f 	bl	8002e0c <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80039ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80039f8:	4a03      	ldr	r2, [pc, #12]	; (8003a08 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039fe:	f003 031f 	and.w	r3, r3, #31
}
 8003a02:	40d8      	lsrs	r0, r3
 8003a04:	bd08      	pop	{r3, pc}
 8003a06:	bf00      	nop
 8003a08:	080099b4 	.word	0x080099b4

08003a0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a0e:	4604      	mov	r4, r0
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a10:	6803      	ldr	r3, [r0, #0]
 8003a12:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003a16:	d053      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a1c:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 8003a20:	f405 7540 	and.w	r5, r5, #768	; 0x300
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003a24:	6a03      	ldr	r3, [r0, #32]
 8003a26:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8003a2a:	d006      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x2e>
 8003a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a30:	d003      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x2e>
 8003a32:	21d4      	movs	r1, #212	; 0xd4
 8003a34:	48c4      	ldr	r0, [pc, #784]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a36:	f7fe f8ab 	bl	8001b90 <assert_failed>

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003a3a:	6a23      	ldr	r3, [r4, #32]
 8003a3c:	42ab      	cmp	r3, r5
 8003a3e:	d101      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x38>
      status = ret;
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a40:	2500      	movs	r5, #0
 8003a42:	e03e      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      HAL_PWR_EnableBkUpAccess();
 8003a44:	f7ff f8fc 	bl	8002c40 <HAL_PWR_EnableBkUpAccess>
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003a48:	b955      	cbnz	r5, 8003a60 <HAL_RCCEx_PeriphCLKConfig+0x54>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003a4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a4e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a56:	6a21      	ldr	r1, [r4, #32]
 8003a58:	430b      	orrs	r3, r1
 8003a5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003a5e:	e030      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a64:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003a68:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8003a6c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003a70:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003a74:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8003a78:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003a7c:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003a80:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003a84:	6a21      	ldr	r1, [r4, #32]
 8003a86:	430a      	orrs	r2, r1
        LL_RCC_WriteReg(BDCR, bdcr);
 8003a88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a90:	f013 0f01 	tst.w	r3, #1
 8003a94:	f000 811a 	beq.w	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x2c0>
          tickstart = HAL_GetTick();
 8003a98:	f7fe fbe4 	bl	8002264 <HAL_GetTick>
 8003a9c:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003a9e:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa2:	f241 3788 	movw	r7, #5000	; 0x1388
 8003aa6:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8003aaa:	f013 0f02 	tst.w	r3, #2
 8003aae:	f040 810f 	bne.w	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8003ab2:	f7fe fbd7 	bl	8002264 <HAL_GetTick>
 8003ab6:	1b40      	subs	r0, r0, r5
 8003ab8:	42b8      	cmp	r0, r7
 8003aba:	d9f4      	bls.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
              ret = HAL_TIMEOUT;
 8003abc:	2503      	movs	r5, #3
 8003abe:	e000      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003ac0:	2500      	movs	r5, #0
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ac2:	6823      	ldr	r3, [r4, #0]
 8003ac4:	f013 0f01 	tst.w	r3, #1
 8003ac8:	d011      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8003aca:	6863      	ldr	r3, [r4, #4]
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	d904      	bls.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003ad0:	f44f 7189 	mov.w	r1, #274	; 0x112
 8003ad4:	489c      	ldr	r0, [pc, #624]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ad6:	f7fe f85b 	bl	8001b90 <assert_failed>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003ada:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ade:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003ae2:	f023 0303 	bic.w	r3, r3, #3
 8003ae6:	6861      	ldr	r1, [r4, #4]
 8003ae8:	430b      	orrs	r3, r1
 8003aea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003aee:	6823      	ldr	r3, [r4, #0]
 8003af0:	f013 0f02 	tst.w	r3, #2
 8003af4:	d011      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8003af6:	68a3      	ldr	r3, [r4, #8]
 8003af8:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8003afc:	d003      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003afe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b02:	f040 80e7 	bne.w	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003b06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b0a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003b0e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003b12:	68a1      	ldr	r1, [r4, #8]
 8003b14:	430b      	orrs	r3, r1
 8003b16:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b1a:	6823      	ldr	r3, [r4, #0]
 8003b1c:	f013 0f10 	tst.w	r3, #16
 8003b20:	d01a      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8003b22:	6923      	ldr	r3, [r4, #16]
 8003b24:	f023 0304 	bic.w	r3, r3, #4
 8003b28:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b2c:	d007      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x132>
 8003b2e:	4a87      	ldr	r2, [pc, #540]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d004      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x132>
 8003b34:	f240 1127 	movw	r1, #295	; 0x127
 8003b38:	4883      	ldr	r0, [pc, #524]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b3a:	f7fe f829 	bl	8001b90 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b3e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003b40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b44:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003b48:	0c02      	lsrs	r2, r0, #16
 8003b4a:	0412      	lsls	r2, r2, #16
 8003b4c:	ea23 0302 	bic.w	r3, r3, r2
 8003b50:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b58:	6823      	ldr	r3, [r4, #0]
 8003b5a:	f013 0f20 	tst.w	r3, #32
 8003b5e:	d01a      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x18a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8003b60:	6963      	ldr	r3, [r4, #20]
 8003b62:	f023 0310 	bic.w	r3, r3, #16
 8003b66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b6a:	d007      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x170>
 8003b6c:	4a78      	ldr	r2, [pc, #480]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d004      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x170>
 8003b72:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8003b76:	4874      	ldr	r0, [pc, #464]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b78:	f7fe f80a 	bl	8001b90 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b7c:	6960      	ldr	r0, [r4, #20]
 8003b7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b82:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003b86:	0c02      	lsrs	r2, r0, #16
 8003b88:	0412      	lsls	r2, r2, #16
 8003b8a:	ea23 0302 	bic.w	r3, r3, r2
 8003b8e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b96:	6823      	ldr	r3, [r4, #0]
 8003b98:	f013 0f04 	tst.w	r3, #4
 8003b9c:	d019      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8003b9e:	68e3      	ldr	r3, [r4, #12]
 8003ba0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ba4:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8003ba8:	d003      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003baa:	4a6a      	ldr	r2, [pc, #424]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	f040 8097 	bne.w	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bb2:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003bb4:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8003bb8:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8003bbc:	0919      	lsrs	r1, r3, #4
 8003bbe:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8003bc2:	ea22 0201 	bic.w	r2, r2, r1
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bd2:	6823      	ldr	r3, [r4, #0]
 8003bd4:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003bd8:	d023      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8003bda:	69a3      	ldr	r3, [r4, #24]
 8003bdc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003be0:	f1b2 5fc0 	cmp.w	r2, #402653184	; 0x18000000
 8003be4:	f000 8085 	beq.w	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8003be8:	b173      	cbz	r3, 8003c08 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8003bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bee:	d00b      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8003bf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bf4:	d008      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8003bf6:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003bfa:	4853      	ldr	r0, [pc, #332]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bfc:	f7fd ffc8 	bl	8001b90 <assert_failed>

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c00:	69a3      	ldr	r3, [r4, #24]
 8003c02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c06:	d171      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003c08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c0c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003c10:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c1a:	69a3      	ldr	r3, [r4, #24]
 8003c1c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003c20:	d079      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x30a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c22:	6823      	ldr	r3, [r4, #0]
 8003c24:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003c28:	d019      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8003c2a:	69e3      	ldr	r3, [r4, #28]
 8003c2c:	f033 5380 	bics.w	r3, r3, #268435456	; 0x10000000
 8003c30:	d007      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8003c32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c36:	d004      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8003c38:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8003c3c:	4842      	ldr	r0, [pc, #264]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c3e:	f7fd ffa7 	bl	8001b90 <assert_failed>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003c42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c46:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003c4a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003c4e:	69e1      	ldr	r1, [r4, #28]
 8003c50:	430b      	orrs	r3, r1
 8003c52:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003c56:	69e3      	ldr	r3, [r4, #28]
 8003c58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c5c:	d062      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x318>
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003c64:	d010      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));
 8003c66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c68:	f433 4280 	bics.w	r2, r3, #16384	; 0x4000
 8003c6c:	d002      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8003c6e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c72:	d15c      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x322>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003c74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c78:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003c7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003c80:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003c82:	430b      	orrs	r3, r1
 8003c84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003c88:	6823      	ldr	r3, [r4, #0]
 8003c8a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003c8e:	d01b      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
 8003c90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c92:	f033 0310 	bics.w	r3, r3, #16
 8003c96:	d006      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8003c98:	2b20      	cmp	r3, #32
 8003c9a:	d004      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8003c9c:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8003ca0:	4829      	ldr	r0, [pc, #164]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ca2:	f7fd ff75 	bl	8001b90 <assert_failed>
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));
 8003ca6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d846      	bhi.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x32e>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003cac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cb0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003cb2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003cb6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003cbc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003cbe:	f023 0303 	bic.w	r3, r3, #3
 8003cc2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003cc4:	430b      	orrs	r3, r1
 8003cc6:	6253      	str	r3, [r2, #36]	; 0x24
  }
#endif


  return status;
}
 8003cc8:	4628      	mov	r0, r5
 8003cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003ccc:	2500      	movs	r5, #0
 8003cce:	e6f8      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
 8003cd0:	2500      	movs	r5, #0
 8003cd2:	e6f6      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8003cd4:	f240 111d 	movw	r1, #285	; 0x11d
 8003cd8:	481b      	ldr	r0, [pc, #108]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cda:	f7fd ff59 	bl	8001b90 <assert_failed>
 8003cde:	e712      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8003ce0:	f44f 719b 	mov.w	r1, #310	; 0x136
 8003ce4:	4818      	ldr	r0, [pc, #96]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ce6:	f7fd ff53 	bl	8001b90 <assert_failed>
 8003cea:	e762      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cec:	f033 4280 	bics.w	r2, r3, #1073741824	; 0x40000000
 8003cf0:	d08a      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003cf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cf6:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8003cfa:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8003cfe:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003d02:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8003d06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d0a:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8003d0e:	430b      	orrs	r3, r1
 8003d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8003d14:	e781      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x20e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003d16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d1a:	68d3      	ldr	r3, [r2, #12]
 8003d1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d20:	60d3      	str	r3, [r2, #12]
 8003d22:	e77e      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x216>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d24:	68d3      	ldr	r3, [r2, #12]
 8003d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d2a:	60d3      	str	r3, [r2, #12]
 8003d2c:	e797      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x252>
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));
 8003d2e:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8003d32:	4805      	ldr	r0, [pc, #20]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d34:	f7fd ff2c 	bl	8001b90 <assert_failed>
 8003d38:	e79c      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x268>
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));
 8003d3a:	f240 11a3 	movw	r1, #419	; 0x1a3
 8003d3e:	4802      	ldr	r0, [pc, #8]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d40:	f7fd ff26 	bl	8001b90 <assert_failed>
 8003d44:	e7b2      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8003d46:	bf00      	nop
 8003d48:	08009b38 	.word	0x08009b38
 8003d4c:	000c0008 	.word	0x000c0008
 8003d50:	00300020 	.word	0x00300020
 8003d54:	00030200 	.word	0x00030200

08003d58 <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 8003d58:	b510      	push	{r4, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus backupchanged;

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));
 8003d5e:	f030 7300 	bics.w	r3, r0, #33554432	; 0x2000000
 8003d62:	d004      	beq.n	8003d6e <HAL_RCCEx_EnableLSCO+0x16>
 8003d64:	f44f 61b6 	mov.w	r1, #1456	; 0x5b0
 8003d68:	481f      	ldr	r0, [pc, #124]	; (8003de8 <HAL_RCCEx_EnableLSCO+0x90>)
 8003d6a:	f7fd ff11 	bl	8001b90 <assert_failed>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d74:	f042 0201 	orr.w	r2, r2, #1
 8003d78:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8003d82:	9b00      	ldr	r3, [sp, #0]

  /* LSCO Pin Clock Enable */
  __LSCO1_CLK_ENABLE();

  /* Configure the LSCO pin in analog mode */
  GPIO_InitStruct.Pin   = LSCO1_PIN;
 8003d84:	2304      	movs	r3, #4
 8003d86:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8003d88:	2302      	movs	r3, #2
 8003d8a:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8003d90:	2300      	movs	r3, #0
 8003d92:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_LSCO;
 8003d94:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(LSCO1_GPIO_PORT, &GPIO_InitStruct);
 8003d96:	a901      	add	r1, sp, #4
 8003d98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d9c:	f7fe fd98 	bl	80028d0 <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003da0:	4b12      	ldr	r3, [pc, #72]	; (8003dec <HAL_RCCEx_EnableLSCO+0x94>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003da8:	d00d      	beq.n	8003dc6 <HAL_RCCEx_EnableLSCO+0x6e>
  else
  {
    backupchanged = RESET;
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 8003daa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dae:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003db2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003db6:	ea43 0004 	orr.w	r0, r3, r4
 8003dba:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8003dbe:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90

  if (backupchanged == SET)
  {
    HAL_PWR_DisableBkUpAccess();
  }
}
 8003dc2:	b006      	add	sp, #24
 8003dc4:	bd10      	pop	{r4, pc}
    HAL_PWR_EnableBkUpAccess();
 8003dc6:	f7fe ff3b 	bl	8002c40 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 8003dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dce:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8003dd2:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 8003dd6:	4320      	orrs	r0, r4
 8003dd8:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8003ddc:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
    HAL_PWR_DisableBkUpAccess();
 8003de0:	f7fe ff36 	bl	8002c50 <HAL_PWR_DisableBkUpAccess>
}
 8003de4:	e7ed      	b.n	8003dc2 <HAL_RCCEx_EnableLSCO+0x6a>
 8003de6:	bf00      	nop
 8003de8:	08009b38 	.word	0x08009b38
 8003dec:	58000400 	.word	0x58000400

08003df0 <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003df0:	b358      	cbz	r0, 8003e4a <HAL_RNG_Init+0x5a>
{
 8003df2:	b510      	push	{r4, lr}
 8003df4:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 8003df6:	6802      	ldr	r2, [r0, #0]
 8003df8:	4b15      	ldr	r3, [pc, #84]	; (8003e50 <HAL_RNG_Init+0x60>)
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d003      	beq.n	8003e06 <HAL_RNG_Init+0x16>
 8003dfe:	21a3      	movs	r1, #163	; 0xa3
 8003e00:	4814      	ldr	r0, [pc, #80]	; (8003e54 <HAL_RNG_Init+0x64>)
 8003e02:	f7fd fec5 	bl	8001b90 <assert_failed>
  assert_param(IS_RNG_CED(hrng->Init.ClockErrorDetection));
 8003e06:	6863      	ldr	r3, [r4, #4]
 8003e08:	f033 0320 	bics.w	r3, r3, #32
 8003e0c:	d003      	beq.n	8003e16 <HAL_RNG_Init+0x26>
 8003e0e:	21a4      	movs	r1, #164	; 0xa4
 8003e10:	4810      	ldr	r0, [pc, #64]	; (8003e54 <HAL_RNG_Init+0x64>)
 8003e12:	f7fd febd 	bl	8001b90 <assert_failed>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003e16:	7a63      	ldrb	r3, [r4, #9]
 8003e18:	b193      	cbz	r3, 8003e40 <HAL_RNG_Init+0x50>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	7263      	strb	r3, [r4, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8003e1e:	6822      	ldr	r2, [r4, #0]
 8003e20:	6813      	ldr	r3, [r2, #0]
 8003e22:	f023 0320 	bic.w	r3, r3, #32
 8003e26:	6861      	ldr	r1, [r4, #4]
 8003e28:	430b      	orrs	r3, r1
 8003e2a:	6013      	str	r3, [r2, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003e2c:	6822      	ldr	r2, [r4, #0]
 8003e2e:	6813      	ldr	r3, [r2, #0]
 8003e30:	f043 0304 	orr.w	r3, r3, #4
 8003e34:	6013      	str	r3, [r2, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003e36:	2301      	movs	r3, #1
 8003e38:	7263      	strb	r3, [r4, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	60e0      	str	r0, [r4, #12]

  /* Return function status */
  return HAL_OK;
}
 8003e3e:	bd10      	pop	{r4, pc}
    hrng->Lock = HAL_UNLOCKED;
 8003e40:	7223      	strb	r3, [r4, #8]
    HAL_RNG_MspInit(hrng);
 8003e42:	4620      	mov	r0, r4
 8003e44:	f7fd fec2 	bl	8001bcc <HAL_RNG_MspInit>
 8003e48:	e7e7      	b.n	8003e1a <HAL_RNG_Init+0x2a>
    return HAL_ERROR;
 8003e4a:	2001      	movs	r0, #1
}
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	58001000 	.word	0x58001000
 8003e54:	08009b74 	.word	0x08009b74

08003e58 <HAL_RNG_ReadyDataCallback>:
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8003e58:	4770      	bx	lr

08003e5a <HAL_RNG_ErrorCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8003e5a:	4770      	bx	lr

08003e5c <HAL_RNG_IRQHandler>:
{
 8003e5c:	b510      	push	{r4, lr}
 8003e5e:	4604      	mov	r4, r0
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 8003e60:	6803      	ldr	r3, [r0, #0]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	f012 0f20 	tst.w	r2, #32
 8003e68:	d01b      	beq.n	8003ea2 <HAL_RNG_IRQHandler+0x46>
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8003e6a:	2310      	movs	r3, #16
 8003e6c:	60c3      	str	r3, [r0, #12]
    hrng->State = HAL_RNG_STATE_ERROR;
 8003e6e:	2304      	movs	r3, #4
 8003e70:	7263      	strb	r3, [r4, #9]
    HAL_RNG_ErrorCallback(hrng);
 8003e72:	4620      	mov	r0, r4
 8003e74:	f7ff fff1 	bl	8003e5a <HAL_RNG_ErrorCallback>
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8003e78:	6823      	ldr	r3, [r4, #0]
 8003e7a:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8003e7e:	605a      	str	r2, [r3, #4]
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 8003e80:	6823      	ldr	r3, [r4, #0]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	f012 0f01 	tst.w	r2, #1
 8003e88:	d00a      	beq.n	8003ea0 <HAL_RNG_IRQHandler+0x44>
    __HAL_RNG_DISABLE_IT(hrng);
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	f022 0208 	bic.w	r2, r2, #8
 8003e90:	601a      	str	r2, [r3, #0]
    hrng->RandomNumber = hrng->Instance->DR;
 8003e92:	6823      	ldr	r3, [r4, #0]
 8003e94:	6899      	ldr	r1, [r3, #8]
 8003e96:	6121      	str	r1, [r4, #16]
    if (hrng->State != HAL_RNG_STATE_ERROR)
 8003e98:	7a63      	ldrb	r3, [r4, #9]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d107      	bne.n	8003eb0 <HAL_RNG_IRQHandler+0x54>
}
 8003ea0:	bd10      	pop	{r4, pc}
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003ea8:	d0ea      	beq.n	8003e80 <HAL_RNG_IRQHandler+0x24>
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8003eaa:	2308      	movs	r3, #8
 8003eac:	60c3      	str	r3, [r0, #12]
  if (rngclockerror == 1U)
 8003eae:	e7de      	b.n	8003e6e <HAL_RNG_IRQHandler+0x12>
      hrng->State = HAL_RNG_STATE_READY;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	7263      	strb	r3, [r4, #9]
      __HAL_UNLOCK(hrng);
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	7223      	strb	r3, [r4, #8]
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8003eb8:	4620      	mov	r0, r4
 8003eba:	f7ff ffcd 	bl	8003e58 <HAL_RNG_ReadyDataCallback>
}
 8003ebe:	e7ef      	b.n	8003ea0 <HAL_RNG_IRQHandler+0x44>

08003ec0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8003ec0:	b538      	push	{r3, r4, r5, lr}
 8003ec2:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));
 8003ec4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003ec8:	d048      	beq.n	8003f5c <HAL_RTC_DeactivateAlarm+0x9c>
 8003eca:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003ece:	d131      	bne.n	8003f34 <HAL_RTC_DeactivateAlarm+0x74>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ed0:	f894 3020 	ldrb.w	r3, [r4, #32]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d03f      	beq.n	8003f58 <HAL_RTC_DeactivateAlarm+0x98>
 8003ed8:	2301      	movs	r3, #1
 8003eda:	f884 3020 	strb.w	r3, [r4, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ede:	2302      	movs	r3, #2
 8003ee0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	22ca      	movs	r2, #202	; 0xca
 8003ee8:	625a      	str	r2, [r3, #36]	; 0x24
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	2253      	movs	r2, #83	; 0x53
 8003eee:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003ef0:	6822      	ldr	r2, [r4, #0]
 8003ef2:	6893      	ldr	r3, [r2, #8]
 8003ef4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ef8:	6093      	str	r3, [r2, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8003efa:	6822      	ldr	r2, [r4, #0]
 8003efc:	6893      	ldr	r3, [r2, #8]
 8003efe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f02:	6093      	str	r3, [r2, #8]

    tickstart = HAL_GetTick();
 8003f04:	f7fe f9ae 	bl	8002264 <HAL_GetTick>
 8003f08:	4605      	mov	r5, r0

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f013 0f02 	tst.w	r3, #2
 8003f12:	d115      	bne.n	8003f40 <HAL_RTC_DeactivateAlarm+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003f14:	f7fe f9a6 	bl	8002264 <HAL_GetTick>
 8003f18:	1b43      	subs	r3, r0, r5
 8003f1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f1e:	d9f4      	bls.n	8003f0a <HAL_RTC_DeactivateAlarm+0x4a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f20:	6823      	ldr	r3, [r4, #0]
 8003f22:	22ff      	movs	r2, #255	; 0xff
 8003f24:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f26:	2003      	movs	r0, #3
 8003f28:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f884 3020 	strb.w	r3, [r4, #32]

        return HAL_TIMEOUT;
 8003f32:	e00e      	b.n	8003f52 <HAL_RTC_DeactivateAlarm+0x92>
  assert_param(IS_RTC_ALARM(Alarm));
 8003f34:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003f38:	4821      	ldr	r0, [pc, #132]	; (8003fc0 <HAL_RTC_DeactivateAlarm+0x100>)
 8003f3a:	f7fd fe29 	bl	8001b90 <assert_failed>
 8003f3e:	e7c7      	b.n	8003ed0 <HAL_RTC_DeactivateAlarm+0x10>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f40:	6823      	ldr	r3, [r4, #0]
 8003f42:	22ff      	movs	r2, #255	; 0xff
 8003f44:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003f46:	2301      	movs	r3, #1
 8003f48:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	f884 0020 	strb.w	r0, [r4, #32]

  return HAL_OK;
}
 8003f52:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hrtc);
 8003f54:	2002      	movs	r0, #2
 8003f56:	e7fc      	b.n	8003f52 <HAL_RTC_DeactivateAlarm+0x92>
 8003f58:	2002      	movs	r0, #2
 8003f5a:	e7fa      	b.n	8003f52 <HAL_RTC_DeactivateAlarm+0x92>
 8003f5c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d0f7      	beq.n	8003f54 <HAL_RTC_DeactivateAlarm+0x94>
 8003f64:	2301      	movs	r3, #1
 8003f66:	f884 3020 	strb.w	r3, [r4, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f70:	6823      	ldr	r3, [r4, #0]
 8003f72:	22ca      	movs	r2, #202	; 0xca
 8003f74:	625a      	str	r2, [r3, #36]	; 0x24
 8003f76:	6823      	ldr	r3, [r4, #0]
 8003f78:	2253      	movs	r2, #83	; 0x53
 8003f7a:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003f7c:	6822      	ldr	r2, [r4, #0]
 8003f7e:	6893      	ldr	r3, [r2, #8]
 8003f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f84:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003f86:	6822      	ldr	r2, [r4, #0]
 8003f88:	6893      	ldr	r3, [r2, #8]
 8003f8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f8e:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003f90:	f7fe f968 	bl	8002264 <HAL_GetTick>
 8003f94:	4605      	mov	r5, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003f96:	6823      	ldr	r3, [r4, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	f013 0f01 	tst.w	r3, #1
 8003f9e:	d1cf      	bne.n	8003f40 <HAL_RTC_DeactivateAlarm+0x80>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003fa0:	f7fe f960 	bl	8002264 <HAL_GetTick>
 8003fa4:	1b40      	subs	r0, r0, r5
 8003fa6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003faa:	d9f4      	bls.n	8003f96 <HAL_RTC_DeactivateAlarm+0xd6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fac:	6823      	ldr	r3, [r4, #0]
 8003fae:	22ff      	movs	r2, #255	; 0xff
 8003fb0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003fb2:	2003      	movs	r0, #3
 8003fb4:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8003fb8:	2300      	movs	r3, #0
 8003fba:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_TIMEOUT;
 8003fbe:	e7c8      	b.n	8003f52 <HAL_RTC_DeactivateAlarm+0x92>
 8003fc0:	08009bac 	.word	0x08009bac

08003fc4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003fc4:	b510      	push	{r4, lr}
 8003fc6:	4604      	mov	r4, r0
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003fc8:	6803      	ldr	r3, [r0, #0]
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8003fd0:	d003      	beq.n	8003fda <HAL_RTC_AlarmIRQHandler+0x16>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003fd8:	d110      	bne.n	8003ffc <HAL_RTC_AlarmIRQHandler+0x38>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003fda:	6823      	ldr	r3, [r4, #0]
 8003fdc:	689a      	ldr	r2, [r3, #8]
 8003fde:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8003fe2:	d003      	beq.n	8003fec <HAL_RTC_AlarmIRQHandler+0x28>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003fea:	d110      	bne.n	800400e <HAL_RTC_AlarmIRQHandler+0x4a>
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003fec:	4b0d      	ldr	r3, [pc, #52]	; (8004024 <HAL_RTC_AlarmIRQHandler+0x60>)
 8003fee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ff2:	60da      	str	r2, [r3, #12]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8003ffa:	bd10      	pop	{r4, pc}
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003ffc:	f7fc fc62 	bl	80008c4 <HAL_RTC_AlarmAEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004000:	6822      	ldr	r2, [r4, #0]
 8004002:	68d3      	ldr	r3, [r2, #12]
 8004004:	b2db      	uxtb	r3, r3
 8004006:	f463 73c0 	orn	r3, r3, #384	; 0x180
 800400a:	60d3      	str	r3, [r2, #12]
 800400c:	e7e5      	b.n	8003fda <HAL_RTC_AlarmIRQHandler+0x16>
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800400e:	4620      	mov	r0, r4
 8004010:	f000 fd32 	bl	8004a78 <HAL_RTCEx_AlarmBEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004014:	6822      	ldr	r2, [r4, #0]
 8004016:	68d3      	ldr	r3, [r2, #12]
 8004018:	b2db      	uxtb	r3, r3
 800401a:	f463 7320 	orn	r3, r3, #640	; 0x280
 800401e:	60d3      	str	r3, [r2, #12]
 8004020:	e7e4      	b.n	8003fec <HAL_RTC_AlarmIRQHandler+0x28>
 8004022:	bf00      	nop
 8004024:	58000800 	.word	0x58000800

08004028 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004028:	b538      	push	{r3, r4, r5, lr}
 800402a:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800402c:	6802      	ldr	r2, [r0, #0]
 800402e:	68d3      	ldr	r3, [r2, #12]
 8004030:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004034:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004036:	f7fe f915 	bl	8002264 <HAL_GetTick>
 800403a:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800403c:	6823      	ldr	r3, [r4, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f013 0f20 	tst.w	r3, #32
 8004044:	d107      	bne.n	8004056 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004046:	f7fe f90d 	bl	8002264 <HAL_GetTick>
 800404a:	1b40      	subs	r0, r0, r5
 800404c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004050:	d9f4      	bls.n	800403c <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8004052:	2003      	movs	r0, #3
 8004054:	e000      	b.n	8004058 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8004056:	2000      	movs	r0, #0
}
 8004058:	bd38      	pop	{r3, r4, r5, pc}

0800405a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800405a:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800405c:	6803      	ldr	r3, [r0, #0]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004064:	d001      	beq.n	800406a <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8004066:	2000      	movs	r0, #0
}
 8004068:	bd38      	pop	{r3, r4, r5, pc}
 800406a:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800406c:	f04f 32ff 	mov.w	r2, #4294967295
 8004070:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8004072:	f7fe f8f7 	bl	8002264 <HAL_GetTick>
 8004076:	4605      	mov	r5, r0
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004078:	6823      	ldr	r3, [r4, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004080:	d107      	bne.n	8004092 <RTC_EnterInitMode+0x38>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004082:	f7fe f8ef 	bl	8002264 <HAL_GetTick>
 8004086:	1b43      	subs	r3, r0, r5
 8004088:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800408c:	d9f4      	bls.n	8004078 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 800408e:	2003      	movs	r0, #3
 8004090:	e7ea      	b.n	8004068 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 8004092:	2000      	movs	r0, #0
 8004094:	e7e8      	b.n	8004068 <RTC_EnterInitMode+0xe>
	...

08004098 <HAL_RTC_Init>:
{
 8004098:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 800409a:	2800      	cmp	r0, #0
 800409c:	f000 80ae 	beq.w	80041fc <HAL_RTC_Init+0x164>
 80040a0:	4604      	mov	r4, r0
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 80040a2:	6802      	ldr	r2, [r0, #0]
 80040a4:	4b56      	ldr	r3, [pc, #344]	; (8004200 <HAL_RTC_Init+0x168>)
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d003      	beq.n	80040b2 <HAL_RTC_Init+0x1a>
 80040aa:	21ef      	movs	r1, #239	; 0xef
 80040ac:	4855      	ldr	r0, [pc, #340]	; (8004204 <HAL_RTC_Init+0x16c>)
 80040ae:	f7fd fd6f 	bl	8001b90 <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 80040b2:	6863      	ldr	r3, [r4, #4]
 80040b4:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 80040b8:	d16e      	bne.n	8004198 <HAL_RTC_Init+0x100>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 80040ba:	68a3      	ldr	r3, [r4, #8]
 80040bc:	2b7f      	cmp	r3, #127	; 0x7f
 80040be:	d870      	bhi.n	80041a2 <HAL_RTC_Init+0x10a>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 80040c0:	68e3      	ldr	r3, [r4, #12]
 80040c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040c6:	d271      	bcs.n	80041ac <HAL_RTC_Init+0x114>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 80040c8:	6923      	ldr	r3, [r4, #16]
 80040ca:	f433 1300 	bics.w	r3, r3, #2097152	; 0x200000
 80040ce:	d006      	beq.n	80040de <HAL_RTC_Init+0x46>
 80040d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040d4:	d003      	beq.n	80040de <HAL_RTC_Init+0x46>
 80040d6:	21f3      	movs	r1, #243	; 0xf3
 80040d8:	484a      	ldr	r0, [pc, #296]	; (8004204 <HAL_RTC_Init+0x16c>)
 80040da:	f7fd fd59 	bl	8001b90 <assert_failed>
  assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
 80040de:	6963      	ldr	r3, [r4, #20]
 80040e0:	f033 0302 	bics.w	r3, r3, #2
 80040e4:	d003      	beq.n	80040ee <HAL_RTC_Init+0x56>
 80040e6:	21f4      	movs	r1, #244	; 0xf4
 80040e8:	4846      	ldr	r0, [pc, #280]	; (8004204 <HAL_RTC_Init+0x16c>)
 80040ea:	f7fd fd51 	bl	8001b90 <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 80040ee:	69a3      	ldr	r3, [r4, #24]
 80040f0:	f433 1380 	bics.w	r3, r3, #1048576	; 0x100000
 80040f4:	d003      	beq.n	80040fe <HAL_RTC_Init+0x66>
 80040f6:	21f5      	movs	r1, #245	; 0xf5
 80040f8:	4842      	ldr	r0, [pc, #264]	; (8004204 <HAL_RTC_Init+0x16c>)
 80040fa:	f7fd fd49 	bl	8001b90 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 80040fe:	69e3      	ldr	r3, [r4, #28]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d158      	bne.n	80041b6 <HAL_RTC_Init+0x11e>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004104:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8004108:	2b00      	cmp	r3, #0
 800410a:	d059      	beq.n	80041c0 <HAL_RTC_Init+0x128>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800410c:	2302      	movs	r3, #2
 800410e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004112:	6823      	ldr	r3, [r4, #0]
 8004114:	22ca      	movs	r2, #202	; 0xca
 8004116:	625a      	str	r2, [r3, #36]	; 0x24
 8004118:	6823      	ldr	r3, [r4, #0]
 800411a:	2253      	movs	r2, #83	; 0x53
 800411c:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800411e:	4620      	mov	r0, r4
 8004120:	f7ff ff9b 	bl	800405a <RTC_EnterInitMode>
 8004124:	4605      	mov	r5, r0
 8004126:	2800      	cmp	r0, #0
 8004128:	d150      	bne.n	80041cc <HAL_RTC_Init+0x134>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800412a:	6822      	ldr	r2, [r4, #0]
 800412c:	6893      	ldr	r3, [r2, #8]
 800412e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004132:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004136:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004138:	6822      	ldr	r2, [r4, #0]
 800413a:	6891      	ldr	r1, [r2, #8]
 800413c:	6863      	ldr	r3, [r4, #4]
 800413e:	6920      	ldr	r0, [r4, #16]
 8004140:	4303      	orrs	r3, r0
 8004142:	69a0      	ldr	r0, [r4, #24]
 8004144:	4303      	orrs	r3, r0
 8004146:	430b      	orrs	r3, r1
 8004148:	6093      	str	r3, [r2, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800414a:	6823      	ldr	r3, [r4, #0]
 800414c:	68e2      	ldr	r2, [r4, #12]
 800414e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004150:	6822      	ldr	r2, [r4, #0]
 8004152:	6913      	ldr	r3, [r2, #16]
 8004154:	68a1      	ldr	r1, [r4, #8]
 8004156:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800415a:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800415c:	6822      	ldr	r2, [r4, #0]
 800415e:	68d3      	ldr	r3, [r2, #12]
 8004160:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004164:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 8004166:	6822      	ldr	r2, [r4, #0]
 8004168:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800416a:	f023 0302 	bic.w	r3, r3, #2
 800416e:	64d3      	str	r3, [r2, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004170:	6822      	ldr	r2, [r4, #0]
 8004172:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8004174:	69e3      	ldr	r3, [r4, #28]
 8004176:	6960      	ldr	r0, [r4, #20]
 8004178:	4303      	orrs	r3, r0
 800417a:	430b      	orrs	r3, r1
 800417c:	64d3      	str	r3, [r2, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800417e:	6823      	ldr	r3, [r4, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f013 0f20 	tst.w	r3, #32
 8004186:	d029      	beq.n	80041dc <HAL_RTC_Init+0x144>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004188:	6823      	ldr	r3, [r4, #0]
 800418a:	22ff      	movs	r2, #255	; 0xff
 800418c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800418e:	2301      	movs	r3, #1
 8004190:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8004194:	4628      	mov	r0, r5
 8004196:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8004198:	21f0      	movs	r1, #240	; 0xf0
 800419a:	481a      	ldr	r0, [pc, #104]	; (8004204 <HAL_RTC_Init+0x16c>)
 800419c:	f7fd fcf8 	bl	8001b90 <assert_failed>
 80041a0:	e78b      	b.n	80040ba <HAL_RTC_Init+0x22>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 80041a2:	21f1      	movs	r1, #241	; 0xf1
 80041a4:	4817      	ldr	r0, [pc, #92]	; (8004204 <HAL_RTC_Init+0x16c>)
 80041a6:	f7fd fcf3 	bl	8001b90 <assert_failed>
 80041aa:	e789      	b.n	80040c0 <HAL_RTC_Init+0x28>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 80041ac:	21f2      	movs	r1, #242	; 0xf2
 80041ae:	4815      	ldr	r0, [pc, #84]	; (8004204 <HAL_RTC_Init+0x16c>)
 80041b0:	f7fd fcee 	bl	8001b90 <assert_failed>
 80041b4:	e788      	b.n	80040c8 <HAL_RTC_Init+0x30>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 80041b6:	21f6      	movs	r1, #246	; 0xf6
 80041b8:	4812      	ldr	r0, [pc, #72]	; (8004204 <HAL_RTC_Init+0x16c>)
 80041ba:	f7fd fce9 	bl	8001b90 <assert_failed>
 80041be:	e7a1      	b.n	8004104 <HAL_RTC_Init+0x6c>
    hrtc->Lock = HAL_UNLOCKED;
 80041c0:	f884 3020 	strb.w	r3, [r4, #32]
    HAL_RTC_MspInit(hrtc);
 80041c4:	4620      	mov	r0, r4
 80041c6:	f7fd fd99 	bl	8001cfc <HAL_RTC_MspInit>
 80041ca:	e79f      	b.n	800410c <HAL_RTC_Init+0x74>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041cc:	6823      	ldr	r3, [r4, #0]
 80041ce:	22ff      	movs	r2, #255	; 0xff
 80041d0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80041d2:	2304      	movs	r3, #4
 80041d4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    return HAL_ERROR;
 80041d8:	2501      	movs	r5, #1
 80041da:	e7db      	b.n	8004194 <HAL_RTC_Init+0xfc>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80041dc:	4620      	mov	r0, r4
 80041de:	f7ff ff23 	bl	8004028 <HAL_RTC_WaitForSynchro>
 80041e2:	2800      	cmp	r0, #0
 80041e4:	d0d0      	beq.n	8004188 <HAL_RTC_Init+0xf0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	22ff      	movs	r2, #255	; 0xff
 80041ea:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80041ec:	2304      	movs	r3, #4
 80041ee:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 80041f2:	2300      	movs	r3, #0
 80041f4:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 80041f8:	2501      	movs	r5, #1
 80041fa:	e7cb      	b.n	8004194 <HAL_RTC_Init+0xfc>
    return HAL_ERROR;
 80041fc:	2501      	movs	r5, #1
 80041fe:	e7c9      	b.n	8004194 <HAL_RTC_Init+0xfc>
 8004200:	40002800 	.word	0x40002800
 8004204:	08009bac 	.word	0x08009bac

08004208 <RTC_ByteToBcd2>:
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
  uint8_t Param = Value;

  while (Param >= 10U)
 8004208:	2809      	cmp	r0, #9
 800420a:	d909      	bls.n	8004220 <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0U;
 800420c:	2300      	movs	r3, #0
  {
    bcdhigh++;
 800420e:	3301      	adds	r3, #1
    Param -= 10U;
 8004210:	380a      	subs	r0, #10
 8004212:	b2c0      	uxtb	r0, r0
  while (Param >= 10U)
 8004214:	2809      	cmp	r0, #9
 8004216:	d8fa      	bhi.n	800420e <RTC_ByteToBcd2+0x6>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8004218:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 800421c:	b2c0      	uxtb	r0, r0
 800421e:	4770      	bx	lr
  uint32_t bcdhigh = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	e7f9      	b.n	8004218 <RTC_ByteToBcd2+0x10>

08004224 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004224:	0903      	lsrs	r3, r0, #4
 8004226:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800422a:	f000 000f 	and.w	r0, r0, #15
 800422e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8004232:	b2c0      	uxtb	r0, r0
 8004234:	4770      	bx	lr
	...

08004238 <HAL_RTC_SetTime>:
{
 8004238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800423c:	4604      	mov	r4, r0
 800423e:	460d      	mov	r5, r1
  assert_param(IS_RTC_FORMAT(Format));
 8004240:	2a01      	cmp	r2, #1
 8004242:	d81f      	bhi.n	8004284 <HAL_RTC_SetTime+0x4c>
  __HAL_LOCK(hrtc);
 8004244:	f890 3020 	ldrb.w	r3, [r0, #32]
 8004248:	2b01      	cmp	r3, #1
 800424a:	f000 80fb 	beq.w	8004444 <HAL_RTC_SetTime+0x20c>
 800424e:	2301      	movs	r3, #1
 8004250:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004254:	2302      	movs	r3, #2
 8004256:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  if (Format == RTC_FORMAT_BIN)
 800425a:	bb1a      	cbnz	r2, 80042a4 <HAL_RTC_SetTime+0x6c>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800425c:	6803      	ldr	r3, [r0, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004264:	d03a      	beq.n	80042dc <HAL_RTC_SetTime+0xa4>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8004266:	780b      	ldrb	r3, [r1, #0]
 8004268:	3b01      	subs	r3, #1
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b0b      	cmp	r3, #11
 800426e:	d82f      	bhi.n	80042d0 <HAL_RTC_SetTime+0x98>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8004270:	78eb      	ldrb	r3, [r5, #3]
 8004272:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 8004276:	d036      	beq.n	80042e6 <HAL_RTC_SetTime+0xae>
 8004278:	f240 21ff 	movw	r1, #767	; 0x2ff
 800427c:	4872      	ldr	r0, [pc, #456]	; (8004448 <HAL_RTC_SetTime+0x210>)
 800427e:	f7fd fc87 	bl	8001b90 <assert_failed>
 8004282:	e030      	b.n	80042e6 <HAL_RTC_SetTime+0xae>
  assert_param(IS_RTC_FORMAT(Format));
 8004284:	f240 21f3 	movw	r1, #755	; 0x2f3
 8004288:	486f      	ldr	r0, [pc, #444]	; (8004448 <HAL_RTC_SetTime+0x210>)
 800428a:	f7fd fc81 	bl	8001b90 <assert_failed>
  __HAL_LOCK(hrtc);
 800428e:	f894 3020 	ldrb.w	r3, [r4, #32]
 8004292:	2b01      	cmp	r3, #1
 8004294:	f000 80d4 	beq.w	8004440 <HAL_RTC_SetTime+0x208>
 8004298:	2301      	movs	r3, #1
 800429a:	f884 3020 	strb.w	r3, [r4, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800429e:	2302      	movs	r3, #2
 80042a0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80042a4:	6823      	ldr	r3, [r4, #0]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80042ac:	d07f      	beq.n	80043ae <HAL_RTC_SetTime+0x176>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 80042ae:	7828      	ldrb	r0, [r5, #0]
 80042b0:	f7ff ffb8 	bl	8004224 <RTC_Bcd2ToByte>
 80042b4:	3801      	subs	r0, #1
 80042b6:	b2c0      	uxtb	r0, r0
 80042b8:	280b      	cmp	r0, #11
 80042ba:	d872      	bhi.n	80043a2 <HAL_RTC_SetTime+0x16a>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 80042bc:	78eb      	ldrb	r3, [r5, #3]
 80042be:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 80042c2:	d07b      	beq.n	80043bc <HAL_RTC_SetTime+0x184>
 80042c4:	f240 3113 	movw	r1, #787	; 0x313
 80042c8:	485f      	ldr	r0, [pc, #380]	; (8004448 <HAL_RTC_SetTime+0x210>)
 80042ca:	f7fd fc61 	bl	8001b90 <assert_failed>
 80042ce:	e075      	b.n	80043bc <HAL_RTC_SetTime+0x184>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 80042d0:	f240 21fe 	movw	r1, #766	; 0x2fe
 80042d4:	485c      	ldr	r0, [pc, #368]	; (8004448 <HAL_RTC_SetTime+0x210>)
 80042d6:	f7fd fc5b 	bl	8001b90 <assert_failed>
 80042da:	e7c9      	b.n	8004270 <HAL_RTC_SetTime+0x38>
      sTime->TimeFormat = 0x00U;
 80042dc:	2300      	movs	r3, #0
 80042de:	70cb      	strb	r3, [r1, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 80042e0:	780b      	ldrb	r3, [r1, #0]
 80042e2:	2b17      	cmp	r3, #23
 80042e4:	d84b      	bhi.n	800437e <HAL_RTC_SetTime+0x146>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80042e6:	786b      	ldrb	r3, [r5, #1]
 80042e8:	2b3b      	cmp	r3, #59	; 0x3b
 80042ea:	d84e      	bhi.n	800438a <HAL_RTC_SetTime+0x152>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 80042ec:	78ab      	ldrb	r3, [r5, #2]
 80042ee:	2b3b      	cmp	r3, #59	; 0x3b
 80042f0:	d851      	bhi.n	8004396 <HAL_RTC_SetTime+0x15e>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80042f2:	7828      	ldrb	r0, [r5, #0]
 80042f4:	f7ff ff88 	bl	8004208 <RTC_ByteToBcd2>
 80042f8:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80042fa:	7868      	ldrb	r0, [r5, #1]
 80042fc:	f7ff ff84 	bl	8004208 <RTC_ByteToBcd2>
 8004300:	4607      	mov	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004302:	78a8      	ldrb	r0, [r5, #2]
 8004304:	f7ff ff80 	bl	8004208 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004308:	78ee      	ldrb	r6, [r5, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800430a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800430e:	ea46 4608 	orr.w	r6, r6, r8, lsl #16
 8004312:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	22ca      	movs	r2, #202	; 0xca
 800431a:	625a      	str	r2, [r3, #36]	; 0x24
 800431c:	6823      	ldr	r3, [r4, #0]
 800431e:	2253      	movs	r2, #83	; 0x53
 8004320:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004322:	4620      	mov	r0, r4
 8004324:	f7ff fe99 	bl	800405a <RTC_EnterInitMode>
 8004328:	4607      	mov	r7, r0
 800432a:	2800      	cmp	r0, #0
 800432c:	d16d      	bne.n	800440a <HAL_RTC_SetTime+0x1d2>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	f006 367f 	and.w	r6, r6, #2139062143	; 0x7f7f7f7f
 8004334:	f026 46fe 	bic.w	r6, r6, #2130706432	; 0x7f000000
 8004338:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800433a:	6822      	ldr	r2, [r4, #0]
 800433c:	6893      	ldr	r3, [r2, #8]
 800433e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004342:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004344:	6822      	ldr	r2, [r4, #0]
 8004346:	6891      	ldr	r1, [r2, #8]
 8004348:	68eb      	ldr	r3, [r5, #12]
 800434a:	6928      	ldr	r0, [r5, #16]
 800434c:	4303      	orrs	r3, r0
 800434e:	430b      	orrs	r3, r1
 8004350:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004352:	6822      	ldr	r2, [r4, #0]
 8004354:	68d3      	ldr	r3, [r2, #12]
 8004356:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800435a:	60d3      	str	r3, [r2, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800435c:	6823      	ldr	r3, [r4, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f013 0f20 	tst.w	r3, #32
 8004364:	d05c      	beq.n	8004420 <HAL_RTC_SetTime+0x1e8>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004366:	6823      	ldr	r3, [r4, #0]
 8004368:	22ff      	movs	r2, #255	; 0xff
 800436a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800436c:	2301      	movs	r3, #1
 800436e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8004372:	2300      	movs	r3, #0
 8004374:	f884 3020 	strb.w	r3, [r4, #32]
}
 8004378:	4638      	mov	r0, r7
 800437a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 800437e:	f44f 7141 	mov.w	r1, #772	; 0x304
 8004382:	4831      	ldr	r0, [pc, #196]	; (8004448 <HAL_RTC_SetTime+0x210>)
 8004384:	f7fd fc04 	bl	8001b90 <assert_failed>
 8004388:	e7ad      	b.n	80042e6 <HAL_RTC_SetTime+0xae>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 800438a:	f240 3106 	movw	r1, #774	; 0x306
 800438e:	482e      	ldr	r0, [pc, #184]	; (8004448 <HAL_RTC_SetTime+0x210>)
 8004390:	f7fd fbfe 	bl	8001b90 <assert_failed>
 8004394:	e7aa      	b.n	80042ec <HAL_RTC_SetTime+0xb4>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8004396:	f240 3107 	movw	r1, #775	; 0x307
 800439a:	482b      	ldr	r0, [pc, #172]	; (8004448 <HAL_RTC_SetTime+0x210>)
 800439c:	f7fd fbf8 	bl	8001b90 <assert_failed>
 80043a0:	e7a7      	b.n	80042f2 <HAL_RTC_SetTime+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 80043a2:	f240 3112 	movw	r1, #786	; 0x312
 80043a6:	4828      	ldr	r0, [pc, #160]	; (8004448 <HAL_RTC_SetTime+0x210>)
 80043a8:	f7fd fbf2 	bl	8001b90 <assert_failed>
 80043ac:	e786      	b.n	80042bc <HAL_RTC_SetTime+0x84>
      sTime->TimeFormat = 0x00U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	70eb      	strb	r3, [r5, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 80043b2:	7828      	ldrb	r0, [r5, #0]
 80043b4:	f7ff ff36 	bl	8004224 <RTC_Bcd2ToByte>
 80043b8:	2817      	cmp	r0, #23
 80043ba:	d814      	bhi.n	80043e6 <HAL_RTC_SetTime+0x1ae>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80043bc:	7868      	ldrb	r0, [r5, #1]
 80043be:	f7ff ff31 	bl	8004224 <RTC_Bcd2ToByte>
 80043c2:	283b      	cmp	r0, #59	; 0x3b
 80043c4:	d815      	bhi.n	80043f2 <HAL_RTC_SetTime+0x1ba>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80043c6:	78a8      	ldrb	r0, [r5, #2]
 80043c8:	f7ff ff2c 	bl	8004224 <RTC_Bcd2ToByte>
 80043cc:	283b      	cmp	r0, #59	; 0x3b
 80043ce:	d816      	bhi.n	80043fe <HAL_RTC_SetTime+0x1c6>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80043d0:	782e      	ldrb	r6, [r5, #0]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80043d2:	7868      	ldrb	r0, [r5, #1]
 80043d4:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80043d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
              ((uint32_t)sTime->Seconds) | \
 80043da:	78ae      	ldrb	r6, [r5, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80043dc:	4330      	orrs	r0, r6
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80043de:	78ee      	ldrb	r6, [r5, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80043e0:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80043e4:	e797      	b.n	8004316 <HAL_RTC_SetTime+0xde>
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 80043e6:	f44f 7146 	mov.w	r1, #792	; 0x318
 80043ea:	4817      	ldr	r0, [pc, #92]	; (8004448 <HAL_RTC_SetTime+0x210>)
 80043ec:	f7fd fbd0 	bl	8001b90 <assert_failed>
 80043f0:	e7e4      	b.n	80043bc <HAL_RTC_SetTime+0x184>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80043f2:	f240 311a 	movw	r1, #794	; 0x31a
 80043f6:	4814      	ldr	r0, [pc, #80]	; (8004448 <HAL_RTC_SetTime+0x210>)
 80043f8:	f7fd fbca 	bl	8001b90 <assert_failed>
 80043fc:	e7e3      	b.n	80043c6 <HAL_RTC_SetTime+0x18e>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80043fe:	f240 311b 	movw	r1, #795	; 0x31b
 8004402:	4811      	ldr	r0, [pc, #68]	; (8004448 <HAL_RTC_SetTime+0x210>)
 8004404:	f7fd fbc4 	bl	8001b90 <assert_failed>
 8004408:	e7e2      	b.n	80043d0 <HAL_RTC_SetTime+0x198>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	22ff      	movs	r2, #255	; 0xff
 800440e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004410:	2304      	movs	r3, #4
 8004412:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8004416:	2300      	movs	r3, #0
 8004418:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 800441c:	2701      	movs	r7, #1
 800441e:	e7ab      	b.n	8004378 <HAL_RTC_SetTime+0x140>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004420:	4620      	mov	r0, r4
 8004422:	f7ff fe01 	bl	8004028 <HAL_RTC_WaitForSynchro>
 8004426:	2800      	cmp	r0, #0
 8004428:	d09d      	beq.n	8004366 <HAL_RTC_SetTime+0x12e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	22ff      	movs	r2, #255	; 0xff
 800442e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004430:	2304      	movs	r3, #4
 8004432:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8004436:	2300      	movs	r3, #0
 8004438:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 800443c:	2701      	movs	r7, #1
 800443e:	e79b      	b.n	8004378 <HAL_RTC_SetTime+0x140>
  __HAL_LOCK(hrtc);
 8004440:	2702      	movs	r7, #2
 8004442:	e799      	b.n	8004378 <HAL_RTC_SetTime+0x140>
 8004444:	2702      	movs	r7, #2
 8004446:	e797      	b.n	8004378 <HAL_RTC_SetTime+0x140>
 8004448:	08009bac 	.word	0x08009bac

0800444c <HAL_RTC_GetTime>:
{
 800444c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800444e:	4605      	mov	r5, r0
 8004450:	460c      	mov	r4, r1
 8004452:	4616      	mov	r6, r2
  assert_param(IS_RTC_FORMAT(Format));
 8004454:	2a01      	cmp	r2, #1
 8004456:	d825      	bhi.n	80044a4 <HAL_RTC_GetTime+0x58>
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004458:	682b      	ldr	r3, [r5, #0]
 800445a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445c:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800445e:	682b      	ldr	r3, [r5, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004466:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004468:	682b      	ldr	r3, [r5, #0]
 800446a:	681d      	ldr	r5, [r3, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800446c:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8004470:	f3c5 4005 	ubfx	r0, r5, #16, #6
 8004474:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004476:	f3c5 2706 	ubfx	r7, r5, #8, #7
 800447a:	7067      	strb	r7, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800447c:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 8004480:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004482:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004486:	70e3      	strb	r3, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 8004488:	b956      	cbnz	r6, 80044a0 <HAL_RTC_GetTime+0x54>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800448a:	f7ff fecb 	bl	8004224 <RTC_Bcd2ToByte>
 800448e:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004490:	4638      	mov	r0, r7
 8004492:	f7ff fec7 	bl	8004224 <RTC_Bcd2ToByte>
 8004496:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004498:	4628      	mov	r0, r5
 800449a:	f7ff fec3 	bl	8004224 <RTC_Bcd2ToByte>
 800449e:	70a0      	strb	r0, [r4, #2]
}
 80044a0:	2000      	movs	r0, #0
 80044a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_RTC_FORMAT(Format));
 80044a4:	f240 3177 	movw	r1, #887	; 0x377
 80044a8:	4801      	ldr	r0, [pc, #4]	; (80044b0 <HAL_RTC_GetTime+0x64>)
 80044aa:	f7fd fb71 	bl	8001b90 <assert_failed>
 80044ae:	e7d3      	b.n	8004458 <HAL_RTC_GetTime+0xc>
 80044b0:	08009bac 	.word	0x08009bac

080044b4 <HAL_RTC_SetDate>:
{
 80044b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b6:	4604      	mov	r4, r0
 80044b8:	460d      	mov	r5, r1
  assert_param(IS_RTC_FORMAT(Format));
 80044ba:	2a01      	cmp	r2, #1
 80044bc:	d860      	bhi.n	8004580 <HAL_RTC_SetDate+0xcc>
  __HAL_LOCK(hrtc);
 80044be:	f890 3020 	ldrb.w	r3, [r0, #32]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	f000 80cf 	beq.w	8004666 <HAL_RTC_SetDate+0x1b2>
 80044c8:	2301      	movs	r3, #1
 80044ca:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80044ce:	2302      	movs	r3, #2
 80044d0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80044d4:	2a00      	cmp	r2, #0
 80044d6:	d162      	bne.n	800459e <HAL_RTC_SetDate+0xea>
 80044d8:	784b      	ldrb	r3, [r1, #1]
 80044da:	f013 0f10 	tst.w	r3, #16
 80044de:	d003      	beq.n	80044e8 <HAL_RTC_SetDate+0x34>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80044e0:	f023 0310 	bic.w	r3, r3, #16
 80044e4:	330a      	adds	r3, #10
 80044e6:	704b      	strb	r3, [r1, #1]
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 80044e8:	782b      	ldrb	r3, [r5, #0]
 80044ea:	3b01      	subs	r3, #1
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b06      	cmp	r3, #6
 80044f0:	f200 80bb 	bhi.w	800466a <HAL_RTC_SetDate+0x1b6>
    assert_param(IS_RTC_YEAR(sDate->Year));
 80044f4:	78eb      	ldrb	r3, [r5, #3]
 80044f6:	2b63      	cmp	r3, #99	; 0x63
 80044f8:	d874      	bhi.n	80045e4 <HAL_RTC_SetDate+0x130>
    assert_param(IS_RTC_MONTH(sDate->Month));
 80044fa:	786b      	ldrb	r3, [r5, #1]
 80044fc:	3b01      	subs	r3, #1
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b0b      	cmp	r3, #11
 8004502:	d875      	bhi.n	80045f0 <HAL_RTC_SetDate+0x13c>
    assert_param(IS_RTC_DATE(sDate->Date));
 8004504:	78ab      	ldrb	r3, [r5, #2]
 8004506:	3b01      	subs	r3, #1
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b1e      	cmp	r3, #30
 800450c:	d876      	bhi.n	80045fc <HAL_RTC_SetDate+0x148>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800450e:	78e8      	ldrb	r0, [r5, #3]
 8004510:	f7ff fe7a 	bl	8004208 <RTC_ByteToBcd2>
 8004514:	4607      	mov	r7, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004516:	7868      	ldrb	r0, [r5, #1]
 8004518:	f7ff fe76 	bl	8004208 <RTC_ByteToBcd2>
 800451c:	4606      	mov	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800451e:	78a8      	ldrb	r0, [r5, #2]
 8004520:	f7ff fe72 	bl	8004208 <RTC_ByteToBcd2>
                  ((uint32_t)sDate->WeekDay << 13U));
 8004524:	782d      	ldrb	r5, [r5, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004526:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 800452a:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800452e:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	22ca      	movs	r2, #202	; 0xca
 8004536:	625a      	str	r2, [r3, #36]	; 0x24
 8004538:	6823      	ldr	r3, [r4, #0]
 800453a:	2253      	movs	r2, #83	; 0x53
 800453c:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800453e:	4620      	mov	r0, r4
 8004540:	f7ff fd8b 	bl	800405a <RTC_EnterInitMode>
 8004544:	4606      	mov	r6, r0
 8004546:	2800      	cmp	r0, #0
 8004548:	d170      	bne.n	800462c <HAL_RTC_SetDate+0x178>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800454a:	6823      	ldr	r3, [r4, #0]
 800454c:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8004550:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8004554:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004556:	6822      	ldr	r2, [r4, #0]
 8004558:	68d3      	ldr	r3, [r2, #12]
 800455a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800455e:	60d3      	str	r3, [r2, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004560:	6823      	ldr	r3, [r4, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f013 0f20 	tst.w	r3, #32
 8004568:	d06b      	beq.n	8004642 <HAL_RTC_SetDate+0x18e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	22ff      	movs	r2, #255	; 0xff
 800456e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8004570:	2301      	movs	r3, #1
 8004572:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8004576:	2300      	movs	r3, #0
 8004578:	f884 3020 	strb.w	r3, [r4, #32]
}
 800457c:	4630      	mov	r0, r6
 800457e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_RTC_FORMAT(Format));
 8004580:	f240 31a3 	movw	r1, #931	; 0x3a3
 8004584:	483f      	ldr	r0, [pc, #252]	; (8004684 <HAL_RTC_SetDate+0x1d0>)
 8004586:	f7fd fb03 	bl	8001b90 <assert_failed>
  __HAL_LOCK(hrtc);
 800458a:	f894 3020 	ldrb.w	r3, [r4, #32]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d067      	beq.n	8004662 <HAL_RTC_SetDate+0x1ae>
 8004592:	2301      	movs	r3, #1
 8004594:	f884 3020 	strb.w	r3, [r4, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004598:	2302      	movs	r3, #2
 800459a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 800459e:	782b      	ldrb	r3, [r5, #0]
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b06      	cmp	r3, #6
 80045a6:	d866      	bhi.n	8004676 <HAL_RTC_SetDate+0x1c2>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 80045a8:	78e8      	ldrb	r0, [r5, #3]
 80045aa:	f7ff fe3b 	bl	8004224 <RTC_Bcd2ToByte>
 80045ae:	2863      	cmp	r0, #99	; 0x63
 80045b0:	d82a      	bhi.n	8004608 <HAL_RTC_SetDate+0x154>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 80045b2:	7868      	ldrb	r0, [r5, #1]
 80045b4:	f7ff fe36 	bl	8004224 <RTC_Bcd2ToByte>
 80045b8:	3801      	subs	r0, #1
 80045ba:	b2c0      	uxtb	r0, r0
 80045bc:	280b      	cmp	r0, #11
 80045be:	d829      	bhi.n	8004614 <HAL_RTC_SetDate+0x160>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 80045c0:	78a8      	ldrb	r0, [r5, #2]
 80045c2:	f7ff fe2f 	bl	8004224 <RTC_Bcd2ToByte>
 80045c6:	3801      	subs	r0, #1
 80045c8:	b2c0      	uxtb	r0, r0
 80045ca:	281e      	cmp	r0, #30
 80045cc:	d828      	bhi.n	8004620 <HAL_RTC_SetDate+0x16c>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80045ce:	78eb      	ldrb	r3, [r5, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 80045d0:	7868      	ldrb	r0, [r5, #1]
 80045d2:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80045d4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
                  ((uint32_t)sDate->Date) | \
 80045d8:	78ab      	ldrb	r3, [r5, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80045da:	4318      	orrs	r0, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80045dc:	782d      	ldrb	r5, [r5, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80045de:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 80045e2:	e7a6      	b.n	8004532 <HAL_RTC_SetDate+0x7e>
    assert_param(IS_RTC_YEAR(sDate->Year));
 80045e4:	f240 31b3 	movw	r1, #947	; 0x3b3
 80045e8:	4826      	ldr	r0, [pc, #152]	; (8004684 <HAL_RTC_SetDate+0x1d0>)
 80045ea:	f7fd fad1 	bl	8001b90 <assert_failed>
 80045ee:	e784      	b.n	80044fa <HAL_RTC_SetDate+0x46>
    assert_param(IS_RTC_MONTH(sDate->Month));
 80045f0:	f44f 716d 	mov.w	r1, #948	; 0x3b4
 80045f4:	4823      	ldr	r0, [pc, #140]	; (8004684 <HAL_RTC_SetDate+0x1d0>)
 80045f6:	f7fd facb 	bl	8001b90 <assert_failed>
 80045fa:	e783      	b.n	8004504 <HAL_RTC_SetDate+0x50>
    assert_param(IS_RTC_DATE(sDate->Date));
 80045fc:	f240 31b5 	movw	r1, #949	; 0x3b5
 8004600:	4820      	ldr	r0, [pc, #128]	; (8004684 <HAL_RTC_SetDate+0x1d0>)
 8004602:	f7fd fac5 	bl	8001b90 <assert_failed>
 8004606:	e782      	b.n	800450e <HAL_RTC_SetDate+0x5a>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8004608:	f240 31be 	movw	r1, #958	; 0x3be
 800460c:	481d      	ldr	r0, [pc, #116]	; (8004684 <HAL_RTC_SetDate+0x1d0>)
 800460e:	f7fd fabf 	bl	8001b90 <assert_failed>
 8004612:	e7ce      	b.n	80045b2 <HAL_RTC_SetDate+0xfe>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8004614:	f240 31bf 	movw	r1, #959	; 0x3bf
 8004618:	481a      	ldr	r0, [pc, #104]	; (8004684 <HAL_RTC_SetDate+0x1d0>)
 800461a:	f7fd fab9 	bl	8001b90 <assert_failed>
 800461e:	e7cf      	b.n	80045c0 <HAL_RTC_SetDate+0x10c>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8004620:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8004624:	4817      	ldr	r0, [pc, #92]	; (8004684 <HAL_RTC_SetDate+0x1d0>)
 8004626:	f7fd fab3 	bl	8001b90 <assert_failed>
 800462a:	e7d0      	b.n	80045ce <HAL_RTC_SetDate+0x11a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	22ff      	movs	r2, #255	; 0xff
 8004630:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004632:	2304      	movs	r3, #4
 8004634:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8004638:	2300      	movs	r3, #0
 800463a:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 800463e:	2601      	movs	r6, #1
 8004640:	e79c      	b.n	800457c <HAL_RTC_SetDate+0xc8>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004642:	4620      	mov	r0, r4
 8004644:	f7ff fcf0 	bl	8004028 <HAL_RTC_WaitForSynchro>
 8004648:	2800      	cmp	r0, #0
 800464a:	d08e      	beq.n	800456a <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800464c:	6823      	ldr	r3, [r4, #0]
 800464e:	22ff      	movs	r2, #255	; 0xff
 8004650:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004652:	2304      	movs	r3, #4
 8004654:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8004658:	2300      	movs	r3, #0
 800465a:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 800465e:	2601      	movs	r6, #1
 8004660:	e78c      	b.n	800457c <HAL_RTC_SetDate+0xc8>
  __HAL_LOCK(hrtc);
 8004662:	2602      	movs	r6, #2
 8004664:	e78a      	b.n	800457c <HAL_RTC_SetDate+0xc8>
 8004666:	2602      	movs	r6, #2
 8004668:	e788      	b.n	800457c <HAL_RTC_SetDate+0xc8>
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 800466a:	f240 31af 	movw	r1, #943	; 0x3af
 800466e:	4805      	ldr	r0, [pc, #20]	; (8004684 <HAL_RTC_SetDate+0x1d0>)
 8004670:	f7fd fa8e 	bl	8001b90 <assert_failed>
  if (Format == RTC_FORMAT_BIN)
 8004674:	e73e      	b.n	80044f4 <HAL_RTC_SetDate+0x40>
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8004676:	f240 31af 	movw	r1, #943	; 0x3af
 800467a:	4802      	ldr	r0, [pc, #8]	; (8004684 <HAL_RTC_SetDate+0x1d0>)
 800467c:	f7fd fa88 	bl	8001b90 <assert_failed>
  if (Format == RTC_FORMAT_BIN)
 8004680:	e792      	b.n	80045a8 <HAL_RTC_SetDate+0xf4>
 8004682:	bf00      	nop
 8004684:	08009bac 	.word	0x08009bac

08004688 <HAL_RTC_GetDate>:
{
 8004688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468a:	4606      	mov	r6, r0
 800468c:	460c      	mov	r4, r1
 800468e:	4615      	mov	r5, r2
  assert_param(IS_RTC_FORMAT(Format));
 8004690:	2a01      	cmp	r2, #1
 8004692:	d81b      	bhi.n	80046cc <HAL_RTC_GetDate+0x44>
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004694:	6833      	ldr	r3, [r6, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004698:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800469c:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800469e:	f3c3 2704 	ubfx	r7, r3, #8, #5
 80046a2:	7067      	strb	r7, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80046a4:	f003 063f 	and.w	r6, r3, #63	; 0x3f
 80046a8:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80046aa:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80046ae:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 80046b0:	b955      	cbnz	r5, 80046c8 <HAL_RTC_GetDate+0x40>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80046b2:	f7ff fdb7 	bl	8004224 <RTC_Bcd2ToByte>
 80046b6:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80046b8:	4638      	mov	r0, r7
 80046ba:	f7ff fdb3 	bl	8004224 <RTC_Bcd2ToByte>
 80046be:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80046c0:	4630      	mov	r0, r6
 80046c2:	f7ff fdaf 	bl	8004224 <RTC_Bcd2ToByte>
 80046c6:	70a0      	strb	r0, [r4, #2]
}
 80046c8:	2000      	movs	r0, #0
 80046ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_RTC_FORMAT(Format));
 80046cc:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80046d0:	4801      	ldr	r0, [pc, #4]	; (80046d8 <HAL_RTC_GetDate+0x50>)
 80046d2:	f7fd fa5d 	bl	8001b90 <assert_failed>
 80046d6:	e7dd      	b.n	8004694 <HAL_RTC_GetDate+0xc>
 80046d8:	08009bac 	.word	0x08009bac

080046dc <HAL_RTC_SetAlarm_IT>:
{
 80046dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046e0:	4604      	mov	r4, r0
 80046e2:	460d      	mov	r5, r1
 80046e4:	4616      	mov	r6, r2
  assert_param(IS_RTC_FORMAT(Format));
 80046e6:	2a01      	cmp	r2, #1
 80046e8:	d857      	bhi.n	800479a <HAL_RTC_SetAlarm_IT+0xbe>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 80046ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80046ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046f0:	d002      	beq.n	80046f8 <HAL_RTC_SetAlarm_IT+0x1c>
 80046f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046f6:	d156      	bne.n	80047a6 <HAL_RTC_SetAlarm_IT+0xca>
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 80046f8:	696b      	ldr	r3, [r5, #20]
 80046fa:	f013 3f7f 	tst.w	r3, #2139062143	; 0x7f7f7f7f
 80046fe:	d158      	bne.n	80047b2 <HAL_RTC_SetAlarm_IT+0xd6>
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 8004700:	69eb      	ldr	r3, [r5, #28]
 8004702:	f033 4380 	bics.w	r3, r3, #1073741824	; 0x40000000
 8004706:	d004      	beq.n	8004712 <HAL_RTC_SetAlarm_IT+0x36>
 8004708:	f240 5142 	movw	r1, #1346	; 0x542
 800470c:	48ad      	ldr	r0, [pc, #692]	; (80049c4 <HAL_RTC_SetAlarm_IT+0x2e8>)
 800470e:	f7fd fa3f 	bl	8001b90 <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 8004712:	686b      	ldr	r3, [r5, #4]
 8004714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004718:	d251      	bcs.n	80047be <HAL_RTC_SetAlarm_IT+0xe2>
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 800471a:	69ab      	ldr	r3, [r5, #24]
 800471c:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 8004720:	d019      	beq.n	8004756 <HAL_RTC_SetAlarm_IT+0x7a>
 8004722:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004726:	d016      	beq.n	8004756 <HAL_RTC_SetAlarm_IT+0x7a>
 8004728:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800472c:	d013      	beq.n	8004756 <HAL_RTC_SetAlarm_IT+0x7a>
 800472e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8004732:	d010      	beq.n	8004756 <HAL_RTC_SetAlarm_IT+0x7a>
 8004734:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004738:	d00d      	beq.n	8004756 <HAL_RTC_SetAlarm_IT+0x7a>
 800473a:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800473e:	d00a      	beq.n	8004756 <HAL_RTC_SetAlarm_IT+0x7a>
 8004740:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004744:	d007      	beq.n	8004756 <HAL_RTC_SetAlarm_IT+0x7a>
 8004746:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 800474a:	d004      	beq.n	8004756 <HAL_RTC_SetAlarm_IT+0x7a>
 800474c:	f240 5144 	movw	r1, #1348	; 0x544
 8004750:	489c      	ldr	r0, [pc, #624]	; (80049c4 <HAL_RTC_SetAlarm_IT+0x2e8>)
 8004752:	f7fd fa1d 	bl	8001b90 <assert_failed>
  __HAL_LOCK(hrtc);
 8004756:	f894 3020 	ldrb.w	r3, [r4, #32]
 800475a:	2b01      	cmp	r3, #1
 800475c:	f000 8188 	beq.w	8004a70 <HAL_RTC_SetAlarm_IT+0x394>
 8004760:	2301      	movs	r3, #1
 8004762:	f884 3020 	strb.w	r3, [r4, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004766:	2302      	movs	r3, #2
 8004768:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  if (Format == RTC_FORMAT_BIN)
 800476c:	2e00      	cmp	r6, #0
 800476e:	f040 8088 	bne.w	8004882 <HAL_RTC_SetAlarm_IT+0x1a6>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f013 0f40 	tst.w	r3, #64	; 0x40
 800477a:	d02c      	beq.n	80047d6 <HAL_RTC_SetAlarm_IT+0xfa>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 800477c:	782b      	ldrb	r3, [r5, #0]
 800477e:	3b01      	subs	r3, #1
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b0b      	cmp	r3, #11
 8004784:	d821      	bhi.n	80047ca <HAL_RTC_SetAlarm_IT+0xee>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 8004786:	78eb      	ldrb	r3, [r5, #3]
 8004788:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 800478c:	d028      	beq.n	80047e0 <HAL_RTC_SetAlarm_IT+0x104>
 800478e:	f44f 61aa 	mov.w	r1, #1360	; 0x550
 8004792:	488c      	ldr	r0, [pc, #560]	; (80049c4 <HAL_RTC_SetAlarm_IT+0x2e8>)
 8004794:	f7fd f9fc 	bl	8001b90 <assert_failed>
 8004798:	e022      	b.n	80047e0 <HAL_RTC_SetAlarm_IT+0x104>
  assert_param(IS_RTC_FORMAT(Format));
 800479a:	f240 513f 	movw	r1, #1343	; 0x53f
 800479e:	4889      	ldr	r0, [pc, #548]	; (80049c4 <HAL_RTC_SetAlarm_IT+0x2e8>)
 80047a0:	f7fd f9f6 	bl	8001b90 <assert_failed>
 80047a4:	e7a1      	b.n	80046ea <HAL_RTC_SetAlarm_IT+0xe>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 80047a6:	f44f 61a8 	mov.w	r1, #1344	; 0x540
 80047aa:	4886      	ldr	r0, [pc, #536]	; (80049c4 <HAL_RTC_SetAlarm_IT+0x2e8>)
 80047ac:	f7fd f9f0 	bl	8001b90 <assert_failed>
 80047b0:	e7a2      	b.n	80046f8 <HAL_RTC_SetAlarm_IT+0x1c>
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 80047b2:	f240 5141 	movw	r1, #1345	; 0x541
 80047b6:	4883      	ldr	r0, [pc, #524]	; (80049c4 <HAL_RTC_SetAlarm_IT+0x2e8>)
 80047b8:	f7fd f9ea 	bl	8001b90 <assert_failed>
 80047bc:	e7a0      	b.n	8004700 <HAL_RTC_SetAlarm_IT+0x24>
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 80047be:	f240 5143 	movw	r1, #1347	; 0x543
 80047c2:	4880      	ldr	r0, [pc, #512]	; (80049c4 <HAL_RTC_SetAlarm_IT+0x2e8>)
 80047c4:	f7fd f9e4 	bl	8001b90 <assert_failed>
 80047c8:	e7a7      	b.n	800471a <HAL_RTC_SetAlarm_IT+0x3e>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 80047ca:	f240 514f 	movw	r1, #1359	; 0x54f
 80047ce:	487d      	ldr	r0, [pc, #500]	; (80049c4 <HAL_RTC_SetAlarm_IT+0x2e8>)
 80047d0:	f7fd f9de 	bl	8001b90 <assert_failed>
 80047d4:	e7d7      	b.n	8004786 <HAL_RTC_SetAlarm_IT+0xaa>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80047d6:	2300      	movs	r3, #0
 80047d8:	70eb      	strb	r3, [r5, #3]
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 80047da:	782b      	ldrb	r3, [r5, #0]
 80047dc:	2b17      	cmp	r3, #23
 80047de:	d82c      	bhi.n	800483a <HAL_RTC_SetAlarm_IT+0x15e>
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 80047e0:	786b      	ldrb	r3, [r5, #1]
 80047e2:	2b3b      	cmp	r3, #59	; 0x3b
 80047e4:	d82f      	bhi.n	8004846 <HAL_RTC_SetAlarm_IT+0x16a>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 80047e6:	78ab      	ldrb	r3, [r5, #2]
 80047e8:	2b3b      	cmp	r3, #59	; 0x3b
 80047ea:	d832      	bhi.n	8004852 <HAL_RTC_SetAlarm_IT+0x176>
    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 80047ec:	69eb      	ldr	r3, [r5, #28]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d13b      	bne.n	800486a <HAL_RTC_SetAlarm_IT+0x18e>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 80047f2:	f895 3020 	ldrb.w	r3, [r5, #32]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b1e      	cmp	r3, #30
 80047fc:	d82f      	bhi.n	800485e <HAL_RTC_SetAlarm_IT+0x182>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80047fe:	7828      	ldrb	r0, [r5, #0]
 8004800:	f7ff fd02 	bl	8004208 <RTC_ByteToBcd2>
 8004804:	4680      	mov	r8, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004806:	7868      	ldrb	r0, [r5, #1]
 8004808:	f7ff fcfe 	bl	8004208 <RTC_ByteToBcd2>
 800480c:	4607      	mov	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800480e:	78a8      	ldrb	r0, [r5, #2]
 8004810:	f7ff fcfa 	bl	8004208 <RTC_ByteToBcd2>
 8004814:	4606      	mov	r6, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004816:	f895 0020 	ldrb.w	r0, [r5, #32]
 800481a:	f7ff fcf5 	bl	8004208 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800481e:	69eb      	ldr	r3, [r5, #28]
 8004820:	696a      	ldr	r2, [r5, #20]
 8004822:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004824:	78ea      	ldrb	r2, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004826:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800482a:	431e      	orrs	r6, r3
 800482c:	ea46 4608 	orr.w	r6, r6, r8, lsl #16
 8004830:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
 8004834:	ea46 6600 	orr.w	r6, r6, r0, lsl #24
 8004838:	e06d      	b.n	8004916 <HAL_RTC_SetAlarm_IT+0x23a>
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 800483a:	f240 5155 	movw	r1, #1365	; 0x555
 800483e:	4861      	ldr	r0, [pc, #388]	; (80049c4 <HAL_RTC_SetAlarm_IT+0x2e8>)
 8004840:	f7fd f9a6 	bl	8001b90 <assert_failed>
 8004844:	e7cc      	b.n	80047e0 <HAL_RTC_SetAlarm_IT+0x104>
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 8004846:	f240 5157 	movw	r1, #1367	; 0x557
 800484a:	485e      	ldr	r0, [pc, #376]	; (80049c4 <HAL_RTC_SetAlarm_IT+0x2e8>)
 800484c:	f7fd f9a0 	bl	8001b90 <assert_failed>
 8004850:	e7c9      	b.n	80047e6 <HAL_RTC_SetAlarm_IT+0x10a>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 8004852:	f44f 61ab 	mov.w	r1, #1368	; 0x558
 8004856:	485b      	ldr	r0, [pc, #364]	; (80049c4 <HAL_RTC_SetAlarm_IT+0x2e8>)
 8004858:	f7fd f99a 	bl	8001b90 <assert_failed>
 800485c:	e7c6      	b.n	80047ec <HAL_RTC_SetAlarm_IT+0x110>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 800485e:	f240 515c 	movw	r1, #1372	; 0x55c
 8004862:	4858      	ldr	r0, [pc, #352]	; (80049c4 <HAL_RTC_SetAlarm_IT+0x2e8>)
 8004864:	f7fd f994 	bl	8001b90 <assert_failed>
 8004868:	e7c9      	b.n	80047fe <HAL_RTC_SetAlarm_IT+0x122>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 800486a:	f895 3020 	ldrb.w	r3, [r5, #32]
 800486e:	3b01      	subs	r3, #1
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b06      	cmp	r3, #6
 8004874:	d9c3      	bls.n	80047fe <HAL_RTC_SetAlarm_IT+0x122>
 8004876:	f44f 61ac 	mov.w	r1, #1376	; 0x560
 800487a:	4852      	ldr	r0, [pc, #328]	; (80049c4 <HAL_RTC_SetAlarm_IT+0x2e8>)
 800487c:	f7fd f988 	bl	8001b90 <assert_failed>
 8004880:	e7bd      	b.n	80047fe <HAL_RTC_SetAlarm_IT+0x122>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f013 0f40 	tst.w	r3, #64	; 0x40
 800488a:	d016      	beq.n	80048ba <HAL_RTC_SetAlarm_IT+0x1de>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 800488c:	7828      	ldrb	r0, [r5, #0]
 800488e:	f7ff fcc9 	bl	8004224 <RTC_Bcd2ToByte>
 8004892:	1e43      	subs	r3, r0, #1
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b0b      	cmp	r3, #11
 8004898:	d809      	bhi.n	80048ae <HAL_RTC_SetAlarm_IT+0x1d2>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 800489a:	78eb      	ldrb	r3, [r5, #3]
 800489c:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 80048a0:	d012      	beq.n	80048c8 <HAL_RTC_SetAlarm_IT+0x1ec>
 80048a2:	f240 516f 	movw	r1, #1391	; 0x56f
 80048a6:	4847      	ldr	r0, [pc, #284]	; (80049c4 <HAL_RTC_SetAlarm_IT+0x2e8>)
 80048a8:	f7fd f972 	bl	8001b90 <assert_failed>
 80048ac:	e00c      	b.n	80048c8 <HAL_RTC_SetAlarm_IT+0x1ec>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 80048ae:	f240 516e 	movw	r1, #1390	; 0x56e
 80048b2:	4844      	ldr	r0, [pc, #272]	; (80049c4 <HAL_RTC_SetAlarm_IT+0x2e8>)
 80048b4:	f7fd f96c 	bl	8001b90 <assert_failed>
 80048b8:	e7ef      	b.n	800489a <HAL_RTC_SetAlarm_IT+0x1be>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	70eb      	strb	r3, [r5, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 80048be:	7828      	ldrb	r0, [r5, #0]
 80048c0:	f7ff fcb0 	bl	8004224 <RTC_Bcd2ToByte>
 80048c4:	2817      	cmp	r0, #23
 80048c6:	d856      	bhi.n	8004976 <HAL_RTC_SetAlarm_IT+0x29a>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 80048c8:	7868      	ldrb	r0, [r5, #1]
 80048ca:	f7ff fcab 	bl	8004224 <RTC_Bcd2ToByte>
 80048ce:	283b      	cmp	r0, #59	; 0x3b
 80048d0:	d857      	bhi.n	8004982 <HAL_RTC_SetAlarm_IT+0x2a6>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 80048d2:	78a8      	ldrb	r0, [r5, #2]
 80048d4:	f7ff fca6 	bl	8004224 <RTC_Bcd2ToByte>
 80048d8:	283b      	cmp	r0, #59	; 0x3b
 80048da:	d858      	bhi.n	800498e <HAL_RTC_SetAlarm_IT+0x2b2>
    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 80048dc:	69eb      	ldr	r3, [r5, #28]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d161      	bne.n	80049a6 <HAL_RTC_SetAlarm_IT+0x2ca>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 80048e2:	f895 0020 	ldrb.w	r0, [r5, #32]
 80048e6:	f7ff fc9d 	bl	8004224 <RTC_Bcd2ToByte>
 80048ea:	1e43      	subs	r3, r0, #1
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b1e      	cmp	r3, #30
 80048f0:	d853      	bhi.n	800499a <HAL_RTC_SetAlarm_IT+0x2be>
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80048f2:	69eb      	ldr	r3, [r5, #28]
 80048f4:	696e      	ldr	r6, [r5, #20]
 80048f6:	431e      	orrs	r6, r3
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80048f8:	78ab      	ldrb	r3, [r5, #2]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80048fa:	431e      	orrs	r6, r3
 80048fc:	782b      	ldrb	r3, [r5, #0]
 80048fe:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004902:	786b      	ldrb	r3, [r5, #1]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004904:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004908:	78e8      	ldrb	r0, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800490a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800490e:	f895 0020 	ldrb.w	r0, [r5, #32]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004912:	ea46 6600 	orr.w	r6, r6, r0, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004916:	686f      	ldr	r7, [r5, #4]
 8004918:	69ab      	ldr	r3, [r5, #24]
 800491a:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800491c:	6823      	ldr	r3, [r4, #0]
 800491e:	22ca      	movs	r2, #202	; 0xca
 8004920:	625a      	str	r2, [r3, #36]	; 0x24
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	2253      	movs	r2, #83	; 0x53
 8004926:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004928:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800492a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800492e:	d04b      	beq.n	80049c8 <HAL_RTC_SetAlarm_IT+0x2ec>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004930:	6822      	ldr	r2, [r4, #0]
 8004932:	6893      	ldr	r3, [r2, #8]
 8004934:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004938:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800493a:	6822      	ldr	r2, [r4, #0]
 800493c:	68d3      	ldr	r3, [r2, #12]
 800493e:	b2db      	uxtb	r3, r3
 8004940:	f463 7320 	orn	r3, r3, #640	; 0x280
 8004944:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8004946:	f7fd fc8d 	bl	8002264 <HAL_GetTick>
 800494a:	4605      	mov	r5, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800494c:	6823      	ldr	r3, [r4, #0]
 800494e:	68da      	ldr	r2, [r3, #12]
 8004950:	f012 0f02 	tst.w	r2, #2
 8004954:	d169      	bne.n	8004a2a <HAL_RTC_SetAlarm_IT+0x34e>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004956:	f7fd fc85 	bl	8002264 <HAL_GetTick>
 800495a:	1b40      	subs	r0, r0, r5
 800495c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004960:	d9f4      	bls.n	800494c <HAL_RTC_SetAlarm_IT+0x270>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	22ff      	movs	r2, #255	; 0xff
 8004966:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004968:	2003      	movs	r0, #3
 800496a:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 800496e:	2300      	movs	r3, #0
 8004970:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_TIMEOUT;
 8004974:	e07a      	b.n	8004a6c <HAL_RTC_SetAlarm_IT+0x390>
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8004976:	f240 5174 	movw	r1, #1396	; 0x574
 800497a:	4812      	ldr	r0, [pc, #72]	; (80049c4 <HAL_RTC_SetAlarm_IT+0x2e8>)
 800497c:	f7fd f908 	bl	8001b90 <assert_failed>
 8004980:	e7a2      	b.n	80048c8 <HAL_RTC_SetAlarm_IT+0x1ec>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 8004982:	f240 5177 	movw	r1, #1399	; 0x577
 8004986:	480f      	ldr	r0, [pc, #60]	; (80049c4 <HAL_RTC_SetAlarm_IT+0x2e8>)
 8004988:	f7fd f902 	bl	8001b90 <assert_failed>
 800498c:	e7a1      	b.n	80048d2 <HAL_RTC_SetAlarm_IT+0x1f6>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 800498e:	f44f 61af 	mov.w	r1, #1400	; 0x578
 8004992:	480c      	ldr	r0, [pc, #48]	; (80049c4 <HAL_RTC_SetAlarm_IT+0x2e8>)
 8004994:	f7fd f8fc 	bl	8001b90 <assert_failed>
 8004998:	e7a0      	b.n	80048dc <HAL_RTC_SetAlarm_IT+0x200>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 800499a:	f240 517c 	movw	r1, #1404	; 0x57c
 800499e:	4809      	ldr	r0, [pc, #36]	; (80049c4 <HAL_RTC_SetAlarm_IT+0x2e8>)
 80049a0:	f7fd f8f6 	bl	8001b90 <assert_failed>
 80049a4:	e7a5      	b.n	80048f2 <HAL_RTC_SetAlarm_IT+0x216>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 80049a6:	f895 0020 	ldrb.w	r0, [r5, #32]
 80049aa:	f7ff fc3b 	bl	8004224 <RTC_Bcd2ToByte>
 80049ae:	1e43      	subs	r3, r0, #1
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b06      	cmp	r3, #6
 80049b4:	d99d      	bls.n	80048f2 <HAL_RTC_SetAlarm_IT+0x216>
 80049b6:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 80049ba:	4802      	ldr	r0, [pc, #8]	; (80049c4 <HAL_RTC_SetAlarm_IT+0x2e8>)
 80049bc:	f7fd f8e8 	bl	8001b90 <assert_failed>
 80049c0:	e797      	b.n	80048f2 <HAL_RTC_SetAlarm_IT+0x216>
 80049c2:	bf00      	nop
 80049c4:	08009bac 	.word	0x08009bac
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80049c8:	6822      	ldr	r2, [r4, #0]
 80049ca:	6893      	ldr	r3, [r2, #8]
 80049cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049d0:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80049d2:	6822      	ldr	r2, [r4, #0]
 80049d4:	68d3      	ldr	r3, [r2, #12]
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	f463 73c0 	orn	r3, r3, #384	; 0x180
 80049dc:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 80049de:	f7fd fc41 	bl	8002264 <HAL_GetTick>
 80049e2:	4605      	mov	r5, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	f012 0f01 	tst.w	r2, #1
 80049ec:	d10f      	bne.n	8004a0e <HAL_RTC_SetAlarm_IT+0x332>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80049ee:	f7fd fc39 	bl	8002264 <HAL_GetTick>
 80049f2:	1b40      	subs	r0, r0, r5
 80049f4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80049f8:	d9f4      	bls.n	80049e4 <HAL_RTC_SetAlarm_IT+0x308>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049fa:	6823      	ldr	r3, [r4, #0]
 80049fc:	22ff      	movs	r2, #255	; 0xff
 80049fe:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a00:	2003      	movs	r0, #3
 8004a02:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8004a06:	2300      	movs	r3, #0
 8004a08:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_TIMEOUT;
 8004a0c:	e02e      	b.n	8004a6c <HAL_RTC_SetAlarm_IT+0x390>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004a0e:	61de      	str	r6, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004a10:	6823      	ldr	r3, [r4, #0]
 8004a12:	645f      	str	r7, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004a14:	6822      	ldr	r2, [r4, #0]
 8004a16:	6893      	ldr	r3, [r2, #8]
 8004a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a1c:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004a1e:	6822      	ldr	r2, [r4, #0]
 8004a20:	6893      	ldr	r3, [r2, #8]
 8004a22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a26:	6093      	str	r3, [r2, #8]
 8004a28:	e00c      	b.n	8004a44 <HAL_RTC_SetAlarm_IT+0x368>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004a2a:	621e      	str	r6, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004a2c:	6823      	ldr	r3, [r4, #0]
 8004a2e:	649f      	str	r7, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004a30:	6822      	ldr	r2, [r4, #0]
 8004a32:	6893      	ldr	r3, [r2, #8]
 8004a34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a38:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004a3a:	6822      	ldr	r2, [r4, #0]
 8004a3c:	6893      	ldr	r3, [r2, #8]
 8004a3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a42:	6093      	str	r3, [r2, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004a44:	4b0b      	ldr	r3, [pc, #44]	; (8004a74 <HAL_RTC_SetAlarm_IT+0x398>)
 8004a46:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004a4a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004a4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004a58:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a5a:	6823      	ldr	r3, [r4, #0]
 8004a5c:	22ff      	movs	r2, #255	; 0xff
 8004a5e:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8004a60:	2301      	movs	r3, #1
 8004a62:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 8004a66:	2000      	movs	r0, #0
 8004a68:	f884 0020 	strb.w	r0, [r4, #32]
}
 8004a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hrtc);
 8004a70:	2002      	movs	r0, #2
 8004a72:	e7fb      	b.n	8004a6c <HAL_RTC_SetAlarm_IT+0x390>
 8004a74:	58000800 	.word	0x58000800

08004a78 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004a78:	4770      	bx	lr
	...

08004a7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a80:	b082      	sub	sp, #8
 8004a82:	4681      	mov	r9, r0
 8004a84:	460f      	mov	r7, r1
 8004a86:	4616      	mov	r6, r2
 8004a88:	461d      	mov	r5, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a8a:	f7fd fbeb 	bl	8002264 <HAL_GetTick>
 8004a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a90:	442b      	add	r3, r5
 8004a92:	eba3 0800 	sub.w	r8, r3, r0
  tmp_tickstart = HAL_GetTick();
 8004a96:	f7fd fbe5 	bl	8002264 <HAL_GetTick>
 8004a9a:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a9c:	4b2c      	ldr	r3, [pc, #176]	; (8004b50 <SPI_WaitFlagStateUntilTimeout+0xd4>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8004aa4:	fb08 f303 	mul.w	r3, r8, r3
 8004aa8:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004aaa:	f8d9 3000 	ldr.w	r3, [r9]
 8004aae:	689c      	ldr	r4, [r3, #8]
 8004ab0:	ea37 0204 	bics.w	r2, r7, r4
 8004ab4:	bf0c      	ite	eq
 8004ab6:	2401      	moveq	r4, #1
 8004ab8:	2400      	movne	r4, #0
 8004aba:	42b4      	cmp	r4, r6
 8004abc:	d044      	beq.n	8004b48 <SPI_WaitFlagStateUntilTimeout+0xcc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004abe:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004ac2:	d0f4      	beq.n	8004aae <SPI_WaitFlagStateUntilTimeout+0x32>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ac4:	f7fd fbce 	bl	8002264 <HAL_GetTick>
 8004ac8:	eba0 000a 	sub.w	r0, r0, sl
 8004acc:	4540      	cmp	r0, r8
 8004ace:	d207      	bcs.n	8004ae0 <SPI_WaitFlagStateUntilTimeout+0x64>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ad0:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	bf08      	it	eq
 8004ad6:	4698      	moveq	r8, r3
      }
      count--;
 8004ad8:	9b01      	ldr	r3, [sp, #4]
 8004ada:	3b01      	subs	r3, #1
 8004adc:	9301      	str	r3, [sp, #4]
 8004ade:	e7e4      	b.n	8004aaa <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ae0:	f8d9 2000 	ldr.w	r2, [r9]
 8004ae4:	6853      	ldr	r3, [r2, #4]
 8004ae6:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004aea:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aec:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004af0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004af4:	d00c      	beq.n	8004b10 <SPI_WaitFlagStateUntilTimeout+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004af6:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8004afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004afe:	d016      	beq.n	8004b2e <SPI_WaitFlagStateUntilTimeout+0xb2>
        hspi->State = HAL_SPI_STATE_READY;
 8004b00:	2301      	movs	r3, #1
 8004b02:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8004b06:	2300      	movs	r3, #0
 8004b08:	f889 305c 	strb.w	r3, [r9, #92]	; 0x5c
        return HAL_TIMEOUT;
 8004b0c:	2003      	movs	r0, #3
 8004b0e:	e01c      	b.n	8004b4a <SPI_WaitFlagStateUntilTimeout+0xce>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b10:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b18:	d002      	beq.n	8004b20 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b1e:	d1ea      	bne.n	8004af6 <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8004b20:	f8d9 2000 	ldr.w	r2, [r9]
 8004b24:	6813      	ldr	r3, [r2, #0]
 8004b26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b2a:	6013      	str	r3, [r2, #0]
 8004b2c:	e7e3      	b.n	8004af6 <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8004b2e:	f8d9 2000 	ldr.w	r2, [r9]
 8004b32:	6813      	ldr	r3, [r2, #0]
 8004b34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	f8d9 2000 	ldr.w	r2, [r9]
 8004b3e:	6813      	ldr	r3, [r2, #0]
 8004b40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	e7db      	b.n	8004b00 <SPI_WaitFlagStateUntilTimeout+0x84>
    }
  }

  return HAL_OK;
 8004b48:	2000      	movs	r0, #0
}
 8004b4a:	b002      	add	sp, #8
 8004b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b50:	20000004 	.word	0x20000004

08004b54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b58:	b083      	sub	sp, #12
 8004b5a:	4681      	mov	r9, r0
 8004b5c:	460d      	mov	r5, r1
 8004b5e:	4616      	mov	r6, r2
 8004b60:	461f      	mov	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004b62:	2300      	movs	r3, #0
 8004b64:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004b68:	f7fd fb7c 	bl	8002264 <HAL_GetTick>
 8004b6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b6e:	443b      	add	r3, r7
 8004b70:	eba3 0800 	sub.w	r8, r3, r0
  tmp_tickstart = HAL_GetTick();
 8004b74:	f7fd fb76 	bl	8002264 <HAL_GetTick>
 8004b78:	4682      	mov	sl, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004b7a:	f8d9 b000 	ldr.w	fp, [r9]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004b7e:	4b33      	ldr	r3, [pc, #204]	; (8004c4c <SPI_WaitFifoStateUntilTimeout+0xf8>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004b86:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004b8a:	0d1b      	lsrs	r3, r3, #20
 8004b8c:	fb08 f303 	mul.w	r3, r8, r3
 8004b90:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8004b92:	f8d9 3000 	ldr.w	r3, [r9]
 8004b96:	e002      	b.n	8004b9e <SPI_WaitFifoStateUntilTimeout+0x4a>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8004b98:	f1b7 3fff 	cmp.w	r7, #4294967295
 8004b9c:	d110      	bne.n	8004bc0 <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8004b9e:	689c      	ldr	r4, [r3, #8]
 8004ba0:	402c      	ands	r4, r5
 8004ba2:	42b4      	cmp	r4, r6
 8004ba4:	d04e      	beq.n	8004c44 <SPI_WaitFifoStateUntilTimeout+0xf0>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004ba6:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 8004baa:	d1f5      	bne.n	8004b98 <SPI_WaitFifoStateUntilTimeout+0x44>
 8004bac:	2e00      	cmp	r6, #0
 8004bae:	d1f3      	bne.n	8004b98 <SPI_WaitFifoStateUntilTimeout+0x44>
      tmpreg8 = *ptmpreg8;
 8004bb0:	f89b 200c 	ldrb.w	r2, [fp, #12]
 8004bb4:	b2d2      	uxtb	r2, r2
 8004bb6:	f88d 2003 	strb.w	r2, [sp, #3]
      UNUSED(tmpreg8);
 8004bba:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8004bbe:	e7eb      	b.n	8004b98 <SPI_WaitFifoStateUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bc0:	f7fd fb50 	bl	8002264 <HAL_GetTick>
 8004bc4:	eba0 000a 	sub.w	r0, r0, sl
 8004bc8:	4540      	cmp	r0, r8
 8004bca:	d207      	bcs.n	8004bdc <SPI_WaitFifoStateUntilTimeout+0x88>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bcc:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	bf08      	it	eq
 8004bd2:	4698      	moveq	r8, r3
      }
      count--;
 8004bd4:	9b01      	ldr	r3, [sp, #4]
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	9301      	str	r3, [sp, #4]
 8004bda:	e7da      	b.n	8004b92 <SPI_WaitFifoStateUntilTimeout+0x3e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bdc:	f8d9 2000 	ldr.w	r2, [r9]
 8004be0:	6853      	ldr	r3, [r2, #4]
 8004be2:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004be6:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004be8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004bec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bf0:	d00c      	beq.n	8004c0c <SPI_WaitFifoStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bf2:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8004bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bfa:	d016      	beq.n	8004c2a <SPI_WaitFifoStateUntilTimeout+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8004c02:	2300      	movs	r3, #0
 8004c04:	f889 305c 	strb.w	r3, [r9, #92]	; 0x5c
        return HAL_TIMEOUT;
 8004c08:	2003      	movs	r0, #3
 8004c0a:	e01c      	b.n	8004c46 <SPI_WaitFifoStateUntilTimeout+0xf2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c0c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c14:	d002      	beq.n	8004c1c <SPI_WaitFifoStateUntilTimeout+0xc8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c1a:	d1ea      	bne.n	8004bf2 <SPI_WaitFifoStateUntilTimeout+0x9e>
          __HAL_SPI_DISABLE(hspi);
 8004c1c:	f8d9 2000 	ldr.w	r2, [r9]
 8004c20:	6813      	ldr	r3, [r2, #0]
 8004c22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c26:	6013      	str	r3, [r2, #0]
 8004c28:	e7e3      	b.n	8004bf2 <SPI_WaitFifoStateUntilTimeout+0x9e>
          SPI_RESET_CRC(hspi);
 8004c2a:	f8d9 2000 	ldr.w	r2, [r9]
 8004c2e:	6813      	ldr	r3, [r2, #0]
 8004c30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	f8d9 2000 	ldr.w	r2, [r9]
 8004c3a:	6813      	ldr	r3, [r2, #0]
 8004c3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c40:	6013      	str	r3, [r2, #0]
 8004c42:	e7db      	b.n	8004bfc <SPI_WaitFifoStateUntilTimeout+0xa8>
    }
  }

  return HAL_OK;
 8004c44:	2000      	movs	r0, #0
}
 8004c46:	b003      	add	sp, #12
 8004c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c4c:	20000004 	.word	0x20000004

08004c50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c50:	b570      	push	{r4, r5, r6, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	4604      	mov	r4, r0
 8004c56:	460d      	mov	r5, r1
 8004c58:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c5a:	9200      	str	r2, [sp, #0]
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004c64:	f7ff ff76 	bl	8004b54 <SPI_WaitFifoStateUntilTimeout>
 8004c68:	b9b0      	cbnz	r0, 8004c98 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c6a:	9600      	str	r6, [sp, #0]
 8004c6c:	462b      	mov	r3, r5
 8004c6e:	2200      	movs	r2, #0
 8004c70:	2180      	movs	r1, #128	; 0x80
 8004c72:	4620      	mov	r0, r4
 8004c74:	f7ff ff02 	bl	8004a7c <SPI_WaitFlagStateUntilTimeout>
 8004c78:	b9a8      	cbnz	r0, 8004ca6 <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c7a:	9600      	str	r6, [sp, #0]
 8004c7c:	462b      	mov	r3, r5
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004c84:	4620      	mov	r0, r4
 8004c86:	f7ff ff65 	bl	8004b54 <SPI_WaitFifoStateUntilTimeout>
 8004c8a:	b150      	cbz	r0, 8004ca2 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c8c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004c8e:	f043 0320 	orr.w	r3, r3, #32
 8004c92:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c94:	2003      	movs	r0, #3
 8004c96:	e004      	b.n	8004ca2 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c98:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004c9a:	f043 0320 	orr.w	r3, r3, #32
 8004c9e:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ca0:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8004ca2:	b002      	add	sp, #8
 8004ca4:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ca6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004ca8:	f043 0320 	orr.w	r3, r3, #32
 8004cac:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cae:	2003      	movs	r0, #3
 8004cb0:	e7f7      	b.n	8004ca2 <SPI_EndRxTxTransaction+0x52>
	...

08004cb4 <HAL_SPI_Init>:
  if (hspi == NULL)
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	f000 8125 	beq.w	8004f04 <HAL_SPI_Init+0x250>
{
 8004cba:	b510      	push	{r4, lr}
 8004cbc:	4604      	mov	r4, r0
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004cbe:	6802      	ldr	r2, [r0, #0]
 8004cc0:	4b95      	ldr	r3, [pc, #596]	; (8004f18 <HAL_SPI_Init+0x264>)
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d004      	beq.n	8004cd0 <HAL_SPI_Init+0x1c>
 8004cc6:	f240 1145 	movw	r1, #325	; 0x145
 8004cca:	4894      	ldr	r0, [pc, #592]	; (8004f1c <HAL_SPI_Init+0x268>)
 8004ccc:	f7fc ff60 	bl	8001b90 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004cd0:	6863      	ldr	r3, [r4, #4]
 8004cd2:	b11b      	cbz	r3, 8004cdc <HAL_SPI_Init+0x28>
 8004cd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cd8:	f040 80b8 	bne.w	8004e4c <HAL_SPI_Init+0x198>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004cdc:	68a3      	ldr	r3, [r4, #8]
 8004cde:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8004ce2:	d003      	beq.n	8004cec <HAL_SPI_Init+0x38>
 8004ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ce8:	f040 80b6 	bne.w	8004e58 <HAL_SPI_Init+0x1a4>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004cec:	68e3      	ldr	r3, [r4, #12]
 8004cee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004cf2:	d018      	beq.n	8004d26 <HAL_SPI_Init+0x72>
 8004cf4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cf8:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8004cfc:	d013      	beq.n	8004d26 <HAL_SPI_Init+0x72>
 8004cfe:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
 8004d02:	d010      	beq.n	8004d26 <HAL_SPI_Init+0x72>
 8004d04:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8004d08:	d00d      	beq.n	8004d26 <HAL_SPI_Init+0x72>
 8004d0a:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8004d0e:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 8004d12:	d008      	beq.n	8004d26 <HAL_SPI_Init+0x72>
 8004d14:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004d18:	d005      	beq.n	8004d26 <HAL_SPI_Init+0x72>
 8004d1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d22:	f040 809f 	bne.w	8004e64 <HAL_SPI_Init+0x1b0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004d26:	69a3      	ldr	r3, [r4, #24]
 8004d28:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 8004d2c:	d003      	beq.n	8004d36 <HAL_SPI_Init+0x82>
 8004d2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d32:	f040 809d 	bne.w	8004e70 <HAL_SPI_Init+0x1bc>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8004d36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d38:	f033 0308 	bics.w	r3, r3, #8
 8004d3c:	f040 809e 	bne.w	8004e7c <HAL_SPI_Init+0x1c8>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004d40:	69e3      	ldr	r3, [r4, #28]
 8004d42:	f033 0308 	bics.w	r3, r3, #8
 8004d46:	d00a      	beq.n	8004d5e <HAL_SPI_Init+0xaa>
 8004d48:	2b10      	cmp	r3, #16
 8004d4a:	d008      	beq.n	8004d5e <HAL_SPI_Init+0xaa>
 8004d4c:	2b20      	cmp	r3, #32
 8004d4e:	d006      	beq.n	8004d5e <HAL_SPI_Init+0xaa>
 8004d50:	2b30      	cmp	r3, #48	; 0x30
 8004d52:	d004      	beq.n	8004d5e <HAL_SPI_Init+0xaa>
 8004d54:	f240 114b 	movw	r1, #331	; 0x14b
 8004d58:	4870      	ldr	r0, [pc, #448]	; (8004f1c <HAL_SPI_Init+0x268>)
 8004d5a:	f7fc ff19 	bl	8001b90 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004d5e:	6a23      	ldr	r3, [r4, #32]
 8004d60:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8004d64:	d004      	beq.n	8004d70 <HAL_SPI_Init+0xbc>
 8004d66:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004d6a:	486c      	ldr	r0, [pc, #432]	; (8004f1c <HAL_SPI_Init+0x268>)
 8004d6c:	f7fc ff10 	bl	8001b90 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004d70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 8091 	beq.w	8004e9a <HAL_SPI_Init+0x1e6>
 8004d78:	2b10      	cmp	r3, #16
 8004d7a:	f040 8085 	bne.w	8004e88 <HAL_SPI_Init+0x1d4>
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004d7e:	69e3      	ldr	r3, [r4, #28]
 8004d80:	f033 0308 	bics.w	r3, r3, #8
 8004d84:	d00a      	beq.n	8004d9c <HAL_SPI_Init+0xe8>
 8004d86:	2b10      	cmp	r3, #16
 8004d88:	d008      	beq.n	8004d9c <HAL_SPI_Init+0xe8>
 8004d8a:	2b20      	cmp	r3, #32
 8004d8c:	d006      	beq.n	8004d9c <HAL_SPI_Init+0xe8>
 8004d8e:	2b30      	cmp	r3, #48	; 0x30
 8004d90:	d004      	beq.n	8004d9c <HAL_SPI_Init+0xe8>
 8004d92:	f240 115f 	movw	r1, #351	; 0x15f
 8004d96:	4861      	ldr	r0, [pc, #388]	; (8004f1c <HAL_SPI_Init+0x268>)
 8004d98:	f7fc fefa 	bl	8001b90 <assert_failed>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004da0:	6163      	str	r3, [r4, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004da2:	2300      	movs	r3, #0
 8004da4:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004da6:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 80a2 	beq.w	8004ef4 <HAL_SPI_Init+0x240>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004db0:	2302      	movs	r3, #2
 8004db2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8004db6:	6822      	ldr	r2, [r4, #0]
 8004db8:	6813      	ldr	r3, [r2, #0]
 8004dba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dbe:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dc0:	68e3      	ldr	r3, [r4, #12]
 8004dc2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dc6:	f200 80a2 	bhi.w	8004f0e <HAL_SPI_Init+0x25a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004dca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dce:	f000 809b 	beq.w	8004f08 <HAL_SPI_Init+0x254>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004dd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004dda:	6822      	ldr	r2, [r4, #0]
 8004ddc:	6863      	ldr	r3, [r4, #4]
 8004dde:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004de2:	68a0      	ldr	r0, [r4, #8]
 8004de4:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8004de8:	4303      	orrs	r3, r0
 8004dea:	6920      	ldr	r0, [r4, #16]
 8004dec:	f000 0002 	and.w	r0, r0, #2
 8004df0:	4303      	orrs	r3, r0
 8004df2:	6960      	ldr	r0, [r4, #20]
 8004df4:	f000 0001 	and.w	r0, r0, #1
 8004df8:	4303      	orrs	r3, r0
 8004dfa:	69a0      	ldr	r0, [r4, #24]
 8004dfc:	f400 7000 	and.w	r0, r0, #512	; 0x200
 8004e00:	4303      	orrs	r3, r0
 8004e02:	69e0      	ldr	r0, [r4, #28]
 8004e04:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8004e08:	4303      	orrs	r3, r0
 8004e0a:	6a20      	ldr	r0, [r4, #32]
 8004e0c:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8004e10:	4303      	orrs	r3, r0
 8004e12:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004e14:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8004e18:	4303      	orrs	r3, r0
 8004e1a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e1c:	6822      	ldr	r2, [r4, #0]
 8004e1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e20:	f003 0310 	and.w	r3, r3, #16
 8004e24:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004e26:	f000 0008 	and.w	r0, r0, #8
 8004e2a:	4303      	orrs	r3, r0
 8004e2c:	68e0      	ldr	r0, [r4, #12]
 8004e2e:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 8004e32:	4303      	orrs	r3, r0
 8004e34:	8b60      	ldrh	r0, [r4, #26]
 8004e36:	f000 0004 	and.w	r0, r0, #4
 8004e3a:	4303      	orrs	r3, r0
 8004e3c:	430b      	orrs	r3, r1
 8004e3e:	6053      	str	r3, [r2, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e40:	2000      	movs	r0, #0
 8004e42:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e44:	2301      	movs	r3, #1
 8004e46:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8004e4a:	bd10      	pop	{r4, pc}
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004e4c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004e50:	4832      	ldr	r0, [pc, #200]	; (8004f1c <HAL_SPI_Init+0x268>)
 8004e52:	f7fc fe9d 	bl	8001b90 <assert_failed>
 8004e56:	e741      	b.n	8004cdc <HAL_SPI_Init+0x28>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004e58:	f240 1147 	movw	r1, #327	; 0x147
 8004e5c:	482f      	ldr	r0, [pc, #188]	; (8004f1c <HAL_SPI_Init+0x268>)
 8004e5e:	f7fc fe97 	bl	8001b90 <assert_failed>
 8004e62:	e743      	b.n	8004cec <HAL_SPI_Init+0x38>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004e64:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004e68:	482c      	ldr	r0, [pc, #176]	; (8004f1c <HAL_SPI_Init+0x268>)
 8004e6a:	f7fc fe91 	bl	8001b90 <assert_failed>
 8004e6e:	e75a      	b.n	8004d26 <HAL_SPI_Init+0x72>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004e70:	f240 1149 	movw	r1, #329	; 0x149
 8004e74:	4829      	ldr	r0, [pc, #164]	; (8004f1c <HAL_SPI_Init+0x268>)
 8004e76:	f7fc fe8b 	bl	8001b90 <assert_failed>
 8004e7a:	e75c      	b.n	8004d36 <HAL_SPI_Init+0x82>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8004e7c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004e80:	4826      	ldr	r0, [pc, #152]	; (8004f1c <HAL_SPI_Init+0x268>)
 8004e82:	f7fc fe85 	bl	8001b90 <assert_failed>
 8004e86:	e75b      	b.n	8004d40 <HAL_SPI_Init+0x8c>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004e88:	f240 114d 	movw	r1, #333	; 0x14d
 8004e8c:	4823      	ldr	r0, [pc, #140]	; (8004f1c <HAL_SPI_Init+0x268>)
 8004e8e:	f7fc fe7f 	bl	8001b90 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f47f af72 	bne.w	8004d7e <HAL_SPI_Init+0xca>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004e9a:	6923      	ldr	r3, [r4, #16]
 8004e9c:	f033 0302 	bics.w	r3, r3, #2
 8004ea0:	d004      	beq.n	8004eac <HAL_SPI_Init+0x1f8>
 8004ea2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8004ea6:	481d      	ldr	r0, [pc, #116]	; (8004f1c <HAL_SPI_Init+0x268>)
 8004ea8:	f7fc fe72 	bl	8001b90 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004eac:	6963      	ldr	r3, [r4, #20]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d806      	bhi.n	8004ec0 <HAL_SPI_Init+0x20c>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eb2:	6863      	ldr	r3, [r4, #4]
 8004eb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eb8:	d008      	beq.n	8004ecc <HAL_SPI_Init+0x218>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	61e3      	str	r3, [r4, #28]
 8004ebe:	e770      	b.n	8004da2 <HAL_SPI_Init+0xee>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004ec0:	f240 1151 	movw	r1, #337	; 0x151
 8004ec4:	4815      	ldr	r0, [pc, #84]	; (8004f1c <HAL_SPI_Init+0x268>)
 8004ec6:	f7fc fe63 	bl	8001b90 <assert_failed>
 8004eca:	e7f2      	b.n	8004eb2 <HAL_SPI_Init+0x1fe>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004ecc:	69e3      	ldr	r3, [r4, #28]
 8004ece:	f033 0308 	bics.w	r3, r3, #8
 8004ed2:	f43f af66 	beq.w	8004da2 <HAL_SPI_Init+0xee>
 8004ed6:	2b10      	cmp	r3, #16
 8004ed8:	f43f af63 	beq.w	8004da2 <HAL_SPI_Init+0xee>
 8004edc:	2b20      	cmp	r3, #32
 8004ede:	f43f af60 	beq.w	8004da2 <HAL_SPI_Init+0xee>
 8004ee2:	2b30      	cmp	r3, #48	; 0x30
 8004ee4:	f43f af5d 	beq.w	8004da2 <HAL_SPI_Init+0xee>
 8004ee8:	f240 1155 	movw	r1, #341	; 0x155
 8004eec:	480b      	ldr	r0, [pc, #44]	; (8004f1c <HAL_SPI_Init+0x268>)
 8004eee:	f7fc fe4f 	bl	8001b90 <assert_failed>
 8004ef2:	e756      	b.n	8004da2 <HAL_SPI_Init+0xee>
    hspi->Lock = HAL_UNLOCKED;
 8004ef4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8004ef8:	4620      	mov	r0, r4
 8004efa:	f7fc ff65 	bl	8001dc8 <HAL_SPI_MspInit>
 8004efe:	e757      	b.n	8004db0 <HAL_SPI_Init+0xfc>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f00:	2100      	movs	r1, #0
 8004f02:	e768      	b.n	8004dd6 <HAL_SPI_Init+0x122>
    return HAL_ERROR;
 8004f04:	2001      	movs	r0, #1
}
 8004f06:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f0c:	e765      	b.n	8004dda <HAL_SPI_Init+0x126>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f0e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004f12:	d1f5      	bne.n	8004f00 <HAL_SPI_Init+0x24c>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f14:	2100      	movs	r1, #0
 8004f16:	e760      	b.n	8004dda <HAL_SPI_Init+0x126>
 8004f18:	40013000 	.word	0x40013000
 8004f1c:	08009be4 	.word	0x08009be4

08004f20 <HAL_SPI_TransmitReceive>:
{
 8004f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f24:	4604      	mov	r4, r0
 8004f26:	4688      	mov	r8, r1
 8004f28:	4691      	mov	r9, r2
 8004f2a:	461f      	mov	r7, r3
 8004f2c:	9e08      	ldr	r6, [sp, #32]
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8004f2e:	6883      	ldr	r3, [r0, #8]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d167      	bne.n	8005004 <HAL_SPI_TransmitReceive+0xe4>
  __HAL_LOCK(hspi);
 8004f34:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	f000 815d 	beq.w	80051f8 <HAL_SPI_TransmitReceive+0x2d8>
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8004f44:	f7fd f98e 	bl	8002264 <HAL_GetTick>
 8004f48:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 8004f4a:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8004f4e:	b2c0      	uxtb	r0, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f50:	2801      	cmp	r0, #1
 8004f52:	d00b      	beq.n	8004f6c <HAL_SPI_TransmitReceive+0x4c>
 8004f54:	6863      	ldr	r3, [r4, #4]
 8004f56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f5a:	f040 8136 	bne.w	80051ca <HAL_SPI_TransmitReceive+0x2aa>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f5e:	68a3      	ldr	r3, [r4, #8]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f040 813b 	bne.w	80051dc <HAL_SPI_TransmitReceive+0x2bc>
 8004f66:	2804      	cmp	r0, #4
 8004f68:	f040 813a 	bne.w	80051e0 <HAL_SPI_TransmitReceive+0x2c0>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f6c:	f1b8 0f00 	cmp.w	r8, #0
 8004f70:	f000 8138 	beq.w	80051e4 <HAL_SPI_TransmitReceive+0x2c4>
 8004f74:	f1b9 0f00 	cmp.w	r9, #0
 8004f78:	f000 8136 	beq.w	80051e8 <HAL_SPI_TransmitReceive+0x2c8>
 8004f7c:	2f00      	cmp	r7, #0
 8004f7e:	f000 8135 	beq.w	80051ec <HAL_SPI_TransmitReceive+0x2cc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f82:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f8a:	bf1c      	itt	ne
 8004f8c:	2305      	movne	r3, #5
 8004f8e:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f92:	2300      	movs	r3, #0
 8004f94:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f96:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004f9a:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004f9e:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004fa2:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004fa6:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004fa8:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8004faa:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004fac:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004fae:	68e3      	ldr	r3, [r4, #12]
 8004fb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fb4:	d801      	bhi.n	8004fba <HAL_SPI_TransmitReceive+0x9a>
 8004fb6:	2f01      	cmp	r7, #1
 8004fb8:	d92a      	bls.n	8005010 <HAL_SPI_TransmitReceive+0xf0>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fba:	6822      	ldr	r2, [r4, #0]
 8004fbc:	6853      	ldr	r3, [r2, #4]
 8004fbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fc2:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fc4:	6823      	ldr	r3, [r4, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004fcc:	d103      	bne.n	8004fd6 <HAL_SPI_TransmitReceive+0xb6>
    __HAL_SPI_ENABLE(hspi);
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fd4:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fd6:	68e3      	ldr	r3, [r4, #12]
 8004fd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fdc:	d95d      	bls.n	800509a <HAL_SPI_TransmitReceive+0x17a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fde:	6863      	ldr	r3, [r4, #4]
 8004fe0:	b10b      	cbz	r3, 8004fe6 <HAL_SPI_TransmitReceive+0xc6>
 8004fe2:	2f01      	cmp	r7, #1
 8004fe4:	d10a      	bne.n	8004ffc <HAL_SPI_TransmitReceive+0xdc>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004fea:	8812      	ldrh	r2, [r2, #0]
 8004fec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ff0:	3302      	adds	r3, #2
 8004ff2:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8004ff4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004ffc:	2701      	movs	r7, #1
        txallowed = 0U;
 8004ffe:	f04f 0800 	mov.w	r8, #0
 8005002:	e02a      	b.n	800505a <HAL_SPI_TransmitReceive+0x13a>
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8005004:	f240 41f3 	movw	r1, #1267	; 0x4f3
 8005008:	487c      	ldr	r0, [pc, #496]	; (80051fc <HAL_SPI_TransmitReceive+0x2dc>)
 800500a:	f7fc fdc1 	bl	8001b90 <assert_failed>
 800500e:	e791      	b.n	8004f34 <HAL_SPI_TransmitReceive+0x14>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005010:	6822      	ldr	r2, [r4, #0]
 8005012:	6853      	ldr	r3, [r2, #4]
 8005014:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005018:	6053      	str	r3, [r2, #4]
 800501a:	e7d3      	b.n	8004fc4 <HAL_SPI_TransmitReceive+0xa4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800501c:	6822      	ldr	r2, [r4, #0]
 800501e:	6893      	ldr	r3, [r2, #8]
 8005020:	f013 0301 	ands.w	r3, r3, #1
 8005024:	d010      	beq.n	8005048 <HAL_SPI_TransmitReceive+0x128>
 8005026:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800502a:	b289      	uxth	r1, r1
 800502c:	b161      	cbz	r1, 8005048 <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800502e:	68d1      	ldr	r1, [r2, #12]
 8005030:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005032:	8011      	strh	r1, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005034:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005036:	3202      	adds	r2, #2
 8005038:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800503a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800503e:	3a01      	subs	r2, #1
 8005040:	b292      	uxth	r2, r2
 8005042:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
        txallowed = 1U;
 8005046:	461f      	mov	r7, r3
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005048:	f7fd f90c 	bl	8002264 <HAL_GetTick>
 800504c:	1b43      	subs	r3, r0, r5
 800504e:	42b3      	cmp	r3, r6
 8005050:	d303      	bcc.n	800505a <HAL_SPI_TransmitReceive+0x13a>
 8005052:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005056:	f040 80cb 	bne.w	80051f0 <HAL_SPI_TransmitReceive+0x2d0>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800505a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800505c:	b29b      	uxth	r3, r3
 800505e:	b92b      	cbnz	r3, 800506c <HAL_SPI_TransmitReceive+0x14c>
 8005060:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005064:	b29b      	uxth	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 80a5 	beq.w	80051b6 <HAL_SPI_TransmitReceive+0x296>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800506c:	6823      	ldr	r3, [r4, #0]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	f012 0f02 	tst.w	r2, #2
 8005074:	d0d2      	beq.n	800501c <HAL_SPI_TransmitReceive+0xfc>
 8005076:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005078:	b292      	uxth	r2, r2
 800507a:	2a00      	cmp	r2, #0
 800507c:	d0ce      	beq.n	800501c <HAL_SPI_TransmitReceive+0xfc>
 800507e:	2f00      	cmp	r7, #0
 8005080:	d0cc      	beq.n	800501c <HAL_SPI_TransmitReceive+0xfc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005082:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005084:	8812      	ldrh	r2, [r2, #0]
 8005086:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005088:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800508a:	3302      	adds	r3, #2
 800508c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800508e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005090:	3b01      	subs	r3, #1
 8005092:	b29b      	uxth	r3, r3
 8005094:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005096:	4647      	mov	r7, r8
 8005098:	e7c0      	b.n	800501c <HAL_SPI_TransmitReceive+0xfc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800509a:	6863      	ldr	r3, [r4, #4]
 800509c:	b10b      	cbz	r3, 80050a2 <HAL_SPI_TransmitReceive+0x182>
 800509e:	2f01      	cmp	r7, #1
 80050a0:	d10e      	bne.n	80050c0 <HAL_SPI_TransmitReceive+0x1a0>
      if (hspi->TxXferCount > 1U)
 80050a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d90e      	bls.n	80050c8 <HAL_SPI_TransmitReceive+0x1a8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80050ae:	8812      	ldrh	r2, [r2, #0]
 80050b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050b4:	3302      	adds	r3, #2
 80050b6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80050b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050ba:	3b02      	subs	r3, #2
 80050bc:	b29b      	uxth	r3, r3
 80050be:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80050c0:	2701      	movs	r7, #1
        txallowed = 0U;
 80050c2:	f04f 0800 	mov.w	r8, #0
 80050c6:	e043      	b.n	8005150 <HAL_SPI_TransmitReceive+0x230>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80050c8:	6823      	ldr	r3, [r4, #0]
 80050ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80050cc:	7812      	ldrb	r2, [r2, #0]
 80050ce:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80050d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050d2:	3301      	adds	r3, #1
 80050d4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80050d6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050d8:	3b01      	subs	r3, #1
 80050da:	b29b      	uxth	r3, r3
 80050dc:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80050de:	e7ef      	b.n	80050c0 <HAL_SPI_TransmitReceive+0x1a0>
        if (hspi->TxXferCount > 1U)
 80050e0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80050e2:	b292      	uxth	r2, r2
 80050e4:	2a01      	cmp	r2, #1
 80050e6:	d90b      	bls.n	8005100 <HAL_SPI_TransmitReceive+0x1e0>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80050ea:	8812      	ldrh	r2, [r2, #0]
 80050ec:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80050ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050f0:	3302      	adds	r3, #2
 80050f2:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80050f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050f6:	3b02      	subs	r3, #2
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80050fc:	4647      	mov	r7, r8
 80050fe:	e038      	b.n	8005172 <HAL_SPI_TransmitReceive+0x252>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005100:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005102:	7812      	ldrb	r2, [r2, #0]
 8005104:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8005106:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005108:	3301      	adds	r3, #1
 800510a:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800510c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800510e:	3b01      	subs	r3, #1
 8005110:	b29b      	uxth	r3, r3
 8005112:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005114:	4647      	mov	r7, r8
 8005116:	e02c      	b.n	8005172 <HAL_SPI_TransmitReceive+0x252>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005118:	6821      	ldr	r1, [r4, #0]
 800511a:	684a      	ldr	r2, [r1, #4]
 800511c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005120:	604a      	str	r2, [r1, #4]
        txallowed = 1U;
 8005122:	461f      	mov	r7, r3
 8005124:	e00c      	b.n	8005140 <HAL_SPI_TransmitReceive+0x220>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005126:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005128:	7b12      	ldrb	r2, [r2, #12]
 800512a:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr++;
 800512c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800512e:	3201      	adds	r2, #1
 8005130:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8005132:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005136:	3a01      	subs	r2, #1
 8005138:	b292      	uxth	r2, r2
 800513a:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
        txallowed = 1U;
 800513e:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005140:	f7fd f890 	bl	8002264 <HAL_GetTick>
 8005144:	1b40      	subs	r0, r0, r5
 8005146:	42b0      	cmp	r0, r6
 8005148:	d302      	bcc.n	8005150 <HAL_SPI_TransmitReceive+0x230>
 800514a:	f1b6 3fff 	cmp.w	r6, #4294967295
 800514e:	d151      	bne.n	80051f4 <HAL_SPI_TransmitReceive+0x2d4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005150:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005152:	b29b      	uxth	r3, r3
 8005154:	b91b      	cbnz	r3, 800515e <HAL_SPI_TransmitReceive+0x23e>
 8005156:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800515a:	b29b      	uxth	r3, r3
 800515c:	b35b      	cbz	r3, 80051b6 <HAL_SPI_TransmitReceive+0x296>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	689a      	ldr	r2, [r3, #8]
 8005162:	f012 0f02 	tst.w	r2, #2
 8005166:	d004      	beq.n	8005172 <HAL_SPI_TransmitReceive+0x252>
 8005168:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800516a:	b292      	uxth	r2, r2
 800516c:	b10a      	cbz	r2, 8005172 <HAL_SPI_TransmitReceive+0x252>
 800516e:	2f01      	cmp	r7, #1
 8005170:	d0b6      	beq.n	80050e0 <HAL_SPI_TransmitReceive+0x1c0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005172:	6822      	ldr	r2, [r4, #0]
 8005174:	6893      	ldr	r3, [r2, #8]
 8005176:	f013 0301 	ands.w	r3, r3, #1
 800517a:	d0e1      	beq.n	8005140 <HAL_SPI_TransmitReceive+0x220>
 800517c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8005180:	b289      	uxth	r1, r1
 8005182:	2900      	cmp	r1, #0
 8005184:	d0dc      	beq.n	8005140 <HAL_SPI_TransmitReceive+0x220>
        if (hspi->RxXferCount > 1U)
 8005186:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800518a:	b289      	uxth	r1, r1
 800518c:	2901      	cmp	r1, #1
 800518e:	d9ca      	bls.n	8005126 <HAL_SPI_TransmitReceive+0x206>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005190:	68d1      	ldr	r1, [r2, #12]
 8005192:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005194:	8011      	strh	r1, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005196:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005198:	3202      	adds	r2, #2
 800519a:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800519c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80051a0:	3a02      	subs	r2, #2
 80051a2:	b292      	uxth	r2, r2
 80051a4:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80051a8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80051ac:	b292      	uxth	r2, r2
 80051ae:	2a01      	cmp	r2, #1
 80051b0:	d9b2      	bls.n	8005118 <HAL_SPI_TransmitReceive+0x1f8>
        txallowed = 1U;
 80051b2:	461f      	mov	r7, r3
 80051b4:	e7c4      	b.n	8005140 <HAL_SPI_TransmitReceive+0x220>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051b6:	462a      	mov	r2, r5
 80051b8:	4631      	mov	r1, r6
 80051ba:	4620      	mov	r0, r4
 80051bc:	f7ff fd48 	bl	8004c50 <SPI_EndRxTxTransaction>
 80051c0:	b120      	cbz	r0, 80051cc <HAL_SPI_TransmitReceive+0x2ac>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051c2:	2320      	movs	r3, #32
 80051c4:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 80051c6:	2001      	movs	r0, #1
 80051c8:	e000      	b.n	80051cc <HAL_SPI_TransmitReceive+0x2ac>
    errorcode = HAL_BUSY;
 80051ca:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80051cc:	2301      	movs	r3, #1
 80051ce:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80051d2:	2300      	movs	r3, #0
 80051d4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80051d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 80051dc:	2002      	movs	r0, #2
 80051de:	e7f5      	b.n	80051cc <HAL_SPI_TransmitReceive+0x2ac>
 80051e0:	2002      	movs	r0, #2
 80051e2:	e7f3      	b.n	80051cc <HAL_SPI_TransmitReceive+0x2ac>
    errorcode = HAL_ERROR;
 80051e4:	2001      	movs	r0, #1
 80051e6:	e7f1      	b.n	80051cc <HAL_SPI_TransmitReceive+0x2ac>
 80051e8:	2001      	movs	r0, #1
 80051ea:	e7ef      	b.n	80051cc <HAL_SPI_TransmitReceive+0x2ac>
 80051ec:	2001      	movs	r0, #1
 80051ee:	e7ed      	b.n	80051cc <HAL_SPI_TransmitReceive+0x2ac>
        errorcode = HAL_TIMEOUT;
 80051f0:	2003      	movs	r0, #3
 80051f2:	e7eb      	b.n	80051cc <HAL_SPI_TransmitReceive+0x2ac>
        errorcode = HAL_TIMEOUT;
 80051f4:	2003      	movs	r0, #3
 80051f6:	e7e9      	b.n	80051cc <HAL_SPI_TransmitReceive+0x2ac>
  __HAL_LOCK(hspi);
 80051f8:	2002      	movs	r0, #2
 80051fa:	e7ed      	b.n	80051d8 <HAL_SPI_TransmitReceive+0x2b8>
 80051fc:	08009be4 	.word	0x08009be4

08005200 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005200:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005202:	e852 3f00 	ldrex	r3, [r2]
 8005206:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520a:	e842 3100 	strex	r1, r3, [r2]
 800520e:	2900      	cmp	r1, #0
 8005210:	d1f6      	bne.n	8005200 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005212:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005214:	f102 0308 	add.w	r3, r2, #8
 8005218:	e853 3f00 	ldrex	r3, [r3]
 800521c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005220:	3208      	adds	r2, #8
 8005222:	e842 3100 	strex	r1, r3, [r2]
 8005226:	2900      	cmp	r1, #0
 8005228:	d1f3      	bne.n	8005212 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800522a:	2320      	movs	r3, #32
 800522c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 8005230:	4770      	bx	lr

08005232 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005232:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005234:	e852 3f00 	ldrex	r3, [r2]
 8005238:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523c:	e842 3100 	strex	r1, r3, [r2]
 8005240:	2900      	cmp	r1, #0
 8005242:	d1f6      	bne.n	8005232 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005244:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005246:	f102 0308 	add.w	r3, r2, #8
 800524a:	e853 3f00 	ldrex	r3, [r3]
 800524e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005252:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005256:	3208      	adds	r2, #8
 8005258:	e842 3100 	strex	r1, r3, [r2]
 800525c:	2900      	cmp	r1, #0
 800525e:	d1f1      	bne.n	8005244 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005260:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005262:	2b01      	cmp	r3, #1
 8005264:	d006      	beq.n	8005274 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005266:	2320      	movs	r3, #32
 8005268:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800526c:	2300      	movs	r3, #0
 800526e:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005270:	6703      	str	r3, [r0, #112]	; 0x70
}
 8005272:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005274:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005276:	e852 3f00 	ldrex	r3, [r2]
 800527a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527e:	e842 3100 	strex	r1, r3, [r2]
 8005282:	2900      	cmp	r1, #0
 8005284:	d1f6      	bne.n	8005274 <UART_EndRxTransfer+0x42>
 8005286:	e7ee      	b.n	8005266 <UART_EndRxTransfer+0x34>

08005288 <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 8005288:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800528c:	2b20      	cmp	r3, #32
 800528e:	d14c      	bne.n	800532a <HAL_UART_Transmit_DMA+0xa2>
{
 8005290:	b510      	push	{r4, lr}
 8005292:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8005294:	2900      	cmp	r1, #0
 8005296:	d04a      	beq.n	800532e <HAL_UART_Transmit_DMA+0xa6>
 8005298:	2a00      	cmp	r2, #0
 800529a:	d04a      	beq.n	8005332 <HAL_UART_Transmit_DMA+0xaa>
    __HAL_LOCK(huart);
 800529c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d048      	beq.n	8005336 <HAL_UART_Transmit_DMA+0xae>
 80052a4:	2301      	movs	r3, #1
 80052a6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 80052aa:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 80052ac:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 80052b0:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b4:	2300      	movs	r3, #0
 80052b6:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052ba:	2321      	movs	r3, #33	; 0x21
 80052bc:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 80052c0:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80052c2:	b1f3      	cbz	r3, 8005302 <HAL_UART_Transmit_DMA+0x7a>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80052c4:	491d      	ldr	r1, [pc, #116]	; (800533c <HAL_UART_Transmit_DMA+0xb4>)
 80052c6:	62d9      	str	r1, [r3, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80052c8:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80052ca:	491d      	ldr	r1, [pc, #116]	; (8005340 <HAL_UART_Transmit_DMA+0xb8>)
 80052cc:	6319      	str	r1, [r3, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80052ce:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80052d0:	491c      	ldr	r1, [pc, #112]	; (8005344 <HAL_UART_Transmit_DMA+0xbc>)
 80052d2:	6359      	str	r1, [r3, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 80052d4:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80052d6:	2100      	movs	r1, #0
 80052d8:	6399      	str	r1, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80052da:	6801      	ldr	r1, [r0, #0]
 80052dc:	4613      	mov	r3, r2
 80052de:	f101 0228 	add.w	r2, r1, #40	; 0x28
 80052e2:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80052e4:	6f80      	ldr	r0, [r0, #120]	; 0x78
 80052e6:	f7fd f9bf 	bl	8002668 <HAL_DMA_Start_IT>
 80052ea:	b150      	cbz	r0, 8005302 <HAL_UART_Transmit_DMA+0x7a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80052ec:	2310      	movs	r3, #16
 80052ee:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 80052f2:	2300      	movs	r3, #0
 80052f4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 80052f8:	2320      	movs	r3, #32
 80052fa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 80052fe:	2001      	movs	r0, #1
 8005300:	e012      	b.n	8005328 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	2240      	movs	r2, #64	; 0x40
 8005306:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8005308:	2300      	movs	r3, #0
 800530a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800530e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005310:	f102 0308 	add.w	r3, r2, #8
 8005314:	e853 3f00 	ldrex	r3, [r3]
 8005318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531c:	3208      	adds	r2, #8
 800531e:	e842 3100 	strex	r1, r3, [r2]
 8005322:	2900      	cmp	r1, #0
 8005324:	d1f3      	bne.n	800530e <HAL_UART_Transmit_DMA+0x86>
    return HAL_OK;
 8005326:	2000      	movs	r0, #0
}
 8005328:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800532a:	2002      	movs	r0, #2
}
 800532c:	4770      	bx	lr
      return HAL_ERROR;
 800532e:	2001      	movs	r0, #1
 8005330:	e7fa      	b.n	8005328 <HAL_UART_Transmit_DMA+0xa0>
 8005332:	2001      	movs	r0, #1
 8005334:	e7f8      	b.n	8005328 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_LOCK(huart);
 8005336:	2002      	movs	r0, #2
 8005338:	e7f6      	b.n	8005328 <HAL_UART_Transmit_DMA+0xa0>
 800533a:	bf00      	nop
 800533c:	08005349 	.word	0x08005349
 8005340:	08005393 	.word	0x08005393
 8005344:	0800539f 	.word	0x0800539f

08005348 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005348:	b508      	push	{r3, lr}
 800534a:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800534c:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f013 0f20 	tst.w	r3, #32
 8005356:	d118      	bne.n	800538a <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8005358:	2300      	movs	r3, #0
 800535a:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800535e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005360:	f102 0308 	add.w	r3, r2, #8
 8005364:	e853 3f00 	ldrex	r3, [r3]
 8005368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536c:	3208      	adds	r2, #8
 800536e:	e842 3100 	strex	r1, r3, [r2]
 8005372:	2900      	cmp	r1, #0
 8005374:	d1f3      	bne.n	800535e <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005376:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005378:	e852 3f00 	ldrex	r3, [r2]
 800537c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005380:	e842 3100 	strex	r1, r3, [r2]
 8005384:	2900      	cmp	r1, #0
 8005386:	d1f6      	bne.n	8005376 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005388:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800538a:	f7fc fa31 	bl	80017f0 <HAL_UART_TxCpltCallback>
}
 800538e:	e7fb      	b.n	8005388 <UART_DMATransmitCplt+0x40>

08005390 <HAL_UART_TxHalfCpltCallback>:
}
 8005390:	4770      	bx	lr

08005392 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005392:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005394:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005396:	f7ff fffb 	bl	8005390 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800539a:	bd08      	pop	{r3, pc}

0800539c <HAL_UART_ErrorCallback>:
}
 800539c:	4770      	bx	lr

0800539e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800539e:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053a0:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80053a2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80053a6:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f013 0f80 	tst.w	r3, #128	; 0x80
 80053b2:	d001      	beq.n	80053b8 <UART_DMAError+0x1a>
 80053b4:	2a21      	cmp	r2, #33	; 0x21
 80053b6:	d010      	beq.n	80053da <UART_DMAError+0x3c>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80053b8:	6823      	ldr	r3, [r4, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80053c0:	d001      	beq.n	80053c6 <UART_DMAError+0x28>
 80053c2:	2d22      	cmp	r5, #34	; 0x22
 80053c4:	d010      	beq.n	80053e8 <UART_DMAError+0x4a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80053c6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80053ca:	f043 0310 	orr.w	r3, r3, #16
 80053ce:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053d2:	4620      	mov	r0, r4
 80053d4:	f7ff ffe2 	bl	800539c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053d8:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 80053da:	2300      	movs	r3, #0
 80053dc:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80053e0:	4620      	mov	r0, r4
 80053e2:	f7ff ff0d 	bl	8005200 <UART_EndTxTransfer>
 80053e6:	e7e7      	b.n	80053b8 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 80053e8:	2300      	movs	r3, #0
 80053ea:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80053ee:	4620      	mov	r0, r4
 80053f0:	f7ff ff1f 	bl	8005232 <UART_EndRxTransfer>
 80053f4:	e7e7      	b.n	80053c6 <UART_DMAError+0x28>

080053f6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053f6:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053f8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80053fa:	2300      	movs	r3, #0
 80053fc:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005400:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005404:	f7ff ffca 	bl	800539c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005408:	bd08      	pop	{r3, pc}

0800540a <HAL_UARTEx_RxEventCallback>:
}
 800540a:	4770      	bx	lr

0800540c <HAL_UART_IRQHandler>:
{
 800540c:	b570      	push	{r4, r5, r6, lr}
 800540e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005410:	6802      	ldr	r2, [r0, #0]
 8005412:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005414:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005416:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 8005418:	f640 050f 	movw	r5, #2063	; 0x80f
 800541c:	422b      	tst	r3, r5
 800541e:	d10d      	bne.n	800543c <HAL_UART_IRQHandler+0x30>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005420:	f013 0f20 	tst.w	r3, #32
 8005424:	d010      	beq.n	8005448 <HAL_UART_IRQHandler+0x3c>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005426:	f000 0520 	and.w	r5, r0, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800542a:	f001 5680 	and.w	r6, r1, #268435456	; 0x10000000
 800542e:	4335      	orrs	r5, r6
 8005430:	d00a      	beq.n	8005448 <HAL_UART_IRQHandler+0x3c>
      if (huart->RxISR != NULL)
 8005432:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005434:	b38b      	cbz	r3, 800549a <HAL_UART_IRQHandler+0x8e>
        huart->RxISR(huart);
 8005436:	4620      	mov	r0, r4
 8005438:	4798      	blx	r3
 800543a:	e02e      	b.n	800549a <HAL_UART_IRQHandler+0x8e>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800543c:	4db8      	ldr	r5, [pc, #736]	; (8005720 <HAL_UART_IRQHandler+0x314>)
 800543e:	400d      	ands	r5, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005440:	4eb8      	ldr	r6, [pc, #736]	; (8005724 <HAL_UART_IRQHandler+0x318>)
 8005442:	4006      	ands	r6, r0
 8005444:	432e      	orrs	r6, r5
 8005446:	d129      	bne.n	800549c <HAL_UART_IRQHandler+0x90>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005448:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800544a:	2d01      	cmp	r5, #1
 800544c:	f000 80c1 	beq.w	80055d2 <HAL_UART_IRQHandler+0x1c6>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005450:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005454:	d003      	beq.n	800545e <HAL_UART_IRQHandler+0x52>
 8005456:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 800545a:	f040 8152 	bne.w	8005702 <HAL_UART_IRQHandler+0x2f6>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800545e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005462:	d006      	beq.n	8005472 <HAL_UART_IRQHandler+0x66>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005464:	f000 0280 	and.w	r2, r0, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005468:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 800546c:	430a      	orrs	r2, r1
 800546e:	f040 814f 	bne.w	8005710 <HAL_UART_IRQHandler+0x304>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005472:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005476:	d003      	beq.n	8005480 <HAL_UART_IRQHandler+0x74>
 8005478:	f010 0f40 	tst.w	r0, #64	; 0x40
 800547c:	f040 8156 	bne.w	800572c <HAL_UART_IRQHandler+0x320>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005480:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005484:	d003      	beq.n	800548e <HAL_UART_IRQHandler+0x82>
 8005486:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800548a:	f040 8161 	bne.w	8005750 <HAL_UART_IRQHandler+0x344>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800548e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005492:	d002      	beq.n	800549a <HAL_UART_IRQHandler+0x8e>
 8005494:	2800      	cmp	r0, #0
 8005496:	f2c0 815f 	blt.w	8005758 <HAL_UART_IRQHandler+0x34c>
}
 800549a:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800549c:	f013 0f01 	tst.w	r3, #1
 80054a0:	d009      	beq.n	80054b6 <HAL_UART_IRQHandler+0xaa>
 80054a2:	f410 7f80 	tst.w	r0, #256	; 0x100
 80054a6:	d006      	beq.n	80054b6 <HAL_UART_IRQHandler+0xaa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80054a8:	2601      	movs	r6, #1
 80054aa:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054ac:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80054b0:	4332      	orrs	r2, r6
 80054b2:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054b6:	f013 0f02 	tst.w	r3, #2
 80054ba:	d074      	beq.n	80055a6 <HAL_UART_IRQHandler+0x19a>
 80054bc:	f011 0f01 	tst.w	r1, #1
 80054c0:	d014      	beq.n	80054ec <HAL_UART_IRQHandler+0xe0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80054c2:	6822      	ldr	r2, [r4, #0]
 80054c4:	2602      	movs	r6, #2
 80054c6:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054c8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80054cc:	f042 0204 	orr.w	r2, r2, #4
 80054d0:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054d4:	f013 0f04 	tst.w	r3, #4
 80054d8:	d008      	beq.n	80054ec <HAL_UART_IRQHandler+0xe0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80054da:	6822      	ldr	r2, [r4, #0]
 80054dc:	2604      	movs	r6, #4
 80054de:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054e0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80054e4:	f042 0202 	orr.w	r2, r2, #2
 80054e8:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80054ec:	f013 0f08 	tst.w	r3, #8
 80054f0:	d00b      	beq.n	800550a <HAL_UART_IRQHandler+0xfe>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80054f2:	f000 0220 	and.w	r2, r0, #32
 80054f6:	432a      	orrs	r2, r5
 80054f8:	d007      	beq.n	800550a <HAL_UART_IRQHandler+0xfe>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054fa:	6822      	ldr	r2, [r4, #0]
 80054fc:	2508      	movs	r5, #8
 80054fe:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005500:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005504:	432a      	orrs	r2, r5
 8005506:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800550a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800550e:	d00c      	beq.n	800552a <HAL_UART_IRQHandler+0x11e>
 8005510:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8005514:	d009      	beq.n	800552a <HAL_UART_IRQHandler+0x11e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005516:	6822      	ldr	r2, [r4, #0]
 8005518:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800551c:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800551e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005522:	f042 0220 	orr.w	r2, r2, #32
 8005526:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800552a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800552e:	2a00      	cmp	r2, #0
 8005530:	d0b3      	beq.n	800549a <HAL_UART_IRQHandler+0x8e>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005532:	f013 0f20 	tst.w	r3, #32
 8005536:	d00a      	beq.n	800554e <HAL_UART_IRQHandler+0x142>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005538:	f000 0020 	and.w	r0, r0, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800553c:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8005540:	ea50 0301 	orrs.w	r3, r0, r1
 8005544:	d003      	beq.n	800554e <HAL_UART_IRQHandler+0x142>
        if (huart->RxISR != NULL)
 8005546:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005548:	b10b      	cbz	r3, 800554e <HAL_UART_IRQHandler+0x142>
          huart->RxISR(huart);
 800554a:	4620      	mov	r0, r4
 800554c:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800554e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005552:	6822      	ldr	r2, [r4, #0]
 8005554:	6892      	ldr	r2, [r2, #8]
 8005556:	f002 0240 	and.w	r2, r2, #64	; 0x40
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800555a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800555e:	4313      	orrs	r3, r2
 8005560:	d030      	beq.n	80055c4 <HAL_UART_IRQHandler+0x1b8>
        UART_EndRxTransfer(huart);
 8005562:	4620      	mov	r0, r4
 8005564:	f7ff fe65 	bl	8005232 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005570:	d024      	beq.n	80055bc <HAL_UART_IRQHandler+0x1b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005572:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005574:	f102 0308 	add.w	r3, r2, #8
 8005578:	e853 3f00 	ldrex	r3, [r3]
 800557c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005580:	3208      	adds	r2, #8
 8005582:	e842 3100 	strex	r1, r3, [r2]
 8005586:	2900      	cmp	r1, #0
 8005588:	d1f3      	bne.n	8005572 <HAL_UART_IRQHandler+0x166>
          if (huart->hdmarx != NULL)
 800558a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800558c:	b193      	cbz	r3, 80055b4 <HAL_UART_IRQHandler+0x1a8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800558e:	4a66      	ldr	r2, [pc, #408]	; (8005728 <HAL_UART_IRQHandler+0x31c>)
 8005590:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005592:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005594:	f7fd f900 	bl	8002798 <HAL_DMA_Abort_IT>
 8005598:	2800      	cmp	r0, #0
 800559a:	f43f af7e 	beq.w	800549a <HAL_UART_IRQHandler+0x8e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800559e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80055a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80055a2:	4798      	blx	r3
 80055a4:	e779      	b.n	800549a <HAL_UART_IRQHandler+0x8e>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055a6:	f013 0f04 	tst.w	r3, #4
 80055aa:	d09f      	beq.n	80054ec <HAL_UART_IRQHandler+0xe0>
 80055ac:	f011 0f01 	tst.w	r1, #1
 80055b0:	d09c      	beq.n	80054ec <HAL_UART_IRQHandler+0xe0>
 80055b2:	e792      	b.n	80054da <HAL_UART_IRQHandler+0xce>
            HAL_UART_ErrorCallback(huart);
 80055b4:	4620      	mov	r0, r4
 80055b6:	f7ff fef1 	bl	800539c <HAL_UART_ErrorCallback>
 80055ba:	e76e      	b.n	800549a <HAL_UART_IRQHandler+0x8e>
          HAL_UART_ErrorCallback(huart);
 80055bc:	4620      	mov	r0, r4
 80055be:	f7ff feed 	bl	800539c <HAL_UART_ErrorCallback>
 80055c2:	e76a      	b.n	800549a <HAL_UART_IRQHandler+0x8e>
        HAL_UART_ErrorCallback(huart);
 80055c4:	4620      	mov	r0, r4
 80055c6:	f7ff fee9 	bl	800539c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ca:	2300      	movs	r3, #0
 80055cc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80055d0:	e763      	b.n	800549a <HAL_UART_IRQHandler+0x8e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80055d2:	f013 0f10 	tst.w	r3, #16
 80055d6:	f43f af3b 	beq.w	8005450 <HAL_UART_IRQHandler+0x44>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80055da:	f010 0f10 	tst.w	r0, #16
 80055de:	f43f af37 	beq.w	8005450 <HAL_UART_IRQHandler+0x44>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055e2:	2310      	movs	r3, #16
 80055e4:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f013 0f40 	tst.w	r3, #64	; 0x40
 80055ee:	d04e      	beq.n	800568e <HAL_UART_IRQHandler+0x282>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055f0:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80055f2:	6813      	ldr	r3, [r2, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f43f af4e 	beq.w	800549a <HAL_UART_IRQHandler+0x8e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80055fe:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005602:	4299      	cmp	r1, r3
 8005604:	f67f af49 	bls.w	800549a <HAL_UART_IRQHandler+0x8e>
        huart->RxXferCount = nb_remaining_rx_data;
 8005608:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800560c:	6813      	ldr	r3, [r2, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f013 0f20 	tst.w	r3, #32
 8005614:	d131      	bne.n	800567a <HAL_UART_IRQHandler+0x26e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005616:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005618:	e852 3f00 	ldrex	r3, [r2]
 800561c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005620:	e842 3100 	strex	r1, r3, [r2]
 8005624:	2900      	cmp	r1, #0
 8005626:	d1f6      	bne.n	8005616 <HAL_UART_IRQHandler+0x20a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005628:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562a:	f102 0308 	add.w	r3, r2, #8
 800562e:	e853 3f00 	ldrex	r3, [r3]
 8005632:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	3208      	adds	r2, #8
 8005638:	e842 3100 	strex	r1, r3, [r2]
 800563c:	2900      	cmp	r1, #0
 800563e:	d1f3      	bne.n	8005628 <HAL_UART_IRQHandler+0x21c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005640:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005642:	f102 0308 	add.w	r3, r2, #8
 8005646:	e853 3f00 	ldrex	r3, [r3]
 800564a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564e:	3208      	adds	r2, #8
 8005650:	e842 3100 	strex	r1, r3, [r2]
 8005654:	2900      	cmp	r1, #0
 8005656:	d1f3      	bne.n	8005640 <HAL_UART_IRQHandler+0x234>
          huart->RxState = HAL_UART_STATE_READY;
 8005658:	2320      	movs	r3, #32
 800565a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800565e:	2300      	movs	r3, #0
 8005660:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005662:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005664:	e852 3f00 	ldrex	r3, [r2]
 8005668:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566c:	e842 3100 	strex	r1, r3, [r2]
 8005670:	2900      	cmp	r1, #0
 8005672:	d1f6      	bne.n	8005662 <HAL_UART_IRQHandler+0x256>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005674:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005676:	f7fd f855 	bl	8002724 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800567a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800567e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005682:	1ac9      	subs	r1, r1, r3
 8005684:	b289      	uxth	r1, r1
 8005686:	4620      	mov	r0, r4
 8005688:	f7ff febf 	bl	800540a <HAL_UARTEx_RxEventCallback>
 800568c:	e705      	b.n	800549a <HAL_UART_IRQHandler+0x8e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800568e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005692:	b29a      	uxth	r2, r3
      if (  (huart->RxXferCount > 0U)
 8005694:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005698:	b29b      	uxth	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	f43f aefd 	beq.w	800549a <HAL_UART_IRQHandler+0x8e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056a0:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 80056a4:	1a9b      	subs	r3, r3, r2
 80056a6:	b299      	uxth	r1, r3
          &&(nb_rx_data > 0U) )
 80056a8:	2900      	cmp	r1, #0
 80056aa:	f43f aef6 	beq.w	800549a <HAL_UART_IRQHandler+0x8e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056ae:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b0:	e852 3f00 	ldrex	r3, [r2]
 80056b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b8:	e842 3000 	strex	r0, r3, [r2]
 80056bc:	2800      	cmp	r0, #0
 80056be:	d1f6      	bne.n	80056ae <HAL_UART_IRQHandler+0x2a2>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80056c0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c2:	f102 0308 	add.w	r3, r2, #8
 80056c6:	e853 3f00 	ldrex	r3, [r3]
 80056ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056ce:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d2:	3208      	adds	r2, #8
 80056d4:	e842 3000 	strex	r0, r3, [r2]
 80056d8:	2800      	cmp	r0, #0
 80056da:	d1f1      	bne.n	80056c0 <HAL_UART_IRQHandler+0x2b4>
        huart->RxState = HAL_UART_STATE_READY;
 80056dc:	2320      	movs	r3, #32
 80056de:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056e2:	2300      	movs	r3, #0
 80056e4:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 80056e6:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056e8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ea:	e852 3f00 	ldrex	r3, [r2]
 80056ee:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f2:	e842 3000 	strex	r0, r3, [r2]
 80056f6:	2800      	cmp	r0, #0
 80056f8:	d1f6      	bne.n	80056e8 <HAL_UART_IRQHandler+0x2dc>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056fa:	4620      	mov	r0, r4
 80056fc:	f7ff fe85 	bl	800540a <HAL_UARTEx_RxEventCallback>
 8005700:	e6cb      	b.n	800549a <HAL_UART_IRQHandler+0x8e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005702:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005706:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8005708:	4620      	mov	r0, r4
 800570a:	f000 fc61 	bl	8005fd0 <HAL_UARTEx_WakeupCallback>
    return;
 800570e:	e6c4      	b.n	800549a <HAL_UART_IRQHandler+0x8e>
    if (huart->TxISR != NULL)
 8005710:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005712:	2b00      	cmp	r3, #0
 8005714:	f43f aec1 	beq.w	800549a <HAL_UART_IRQHandler+0x8e>
      huart->TxISR(huart);
 8005718:	4620      	mov	r0, r4
 800571a:	4798      	blx	r3
 800571c:	e6bd      	b.n	800549a <HAL_UART_IRQHandler+0x8e>
 800571e:	bf00      	nop
 8005720:	10000001 	.word	0x10000001
 8005724:	04000120 	.word	0x04000120
 8005728:	080053f7 	.word	0x080053f7
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800572c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572e:	e852 3f00 	ldrex	r3, [r2]
 8005732:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005736:	e842 3100 	strex	r1, r3, [r2]
 800573a:	2900      	cmp	r1, #0
 800573c:	d1f6      	bne.n	800572c <HAL_UART_IRQHandler+0x320>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800573e:	2320      	movs	r3, #32
 8005740:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005744:	2300      	movs	r3, #0
 8005746:	6763      	str	r3, [r4, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005748:	4620      	mov	r0, r4
 800574a:	f7fc f851 	bl	80017f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800574e:	e6a4      	b.n	800549a <HAL_UART_IRQHandler+0x8e>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005750:	4620      	mov	r0, r4
 8005752:	f000 fc3f 	bl	8005fd4 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8005756:	e6a0      	b.n	800549a <HAL_UART_IRQHandler+0x8e>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005758:	4620      	mov	r0, r4
 800575a:	f000 fc3a 	bl	8005fd2 <HAL_UARTEx_RxFifoFullCallback>
    return;
 800575e:	e69c      	b.n	800549a <HAL_UART_IRQHandler+0x8e>

08005760 <UART_SetConfig>:
{
 8005760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005764:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005766:	6842      	ldr	r2, [r0, #4]
 8005768:	4ba8      	ldr	r3, [pc, #672]	; (8005a0c <UART_SetConfig+0x2ac>)
 800576a:	429a      	cmp	r2, r3
 800576c:	f200 808f 	bhi.w	800588e <UART_SetConfig+0x12e>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005770:	68a3      	ldr	r3, [r4, #8]
 8005772:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005776:	d007      	beq.n	8005788 <UART_SetConfig+0x28>
 8005778:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800577c:	d004      	beq.n	8005788 <UART_SetConfig+0x28>
 800577e:	f640 411d 	movw	r1, #3101	; 0xc1d
 8005782:	48a3      	ldr	r0, [pc, #652]	; (8005a10 <UART_SetConfig+0x2b0>)
 8005784:	f7fc fa04 	bl	8001b90 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005788:	6822      	ldr	r2, [r4, #0]
 800578a:	4ba2      	ldr	r3, [pc, #648]	; (8005a14 <UART_SetConfig+0x2b4>)
 800578c:	429a      	cmp	r2, r3
 800578e:	f000 8084 	beq.w	800589a <UART_SetConfig+0x13a>
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8005792:	68e3      	ldr	r3, [r4, #12]
 8005794:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8005798:	d003      	beq.n	80057a2 <UART_SetConfig+0x42>
 800579a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800579e:	f040 8086 	bne.w	80058ae <UART_SetConfig+0x14e>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80057a2:	6a23      	ldr	r3, [r4, #32]
 80057a4:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 80057a8:	d004      	beq.n	80057b4 <UART_SetConfig+0x54>
 80057aa:	f640 4126 	movw	r1, #3110	; 0xc26
 80057ae:	4898      	ldr	r0, [pc, #608]	; (8005a10 <UART_SetConfig+0x2b0>)
 80057b0:	f7fc f9ee 	bl	8001b90 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80057b4:	6923      	ldr	r3, [r4, #16]
 80057b6:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80057ba:	d002      	beq.n	80057c2 <UART_SetConfig+0x62>
 80057bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80057c0:	d17b      	bne.n	80058ba <UART_SetConfig+0x15a>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80057c2:	6963      	ldr	r3, [r4, #20]
 80057c4:	f033 020c 	bics.w	r2, r3, #12
 80057c8:	d100      	bne.n	80057cc <UART_SetConfig+0x6c>
 80057ca:	b923      	cbnz	r3, 80057d6 <UART_SetConfig+0x76>
 80057cc:	f640 412e 	movw	r1, #3118	; 0xc2e
 80057d0:	488f      	ldr	r0, [pc, #572]	; (8005a10 <UART_SetConfig+0x2b0>)
 80057d2:	f7fc f9dd 	bl	8001b90 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80057d6:	69a3      	ldr	r3, [r4, #24]
 80057d8:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 80057dc:	d007      	beq.n	80057ee <UART_SetConfig+0x8e>
 80057de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057e2:	d004      	beq.n	80057ee <UART_SetConfig+0x8e>
 80057e4:	f640 412f 	movw	r1, #3119	; 0xc2f
 80057e8:	4889      	ldr	r0, [pc, #548]	; (8005a10 <UART_SetConfig+0x2b0>)
 80057ea:	f7fc f9d1 	bl	8001b90 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80057ee:	69e3      	ldr	r3, [r4, #28]
 80057f0:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 80057f4:	d004      	beq.n	8005800 <UART_SetConfig+0xa0>
 80057f6:	f44f 6143 	mov.w	r1, #3120	; 0xc30
 80057fa:	4885      	ldr	r0, [pc, #532]	; (8005a10 <UART_SetConfig+0x2b0>)
 80057fc:	f7fc f9c8 	bl	8001b90 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8005800:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005802:	2b0b      	cmp	r3, #11
 8005804:	d85f      	bhi.n	80058c6 <UART_SetConfig+0x166>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005806:	6821      	ldr	r1, [r4, #0]
 8005808:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800580a:	68a3      	ldr	r3, [r4, #8]
 800580c:	6922      	ldr	r2, [r4, #16]
 800580e:	4313      	orrs	r3, r2
 8005810:	6962      	ldr	r2, [r4, #20]
 8005812:	4313      	orrs	r3, r2
 8005814:	69e2      	ldr	r2, [r4, #28]
 8005816:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005818:	4a7f      	ldr	r2, [pc, #508]	; (8005a18 <UART_SetConfig+0x2b8>)
 800581a:	4002      	ands	r2, r0
 800581c:	4313      	orrs	r3, r2
 800581e:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005820:	6822      	ldr	r2, [r4, #0]
 8005822:	6853      	ldr	r3, [r2, #4]
 8005824:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005828:	68e1      	ldr	r1, [r4, #12]
 800582a:	430b      	orrs	r3, r1
 800582c:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800582e:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005830:	6822      	ldr	r2, [r4, #0]
 8005832:	4b78      	ldr	r3, [pc, #480]	; (8005a14 <UART_SetConfig+0x2b4>)
 8005834:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 8005836:	bf1c      	itt	ne
 8005838:	6a23      	ldrne	r3, [r4, #32]
 800583a:	4319      	orrne	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800583c:	6893      	ldr	r3, [r2, #8]
 800583e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005842:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005846:	430b      	orrs	r3, r1
 8005848:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800584a:	6822      	ldr	r2, [r4, #0]
 800584c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800584e:	f023 030f 	bic.w	r3, r3, #15
 8005852:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005854:	430b      	orrs	r3, r1
 8005856:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	4a70      	ldr	r2, [pc, #448]	; (8005a1c <UART_SetConfig+0x2bc>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d038      	beq.n	80058d2 <UART_SetConfig+0x172>
 8005860:	4a6c      	ldr	r2, [pc, #432]	; (8005a14 <UART_SetConfig+0x2b4>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d047      	beq.n	80058f6 <UART_SetConfig+0x196>
 8005866:	2310      	movs	r3, #16
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005868:	69e0      	ldr	r0, [r4, #28]
 800586a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800586e:	f000 809b 	beq.w	80059a8 <UART_SetConfig+0x248>
    switch (clocksource)
 8005872:	3b01      	subs	r3, #1
 8005874:	2b07      	cmp	r3, #7
 8005876:	f200 810c 	bhi.w	8005a92 <UART_SetConfig+0x332>
 800587a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800587e:	00d7      	.short	0x00d7
 8005880:	010a00fc 	.word	0x010a00fc
 8005884:	010a00f9 	.word	0x010a00f9
 8005888:	010a010a 	.word	0x010a010a
 800588c:	00c4      	.short	0x00c4
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800588e:	f640 411c 	movw	r1, #3100	; 0xc1c
 8005892:	485f      	ldr	r0, [pc, #380]	; (8005a10 <UART_SetConfig+0x2b0>)
 8005894:	f7fc f97c 	bl	8001b90 <assert_failed>
 8005898:	e76a      	b.n	8005770 <UART_SetConfig+0x10>
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800589a:	68e3      	ldr	r3, [r4, #12]
 800589c:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 80058a0:	d088      	beq.n	80057b4 <UART_SetConfig+0x54>
 80058a2:	f640 4121 	movw	r1, #3105	; 0xc21
 80058a6:	485a      	ldr	r0, [pc, #360]	; (8005a10 <UART_SetConfig+0x2b0>)
 80058a8:	f7fc f972 	bl	8001b90 <assert_failed>
 80058ac:	e782      	b.n	80057b4 <UART_SetConfig+0x54>
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80058ae:	f640 4125 	movw	r1, #3109	; 0xc25
 80058b2:	4857      	ldr	r0, [pc, #348]	; (8005a10 <UART_SetConfig+0x2b0>)
 80058b4:	f7fc f96c 	bl	8001b90 <assert_failed>
 80058b8:	e773      	b.n	80057a2 <UART_SetConfig+0x42>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80058ba:	f640 412d 	movw	r1, #3117	; 0xc2d
 80058be:	4854      	ldr	r0, [pc, #336]	; (8005a10 <UART_SetConfig+0x2b0>)
 80058c0:	f7fc f966 	bl	8001b90 <assert_failed>
 80058c4:	e77d      	b.n	80057c2 <UART_SetConfig+0x62>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 80058c6:	f640 4131 	movw	r1, #3121	; 0xc31
 80058ca:	4851      	ldr	r0, [pc, #324]	; (8005a10 <UART_SetConfig+0x2b0>)
 80058cc:	f7fc f960 	bl	8001b90 <assert_failed>
 80058d0:	e799      	b.n	8005806 <UART_SetConfig+0xa6>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80058d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058d6:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80058da:	f002 0203 	and.w	r2, r2, #3
 80058de:	2a03      	cmp	r2, #3
 80058e0:	d807      	bhi.n	80058f2 <UART_SetConfig+0x192>
 80058e2:	e8df f012 	tbh	[pc, r2, lsl #1]
 80058e6:	0051      	.short	0x0051
 80058e8:	00dc0004 	.word	0x00dc0004
 80058ec:	00de      	.short	0x00de
 80058ee:	2304      	movs	r3, #4
 80058f0:	e7ba      	b.n	8005868 <UART_SetConfig+0x108>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058f2:	2310      	movs	r3, #16
 80058f4:	e7b8      	b.n	8005868 <UART_SetConfig+0x108>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80058f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058fe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005902:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005906:	d04d      	beq.n	80059a4 <UART_SetConfig+0x244>
 8005908:	d80a      	bhi.n	8005920 <UART_SetConfig+0x1c0>
 800590a:	2b00      	cmp	r3, #0
 800590c:	d044      	beq.n	8005998 <UART_SetConfig+0x238>
 800590e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005912:	bf18      	it	ne
 8005914:	2001      	movne	r0, #1
 8005916:	f040 80a1 	bne.w	8005a5c <UART_SetConfig+0x2fc>
        pclk = HAL_RCC_GetSysClockFreq();
 800591a:	f7fd fa17 	bl	8002d4c <HAL_RCC_GetSysClockFreq>
        break;
 800591e:	e03d      	b.n	800599c <UART_SetConfig+0x23c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005920:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005924:	d12e      	bne.n	8005984 <UART_SetConfig+0x224>
        pclk = (uint32_t) LSE_VALUE;
 8005926:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800592a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800592c:	4b3c      	ldr	r3, [pc, #240]	; (8005a20 <UART_SetConfig+0x2c0>)
 800592e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005932:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005936:	6865      	ldr	r5, [r4, #4]
 8005938:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800593c:	4299      	cmp	r1, r3
 800593e:	f200 809c 	bhi.w	8005a7a <UART_SetConfig+0x31a>
 8005942:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8005946:	f200 809a 	bhi.w	8005a7e <UART_SetConfig+0x31e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800594a:	f04f 0800 	mov.w	r8, #0
 800594e:	b292      	uxth	r2, r2
 8005950:	2300      	movs	r3, #0
 8005952:	4641      	mov	r1, r8
 8005954:	f7fa fc64 	bl	8000220 <__aeabi_uldivmod>
 8005958:	020f      	lsls	r7, r1, #8
 800595a:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 800595e:	0206      	lsls	r6, r0, #8
 8005960:	0868      	lsrs	r0, r5, #1
 8005962:	462a      	mov	r2, r5
 8005964:	4643      	mov	r3, r8
 8005966:	1830      	adds	r0, r6, r0
 8005968:	f147 0100 	adc.w	r1, r7, #0
 800596c:	f7fa fc58 	bl	8000220 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005970:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8005974:	4b2b      	ldr	r3, [pc, #172]	; (8005a24 <UART_SetConfig+0x2c4>)
 8005976:	429a      	cmp	r2, r3
 8005978:	f200 8083 	bhi.w	8005a82 <UART_SetConfig+0x322>
          huart->Instance->BRR = usartdiv;
 800597c:	6823      	ldr	r3, [r4, #0]
 800597e:	60d8      	str	r0, [r3, #12]
 8005980:	4640      	mov	r0, r8
 8005982:	e06b      	b.n	8005a5c <UART_SetConfig+0x2fc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005984:	2001      	movs	r0, #1
 8005986:	e069      	b.n	8005a5c <UART_SetConfig+0x2fc>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005988:	4a22      	ldr	r2, [pc, #136]	; (8005a14 <UART_SetConfig+0x2b4>)
 800598a:	4293      	cmp	r3, r2
 800598c:	bf18      	it	ne
 800598e:	2301      	movne	r3, #1
 8005990:	f47f af6a 	bne.w	8005868 <UART_SetConfig+0x108>
 8005994:	2001      	movs	r0, #1
 8005996:	e061      	b.n	8005a5c <UART_SetConfig+0x2fc>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005998:	f7fe f814 	bl	80039c4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800599c:	2800      	cmp	r0, #0
 800599e:	d1c4      	bne.n	800592a <UART_SetConfig+0x1ca>
 80059a0:	2000      	movs	r0, #0
 80059a2:	e05b      	b.n	8005a5c <UART_SetConfig+0x2fc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059a4:	4820      	ldr	r0, [pc, #128]	; (8005a28 <UART_SetConfig+0x2c8>)
 80059a6:	e7c0      	b.n	800592a <UART_SetConfig+0x1ca>
    switch (clocksource)
 80059a8:	3b01      	subs	r3, #1
 80059aa:	2b07      	cmp	r3, #7
 80059ac:	d86b      	bhi.n	8005a86 <UART_SetConfig+0x326>
 80059ae:	e8df f003 	tbb	[pc, r3]
 80059b2:	2804      	.short	0x2804
 80059b4:	6a6a256a 	.word	0x6a6a256a
 80059b8:	086a      	.short	0x086a
        pclk = HAL_RCC_GetPCLK2Freq();
 80059ba:	f7fe f815 	bl	80039e8 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80059be:	2800      	cmp	r0, #0
 80059c0:	d063      	beq.n	8005a8a <UART_SetConfig+0x32a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059c2:	6862      	ldr	r2, [r4, #4]
 80059c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80059c6:	4b16      	ldr	r3, [pc, #88]	; (8005a20 <UART_SetConfig+0x2c0>)
 80059c8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80059cc:	fbb0 f0f3 	udiv	r0, r0, r3
 80059d0:	0853      	lsrs	r3, r2, #1
 80059d2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80059d6:	fbb0 f0f2 	udiv	r0, r0, r2
 80059da:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059dc:	f1a3 0110 	sub.w	r1, r3, #16
 80059e0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80059e4:	4291      	cmp	r1, r2
 80059e6:	d852      	bhi.n	8005a8e <UART_SetConfig+0x32e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059e8:	f020 000f 	bic.w	r0, r0, #15
 80059ec:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 80059ee:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059f0:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80059f4:	4318      	orrs	r0, r3
 80059f6:	60d0      	str	r0, [r2, #12]
 80059f8:	2000      	movs	r0, #0
 80059fa:	e02f      	b.n	8005a5c <UART_SetConfig+0x2fc>
        pclk = HAL_RCC_GetSysClockFreq();
 80059fc:	f7fd f9a6 	bl	8002d4c <HAL_RCC_GetSysClockFreq>
        break;
 8005a00:	e7dd      	b.n	80059be <UART_SetConfig+0x25e>
        pclk = (uint32_t) HSI_VALUE;
 8005a02:	4809      	ldr	r0, [pc, #36]	; (8005a28 <UART_SetConfig+0x2c8>)
 8005a04:	e7dd      	b.n	80059c2 <UART_SetConfig+0x262>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a06:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005a0a:	e012      	b.n	8005a32 <UART_SetConfig+0x2d2>
 8005a0c:	007a1200 	.word	0x007a1200
 8005a10:	08009c1c 	.word	0x08009c1c
 8005a14:	40008000 	.word	0x40008000
 8005a18:	cfff69f3 	.word	0xcfff69f3
 8005a1c:	40013800 	.word	0x40013800
 8005a20:	08009c58 	.word	0x08009c58
 8005a24:	000ffcff 	.word	0x000ffcff
 8005a28:	00f42400 	.word	0x00f42400
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a2c:	f7fd ffdc 	bl	80039e8 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8005a30:	b388      	cbz	r0, 8005a96 <UART_SetConfig+0x336>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a32:	6863      	ldr	r3, [r4, #4]
 8005a34:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005a36:	4a1c      	ldr	r2, [pc, #112]	; (8005aa8 <UART_SetConfig+0x348>)
 8005a38:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8005a3c:	fbb0 f0f2 	udiv	r0, r0, r2
 8005a40:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005a44:	fbb0 f0f3 	udiv	r0, r0, r3
 8005a48:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a4a:	f1a0 0210 	sub.w	r2, r0, #16
 8005a4e:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d821      	bhi.n	8005a9a <UART_SetConfig+0x33a>
        huart->Instance->BRR = usartdiv;
 8005a56:	6823      	ldr	r3, [r4, #0]
 8005a58:	60d8      	str	r0, [r3, #12]
 8005a5a:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005a62:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8005a66:	2300      	movs	r3, #0
 8005a68:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8005a6a:	6763      	str	r3, [r4, #116]	; 0x74
}
 8005a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pclk = HAL_RCC_GetSysClockFreq();
 8005a70:	f7fd f96c 	bl	8002d4c <HAL_RCC_GetSysClockFreq>
        break;
 8005a74:	e7dc      	b.n	8005a30 <UART_SetConfig+0x2d0>
        pclk = (uint32_t) HSI_VALUE;
 8005a76:	480d      	ldr	r0, [pc, #52]	; (8005aac <UART_SetConfig+0x34c>)
 8005a78:	e7db      	b.n	8005a32 <UART_SetConfig+0x2d2>
        ret = HAL_ERROR;
 8005a7a:	2001      	movs	r0, #1
 8005a7c:	e7ee      	b.n	8005a5c <UART_SetConfig+0x2fc>
 8005a7e:	2001      	movs	r0, #1
 8005a80:	e7ec      	b.n	8005a5c <UART_SetConfig+0x2fc>
          ret = HAL_ERROR;
 8005a82:	2001      	movs	r0, #1
 8005a84:	e7ea      	b.n	8005a5c <UART_SetConfig+0x2fc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a86:	2001      	movs	r0, #1
 8005a88:	e7e8      	b.n	8005a5c <UART_SetConfig+0x2fc>
 8005a8a:	2000      	movs	r0, #0
 8005a8c:	e7e6      	b.n	8005a5c <UART_SetConfig+0x2fc>
        ret = HAL_ERROR;
 8005a8e:	2001      	movs	r0, #1
 8005a90:	e7e4      	b.n	8005a5c <UART_SetConfig+0x2fc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a92:	2001      	movs	r0, #1
 8005a94:	e7e2      	b.n	8005a5c <UART_SetConfig+0x2fc>
 8005a96:	2000      	movs	r0, #0
 8005a98:	e7e0      	b.n	8005a5c <UART_SetConfig+0x2fc>
        ret = HAL_ERROR;
 8005a9a:	2001      	movs	r0, #1
 8005a9c:	e7de      	b.n	8005a5c <UART_SetConfig+0x2fc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	e6e2      	b.n	8005868 <UART_SetConfig+0x108>
 8005aa2:	2308      	movs	r3, #8
 8005aa4:	e6e0      	b.n	8005868 <UART_SetConfig+0x108>
 8005aa6:	bf00      	nop
 8005aa8:	08009c58 	.word	0x08009c58
 8005aac:	00f42400 	.word	0x00f42400

08005ab0 <UART_AdvFeatureConfig>:
{
 8005ab0:	b510      	push	{r4, lr}
 8005ab2:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8005ab4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005ab6:	2bff      	cmp	r3, #255	; 0xff
 8005ab8:	f200 80ae 	bhi.w	8005c18 <UART_AdvFeatureConfig+0x168>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005abc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005abe:	f013 0f01 	tst.w	r3, #1
 8005ac2:	d00f      	beq.n	8005ae4 <UART_AdvFeatureConfig+0x34>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8005ac4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005ac6:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8005aca:	d004      	beq.n	8005ad6 <UART_AdvFeatureConfig+0x26>
 8005acc:	f640 41f9 	movw	r1, #3321	; 0xcf9
 8005ad0:	485e      	ldr	r0, [pc, #376]	; (8005c4c <UART_AdvFeatureConfig+0x19c>)
 8005ad2:	f7fc f85d 	bl	8001b90 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ad6:	6822      	ldr	r2, [r4, #0]
 8005ad8:	6853      	ldr	r3, [r2, #4]
 8005ada:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ade:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005ae0:	430b      	orrs	r3, r1
 8005ae2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ae4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005ae6:	f013 0f02 	tst.w	r3, #2
 8005aea:	d00f      	beq.n	8005b0c <UART_AdvFeatureConfig+0x5c>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8005aec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005aee:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8005af2:	d004      	beq.n	8005afe <UART_AdvFeatureConfig+0x4e>
 8005af4:	f44f 6150 	mov.w	r1, #3328	; 0xd00
 8005af8:	4854      	ldr	r0, [pc, #336]	; (8005c4c <UART_AdvFeatureConfig+0x19c>)
 8005afa:	f7fc f849 	bl	8001b90 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005afe:	6822      	ldr	r2, [r4, #0]
 8005b00:	6853      	ldr	r3, [r2, #4]
 8005b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b06:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005b08:	430b      	orrs	r3, r1
 8005b0a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005b0e:	f013 0f04 	tst.w	r3, #4
 8005b12:	d00f      	beq.n	8005b34 <UART_AdvFeatureConfig+0x84>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8005b14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b16:	f433 2380 	bics.w	r3, r3, #262144	; 0x40000
 8005b1a:	d004      	beq.n	8005b26 <UART_AdvFeatureConfig+0x76>
 8005b1c:	f640 5107 	movw	r1, #3335	; 0xd07
 8005b20:	484a      	ldr	r0, [pc, #296]	; (8005c4c <UART_AdvFeatureConfig+0x19c>)
 8005b22:	f7fc f835 	bl	8001b90 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b26:	6822      	ldr	r2, [r4, #0]
 8005b28:	6853      	ldr	r3, [r2, #4]
 8005b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b30:	430b      	orrs	r3, r1
 8005b32:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005b36:	f013 0f08 	tst.w	r3, #8
 8005b3a:	d00f      	beq.n	8005b5c <UART_AdvFeatureConfig+0xac>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8005b3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005b3e:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8005b42:	d004      	beq.n	8005b4e <UART_AdvFeatureConfig+0x9e>
 8005b44:	f640 510e 	movw	r1, #3342	; 0xd0e
 8005b48:	4840      	ldr	r0, [pc, #256]	; (8005c4c <UART_AdvFeatureConfig+0x19c>)
 8005b4a:	f7fc f821 	bl	8001b90 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b4e:	6822      	ldr	r2, [r4, #0]
 8005b50:	6853      	ldr	r3, [r2, #4]
 8005b52:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005b58:	430b      	orrs	r3, r1
 8005b5a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005b5e:	f013 0f10 	tst.w	r3, #16
 8005b62:	d00f      	beq.n	8005b84 <UART_AdvFeatureConfig+0xd4>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8005b64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b66:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8005b6a:	d004      	beq.n	8005b76 <UART_AdvFeatureConfig+0xc6>
 8005b6c:	f640 5115 	movw	r1, #3349	; 0xd15
 8005b70:	4836      	ldr	r0, [pc, #216]	; (8005c4c <UART_AdvFeatureConfig+0x19c>)
 8005b72:	f7fc f80d 	bl	8001b90 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b76:	6822      	ldr	r2, [r4, #0]
 8005b78:	6893      	ldr	r3, [r2, #8]
 8005b7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b7e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005b80:	430b      	orrs	r3, r1
 8005b82:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005b86:	f013 0f20 	tst.w	r3, #32
 8005b8a:	d00f      	beq.n	8005bac <UART_AdvFeatureConfig+0xfc>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8005b8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b8e:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8005b92:	d004      	beq.n	8005b9e <UART_AdvFeatureConfig+0xee>
 8005b94:	f640 511c 	movw	r1, #3356	; 0xd1c
 8005b98:	482c      	ldr	r0, [pc, #176]	; (8005c4c <UART_AdvFeatureConfig+0x19c>)
 8005b9a:	f7fb fff9 	bl	8001b90 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b9e:	6822      	ldr	r2, [r4, #0]
 8005ba0:	6893      	ldr	r3, [r2, #8]
 8005ba2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ba6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005ba8:	430b      	orrs	r3, r1
 8005baa:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005bae:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005bb2:	d01c      	beq.n	8005bee <UART_AdvFeatureConfig+0x13e>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8005bb4:	6822      	ldr	r2, [r4, #0]
 8005bb6:	4b26      	ldr	r3, [pc, #152]	; (8005c50 <UART_AdvFeatureConfig+0x1a0>)
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d004      	beq.n	8005bc6 <UART_AdvFeatureConfig+0x116>
 8005bbc:	f640 5123 	movw	r1, #3363	; 0xd23
 8005bc0:	4822      	ldr	r0, [pc, #136]	; (8005c4c <UART_AdvFeatureConfig+0x19c>)
 8005bc2:	f7fb ffe5 	bl	8001b90 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8005bc6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005bc8:	f433 1380 	bics.w	r3, r3, #1048576	; 0x100000
 8005bcc:	d004      	beq.n	8005bd8 <UART_AdvFeatureConfig+0x128>
 8005bce:	f640 5124 	movw	r1, #3364	; 0xd24
 8005bd2:	481e      	ldr	r0, [pc, #120]	; (8005c4c <UART_AdvFeatureConfig+0x19c>)
 8005bd4:	f7fb ffdc 	bl	8001b90 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bd8:	6822      	ldr	r2, [r4, #0]
 8005bda:	6853      	ldr	r3, [r2, #4]
 8005bdc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005be0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005be2:	430b      	orrs	r3, r1
 8005be4:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005be6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005be8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bec:	d01a      	beq.n	8005c24 <UART_AdvFeatureConfig+0x174>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005bf0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005bf4:	d00f      	beq.n	8005c16 <UART_AdvFeatureConfig+0x166>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8005bf6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005bf8:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8005bfc:	d004      	beq.n	8005c08 <UART_AdvFeatureConfig+0x158>
 8005bfe:	f640 5131 	movw	r1, #3377	; 0xd31
 8005c02:	4812      	ldr	r0, [pc, #72]	; (8005c4c <UART_AdvFeatureConfig+0x19c>)
 8005c04:	f7fb ffc4 	bl	8001b90 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c08:	6822      	ldr	r2, [r4, #0]
 8005c0a:	6853      	ldr	r3, [r2, #4]
 8005c0c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005c10:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005c12:	430b      	orrs	r3, r1
 8005c14:	6053      	str	r3, [r2, #4]
}
 8005c16:	bd10      	pop	{r4, pc}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8005c18:	f640 41f4 	movw	r1, #3316	; 0xcf4
 8005c1c:	480b      	ldr	r0, [pc, #44]	; (8005c4c <UART_AdvFeatureConfig+0x19c>)
 8005c1e:	f7fb ffb7 	bl	8001b90 <assert_failed>
 8005c22:	e74b      	b.n	8005abc <UART_AdvFeatureConfig+0xc>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8005c24:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005c26:	f433 1300 	bics.w	r3, r3, #2097152	; 0x200000
 8005c2a:	d007      	beq.n	8005c3c <UART_AdvFeatureConfig+0x18c>
 8005c2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c30:	d004      	beq.n	8005c3c <UART_AdvFeatureConfig+0x18c>
 8005c32:	f640 5129 	movw	r1, #3369	; 0xd29
 8005c36:	4805      	ldr	r0, [pc, #20]	; (8005c4c <UART_AdvFeatureConfig+0x19c>)
 8005c38:	f7fb ffaa 	bl	8001b90 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c3c:	6822      	ldr	r2, [r4, #0]
 8005c3e:	6853      	ldr	r3, [r2, #4]
 8005c40:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005c44:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005c46:	430b      	orrs	r3, r1
 8005c48:	6053      	str	r3, [r2, #4]
 8005c4a:	e7d0      	b.n	8005bee <UART_AdvFeatureConfig+0x13e>
 8005c4c:	08009c1c 	.word	0x08009c1c
 8005c50:	40013800 	.word	0x40013800

08005c54 <UART_WaitOnFlagUntilTimeout>:
{
 8005c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c58:	4680      	mov	r8, r0
 8005c5a:	460e      	mov	r6, r1
 8005c5c:	4615      	mov	r5, r2
 8005c5e:	4699      	mov	r9, r3
 8005c60:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c62:	f8d8 2000 	ldr.w	r2, [r8]
 8005c66:	69d4      	ldr	r4, [r2, #28]
 8005c68:	ea36 0304 	bics.w	r3, r6, r4
 8005c6c:	bf0c      	ite	eq
 8005c6e:	2401      	moveq	r4, #1
 8005c70:	2400      	movne	r4, #0
 8005c72:	42ac      	cmp	r4, r5
 8005c74:	d15a      	bne.n	8005d2c <UART_WaitOnFlagUntilTimeout+0xd8>
    if (Timeout != HAL_MAX_DELAY)
 8005c76:	f1b7 3fff 	cmp.w	r7, #4294967295
 8005c7a:	d0f4      	beq.n	8005c66 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c7c:	f7fc faf2 	bl	8002264 <HAL_GetTick>
 8005c80:	eba0 0009 	sub.w	r0, r0, r9
 8005c84:	42b8      	cmp	r0, r7
 8005c86:	d830      	bhi.n	8005cea <UART_WaitOnFlagUntilTimeout+0x96>
 8005c88:	b37f      	cbz	r7, 8005cea <UART_WaitOnFlagUntilTimeout+0x96>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c8a:	f8d8 3000 	ldr.w	r3, [r8]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	f012 0f04 	tst.w	r2, #4
 8005c94:	d0e5      	beq.n	8005c62 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c96:	69da      	ldr	r2, [r3, #28]
 8005c98:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8005c9c:	d0e1      	beq.n	8005c62 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ca2:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005ca4:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca8:	e852 3f00 	ldrex	r3, [r2]
 8005cac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb0:	e842 3100 	strex	r1, r3, [r2]
 8005cb4:	2900      	cmp	r1, #0
 8005cb6:	d1f5      	bne.n	8005ca4 <UART_WaitOnFlagUntilTimeout+0x50>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb8:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbc:	f102 0308 	add.w	r3, r2, #8
 8005cc0:	e853 3f00 	ldrex	r3, [r3]
 8005cc4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc8:	3208      	adds	r2, #8
 8005cca:	e842 3100 	strex	r1, r3, [r2]
 8005cce:	2900      	cmp	r1, #0
 8005cd0:	d1f2      	bne.n	8005cb8 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 8005cd2:	2320      	movs	r3, #32
 8005cd4:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005cd8:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cdc:	f8c8 308c 	str.w	r3, [r8, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	f888 3080 	strb.w	r3, [r8, #128]	; 0x80
          return HAL_TIMEOUT;
 8005ce6:	2003      	movs	r0, #3
 8005ce8:	e021      	b.n	8005d2e <UART_WaitOnFlagUntilTimeout+0xda>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005cea:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cee:	e852 3f00 	ldrex	r3, [r2]
 8005cf2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf6:	e842 3100 	strex	r1, r3, [r2]
 8005cfa:	2900      	cmp	r1, #0
 8005cfc:	d1f5      	bne.n	8005cea <UART_WaitOnFlagUntilTimeout+0x96>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cfe:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d02:	f102 0308 	add.w	r3, r2, #8
 8005d06:	e853 3f00 	ldrex	r3, [r3]
 8005d0a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0e:	3208      	adds	r2, #8
 8005d10:	e842 3100 	strex	r1, r3, [r2]
 8005d14:	2900      	cmp	r1, #0
 8005d16:	d1f2      	bne.n	8005cfe <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 8005d18:	2320      	movs	r3, #32
 8005d1a:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005d1e:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8005d22:	2300      	movs	r3, #0
 8005d24:	f888 3080 	strb.w	r3, [r8, #128]	; 0x80
        return HAL_TIMEOUT;
 8005d28:	2003      	movs	r0, #3
 8005d2a:	e000      	b.n	8005d2e <UART_WaitOnFlagUntilTimeout+0xda>
  return HAL_OK;
 8005d2c:	2000      	movs	r0, #0
}
 8005d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005d32 <HAL_UART_Receive>:
{
 8005d32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d36:	b083      	sub	sp, #12
 8005d38:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d3a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8005d3e:	2b20      	cmp	r3, #32
 8005d40:	f040 8081 	bne.w	8005e46 <HAL_UART_Receive+0x114>
 8005d44:	4604      	mov	r4, r0
 8005d46:	460d      	mov	r5, r1
 8005d48:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8005d4a:	2900      	cmp	r1, #0
 8005d4c:	d07f      	beq.n	8005e4e <HAL_UART_Receive+0x11c>
 8005d4e:	2a00      	cmp	r2, #0
 8005d50:	d07f      	beq.n	8005e52 <HAL_UART_Receive+0x120>
    __HAL_LOCK(huart);
 8005d52:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d07d      	beq.n	8005e56 <HAL_UART_Receive+0x124>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d60:	2300      	movs	r3, #0
 8005d62:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d66:	2222      	movs	r2, #34	; 0x22
 8005d68:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d6c:	66c3      	str	r3, [r0, #108]	; 0x6c
    tickstart = HAL_GetTick();
 8005d6e:	f7fc fa79 	bl	8002264 <HAL_GetTick>
 8005d72:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 8005d74:	f8a4 805c 	strh.w	r8, [r4, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005d78:	f8a4 805e 	strh.w	r8, [r4, #94]	; 0x5e
    UART_MASK_COMPUTATION(huart);
 8005d7c:	68a3      	ldr	r3, [r4, #8]
 8005d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d82:	d006      	beq.n	8005d92 <HAL_UART_Receive+0x60>
 8005d84:	b9cb      	cbnz	r3, 8005dba <HAL_UART_Receive+0x88>
 8005d86:	6923      	ldr	r3, [r4, #16]
 8005d88:	b99b      	cbnz	r3, 8005db2 <HAL_UART_Receive+0x80>
 8005d8a:	23ff      	movs	r3, #255	; 0xff
 8005d8c:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
 8005d90:	e019      	b.n	8005dc6 <HAL_UART_Receive+0x94>
 8005d92:	6923      	ldr	r3, [r4, #16]
 8005d94:	b933      	cbnz	r3, 8005da4 <HAL_UART_Receive+0x72>
 8005d96:	f240 18ff 	movw	r8, #511	; 0x1ff
 8005d9a:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
      pdata16bits = (uint16_t *) pData;
 8005d9e:	46ab      	mov	fp, r5
      pdata8bits  = NULL;
 8005da0:	2500      	movs	r5, #0
 8005da2:	e014      	b.n	8005dce <HAL_UART_Receive+0x9c>
    UART_MASK_COMPUTATION(huart);
 8005da4:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8005da8:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
      pdata16bits = NULL;
 8005dac:	f04f 0b00 	mov.w	fp, #0
 8005db0:	e00d      	b.n	8005dce <HAL_UART_Receive+0x9c>
    UART_MASK_COMPUTATION(huart);
 8005db2:	237f      	movs	r3, #127	; 0x7f
 8005db4:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
 8005db8:	e005      	b.n	8005dc6 <HAL_UART_Receive+0x94>
 8005dba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dbe:	d012      	beq.n	8005de6 <HAL_UART_Receive+0xb4>
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    uhMask = huart->Mask;
 8005dc6:	f8b4 8060 	ldrh.w	r8, [r4, #96]	; 0x60
      pdata16bits = NULL;
 8005dca:	f04f 0b00 	mov.w	fp, #0
    __HAL_UNLOCK(huart);
 8005dce:	2300      	movs	r3, #0
 8005dd0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    while (huart->RxXferCount > 0U)
 8005dd4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	b37b      	cbz	r3, 8005e3c <HAL_UART_Receive+0x10a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005ddc:	f04f 0a00 	mov.w	sl, #0
 8005de0:	f04f 0920 	mov.w	r9, #32
 8005de4:	e019      	b.n	8005e1a <HAL_UART_Receive+0xe8>
    UART_MASK_COMPUTATION(huart);
 8005de6:	6923      	ldr	r3, [r4, #16]
 8005de8:	b91b      	cbnz	r3, 8005df2 <HAL_UART_Receive+0xc0>
 8005dea:	237f      	movs	r3, #127	; 0x7f
 8005dec:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
 8005df0:	e7e9      	b.n	8005dc6 <HAL_UART_Receive+0x94>
 8005df2:	233f      	movs	r3, #63	; 0x3f
 8005df4:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
 8005df8:	e7e5      	b.n	8005dc6 <HAL_UART_Receive+0x94>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005dfa:	6823      	ldr	r3, [r4, #0]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfe:	ea08 0303 	and.w	r3, r8, r3
 8005e02:	f82b 3b02 	strh.w	r3, [fp], #2
      huart->RxXferCount--;
 8005e06:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8005e12:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	b183      	cbz	r3, 8005e3c <HAL_UART_Receive+0x10a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005e1a:	9600      	str	r6, [sp, #0]
 8005e1c:	463b      	mov	r3, r7
 8005e1e:	4652      	mov	r2, sl
 8005e20:	4649      	mov	r1, r9
 8005e22:	4620      	mov	r0, r4
 8005e24:	f7ff ff16 	bl	8005c54 <UART_WaitOnFlagUntilTimeout>
 8005e28:	b9b8      	cbnz	r0, 8005e5a <HAL_UART_Receive+0x128>
      if (pdata8bits == NULL)
 8005e2a:	2d00      	cmp	r5, #0
 8005e2c:	d0e5      	beq.n	8005dfa <HAL_UART_Receive+0xc8>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005e2e:	6823      	ldr	r3, [r4, #0]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e32:	ea03 0308 	and.w	r3, r3, r8
 8005e36:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 8005e3a:	e7e4      	b.n	8005e06 <HAL_UART_Receive+0xd4>
    huart->RxState = HAL_UART_STATE_READY;
 8005e3c:	2320      	movs	r3, #32
 8005e3e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    return HAL_OK;
 8005e42:	2000      	movs	r0, #0
 8005e44:	e000      	b.n	8005e48 <HAL_UART_Receive+0x116>
    return HAL_BUSY;
 8005e46:	2002      	movs	r0, #2
}
 8005e48:	b003      	add	sp, #12
 8005e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return  HAL_ERROR;
 8005e4e:	2001      	movs	r0, #1
 8005e50:	e7fa      	b.n	8005e48 <HAL_UART_Receive+0x116>
 8005e52:	2001      	movs	r0, #1
 8005e54:	e7f8      	b.n	8005e48 <HAL_UART_Receive+0x116>
    __HAL_LOCK(huart);
 8005e56:	2002      	movs	r0, #2
 8005e58:	e7f6      	b.n	8005e48 <HAL_UART_Receive+0x116>
        return HAL_TIMEOUT;
 8005e5a:	2003      	movs	r0, #3
 8005e5c:	e7f4      	b.n	8005e48 <HAL_UART_Receive+0x116>

08005e5e <UART_CheckIdleState>:
{
 8005e5e:	b530      	push	{r4, r5, lr}
 8005e60:	b083      	sub	sp, #12
 8005e62:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e64:	2300      	movs	r3, #0
 8005e66:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8005e6a:	f7fc f9fb 	bl	8002264 <HAL_GetTick>
 8005e6e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e70:	6823      	ldr	r3, [r4, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f013 0f08 	tst.w	r3, #8
 8005e78:	d10f      	bne.n	8005e9a <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e7a:	6823      	ldr	r3, [r4, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f013 0f04 	tst.w	r3, #4
 8005e82:	d118      	bne.n	8005eb6 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8005e84:	2320      	movs	r3, #32
 8005e86:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005e8a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e8e:	2000      	movs	r0, #0
 8005e90:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8005e92:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8005e96:	b003      	add	sp, #12
 8005e98:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e9a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e9e:	9300      	str	r3, [sp, #0]
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	f7ff fed3 	bl	8005c54 <UART_WaitOnFlagUntilTimeout>
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	d0e3      	beq.n	8005e7a <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8005eb2:	2003      	movs	r0, #3
 8005eb4:	e7ef      	b.n	8005e96 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005eb6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005eba:	9300      	str	r3, [sp, #0]
 8005ebc:	462b      	mov	r3, r5
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	f7ff fec5 	bl	8005c54 <UART_WaitOnFlagUntilTimeout>
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	d0da      	beq.n	8005e84 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8005ece:	2003      	movs	r0, #3
 8005ed0:	e7e1      	b.n	8005e96 <UART_CheckIdleState+0x38>
	...

08005ed4 <HAL_UART_Init>:
  if (huart == NULL)
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	d04e      	beq.n	8005f76 <HAL_UART_Init+0xa2>
{
 8005ed8:	b510      	push	{r4, lr}
 8005eda:	4604      	mov	r4, r0
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005edc:	6983      	ldr	r3, [r0, #24]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d031      	beq.n	8005f46 <HAL_UART_Init+0x72>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005ee2:	6803      	ldr	r3, [r0, #0]
 8005ee4:	4a25      	ldr	r2, [pc, #148]	; (8005f7c <HAL_UART_Init+0xa8>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d008      	beq.n	8005efc <HAL_UART_Init+0x28>
 8005eea:	f5a2 4238 	sub.w	r2, r2, #47104	; 0xb800
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d004      	beq.n	8005efc <HAL_UART_Init+0x28>
 8005ef2:	f240 113b 	movw	r1, #315	; 0x13b
 8005ef6:	4822      	ldr	r0, [pc, #136]	; (8005f80 <HAL_UART_Init+0xac>)
 8005ef8:	f7fb fe4a 	bl	8001b90 <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005efc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005f00:	b37b      	cbz	r3, 8005f62 <HAL_UART_Init+0x8e>
  huart->gState = HAL_UART_STATE_BUSY;
 8005f02:	2324      	movs	r3, #36	; 0x24
 8005f04:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8005f08:	6822      	ldr	r2, [r4, #0]
 8005f0a:	6813      	ldr	r3, [r2, #0]
 8005f0c:	f023 0301 	bic.w	r3, r3, #1
 8005f10:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f12:	4620      	mov	r0, r4
 8005f14:	f7ff fc24 	bl	8005760 <UART_SetConfig>
 8005f18:	2801      	cmp	r0, #1
 8005f1a:	d013      	beq.n	8005f44 <HAL_UART_Init+0x70>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005f1e:	bb33      	cbnz	r3, 8005f6e <HAL_UART_Init+0x9a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f20:	6822      	ldr	r2, [r4, #0]
 8005f22:	6853      	ldr	r3, [r2, #4]
 8005f24:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005f28:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f2a:	6822      	ldr	r2, [r4, #0]
 8005f2c:	6893      	ldr	r3, [r2, #8]
 8005f2e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005f32:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8005f34:	6822      	ldr	r2, [r4, #0]
 8005f36:	6813      	ldr	r3, [r2, #0]
 8005f38:	f043 0301 	orr.w	r3, r3, #1
 8005f3c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f7ff ff8d 	bl	8005e5e <UART_CheckIdleState>
}
 8005f44:	bd10      	pop	{r4, pc}
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8005f46:	6803      	ldr	r3, [r0, #0]
 8005f48:	4a0c      	ldr	r2, [pc, #48]	; (8005f7c <HAL_UART_Init+0xa8>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d0d6      	beq.n	8005efc <HAL_UART_Init+0x28>
 8005f4e:	f5a2 4238 	sub.w	r2, r2, #47104	; 0xb800
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d0d2      	beq.n	8005efc <HAL_UART_Init+0x28>
 8005f56:	f240 1141 	movw	r1, #321	; 0x141
 8005f5a:	4809      	ldr	r0, [pc, #36]	; (8005f80 <HAL_UART_Init+0xac>)
 8005f5c:	f7fb fe18 	bl	8001b90 <assert_failed>
 8005f60:	e7cc      	b.n	8005efc <HAL_UART_Init+0x28>
    huart->Lock = HAL_UNLOCKED;
 8005f62:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8005f66:	4620      	mov	r0, r4
 8005f68:	f7fc f874 	bl	8002054 <HAL_UART_MspInit>
 8005f6c:	e7c9      	b.n	8005f02 <HAL_UART_Init+0x2e>
    UART_AdvFeatureConfig(huart);
 8005f6e:	4620      	mov	r0, r4
 8005f70:	f7ff fd9e 	bl	8005ab0 <UART_AdvFeatureConfig>
 8005f74:	e7d4      	b.n	8005f20 <HAL_UART_Init+0x4c>
    return HAL_ERROR;
 8005f76:	2001      	movs	r0, #1
}
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	40013800 	.word	0x40013800
 8005f80:	08009c1c 	.word	0x08009c1c

08005f84 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f84:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005f86:	b92b      	cbnz	r3, 8005f94 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f8e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8005f92:	4770      	bx	lr
{
 8005f94:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f96:	6803      	ldr	r3, [r0, #0]
 8005f98:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f9a:	6899      	ldr	r1, [r3, #8]
 8005f9c:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f9e:	4d0a      	ldr	r5, [pc, #40]	; (8005fc8 <UARTEx_SetNbDataToProcess+0x44>)
 8005fa0:	5c6b      	ldrb	r3, [r5, r1]
 8005fa2:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005fa4:	4c09      	ldr	r4, [pc, #36]	; (8005fcc <UARTEx_SetNbDataToProcess+0x48>)
 8005fa6:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fa8:	fb93 f3f1 	sdiv	r3, r3, r1
 8005fac:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fb0:	f3c2 6242 	ubfx	r2, r2, #25, #3
 8005fb4:	5cab      	ldrb	r3, [r5, r2]
 8005fb6:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005fb8:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fba:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fbe:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8005fc2:	bc30      	pop	{r4, r5}
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	08009cb4 	.word	0x08009cb4
 8005fcc:	08009cac 	.word	0x08009cac

08005fd0 <HAL_UARTEx_WakeupCallback>:
}
 8005fd0:	4770      	bx	lr

08005fd2 <HAL_UARTEx_RxFifoFullCallback>:
}
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8005fd4:	4770      	bx	lr
	...

08005fd8 <HAL_UARTEx_DisableFifoMode>:
{
 8005fd8:	b510      	push	{r4, lr}
 8005fda:	4604      	mov	r4, r0
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8005fdc:	6803      	ldr	r3, [r0, #0]
 8005fde:	4a15      	ldr	r2, [pc, #84]	; (8006034 <HAL_UARTEx_DisableFifoMode+0x5c>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d008      	beq.n	8005ff6 <HAL_UARTEx_DisableFifoMode+0x1e>
 8005fe4:	f5a2 4238 	sub.w	r2, r2, #47104	; 0xb800
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d004      	beq.n	8005ff6 <HAL_UARTEx_DisableFifoMode+0x1e>
 8005fec:	f44f 710d 	mov.w	r1, #564	; 0x234
 8005ff0:	4811      	ldr	r0, [pc, #68]	; (8006038 <HAL_UARTEx_DisableFifoMode+0x60>)
 8005ff2:	f7fb fdcd 	bl	8001b90 <assert_failed>
  __HAL_LOCK(huart);
 8005ff6:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d017      	beq.n	800602e <HAL_UARTEx_DisableFifoMode+0x56>
 8005ffe:	2301      	movs	r3, #1
 8006000:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006004:	2324      	movs	r3, #36	; 0x24
 8006006:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800600a:	6822      	ldr	r2, [r4, #0]
 800600c:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800600e:	6811      	ldr	r1, [r2, #0]
 8006010:	f021 0101 	bic.w	r1, r1, #1
 8006014:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006016:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800601a:	2000      	movs	r0, #0
 800601c:	6660      	str	r0, [r4, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800601e:	6822      	ldr	r2, [r4, #0]
 8006020:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006022:	2320      	movs	r3, #32
 8006024:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006028:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800602c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800602e:	2002      	movs	r0, #2
 8006030:	e7fc      	b.n	800602c <HAL_UARTEx_DisableFifoMode+0x54>
 8006032:	bf00      	nop
 8006034:	40013800 	.word	0x40013800
 8006038:	08009c70 	.word	0x08009c70

0800603c <HAL_UARTEx_SetTxFifoThreshold>:
{
 800603c:	b570      	push	{r4, r5, r6, lr}
 800603e:	4604      	mov	r4, r0
 8006040:	460d      	mov	r5, r1
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8006042:	6803      	ldr	r3, [r0, #0]
 8006044:	4a1e      	ldr	r2, [pc, #120]	; (80060c0 <HAL_UARTEx_SetTxFifoThreshold+0x84>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d008      	beq.n	800605c <HAL_UARTEx_SetTxFifoThreshold+0x20>
 800604a:	f5a2 4238 	sub.w	r2, r2, #47104	; 0xb800
 800604e:	4293      	cmp	r3, r2
 8006050:	d004      	beq.n	800605c <HAL_UARTEx_SetTxFifoThreshold+0x20>
 8006052:	f240 2162 	movw	r1, #610	; 0x262
 8006056:	481b      	ldr	r0, [pc, #108]	; (80060c4 <HAL_UARTEx_SetTxFifoThreshold+0x88>)
 8006058:	f7fb fd9a 	bl	8001b90 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 800605c:	f035 5300 	bics.w	r3, r5, #536870912	; 0x20000000
 8006060:	d00a      	beq.n	8006078 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
 8006062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006066:	d007      	beq.n	8006078 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
 8006068:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800606c:	d004      	beq.n	8006078 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
 800606e:	f240 2163 	movw	r1, #611	; 0x263
 8006072:	4814      	ldr	r0, [pc, #80]	; (80060c4 <HAL_UARTEx_SetTxFifoThreshold+0x88>)
 8006074:	f7fb fd8c 	bl	8001b90 <assert_failed>
  __HAL_LOCK(huart);
 8006078:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800607c:	2b01      	cmp	r3, #1
 800607e:	d01d      	beq.n	80060bc <HAL_UARTEx_SetTxFifoThreshold+0x80>
 8006080:	2301      	movs	r3, #1
 8006082:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006086:	2324      	movs	r3, #36	; 0x24
 8006088:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800608c:	6823      	ldr	r3, [r4, #0]
 800608e:	681e      	ldr	r6, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	f022 0201 	bic.w	r2, r2, #1
 8006096:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	6899      	ldr	r1, [r3, #8]
 800609c:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 80060a0:	430d      	orrs	r5, r1
 80060a2:	609d      	str	r5, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 80060a4:	4620      	mov	r0, r4
 80060a6:	f7ff ff6d 	bl	8005f84 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060aa:	6823      	ldr	r3, [r4, #0]
 80060ac:	601e      	str	r6, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80060ae:	2320      	movs	r3, #32
 80060b0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80060b4:	2000      	movs	r0, #0
 80060b6:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80060ba:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 80060bc:	2002      	movs	r0, #2
 80060be:	e7fc      	b.n	80060ba <HAL_UARTEx_SetTxFifoThreshold+0x7e>
 80060c0:	40013800 	.word	0x40013800
 80060c4:	08009c70 	.word	0x08009c70

080060c8 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80060c8:	b570      	push	{r4, r5, r6, lr}
 80060ca:	4604      	mov	r4, r0
 80060cc:	460d      	mov	r5, r1
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 80060ce:	6803      	ldr	r3, [r0, #0]
 80060d0:	4a1e      	ldr	r2, [pc, #120]	; (800614c <HAL_UARTEx_SetRxFifoThreshold+0x84>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d008      	beq.n	80060e8 <HAL_UARTEx_SetRxFifoThreshold+0x20>
 80060d6:	f5a2 4238 	sub.w	r2, r2, #47104	; 0xb800
 80060da:	4293      	cmp	r3, r2
 80060dc:	d004      	beq.n	80060e8 <HAL_UARTEx_SetRxFifoThreshold+0x20>
 80060de:	f240 2193 	movw	r1, #659	; 0x293
 80060e2:	481b      	ldr	r0, [pc, #108]	; (8006150 <HAL_UARTEx_SetRxFifoThreshold+0x88>)
 80060e4:	f7fb fd54 	bl	8001b90 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 80060e8:	f035 7300 	bics.w	r3, r5, #33554432	; 0x2000000
 80060ec:	d00a      	beq.n	8006104 <HAL_UARTEx_SetRxFifoThreshold+0x3c>
 80060ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060f2:	d007      	beq.n	8006104 <HAL_UARTEx_SetRxFifoThreshold+0x3c>
 80060f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060f8:	d004      	beq.n	8006104 <HAL_UARTEx_SetRxFifoThreshold+0x3c>
 80060fa:	f44f 7125 	mov.w	r1, #660	; 0x294
 80060fe:	4814      	ldr	r0, [pc, #80]	; (8006150 <HAL_UARTEx_SetRxFifoThreshold+0x88>)
 8006100:	f7fb fd46 	bl	8001b90 <assert_failed>
  __HAL_LOCK(huart);
 8006104:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8006108:	2b01      	cmp	r3, #1
 800610a:	d01d      	beq.n	8006148 <HAL_UARTEx_SetRxFifoThreshold+0x80>
 800610c:	2301      	movs	r3, #1
 800610e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006112:	2324      	movs	r3, #36	; 0x24
 8006114:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006118:	6823      	ldr	r3, [r4, #0]
 800611a:	681e      	ldr	r6, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	f022 0201 	bic.w	r2, r2, #1
 8006122:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006124:	6823      	ldr	r3, [r4, #0]
 8006126:	6899      	ldr	r1, [r3, #8]
 8006128:	f021 6160 	bic.w	r1, r1, #234881024	; 0xe000000
 800612c:	430d      	orrs	r5, r1
 800612e:	609d      	str	r5, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006130:	4620      	mov	r0, r4
 8006132:	f7ff ff27 	bl	8005f84 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006136:	6823      	ldr	r3, [r4, #0]
 8006138:	601e      	str	r6, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800613a:	2320      	movs	r3, #32
 800613c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006140:	2000      	movs	r0, #0
 8006142:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006146:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8006148:	2002      	movs	r0, #2
 800614a:	e7fc      	b.n	8006146 <HAL_UARTEx_SetRxFifoThreshold+0x7e>
 800614c:	40013800 	.word	0x40013800
 8006150:	08009c70 	.word	0x08009c70

08006154 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8006154:	b510      	push	{r4, lr}
 8006156:	b088      	sub	sp, #32
  struct hci_request rq;
  tBleStatus status = 0;
 8006158:	2400      	movs	r4, #0
 800615a:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800615e:	2218      	movs	r2, #24
 8006160:	4621      	mov	r1, r4
 8006162:	a802      	add	r0, sp, #8
 8006164:	f000 fb76 	bl	8006854 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006168:	233f      	movs	r3, #63	; 0x3f
 800616a:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x081;
 800616e:	2381      	movs	r3, #129	; 0x81
 8006170:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 8006174:	f10d 0307 	add.w	r3, sp, #7
 8006178:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 800617a:	2301      	movs	r3, #1
 800617c:	9307      	str	r3, [sp, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800617e:	4621      	mov	r1, r4
 8006180:	a802      	add	r0, sp, #8
 8006182:	f000 fdd1 	bl	8006d28 <hci_send_req>
 8006186:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  return status;
 8006188:	bfac      	ite	ge
 800618a:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800618e:	20ff      	movlt	r0, #255	; 0xff
}
 8006190:	b008      	add	sp, #32
 8006192:	bd10      	pop	{r4, pc}

08006194 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8006194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006198:	b0cb      	sub	sp, #300	; 0x12c
 800619a:	469c      	mov	ip, r3
 800619c:	f89d 4154 	ldrb.w	r4, [sp, #340]	; 0x154
 80061a0:	f89d 715c 	ldrb.w	r7, [sp, #348]	; 0x15c
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80061a4:	ad04      	add	r5, sp, #16
 80061a6:	f104 0a08 	add.w	sl, r4, #8
 80061aa:	eb05 0b0a 	add.w	fp, r5, sl
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80061ae:	f107 0609 	add.w	r6, r7, #9
 80061b2:	4426      	add	r6, r4
 80061b4:	19ab      	adds	r3, r5, r6
 80061b6:	9301      	str	r3, [sp, #4]
  tBleStatus status = 0;
 80061b8:	f10d 090f 	add.w	r9, sp, #15
 80061bc:	f04f 0800 	mov.w	r8, #0
 80061c0:	f88d 800f 	strb.w	r8, [sp, #15]
  int index_input = 0;
  cp0->Advertising_Type = Advertising_Type;
 80061c4:	f88d 0010 	strb.w	r0, [sp, #16]
  index_input += 1;
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80061c8:	f8ad 1011 	strh.w	r1, [sp, #17]
  index_input += 2;
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80061cc:	f8ad 2013 	strh.w	r2, [sp, #19]
  index_input += 2;
  cp0->Own_Address_Type = Own_Address_Type;
 80061d0:	f88d c015 	strb.w	ip, [sp, #21]
  index_input += 1;
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80061d4:	f89d 3150 	ldrb.w	r3, [sp, #336]	; 0x150
 80061d8:	f88d 3016 	strb.w	r3, [sp, #22]
  index_input += 1;
  cp0->Local_Name_Length = Local_Name_Length;
 80061dc:	f88d 4017 	strb.w	r4, [sp, #23]
  index_input += 1;
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80061e0:	4622      	mov	r2, r4
 80061e2:	9956      	ldr	r1, [sp, #344]	; 0x158
 80061e4:	a806      	add	r0, sp, #24
 80061e6:	f000 fb31 	bl	800684c <Osal_MemCpy>
    index_input += Local_Name_Length;
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80061ea:	f805 700a 	strb.w	r7, [r5, sl]
    }
    index_input += 1;
 80061ee:	3409      	adds	r4, #9
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80061f0:	463a      	mov	r2, r7
 80061f2:	9958      	ldr	r1, [sp, #352]	; 0x160
 80061f4:	f10b 0001 	add.w	r0, fp, #1
 80061f8:	f000 fb28 	bl	800684c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80061fc:	4427      	add	r7, r4
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 80061fe:	f8bd 3164 	ldrh.w	r3, [sp, #356]	; 0x164
 8006202:	53ab      	strh	r3, [r5, r6]
    }
    index_input += 2;
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8006204:	f8bd 3168 	ldrh.w	r3, [sp, #360]	; 0x168
 8006208:	9a01      	ldr	r2, [sp, #4]
 800620a:	8053      	strh	r3, [r2, #2]
    }
    index_input += 2;
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800620c:	2218      	movs	r2, #24
 800620e:	4641      	mov	r1, r8
 8006210:	a844      	add	r0, sp, #272	; 0x110
 8006212:	f000 fb1f 	bl	8006854 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006216:	233f      	movs	r3, #63	; 0x3f
 8006218:	f8ad 3110 	strh.w	r3, [sp, #272]	; 0x110
  rq.ocf = 0x083;
 800621c:	2383      	movs	r3, #131	; 0x83
 800621e:	f8ad 3112 	strh.w	r3, [sp, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006222:	9546      	str	r5, [sp, #280]	; 0x118
    index_input += 2;
 8006224:	3704      	adds	r7, #4
  rq.clen = index_input;
 8006226:	9747      	str	r7, [sp, #284]	; 0x11c
  rq.rparam = &status;
 8006228:	f8cd 9120 	str.w	r9, [sp, #288]	; 0x120
  rq.rlen = 1;
 800622c:	2301      	movs	r3, #1
 800622e:	9349      	str	r3, [sp, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006230:	4641      	mov	r1, r8
 8006232:	a844      	add	r0, sp, #272	; 0x110
 8006234:	f000 fd78 	bl	8006d28 <hci_send_req>
 8006238:	4540      	cmp	r0, r8
    return BLE_STATUS_TIMEOUT;
  return status;
 800623a:	bfac      	ite	ge
 800623c:	f89d 000f 	ldrbge.w	r0, [sp, #15]
    return BLE_STATUS_TIMEOUT;
 8006240:	20ff      	movlt	r0, #255	; 0xff
}
 8006242:	b04b      	add	sp, #300	; 0x12c
 8006244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006248 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8006248:	b570      	push	{r4, r5, r6, lr}
 800624a:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800624c:	f10d 0507 	add.w	r5, sp, #7
 8006250:	2400      	movs	r4, #0
 8006252:	f88d 4007 	strb.w	r4, [sp, #7]
  int index_input = 0;
  cp0->IO_Capability = IO_Capability;
 8006256:	ae02      	add	r6, sp, #8
 8006258:	f88d 0008 	strb.w	r0, [sp, #8]
  index_input += 1;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800625c:	2218      	movs	r2, #24
 800625e:	4621      	mov	r1, r4
 8006260:	a842      	add	r0, sp, #264	; 0x108
 8006262:	f000 faf7 	bl	8006854 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006266:	233f      	movs	r3, #63	; 0x3f
 8006268:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x085;
 800626c:	2385      	movs	r3, #133	; 0x85
 800626e:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 8006272:	9644      	str	r6, [sp, #272]	; 0x110
  rq.clen = index_input;
 8006274:	2301      	movs	r3, #1
 8006276:	9345      	str	r3, [sp, #276]	; 0x114
  rq.rparam = &status;
 8006278:	9546      	str	r5, [sp, #280]	; 0x118
  rq.rlen = 1;
 800627a:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800627c:	4621      	mov	r1, r4
 800627e:	a842      	add	r0, sp, #264	; 0x108
 8006280:	f000 fd52 	bl	8006d28 <hci_send_req>
 8006284:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  return status;
 8006286:	bfac      	ite	ge
 8006288:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800628c:	20ff      	movlt	r0, #255	; 0xff
}
 800628e:	b048      	add	sp, #288	; 0x120
 8006290:	bd70      	pop	{r4, r5, r6, pc}

08006292 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8006292:	b570      	push	{r4, r5, r6, lr}
 8006294:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8006296:	f10d 0607 	add.w	r6, sp, #7
 800629a:	2500      	movs	r5, #0
 800629c:	f88d 5007 	strb.w	r5, [sp, #7]
  int index_input = 0;
  cp0->Bonding_Mode = Bonding_Mode;
 80062a0:	ac02      	add	r4, sp, #8
 80062a2:	f88d 0008 	strb.w	r0, [sp, #8]
  index_input += 1;
  cp0->MITM_Mode = MITM_Mode;
 80062a6:	f88d 1009 	strb.w	r1, [sp, #9]
  index_input += 1;
  cp0->SC_Support = SC_Support;
 80062aa:	f88d 200a 	strb.w	r2, [sp, #10]
  index_input += 1;
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80062ae:	f88d 300b 	strb.w	r3, [sp, #11]
  index_input += 1;
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80062b2:	f89d 3130 	ldrb.w	r3, [sp, #304]	; 0x130
 80062b6:	f88d 300c 	strb.w	r3, [sp, #12]
  index_input += 1;
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80062ba:	f89d 3134 	ldrb.w	r3, [sp, #308]	; 0x134
 80062be:	f88d 300d 	strb.w	r3, [sp, #13]
  index_input += 1;
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80062c2:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 80062c6:	f88d 300e 	strb.w	r3, [sp, #14]
  index_input += 1;
  cp0->Fixed_Pin = Fixed_Pin;
 80062ca:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 80062cc:	f8cd 300f 	str.w	r3, [sp, #15]
  index_input += 4;
  cp0->Identity_Address_Type = Identity_Address_Type;
 80062d0:	f89d 3140 	ldrb.w	r3, [sp, #320]	; 0x140
 80062d4:	f88d 3013 	strb.w	r3, [sp, #19]
  index_input += 1;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80062d8:	2218      	movs	r2, #24
 80062da:	4629      	mov	r1, r5
 80062dc:	a842      	add	r0, sp, #264	; 0x108
 80062de:	f000 fab9 	bl	8006854 <Osal_MemSet>
  rq.ogf = 0x3f;
 80062e2:	233f      	movs	r3, #63	; 0x3f
 80062e4:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x086;
 80062e8:	2386      	movs	r3, #134	; 0x86
 80062ea:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 80062ee:	9444      	str	r4, [sp, #272]	; 0x110
  rq.clen = index_input;
 80062f0:	230c      	movs	r3, #12
 80062f2:	9345      	str	r3, [sp, #276]	; 0x114
  rq.rparam = &status;
 80062f4:	9646      	str	r6, [sp, #280]	; 0x118
  rq.rlen = 1;
 80062f6:	2301      	movs	r3, #1
 80062f8:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80062fa:	4629      	mov	r1, r5
 80062fc:	a842      	add	r0, sp, #264	; 0x108
 80062fe:	f000 fd13 	bl	8006d28 <hci_send_req>
 8006302:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  return status;
 8006304:	bfac      	ite	ge
 8006306:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800630a:	20ff      	movlt	r0, #255	; 0xff
}
 800630c:	b048      	add	sp, #288	; 0x120
 800630e:	bd70      	pop	{r4, r5, r6, pc}

08006310 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8006310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006314:	b0c8      	sub	sp, #288	; 0x120
 8006316:	4607      	mov	r7, r0
 8006318:	460e      	mov	r6, r1
 800631a:	4615      	mov	r5, r2
 800631c:	4698      	mov	r8, r3
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800631e:	2207      	movs	r2, #7
 8006320:	2100      	movs	r1, #0
 8006322:	4668      	mov	r0, sp
 8006324:	f000 fa96 	bl	8006854 <Osal_MemSet>
  int index_input = 0;
  cp0->Role = Role;
 8006328:	ac02      	add	r4, sp, #8
 800632a:	f88d 7008 	strb.w	r7, [sp, #8]
  index_input += 1;
  cp0->privacy_enabled = privacy_enabled;
 800632e:	f88d 6009 	strb.w	r6, [sp, #9]
  index_input += 1;
  cp0->device_name_char_len = device_name_char_len;
 8006332:	f88d 500a 	strb.w	r5, [sp, #10]
  index_input += 1;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006336:	2218      	movs	r2, #24
 8006338:	2100      	movs	r1, #0
 800633a:	a842      	add	r0, sp, #264	; 0x108
 800633c:	f000 fa8a 	bl	8006854 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006340:	233f      	movs	r3, #63	; 0x3f
 8006342:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x08a;
 8006346:	238a      	movs	r3, #138	; 0x8a
 8006348:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 800634c:	9444      	str	r4, [sp, #272]	; 0x110
  rq.clen = index_input;
 800634e:	2303      	movs	r3, #3
 8006350:	9345      	str	r3, [sp, #276]	; 0x114
  rq.rparam = &resp;
 8006352:	f8cd d118 	str.w	sp, [sp, #280]	; 0x118
  rq.rlen = sizeof(resp);
 8006356:	2307      	movs	r3, #7
 8006358:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800635a:	2100      	movs	r1, #0
 800635c:	a842      	add	r0, sp, #264	; 0x108
 800635e:	f000 fce3 	bl	8006d28 <hci_send_req>
 8006362:	2800      	cmp	r0, #0
 8006364:	db17      	blt.n	8006396 <aci_gap_init+0x86>
    return BLE_STATUS_TIMEOUT;
  if ( resp.Status )
 8006366:	f89d 0000 	ldrb.w	r0, [sp]
 800636a:	b988      	cbnz	r0, 8006390 <aci_gap_init+0x80>
    return resp.Status;
  *Service_Handle = resp.Service_Handle;
 800636c:	9b00      	ldr	r3, [sp, #0]
 800636e:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8006372:	f8a8 3000 	strh.w	r3, [r8]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8006376:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800637a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800637e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006382:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 8006384:	8013      	strh	r3, [r2, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8006386:	9b01      	ldr	r3, [sp, #4]
 8006388:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800638c:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
 800638e:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 8006390:	b048      	add	sp, #288	; 0x120
 8006392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 8006396:	20ff      	movs	r0, #255	; 0xff
 8006398:	e7fa      	b.n	8006390 <aci_gap_init+0x80>

0800639a <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800639a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800639c:	b0c9      	sub	sp, #292	; 0x124
 800639e:	4604      	mov	r4, r0
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 80063a0:	f10d 0607 	add.w	r6, sp, #7
 80063a4:	2500      	movs	r5, #0
 80063a6:	f88d 5007 	strb.w	r5, [sp, #7]
  int index_input = 0;
  cp0->AdvDataLen = AdvDataLen;
 80063aa:	af02      	add	r7, sp, #8
 80063ac:	f88d 0008 	strb.w	r0, [sp, #8]
  index_input += 1;
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80063b0:	4602      	mov	r2, r0
 80063b2:	f10d 0009 	add.w	r0, sp, #9
 80063b6:	f000 fa49 	bl	800684c <Osal_MemCpy>
  index_input += AdvDataLen;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80063ba:	2218      	movs	r2, #24
 80063bc:	4629      	mov	r1, r5
 80063be:	a842      	add	r0, sp, #264	; 0x108
 80063c0:	f000 fa48 	bl	8006854 <Osal_MemSet>
  rq.ogf = 0x3f;
 80063c4:	233f      	movs	r3, #63	; 0x3f
 80063c6:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x08e;
 80063ca:	238e      	movs	r3, #142	; 0x8e
 80063cc:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 80063d0:	9744      	str	r7, [sp, #272]	; 0x110
  index_input += AdvDataLen;
 80063d2:	3401      	adds	r4, #1
  rq.clen = index_input;
 80063d4:	9445      	str	r4, [sp, #276]	; 0x114
  rq.rparam = &status;
 80063d6:	9646      	str	r6, [sp, #280]	; 0x118
  rq.rlen = 1;
 80063d8:	2301      	movs	r3, #1
 80063da:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80063dc:	4629      	mov	r1, r5
 80063de:	a842      	add	r0, sp, #264	; 0x108
 80063e0:	f000 fca2 	bl	8006d28 <hci_send_req>
 80063e4:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  return status;
 80063e6:	bfac      	ite	ge
 80063e8:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 80063ec:	20ff      	movlt	r0, #255	; 0xff
}
 80063ee:	b049      	add	sp, #292	; 0x124
 80063f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080063f2 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 80063f2:	b510      	push	{r4, lr}
 80063f4:	b088      	sub	sp, #32
  struct hci_request rq;
  tBleStatus status = 0;
 80063f6:	2400      	movs	r4, #0
 80063f8:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80063fc:	2218      	movs	r2, #24
 80063fe:	4621      	mov	r1, r4
 8006400:	a802      	add	r0, sp, #8
 8006402:	f000 fa27 	bl	8006854 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006406:	233f      	movs	r3, #63	; 0x3f
 8006408:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x092;
 800640c:	2392      	movs	r3, #146	; 0x92
 800640e:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 8006412:	f10d 0307 	add.w	r3, sp, #7
 8006416:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 8006418:	2301      	movs	r3, #1
 800641a:	9307      	str	r3, [sp, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800641c:	4621      	mov	r1, r4
 800641e:	a802      	add	r0, sp, #8
 8006420:	f000 fc82 	bl	8006d28 <hci_send_req>
 8006424:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  return status;
 8006426:	bfac      	ite	ge
 8006428:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800642c:	20ff      	movlt	r0, #255	; 0xff
}
 800642e:	b008      	add	sp, #32
 8006430:	bd10      	pop	{r4, pc}

08006432 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8006432:	b510      	push	{r4, lr}
 8006434:	b088      	sub	sp, #32
  struct hci_request rq;
  tBleStatus status = 0;
 8006436:	2400      	movs	r4, #0
 8006438:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800643c:	2218      	movs	r2, #24
 800643e:	4621      	mov	r1, r4
 8006440:	a802      	add	r0, sp, #8
 8006442:	f000 fa07 	bl	8006854 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006446:	233f      	movs	r3, #63	; 0x3f
 8006448:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x101;
 800644c:	f240 1301 	movw	r3, #257	; 0x101
 8006450:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 8006454:	f10d 0307 	add.w	r3, sp, #7
 8006458:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 800645a:	2301      	movs	r3, #1
 800645c:	9307      	str	r3, [sp, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800645e:	4621      	mov	r1, r4
 8006460:	a802      	add	r0, sp, #8
 8006462:	f000 fc61 	bl	8006d28 <hci_send_req>
 8006466:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  return status;
 8006468:	bfac      	ite	ge
 800646a:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800646e:	20ff      	movlt	r0, #255	; 0xff
}
 8006470:	b008      	add	sp, #32
 8006472:	bd10      	pop	{r4, pc}

08006474 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8006474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006478:	b0c8      	sub	sp, #288	; 0x120
 800647a:	460f      	mov	r7, r1
 800647c:	4616      	mov	r6, r2
 800647e:	461c      	mov	r4, r3
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8006480:	2801      	cmp	r0, #1
 8006482:	d00a      	beq.n	800649a <aci_gatt_add_service+0x26>
 8006484:	2802      	cmp	r0, #2
 8006486:	d042      	beq.n	800650e <aci_gatt_add_service+0x9a>
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006488:	2203      	movs	r2, #3
 800648a:	2100      	movs	r1, #0
 800648c:	a801      	add	r0, sp, #4
 800648e:	f000 f9e1 	bl	8006854 <Osal_MemSet>
    uint8_t size;
    switch ( Service_UUID_Type )
    {
      case 1: size = 2; break;
      case 2: size = 16; break;
      default: return BLE_STATUS_ERROR;
 8006492:	2097      	movs	r0, #151	; 0x97
 8006494:	e038      	b.n	8006508 <aci_gatt_add_service+0x94>
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
  if ( hci_send_req(&rq, FALSE) < 0 )
    return BLE_STATUS_TIMEOUT;
 8006496:	20ff      	movs	r0, #255	; 0xff
 8006498:	e036      	b.n	8006508 <aci_gatt_add_service+0x94>
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800649a:	2203      	movs	r2, #3
 800649c:	2100      	movs	r1, #0
 800649e:	a801      	add	r0, sp, #4
 80064a0:	f000 f9d8 	bl	8006854 <Osal_MemSet>
  cp0->Service_UUID_Type = Service_UUID_Type;
 80064a4:	2301      	movs	r3, #1
 80064a6:	f88d 3008 	strb.w	r3, [sp, #8]
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80064aa:	f10d 080b 	add.w	r8, sp, #11
      case 1: size = 2; break;
 80064ae:	2502      	movs	r5, #2
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80064b0:	462a      	mov	r2, r5
 80064b2:	4639      	mov	r1, r7
 80064b4:	f10d 0009 	add.w	r0, sp, #9
 80064b8:	f000 f9c8 	bl	800684c <Osal_MemCpy>
      cp1->Service_Type = Service_Type;
 80064bc:	f888 6000 	strb.w	r6, [r8]
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80064c0:	f888 4001 	strb.w	r4, [r8, #1]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80064c4:	2218      	movs	r2, #24
 80064c6:	2100      	movs	r1, #0
 80064c8:	a842      	add	r0, sp, #264	; 0x108
 80064ca:	f000 f9c3 	bl	8006854 <Osal_MemSet>
  rq.ogf = 0x3f;
 80064ce:	233f      	movs	r3, #63	; 0x3f
 80064d0:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x102;
 80064d4:	f44f 7381 	mov.w	r3, #258	; 0x102
 80064d8:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 80064dc:	ab02      	add	r3, sp, #8
 80064de:	9344      	str	r3, [sp, #272]	; 0x110
    index_input += 1;
 80064e0:	3503      	adds	r5, #3
  rq.clen = index_input;
 80064e2:	9545      	str	r5, [sp, #276]	; 0x114
  rq.rparam = &resp;
 80064e4:	ab01      	add	r3, sp, #4
 80064e6:	9346      	str	r3, [sp, #280]	; 0x118
  rq.rlen = sizeof(resp);
 80064e8:	2303      	movs	r3, #3
 80064ea:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80064ec:	2100      	movs	r1, #0
 80064ee:	a842      	add	r0, sp, #264	; 0x108
 80064f0:	f000 fc1a 	bl	8006d28 <hci_send_req>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	dbce      	blt.n	8006496 <aci_gatt_add_service+0x22>
  if ( resp.Status )
 80064f8:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80064fc:	b920      	cbnz	r0, 8006508 <aci_gatt_add_service+0x94>
    return resp.Status;
  *Service_Handle = resp.Service_Handle;
 80064fe:	9b01      	ldr	r3, [sp, #4]
 8006500:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8006504:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 8006506:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 8006508:	b048      	add	sp, #288	; 0x120
 800650a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800650e:	2203      	movs	r2, #3
 8006510:	2100      	movs	r1, #0
 8006512:	a801      	add	r0, sp, #4
 8006514:	f000 f99e 	bl	8006854 <Osal_MemSet>
  cp0->Service_UUID_Type = Service_UUID_Type;
 8006518:	2302      	movs	r3, #2
 800651a:	f88d 3008 	strb.w	r3, [sp, #8]
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800651e:	f10d 0819 	add.w	r8, sp, #25
      case 2: size = 16; break;
 8006522:	2510      	movs	r5, #16
 8006524:	e7c4      	b.n	80064b0 <aci_gatt_add_service+0x3c>

08006526 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8006526:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006528:	b0c9      	sub	sp, #292	; 0x124
 800652a:	4604      	mov	r4, r0
 800652c:	4616      	mov	r6, r2
 800652e:	461d      	mov	r5, r3
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8006530:	2901      	cmp	r1, #1
 8006532:	d00a      	beq.n	800654a <aci_gatt_add_char+0x24>
 8006534:	2902      	cmp	r1, #2
 8006536:	d04f      	beq.n	80065d8 <aci_gatt_add_char+0xb2>
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006538:	2203      	movs	r2, #3
 800653a:	2100      	movs	r1, #0
 800653c:	a801      	add	r0, sp, #4
 800653e:	f000 f989 	bl	8006854 <Osal_MemSet>
    uint8_t size;
    switch ( Char_UUID_Type )
    {
      case 1: size = 2; break;
      case 2: size = 16; break;
      default: return BLE_STATUS_ERROR;
 8006542:	2097      	movs	r0, #151	; 0x97
 8006544:	e046      	b.n	80065d4 <aci_gatt_add_char+0xae>
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
  if ( hci_send_req(&rq, FALSE) < 0 )
    return BLE_STATUS_TIMEOUT;
 8006546:	20ff      	movs	r0, #255	; 0xff
 8006548:	e044      	b.n	80065d4 <aci_gatt_add_char+0xae>
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800654a:	2203      	movs	r2, #3
 800654c:	2100      	movs	r1, #0
 800654e:	a801      	add	r0, sp, #4
 8006550:	f000 f980 	bl	8006854 <Osal_MemSet>
  cp0->Service_Handle = Service_Handle;
 8006554:	f8ad 4008 	strh.w	r4, [sp, #8]
  cp0->Char_UUID_Type = Char_UUID_Type;
 8006558:	2301      	movs	r3, #1
 800655a:	f88d 300a 	strb.w	r3, [sp, #10]
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800655e:	f10d 040d 	add.w	r4, sp, #13
      case 1: size = 2; break;
 8006562:	2702      	movs	r7, #2
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8006564:	463a      	mov	r2, r7
 8006566:	4631      	mov	r1, r6
 8006568:	f10d 000b 	add.w	r0, sp, #11
 800656c:	f000 f96e 	bl	800684c <Osal_MemCpy>
      cp1->Char_Value_Length = Char_Value_Length;
 8006570:	8025      	strh	r5, [r4, #0]
      cp1->Char_Properties = Char_Properties;
 8006572:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 8006576:	70a3      	strb	r3, [r4, #2]
      cp1->Security_Permissions = Security_Permissions;
 8006578:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
 800657c:	70e3      	strb	r3, [r4, #3]
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800657e:	f89d 3140 	ldrb.w	r3, [sp, #320]	; 0x140
 8006582:	7123      	strb	r3, [r4, #4]
      cp1->Enc_Key_Size = Enc_Key_Size;
 8006584:	f89d 3144 	ldrb.w	r3, [sp, #324]	; 0x144
 8006588:	7163      	strb	r3, [r4, #5]
      cp1->Is_Variable = Is_Variable;
 800658a:	f89d 3148 	ldrb.w	r3, [sp, #328]	; 0x148
 800658e:	71a3      	strb	r3, [r4, #6]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006590:	2218      	movs	r2, #24
 8006592:	2100      	movs	r1, #0
 8006594:	a842      	add	r0, sp, #264	; 0x108
 8006596:	f000 f95d 	bl	8006854 <Osal_MemSet>
  rq.ogf = 0x3f;
 800659a:	233f      	movs	r3, #63	; 0x3f
 800659c:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x104;
 80065a0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80065a4:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 80065a8:	ab02      	add	r3, sp, #8
 80065aa:	9344      	str	r3, [sp, #272]	; 0x110
    index_input += 1;
 80065ac:	370a      	adds	r7, #10
  rq.clen = index_input;
 80065ae:	9745      	str	r7, [sp, #276]	; 0x114
  rq.rparam = &resp;
 80065b0:	ab01      	add	r3, sp, #4
 80065b2:	9346      	str	r3, [sp, #280]	; 0x118
  rq.rlen = sizeof(resp);
 80065b4:	2303      	movs	r3, #3
 80065b6:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80065b8:	2100      	movs	r1, #0
 80065ba:	a842      	add	r0, sp, #264	; 0x108
 80065bc:	f000 fbb4 	bl	8006d28 <hci_send_req>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	dbc0      	blt.n	8006546 <aci_gatt_add_char+0x20>
  if ( resp.Status )
 80065c4:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80065c8:	b920      	cbnz	r0, 80065d4 <aci_gatt_add_char+0xae>
    return resp.Status;
  *Char_Handle = resp.Char_Handle;
 80065ca:	9b01      	ldr	r3, [sp, #4]
 80065cc:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80065d0:	9a53      	ldr	r2, [sp, #332]	; 0x14c
 80065d2:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 80065d4:	b049      	add	sp, #292	; 0x124
 80065d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80065d8:	2203      	movs	r2, #3
 80065da:	2100      	movs	r1, #0
 80065dc:	a801      	add	r0, sp, #4
 80065de:	f000 f939 	bl	8006854 <Osal_MemSet>
  cp0->Service_Handle = Service_Handle;
 80065e2:	f8ad 4008 	strh.w	r4, [sp, #8]
  cp0->Char_UUID_Type = Char_UUID_Type;
 80065e6:	2302      	movs	r3, #2
 80065e8:	f88d 300a 	strb.w	r3, [sp, #10]
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80065ec:	f10d 041b 	add.w	r4, sp, #27
      case 2: size = 16; break;
 80065f0:	2710      	movs	r7, #16
 80065f2:	e7b7      	b.n	8006564 <aci_gatt_add_char+0x3e>

080065f4 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80065f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065f6:	b0c9      	sub	sp, #292	; 0x124
 80065f8:	461c      	mov	r4, r3
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 80065fa:	f10d 0707 	add.w	r7, sp, #7
 80065fe:	2600      	movs	r6, #0
 8006600:	f88d 6007 	strb.w	r6, [sp, #7]
  int index_input = 0;
  cp0->Service_Handle = Service_Handle;
 8006604:	ad02      	add	r5, sp, #8
 8006606:	f8ad 0008 	strh.w	r0, [sp, #8]
  index_input += 2;
  cp0->Char_Handle = Char_Handle;
 800660a:	f8ad 100a 	strh.w	r1, [sp, #10]
  index_input += 2;
  cp0->Val_Offset = Val_Offset;
 800660e:	f88d 200c 	strb.w	r2, [sp, #12]
  index_input += 1;
  cp0->Char_Value_Length = Char_Value_Length;
 8006612:	f88d 300d 	strb.w	r3, [sp, #13]
  index_input += 1;
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8006616:	461a      	mov	r2, r3
 8006618:	994e      	ldr	r1, [sp, #312]	; 0x138
 800661a:	f10d 000e 	add.w	r0, sp, #14
 800661e:	f000 f915 	bl	800684c <Osal_MemCpy>
  index_input += Char_Value_Length;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006622:	2218      	movs	r2, #24
 8006624:	4631      	mov	r1, r6
 8006626:	a842      	add	r0, sp, #264	; 0x108
 8006628:	f000 f914 	bl	8006854 <Osal_MemSet>
  rq.ogf = 0x3f;
 800662c:	233f      	movs	r3, #63	; 0x3f
 800662e:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x106;
 8006632:	f44f 7383 	mov.w	r3, #262	; 0x106
 8006636:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 800663a:	9544      	str	r5, [sp, #272]	; 0x110
  index_input += Char_Value_Length;
 800663c:	3406      	adds	r4, #6
  rq.clen = index_input;
 800663e:	9445      	str	r4, [sp, #276]	; 0x114
  rq.rparam = &status;
 8006640:	9746      	str	r7, [sp, #280]	; 0x118
  rq.rlen = 1;
 8006642:	2301      	movs	r3, #1
 8006644:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006646:	4631      	mov	r1, r6
 8006648:	a842      	add	r0, sp, #264	; 0x108
 800664a:	f000 fb6d 	bl	8006d28 <hci_send_req>
 800664e:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  return status;
 8006650:	bfac      	ite	ge
 8006652:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8006656:	20ff      	movlt	r0, #255	; 0xff
}
 8006658:	b049      	add	sp, #292	; 0x124
 800665a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800665c <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800665c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800665e:	b0c9      	sub	sp, #292	; 0x124
 8006660:	460c      	mov	r4, r1
 8006662:	4611      	mov	r1, r2
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8006664:	f10d 0707 	add.w	r7, sp, #7
 8006668:	2500      	movs	r5, #0
 800666a:	f88d 5007 	strb.w	r5, [sp, #7]
  int index_input = 0;
  cp0->Offset = Offset;
 800666e:	ae02      	add	r6, sp, #8
 8006670:	f88d 0008 	strb.w	r0, [sp, #8]
  index_input += 1;
  cp0->Length = Length;
 8006674:	f88d 4009 	strb.w	r4, [sp, #9]
  index_input += 1;
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8006678:	4622      	mov	r2, r4
 800667a:	f10d 000a 	add.w	r0, sp, #10
 800667e:	f000 f8e5 	bl	800684c <Osal_MemCpy>
  index_input += Length;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006682:	2218      	movs	r2, #24
 8006684:	4629      	mov	r1, r5
 8006686:	a842      	add	r0, sp, #264	; 0x108
 8006688:	f000 f8e4 	bl	8006854 <Osal_MemSet>
  rq.ogf = 0x3f;
 800668c:	233f      	movs	r3, #63	; 0x3f
 800668e:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x00c;
 8006692:	230c      	movs	r3, #12
 8006694:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 8006698:	9644      	str	r6, [sp, #272]	; 0x110
  index_input += Length;
 800669a:	3402      	adds	r4, #2
  rq.clen = index_input;
 800669c:	9445      	str	r4, [sp, #276]	; 0x114
  rq.rparam = &status;
 800669e:	9746      	str	r7, [sp, #280]	; 0x118
  rq.rlen = 1;
 80066a0:	2301      	movs	r3, #1
 80066a2:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80066a4:	4629      	mov	r1, r5
 80066a6:	a842      	add	r0, sp, #264	; 0x108
 80066a8:	f000 fb3e 	bl	8006d28 <hci_send_req>
 80066ac:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  return status;
 80066ae:	bfac      	ite	ge
 80066b0:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 80066b4:	20ff      	movlt	r0, #255	; 0xff
}
 80066b6:	b049      	add	sp, #292	; 0x124
 80066b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080066ba <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80066ba:	b570      	push	{r4, r5, r6, lr}
 80066bc:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 80066be:	f10d 0607 	add.w	r6, sp, #7
 80066c2:	2400      	movs	r4, #0
 80066c4:	f88d 4007 	strb.w	r4, [sp, #7]
  int index_input = 0;
  cp0->En_High_Power = En_High_Power;
 80066c8:	ad02      	add	r5, sp, #8
 80066ca:	f88d 0008 	strb.w	r0, [sp, #8]
  index_input += 1;
  cp0->PA_Level = PA_Level;
 80066ce:	f88d 1009 	strb.w	r1, [sp, #9]
  index_input += 1;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80066d2:	2218      	movs	r2, #24
 80066d4:	4621      	mov	r1, r4
 80066d6:	a842      	add	r0, sp, #264	; 0x108
 80066d8:	f000 f8bc 	bl	8006854 <Osal_MemSet>
  rq.ogf = 0x3f;
 80066dc:	233f      	movs	r3, #63	; 0x3f
 80066de:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x00f;
 80066e2:	230f      	movs	r3, #15
 80066e4:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 80066e8:	9544      	str	r5, [sp, #272]	; 0x110
  rq.clen = index_input;
 80066ea:	2302      	movs	r3, #2
 80066ec:	9345      	str	r3, [sp, #276]	; 0x114
  rq.rparam = &status;
 80066ee:	9646      	str	r6, [sp, #280]	; 0x118
  rq.rlen = 1;
 80066f0:	2301      	movs	r3, #1
 80066f2:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80066f4:	4621      	mov	r1, r4
 80066f6:	a842      	add	r0, sp, #264	; 0x108
 80066f8:	f000 fb16 	bl	8006d28 <hci_send_req>
 80066fc:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  return status;
 80066fe:	bfac      	ite	ge
 8006700:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8006704:	20ff      	movlt	r0, #255	; 0xff
}
 8006706:	b048      	add	sp, #288	; 0x120
 8006708:	bd70      	pop	{r4, r5, r6, pc}

0800670a <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800670a:	b570      	push	{r4, r5, r6, lr}
 800670c:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800670e:	f10d 0507 	add.w	r5, sp, #7
 8006712:	2400      	movs	r4, #0
 8006714:	f88d 4007 	strb.w	r4, [sp, #7]
  int index_input = 0;
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8006718:	ae02      	add	r6, sp, #8
 800671a:	f8ad 0008 	strh.w	r0, [sp, #8]
  index_input += 2;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800671e:	2218      	movs	r2, #24
 8006720:	4621      	mov	r1, r4
 8006722:	a842      	add	r0, sp, #264	; 0x108
 8006724:	f000 f896 	bl	8006854 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006728:	233f      	movs	r3, #63	; 0x3f
 800672a:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x018;
 800672e:	2318      	movs	r3, #24
 8006730:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 8006734:	9644      	str	r6, [sp, #272]	; 0x110
  rq.clen = index_input;
 8006736:	2302      	movs	r3, #2
 8006738:	9345      	str	r3, [sp, #276]	; 0x114
  rq.rparam = &status;
 800673a:	9546      	str	r5, [sp, #280]	; 0x118
  rq.rlen = 1;
 800673c:	2301      	movs	r3, #1
 800673e:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006740:	4621      	mov	r1, r4
 8006742:	a842      	add	r0, sp, #264	; 0x108
 8006744:	f000 faf0 	bl	8006d28 <hci_send_req>
 8006748:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  return status;
 800674a:	bfac      	ite	ge
 800674c:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8006750:	20ff      	movlt	r0, #255	; 0xff
}
 8006752:	b048      	add	sp, #288	; 0x120
 8006754:	bd70      	pop	{r4, r5, r6, pc}

08006756 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8006756:	b510      	push	{r4, lr}
 8006758:	b088      	sub	sp, #32
  struct hci_request rq;
  tBleStatus status = 0;
 800675a:	2400      	movs	r4, #0
 800675c:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006760:	2218      	movs	r2, #24
 8006762:	4621      	mov	r1, r4
 8006764:	a802      	add	r0, sp, #8
 8006766:	f000 f875 	bl	8006854 <Osal_MemSet>
  rq.ogf = 0x03;
 800676a:	2303      	movs	r3, #3
 800676c:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x003;
 8006770:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 8006774:	f10d 0307 	add.w	r3, sp, #7
 8006778:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 800677a:	2301      	movs	r3, #1
 800677c:	9307      	str	r3, [sp, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800677e:	4621      	mov	r1, r4
 8006780:	a802      	add	r0, sp, #8
 8006782:	f000 fad1 	bl	8006d28 <hci_send_req>
 8006786:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  return status;
 8006788:	bfac      	ite	ge
 800678a:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800678e:	20ff      	movlt	r0, #255	; 0xff
}
 8006790:	b008      	add	sp, #32
 8006792:	bd10      	pop	{r4, pc}

08006794 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 8006794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006796:	b0c9      	sub	sp, #292	; 0x124
 8006798:	4604      	mov	r4, r0
 800679a:	460e      	mov	r6, r1
 800679c:	4615      	mov	r5, r2
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800679e:	2205      	movs	r2, #5
 80067a0:	2100      	movs	r1, #0
 80067a2:	4668      	mov	r0, sp
 80067a4:	f000 f856 	bl	8006854 <Osal_MemSet>
  int index_input = 0;
  cp0->Connection_Handle = Connection_Handle;
 80067a8:	af02      	add	r7, sp, #8
 80067aa:	f8ad 4008 	strh.w	r4, [sp, #8]
  index_input += 2;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80067ae:	2218      	movs	r2, #24
 80067b0:	2100      	movs	r1, #0
 80067b2:	a842      	add	r0, sp, #264	; 0x108
 80067b4:	f000 f84e 	bl	8006854 <Osal_MemSet>
  rq.ogf = 0x08;
 80067b8:	2308      	movs	r3, #8
 80067ba:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x030;
 80067be:	2330      	movs	r3, #48	; 0x30
 80067c0:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 80067c4:	9744      	str	r7, [sp, #272]	; 0x110
  rq.clen = index_input;
 80067c6:	2302      	movs	r3, #2
 80067c8:	9345      	str	r3, [sp, #276]	; 0x114
  rq.rparam = &resp;
 80067ca:	f8cd d118 	str.w	sp, [sp, #280]	; 0x118
  rq.rlen = sizeof(resp);
 80067ce:	2305      	movs	r3, #5
 80067d0:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80067d2:	2100      	movs	r1, #0
 80067d4:	a842      	add	r0, sp, #264	; 0x108
 80067d6:	f000 faa7 	bl	8006d28 <hci_send_req>
 80067da:	2800      	cmp	r0, #0
 80067dc:	db0a      	blt.n	80067f4 <hci_le_read_phy+0x60>
    return BLE_STATUS_TIMEOUT;
  if ( resp.Status )
 80067de:	f89d 0000 	ldrb.w	r0, [sp]
 80067e2:	b928      	cbnz	r0, 80067f0 <hci_le_read_phy+0x5c>
    return resp.Status;
  *TX_PHY = resp.TX_PHY;
 80067e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80067e8:	7033      	strb	r3, [r6, #0]
  *RX_PHY = resp.RX_PHY;
 80067ea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80067ee:	702b      	strb	r3, [r5, #0]
  return BLE_STATUS_SUCCESS;
}
 80067f0:	b049      	add	sp, #292	; 0x124
 80067f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 80067f4:	20ff      	movs	r0, #255	; 0xff
 80067f6:	e7fb      	b.n	80067f0 <hci_le_read_phy+0x5c>

080067f8 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80067f8:	b570      	push	{r4, r5, r6, lr}
 80067fa:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 80067fc:	f10d 0607 	add.w	r6, sp, #7
 8006800:	2500      	movs	r5, #0
 8006802:	f88d 5007 	strb.w	r5, [sp, #7]
  int index_input = 0;
  cp0->ALL_PHYS = ALL_PHYS;
 8006806:	ac02      	add	r4, sp, #8
 8006808:	f88d 0008 	strb.w	r0, [sp, #8]
  index_input += 1;
  cp0->TX_PHYS = TX_PHYS;
 800680c:	f88d 1009 	strb.w	r1, [sp, #9]
  index_input += 1;
  cp0->RX_PHYS = RX_PHYS;
 8006810:	f88d 200a 	strb.w	r2, [sp, #10]
  index_input += 1;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006814:	2218      	movs	r2, #24
 8006816:	4629      	mov	r1, r5
 8006818:	a842      	add	r0, sp, #264	; 0x108
 800681a:	f000 f81b 	bl	8006854 <Osal_MemSet>
  rq.ogf = 0x08;
 800681e:	2308      	movs	r3, #8
 8006820:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x031;
 8006824:	2331      	movs	r3, #49	; 0x31
 8006826:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 800682a:	9444      	str	r4, [sp, #272]	; 0x110
  rq.clen = index_input;
 800682c:	2303      	movs	r3, #3
 800682e:	9345      	str	r3, [sp, #276]	; 0x114
  rq.rparam = &status;
 8006830:	9646      	str	r6, [sp, #280]	; 0x118
  rq.rlen = 1;
 8006832:	2301      	movs	r3, #1
 8006834:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006836:	4629      	mov	r1, r5
 8006838:	a842      	add	r0, sp, #264	; 0x108
 800683a:	f000 fa75 	bl	8006d28 <hci_send_req>
 800683e:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  return status;
 8006840:	bfac      	ite	ge
 8006842:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8006846:	20ff      	movlt	r0, #255	; 0xff
}
 8006848:	b048      	add	sp, #288	; 0x120
 800684a:	bd70      	pop	{r4, r5, r6, pc}

0800684c <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800684c:	b508      	push	{r3, lr}
  return memcpy( dest, src, size ); 
 800684e:	f001 fd87 	bl	8008360 <memcpy>
}
 8006852:	bd08      	pop	{r3, pc}

08006854 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8006854:	b508      	push	{r3, lr}
  return memset( ptr, value, size );
 8006856:	f001 fd91 	bl	800837c <memset>
}
 800685a:	bd08      	pop	{r3, pc}

0800685c <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800685c:	b510      	push	{r4, lr}
 800685e:	b084      	sub	sp, #16
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);

  switch(event_pckt->evt)
 8006860:	7843      	ldrb	r3, [r0, #1]
 8006862:	2bff      	cmp	r3, #255	; 0xff
 8006864:	d003      	beq.n	800686e <PeerToPeer_Event_Handler+0x12>
  return_value = SVCCTL_EvtNotAck;
 8006866:	2400      	movs	r4, #0
    default:
      break;
  }

  return(return_value);
}/* end SVCCTL_EvtAckStatus_t */
 8006868:	4620      	mov	r0, r4
 800686a:	b004      	add	sp, #16
 800686c:	bd10      	pop	{r4, pc}
 800686e:	4604      	mov	r4, r0
      switch(blecore_evt->ecode)
 8006870:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 8006874:	f640 4301 	movw	r3, #3073	; 0xc01
 8006878:	429a      	cmp	r2, r3
 800687a:	d001      	beq.n	8006880 <PeerToPeer_Event_Handler+0x24>
  return_value = SVCCTL_EvtNotAck;
 800687c:	2400      	movs	r4, #0
 800687e:	e7f3      	b.n	8006868 <PeerToPeer_Event_Handler+0xc>
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8006880:	f8b0 2007 	ldrh.w	r2, [r0, #7]
 8006884:	4b19      	ldr	r3, [pc, #100]	; (80068ec <PeerToPeer_Event_Handler+0x90>)
 8006886:	889b      	ldrh	r3, [r3, #4]
 8006888:	3302      	adds	r3, #2
 800688a:	429a      	cmp	r2, r3
 800688c:	d006      	beq.n	800689c <PeerToPeer_Event_Handler+0x40>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800688e:	4b17      	ldr	r3, [pc, #92]	; (80068ec <PeerToPeer_Event_Handler+0x90>)
 8006890:	885b      	ldrh	r3, [r3, #2]
 8006892:	3301      	adds	r3, #1
 8006894:	429a      	cmp	r2, r3
 8006896:	d00f      	beq.n	80068b8 <PeerToPeer_Event_Handler+0x5c>
  return_value = SVCCTL_EvtNotAck;
 8006898:	2400      	movs	r4, #0
 800689a:	e7e5      	b.n	8006868 <PeerToPeer_Event_Handler+0xc>
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800689c:	7b44      	ldrb	r4, [r0, #13]
 800689e:	f014 0401 	ands.w	r4, r4, #1
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 80068a2:	bf19      	ittee	ne
 80068a4:	2300      	movne	r3, #0
 80068a6:	f88d 3000 	strbne.w	r3, [sp]
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 80068aa:	2401      	moveq	r4, #1
 80068ac:	f88d 4000 	strbeq.w	r4, [sp]
                P2PS_STM_App_Notification(&Notification);
 80068b0:	4668      	mov	r0, sp
 80068b2:	f001 facb 	bl	8007e4c <P2PS_STM_App_Notification>
 80068b6:	e7d7      	b.n	8006868 <PeerToPeer_Event_Handler+0xc>
              BLE_DBG_P2P_STM_MSG("-- GATT : LED CONFIGURATION RECEIVED\n");
 80068b8:	480d      	ldr	r0, [pc, #52]	; (80068f0 <PeerToPeer_Event_Handler+0x94>)
 80068ba:	f000 fce1 	bl	8007280 <DbgTraceGetFileName>
 80068be:	4601      	mov	r1, r0
 80068c0:	2395      	movs	r3, #149	; 0x95
 80068c2:	4a0c      	ldr	r2, [pc, #48]	; (80068f4 <PeerToPeer_Event_Handler+0x98>)
 80068c4:	480c      	ldr	r0, [pc, #48]	; (80068f8 <PeerToPeer_Event_Handler+0x9c>)
 80068c6:	f001 fd61 	bl	800838c <iprintf>
 80068ca:	480c      	ldr	r0, [pc, #48]	; (80068fc <PeerToPeer_Event_Handler+0xa0>)
 80068cc:	f001 fde4 	bl	8008498 <puts>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	f88d 3000 	strb.w	r3, [sp]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 80068d6:	f8b4 300b 	ldrh.w	r3, [r4, #11]
 80068da:	f88d 3008 	strb.w	r3, [sp, #8]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 80068de:	340d      	adds	r4, #13
 80068e0:	9401      	str	r4, [sp, #4]
              P2PS_STM_App_Notification(&Notification);  
 80068e2:	4668      	mov	r0, sp
 80068e4:	f001 fab2 	bl	8007e4c <P2PS_STM_App_Notification>
  return_value = SVCCTL_EvtNotAck;
 80068e8:	2400      	movs	r4, #0
 80068ea:	e7bd      	b.n	8006868 <PeerToPeer_Event_Handler+0xc>
 80068ec:	2000012c 	.word	0x2000012c
 80068f0:	08009cbc 	.word	0x08009cbc
 80068f4:	08009d18 	.word	0x08009d18
 80068f8:	0800954c 	.word	0x0800954c
 80068fc:	08009cf0 	.word	0x08009cf0

08006900 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8006900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006904:	b08b      	sub	sp, #44	; 0x2c
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8006906:	4862      	ldr	r0, [pc, #392]	; (8006a90 <P2PS_STM_Init+0x190>)
 8006908:	f000 f90a 	bl	8006b20 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800690c:	238f      	movs	r3, #143	; 0x8f
 800690e:	f88d 3018 	strb.w	r3, [sp, #24]
 8006912:	23e5      	movs	r3, #229	; 0xe5
 8006914:	f88d 3019 	strb.w	r3, [sp, #25]
 8006918:	23b3      	movs	r3, #179	; 0xb3
 800691a:	f88d 301a 	strb.w	r3, [sp, #26]
 800691e:	23d5      	movs	r3, #213	; 0xd5
 8006920:	f88d 301b 	strb.w	r3, [sp, #27]
 8006924:	232e      	movs	r3, #46	; 0x2e
 8006926:	f88d 301c 	strb.w	r3, [sp, #28]
 800692a:	237f      	movs	r3, #127	; 0x7f
 800692c:	f88d 301d 	strb.w	r3, [sp, #29]
 8006930:	234a      	movs	r3, #74	; 0x4a
 8006932:	f88d 301e 	strb.w	r3, [sp, #30]
 8006936:	2398      	movs	r3, #152	; 0x98
 8006938:	f88d 301f 	strb.w	r3, [sp, #31]
 800693c:	232a      	movs	r3, #42	; 0x2a
 800693e:	f88d 3020 	strb.w	r3, [sp, #32]
 8006942:	2348      	movs	r3, #72	; 0x48
 8006944:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8006948:	237a      	movs	r3, #122	; 0x7a
 800694a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 800694e:	23cc      	movs	r3, #204	; 0xcc
 8006950:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8006954:	2340      	movs	r3, #64	; 0x40
 8006956:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800695a:	27fe      	movs	r7, #254	; 0xfe
 800695c:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
 8006960:	2400      	movs	r4, #0
 8006962:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
 8006966:	f88d 4027 	strb.w	r4, [sp, #39]	; 0x27
    aci_gatt_add_service(UUID_TYPE_128,
 800696a:	4b4a      	ldr	r3, [pc, #296]	; (8006a94 <P2PS_STM_Init+0x194>)
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	2308      	movs	r3, #8
 8006970:	2201      	movs	r2, #1
 8006972:	a906      	add	r1, sp, #24
 8006974:	2002      	movs	r0, #2
 8006976:	f7ff fd7d 	bl	8006474 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800697a:	f04f 0b19 	mov.w	fp, #25
 800697e:	f88d b018 	strb.w	fp, [sp, #24]
 8006982:	26ed      	movs	r6, #237	; 0xed
 8006984:	f88d 6019 	strb.w	r6, [sp, #25]
 8006988:	f04f 0a82 	mov.w	sl, #130	; 0x82
 800698c:	f88d a01a 	strb.w	sl, [sp, #26]
 8006990:	f06f 0351 	mvn.w	r3, #81	; 0x51
 8006994:	f88d 301b 	strb.w	r3, [sp, #27]
 8006998:	f88d 601c 	strb.w	r6, [sp, #28]
 800699c:	f04f 0221 	mov.w	r2, #33	; 0x21
 80069a0:	f88d 201d 	strb.w	r2, [sp, #29]
 80069a4:	f04f 014c 	mov.w	r1, #76	; 0x4c
 80069a8:	f88d 101e 	strb.w	r1, [sp, #30]
 80069ac:	f06f 0062 	mvn.w	r0, #98	; 0x62
 80069b0:	f88d 001f 	strb.w	r0, [sp, #31]
 80069b4:	f04f 0841 	mov.w	r8, #65	; 0x41
 80069b8:	f88d 8020 	strb.w	r8, [sp, #32]
 80069bc:	f04f 0545 	mov.w	r5, #69	; 0x45
 80069c0:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 80069c4:	f04f 0c22 	mov.w	ip, #34	; 0x22
 80069c8:	f88d c022 	strb.w	ip, [sp, #34]	; 0x22
 80069cc:	f04f 098e 	mov.w	r9, #142	; 0x8e
 80069d0:	f88d 9023 	strb.w	r9, [sp, #35]	; 0x23
 80069d4:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
 80069d8:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
 80069dc:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
 80069e0:	f88d 4027 	strb.w	r4, [sp, #39]	; 0x27
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 80069e4:	4b2b      	ldr	r3, [pc, #172]	; (8006a94 <P2PS_STM_Init+0x194>)
 80069e6:	f833 0b02 	ldrh.w	r0, [r3], #2
 80069ea:	9305      	str	r3, [sp, #20]
 80069ec:	2501      	movs	r5, #1
 80069ee:	9504      	str	r5, [sp, #16]
 80069f0:	f04f 0e0a 	mov.w	lr, #10
 80069f4:	f8cd e00c 	str.w	lr, [sp, #12]
 80069f8:	9502      	str	r5, [sp, #8]
 80069fa:	9401      	str	r4, [sp, #4]
 80069fc:	2306      	movs	r3, #6
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	2302      	movs	r3, #2
 8006a02:	f10d 0e18 	add.w	lr, sp, #24
 8006a06:	4672      	mov	r2, lr
 8006a08:	4619      	mov	r1, r3
 8006a0a:	f7ff fd8c 	bl	8006526 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8006a0e:	f88d b018 	strb.w	fp, [sp, #24]
 8006a12:	f88d 6019 	strb.w	r6, [sp, #25]
 8006a16:	f88d a01a 	strb.w	sl, [sp, #26]
 8006a1a:	f06f 0351 	mvn.w	r3, #81	; 0x51
 8006a1e:	f88d 301b 	strb.w	r3, [sp, #27]
 8006a22:	f88d 601c 	strb.w	r6, [sp, #28]
 8006a26:	f04f 0221 	mov.w	r2, #33	; 0x21
 8006a2a:	f88d 201d 	strb.w	r2, [sp, #29]
 8006a2e:	f04f 014c 	mov.w	r1, #76	; 0x4c
 8006a32:	f88d 101e 	strb.w	r1, [sp, #30]
 8006a36:	f06f 0062 	mvn.w	r0, #98	; 0x62
 8006a3a:	f88d 001f 	strb.w	r0, [sp, #31]
 8006a3e:	f88d 8020 	strb.w	r8, [sp, #32]
 8006a42:	f04f 0345 	mov.w	r3, #69	; 0x45
 8006a46:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8006a4a:	f04f 0c22 	mov.w	ip, #34	; 0x22
 8006a4e:	f88d c022 	strb.w	ip, [sp, #34]	; 0x22
 8006a52:	f88d 9023 	strb.w	r9, [sp, #35]	; 0x23
 8006a56:	2342      	movs	r3, #66	; 0x42
 8006a58:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8006a5c:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
 8006a60:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
 8006a64:	f88d 4027 	strb.w	r4, [sp, #39]	; 0x27
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8006a68:	4b0a      	ldr	r3, [pc, #40]	; (8006a94 <P2PS_STM_Init+0x194>)
 8006a6a:	f833 0b04 	ldrh.w	r0, [r3], #4
 8006a6e:	9305      	str	r3, [sp, #20]
 8006a70:	9504      	str	r5, [sp, #16]
 8006a72:	230a      	movs	r3, #10
 8006a74:	9303      	str	r3, [sp, #12]
 8006a76:	9502      	str	r5, [sp, #8]
 8006a78:	9401      	str	r4, [sp, #4]
 8006a7a:	2310      	movs	r3, #16
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	2302      	movs	r3, #2
 8006a80:	aa06      	add	r2, sp, #24
 8006a82:	4619      	mov	r1, r3
 8006a84:	f7ff fd4f 	bl	8006526 <aci_gatt_add_char>
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
}
 8006a88:	b00b      	add	sp, #44	; 0x2c
 8006a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a8e:	bf00      	nop
 8006a90:	0800685d 	.word	0x0800685d
 8006a94:	2000012c 	.word	0x2000012c

08006a98 <BAS_Init>:
void BVOPUS_STM_Init(void);

__weak void BAS_Init( void )
{
  return;
}
 8006a98:	4770      	bx	lr

08006a9a <BLS_Init>:

__weak void BLS_Init( void )
{
  return;
}
 8006a9a:	4770      	bx	lr

08006a9c <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
  return;
}
 8006a9c:	4770      	bx	lr

08006a9e <DIS_Init>:
__weak void DIS_Init( void )
{
  return;
}
 8006a9e:	4770      	bx	lr

08006aa0 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
  return;
}
 8006aa0:	4770      	bx	lr

08006aa2 <HIDS_Init>:
__weak void HIDS_Init( void )
{
  return;
}
 8006aa2:	4770      	bx	lr

08006aa4 <HRS_Init>:
__weak void HRS_Init( void )
{
  return;
}
 8006aa4:	4770      	bx	lr

08006aa6 <HTS_Init>:
__weak void HTS_Init( void )
{
  return;
}
 8006aa6:	4770      	bx	lr

08006aa8 <IAS_Init>:
__weak void IAS_Init( void )
{
  return;
}
 8006aa8:	4770      	bx	lr

08006aaa <LLS_Init>:
__weak void LLS_Init( void )
{
  return;
}
 8006aaa:	4770      	bx	lr

08006aac <TPS_Init>:
__weak void TPS_Init( void )
{
  return;
}
 8006aac:	4770      	bx	lr

08006aae <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
  return;
}
 8006aae:	4770      	bx	lr

08006ab0 <ZDD_STM_Init>:
  return;
}
__weak void ZDD_STM_Init( void )
{
  return;
}
 8006ab0:	4770      	bx	lr

08006ab2 <OTAS_STM_Init>:
__weak void OTAS_STM_Init( void )
{
  return;
}
 8006ab2:	4770      	bx	lr

08006ab4 <MESH_Init>:
__weak void MESH_Init( void )
{
  return;
}
 8006ab4:	4770      	bx	lr

08006ab6 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
  return;
}
 8006ab6:	4770      	bx	lr

08006ab8 <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
  return;
}
 8006ab8:	4770      	bx	lr

08006aba <SVCCTL_SvcInit>:

  return;
}

__weak void SVCCTL_SvcInit(void)
{
 8006aba:	b508      	push	{r3, lr}
  BAS_Init();
 8006abc:	f7ff ffec 	bl	8006a98 <BAS_Init>

  BLS_Init();
 8006ac0:	f7ff ffeb 	bl	8006a9a <BLS_Init>

  CRS_STM_Init();
 8006ac4:	f7ff ffea 	bl	8006a9c <CRS_STM_Init>

  DIS_Init();
 8006ac8:	f7ff ffe9 	bl	8006a9e <DIS_Init>

  EDS_STM_Init();
 8006acc:	f7ff ffe8 	bl	8006aa0 <EDS_STM_Init>

  HIDS_Init();
 8006ad0:	f7ff ffe7 	bl	8006aa2 <HIDS_Init>

  HRS_Init();
 8006ad4:	f7ff ffe6 	bl	8006aa4 <HRS_Init>

  HTS_Init();
 8006ad8:	f7ff ffe5 	bl	8006aa6 <HTS_Init>

  IAS_Init();
 8006adc:	f7ff ffe4 	bl	8006aa8 <IAS_Init>

  LLS_Init();
 8006ae0:	f7ff ffe3 	bl	8006aaa <LLS_Init>

  TPS_Init();
 8006ae4:	f7ff ffe2 	bl	8006aac <TPS_Init>

  MOTENV_STM_Init();
 8006ae8:	f7ff ffe1 	bl	8006aae <MOTENV_STM_Init>

  P2PS_STM_Init();
 8006aec:	f7ff ff08 	bl	8006900 <P2PS_STM_Init>

  ZDD_STM_Init();
 8006af0:	f7ff ffde 	bl	8006ab0 <ZDD_STM_Init>

  OTAS_STM_Init();
 8006af4:	f7ff ffdd 	bl	8006ab2 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8006af8:	f7ff ffdd 	bl	8006ab6 <BVOPUS_STM_Init>

  MESH_Init();
 8006afc:	f7ff ffda 	bl	8006ab4 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8006b00:	f7ff ffda 	bl	8006ab8 <SVCCTL_InitCustomSvc>
  
  return;
}
 8006b04:	bd08      	pop	{r3, pc}
	...

08006b08 <SVCCTL_Init>:
{
 8006b08:	b508      	push	{r3, lr}
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8006b0a:	4b04      	ldr	r3, [pc, #16]	; (8006b1c <SVCCTL_Init+0x14>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8006b10:	f883 2020 	strb.w	r2, [r3, #32]
  SVCCTL_SvcInit();
 8006b14:	f7ff ffd1 	bl	8006aba <SVCCTL_SvcInit>
}
 8006b18:	bd08      	pop	{r3, pc}
 8006b1a:	bf00      	nop
 8006b1c:	20000134 	.word	0x20000134

08006b20 <SVCCTL_RegisterSvcHandler>:
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8006b20:	4a03      	ldr	r2, [pc, #12]	; (8006b30 <SVCCTL_RegisterSvcHandler+0x10>)
 8006b22:	7f13      	ldrb	r3, [r2, #28]
 8006b24:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8006b28:	3301      	adds	r3, #1
 8006b2a:	7713      	strb	r3, [r2, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
}
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	20000134 	.word	0x20000134

08006b34 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8006b34:	b570      	push	{r4, r5, r6, lr}
 8006b36:	4604      	mov	r4, r0
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
  event_notification_status = SVCCTL_EvtNotAck;

  switch (event_pckt->evt)
 8006b38:	7843      	ldrb	r3, [r0, #1]
 8006b3a:	2bff      	cmp	r3, #255	; 0xff
 8006b3c:	d106      	bne.n	8006b4c <SVCCTL_UserEvtRx+0x18>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8006b3e:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 8006b42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006b46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b4a:	d003      	beq.n	8006b54 <SVCCTL_UserEvtRx+0x20>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	f000 ffef 	bl	8007b30 <SVCCTL_App_Notification>
      return_status = SVCCTL_UserEvtFlowEnable;
      break;
  }

  return (return_status);
}
 8006b52:	bd70      	pop	{r4, r5, r6, pc}
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006b54:	4b0a      	ldr	r3, [pc, #40]	; (8006b80 <SVCCTL_UserEvtRx+0x4c>)
 8006b56:	7f1b      	ldrb	r3, [r3, #28]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d0f7      	beq.n	8006b4c <SVCCTL_UserEvtRx+0x18>
 8006b5c:	2500      	movs	r5, #0
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8006b5e:	4e08      	ldr	r6, [pc, #32]	; (8006b80 <SVCCTL_UserEvtRx+0x4c>)
 8006b60:	b2eb      	uxtb	r3, r5
 8006b62:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8006b66:	4620      	mov	r0, r4
 8006b68:	4798      	blx	r3
            if (event_notification_status != SVCCTL_EvtNotAck)
 8006b6a:	b928      	cbnz	r0, 8006b78 <SVCCTL_UserEvtRx+0x44>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006b6c:	3501      	adds	r5, #1
 8006b6e:	7f32      	ldrb	r2, [r6, #28]
 8006b70:	b2eb      	uxtb	r3, r5
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d8f4      	bhi.n	8006b60 <SVCCTL_UserEvtRx+0x2c>
 8006b76:	e7e9      	b.n	8006b4c <SVCCTL_UserEvtRx+0x18>
      return_status = SVCCTL_App_Notification(pckt);
 8006b78:	3802      	subs	r0, #2
 8006b7a:	bf18      	it	ne
 8006b7c:	2001      	movne	r0, #1
 8006b7e:	e7e8      	b.n	8006b52 <SVCCTL_UserEvtRx+0x1e>
 8006b80:	20000134 	.word	0x20000134

08006b84 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8006b84:	b500      	push	{lr}
 8006b86:	b085      	sub	sp, #20
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8006b88:	466b      	mov	r3, sp
 8006b8a:	f100 020c 	add.w	r2, r0, #12
 8006b8e:	2125      	movs	r1, #37	; 0x25
 8006b90:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8006b94:	f000 f9d2 	bl	8006f3c <shci_send>
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}
 8006b98:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8006b9c:	b005      	add	sp, #20
 8006b9e:	f85d fb04 	ldr.w	pc, [sp], #4

08006ba2 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8006ba2:	b500      	push	{lr}
 8006ba4:	b085      	sub	sp, #20
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8006ba6:	466b      	mov	r3, sp
 8006ba8:	f100 020c 	add.w	r2, r0, #12
 8006bac:	210f      	movs	r1, #15
 8006bae:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8006bb2:	f000 f9c3 	bl	8006f3c <shci_send>
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}
 8006bb6:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8006bba:	b005      	add	sp, #20
 8006bbc:	f85d fb04 	ldr.w	pc, [sp], #4

08006bc0 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8006bc0:	b500      	push	{lr}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	4602      	mov	r2, r0
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8006bc6:	466b      	mov	r3, sp
 8006bc8:	210e      	movs	r1, #14
 8006bca:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8006bce:	f000 f9b5 	bl	8006f3c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}
 8006bd2:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8006bd6:	b005      	add	sp, #20
 8006bd8:	f85d fb04 	ldr.w	pc, [sp], #4

08006bdc <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8006bdc:	b470      	push	{r4, r5, r6}
  uint32_t wireless_firmware_infoStack = 0;
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
  uint32_t fus_version = 0;
  uint32_t fus_memorySize = 0;

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8006bde:	4b1d      	ldr	r3, [pc, #116]	; (8006c54 <SHCI_GetWirelessFwInfo+0x78>)
 8006be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006bea:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8006bee:	681a      	ldr	r2, [r3, #0]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8006bf0:	6811      	ldr	r1, [r2, #0]
 8006bf2:	4b19      	ldr	r3, [pc, #100]	; (8006c58 <SHCI_GetWirelessFwInfo+0x7c>)
 8006bf4:	4299      	cmp	r1, r3
 8006bf6:	d026      	beq.n	8006c46 <SHCI_GetWirelessFwInfo+0x6a>

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8006bf8:	6913      	ldr	r3, [r2, #16]
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8006bfa:	6954      	ldr	r4, [r2, #20]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8006bfc:	6995      	ldr	r5, [r2, #24]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8006bfe:	6851      	ldr	r1, [r2, #4]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8006c00:	6892      	ldr	r2, [r2, #8]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8006c02:	0e1e      	lsrs	r6, r3, #24
 8006c04:	7006      	strb	r6, [r0, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8006c06:	0c1e      	lsrs	r6, r3, #16
 8006c08:	7046      	strb	r6, [r0, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006c0a:	0a1e      	lsrs	r6, r3, #8
 8006c0c:	7086      	strb	r6, [r0, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8006c0e:	f3c3 1603 	ubfx	r6, r3, #4, #4
 8006c12:	70c6      	strb	r6, [r0, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8006c14:	f003 030f 	and.w	r3, r3, #15
 8006c18:	7103      	strb	r3, [r0, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8006c1a:	0e23      	lsrs	r3, r4, #24
 8006c1c:	7143      	strb	r3, [r0, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006c1e:	0c23      	lsrs	r3, r4, #16
 8006c20:	7183      	strb	r3, [r0, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8006c22:	0a23      	lsrs	r3, r4, #8
 8006c24:	71c3      	strb	r3, [r0, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8006c26:	7204      	strb	r4, [r0, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8006c28:	7245      	strb	r5, [r0, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8006c2a:	0e0b      	lsrs	r3, r1, #24
 8006c2c:	7283      	strb	r3, [r0, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8006c2e:	0c0b      	lsrs	r3, r1, #16
 8006c30:	72c3      	strb	r3, [r0, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006c32:	0a09      	lsrs	r1, r1, #8
 8006c34:	7301      	strb	r1, [r0, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8006c36:	0e13      	lsrs	r3, r2, #24
 8006c38:	7343      	strb	r3, [r0, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006c3a:	0c13      	lsrs	r3, r2, #16
 8006c3c:	7383      	strb	r3, [r0, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8006c3e:	73c2      	strb	r2, [r0, #15]

  return (SHCI_Success);
}
 8006c40:	2000      	movs	r0, #0
 8006c42:	bc70      	pop	{r4, r5, r6}
 8006c44:	4770      	bx	lr
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8006c46:	6953      	ldr	r3, [r2, #20]
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8006c48:	6994      	ldr	r4, [r2, #24]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8006c4a:	69d5      	ldr	r5, [r2, #28]
    fus_version =  p_fus_device_info_table->FusVersion;
 8006c4c:	68d1      	ldr	r1, [r2, #12]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8006c4e:	6912      	ldr	r2, [r2, #16]
 8006c50:	e7d7      	b.n	8006c02 <SHCI_GetWirelessFwInfo+0x26>
 8006c52:	bf00      	nop
 8006c54:	58004000 	.word	0x58004000
 8006c58:	a94656b9 	.word	0xa94656b9

08006c5c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006c5c:	b570      	push	{r4, r5, r6, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	460c      	mov	r4, r1
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006c62:	684a      	ldr	r2, [r1, #4]
 8006c64:	4b0d      	ldr	r3, [pc, #52]	; (8006c9c <hci_init+0x40>)
 8006c66:	601a      	str	r2, [r3, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8006c68:	4d0d      	ldr	r5, [pc, #52]	; (8006ca0 <hci_init+0x44>)
 8006c6a:	61e8      	str	r0, [r5, #28]

  hci_register_io_bus (&hciContext.io);
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	f000 f8e5 	bl	8006e3c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006c72:	6826      	ldr	r6, [r4, #0]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8006c74:	480b      	ldr	r0, [pc, #44]	; (8006ca4 <hci_init+0x48>)
 8006c76:	f000 fb61 	bl	800733c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8006c7a:	4c0b      	ldr	r4, [pc, #44]	; (8006ca8 <hci_init+0x4c>)
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	f840 6b04 	str.w	r6, [r0], #4

  LST_init_head (&HciAsynchEventQueue);
 8006c82:	f000 fb5b 	bl	800733c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006c86:	2301      	movs	r3, #1
 8006c88:	7323      	strb	r3, [r4, #12]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8006c8a:	682b      	ldr	r3, [r5, #0]
 8006c8c:	b123      	cbz	r3, 8006c98 <hci_init+0x3c>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006c8e:	9602      	str	r6, [sp, #8]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8006c90:	4a06      	ldr	r2, [pc, #24]	; (8006cac <hci_init+0x50>)
 8006c92:	9200      	str	r2, [sp, #0]
    hciContext.io.Init(&Conf);
 8006c94:	4668      	mov	r0, sp
 8006c96:	4798      	blx	r3
}
 8006c98:	b004      	add	sp, #16
 8006c9a:	bd70      	pop	{r4, r5, r6, pc}
 8006c9c:	200002e8 	.word	0x200002e8
 8006ca0:	200002ec 	.word	0x200002ec
 8006ca4:	200002e0 	.word	0x200002e0
 8006ca8:	20000158 	.word	0x20000158
 8006cac:	08006e09 	.word	0x08006e09

08006cb0 <hci_user_evt_proc>:
{
 8006cb0:	b500      	push	{lr}
 8006cb2:	b085      	sub	sp, #20
  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006cb4:	4819      	ldr	r0, [pc, #100]	; (8006d1c <hci_user_evt_proc+0x6c>)
 8006cb6:	f000 fb44 	bl	8007342 <LST_is_empty>
 8006cba:	b910      	cbnz	r0, 8006cc2 <hci_user_evt_proc+0x12>
 8006cbc:	4b18      	ldr	r3, [pc, #96]	; (8006d20 <hci_user_evt_proc+0x70>)
 8006cbe:	7b1b      	ldrb	r3, [r3, #12]
 8006cc0:	b94b      	cbnz	r3, 8006cd6 <hci_user_evt_proc+0x26>
  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006cc2:	4816      	ldr	r0, [pc, #88]	; (8006d1c <hci_user_evt_proc+0x6c>)
 8006cc4:	f000 fb3d 	bl	8007342 <LST_is_empty>
 8006cc8:	b910      	cbnz	r0, 8006cd0 <hci_user_evt_proc+0x20>
 8006cca:	4b15      	ldr	r3, [pc, #84]	; (8006d20 <hci_user_evt_proc+0x70>)
 8006ccc:	7b1b      	ldrb	r3, [r3, #12]
 8006cce:	bb0b      	cbnz	r3, 8006d14 <hci_user_evt_proc+0x64>
}
 8006cd0:	b005      	add	sp, #20
 8006cd2:	f85d fb04 	ldr.w	pc, [sp], #4
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006cd6:	a903      	add	r1, sp, #12
 8006cd8:	4810      	ldr	r0, [pc, #64]	; (8006d1c <hci_user_evt_proc+0x6c>)
 8006cda:	f000 fb61 	bl	80073a0 <LST_remove_head>
    if (hciContext.UserEvtRx != NULL)
 8006cde:	4b11      	ldr	r3, [pc, #68]	; (8006d24 <hci_user_evt_proc+0x74>)
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	b183      	cbz	r3, 8006d06 <hci_user_evt_proc+0x56>
      UserEvtRxParam.pckt = phcievtbuffer;
 8006ce4:	9a03      	ldr	r2, [sp, #12]
 8006ce6:	9202      	str	r2, [sp, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f88d 2004 	strb.w	r2, [sp, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006cee:	a801      	add	r0, sp, #4
 8006cf0:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8006cf2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006cf6:	4a0a      	ldr	r2, [pc, #40]	; (8006d20 <hci_user_evt_proc+0x70>)
 8006cf8:	7313      	strb	r3, [r2, #12]
    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8006cfa:	b93b      	cbnz	r3, 8006d0c <hci_user_evt_proc+0x5c>
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006cfc:	9903      	ldr	r1, [sp, #12]
 8006cfe:	4807      	ldr	r0, [pc, #28]	; (8006d1c <hci_user_evt_proc+0x6c>)
 8006d00:	f000 fb2a 	bl	8007358 <LST_insert_head>
 8006d04:	e7dd      	b.n	8006cc2 <hci_user_evt_proc+0x12>
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006d06:	4b06      	ldr	r3, [pc, #24]	; (8006d20 <hci_user_evt_proc+0x70>)
 8006d08:	2201      	movs	r2, #1
 8006d0a:	731a      	strb	r2, [r3, #12]
      TL_MM_EvtDone( phcievtbuffer );
 8006d0c:	9803      	ldr	r0, [sp, #12]
 8006d0e:	f000 fa5d 	bl	80071cc <TL_MM_EvtDone>
 8006d12:	e7d6      	b.n	8006cc2 <hci_user_evt_proc+0x12>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8006d14:	4801      	ldr	r0, [pc, #4]	; (8006d1c <hci_user_evt_proc+0x6c>)
 8006d16:	f001 f889 	bl	8007e2c <hci_notify_asynch_evt>
  return;
 8006d1a:	e7d9      	b.n	8006cd0 <hci_user_evt_proc+0x20>
 8006d1c:	2000015c 	.word	0x2000015c
 8006d20:	20000158 	.word	0x20000158
 8006d24:	200002ec 	.word	0x200002ec

08006d28 <hci_send_req>:
{
 8006d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d2c:	b082      	sub	sp, #8
 8006d2e:	4680      	mov	r8, r0

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
  if(hcicmdstatus == HCI_TL_CmdBusy)
  {
    if(StatusNotCallBackFunction != 0)
 8006d30:	4b31      	ldr	r3, [pc, #196]	; (8006df8 <hci_send_req+0xd0>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	b10b      	cbz	r3, 8006d3a <hci_send_req+0x12>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8006d36:	2000      	movs	r0, #0
 8006d38:	4798      	blx	r3
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8006d3a:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8006d3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d42:	f8b8 2000 	ldrh.w	r2, [r8]
 8006d46:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8006d4a:	b29f      	uxth	r7, r3
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8006d4c:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8006d50:	f8d8 1008 	ldr.w	r1, [r8, #8]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8006d54:	4829      	ldr	r0, [pc, #164]	; (8006dfc <hci_send_req+0xd4>)
 8006d56:	6800      	ldr	r0, [r0, #0]
 8006d58:	f8a0 3009 	strh.w	r3, [r0, #9]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8006d5c:	72c2      	strb	r2, [r0, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8006d5e:	b2d2      	uxtb	r2, r2
 8006d60:	300c      	adds	r0, #12
 8006d62:	f001 fafd 	bl	8008360 <memcpy>
  hciContext.io.Send(0,0);
 8006d66:	4b26      	ldr	r3, [pc, #152]	; (8006e00 <hci_send_req+0xd8>)
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	4608      	mov	r0, r1
 8006d6e:	4798      	blx	r3
  local_cmd_status = HCI_TL_CmdBusy;
 8006d70:	2600      	movs	r6, #0
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006d72:	4d24      	ldr	r5, [pc, #144]	; (8006e04 <hci_send_req+0xdc>)
 8006d74:	e032      	b.n	8006ddc <hci_send_req+0xb4>
        if(pcommand_status_event->cmdcode == opcode)
 8006d76:	f8b4 300d 	ldrh.w	r3, [r4, #13]
 8006d7a:	42bb      	cmp	r3, r7
 8006d7c:	d004      	beq.n	8006d88 <hci_send_req+0x60>
        if(pcommand_status_event->numcmd != 0)
 8006d7e:	7b23      	ldrb	r3, [r4, #12]
          local_cmd_status = HCI_TL_CmdAvailable;
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	bf18      	it	ne
 8006d84:	2601      	movne	r6, #1
 8006d86:	e018      	b.n	8006dba <hci_send_req+0x92>
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8006d88:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006d8c:	7ae2      	ldrb	r2, [r4, #11]
 8006d8e:	701a      	strb	r2, [r3, #0]
 8006d90:	e7f5      	b.n	8006d7e <hci_send_req+0x56>
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8006d92:	7aa2      	ldrb	r2, [r4, #10]
 8006d94:	3a03      	subs	r2, #3
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8006d96:	b2d2      	uxtb	r2, r2
 8006d98:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	bfa8      	it	ge
 8006da0:	461a      	movge	r2, r3
 8006da2:	f8c8 2014 	str.w	r2, [r8, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8006da6:	f104 010e 	add.w	r1, r4, #14
 8006daa:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8006dae:	f001 fad7 	bl	8008360 <memcpy>
        if(pcommand_complete_event->numcmd != 0)
 8006db2:	7ae3      	ldrb	r3, [r4, #11]
          local_cmd_status = HCI_TL_CmdAvailable;
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	bf18      	it	ne
 8006db8:	2601      	movne	r6, #1
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006dba:	4628      	mov	r0, r5
 8006dbc:	f000 fac1 	bl	8007342 <LST_is_empty>
 8006dc0:	b958      	cbnz	r0, 8006dda <hci_send_req+0xb2>
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8006dc2:	a901      	add	r1, sp, #4
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	f000 faeb 	bl	80073a0 <LST_remove_head>
      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8006dca:	9c01      	ldr	r4, [sp, #4]
 8006dcc:	7a63      	ldrb	r3, [r4, #9]
 8006dce:	2b0f      	cmp	r3, #15
 8006dd0:	d0d1      	beq.n	8006d76 <hci_send_req+0x4e>
        if(pcommand_complete_event->cmdcode == opcode)
 8006dd2:	89a3      	ldrh	r3, [r4, #12]
 8006dd4:	42bb      	cmp	r3, r7
 8006dd6:	d1ec      	bne.n	8006db2 <hci_send_req+0x8a>
 8006dd8:	e7db      	b.n	8006d92 <hci_send_req+0x6a>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8006dda:	b926      	cbnz	r6, 8006de6 <hci_send_req+0xbe>
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8006ddc:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8006de0:	f001 f82f 	bl	8007e42 <hci_cmd_resp_wait>
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006de4:	e7e9      	b.n	8006dba <hci_send_req+0x92>
    }
  }
  else
  {
    if(StatusNotCallBackFunction != 0)
 8006de6:	4b04      	ldr	r3, [pc, #16]	; (8006df8 <hci_send_req+0xd0>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	b10b      	cbz	r3, 8006df0 <hci_send_req+0xc8>
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8006dec:	2001      	movs	r0, #1
 8006dee:	4798      	blx	r3
}
 8006df0:	2000      	movs	r0, #0
 8006df2:	b002      	add	sp, #8
 8006df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006df8:	200002e8 	.word	0x200002e8
 8006dfc:	20000158 	.word	0x20000158
 8006e00:	200002ec 	.word	0x200002ec
 8006e04:	200002e0 	.word	0x200002e0

08006e08 <TlEvtReceived>:

  return;
}

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8006e08:	b510      	push	{r4, lr}
 8006e0a:	4601      	mov	r1, r0
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8006e0c:	7a43      	ldrb	r3, [r0, #9]
 8006e0e:	3b0e      	subs	r3, #14
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d907      	bls.n	8006e26 <TlEvtReceived+0x1e>
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8006e16:	4c07      	ldr	r4, [pc, #28]	; (8006e34 <TlEvtReceived+0x2c>)
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f000 faa9 	bl	8007370 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8006e1e:	4620      	mov	r0, r4
 8006e20:	f001 f804 	bl	8007e2c <hci_notify_asynch_evt>
  }

  return;
}
 8006e24:	bd10      	pop	{r4, pc}
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8006e26:	4804      	ldr	r0, [pc, #16]	; (8006e38 <TlEvtReceived+0x30>)
 8006e28:	f000 faa2 	bl	8007370 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8006e2c:	2000      	movs	r0, #0
 8006e2e:	f001 f803 	bl	8007e38 <hci_cmd_resp_release>
 8006e32:	e7f7      	b.n	8006e24 <TlEvtReceived+0x1c>
 8006e34:	2000015c 	.word	0x2000015c
 8006e38:	200002e0 	.word	0x200002e0

08006e3c <hci_register_io_bus>:


void hci_register_io_bus(tHciIO* fops)
{
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8006e3c:	4b02      	ldr	r3, [pc, #8]	; (8006e48 <hci_register_io_bus+0xc>)
 8006e3e:	6003      	str	r3, [r0, #0]
  fops->Send    = TL_BLE_SendCmd;
 8006e40:	4b02      	ldr	r3, [pc, #8]	; (8006e4c <hci_register_io_bus+0x10>)
 8006e42:	6103      	str	r3, [r0, #16]

  return;
}
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	0800704d 	.word	0x0800704d
 8006e4c:	08007095 	.word	0x08007095

08006e50 <TlUserEvtReceived>:

  return;
}

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8006e50:	b510      	push	{r4, lr}
 8006e52:	4601      	mov	r1, r0
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8006e54:	4c03      	ldr	r4, [pc, #12]	; (8006e64 <TlUserEvtReceived+0x14>)
 8006e56:	4620      	mov	r0, r4
 8006e58:	f000 fa8a 	bl	8007370 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	f7fa f80a 	bl	8000e76 <shci_notify_asynch_evt>

  return;
}
 8006e62:	bd10      	pop	{r4, pc}
 8006e64:	20000168 	.word	0x20000168

08006e68 <shci_init>:
{
 8006e68:	b570      	push	{r4, r5, r6, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	460c      	mov	r4, r1
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006e6e:	4d11      	ldr	r5, [pc, #68]	; (8006eb4 <shci_init+0x4c>)
 8006e70:	684b      	ldr	r3, [r1, #4]
 8006e72:	602b      	str	r3, [r5, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8006e74:	4b10      	ldr	r3, [pc, #64]	; (8006eb8 <shci_init+0x50>)
 8006e76:	61d8      	str	r0, [r3, #28]
  shci_register_io_bus (&shciContext.io);
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 f89b 	bl	8006fb4 <shci_register_io_bus>
  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006e7e:	6826      	ldr	r6, [r4, #0]
  pCmdBuffer = p_cmdbuffer;
 8006e80:	4c0e      	ldr	r4, [pc, #56]	; (8006ebc <shci_init+0x54>)
 8006e82:	60a6      	str	r6, [r4, #8]
  LST_init_head (&SHciAsynchEventQueue);
 8006e84:	4620      	mov	r0, r4
 8006e86:	f000 fa59 	bl	800733c <LST_init_head>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	7323      	strb	r3, [r4, #12]
    if(StatusNotCallBackFunction != 0)
 8006e8e:	682b      	ldr	r3, [r5, #0]
 8006e90:	b10b      	cbz	r3, 8006e96 <shci_init+0x2e>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8006e92:	2001      	movs	r0, #1
 8006e94:	4798      	blx	r3
  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8006e96:	4b09      	ldr	r3, [pc, #36]	; (8006ebc <shci_init+0x54>)
 8006e98:	2201      	movs	r2, #1
 8006e9a:	735a      	strb	r2, [r3, #13]
  if (shciContext.io.Init)
 8006e9c:	4b06      	ldr	r3, [pc, #24]	; (8006eb8 <shci_init+0x50>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	b133      	cbz	r3, 8006eb0 <shci_init+0x48>
    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006ea2:	9603      	str	r6, [sp, #12]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8006ea4:	4a06      	ldr	r2, [pc, #24]	; (8006ec0 <shci_init+0x58>)
 8006ea6:	9201      	str	r2, [sp, #4]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8006ea8:	4a06      	ldr	r2, [pc, #24]	; (8006ec4 <shci_init+0x5c>)
 8006eaa:	9202      	str	r2, [sp, #8]
    shciContext.io.Init(&Conf);
 8006eac:	a801      	add	r0, sp, #4
 8006eae:	4798      	blx	r3
}
 8006eb0:	b004      	add	sp, #16
 8006eb2:	bd70      	pop	{r4, r5, r6, pc}
 8006eb4:	2000030c 	.word	0x2000030c
 8006eb8:	20000310 	.word	0x20000310
 8006ebc:	20000168 	.word	0x20000168
 8006ec0:	08006fa9 	.word	0x08006fa9
 8006ec4:	08006e51 	.word	0x08006e51

08006ec8 <shci_user_evt_proc>:
{
 8006ec8:	b500      	push	{lr}
 8006eca:	b085      	sub	sp, #20
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8006ecc:	4819      	ldr	r0, [pc, #100]	; (8006f34 <shci_user_evt_proc+0x6c>)
 8006ece:	f000 fa38 	bl	8007342 <LST_is_empty>
 8006ed2:	b910      	cbnz	r0, 8006eda <shci_user_evt_proc+0x12>
 8006ed4:	4b17      	ldr	r3, [pc, #92]	; (8006f34 <shci_user_evt_proc+0x6c>)
 8006ed6:	7b5b      	ldrb	r3, [r3, #13]
 8006ed8:	b94b      	cbnz	r3, 8006eee <shci_user_evt_proc+0x26>
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8006eda:	4816      	ldr	r0, [pc, #88]	; (8006f34 <shci_user_evt_proc+0x6c>)
 8006edc:	f000 fa31 	bl	8007342 <LST_is_empty>
 8006ee0:	b910      	cbnz	r0, 8006ee8 <shci_user_evt_proc+0x20>
 8006ee2:	4b14      	ldr	r3, [pc, #80]	; (8006f34 <shci_user_evt_proc+0x6c>)
 8006ee4:	7b5b      	ldrb	r3, [r3, #13]
 8006ee6:	bb0b      	cbnz	r3, 8006f2c <shci_user_evt_proc+0x64>
}
 8006ee8:	b005      	add	sp, #20
 8006eea:	f85d fb04 	ldr.w	pc, [sp], #4
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006eee:	a903      	add	r1, sp, #12
 8006ef0:	4810      	ldr	r0, [pc, #64]	; (8006f34 <shci_user_evt_proc+0x6c>)
 8006ef2:	f000 fa55 	bl	80073a0 <LST_remove_head>
    if (shciContext.UserEvtRx != NULL)
 8006ef6:	4b10      	ldr	r3, [pc, #64]	; (8006f38 <shci_user_evt_proc+0x70>)
 8006ef8:	69db      	ldr	r3, [r3, #28]
 8006efa:	b183      	cbz	r3, 8006f1e <shci_user_evt_proc+0x56>
      UserEvtRxParam.pckt = phcievtbuffer;
 8006efc:	9a03      	ldr	r2, [sp, #12]
 8006efe:	9202      	str	r2, [sp, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8006f00:	2201      	movs	r2, #1
 8006f02:	f88d 2004 	strb.w	r2, [sp, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006f06:	a801      	add	r0, sp, #4
 8006f08:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8006f0a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006f0e:	4a09      	ldr	r2, [pc, #36]	; (8006f34 <shci_user_evt_proc+0x6c>)
 8006f10:	7353      	strb	r3, [r2, #13]
    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8006f12:	b93b      	cbnz	r3, 8006f24 <shci_user_evt_proc+0x5c>
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006f14:	9903      	ldr	r1, [sp, #12]
 8006f16:	4807      	ldr	r0, [pc, #28]	; (8006f34 <shci_user_evt_proc+0x6c>)
 8006f18:	f000 fa1e 	bl	8007358 <LST_insert_head>
 8006f1c:	e7dd      	b.n	8006eda <shci_user_evt_proc+0x12>
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8006f1e:	4b05      	ldr	r3, [pc, #20]	; (8006f34 <shci_user_evt_proc+0x6c>)
 8006f20:	2201      	movs	r2, #1
 8006f22:	735a      	strb	r2, [r3, #13]
      TL_MM_EvtDone( phcievtbuffer );
 8006f24:	9803      	ldr	r0, [sp, #12]
 8006f26:	f000 f951 	bl	80071cc <TL_MM_EvtDone>
 8006f2a:	e7d6      	b.n	8006eda <shci_user_evt_proc+0x12>
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8006f2c:	4801      	ldr	r0, [pc, #4]	; (8006f34 <shci_user_evt_proc+0x6c>)
 8006f2e:	f7f9 ffa2 	bl	8000e76 <shci_notify_asynch_evt>
  return;
 8006f32:	e7d9      	b.n	8006ee8 <shci_user_evt_proc+0x20>
 8006f34:	20000168 	.word	0x20000168
 8006f38:	20000310 	.word	0x20000310

08006f3c <shci_send>:
{
 8006f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f40:	4681      	mov	r9, r0
 8006f42:	460d      	mov	r5, r1
 8006f44:	4690      	mov	r8, r2
 8006f46:	461e      	mov	r6, r3
    if(StatusNotCallBackFunction != 0)
 8006f48:	4b14      	ldr	r3, [pc, #80]	; (8006f9c <shci_send+0x60>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	b10b      	cbz	r3, 8006f52 <shci_send+0x16>
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8006f4e:	2000      	movs	r0, #0
 8006f50:	4798      	blx	r3
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8006f52:	4c13      	ldr	r4, [pc, #76]	; (8006fa0 <shci_send+0x64>)
 8006f54:	2700      	movs	r7, #0
 8006f56:	7327      	strb	r7, [r4, #12]
  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8006f58:	68a0      	ldr	r0, [r4, #8]
 8006f5a:	f8a0 9009 	strh.w	r9, [r0, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8006f5e:	72c5      	strb	r5, [r0, #11]
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8006f60:	462a      	mov	r2, r5
 8006f62:	4641      	mov	r1, r8
 8006f64:	300c      	adds	r0, #12
 8006f66:	f001 f9fb 	bl	8008360 <memcpy>
  shciContext.io.Send(0,0);
 8006f6a:	4b0e      	ldr	r3, [pc, #56]	; (8006fa4 <shci_send+0x68>)
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	4639      	mov	r1, r7
 8006f70:	4638      	mov	r0, r7
 8006f72:	4798      	blx	r3
  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8006f74:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8006f78:	f7f9 ff88 	bl	8000e8c <shci_cmd_resp_wait>
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8006f7c:	68a1      	ldr	r1, [r4, #8]
 8006f7e:	788a      	ldrb	r2, [r1, #2]
 8006f80:	3203      	adds	r2, #3
 8006f82:	f106 0008 	add.w	r0, r6, #8
 8006f86:	f001 f9eb 	bl	8008360 <memcpy>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	7323      	strb	r3, [r4, #12]
    if(StatusNotCallBackFunction != 0)
 8006f8e:	4b03      	ldr	r3, [pc, #12]	; (8006f9c <shci_send+0x60>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	b10b      	cbz	r3, 8006f98 <shci_send+0x5c>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8006f94:	2001      	movs	r0, #1
 8006f96:	4798      	blx	r3
}
 8006f98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f9c:	2000030c 	.word	0x2000030c
 8006fa0:	20000168 	.word	0x20000168
 8006fa4:	20000310 	.word	0x20000310

08006fa8 <TlCmdEvtReceived>:
{
 8006fa8:	b508      	push	{r3, lr}
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8006faa:	2000      	movs	r0, #0
 8006fac:	f7f9 ff69 	bl	8000e82 <shci_cmd_resp_release>
}
 8006fb0:	bd08      	pop	{r3, pc}
	...

08006fb4 <shci_register_io_bus>:


void shci_register_io_bus(tSHciIO* fops)
{
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8006fb4:	4b02      	ldr	r3, [pc, #8]	; (8006fc0 <shci_register_io_bus+0xc>)
 8006fb6:	6003      	str	r3, [r0, #0]
  fops->Send    = TL_SYS_SendCmd;
 8006fb8:	4b02      	ldr	r3, [pc, #8]	; (8006fc4 <shci_register_io_bus+0x10>)
 8006fba:	6103      	str	r3, [r0, #16]

  return;
}
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	080070ed 	.word	0x080070ed
 8006fc4:	08007129 	.word	0x08007129

08006fc8 <SendFreeBuf>:

  return;
}

static void SendFreeBuf( void )
{
 8006fc8:	b530      	push	{r4, r5, lr}
 8006fca:	b083      	sub	sp, #12
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8006fcc:	4c08      	ldr	r4, [pc, #32]	; (8006ff0 <SendFreeBuf+0x28>)
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8006fce:	4d09      	ldr	r5, [pc, #36]	; (8006ff4 <SendFreeBuf+0x2c>)
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f000 f9b6 	bl	8007342 <LST_is_empty>
 8006fd6:	b948      	cbnz	r0, 8006fec <SendFreeBuf+0x24>
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8006fd8:	a901      	add	r1, sp, #4
 8006fda:	4620      	mov	r0, r4
 8006fdc:	f000 f9e0 	bl	80073a0 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8006fe0:	692b      	ldr	r3, [r5, #16]
 8006fe2:	9901      	ldr	r1, [sp, #4]
 8006fe4:	6918      	ldr	r0, [r3, #16]
 8006fe6:	f000 f9c3 	bl	8007370 <LST_insert_tail>
 8006fea:	e7f1      	b.n	8006fd0 <SendFreeBuf+0x8>
  }

  return;
}
 8006fec:	b003      	add	sp, #12
 8006fee:	bd30      	pop	{r4, r5, pc}
 8006ff0:	20000338 	.word	0x20000338
 8006ff4:	20030000 	.word	0x20030000

08006ff8 <TL_Enable>:
{
 8006ff8:	b508      	push	{r3, lr}
  HW_IPCC_Enable();
 8006ffa:	f000 ff2b 	bl	8007e54 <HW_IPCC_Enable>
}
 8006ffe:	bd08      	pop	{r3, pc}

08007000 <TL_Init>:
{
 8007000:	b508      	push	{r3, lr}
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8007002:	4a10      	ldr	r2, [pc, #64]	; (8007044 <TL_Init+0x44>)
 8007004:	4b10      	ldr	r3, [pc, #64]	; (8007048 <TL_Init+0x48>)
 8007006:	6013      	str	r3, [r2, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8007008:	f103 0120 	add.w	r1, r3, #32
 800700c:	6051      	str	r1, [r2, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800700e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007012:	6091      	str	r1, [r2, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8007014:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8007018:	6211      	str	r1, [r2, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800701a:	f103 0144 	add.w	r1, r3, #68	; 0x44
 800701e:	6251      	str	r1, [r2, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8007020:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 8007024:	60d1      	str	r1, [r2, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8007026:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800702a:	6111      	str	r1, [r2, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800702c:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8007030:	6151      	str	r1, [r2, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8007032:	f103 0174 	add.w	r1, r3, #116	; 0x74
 8007036:	6191      	str	r1, [r2, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8007038:	3380      	adds	r3, #128	; 0x80
 800703a:	61d3      	str	r3, [r2, #28]
  HW_IPCC_Init();
 800703c:	f000 ff32 	bl	8007ea4 <HW_IPCC_Init>
}
 8007040:	bd08      	pop	{r3, pc}
 8007042:	bf00      	nop
 8007044:	20030000 	.word	0x20030000
 8007048:	20030028 	.word	0x20030028

0800704c <TL_BLE_Init>:
{
 800704c:	b538      	push	{r3, r4, r5, lr}
 800704e:	4604      	mov	r4, r0
  LST_init_head (&EvtQueue);
 8007050:	4d0b      	ldr	r5, [pc, #44]	; (8007080 <TL_BLE_Init+0x34>)
 8007052:	4628      	mov	r0, r5
 8007054:	f000 f972 	bl	800733c <LST_init_head>
  p_bletable = TL_RefTable.p_ble_table;
 8007058:	4b0a      	ldr	r3, [pc, #40]	; (8007084 <TL_BLE_Init+0x38>)
 800705a:	685b      	ldr	r3, [r3, #4]
  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800705c:	68a2      	ldr	r2, [r4, #8]
 800705e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8007060:	68e2      	ldr	r2, [r4, #12]
 8007062:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8007064:	4a08      	ldr	r2, [pc, #32]	; (8007088 <TL_BLE_Init+0x3c>)
 8007066:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8007068:	609d      	str	r5, [r3, #8]
  HW_IPCC_BLE_Init();
 800706a:	f000 ff3d 	bl	8007ee8 <HW_IPCC_BLE_Init>
  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800706e:	6822      	ldr	r2, [r4, #0]
 8007070:	4b06      	ldr	r3, [pc, #24]	; (800708c <TL_BLE_Init+0x40>)
 8007072:	601a      	str	r2, [r3, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8007074:	6862      	ldr	r2, [r4, #4]
 8007076:	4b06      	ldr	r3, [pc, #24]	; (8007090 <TL_BLE_Init+0x44>)
 8007078:	601a      	str	r2, [r3, #0]
}
 800707a:	2000      	movs	r0, #0
 800707c:	bd38      	pop	{r3, r4, r5, pc}
 800707e:	bf00      	nop
 8007080:	200300b4 	.word	0x200300b4
 8007084:	20030000 	.word	0x20030000
 8007088:	20030a48 	.word	0x20030a48
 800708c:	20000334 	.word	0x20000334
 8007090:	20000330 	.word	0x20000330

08007094 <TL_BLE_SendCmd>:
{
 8007094:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8007096:	4b05      	ldr	r3, [pc, #20]	; (80070ac <TL_BLE_SendCmd+0x18>)
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	6812      	ldr	r2, [r2, #0]
 800709c:	2101      	movs	r1, #1
 800709e:	7211      	strb	r1, [r2, #8]
  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80070a0:	685b      	ldr	r3, [r3, #4]
  HW_IPCC_BLE_SendCmd();
 80070a2:	f000 ff29 	bl	8007ef8 <HW_IPCC_BLE_SendCmd>
}
 80070a6:	2000      	movs	r0, #0
 80070a8:	bd08      	pop	{r3, pc}
 80070aa:	bf00      	nop
 80070ac:	20030000 	.word	0x20030000

080070b0 <HW_IPCC_BLE_RxEvtNot>:
{
 80070b0:	b530      	push	{r4, r5, lr}
 80070b2:	b083      	sub	sp, #12
  while(LST_is_empty(&EvtQueue) == FALSE)
 80070b4:	4c07      	ldr	r4, [pc, #28]	; (80070d4 <HW_IPCC_BLE_RxEvtNot+0x24>)
    BLE_IoBusEvtCallBackFunction(phcievt);
 80070b6:	4d08      	ldr	r5, [pc, #32]	; (80070d8 <HW_IPCC_BLE_RxEvtNot+0x28>)
  while(LST_is_empty(&EvtQueue) == FALSE)
 80070b8:	4620      	mov	r0, r4
 80070ba:	f000 f942 	bl	8007342 <LST_is_empty>
 80070be:	b938      	cbnz	r0, 80070d0 <HW_IPCC_BLE_RxEvtNot+0x20>
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80070c0:	a901      	add	r1, sp, #4
 80070c2:	4620      	mov	r0, r4
 80070c4:	f000 f96c 	bl	80073a0 <LST_remove_head>
    BLE_IoBusEvtCallBackFunction(phcievt);
 80070c8:	682b      	ldr	r3, [r5, #0]
 80070ca:	9801      	ldr	r0, [sp, #4]
 80070cc:	4798      	blx	r3
 80070ce:	e7f3      	b.n	80070b8 <HW_IPCC_BLE_RxEvtNot+0x8>
}
 80070d0:	b003      	add	sp, #12
 80070d2:	bd30      	pop	{r4, r5, pc}
 80070d4:	200300b4 	.word	0x200300b4
 80070d8:	20000334 	.word	0x20000334

080070dc <HW_IPCC_BLE_AclDataAckNot>:
{
 80070dc:	b508      	push	{r3, lr}
  BLE_IoBusAclDataTxAck( );
 80070de:	4b02      	ldr	r3, [pc, #8]	; (80070e8 <HW_IPCC_BLE_AclDataAckNot+0xc>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4798      	blx	r3
}
 80070e4:	bd08      	pop	{r3, pc}
 80070e6:	bf00      	nop
 80070e8:	20000330 	.word	0x20000330

080070ec <TL_SYS_Init>:
{
 80070ec:	b538      	push	{r3, r4, r5, lr}
 80070ee:	4604      	mov	r4, r0
  LST_init_head (&SystemEvtQueue);
 80070f0:	4d09      	ldr	r5, [pc, #36]	; (8007118 <TL_SYS_Init+0x2c>)
 80070f2:	4628      	mov	r0, r5
 80070f4:	f000 f922 	bl	800733c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80070f8:	4b08      	ldr	r3, [pc, #32]	; (800711c <TL_SYS_Init+0x30>)
 80070fa:	68db      	ldr	r3, [r3, #12]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80070fc:	68a2      	ldr	r2, [r4, #8]
 80070fe:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8007100:	605d      	str	r5, [r3, #4]
  HW_IPCC_SYS_Init();
 8007102:	f000 ff01 	bl	8007f08 <HW_IPCC_SYS_Init>
  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8007106:	6822      	ldr	r2, [r4, #0]
 8007108:	4b05      	ldr	r3, [pc, #20]	; (8007120 <TL_SYS_Init+0x34>)
 800710a:	601a      	str	r2, [r3, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800710c:	6862      	ldr	r2, [r4, #4]
 800710e:	4b05      	ldr	r3, [pc, #20]	; (8007124 <TL_SYS_Init+0x38>)
 8007110:	601a      	str	r2, [r3, #0]
}
 8007112:	2000      	movs	r0, #0
 8007114:	bd38      	pop	{r3, r4, r5, pc}
 8007116:	bf00      	nop
 8007118:	200300bc 	.word	0x200300bc
 800711c:	20030000 	.word	0x20030000
 8007120:	20000340 	.word	0x20000340
 8007124:	20000344 	.word	0x20000344

08007128 <TL_SYS_SendCmd>:
{
 8007128:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800712a:	4b05      	ldr	r3, [pc, #20]	; (8007140 <TL_SYS_SendCmd+0x18>)
 800712c:	68da      	ldr	r2, [r3, #12]
 800712e:	6812      	ldr	r2, [r2, #0]
 8007130:	2110      	movs	r1, #16
 8007132:	7211      	strb	r1, [r2, #8]
  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8007134:	68db      	ldr	r3, [r3, #12]
  HW_IPCC_SYS_SendCmd();
 8007136:	f000 feef 	bl	8007f18 <HW_IPCC_SYS_SendCmd>
}
 800713a:	2000      	movs	r0, #0
 800713c:	bd08      	pop	{r3, pc}
 800713e:	bf00      	nop
 8007140:	20030000 	.word	0x20030000

08007144 <HW_IPCC_SYS_CmdEvtNot>:
{
 8007144:	b508      	push	{r3, lr}
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8007146:	4b04      	ldr	r3, [pc, #16]	; (8007158 <HW_IPCC_SYS_CmdEvtNot+0x14>)
 8007148:	68da      	ldr	r2, [r3, #12]
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800714a:	68da      	ldr	r2, [r3, #12]
 800714c:	4b03      	ldr	r3, [pc, #12]	; (800715c <HW_IPCC_SYS_CmdEvtNot+0x18>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6810      	ldr	r0, [r2, #0]
 8007152:	4798      	blx	r3
}
 8007154:	bd08      	pop	{r3, pc}
 8007156:	bf00      	nop
 8007158:	20030000 	.word	0x20030000
 800715c:	20000340 	.word	0x20000340

08007160 <HW_IPCC_SYS_EvtNot>:
{
 8007160:	b530      	push	{r4, r5, lr}
 8007162:	b083      	sub	sp, #12
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007164:	4c07      	ldr	r4, [pc, #28]	; (8007184 <HW_IPCC_SYS_EvtNot+0x24>)
    SYS_EVT_IoBusCallBackFunction( p_evt );
 8007166:	4d08      	ldr	r5, [pc, #32]	; (8007188 <HW_IPCC_SYS_EvtNot+0x28>)
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007168:	4620      	mov	r0, r4
 800716a:	f000 f8ea 	bl	8007342 <LST_is_empty>
 800716e:	b938      	cbnz	r0, 8007180 <HW_IPCC_SYS_EvtNot+0x20>
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8007170:	a901      	add	r1, sp, #4
 8007172:	4620      	mov	r0, r4
 8007174:	f000 f914 	bl	80073a0 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 8007178:	682b      	ldr	r3, [r5, #0]
 800717a:	9801      	ldr	r0, [sp, #4]
 800717c:	4798      	blx	r3
 800717e:	e7f3      	b.n	8007168 <HW_IPCC_SYS_EvtNot+0x8>
}
 8007180:	b003      	add	sp, #12
 8007182:	bd30      	pop	{r4, r5, pc}
 8007184:	200300bc 	.word	0x200300bc
 8007188:	20000344 	.word	0x20000344

0800718c <TL_MM_Init>:
{
 800718c:	b538      	push	{r3, r4, r5, lr}
 800718e:	4604      	mov	r4, r0
  LST_init_head (&FreeBufQueue);
 8007190:	4d0b      	ldr	r5, [pc, #44]	; (80071c0 <TL_MM_Init+0x34>)
 8007192:	4628      	mov	r0, r5
 8007194:	f000 f8d2 	bl	800733c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8007198:	480a      	ldr	r0, [pc, #40]	; (80071c4 <TL_MM_Init+0x38>)
 800719a:	f000 f8cf 	bl	800733c <LST_init_head>
  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800719e:	4b0a      	ldr	r3, [pc, #40]	; (80071c8 <TL_MM_Init+0x3c>)
 80071a0:	691b      	ldr	r3, [r3, #16]
  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80071a2:	68a2      	ldr	r2, [r4, #8]
 80071a4:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80071a6:	68e2      	ldr	r2, [r4, #12]
 80071a8:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80071aa:	611d      	str	r5, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80071ac:	6822      	ldr	r2, [r4, #0]
 80071ae:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80071b0:	6862      	ldr	r2, [r4, #4]
 80071b2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80071b4:	6922      	ldr	r2, [r4, #16]
 80071b6:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80071b8:	6962      	ldr	r2, [r4, #20]
 80071ba:	619a      	str	r2, [r3, #24]
}
 80071bc:	bd38      	pop	{r3, r4, r5, pc}
 80071be:	bf00      	nop
 80071c0:	200300c4 	.word	0x200300c4
 80071c4:	20000338 	.word	0x20000338
 80071c8:	20030000 	.word	0x20030000

080071cc <TL_MM_EvtDone>:
{
 80071cc:	b508      	push	{r3, lr}
 80071ce:	4601      	mov	r1, r0
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80071d0:	4803      	ldr	r0, [pc, #12]	; (80071e0 <TL_MM_EvtDone+0x14>)
 80071d2:	f000 f8cd 	bl	8007370 <LST_insert_tail>
  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80071d6:	4803      	ldr	r0, [pc, #12]	; (80071e4 <TL_MM_EvtDone+0x18>)
 80071d8:	f000 feea 	bl	8007fb0 <HW_IPCC_MM_SendFreeBuf>
}
 80071dc:	bd08      	pop	{r3, pc}
 80071de:	bf00      	nop
 80071e0:	20000338 	.word	0x20000338
 80071e4:	08006fc9 	.word	0x08006fc9

080071e8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80071e8:	b510      	push	{r4, lr}
  LST_init_head (&TracesEvtQueue);
 80071ea:	4c05      	ldr	r4, [pc, #20]	; (8007200 <TL_TRACES_Init+0x18>)
 80071ec:	4620      	mov	r0, r4
 80071ee:	f000 f8a5 	bl	800733c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80071f2:	4b04      	ldr	r3, [pc, #16]	; (8007204 <TL_TRACES_Init+0x1c>)
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	601c      	str	r4, [r3, #0]

  HW_IPCC_TRACES_Init();
 80071f8:	f000 fef2 	bl	8007fe0 <HW_IPCC_TRACES_Init>

  return;
}
 80071fc:	bd10      	pop	{r4, pc}
 80071fe:	bf00      	nop
 8007200:	200300cc 	.word	0x200300cc
 8007204:	20030000 	.word	0x20030000

08007208 <TL_TRACES_EvtReceived>:
}

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
  (void)(hcievt);
}
 8007208:	4770      	bx	lr
	...

0800720c <HW_IPCC_TRACES_EvtNot>:
{
 800720c:	b510      	push	{r4, lr}
 800720e:	b082      	sub	sp, #8
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007210:	4c07      	ldr	r4, [pc, #28]	; (8007230 <HW_IPCC_TRACES_EvtNot+0x24>)
 8007212:	4620      	mov	r0, r4
 8007214:	f000 f895 	bl	8007342 <LST_is_empty>
 8007218:	b938      	cbnz	r0, 800722a <HW_IPCC_TRACES_EvtNot+0x1e>
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800721a:	a901      	add	r1, sp, #4
 800721c:	4620      	mov	r0, r4
 800721e:	f000 f8bf 	bl	80073a0 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8007222:	9801      	ldr	r0, [sp, #4]
 8007224:	f7ff fff0 	bl	8007208 <TL_TRACES_EvtReceived>
 8007228:	e7f3      	b.n	8007212 <HW_IPCC_TRACES_EvtNot+0x6>
}
 800722a:	b002      	add	sp, #8
 800722c:	bd10      	pop	{r4, pc}
 800722e:	bf00      	nop
 8007230:	200300cc 	.word	0x200300cc

08007234 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8007234:	b530      	push	{r4, r5, lr}
 8007236:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007238:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800723c:	b672      	cpsid	i

  BACKUP_PRIMASK();

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800723e:	4c0d      	ldr	r4, [pc, #52]	; (8007274 <DbgTrace_TxCpltCallback+0x40>)
 8007240:	f10d 0106 	add.w	r1, sp, #6
 8007244:	4620      	mov	r0, r4
 8007246:	f000 f9f1 	bl	800762c <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800724a:	f10d 0106 	add.w	r1, sp, #6
 800724e:	4620      	mov	r0, r4
 8007250:	f000 fa5c 	bl	800770c <CircularQueue_Sense>


  if ( buf != NULL) 
 8007254:	b140      	cbz	r0, 8007268 <DbgTrace_TxCpltCallback+0x34>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007256:	f385 8810 	msr	PRIMASK, r5
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800725a:	4a07      	ldr	r2, [pc, #28]	; (8007278 <DbgTrace_TxCpltCallback+0x44>)
 800725c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8007260:	f7f9 fbae 	bl	80009c0 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8007264:	b003      	add	sp, #12
 8007266:	bd30      	pop	{r4, r5, pc}
    DbgTracePeripheralReady = SET;
 8007268:	4b04      	ldr	r3, [pc, #16]	; (800727c <DbgTrace_TxCpltCallback+0x48>)
 800726a:	2201      	movs	r2, #1
 800726c:	701a      	strb	r2, [r3, #0]
 800726e:	f385 8810 	msr	PRIMASK, r5
}
 8007272:	e7f7      	b.n	8007264 <DbgTrace_TxCpltCallback+0x30>
 8007274:	20000348 	.word	0x20000348
 8007278:	08007235 	.word	0x08007235
 800727c:	20000010 	.word	0x20000010

08007280 <DbgTraceGetFileName>:
{
 8007280:	b510      	push	{r4, lr}
 8007282:	4604      	mov	r4, r0
  if (strrchr(fullpath, '\\') != NULL)
 8007284:	215c      	movs	r1, #92	; 0x5c
 8007286:	f001 f90f 	bl	80084a8 <strrchr>
 800728a:	b108      	cbz	r0, 8007290 <DbgTraceGetFileName+0x10>
    ret = strrchr(fullpath, '\\') + 1;
 800728c:	3001      	adds	r0, #1
}
 800728e:	bd10      	pop	{r4, pc}
  else if (strrchr(fullpath, '/') != NULL)
 8007290:	212f      	movs	r1, #47	; 0x2f
 8007292:	4620      	mov	r0, r4
 8007294:	f001 f908 	bl	80084a8 <strrchr>
 8007298:	b108      	cbz	r0, 800729e <DbgTraceGetFileName+0x1e>
    ret = strrchr(fullpath, '/') + 1;
 800729a:	3001      	adds	r0, #1
 800729c:	e7f7      	b.n	800728e <DbgTraceGetFileName+0xe>
  const char *ret = fullpath;
 800729e:	4620      	mov	r0, r4
  return ret;
 80072a0:	e7f5      	b.n	800728e <DbgTraceGetFileName+0xe>
	...

080072a4 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 80072a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072a6:	f3ef 8510 	mrs	r5, PRIMASK
  uint8_t* buffer;

  BACKUP_PRIMASK();

  /* Ignore flushes */
  if ( handle == -1 )
 80072aa:	f1b0 3fff 	cmp.w	r0, #4294967295
 80072ae:	d020      	beq.n	80072f2 <DbgTraceWrite+0x4e>
 80072b0:	4614      	mov	r4, r2
  {
    chars_written = ( size_t ) 0;
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 80072b2:	3801      	subs	r0, #1
 80072b4:	2801      	cmp	r0, #1
 80072b6:	d81e      	bhi.n	80072f6 <DbgTraceWrite+0x52>
  {
    chars_written = ( size_t ) - 1;
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 80072b8:	b90a      	cbnz	r2, 80072be <DbgTraceWrite+0x1a>
  size_t chars_written = 0;
 80072ba:	4610      	mov	r0, r2
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 80072bc:	e01a      	b.n	80072f4 <DbgTraceWrite+0x50>
  __ASM volatile ("cpsid i" : : : "memory");
 80072be:	b672      	cpsid	i
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 80072c0:	b296      	uxth	r6, r2
 80072c2:	2301      	movs	r3, #1
 80072c4:	4632      	mov	r2, r6
 80072c6:	480d      	ldr	r0, [pc, #52]	; (80072fc <DbgTraceWrite+0x58>)
 80072c8:	f000 f876 	bl	80073b8 <CircularQueue_Add>
    if (buffer && DbgTracePeripheralReady)
 80072cc:	b110      	cbz	r0, 80072d4 <DbgTraceWrite+0x30>
 80072ce:	4b0c      	ldr	r3, [pc, #48]	; (8007300 <DbgTraceWrite+0x5c>)
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	b91b      	cbnz	r3, 80072dc <DbgTraceWrite+0x38>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072d4:	f385 8810 	msr	PRIMASK, r5
    chars_written = bufSize;
 80072d8:	4620      	mov	r0, r4
}
 80072da:	e00b      	b.n	80072f4 <DbgTraceWrite+0x50>
      DbgTracePeripheralReady = RESET;
 80072dc:	4b08      	ldr	r3, [pc, #32]	; (8007300 <DbgTraceWrite+0x5c>)
 80072de:	2200      	movs	r2, #0
 80072e0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072e2:	f385 8810 	msr	PRIMASK, r5
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 80072e6:	4a07      	ldr	r2, [pc, #28]	; (8007304 <DbgTraceWrite+0x60>)
 80072e8:	4631      	mov	r1, r6
 80072ea:	f7f9 fb69 	bl	80009c0 <DbgOutputTraces>
    chars_written = bufSize;
 80072ee:	4620      	mov	r0, r4
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 80072f0:	e000      	b.n	80072f4 <DbgTraceWrite+0x50>
    chars_written = ( size_t ) 0;
 80072f2:	2000      	movs	r0, #0
}
 80072f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    chars_written = ( size_t ) - 1;
 80072f6:	f04f 30ff 	mov.w	r0, #4294967295
 80072fa:	e7fb      	b.n	80072f4 <DbgTraceWrite+0x50>
 80072fc:	20000348 	.word	0x20000348
 8007300:	20000010 	.word	0x20000010
 8007304:	08007235 	.word	0x08007235

08007308 <_write>:
{
 8007308:	b508      	push	{r3, lr}
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800730a:	f7ff ffcb 	bl	80072a4 <DbgTraceWrite>
}
 800730e:	bd08      	pop	{r3, pc}

08007310 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8007310:	4602      	mov	r2, r0
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007312:	4b08      	ldr	r3, [pc, #32]	; (8007334 <OTP_Read+0x24>)
 8007314:	79db      	ldrb	r3, [r3, #7]
 8007316:	4283      	cmp	r3, r0
 8007318:	d009      	beq.n	800732e <OTP_Read+0x1e>
  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800731a:	4806      	ldr	r0, [pc, #24]	; (8007334 <OTP_Read+0x24>)
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800731c:	4906      	ldr	r1, [pc, #24]	; (8007338 <OTP_Read+0x28>)
  {
    p_id -= 8 ;
 800731e:	3808      	subs	r0, #8
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007320:	79c3      	ldrb	r3, [r0, #7]
 8007322:	4293      	cmp	r3, r2
 8007324:	d004      	beq.n	8007330 <OTP_Read+0x20>
 8007326:	4288      	cmp	r0, r1
 8007328:	d1f9      	bne.n	800731e <OTP_Read+0xe>
  }

  if((*( p_id + 7 )) != id)
  {
    p_id = 0 ;
 800732a:	2000      	movs	r0, #0
  }

  return p_id ;
 800732c:	4770      	bx	lr
  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800732e:	4801      	ldr	r0, [pc, #4]	; (8007334 <OTP_Read+0x24>)
}
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	1fff73f8 	.word	0x1fff73f8
 8007338:	1fff7000 	.word	0x1fff7000

0800733c <LST_init_head>:
/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 800733c:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;
 800733e:	6040      	str	r0, [r0, #4]
}
 8007340:	4770      	bx	lr

08007342 <LST_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007342:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007346:	b672      	cpsid	i
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8007348:	6802      	ldr	r2, [r0, #0]
  {
    return_value = TRUE;
 800734a:	4290      	cmp	r0, r2
 800734c:	bf14      	ite	ne
 800734e:	2000      	movne	r0, #0
 8007350:	2001      	moveq	r0, #1
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007352:	f383 8810 	msr	PRIMASK, r3
    return_value = FALSE;
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
}
 8007356:	4770      	bx	lr

08007358 <LST_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007358:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800735c:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800735e:	6802      	ldr	r2, [r0, #0]
 8007360:	600a      	str	r2, [r1, #0]
  node->prev = listHead;
 8007362:	6048      	str	r0, [r1, #4]
  listHead->next = node;
 8007364:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 8007366:	680a      	ldr	r2, [r1, #0]
 8007368:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800736a:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800736e:	4770      	bx	lr

08007370 <LST_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007370:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007374:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8007376:	6008      	str	r0, [r1, #0]
  node->prev = listHead->prev;
 8007378:	6842      	ldr	r2, [r0, #4]
 800737a:	604a      	str	r2, [r1, #4]
  listHead->prev = node;
 800737c:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 800737e:	684a      	ldr	r2, [r1, #4]
 8007380:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007382:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007386:	4770      	bx	lr

08007388 <LST_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007388:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800738c:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800738e:	6842      	ldr	r2, [r0, #4]
 8007390:	6801      	ldr	r1, [r0, #0]
 8007392:	6011      	str	r1, [r2, #0]
  (node->next)->prev = node->prev;
 8007394:	6802      	ldr	r2, [r0, #0]
 8007396:	6841      	ldr	r1, [r0, #4]
 8007398:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800739a:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800739e:	4770      	bx	lr

080073a0 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80073a0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073a2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80073a6:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80073a8:	6803      	ldr	r3, [r0, #0]
 80073aa:	600b      	str	r3, [r1, #0]
  LST_remove_node (listHead->next);
 80073ac:	6800      	ldr	r0, [r0, #0]
 80073ae:	f7ff ffeb 	bl	8007388 <LST_remove_node>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073b2:	f384 8810 	msr	PRIMASK, r4

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80073b6:	bd10      	pop	{r4, pc}

080073b8 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 80073b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073bc:	b089      	sub	sp, #36	; 0x24
 80073be:	4604      	mov	r4, r0
 80073c0:	9103      	str	r1, [sp, #12]
 80073c2:	9202      	str	r2, [sp, #8]
 80073c4:	469b      	mov	fp, r3
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 80073c6:	f8b0 9008 	ldrh.w	r9, [r0, #8]
 80073ca:	f1b9 0f00 	cmp.w	r9, #0
 80073ce:	f000 80f6 	beq.w	80075be <CircularQueue_Add+0x206>
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 80073d2:	6940      	ldr	r0, [r0, #20]
 80073d4:	b930      	cbnz	r0, 80073e4 <CircularQueue_Add+0x2c>
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
  {
    elementSize = q->elementSize;
 80073d6:	f8cd 9008 	str.w	r9, [sp, #8]
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 80073da:	f04f 0900 	mov.w	r9, #0
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 80073de:	f8cd 9010 	str.w	r9, [sp, #16]
 80073e2:	e0f0      	b.n	80075c6 <CircularQueue_Add+0x20e>
    elementSize = q->elementSize;
 80073e4:	f8cd 9008 	str.w	r9, [sp, #8]
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 80073e8:	2300      	movs	r3, #0
 80073ea:	9304      	str	r3, [sp, #16]
 80073ec:	e0eb      	b.n	80075c6 <CircularQueue_Add+0x20e>
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80073ee:	6820      	ldr	r0, [r4, #0]
 80073f0:	462a      	mov	r2, r5
 80073f2:	9903      	ldr	r1, [sp, #12]
 80073f4:	4441      	add	r1, r8
 80073f6:	4418      	add	r0, r3
 80073f8:	f000 ffb2 	bl	8008360 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 80073fc:	6963      	ldr	r3, [r4, #20]
 80073fe:	442b      	add	r3, r5
 8007400:	6163      	str	r3, [r4, #20]
        /* Wrap */
        curBuffPosition = 0; 
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8007402:	eba6 0a05 	sub.w	sl, r6, r5
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8007406:	f8dd 9018 	ldr.w	r9, [sp, #24]
        NbCopiedBytes = NbBytesToCopy;
 800740a:	9501      	str	r5, [sp, #4]
        curBuffPosition = 0; 
 800740c:	2300      	movs	r3, #0
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
        q->last = 0;        
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800740e:	f1ba 0f00 	cmp.w	sl, #0
 8007412:	f040 808e 	bne.w	8007532 <CircularQueue_Add+0x17a>
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
        q->byteCount += NbBytesToCopy;
      }      
      
      /* One more element */
      q->elementCount++;
 8007416:	69a3      	ldr	r3, [r4, #24]
 8007418:	3301      	adds	r3, #1
 800741a:	61a3      	str	r3, [r4, #24]
    for (i=0; i < nbElements; i++) 
 800741c:	3701      	adds	r7, #1
 800741e:	44b0      	add	r8, r6
 8007420:	45bb      	cmp	fp, r7
 8007422:	f000 8094 	beq.w	800754e <CircularQueue_Add+0x196>
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8007426:	6923      	ldr	r3, [r4, #16]
 8007428:	444b      	add	r3, r9
 800742a:	6862      	ldr	r2, [r4, #4]
 800742c:	4293      	cmp	r3, r2
 800742e:	bf28      	it	cs
 8007430:	1a9b      	subcs	r3, r3, r2
 8007432:	6123      	str	r3, [r4, #16]
      if (q->elementSize == 0) 
 8007434:	8922      	ldrh	r2, [r4, #8]
 8007436:	b992      	cbnz	r2, 800745e <CircularQueue_Add+0xa6>
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8007438:	1c5a      	adds	r2, r3, #1
 800743a:	6821      	ldr	r1, [r4, #0]
 800743c:	9802      	ldr	r0, [sp, #8]
 800743e:	54c8      	strb	r0, [r1, r3]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8007440:	6863      	ldr	r3, [r4, #4]
 8007442:	4293      	cmp	r3, r2
 8007444:	bf98      	it	ls
 8007446:	1ad2      	subls	r2, r2, r3
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8007448:	1c53      	adds	r3, r2, #1
 800744a:	6821      	ldr	r1, [r4, #0]
 800744c:	9805      	ldr	r0, [sp, #20]
 800744e:	5488      	strb	r0, [r1, r2]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8007450:	6862      	ldr	r2, [r4, #4]
 8007452:	429a      	cmp	r2, r3
 8007454:	bf98      	it	ls
 8007456:	1a9b      	subls	r3, r3, r2
        q->byteCount += 2;
 8007458:	6962      	ldr	r2, [r4, #20]
 800745a:	3202      	adds	r2, #2
 800745c:	6162      	str	r2, [r4, #20]
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800745e:	6862      	ldr	r2, [r4, #4]
 8007460:	1ad2      	subs	r2, r2, r3
 8007462:	4635      	mov	r5, r6
 8007464:	4296      	cmp	r6, r2
 8007466:	bf28      	it	cs
 8007468:	4615      	movcs	r5, r2
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800746a:	4296      	cmp	r6, r2
 800746c:	d9bf      	bls.n	80073ee <CircularQueue_Add+0x36>
 800746e:	42ae      	cmp	r6, r5
 8007470:	d902      	bls.n	8007478 <CircularQueue_Add+0xc0>
 8007472:	7f22      	ldrb	r2, [r4, #28]
 8007474:	2a00      	cmp	r2, #0
 8007476:	d0ba      	beq.n	80073ee <CircularQueue_Add+0x36>
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8007478:	2d00      	cmp	r5, #0
 800747a:	d0cc      	beq.n	8007416 <CircularQueue_Add+0x5e>
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800747c:	7f22      	ldrb	r2, [r4, #28]
 800747e:	f012 0f01 	tst.w	r2, #1
 8007482:	d025      	beq.n	80074d0 <CircularQueue_Add+0x118>
          if (q->elementSize == 0)
 8007484:	8922      	ldrh	r2, [r4, #8]
 8007486:	b942      	cbnz	r2, 800749a <CircularQueue_Add+0xe2>
             q->qBuff[curBuffPosition-2] = 0xFF;
 8007488:	6822      	ldr	r2, [r4, #0]
 800748a:	441a      	add	r2, r3
 800748c:	21ff      	movs	r1, #255	; 0xff
 800748e:	f802 1c02 	strb.w	r1, [r2, #-2]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8007492:	6820      	ldr	r0, [r4, #0]
 8007494:	4418      	add	r0, r3
 8007496:	f800 1c01 	strb.w	r1, [r0, #-1]
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800749a:	6963      	ldr	r3, [r4, #20]
 800749c:	441d      	add	r5, r3
 800749e:	6165      	str	r5, [r4, #20]
          if (q->elementSize == 0)
 80074a0:	8923      	ldrh	r3, [r4, #8]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d13f      	bne.n	8007526 <CircularQueue_Add+0x16e>
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 80074a6:	6823      	ldr	r3, [r4, #0]
 80074a8:	9a02      	ldr	r2, [sp, #8]
 80074aa:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80074ac:	6823      	ldr	r3, [r4, #0]
 80074ae:	9a07      	ldr	r2, [sp, #28]
 80074b0:	705a      	strb	r2, [r3, #1]
            q->byteCount += 2;   
 80074b2:	6963      	ldr	r3, [r4, #20]
 80074b4:	3302      	adds	r3, #2
 80074b6:	6163      	str	r3, [r4, #20]
          NbBytesToCopy = elementSize; 
 80074b8:	46b2      	mov	sl, r6
          NbCopiedBytes = 0;
 80074ba:	2300      	movs	r3, #0
 80074bc:	9301      	str	r3, [sp, #4]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80074be:	2302      	movs	r3, #2
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 80074c0:	9a04      	ldr	r2, [sp, #16]
 80074c2:	eb02 090a 	add.w	r9, r2, sl
 80074c6:	fa1f f989 	uxth.w	r9, r9
        q->last = 0;        
 80074ca:	2200      	movs	r2, #0
 80074cc:	6122      	str	r2, [r4, #16]
 80074ce:	e79e      	b.n	800740e <CircularQueue_Add+0x56>
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 80074d0:	f012 0f02 	tst.w	r2, #2
 80074d4:	d02b      	beq.n	800752e <CircularQueue_Add+0x176>
          if (q->elementSize == 0)
 80074d6:	8922      	ldrh	r2, [r4, #8]
 80074d8:	2a00      	cmp	r2, #0
 80074da:	d149      	bne.n	8007570 <CircularQueue_Add+0x1b8>
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 80074dc:	6822      	ldr	r2, [r4, #0]
 80074de:	441a      	add	r2, r3
 80074e0:	f802 5c02 	strb.w	r5, [r2, #-2]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80074e4:	6822      	ldr	r2, [r4, #0]
 80074e6:	441a      	add	r2, r3
 80074e8:	0a29      	lsrs	r1, r5, #8
 80074ea:	f802 1c01 	strb.w	r1, [r2, #-1]
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80074ee:	6820      	ldr	r0, [r4, #0]
 80074f0:	462a      	mov	r2, r5
 80074f2:	9903      	ldr	r1, [sp, #12]
 80074f4:	4441      	add	r1, r8
 80074f6:	4418      	add	r0, r3
 80074f8:	f000 ff32 	bl	8008360 <memcpy>
             q->byteCount += NbBytesToCopy; 
 80074fc:	6963      	ldr	r3, [r4, #20]
 80074fe:	442b      	add	r3, r5
 8007500:	6163      	str	r3, [r4, #20]
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8007502:	eba6 0a05 	sub.w	sl, r6, r5
             q->elementCount++;
 8007506:	69a3      	ldr	r3, [r4, #24]
 8007508:	3301      	adds	r3, #1
 800750a:	61a3      	str	r3, [r4, #24]
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800750c:	6823      	ldr	r3, [r4, #0]
 800750e:	f883 a000 	strb.w	sl, [r3]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8007512:	6823      	ldr	r3, [r4, #0]
 8007514:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8007518:	705a      	strb	r2, [r3, #1]
             q->byteCount += 2;              
 800751a:	6963      	ldr	r3, [r4, #20]
 800751c:	3302      	adds	r3, #2
 800751e:	6163      	str	r3, [r4, #20]
             NbCopiedBytes = NbBytesToCopy;             
 8007520:	9501      	str	r5, [sp, #4]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8007522:	2302      	movs	r3, #2
 8007524:	e7cc      	b.n	80074c0 <CircularQueue_Add+0x108>
          NbBytesToCopy = elementSize; 
 8007526:	46b2      	mov	sl, r6
          NbCopiedBytes = 0;
 8007528:	2300      	movs	r3, #0
 800752a:	9301      	str	r3, [sp, #4]
 800752c:	e7c8      	b.n	80074c0 <CircularQueue_Add+0x108>
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800752e:	46aa      	mov	sl, r5
 8007530:	e7c6      	b.n	80074c0 <CircularQueue_Add+0x108>
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8007532:	6820      	ldr	r0, [r4, #0]
 8007534:	9a01      	ldr	r2, [sp, #4]
 8007536:	eb02 0108 	add.w	r1, r2, r8
 800753a:	4652      	mov	r2, sl
 800753c:	9d03      	ldr	r5, [sp, #12]
 800753e:	4429      	add	r1, r5
 8007540:	4418      	add	r0, r3
 8007542:	f000 ff0d 	bl	8008360 <memcpy>
        q->byteCount += NbBytesToCopy;
 8007546:	6963      	ldr	r3, [r4, #20]
 8007548:	4453      	add	r3, sl
 800754a:	6163      	str	r3, [r4, #20]
 800754c:	e763      	b.n	8007416 <CircularQueue_Add+0x5e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800754e:	6823      	ldr	r3, [r4, #0]
 8007550:	6920      	ldr	r0, [r4, #16]
 8007552:	9a04      	ldr	r2, [sp, #16]
 8007554:	4402      	add	r2, r0
 8007556:	4610      	mov	r0, r2
 8007558:	6862      	ldr	r2, [r4, #4]
 800755a:	4290      	cmp	r0, r2
 800755c:	bf28      	it	cs
 800755e:	1a80      	subcs	r0, r0, r2
 8007560:	4418      	add	r0, r3
  else
  {
    return NULL;
  }
  return ptr;
}
 8007562:	b009      	add	sp, #36	; 0x24
 8007564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return NULL;
 8007568:	2000      	movs	r0, #0
 800756a:	e7fa      	b.n	8007562 <CircularQueue_Add+0x1aa>
 800756c:	2000      	movs	r0, #0
 800756e:	e7f8      	b.n	8007562 <CircularQueue_Add+0x1aa>
            return NULL;
 8007570:	2000      	movs	r0, #0
 8007572:	e7f6      	b.n	8007562 <CircularQueue_Add+0x1aa>
 8007574:	b292      	uxth	r2, r2
 8007576:	e005      	b.n	8007584 <CircularQueue_Add+0x1cc>
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8007578:	9b02      	ldr	r3, [sp, #8]
 800757a:	9a04      	ldr	r2, [sp, #16]
 800757c:	4413      	add	r3, r2
 800757e:	fb0b f303 	mul.w	r3, fp, r3
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8007582:	2200      	movs	r2, #0
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8007584:	9902      	ldr	r1, [sp, #8]
 8007586:	2900      	cmp	r1, #0
 8007588:	d0ee      	beq.n	8007568 <CircularQueue_Add+0x1b0>
 800758a:	4403      	add	r3, r0
 800758c:	441a      	add	r2, r3
 800758e:	6863      	ldr	r3, [r4, #4]
 8007590:	429a      	cmp	r2, r3
 8007592:	d8eb      	bhi.n	800756c <CircularQueue_Add+0x1b4>
    for (i=0; i < nbElements; i++) 
 8007594:	f1bb 0f00 	cmp.w	fp, #0
 8007598:	d0d9      	beq.n	800754e <CircularQueue_Add+0x196>
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800759a:	460b      	mov	r3, r1
 800759c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80075a0:	9205      	str	r2, [sp, #20]
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 80075a2:	460e      	mov	r6, r1
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80075a4:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80075a8:	9207      	str	r2, [sp, #28]
 80075aa:	f04f 0800 	mov.w	r8, #0
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 80075ae:	f8cd 8004 	str.w	r8, [sp, #4]
    for (i=0; i < nbElements; i++) 
 80075b2:	4647      	mov	r7, r8
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 80075b4:	9a04      	ldr	r2, [sp, #16]
 80075b6:	4413      	add	r3, r2
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	9306      	str	r3, [sp, #24]
 80075bc:	e733      	b.n	8007426 <CircularQueue_Add+0x6e>
  if (q->byteCount)
 80075be:	6940      	ldr	r0, [r0, #20]
 80075c0:	bb10      	cbnz	r0, 8007608 <CircularQueue_Add+0x250>
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 80075c2:	2302      	movs	r3, #2
 80075c4:	9304      	str	r3, [sp, #16]
   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 80075c6:	6923      	ldr	r3, [r4, #16]
 80075c8:	68e2      	ldr	r2, [r4, #12]
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d3d4      	bcc.n	8007578 <CircularQueue_Add+0x1c0>
 80075ce:	6862      	ldr	r2, [r4, #4]
 80075d0:	1ad2      	subs	r2, r2, r3
 80075d2:	eba2 0209 	sub.w	r2, r2, r9
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 80075d6:	9b02      	ldr	r3, [sp, #8]
 80075d8:	9904      	ldr	r1, [sp, #16]
 80075da:	185d      	adds	r5, r3, r1
 80075dc:	fb0b f305 	mul.w	r3, fp, r5
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d3ce      	bcc.n	8007582 <CircularQueue_Add+0x1ca>
 80075e4:	fbb2 f1f5 	udiv	r1, r2, r5
 80075e8:	fb05 2211 	mls	r2, r5, r1, r2
 80075ec:	b2d1      	uxtb	r1, r2
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 80075ee:	9e04      	ldr	r6, [sp, #16]
 80075f0:	42b1      	cmp	r1, r6
 80075f2:	d9c6      	bls.n	8007582 <CircularQueue_Add+0x1ca>
 80075f4:	7f25      	ldrb	r5, [r4, #28]
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 80075f6:	f015 0201 	ands.w	r2, r5, #1
 80075fa:	bf18      	it	ne
 80075fc:	460a      	movne	r2, r1
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 80075fe:	f015 0f02 	tst.w	r5, #2
 8007602:	d0b7      	beq.n	8007574 <CircularQueue_Add+0x1bc>
 8007604:	b2b2      	uxth	r2, r6
 8007606:	e7bd      	b.n	8007584 <CircularQueue_Add+0x1cc>
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8007608:	6821      	ldr	r1, [r4, #0]
 800760a:	6923      	ldr	r3, [r4, #16]
 800760c:	5cca      	ldrb	r2, [r1, r3]
 800760e:	3301      	adds	r3, #1
 8007610:	6865      	ldr	r5, [r4, #4]
 8007612:	42ab      	cmp	r3, r5
 8007614:	d300      	bcc.n	8007618 <CircularQueue_Add+0x260>
 8007616:	1b5b      	subs	r3, r3, r5
 8007618:	5ccb      	ldrb	r3, [r1, r3]
 800761a:	f102 0902 	add.w	r9, r2, #2
 800761e:	eb09 2903 	add.w	r9, r9, r3, lsl #8
 8007622:	fa1f f989 	uxth.w	r9, r9
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8007626:	2302      	movs	r3, #2
 8007628:	9304      	str	r3, [sp, #16]
 800762a:	e7cc      	b.n	80075c6 <CircularQueue_Add+0x20e>

0800762c <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800762c:	b4f0      	push	{r4, r5, r6, r7}
 800762e:	4603      	mov	r3, r0
  uint8_t  elemSizeStorageRoom = 0;
  uint8_t* ptr= NULL;
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8007630:	8900      	ldrh	r0, [r0, #8]
 8007632:	2800      	cmp	r0, #0
 8007634:	d038      	beq.n	80076a8 <CircularQueue_Remove+0x7c>
  uint16_t eltSize = 0;
  if (q->byteCount > 0) 
 8007636:	695e      	ldr	r6, [r3, #20]
 8007638:	2e00      	cmp	r6, #0
 800763a:	d032      	beq.n	80076a2 <CircularQueue_Remove+0x76>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800763c:	4604      	mov	r4, r0
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800763e:	2500      	movs	r5, #0
 8007640:	e042      	b.n	80076c8 <CircularQueue_Remove+0x9c>

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8007642:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007646:	4294      	cmp	r4, r2
 8007648:	d011      	beq.n	800766e <CircularQueue_Remove+0x42>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800764a:	68da      	ldr	r2, [r3, #12]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800764c:	691f      	ldr	r7, [r3, #16]
 800764e:	42ba      	cmp	r2, r7
 8007650:	d93f      	bls.n	80076d2 <CircularQueue_Remove+0xa6>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8007652:	2800      	cmp	r0, #0
 8007654:	d03d      	beq.n	80076d2 <CircularQueue_Remove+0xa6>
 8007656:	685f      	ldr	r7, [r3, #4]
 8007658:	1aba      	subs	r2, r7, r2
 800765a:	4282      	cmp	r2, r0
 800765c:	d239      	bcs.n	80076d2 <CircularQueue_Remove+0xa6>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800765e:	68da      	ldr	r2, [r3, #12]
 8007660:	1bd2      	subs	r2, r2, r7
 8007662:	4416      	add	r6, r2
 8007664:	615e      	str	r6, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 8007666:	2200      	movs	r2, #0
 8007668:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800766a:	4604      	mov	r4, r0
 800766c:	e031      	b.n	80076d2 <CircularQueue_Remove+0xa6>
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800766e:	b138      	cbz	r0, 8007680 <CircularQueue_Remove+0x54>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8007670:	68da      	ldr	r2, [r3, #12]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8007672:	691f      	ldr	r7, [r3, #16]
 8007674:	42ba      	cmp	r2, r7
 8007676:	d8ee      	bhi.n	8007656 <CircularQueue_Remove+0x2a>
 8007678:	e02b      	b.n	80076d2 <CircularQueue_Remove+0xa6>
 800767a:	f1c0 0001 	rsb	r0, r0, #1
 800767e:	e00b      	b.n	8007698 <CircularQueue_Remove+0x6c>
          q->byteCount -= (q->queueMaxSize - q->first);
 8007680:	6858      	ldr	r0, [r3, #4]
 8007682:	68da      	ldr	r2, [r3, #12]
 8007684:	1a12      	subs	r2, r2, r0
 8007686:	4416      	add	r6, r2
 8007688:	615e      	str	r6, [r3, #20]
          q->first = 0;
 800768a:	2200      	movs	r2, #0
 800768c:	60da      	str	r2, [r3, #12]
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	7814      	ldrb	r4, [r2, #0]
 8007692:	2801      	cmp	r0, #1
 8007694:	d9f1      	bls.n	800767a <CircularQueue_Remove+0x4e>
 8007696:	2001      	movs	r0, #1
 8007698:	5c12      	ldrb	r2, [r2, r0]
 800769a:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 800769e:	b2a4      	uxth	r4, r4
 80076a0:	e017      	b.n	80076d2 <CircularQueue_Remove+0xa6>
  uint16_t eltSize = 0;
 80076a2:	2400      	movs	r4, #0
  uint8_t* ptr= NULL;
 80076a4:	4620      	mov	r0, r4
 80076a6:	e02a      	b.n	80076fe <CircularQueue_Remove+0xd2>
  if (q->byteCount > 0) 
 80076a8:	695e      	ldr	r6, [r3, #20]
 80076aa:	2e00      	cmp	r6, #0
 80076ac:	d02b      	beq.n	8007706 <CircularQueue_Remove+0xda>
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80076ae:	681d      	ldr	r5, [r3, #0]
 80076b0:	68da      	ldr	r2, [r3, #12]
 80076b2:	5cac      	ldrb	r4, [r5, r2]
 80076b4:	3201      	adds	r2, #1
 80076b6:	685f      	ldr	r7, [r3, #4]
 80076b8:	42ba      	cmp	r2, r7
 80076ba:	bf28      	it	cs
 80076bc:	1bd2      	subcs	r2, r2, r7
 80076be:	5caa      	ldrb	r2, [r5, r2]
 80076c0:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 80076c4:	b2a4      	uxth	r4, r4
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80076c6:	2502      	movs	r5, #2
     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 80076c8:	7f1a      	ldrb	r2, [r3, #28]
 80076ca:	f002 0203 	and.w	r2, r2, #3
 80076ce:	2a01      	cmp	r2, #1
 80076d0:	d0b7      	beq.n	8007642 <CircularQueue_Remove+0x16>
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 80076d2:	6818      	ldr	r0, [r3, #0]
 80076d4:	68da      	ldr	r2, [r3, #12]
 80076d6:	442a      	add	r2, r5
 80076d8:	685e      	ldr	r6, [r3, #4]
 80076da:	42b2      	cmp	r2, r6
 80076dc:	bf2c      	ite	cs
 80076de:	1b97      	subcs	r7, r2, r6
 80076e0:	4617      	movcc	r7, r2
 80076e2:	4438      	add	r0, r7

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 80076e4:	1967      	adds	r7, r4, r5
 80076e6:	695d      	ldr	r5, [r3, #20]
 80076e8:	1bed      	subs	r5, r5, r7
 80076ea:	615d      	str	r5, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 80076ec:	b125      	cbz	r5, 80076f8 <CircularQueue_Remove+0xcc>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 80076ee:	4422      	add	r2, r4
 80076f0:	4296      	cmp	r6, r2
 80076f2:	bf98      	it	ls
 80076f4:	1b92      	subls	r2, r2, r6
 80076f6:	60da      	str	r2, [r3, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 80076f8:	699a      	ldr	r2, [r3, #24]
 80076fa:	3a01      	subs	r2, #1
 80076fc:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 80076fe:	b101      	cbz	r1, 8007702 <CircularQueue_Remove+0xd6>
  {
    *elementSize = eltSize;
 8007700:	800c      	strh	r4, [r1, #0]
  }
  return ptr;
}
 8007702:	bcf0      	pop	{r4, r5, r6, r7}
 8007704:	4770      	bx	lr
  uint16_t eltSize = 0;
 8007706:	4604      	mov	r4, r0
  uint8_t* ptr= NULL;
 8007708:	2000      	movs	r0, #0
 800770a:	e7f8      	b.n	80076fe <CircularQueue_Remove+0xd2>

0800770c <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800770c:	b4f0      	push	{r4, r5, r6, r7}
  uint8_t  elemSizeStorageRoom = 0;
  uint8_t* x= NULL;
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800770e:	8905      	ldrh	r5, [r0, #8]
 8007710:	b36d      	cbz	r5, 800776e <CircularQueue_Sense+0x62>
  uint16_t eltSize = 0;
  uint32_t FirstElemetPos = 0;
    
  if (q->byteCount > 0) 
 8007712:	6943      	ldr	r3, [r0, #20]
 8007714:	b343      	cbz	r3, 8007768 <CircularQueue_Sense+0x5c>
  {
    FirstElemetPos = q->first;
 8007716:	68c6      	ldr	r6, [r0, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8007718:	462c      	mov	r4, r5
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800771a:	2200      	movs	r2, #0
 800771c:	e036      	b.n	800778c <CircularQueue_Sense+0x80>
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800771e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007722:	429c      	cmp	r4, r3
 8007724:	d00d      	beq.n	8007742 <CircularQueue_Sense+0x36>
 8007726:	6903      	ldr	r3, [r0, #16]
 8007728:	42b3      	cmp	r3, r6
 800772a:	d234      	bcs.n	8007796 <CircularQueue_Sense+0x8a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800772c:	2d00      	cmp	r5, #0
 800772e:	d032      	beq.n	8007796 <CircularQueue_Sense+0x8a>
 8007730:	6843      	ldr	r3, [r0, #4]
 8007732:	1b9b      	subs	r3, r3, r6
      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8007734:	42ab      	cmp	r3, r5
 8007736:	bf38      	it	cc
 8007738:	462c      	movcc	r4, r5
 800773a:	42ab      	cmp	r3, r5
 800773c:	bf38      	it	cc
 800773e:	2600      	movcc	r6, #0
 8007740:	e029      	b.n	8007796 <CircularQueue_Sense+0x8a>
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8007742:	b11d      	cbz	r5, 800774c <CircularQueue_Sense+0x40>
 8007744:	6903      	ldr	r3, [r0, #16]
 8007746:	42b3      	cmp	r3, r6
 8007748:	d3f2      	bcc.n	8007730 <CircularQueue_Sense+0x24>
 800774a:	e024      	b.n	8007796 <CircularQueue_Sense+0x8a>
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800774c:	6805      	ldr	r5, [r0, #0]
 800774e:	782c      	ldrb	r4, [r5, #0]
 8007750:	6843      	ldr	r3, [r0, #4]
 8007752:	2b01      	cmp	r3, #1
 8007754:	bf94      	ite	ls
 8007756:	f1c3 0301 	rsbls	r3, r3, #1
 800775a:	2301      	movhi	r3, #1
 800775c:	5ceb      	ldrb	r3, [r5, r3]
 800775e:	eb04 2403 	add.w	r4, r4, r3, lsl #8
 8007762:	b2a4      	uxth	r4, r4
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8007764:	2600      	movs	r6, #0
 8007766:	e016      	b.n	8007796 <CircularQueue_Sense+0x8a>
  uint16_t eltSize = 0;
 8007768:	2400      	movs	r4, #0
  uint8_t* x= NULL;
 800776a:	4620      	mov	r0, r4
 800776c:	e01a      	b.n	80077a4 <CircularQueue_Sense+0x98>
  if (q->byteCount > 0) 
 800776e:	6943      	ldr	r3, [r0, #20]
 8007770:	b1e3      	cbz	r3, 80077ac <CircularQueue_Sense+0xa0>
    FirstElemetPos = q->first;
 8007772:	68c6      	ldr	r6, [r0, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8007774:	6802      	ldr	r2, [r0, #0]
 8007776:	5d94      	ldrb	r4, [r2, r6]
 8007778:	1c73      	adds	r3, r6, #1
 800777a:	6847      	ldr	r7, [r0, #4]
 800777c:	42bb      	cmp	r3, r7
 800777e:	d300      	bcc.n	8007782 <CircularQueue_Sense+0x76>
 8007780:	1bdb      	subs	r3, r3, r7
 8007782:	5cd3      	ldrb	r3, [r2, r3]
 8007784:	eb04 2403 	add.w	r4, r4, r3, lsl #8
 8007788:	b2a4      	uxth	r4, r4
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800778a:	2202      	movs	r2, #2
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800778c:	7f03      	ldrb	r3, [r0, #28]
 800778e:	f003 0303 	and.w	r3, r3, #3
 8007792:	2b01      	cmp	r3, #1
 8007794:	d0c3      	beq.n	800771e <CircularQueue_Sense+0x12>
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8007796:	6803      	ldr	r3, [r0, #0]
 8007798:	4432      	add	r2, r6
 800779a:	6840      	ldr	r0, [r0, #4]
 800779c:	4282      	cmp	r2, r0
 800779e:	bf28      	it	cs
 80077a0:	1a12      	subcs	r2, r2, r0
 80077a2:	1898      	adds	r0, r3, r2
  }
  if (elementSize != NULL)
 80077a4:	b101      	cbz	r1, 80077a8 <CircularQueue_Sense+0x9c>
  {
    *elementSize = eltSize;
 80077a6:	800c      	strh	r4, [r1, #0]
  }
  return x;
}
 80077a8:	bcf0      	pop	{r4, r5, r6, r7}
 80077aa:	4770      	bx	lr
  uint16_t eltSize = 0;
 80077ac:	462c      	mov	r4, r5
  uint8_t* x= NULL;
 80077ae:	2000      	movs	r0, #0
 80077b0:	e7f8      	b.n	80077a4 <CircularQueue_Sense+0x98>

080077b2 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 80077b2:	4770      	bx	lr

080077b4 <Adv_Cancel_Req>:
{
 80077b4:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 80077b6:	2100      	movs	r1, #0
 80077b8:	2001      	movs	r0, #1
 80077ba:	f000 fc6d 	bl	8008098 <UTIL_SEQ_SetTask>
}
 80077be:	bd08      	pop	{r3, pc}

080077c0 <Adv_Cancel>:
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80077c0:	4b1c      	ldr	r3, [pc, #112]	; (8007834 <Adv_Cancel+0x74>)
 80077c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80077c6:	2b05      	cmp	r3, #5
 80077c8:	d100      	bne.n	80077cc <Adv_Cancel+0xc>
 80077ca:	4770      	bx	lr
{
 80077cc:	b570      	push	{r4, r5, r6, lr}
    result = aci_gap_set_non_discoverable();
 80077ce:	f7fe fcc1 	bl	8006154 <aci_gap_set_non_discoverable>
    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80077d2:	4b18      	ldr	r3, [pc, #96]	; (8007834 <Adv_Cancel+0x74>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (result == BLE_STATUS_SUCCESS)
 80077da:	b9e8      	cbnz	r0, 8007818 <Adv_Cancel+0x58>
      APP_DBG_MSG("  \r\n\r");APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 80077dc:	4e16      	ldr	r6, [pc, #88]	; (8007838 <Adv_Cancel+0x78>)
 80077de:	4630      	mov	r0, r6
 80077e0:	f7ff fd4e 	bl	8007280 <DbgTraceGetFileName>
 80077e4:	4601      	mov	r1, r0
 80077e6:	4d15      	ldr	r5, [pc, #84]	; (800783c <Adv_Cancel+0x7c>)
 80077e8:	4c15      	ldr	r4, [pc, #84]	; (8007840 <Adv_Cancel+0x80>)
 80077ea:	f240 432c 	movw	r3, #1068	; 0x42c
 80077ee:	462a      	mov	r2, r5
 80077f0:	4620      	mov	r0, r4
 80077f2:	f000 fdcb 	bl	800838c <iprintf>
 80077f6:	4813      	ldr	r0, [pc, #76]	; (8007844 <Adv_Cancel+0x84>)
 80077f8:	f000 fdc8 	bl	800838c <iprintf>
 80077fc:	4630      	mov	r0, r6
 80077fe:	f7ff fd3f 	bl	8007280 <DbgTraceGetFileName>
 8007802:	4601      	mov	r1, r0
 8007804:	f240 432c 	movw	r3, #1068	; 0x42c
 8007808:	462a      	mov	r2, r5
 800780a:	4620      	mov	r0, r4
 800780c:	f000 fdbe 	bl	800838c <iprintf>
 8007810:	480d      	ldr	r0, [pc, #52]	; (8007848 <Adv_Cancel+0x88>)
 8007812:	f000 fdbb 	bl	800838c <iprintf>
}
 8007816:	bd70      	pop	{r4, r5, r6, pc}
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 8007818:	4807      	ldr	r0, [pc, #28]	; (8007838 <Adv_Cancel+0x78>)
 800781a:	f7ff fd31 	bl	8007280 <DbgTraceGetFileName>
 800781e:	4601      	mov	r1, r0
 8007820:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8007824:	4a05      	ldr	r2, [pc, #20]	; (800783c <Adv_Cancel+0x7c>)
 8007826:	4806      	ldr	r0, [pc, #24]	; (8007840 <Adv_Cancel+0x80>)
 8007828:	f000 fdb0 	bl	800838c <iprintf>
 800782c:	4807      	ldr	r0, [pc, #28]	; (800784c <Adv_Cancel+0x8c>)
 800782e:	f000 fdad 	bl	800838c <iprintf>
  return;
 8007832:	e7f0      	b.n	8007816 <Adv_Cancel+0x56>
 8007834:	20000178 	.word	0x20000178
 8007838:	08009d34 	.word	0x08009d34
 800783c:	08009fd0 	.word	0x08009fd0
 8007840:	0800954c 	.word	0x0800954c
 8007844:	08009d50 	.word	0x08009d50
 8007848:	08009d58 	.word	0x08009d58
 800784c:	08009d74 	.word	0x08009d74

08007850 <BLE_UserEvtRx>:
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
  return;
}

static void BLE_UserEvtRx( void * pPayload )
{
 8007850:	b510      	push	{r4, lr}
 8007852:	4604      	mov	r4, r0
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8007854:	6840      	ldr	r0, [r0, #4]
 8007856:	3008      	adds	r0, #8
 8007858:	f7ff f96c 	bl	8006b34 <SVCCTL_UserEvtRx>
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800785c:	3800      	subs	r0, #0
 800785e:	bf18      	it	ne
 8007860:	2001      	movne	r0, #1
 8007862:	7020      	strb	r0, [r4, #0]
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
}
 8007864:	bd10      	pop	{r4, pc}

08007866 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8007866:	b508      	push	{r3, lr}
  uint32_t task_id_list;
  switch (status)
 8007868:	b110      	cbz	r0, 8007870 <BLE_StatusNot+0xa>
 800786a:	2801      	cmp	r0, #1
 800786c:	d004      	beq.n	8007878 <BLE_StatusNot+0x12>

    default:
      break;
  }
  return;
}
 800786e:	bd08      	pop	{r3, pc}
      UTIL_SEQ_PauseTask(task_id_list);
 8007870:	2003      	movs	r0, #3
 8007872:	f000 fc29 	bl	80080c8 <UTIL_SEQ_PauseTask>
      break;
 8007876:	e7fa      	b.n	800786e <BLE_StatusNot+0x8>
      UTIL_SEQ_ResumeTask(task_id_list);
 8007878:	2003      	movs	r0, #3
 800787a:	f000 fc33 	bl	80080e4 <UTIL_SEQ_ResumeTask>
  return;
 800787e:	e7f6      	b.n	800786e <BLE_StatusNot+0x8>

08007880 <APP_BLE_Init>:
{
 8007880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007882:	b09b      	sub	sp, #108	; 0x6c
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8007884:	ac0d      	add	r4, sp, #52	; 0x34
 8007886:	4d91      	ldr	r5, [pc, #580]	; (8007acc <APP_BLE_Init+0x24c>)
 8007888:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800788a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800788c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800788e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007894:	682b      	ldr	r3, [r5, #0]
 8007896:	7023      	strb	r3, [r4, #0]
  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8007898:	4b8d      	ldr	r3, [pc, #564]	; (8007ad0 <APP_BLE_Init+0x250>)
 800789a:	930b      	str	r3, [sp, #44]	; 0x2c
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800789c:	4b8d      	ldr	r3, [pc, #564]	; (8007ad4 <APP_BLE_Init+0x254>)
 800789e:	930c      	str	r3, [sp, #48]	; 0x30
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80078a0:	a90b      	add	r1, sp, #44	; 0x2c
 80078a2:	488d      	ldr	r0, [pc, #564]	; (8007ad8 <APP_BLE_Init+0x258>)
 80078a4:	f7ff f9da 	bl	8006c5c <hci_init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80078a8:	2101      	movs	r1, #1
 80078aa:	2002      	movs	r0, #2
 80078ac:	f000 fbde 	bl	800806c <UTIL_LPM_SetOffMode>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80078b0:	4a8a      	ldr	r2, [pc, #552]	; (8007adc <APP_BLE_Init+0x25c>)
 80078b2:	2100      	movs	r1, #0
 80078b4:	2002      	movs	r0, #2
 80078b6:	f000 fd19 	bl	80082ec <UTIL_SEQ_RegTask>
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 80078ba:	a80d      	add	r0, sp, #52	; 0x34
 80078bc:	f7ff f962 	bl	8006b84 <SHCI_C2_BLE_Init>
 80078c0:	2800      	cmp	r0, #0
 80078c2:	f040 80e6 	bne.w	8007a92 <APP_BLE_Init+0x212>
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 80078c6:	2300      	movs	r3, #0
 80078c8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  hci_reset();
 80078cc:	f7fe ff43 	bl	8006756 <hci_reset>
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80078d0:	4b83      	ldr	r3, [pc, #524]	; (8007ae0 <APP_BLE_Init+0x260>)
 80078d2:	681a      	ldr	r2, [r3, #0]
  if(udn != 0xFFFFFFFF)
 80078d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80078d8:	f000 80de 	beq.w	8007a98 <APP_BLE_Init+0x218>
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 80078dc:	3304      	adds	r3, #4
 80078de:	681b      	ldr	r3, [r3, #0]
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 80078e0:	4c80      	ldr	r4, [pc, #512]	; (8007ae4 <APP_BLE_Init+0x264>)
 80078e2:	7022      	strb	r2, [r4, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 80078e4:	0a12      	lsrs	r2, r2, #8
 80078e6:	7062      	strb	r2, [r4, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 80078e8:	70a3      	strb	r3, [r4, #2]
 80078ea:	0a1a      	lsrs	r2, r3, #8
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 80078ec:	70e2      	strb	r2, [r4, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 80078ee:	0c1a      	lsrs	r2, r3, #16
 80078f0:	7122      	strb	r2, [r4, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 80078f2:	0e1b      	lsrs	r3, r3, #24
 80078f4:	7163      	strb	r3, [r4, #5]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 80078f6:	4622      	mov	r2, r4
 80078f8:	2106      	movs	r1, #6
 80078fa:	2000      	movs	r0, #0
 80078fc:	f7fe feae 	bl	800665c <aci_hal_write_config_data>
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 8007900:	7962      	ldrb	r2, [r4, #5]
 8007902:	4b79      	ldr	r3, [pc, #484]	; (8007ae8 <APP_BLE_Init+0x268>)
 8007904:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 8007906:	7922      	ldrb	r2, [r4, #4]
 8007908:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 800790a:	78e2      	ldrb	r2, [r4, #3]
 800790c:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 800790e:	78a2      	ldrb	r2, [r4, #2]
 8007910:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 8007912:	7862      	ldrb	r2, [r4, #1]
 8007914:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 8007916:	7822      	ldrb	r2, [r4, #0]
 8007918:	735a      	strb	r2, [r3, #13]
  aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800791a:	4a74      	ldr	r2, [pc, #464]	; (8007aec <APP_BLE_Init+0x26c>)
 800791c:	2110      	movs	r1, #16
 800791e:	2018      	movs	r0, #24
 8007920:	f7fe fe9c 	bl	800665c <aci_hal_write_config_data>
  aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8007924:	4a72      	ldr	r2, [pc, #456]	; (8007af0 <APP_BLE_Init+0x270>)
 8007926:	2110      	movs	r1, #16
 8007928:	2008      	movs	r0, #8
 800792a:	f7fe fe97 	bl	800665c <aci_hal_write_config_data>
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800792e:	2118      	movs	r1, #24
 8007930:	2001      	movs	r0, #1
 8007932:	f7fe fec2 	bl	80066ba <aci_hal_set_tx_power_level>
  aci_gatt_init();
 8007936:	f7fe fd7c 	bl	8006432 <aci_gatt_init>
    aci_gap_init(role,
 800793a:	ab0b      	add	r3, sp, #44	; 0x2c
 800793c:	9301      	str	r3, [sp, #4]
 800793e:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 8007942:	9300      	str	r3, [sp, #0]
 8007944:	ab0a      	add	r3, sp, #40	; 0x28
 8007946:	2207      	movs	r2, #7
 8007948:	2100      	movs	r1, #0
 800794a:	2001      	movs	r0, #1
 800794c:	f7fe fce0 	bl	8006310 <aci_gap_init>
    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8007950:	4b68      	ldr	r3, [pc, #416]	; (8007af4 <APP_BLE_Init+0x274>)
 8007952:	9300      	str	r3, [sp, #0]
 8007954:	2307      	movs	r3, #7
 8007956:	2200      	movs	r2, #0
 8007958:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 800795c:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
 8007960:	f7fe fe48 	bl	80065f4 <aci_gatt_update_char_value>
  if(aci_gatt_update_char_value(gap_service_handle,
 8007964:	ab09      	add	r3, sp, #36	; 0x24
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	2302      	movs	r3, #2
 800796a:	2200      	movs	r2, #0
 800796c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8007970:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
 8007974:	f7fe fe3e 	bl	80065f4 <aci_gatt_update_char_value>
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8007978:	2202      	movs	r2, #2
 800797a:	4611      	mov	r1, r2
 800797c:	2000      	movs	r0, #0
 800797e:	f7fe ff3b 	bl	80067f8 <hci_le_set_default_phy>
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8007982:	4c5d      	ldr	r4, [pc, #372]	; (8007af8 <APP_BLE_Init+0x278>)
 8007984:	2501      	movs	r5, #1
 8007986:	7025      	strb	r5, [r4, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8007988:	4628      	mov	r0, r5
 800798a:	f7fe fc5d 	bl	8006248 <aci_gap_set_io_capability>
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800798e:	7065      	strb	r5, [r4, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8007990:	2208      	movs	r2, #8
 8007992:	7122      	strb	r2, [r4, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8007994:	2110      	movs	r1, #16
 8007996:	7161      	strb	r1, [r4, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8007998:	2300      	movs	r3, #0
 800799a:	70e3      	strb	r3, [r4, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800799c:	4857      	ldr	r0, [pc, #348]	; (8007afc <APP_BLE_Init+0x27c>)
 800799e:	60a0      	str	r0, [r4, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80079a0:	70a5      	strb	r5, [r4, #2]
  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80079a2:	9304      	str	r3, [sp, #16]
 80079a4:	9003      	str	r0, [sp, #12]
 80079a6:	9302      	str	r3, [sp, #8]
 80079a8:	9101      	str	r1, [sp, #4]
 80079aa:	9200      	str	r2, [sp, #0]
 80079ac:	462a      	mov	r2, r5
 80079ae:	4629      	mov	r1, r5
 80079b0:	4628      	mov	r0, r5
 80079b2:	f7fe fc6e 	bl	8006292 <aci_gap_set_authentication_requirement>
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80079b6:	78a3      	ldrb	r3, [r4, #2]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d175      	bne.n	8007aa8 <APP_BLE_Init+0x228>
  SVCCTL_Init();
 80079bc:	f7ff f8a4 	bl	8006b08 <SVCCTL_Init>
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80079c0:	4d4d      	ldr	r5, [pc, #308]	; (8007af8 <APP_BLE_Init+0x278>)
 80079c2:	2400      	movs	r4, #0
 80079c4:	f885 4080 	strb.w	r4, [r5, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80079c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80079cc:	82eb      	strh	r3, [r5, #22]
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80079ce:	4a4c      	ldr	r2, [pc, #304]	; (8007b00 <APP_BLE_Init+0x280>)
 80079d0:	4621      	mov	r1, r4
 80079d2:	2001      	movs	r0, #1
 80079d4:	f000 fc8a 	bl	80082ec <UTIL_SEQ_RegTask>
  aci_hal_set_radio_activity_mask(0x0006);
 80079d8:	2006      	movs	r0, #6
 80079da:	f7fe fe96 	bl	800670a <aci_hal_set_radio_activity_mask>
  P2PS_APP_Init();
 80079de:	f000 fa37 	bl	8007e50 <P2PS_APP_Init>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 80079e2:	4b48      	ldr	r3, [pc, #288]	; (8007b04 <APP_BLE_Init+0x284>)
 80079e4:	4622      	mov	r2, r4
 80079e6:	f105 0181 	add.w	r1, r5, #129	; 0x81
 80079ea:	4620      	mov	r0, r4
 80079ec:	f7f9 fd00 	bl	80013f0 <HW_TS_Create>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 80079f0:	4b45      	ldr	r3, [pc, #276]	; (8007b08 <APP_BLE_Init+0x288>)
 80079f2:	4622      	mov	r2, r4
 80079f4:	f105 0182 	add.w	r1, r5, #130	; 0x82
 80079f8:	4620      	mov	r0, r4
 80079fa:	f7f9 fcf9 	bl	80013f0 <HW_TS_Create>
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80079fe:	766c      	strb	r4, [r5, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8007a00:	762c      	strb	r4, [r5, #24]
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8007a02:	2680      	movs	r6, #128	; 0x80
 8007a04:	f8a5 6084 	strh.w	r6, [r5, #132]	; 0x84
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8007a08:	27a0      	movs	r7, #160	; 0xa0
 8007a0a:	f8a5 7086 	strh.w	r7, [r5, #134]	; 0x86
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8007a0e:	f895 0081 	ldrb.w	r0, [r5, #129]	; 0x81
 8007a12:	f7f9 fd19 	bl	8001448 <HW_TS_Stop>
    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
 8007a16:	483d      	ldr	r0, [pc, #244]	; (8007b0c <APP_BLE_Init+0x28c>)
 8007a18:	f7ff fc32 	bl	8007280 <DbgTraceGetFileName>
 8007a1c:	4601      	mov	r1, r0
 8007a1e:	f240 33a3 	movw	r3, #931	; 0x3a3
 8007a22:	4a3b      	ldr	r2, [pc, #236]	; (8007b10 <APP_BLE_Init+0x290>)
 8007a24:	483b      	ldr	r0, [pc, #236]	; (8007b14 <APP_BLE_Init+0x294>)
 8007a26:	f000 fcb1 	bl	800838c <iprintf>
 8007a2a:	f895 1080 	ldrb.w	r1, [r5, #128]	; 0x80
 8007a2e:	483a      	ldr	r0, [pc, #232]	; (8007b18 <APP_BLE_Init+0x298>)
 8007a30:	f000 fcac 	bl	800838c <iprintf>
    BleApplicationContext.Device_Connection_Status = New_Status;
 8007a34:	2301      	movs	r3, #1
 8007a36:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
    ret = aci_gap_set_discoverable(
 8007a3a:	9406      	str	r4, [sp, #24]
 8007a3c:	9405      	str	r4, [sp, #20]
 8007a3e:	f105 0319 	add.w	r3, r5, #25
 8007a42:	9304      	str	r3, [sp, #16]
 8007a44:	7e2b      	ldrb	r3, [r5, #24]
 8007a46:	9303      	str	r3, [sp, #12]
 8007a48:	4b34      	ldr	r3, [pc, #208]	; (8007b1c <APP_BLE_Init+0x29c>)
 8007a4a:	9302      	str	r3, [sp, #8]
 8007a4c:	2308      	movs	r3, #8
 8007a4e:	9301      	str	r3, [sp, #4]
 8007a50:	9400      	str	r4, [sp, #0]
 8007a52:	4623      	mov	r3, r4
 8007a54:	463a      	mov	r2, r7
 8007a56:	4631      	mov	r1, r6
 8007a58:	4620      	mov	r0, r4
 8007a5a:	f7fe fb9b 	bl	8006194 <aci_gap_set_discoverable>
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 8007a5e:	4922      	ldr	r1, [pc, #136]	; (8007ae8 <APP_BLE_Init+0x268>)
 8007a60:	200e      	movs	r0, #14
 8007a62:	f7fe fc9a 	bl	800639a <aci_gap_update_adv_data>
    if (ret == BLE_STATUS_SUCCESS)
 8007a66:	4604      	mov	r4, r0
 8007a68:	bb08      	cbnz	r0, 8007aae <APP_BLE_Init+0x22e>
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 8007a6a:	4828      	ldr	r0, [pc, #160]	; (8007b0c <APP_BLE_Init+0x28c>)
 8007a6c:	f7ff fc08 	bl	8007280 <DbgTraceGetFileName>
 8007a70:	4601      	mov	r1, r0
 8007a72:	f240 33ca 	movw	r3, #970	; 0x3ca
 8007a76:	4a26      	ldr	r2, [pc, #152]	; (8007b10 <APP_BLE_Init+0x290>)
 8007a78:	4826      	ldr	r0, [pc, #152]	; (8007b14 <APP_BLE_Init+0x294>)
 8007a7a:	f000 fc87 	bl	800838c <iprintf>
 8007a7e:	4828      	ldr	r0, [pc, #160]	; (8007b20 <APP_BLE_Init+0x2a0>)
 8007a80:	f000 fd0a 	bl	8008498 <puts>
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 8007a84:	4927      	ldr	r1, [pc, #156]	; (8007b24 <APP_BLE_Init+0x2a4>)
 8007a86:	f895 0081 	ldrb.w	r0, [r5, #129]	; 0x81
 8007a8a:	f7f9 fd3b 	bl	8001504 <HW_TS_Start>
}
 8007a8e:	b01b      	add	sp, #108	; 0x6c
 8007a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8007a92:	f7fa f87b 	bl	8001b8c <Error_Handler>
 8007a96:	e716      	b.n	80078c6 <APP_BLE_Init+0x46>
    otp_addr = OTP_Read(0);
 8007a98:	2000      	movs	r0, #0
 8007a9a:	f7ff fc39 	bl	8007310 <OTP_Read>
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8007a9e:	4c22      	ldr	r4, [pc, #136]	; (8007b28 <APP_BLE_Init+0x2a8>)
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	bf18      	it	ne
 8007aa4:	4604      	movne	r4, r0
 8007aa6:	e726      	b.n	80078f6 <APP_BLE_Init+0x76>
     aci_gap_configure_whitelist();
 8007aa8:	f7fe fca3 	bl	80063f2 <aci_gap_configure_whitelist>
 8007aac:	e786      	b.n	80079bc <APP_BLE_Init+0x13c>
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 8007aae:	4817      	ldr	r0, [pc, #92]	; (8007b0c <APP_BLE_Init+0x28c>)
 8007ab0:	f7ff fbe6 	bl	8007280 <DbgTraceGetFileName>
 8007ab4:	4601      	mov	r1, r0
 8007ab6:	f240 33d7 	movw	r3, #983	; 0x3d7
 8007aba:	4a15      	ldr	r2, [pc, #84]	; (8007b10 <APP_BLE_Init+0x290>)
 8007abc:	4815      	ldr	r0, [pc, #84]	; (8007b14 <APP_BLE_Init+0x294>)
 8007abe:	f000 fc65 	bl	800838c <iprintf>
 8007ac2:	4621      	mov	r1, r4
 8007ac4:	4819      	ldr	r0, [pc, #100]	; (8007b2c <APP_BLE_Init+0x2ac>)
 8007ac6:	f000 fc61 	bl	800838c <iprintf>
  return;
 8007aca:	e7e0      	b.n	8007a8e <APP_BLE_Init+0x20e>
 8007acc:	080093b8 	.word	0x080093b8
 8007ad0:	200300d4 	.word	0x200300d4
 8007ad4:	08007867 	.word	0x08007867
 8007ad8:	08007851 	.word	0x08007851
 8007adc:	08006cb1 	.word	0x08006cb1
 8007ae0:	1fff7580 	.word	0x1fff7580
 8007ae4:	20000368 	.word	0x20000368
 8007ae8:	20000014 	.word	0x20000014
 8007aec:	08009f94 	.word	0x08009f94
 8007af0:	08009f84 	.word	0x08009f84
 8007af4:	08009d98 	.word	0x08009d98
 8007af8:	20000178 	.word	0x20000178
 8007afc:	0001b207 	.word	0x0001b207
 8007b00:	080077c1 	.word	0x080077c1
 8007b04:	080077b5 	.word	0x080077b5
 8007b08:	080077b3 	.word	0x080077b3
 8007b0c:	08009d34 	.word	0x08009d34
 8007b10:	08009fc4 	.word	0x08009fc4
 8007b14:	0800954c 	.word	0x0800954c
 8007b18:	08009da0 	.word	0x08009da0
 8007b1c:	08009fdc 	.word	0x08009fdc
 8007b20:	08009dbc 	.word	0x08009dbc
 8007b24:	0001e046 	.word	0x0001e046
 8007b28:	08009fa4 	.word	0x08009fa4
 8007b2c:	08009de4 	.word	0x08009de4

08007b30 <SVCCTL_App_Notification>:
{
 8007b30:	b570      	push	{r4, r5, r6, lr}
 8007b32:	b08a      	sub	sp, #40	; 0x28
 8007b34:	4604      	mov	r4, r0
  switch (event_pckt->evt)
 8007b36:	7843      	ldrb	r3, [r0, #1]
 8007b38:	2b3e      	cmp	r3, #62	; 0x3e
 8007b3a:	d07d      	beq.n	8007c38 <SVCCTL_App_Notification+0x108>
 8007b3c:	2bff      	cmp	r3, #255	; 0xff
 8007b3e:	f000 8133 	beq.w	8007da8 <SVCCTL_App_Notification+0x278>
 8007b42:	2b05      	cmp	r3, #5
 8007b44:	d002      	beq.n	8007b4c <SVCCTL_App_Notification+0x1c>
}
 8007b46:	2001      	movs	r0, #1
 8007b48:	b00a      	add	sp, #40	; 0x28
 8007b4a:	bd70      	pop	{r4, r5, r6, pc}
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8007b4c:	8882      	ldrh	r2, [r0, #4]
 8007b4e:	4ba1      	ldr	r3, [pc, #644]	; (8007dd4 <SVCCTL_App_Notification+0x2a4>)
 8007b50:	8adb      	ldrh	r3, [r3, #22]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d04e      	beq.n	8007bf4 <SVCCTL_App_Notification+0xc4>
    Min_Inter = AdvIntervalMin;
 8007b56:	4c9f      	ldr	r4, [pc, #636]	; (8007dd4 <SVCCTL_App_Notification+0x2a4>)
 8007b58:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
    Max_Inter = AdvIntervalMax;
 8007b5c:	f8b4 6086 	ldrh.w	r6, [r4, #134]	; 0x86
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8007b60:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
 8007b64:	f7f9 fc70 	bl	8001448 <HW_TS_Stop>
    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
 8007b68:	489b      	ldr	r0, [pc, #620]	; (8007dd8 <SVCCTL_App_Notification+0x2a8>)
 8007b6a:	f7ff fb89 	bl	8007280 <DbgTraceGetFileName>
 8007b6e:	4601      	mov	r1, r0
 8007b70:	f240 33a3 	movw	r3, #931	; 0x3a3
 8007b74:	4a99      	ldr	r2, [pc, #612]	; (8007ddc <SVCCTL_App_Notification+0x2ac>)
 8007b76:	489a      	ldr	r0, [pc, #616]	; (8007de0 <SVCCTL_App_Notification+0x2b0>)
 8007b78:	f000 fc08 	bl	800838c <iprintf>
 8007b7c:	f894 1080 	ldrb.w	r1, [r4, #128]	; 0x80
 8007b80:	4898      	ldr	r0, [pc, #608]	; (8007de4 <SVCCTL_App_Notification+0x2b4>)
 8007b82:	f000 fc03 	bl	800838c <iprintf>
    BleApplicationContext.Device_Connection_Status = New_Status;
 8007b86:	2301      	movs	r3, #1
 8007b88:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ret = aci_gap_set_discoverable(
 8007b8c:	2000      	movs	r0, #0
 8007b8e:	9006      	str	r0, [sp, #24]
 8007b90:	9005      	str	r0, [sp, #20]
 8007b92:	f104 0319 	add.w	r3, r4, #25
 8007b96:	9304      	str	r3, [sp, #16]
 8007b98:	7e23      	ldrb	r3, [r4, #24]
 8007b9a:	9303      	str	r3, [sp, #12]
 8007b9c:	4b92      	ldr	r3, [pc, #584]	; (8007de8 <SVCCTL_App_Notification+0x2b8>)
 8007b9e:	9302      	str	r3, [sp, #8]
 8007ba0:	2308      	movs	r3, #8
 8007ba2:	9301      	str	r3, [sp, #4]
 8007ba4:	9000      	str	r0, [sp, #0]
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	4632      	mov	r2, r6
 8007baa:	4629      	mov	r1, r5
 8007bac:	f7fe faf2 	bl	8006194 <aci_gap_set_discoverable>
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 8007bb0:	498e      	ldr	r1, [pc, #568]	; (8007dec <SVCCTL_App_Notification+0x2bc>)
 8007bb2:	200e      	movs	r0, #14
 8007bb4:	f7fe fbf1 	bl	800639a <aci_gap_update_adv_data>
    if (ret == BLE_STATUS_SUCCESS)
 8007bb8:	4604      	mov	r4, r0
 8007bba:	bb70      	cbnz	r0, 8007c1a <SVCCTL_App_Notification+0xea>
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 8007bbc:	4886      	ldr	r0, [pc, #536]	; (8007dd8 <SVCCTL_App_Notification+0x2a8>)
 8007bbe:	f7ff fb5f 	bl	8007280 <DbgTraceGetFileName>
 8007bc2:	4601      	mov	r1, r0
 8007bc4:	f240 33ca 	movw	r3, #970	; 0x3ca
 8007bc8:	4a84      	ldr	r2, [pc, #528]	; (8007ddc <SVCCTL_App_Notification+0x2ac>)
 8007bca:	4885      	ldr	r0, [pc, #532]	; (8007de0 <SVCCTL_App_Notification+0x2b0>)
 8007bcc:	f000 fbde 	bl	800838c <iprintf>
 8007bd0:	4887      	ldr	r0, [pc, #540]	; (8007df0 <SVCCTL_App_Notification+0x2c0>)
 8007bd2:	f000 fc61 	bl	8008498 <puts>
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 8007bd6:	4987      	ldr	r1, [pc, #540]	; (8007df4 <SVCCTL_App_Notification+0x2c4>)
 8007bd8:	4b7e      	ldr	r3, [pc, #504]	; (8007dd4 <SVCCTL_App_Notification+0x2a4>)
 8007bda:	f893 0081 	ldrb.w	r0, [r3, #129]	; 0x81
 8007bde:	f7f9 fc91 	bl	8001504 <HW_TS_Start>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8007be2:	4885      	ldr	r0, [pc, #532]	; (8007df8 <SVCCTL_App_Notification+0x2c8>)
 8007be4:	2301      	movs	r3, #1
 8007be6:	7003      	strb	r3, [r0, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007be8:	4b7a      	ldr	r3, [pc, #488]	; (8007dd4 <SVCCTL_App_Notification+0x2a4>)
 8007bea:	8adb      	ldrh	r3, [r3, #22]
 8007bec:	8043      	strh	r3, [r0, #2]
      P2PS_APP_Notification(&handleNotification);
 8007bee:	f000 f92e 	bl	8007e4e <P2PS_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8007bf2:	e7a8      	b.n	8007b46 <SVCCTL_App_Notification+0x16>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8007bf4:	4b77      	ldr	r3, [pc, #476]	; (8007dd4 <SVCCTL_App_Notification+0x2a4>)
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007bfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 8007bfe:	4876      	ldr	r0, [pc, #472]	; (8007dd8 <SVCCTL_App_Notification+0x2a8>)
 8007c00:	f7ff fb3e 	bl	8007280 <DbgTraceGetFileName>
 8007c04:	4601      	mov	r1, r0
 8007c06:	f44f 7305 	mov.w	r3, #532	; 0x214
 8007c0a:	4a7c      	ldr	r2, [pc, #496]	; (8007dfc <SVCCTL_App_Notification+0x2cc>)
 8007c0c:	4874      	ldr	r0, [pc, #464]	; (8007de0 <SVCCTL_App_Notification+0x2b0>)
 8007c0e:	f000 fbbd 	bl	800838c <iprintf>
 8007c12:	487b      	ldr	r0, [pc, #492]	; (8007e00 <SVCCTL_App_Notification+0x2d0>)
 8007c14:	f000 fc40 	bl	8008498 <puts>
 8007c18:	e79d      	b.n	8007b56 <SVCCTL_App_Notification+0x26>
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 8007c1a:	486f      	ldr	r0, [pc, #444]	; (8007dd8 <SVCCTL_App_Notification+0x2a8>)
 8007c1c:	f7ff fb30 	bl	8007280 <DbgTraceGetFileName>
 8007c20:	4601      	mov	r1, r0
 8007c22:	f240 33d7 	movw	r3, #983	; 0x3d7
 8007c26:	4a6d      	ldr	r2, [pc, #436]	; (8007ddc <SVCCTL_App_Notification+0x2ac>)
 8007c28:	486d      	ldr	r0, [pc, #436]	; (8007de0 <SVCCTL_App_Notification+0x2b0>)
 8007c2a:	f000 fbaf 	bl	800838c <iprintf>
 8007c2e:	4621      	mov	r1, r4
 8007c30:	4874      	ldr	r0, [pc, #464]	; (8007e04 <SVCCTL_App_Notification+0x2d4>)
 8007c32:	f000 fbab 	bl	800838c <iprintf>
 8007c36:	e7d4      	b.n	8007be2 <SVCCTL_App_Notification+0xb2>
      switch (meta_evt->subevent)
 8007c38:	78c3      	ldrb	r3, [r0, #3]
 8007c3a:	2b03      	cmp	r3, #3
 8007c3c:	d02a      	beq.n	8007c94 <SVCCTL_App_Notification+0x164>
 8007c3e:	2b0c      	cmp	r3, #12
 8007c40:	d036      	beq.n	8007cb0 <SVCCTL_App_Notification+0x180>
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	f47f af7f 	bne.w	8007b46 <SVCCTL_App_Notification+0x16>
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8007c48:	4d62      	ldr	r5, [pc, #392]	; (8007dd4 <SVCCTL_App_Notification+0x2a4>)
 8007c4a:	f895 0081 	ldrb.w	r0, [r5, #129]	; 0x81
 8007c4e:	f7f9 fbfb 	bl	8001448 <HW_TS_Stop>
          APP_DBG_MSG("HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE for connection handle 0x%x\n", connection_complete_event->Connection_Handle);
 8007c52:	4861      	ldr	r0, [pc, #388]	; (8007dd8 <SVCCTL_App_Notification+0x2a8>)
 8007c54:	f7ff fb14 	bl	8007280 <DbgTraceGetFileName>
 8007c58:	4601      	mov	r1, r0
 8007c5a:	f240 2363 	movw	r3, #611	; 0x263
 8007c5e:	4a67      	ldr	r2, [pc, #412]	; (8007dfc <SVCCTL_App_Notification+0x2cc>)
 8007c60:	485f      	ldr	r0, [pc, #380]	; (8007de0 <SVCCTL_App_Notification+0x2b0>)
 8007c62:	f000 fb93 	bl	800838c <iprintf>
 8007c66:	f8b4 1005 	ldrh.w	r1, [r4, #5]
 8007c6a:	4867      	ldr	r0, [pc, #412]	; (8007e08 <SVCCTL_App_Notification+0x2d8>)
 8007c6c:	f000 fb8e 	bl	800838c <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8007c70:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8007c74:	2b04      	cmp	r3, #4
 8007c76:	bf0c      	ite	eq
 8007c78:	2306      	moveq	r3, #6
 8007c7a:	2305      	movne	r3, #5
 8007c7c:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8007c80:	f8b4 3005 	ldrh.w	r3, [r4, #5]
 8007c84:	82eb      	strh	r3, [r5, #22]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8007c86:	485c      	ldr	r0, [pc, #368]	; (8007df8 <SVCCTL_App_Notification+0x2c8>)
 8007c88:	2200      	movs	r2, #0
 8007c8a:	7002      	strb	r2, [r0, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007c8c:	8043      	strh	r3, [r0, #2]
          P2PS_APP_Notification(&handleNotification);
 8007c8e:	f000 f8de 	bl	8007e4e <P2PS_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8007c92:	e758      	b.n	8007b46 <SVCCTL_App_Notification+0x16>
          APP_DBG_MSG("\r\n\r** CONNECTION UPDATE EVENT WITH CLIENT \n");
 8007c94:	4850      	ldr	r0, [pc, #320]	; (8007dd8 <SVCCTL_App_Notification+0x2a8>)
 8007c96:	f7ff faf3 	bl	8007280 <DbgTraceGetFileName>
 8007c9a:	4601      	mov	r1, r0
 8007c9c:	f44f 730c 	mov.w	r3, #560	; 0x230
 8007ca0:	4a56      	ldr	r2, [pc, #344]	; (8007dfc <SVCCTL_App_Notification+0x2cc>)
 8007ca2:	484f      	ldr	r0, [pc, #316]	; (8007de0 <SVCCTL_App_Notification+0x2b0>)
 8007ca4:	f000 fb72 	bl	800838c <iprintf>
 8007ca8:	4858      	ldr	r0, [pc, #352]	; (8007e0c <SVCCTL_App_Notification+0x2dc>)
 8007caa:	f000 fbf5 	bl	8008498 <puts>
          break;
 8007cae:	e74a      	b.n	8007b46 <SVCCTL_App_Notification+0x16>
          APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE \n");
 8007cb0:	4849      	ldr	r0, [pc, #292]	; (8007dd8 <SVCCTL_App_Notification+0x2a8>)
 8007cb2:	f7ff fae5 	bl	8007280 <DbgTraceGetFileName>
 8007cb6:	4601      	mov	r1, r0
 8007cb8:	f240 2337 	movw	r3, #567	; 0x237
 8007cbc:	4a4f      	ldr	r2, [pc, #316]	; (8007dfc <SVCCTL_App_Notification+0x2cc>)
 8007cbe:	4848      	ldr	r0, [pc, #288]	; (8007de0 <SVCCTL_App_Notification+0x2b0>)
 8007cc0:	f000 fb64 	bl	800838c <iprintf>
 8007cc4:	4852      	ldr	r0, [pc, #328]	; (8007e10 <SVCCTL_App_Notification+0x2e0>)
 8007cc6:	f000 fbe7 	bl	8008498 <puts>
          if (evt_le_phy_update_complete->Status == 0)
 8007cca:	7923      	ldrb	r3, [r4, #4]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d13d      	bne.n	8007d4c <SVCCTL_App_Notification+0x21c>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status ok \n");
 8007cd0:	4841      	ldr	r0, [pc, #260]	; (8007dd8 <SVCCTL_App_Notification+0x2a8>)
 8007cd2:	f7ff fad5 	bl	8007280 <DbgTraceGetFileName>
 8007cd6:	4601      	mov	r1, r0
 8007cd8:	f240 233b 	movw	r3, #571	; 0x23b
 8007cdc:	4a47      	ldr	r2, [pc, #284]	; (8007dfc <SVCCTL_App_Notification+0x2cc>)
 8007cde:	4840      	ldr	r0, [pc, #256]	; (8007de0 <SVCCTL_App_Notification+0x2b0>)
 8007ce0:	f000 fb54 	bl	800838c <iprintf>
 8007ce4:	484b      	ldr	r0, [pc, #300]	; (8007e14 <SVCCTL_App_Notification+0x2e4>)
 8007ce6:	f000 fbd7 	bl	8008498 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 8007cea:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 8007cee:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8007cf2:	4b38      	ldr	r3, [pc, #224]	; (8007dd4 <SVCCTL_App_Notification+0x2a4>)
 8007cf4:	8ad8      	ldrh	r0, [r3, #22]
 8007cf6:	f7fe fd4d 	bl	8006794 <hci_le_read_phy>
          if (ret == BLE_STATUS_SUCCESS)
 8007cfa:	2800      	cmp	r0, #0
 8007cfc:	d146      	bne.n	8007d8c <SVCCTL_App_Notification+0x25c>
            APP_DBG_MSG("Read_PHY success \n");
 8007cfe:	4836      	ldr	r0, [pc, #216]	; (8007dd8 <SVCCTL_App_Notification+0x2a8>)
 8007d00:	f7ff fabe 	bl	8007280 <DbgTraceGetFileName>
 8007d04:	4601      	mov	r1, r0
 8007d06:	f240 2345 	movw	r3, #581	; 0x245
 8007d0a:	4a3c      	ldr	r2, [pc, #240]	; (8007dfc <SVCCTL_App_Notification+0x2cc>)
 8007d0c:	4834      	ldr	r0, [pc, #208]	; (8007de0 <SVCCTL_App_Notification+0x2b0>)
 8007d0e:	f000 fb3d 	bl	800838c <iprintf>
 8007d12:	4841      	ldr	r0, [pc, #260]	; (8007e18 <SVCCTL_App_Notification+0x2e8>)
 8007d14:	f000 fbc0 	bl	8008498 <puts>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 8007d18:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d103      	bne.n	8007d28 <SVCCTL_App_Notification+0x1f8>
 8007d20:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	d01f      	beq.n	8007d68 <SVCCTL_App_Notification+0x238>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 8007d28:	482b      	ldr	r0, [pc, #172]	; (8007dd8 <SVCCTL_App_Notification+0x2a8>)
 8007d2a:	f7ff faa9 	bl	8007280 <DbgTraceGetFileName>
 8007d2e:	4601      	mov	r1, r0
 8007d30:	f240 234d 	movw	r3, #589	; 0x24d
 8007d34:	4a31      	ldr	r2, [pc, #196]	; (8007dfc <SVCCTL_App_Notification+0x2cc>)
 8007d36:	482a      	ldr	r0, [pc, #168]	; (8007de0 <SVCCTL_App_Notification+0x2b0>)
 8007d38:	f000 fb28 	bl	800838c <iprintf>
 8007d3c:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8007d40:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
 8007d44:	4835      	ldr	r0, [pc, #212]	; (8007e1c <SVCCTL_App_Notification+0x2ec>)
 8007d46:	f000 fb21 	bl	800838c <iprintf>
 8007d4a:	e6fc      	b.n	8007b46 <SVCCTL_App_Notification+0x16>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status nok \n");
 8007d4c:	4822      	ldr	r0, [pc, #136]	; (8007dd8 <SVCCTL_App_Notification+0x2a8>)
 8007d4e:	f7ff fa97 	bl	8007280 <DbgTraceGetFileName>
 8007d52:	4601      	mov	r1, r0
 8007d54:	f240 233f 	movw	r3, #575	; 0x23f
 8007d58:	4a28      	ldr	r2, [pc, #160]	; (8007dfc <SVCCTL_App_Notification+0x2cc>)
 8007d5a:	4821      	ldr	r0, [pc, #132]	; (8007de0 <SVCCTL_App_Notification+0x2b0>)
 8007d5c:	f000 fb16 	bl	800838c <iprintf>
 8007d60:	482f      	ldr	r0, [pc, #188]	; (8007e20 <SVCCTL_App_Notification+0x2f0>)
 8007d62:	f000 fb99 	bl	8008498 <puts>
 8007d66:	e7c0      	b.n	8007cea <SVCCTL_App_Notification+0x1ba>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 8007d68:	481b      	ldr	r0, [pc, #108]	; (8007dd8 <SVCCTL_App_Notification+0x2a8>)
 8007d6a:	f7ff fa89 	bl	8007280 <DbgTraceGetFileName>
 8007d6e:	4601      	mov	r1, r0
 8007d70:	f240 2349 	movw	r3, #585	; 0x249
 8007d74:	4a21      	ldr	r2, [pc, #132]	; (8007dfc <SVCCTL_App_Notification+0x2cc>)
 8007d76:	481a      	ldr	r0, [pc, #104]	; (8007de0 <SVCCTL_App_Notification+0x2b0>)
 8007d78:	f000 fb08 	bl	800838c <iprintf>
 8007d7c:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8007d80:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
 8007d84:	4825      	ldr	r0, [pc, #148]	; (8007e1c <SVCCTL_App_Notification+0x2ec>)
 8007d86:	f000 fb01 	bl	800838c <iprintf>
 8007d8a:	e6dc      	b.n	8007b46 <SVCCTL_App_Notification+0x16>
            APP_DBG_MSG("Read conf not succeess \n");
 8007d8c:	4812      	ldr	r0, [pc, #72]	; (8007dd8 <SVCCTL_App_Notification+0x2a8>)
 8007d8e:	f7ff fa77 	bl	8007280 <DbgTraceGetFileName>
 8007d92:	4601      	mov	r1, r0
 8007d94:	f240 2352 	movw	r3, #594	; 0x252
 8007d98:	4a18      	ldr	r2, [pc, #96]	; (8007dfc <SVCCTL_App_Notification+0x2cc>)
 8007d9a:	4811      	ldr	r0, [pc, #68]	; (8007de0 <SVCCTL_App_Notification+0x2b0>)
 8007d9c:	f000 faf6 	bl	800838c <iprintf>
 8007da0:	4820      	ldr	r0, [pc, #128]	; (8007e24 <SVCCTL_App_Notification+0x2f4>)
 8007da2:	f000 fb79 	bl	8008498 <puts>
 8007da6:	e6ce      	b.n	8007b46 <SVCCTL_App_Notification+0x16>
      switch (blecore_evt->ecode)
 8007da8:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 8007dac:	f240 4307 	movw	r3, #1031	; 0x407
 8007db0:	429a      	cmp	r2, r3
 8007db2:	f47f aec8 	bne.w	8007b46 <SVCCTL_App_Notification+0x16>
        APP_DBG_MSG("\r\n\r** ACI_GAP_PROC_COMPLETE_VSEVT_CODE \n");
 8007db6:	4808      	ldr	r0, [pc, #32]	; (8007dd8 <SVCCTL_App_Notification+0x2a8>)
 8007db8:	f7ff fa62 	bl	8007280 <DbgTraceGetFileName>
 8007dbc:	4601      	mov	r1, r0
 8007dbe:	f240 239e 	movw	r3, #670	; 0x29e
 8007dc2:	4a0e      	ldr	r2, [pc, #56]	; (8007dfc <SVCCTL_App_Notification+0x2cc>)
 8007dc4:	4806      	ldr	r0, [pc, #24]	; (8007de0 <SVCCTL_App_Notification+0x2b0>)
 8007dc6:	f000 fae1 	bl	800838c <iprintf>
 8007dca:	4817      	ldr	r0, [pc, #92]	; (8007e28 <SVCCTL_App_Notification+0x2f8>)
 8007dcc:	f000 fb64 	bl	8008498 <puts>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8007dd0:	e6b9      	b.n	8007b46 <SVCCTL_App_Notification+0x16>
 8007dd2:	bf00      	nop
 8007dd4:	20000178 	.word	0x20000178
 8007dd8:	08009d34 	.word	0x08009d34
 8007ddc:	08009fc4 	.word	0x08009fc4
 8007de0:	0800954c 	.word	0x0800954c
 8007de4:	08009da0 	.word	0x08009da0
 8007de8:	08009fdc 	.word	0x08009fdc
 8007dec:	20000014 	.word	0x20000014
 8007df0:	08009dbc 	.word	0x08009dbc
 8007df4:	0001e046 	.word	0x0001e046
 8007df8:	20000658 	.word	0x20000658
 8007dfc:	08009fac 	.word	0x08009fac
 8007e00:	08009e14 	.word	0x08009e14
 8007e04:	08009de4 	.word	0x08009de4
 8007e08:	08009f18 	.word	0x08009f18
 8007e0c:	08009e3c 	.word	0x08009e3c
 8007e10:	08009e68 	.word	0x08009e68
 8007e14:	08009e84 	.word	0x08009e84
 8007e18:	08009ed0 	.word	0x08009ed0
 8007e1c:	08009ee4 	.word	0x08009ee4
 8007e20:	08009ea8 	.word	0x08009ea8
 8007e24:	08009f00 	.word	0x08009f00
 8007e28:	08009f5c 	.word	0x08009f5c

08007e2c <hci_notify_asynch_evt>:
{
 8007e2c:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8007e2e:	2100      	movs	r1, #0
 8007e30:	2002      	movs	r0, #2
 8007e32:	f000 f931 	bl	8008098 <UTIL_SEQ_SetTask>
}
 8007e36:	bd08      	pop	{r3, pc}

08007e38 <hci_cmd_resp_release>:
{
 8007e38:	b508      	push	{r3, lr}
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007e3a:	2001      	movs	r0, #1
 8007e3c:	f000 f95e 	bl	80080fc <UTIL_SEQ_SetEvt>
}
 8007e40:	bd08      	pop	{r3, pc}

08007e42 <hci_cmd_resp_wait>:
{
 8007e42:	b508      	push	{r3, lr}
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007e44:	2001      	movs	r0, #1
 8007e46:	f000 fa1b 	bl	8008280 <UTIL_SEQ_WaitEvt>
}
 8007e4a:	bd08      	pop	{r3, pc}

08007e4c <P2PS_STM_App_Notification>:
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
}
 8007e4c:	4770      	bx	lr

08007e4e <P2PS_APP_Notification>:
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
}
 8007e4e:	4770      	bx	lr

08007e50 <P2PS_APP_Init>:
{
/* USER CODE BEGIN P2PS_APP_Init */

/* USER CODE END P2PS_APP_Init */
  return;
}
 8007e50:	4770      	bx	lr
	...

08007e54 <HW_IPCC_Enable>:
}
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8007e54:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8007e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e5a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8007e5e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007e62:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8007e66:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8007e6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e6e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8007e70:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8007e72:	4b0a      	ldr	r3, [pc, #40]	; (8007e9c <HW_IPCC_Enable+0x48>)
 8007e74:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8007e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e7c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8007e80:	6a1a      	ldr	r2, [r3, #32]
 8007e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e86:	621a      	str	r2, [r3, #32]
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8007e88:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8007e8a:	bf20      	wfe
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8007e8c:	4a04      	ldr	r2, [pc, #16]	; (8007ea0 <HW_IPCC_Enable+0x4c>)
 8007e8e:	68d3      	ldr	r3, [r2, #12]
 8007e90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e94:	60d3      	str	r3, [r2, #12]
  LL_PWR_EnableBootC2( );

  return;
}
 8007e96:	b002      	add	sp, #8
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	58000800 	.word	0x58000800
 8007ea0:	58000400 	.word	0x58000400

08007ea4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8007ea4:	b500      	push	{lr}
 8007ea6:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB3ENR, Periphs);
 8007ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007eae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007eb2:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8007eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007eba:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8007ebc:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8007ebe:	4b09      	ldr	r3, [pc, #36]	; (8007ee4 <HW_IPCC_Init+0x40>)
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	f042 0201 	orr.w	r2, r2, #1
 8007ec6:	601a      	str	r2, [r3, #0]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007ece:	601a      	str	r2, [r3, #0]
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );

  LL_C1_IPCC_EnableIT_RXO( IPCC );
  LL_C1_IPCC_EnableIT_TXF( IPCC );

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8007ed0:	202c      	movs	r0, #44	; 0x2c
 8007ed2:	f7fa fa3b 	bl	800234c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8007ed6:	202d      	movs	r0, #45	; 0x2d
 8007ed8:	f7fa fa38 	bl	800234c <HAL_NVIC_EnableIRQ>

  return;
}
 8007edc:	b003      	add	sp, #12
 8007ede:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ee2:	bf00      	nop
 8007ee4:	58000c00 	.word	0x58000c00

08007ee8 <HW_IPCC_BLE_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8007ee8:	4a02      	ldr	r2, [pc, #8]	; (8007ef4 <HW_IPCC_BLE_Init+0xc>)
 8007eea:	6853      	ldr	r3, [r2, #4]
 8007eec:	f023 0301 	bic.w	r3, r3, #1
 8007ef0:	6053      	str	r3, [r2, #4]
void HW_IPCC_BLE_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );

  return;
}
 8007ef2:	4770      	bx	lr
 8007ef4:	58000c00 	.word	0x58000c00

08007ef8 <HW_IPCC_BLE_SendCmd>:
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8007ef8:	4b02      	ldr	r3, [pc, #8]	; (8007f04 <HW_IPCC_BLE_SendCmd+0xc>)
 8007efa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007efe:	609a      	str	r2, [r3, #8]
void HW_IPCC_BLE_SendCmd( void )
{
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );

  return;
}
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	58000c00 	.word	0x58000c00

08007f08 <HW_IPCC_SYS_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8007f08:	4a02      	ldr	r2, [pc, #8]	; (8007f14 <HW_IPCC_SYS_Init+0xc>)
 8007f0a:	6853      	ldr	r3, [r2, #4]
 8007f0c:	f023 0302 	bic.w	r3, r3, #2
 8007f10:	6053      	str	r3, [r2, #4]
void HW_IPCC_SYS_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );

  return;
}
 8007f12:	4770      	bx	lr
 8007f14:	58000c00 	.word	0x58000c00

08007f18 <HW_IPCC_SYS_SendCmd>:
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8007f18:	4b04      	ldr	r3, [pc, #16]	; (8007f2c <HW_IPCC_SYS_SendCmd+0x14>)
 8007f1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007f1e:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8007f20:	685a      	ldr	r2, [r3, #4]
 8007f22:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007f26:	605a      	str	r2, [r3, #4]
{
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );

  return;
}
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	58000c00 	.word	0x58000c00

08007f30 <HW_IPCC_Tx_Handler>:
{
 8007f30:	b510      	push	{r4, lr}
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8007f32:	4b1d      	ldr	r3, [pc, #116]	; (8007fa8 <HW_IPCC_Tx_Handler+0x78>)
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	f013 0f02 	tst.w	r3, #2
 8007f3a:	d104      	bne.n	8007f46 <HW_IPCC_Tx_Handler+0x16>
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8007f3c:	4b1a      	ldr	r3, [pc, #104]	; (8007fa8 <HW_IPCC_Tx_Handler+0x78>)
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007f44:	d014      	beq.n	8007f70 <HW_IPCC_Tx_Handler+0x40>
 8007f46:	4b18      	ldr	r3, [pc, #96]	; (8007fa8 <HW_IPCC_Tx_Handler+0x78>)
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	f013 0f08 	tst.w	r3, #8
 8007f4e:	d104      	bne.n	8007f5a <HW_IPCC_Tx_Handler+0x2a>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8007f50:	4b15      	ldr	r3, [pc, #84]	; (8007fa8 <HW_IPCC_Tx_Handler+0x78>)
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8007f58:	d012      	beq.n	8007f80 <HW_IPCC_Tx_Handler+0x50>
 8007f5a:	4b13      	ldr	r3, [pc, #76]	; (8007fa8 <HW_IPCC_Tx_Handler+0x78>)
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	f013 0f20 	tst.w	r3, #32
 8007f62:	d104      	bne.n	8007f6e <HW_IPCC_Tx_Handler+0x3e>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8007f64:	4b10      	ldr	r3, [pc, #64]	; (8007fa8 <HW_IPCC_Tx_Handler+0x78>)
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8007f6c:	d014      	beq.n	8007f98 <HW_IPCC_Tx_Handler+0x68>
}
 8007f6e:	bd10      	pop	{r4, pc}
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8007f70:	4a0d      	ldr	r2, [pc, #52]	; (8007fa8 <HW_IPCC_Tx_Handler+0x78>)
 8007f72:	6853      	ldr	r3, [r2, #4]
 8007f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f78:	6053      	str	r3, [r2, #4]

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );

  HW_IPCC_SYS_CmdEvtNot();
 8007f7a:	f7ff f8e3 	bl	8007144 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8007f7e:	e7f6      	b.n	8007f6e <HW_IPCC_Tx_Handler+0x3e>
 8007f80:	4c09      	ldr	r4, [pc, #36]	; (8007fa8 <HW_IPCC_Tx_Handler+0x78>)
 8007f82:	6863      	ldr	r3, [r4, #4]
 8007f84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f88:	6063      	str	r3, [r4, #4]

static void HW_IPCC_MM_FreeBufHandler( void )
{
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );

  FreeBufCb();
 8007f8a:	4b08      	ldr	r3, [pc, #32]	; (8007fac <HW_IPCC_Tx_Handler+0x7c>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4798      	blx	r3
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8007f90:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007f94:	60a3      	str	r3, [r4, #8]

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );

  return;
 8007f96:	e7ea      	b.n	8007f6e <HW_IPCC_Tx_Handler+0x3e>
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8007f98:	4a03      	ldr	r2, [pc, #12]	; (8007fa8 <HW_IPCC_Tx_Handler+0x78>)
 8007f9a:	6853      	ldr	r3, [r2, #4]
 8007f9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007fa0:	6053      	str	r3, [r2, #4]
  HW_IPCC_BLE_AclDataAckNot();
 8007fa2:	f7ff f89b 	bl	80070dc <HW_IPCC_BLE_AclDataAckNot>
  return;
 8007fa6:	e7e2      	b.n	8007f6e <HW_IPCC_Tx_Handler+0x3e>
 8007fa8:	58000c00 	.word	0x58000c00
 8007fac:	20000370 	.word	0x20000370

08007fb0 <HW_IPCC_MM_SendFreeBuf>:
{
 8007fb0:	b508      	push	{r3, lr}
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8007fb2:	4b09      	ldr	r3, [pc, #36]	; (8007fd8 <HW_IPCC_MM_SendFreeBuf+0x28>)
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	f013 0f08 	tst.w	r3, #8
 8007fba:	d105      	bne.n	8007fc8 <HW_IPCC_MM_SendFreeBuf+0x18>
    cb();
 8007fbc:	4780      	blx	r0
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8007fbe:	4b06      	ldr	r3, [pc, #24]	; (8007fd8 <HW_IPCC_MM_SendFreeBuf+0x28>)
 8007fc0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007fc4:	609a      	str	r2, [r3, #8]
}
 8007fc6:	bd08      	pop	{r3, pc}
    FreeBufCb = cb;
 8007fc8:	4b04      	ldr	r3, [pc, #16]	; (8007fdc <HW_IPCC_MM_SendFreeBuf+0x2c>)
 8007fca:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8007fcc:	4a02      	ldr	r2, [pc, #8]	; (8007fd8 <HW_IPCC_MM_SendFreeBuf+0x28>)
 8007fce:	6853      	ldr	r3, [r2, #4]
 8007fd0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007fd4:	6053      	str	r3, [r2, #4]
}
 8007fd6:	e7f6      	b.n	8007fc6 <HW_IPCC_MM_SendFreeBuf+0x16>
 8007fd8:	58000c00 	.word	0x58000c00
 8007fdc:	20000370 	.word	0x20000370

08007fe0 <HW_IPCC_TRACES_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8007fe0:	4a02      	ldr	r2, [pc, #8]	; (8007fec <HW_IPCC_TRACES_Init+0xc>)
 8007fe2:	6853      	ldr	r3, [r2, #4]
 8007fe4:	f023 0308 	bic.w	r3, r3, #8
 8007fe8:	6053      	str	r3, [r2, #4]
void HW_IPCC_TRACES_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );

  return;
}
 8007fea:	4770      	bx	lr
 8007fec:	58000c00 	.word	0x58000c00

08007ff0 <HW_IPCC_Rx_Handler>:
{
 8007ff0:	b508      	push	{r3, lr}
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8007ff2:	4b18      	ldr	r3, [pc, #96]	; (8008054 <HW_IPCC_Rx_Handler+0x64>)
 8007ff4:	69db      	ldr	r3, [r3, #28]
 8007ff6:	f013 0f02 	tst.w	r3, #2
 8007ffa:	d10a      	bne.n	8008012 <HW_IPCC_Rx_Handler+0x22>
 8007ffc:	4b15      	ldr	r3, [pc, #84]	; (8008054 <HW_IPCC_Rx_Handler+0x64>)
 8007ffe:	69db      	ldr	r3, [r3, #28]
 8008000:	f013 0f01 	tst.w	r3, #1
 8008004:	d110      	bne.n	8008028 <HW_IPCC_Rx_Handler+0x38>
 8008006:	4b13      	ldr	r3, [pc, #76]	; (8008054 <HW_IPCC_Rx_Handler+0x64>)
 8008008:	69db      	ldr	r3, [r3, #28]
 800800a:	f013 0f08 	tst.w	r3, #8
 800800e:	d116      	bne.n	800803e <HW_IPCC_Rx_Handler+0x4e>
}
 8008010:	bd08      	pop	{r3, pc}
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8008012:	4b10      	ldr	r3, [pc, #64]	; (8008054 <HW_IPCC_Rx_Handler+0x64>)
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	f013 0f02 	tst.w	r3, #2
 800801a:	d1ef      	bne.n	8007ffc <HW_IPCC_Rx_Handler+0xc>
  HW_IPCC_SYS_EvtNot();
 800801c:	f7ff f8a0 	bl	8007160 <HW_IPCC_SYS_EvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 8008020:	4b0c      	ldr	r3, [pc, #48]	; (8008054 <HW_IPCC_Rx_Handler+0x64>)
 8008022:	2202      	movs	r2, #2
 8008024:	609a      	str	r2, [r3, #8]
  return;
 8008026:	e7f3      	b.n	8008010 <HW_IPCC_Rx_Handler+0x20>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8008028:	4b0a      	ldr	r3, [pc, #40]	; (8008054 <HW_IPCC_Rx_Handler+0x64>)
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	f013 0f01 	tst.w	r3, #1
 8008030:	d1e9      	bne.n	8008006 <HW_IPCC_Rx_Handler+0x16>
  HW_IPCC_BLE_RxEvtNot();
 8008032:	f7ff f83d 	bl	80070b0 <HW_IPCC_BLE_RxEvtNot>
 8008036:	4b07      	ldr	r3, [pc, #28]	; (8008054 <HW_IPCC_Rx_Handler+0x64>)
 8008038:	2201      	movs	r2, #1
 800803a:	609a      	str	r2, [r3, #8]
  return;
 800803c:	e7e8      	b.n	8008010 <HW_IPCC_Rx_Handler+0x20>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800803e:	4b05      	ldr	r3, [pc, #20]	; (8008054 <HW_IPCC_Rx_Handler+0x64>)
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	f013 0f08 	tst.w	r3, #8
 8008046:	d1e3      	bne.n	8008010 <HW_IPCC_Rx_Handler+0x20>

static void HW_IPCC_TRACES_EvtHandler( void )
{
  HW_IPCC_TRACES_EvtNot();
 8008048:	f7ff f8e0 	bl	800720c <HW_IPCC_TRACES_EvtNot>
 800804c:	4b01      	ldr	r3, [pc, #4]	; (8008054 <HW_IPCC_Rx_Handler+0x64>)
 800804e:	2208      	movs	r2, #8
 8008050:	609a      	str	r2, [r3, #8]
  return;
 8008052:	e7dd      	b.n	8008010 <HW_IPCC_Rx_Handler+0x20>
 8008054:	58000c00 	.word	0x58000c00

08008058 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8008058:	2300      	movs	r3, #0
 800805a:	4a02      	ldr	r2, [pc, #8]	; (8008064 <UTIL_LPM_Init+0xc>)
 800805c:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800805e:	4a02      	ldr	r2, [pc, #8]	; (8008068 <UTIL_LPM_Init+0x10>)
 8008060:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8008062:	4770      	bx	lr
 8008064:	20000378 	.word	0x20000378
 8008068:	20000374 	.word	0x20000374

0800806c <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800806c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008070:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8008072:	b141      	cbz	r1, 8008086 <UTIL_LPM_SetOffMode+0x1a>
 8008074:	2901      	cmp	r1, #1
 8008076:	d103      	bne.n	8008080 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8008078:	4906      	ldr	r1, [pc, #24]	; (8008094 <UTIL_LPM_SetOffMode+0x28>)
 800807a:	680a      	ldr	r2, [r1, #0]
 800807c:	4310      	orrs	r0, r2
 800807e:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008080:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8008084:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8008086:	4903      	ldr	r1, [pc, #12]	; (8008094 <UTIL_LPM_SetOffMode+0x28>)
 8008088:	680a      	ldr	r2, [r1, #0]
 800808a:	ea22 0000 	bic.w	r0, r2, r0
 800808e:	6008      	str	r0, [r1, #0]
      break;
 8008090:	e7f6      	b.n	8008080 <UTIL_LPM_SetOffMode+0x14>
 8008092:	bf00      	nop
 8008094:	20000374 	.word	0x20000374

08008098 <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8008098:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800809a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800809e:	b672      	cpsid	i
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 80080a0:	4a07      	ldr	r2, [pc, #28]	; (80080c0 <UTIL_SEQ_SetTask+0x28>)
 80080a2:	6813      	ldr	r3, [r2, #0]
 80080a4:	4303      	orrs	r3, r0
 80080a6:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80080a8:	4a06      	ldr	r2, [pc, #24]	; (80080c4 <UTIL_SEQ_SetTask+0x2c>)
 80080aa:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 80080ae:	4318      	orrs	r0, r3
 80080b0:	f842 0031 	str.w	r0, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080b4:	f384 8810 	msr	PRIMASK, r4

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 80080b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	20000418 	.word	0x20000418
 80080c4:	20000408 	.word	0x20000408

080080c8 <UTIL_SEQ_PauseTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080c8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80080cc:	b672      	cpsid	i

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskMask &= (~TaskId_bm);
 80080ce:	4a04      	ldr	r2, [pc, #16]	; (80080e0 <UTIL_SEQ_PauseTask+0x18>)
 80080d0:	6813      	ldr	r3, [r2, #0]
 80080d2:	ea23 0000 	bic.w	r0, r3, r0
 80080d6:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080d8:	f381 8810 	msr	PRIMASK, r1

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	20000028 	.word	0x20000028

080080e4 <UTIL_SEQ_ResumeTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080e4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80080e8:	b672      	cpsid	i

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskMask |= TaskId_bm;
 80080ea:	4a03      	ldr	r2, [pc, #12]	; (80080f8 <UTIL_SEQ_ResumeTask+0x14>)
 80080ec:	6813      	ldr	r3, [r2, #0]
 80080ee:	4318      	orrs	r0, r3
 80080f0:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080f2:	f381 8810 	msr	PRIMASK, r1

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 80080f6:	4770      	bx	lr
 80080f8:	20000028 	.word	0x20000028

080080fc <UTIL_SEQ_SetEvt>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080fc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008100:	b672      	cpsid	i

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  EvtSet |= EvtId_bm;
 8008102:	4a03      	ldr	r2, [pc, #12]	; (8008110 <UTIL_SEQ_SetEvt+0x14>)
 8008104:	6813      	ldr	r3, [r2, #0]
 8008106:	4318      	orrs	r0, r3
 8008108:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800810a:	f381 8810 	msr	PRIMASK, r1

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 800810e:	4770      	bx	lr
 8008110:	20000380 	.word	0x20000380

08008114 <UTIL_SEQ_PreIdle>:
{
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8008114:	4770      	bx	lr

08008116 <UTIL_SEQ_PostIdle>:
{
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8008116:	4770      	bx	lr

08008118 <SEQ_BitPosition>:
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  uint8_t n = 0U;

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8008118:	0c03      	lsrs	r3, r0, #16
 800811a:	041b      	lsls	r3, r3, #16
 800811c:	b9ab      	cbnz	r3, 800814a <SEQ_BitPosition+0x32>
 800811e:	0400      	lsls	r0, r0, #16
 8008120:	2310      	movs	r3, #16
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8008122:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008126:	d102      	bne.n	800812e <SEQ_BitPosition+0x16>
 8008128:	3308      	adds	r3, #8
 800812a:	b2db      	uxtb	r3, r3
 800812c:	0200      	lsls	r0, r0, #8
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800812e:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008132:	d102      	bne.n	800813a <SEQ_BitPosition+0x22>
 8008134:	3304      	adds	r3, #4
 8008136:	b2db      	uxtb	r3, r3
 8008138:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[Value >> (32-4)];

  return (uint8_t)(31U-n);
 800813a:	f1c3 031f 	rsb	r3, r3, #31
  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800813e:	0f00      	lsrs	r0, r0, #28
  return (uint8_t)(31U-n);
 8008140:	4a03      	ldr	r2, [pc, #12]	; (8008150 <SEQ_BitPosition+0x38>)
 8008142:	5c10      	ldrb	r0, [r2, r0]
 8008144:	1a18      	subs	r0, r3, r0
}
 8008146:	b2c0      	uxtb	r0, r0
 8008148:	4770      	bx	lr
  uint8_t n = 0U;
 800814a:	2300      	movs	r3, #0
 800814c:	e7e9      	b.n	8008122 <SEQ_BitPosition+0xa>
 800814e:	bf00      	nop
 8008150:	08009fe4 	.word	0x08009fe4

08008154 <UTIL_SEQ_Run>:
{
 8008154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  super_mask_backup = SuperMask;
 8008158:	4b41      	ldr	r3, [pc, #260]	; (8008260 <UTIL_SEQ_Run+0x10c>)
 800815a:	f8d3 8000 	ldr.w	r8, [r3]
  SuperMask &= Mask_bm;
 800815e:	ea08 0400 	and.w	r4, r8, r0
 8008162:	601c      	str	r4, [r3, #0]
  local_taskset = TaskSet;
 8008164:	4b3f      	ldr	r3, [pc, #252]	; (8008264 <UTIL_SEQ_Run+0x110>)
 8008166:	681b      	ldr	r3, [r3, #0]
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8008168:	4a3f      	ldr	r2, [pc, #252]	; (8008268 <UTIL_SEQ_Run+0x114>)
 800816a:	6812      	ldr	r2, [r2, #0]
 800816c:	4013      	ands	r3, r2
 800816e:	4223      	tst	r3, r4
 8008170:	d051      	beq.n	8008216 <UTIL_SEQ_Run+0xc2>
 8008172:	4f3e      	ldr	r7, [pc, #248]	; (800826c <UTIL_SEQ_Run+0x118>)
 8008174:	4e3e      	ldr	r6, [pc, #248]	; (8008270 <UTIL_SEQ_Run+0x11c>)
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8008176:	4d3f      	ldr	r5, [pc, #252]	; (8008274 <UTIL_SEQ_Run+0x120>)
 8008178:	e030      	b.n	80081dc <UTIL_SEQ_Run+0x88>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800817a:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 800817e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8008182:	ea09 0000 	and.w	r0, r9, r0
 8008186:	f7ff ffc7 	bl	8008118 <SEQ_BitPosition>
 800818a:	4a3b      	ldr	r2, [pc, #236]	; (8008278 <UTIL_SEQ_Run+0x124>)
 800818c:	6010      	str	r0, [r2, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800818e:	2301      	movs	r3, #1
 8008190:	fa03 f000 	lsl.w	r0, r3, r0
 8008194:	ea29 0000 	bic.w	r0, r9, r0
 8008198:	6060      	str	r0, [r4, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800819a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800819e:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 80081a0:	6811      	ldr	r1, [r2, #0]
 80081a2:	408b      	lsls	r3, r1
 80081a4:	4c2f      	ldr	r4, [pc, #188]	; (8008264 <UTIL_SEQ_Run+0x110>)
 80081a6:	6821      	ldr	r1, [r4, #0]
 80081a8:	ea21 0103 	bic.w	r1, r1, r3
 80081ac:	6021      	str	r1, [r4, #0]
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80081ae:	68a9      	ldr	r1, [r5, #8]
 80081b0:	ea21 0103 	bic.w	r1, r1, r3
 80081b4:	60a9      	str	r1, [r5, #8]
 80081b6:	6829      	ldr	r1, [r5, #0]
 80081b8:	ea21 0303 	bic.w	r3, r1, r3
 80081bc:	602b      	str	r3, [r5, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081be:	f380 8810 	msr	PRIMASK, r0
    TaskCb[CurrentTaskIdx]( );
 80081c2:	6812      	ldr	r2, [r2, #0]
 80081c4:	4b2d      	ldr	r3, [pc, #180]	; (800827c <UTIL_SEQ_Run+0x128>)
 80081c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ca:	4798      	blx	r3
    local_taskset = TaskSet;
 80081cc:	6822      	ldr	r2, [r4, #0]
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80081ce:	4b26      	ldr	r3, [pc, #152]	; (8008268 <UTIL_SEQ_Run+0x114>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4923      	ldr	r1, [pc, #140]	; (8008260 <UTIL_SEQ_Run+0x10c>)
 80081d4:	680c      	ldr	r4, [r1, #0]
 80081d6:	4013      	ands	r3, r2
 80081d8:	4223      	tst	r3, r4
 80081da:	d01c      	beq.n	8008216 <UTIL_SEQ_Run+0xc2>
 80081dc:	683a      	ldr	r2, [r7, #0]
 80081de:	6833      	ldr	r3, [r6, #0]
 80081e0:	4013      	ands	r3, r2
 80081e2:	d118      	bne.n	8008216 <UTIL_SEQ_Run+0xc2>
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80081e4:	682a      	ldr	r2, [r5, #0]
 80081e6:	4920      	ldr	r1, [pc, #128]	; (8008268 <UTIL_SEQ_Run+0x114>)
 80081e8:	6809      	ldr	r1, [r1, #0]
 80081ea:	4011      	ands	r1, r2
 80081ec:	4221      	tst	r1, r4
 80081ee:	d103      	bne.n	80081f8 <UTIL_SEQ_Run+0xa4>
 80081f0:	68aa      	ldr	r2, [r5, #8]
 80081f2:	4b1d      	ldr	r3, [pc, #116]	; (8008268 <UTIL_SEQ_Run+0x114>)
 80081f4:	681b      	ldr	r3, [r3, #0]
      counter++;
 80081f6:	2301      	movs	r3, #1
    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 80081f8:	491b      	ldr	r1, [pc, #108]	; (8008268 <UTIL_SEQ_Run+0x114>)
 80081fa:	6808      	ldr	r0, [r1, #0]
 80081fc:	4020      	ands	r0, r4
 80081fe:	4010      	ands	r0, r2
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8008200:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8008204:	6852      	ldr	r2, [r2, #4]
 8008206:	4210      	tst	r0, r2
 8008208:	d1b7      	bne.n	800817a <UTIL_SEQ_Run+0x26>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800820a:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800820e:	f04f 31ff 	mov.w	r1, #4294967295
 8008212:	6051      	str	r1, [r2, #4]
 8008214:	e7b1      	b.n	800817a <UTIL_SEQ_Run+0x26>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8008216:	4b18      	ldr	r3, [pc, #96]	; (8008278 <UTIL_SEQ_Run+0x124>)
 8008218:	f04f 32ff 	mov.w	r2, #4294967295
 800821c:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800821e:	f7ff ff79 	bl	8008114 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008222:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008226:	b672      	cpsid	i
  local_taskset = TaskSet;
 8008228:	4b0e      	ldr	r3, [pc, #56]	; (8008264 <UTIL_SEQ_Run+0x110>)
 800822a:	681a      	ldr	r2, [r3, #0]
  if (!(((local_taskset & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800822c:	4b0e      	ldr	r3, [pc, #56]	; (8008268 <UTIL_SEQ_Run+0x114>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4013      	ands	r3, r2
 8008232:	4a0b      	ldr	r2, [pc, #44]	; (8008260 <UTIL_SEQ_Run+0x10c>)
 8008234:	6812      	ldr	r2, [r2, #0]
 8008236:	4213      	tst	r3, r2
 8008238:	d105      	bne.n	8008246 <UTIL_SEQ_Run+0xf2>
 800823a:	4b0c      	ldr	r3, [pc, #48]	; (800826c <UTIL_SEQ_Run+0x118>)
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	4b0c      	ldr	r3, [pc, #48]	; (8008270 <UTIL_SEQ_Run+0x11c>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	421a      	tst	r2, r3
 8008244:	d008      	beq.n	8008258 <UTIL_SEQ_Run+0x104>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008246:	f384 8810 	msr	PRIMASK, r4
  UTIL_SEQ_PostIdle( );
 800824a:	f7ff ff64 	bl	8008116 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 800824e:	4b04      	ldr	r3, [pc, #16]	; (8008260 <UTIL_SEQ_Run+0x10c>)
 8008250:	f8c3 8000 	str.w	r8, [r3]
}
 8008254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	UTIL_SEQ_Idle( );
 8008258:	f7f8 fe06 	bl	8000e68 <UTIL_SEQ_Idle>
 800825c:	e7f3      	b.n	8008246 <UTIL_SEQ_Run+0xf2>
 800825e:	bf00      	nop
 8008260:	20000024 	.word	0x20000024
 8008264:	20000418 	.word	0x20000418
 8008268:	20000028 	.word	0x20000028
 800826c:	20000380 	.word	0x20000380
 8008270:	20000384 	.word	0x20000384
 8008274:	20000408 	.word	0x20000408
 8008278:	2000037c 	.word	0x2000037c
 800827c:	20000388 	.word	0x20000388

08008280 <UTIL_SEQ_WaitEvt>:
{
 8008280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008284:	4601      	mov	r1, r0
  current_task_idx = CurrentTaskIdx;
 8008286:	4b16      	ldr	r3, [pc, #88]	; (80082e0 <UTIL_SEQ_WaitEvt+0x60>)
 8008288:	f8d3 8000 	ldr.w	r8, [r3]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800828c:	f1b8 3fff 	cmp.w	r8, #4294967295
    wait_task_idx = 1 << CurrentTaskIdx;
 8008290:	bf1a      	itte	ne
 8008292:	2401      	movne	r4, #1
 8008294:	fa04 f408 	lslne.w	r4, r4, r8
    wait_task_idx = 0;
 8008298:	2400      	moveq	r4, #0
  event_waited_id_backup = EvtWaited;
 800829a:	4b12      	ldr	r3, [pc, #72]	; (80082e4 <UTIL_SEQ_WaitEvt+0x64>)
 800829c:	681f      	ldr	r7, [r3, #0]
  EvtWaited = EvtId_bm;
 800829e:	6018      	str	r0, [r3, #0]
  while ((EvtSet & EvtWaited) == 0U)
 80082a0:	4b11      	ldr	r3, [pc, #68]	; (80082e8 <UTIL_SEQ_WaitEvt+0x68>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4218      	tst	r0, r3
 80082a6:	d108      	bne.n	80082ba <UTIL_SEQ_WaitEvt+0x3a>
 80082a8:	4e0f      	ldr	r6, [pc, #60]	; (80082e8 <UTIL_SEQ_WaitEvt+0x68>)
 80082aa:	4d0e      	ldr	r5, [pc, #56]	; (80082e4 <UTIL_SEQ_WaitEvt+0x64>)
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 80082ac:	4620      	mov	r0, r4
 80082ae:	f7f8 fddc 	bl	8000e6a <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 80082b2:	6833      	ldr	r3, [r6, #0]
 80082b4:	6829      	ldr	r1, [r5, #0]
 80082b6:	420b      	tst	r3, r1
 80082b8:	d0f8      	beq.n	80082ac <UTIL_SEQ_WaitEvt+0x2c>
  CurrentTaskIdx = current_task_idx;
 80082ba:	4b09      	ldr	r3, [pc, #36]	; (80082e0 <UTIL_SEQ_WaitEvt+0x60>)
 80082bc:	f8c3 8000 	str.w	r8, [r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082c0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80082c4:	b672      	cpsid	i
  EvtSet &= (~EvtWaited);
 80082c6:	4908      	ldr	r1, [pc, #32]	; (80082e8 <UTIL_SEQ_WaitEvt+0x68>)
 80082c8:	680b      	ldr	r3, [r1, #0]
 80082ca:	4a06      	ldr	r2, [pc, #24]	; (80082e4 <UTIL_SEQ_WaitEvt+0x64>)
 80082cc:	6814      	ldr	r4, [r2, #0]
 80082ce:	ea23 0304 	bic.w	r3, r3, r4
 80082d2:	600b      	str	r3, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082d4:	f380 8810 	msr	PRIMASK, r0
  EvtWaited = event_waited_id_backup;
 80082d8:	6017      	str	r7, [r2, #0]
}
 80082da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082de:	bf00      	nop
 80082e0:	2000037c 	.word	0x2000037c
 80082e4:	20000384 	.word	0x20000384
 80082e8:	20000380 	.word	0x20000380

080082ec <UTIL_SEQ_RegTask>:
{
 80082ec:	b538      	push	{r3, r4, r5, lr}
 80082ee:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082f0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80082f4:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80082f6:	f7ff ff0f 	bl	8008118 <SEQ_BitPosition>
 80082fa:	4b03      	ldr	r3, [pc, #12]	; (8008308 <UTIL_SEQ_RegTask+0x1c>)
 80082fc:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008300:	f385 8810 	msr	PRIMASK, r5
}
 8008304:	bd38      	pop	{r3, r4, r5, pc}
 8008306:	bf00      	nop
 8008308:	20000388 	.word	0x20000388

0800830c <__errno>:
 800830c:	4b01      	ldr	r3, [pc, #4]	; (8008314 <__errno+0x8>)
 800830e:	6818      	ldr	r0, [r3, #0]
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	2000002c 	.word	0x2000002c

08008318 <__libc_init_array>:
 8008318:	b570      	push	{r4, r5, r6, lr}
 800831a:	4d0d      	ldr	r5, [pc, #52]	; (8008350 <__libc_init_array+0x38>)
 800831c:	4c0d      	ldr	r4, [pc, #52]	; (8008354 <__libc_init_array+0x3c>)
 800831e:	1b64      	subs	r4, r4, r5
 8008320:	10a4      	asrs	r4, r4, #2
 8008322:	2600      	movs	r6, #0
 8008324:	42a6      	cmp	r6, r4
 8008326:	d109      	bne.n	800833c <__libc_init_array+0x24>
 8008328:	4d0b      	ldr	r5, [pc, #44]	; (8008358 <__libc_init_array+0x40>)
 800832a:	4c0c      	ldr	r4, [pc, #48]	; (800835c <__libc_init_array+0x44>)
 800832c:	f001 f81a 	bl	8009364 <_init>
 8008330:	1b64      	subs	r4, r4, r5
 8008332:	10a4      	asrs	r4, r4, #2
 8008334:	2600      	movs	r6, #0
 8008336:	42a6      	cmp	r6, r4
 8008338:	d105      	bne.n	8008346 <__libc_init_array+0x2e>
 800833a:	bd70      	pop	{r4, r5, r6, pc}
 800833c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008340:	4798      	blx	r3
 8008342:	3601      	adds	r6, #1
 8008344:	e7ee      	b.n	8008324 <__libc_init_array+0xc>
 8008346:	f855 3b04 	ldr.w	r3, [r5], #4
 800834a:	4798      	blx	r3
 800834c:	3601      	adds	r6, #1
 800834e:	e7f2      	b.n	8008336 <__libc_init_array+0x1e>
 8008350:	0800a094 	.word	0x0800a094
 8008354:	0800a094 	.word	0x0800a094
 8008358:	0800a094 	.word	0x0800a094
 800835c:	0800a098 	.word	0x0800a098

08008360 <memcpy>:
 8008360:	440a      	add	r2, r1
 8008362:	4291      	cmp	r1, r2
 8008364:	f100 33ff 	add.w	r3, r0, #4294967295
 8008368:	d100      	bne.n	800836c <memcpy+0xc>
 800836a:	4770      	bx	lr
 800836c:	b510      	push	{r4, lr}
 800836e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008372:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008376:	4291      	cmp	r1, r2
 8008378:	d1f9      	bne.n	800836e <memcpy+0xe>
 800837a:	bd10      	pop	{r4, pc}

0800837c <memset>:
 800837c:	4402      	add	r2, r0
 800837e:	4603      	mov	r3, r0
 8008380:	4293      	cmp	r3, r2
 8008382:	d100      	bne.n	8008386 <memset+0xa>
 8008384:	4770      	bx	lr
 8008386:	f803 1b01 	strb.w	r1, [r3], #1
 800838a:	e7f9      	b.n	8008380 <memset+0x4>

0800838c <iprintf>:
 800838c:	b40f      	push	{r0, r1, r2, r3}
 800838e:	4b0a      	ldr	r3, [pc, #40]	; (80083b8 <iprintf+0x2c>)
 8008390:	b513      	push	{r0, r1, r4, lr}
 8008392:	681c      	ldr	r4, [r3, #0]
 8008394:	b124      	cbz	r4, 80083a0 <iprintf+0x14>
 8008396:	69a3      	ldr	r3, [r4, #24]
 8008398:	b913      	cbnz	r3, 80083a0 <iprintf+0x14>
 800839a:	4620      	mov	r0, r4
 800839c:	f000 fa72 	bl	8008884 <__sinit>
 80083a0:	ab05      	add	r3, sp, #20
 80083a2:	9a04      	ldr	r2, [sp, #16]
 80083a4:	68a1      	ldr	r1, [r4, #8]
 80083a6:	9301      	str	r3, [sp, #4]
 80083a8:	4620      	mov	r0, r4
 80083aa:	f000 fc43 	bl	8008c34 <_vfiprintf_r>
 80083ae:	b002      	add	sp, #8
 80083b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083b4:	b004      	add	sp, #16
 80083b6:	4770      	bx	lr
 80083b8:	2000002c 	.word	0x2000002c

080083bc <_puts_r>:
 80083bc:	b570      	push	{r4, r5, r6, lr}
 80083be:	460e      	mov	r6, r1
 80083c0:	4605      	mov	r5, r0
 80083c2:	b118      	cbz	r0, 80083cc <_puts_r+0x10>
 80083c4:	6983      	ldr	r3, [r0, #24]
 80083c6:	b90b      	cbnz	r3, 80083cc <_puts_r+0x10>
 80083c8:	f000 fa5c 	bl	8008884 <__sinit>
 80083cc:	69ab      	ldr	r3, [r5, #24]
 80083ce:	68ac      	ldr	r4, [r5, #8]
 80083d0:	b913      	cbnz	r3, 80083d8 <_puts_r+0x1c>
 80083d2:	4628      	mov	r0, r5
 80083d4:	f000 fa56 	bl	8008884 <__sinit>
 80083d8:	4b2c      	ldr	r3, [pc, #176]	; (800848c <_puts_r+0xd0>)
 80083da:	429c      	cmp	r4, r3
 80083dc:	d120      	bne.n	8008420 <_puts_r+0x64>
 80083de:	686c      	ldr	r4, [r5, #4]
 80083e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083e2:	07db      	lsls	r3, r3, #31
 80083e4:	d405      	bmi.n	80083f2 <_puts_r+0x36>
 80083e6:	89a3      	ldrh	r3, [r4, #12]
 80083e8:	0598      	lsls	r0, r3, #22
 80083ea:	d402      	bmi.n	80083f2 <_puts_r+0x36>
 80083ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083ee:	f000 fae7 	bl	80089c0 <__retarget_lock_acquire_recursive>
 80083f2:	89a3      	ldrh	r3, [r4, #12]
 80083f4:	0719      	lsls	r1, r3, #28
 80083f6:	d51d      	bpl.n	8008434 <_puts_r+0x78>
 80083f8:	6923      	ldr	r3, [r4, #16]
 80083fa:	b1db      	cbz	r3, 8008434 <_puts_r+0x78>
 80083fc:	3e01      	subs	r6, #1
 80083fe:	68a3      	ldr	r3, [r4, #8]
 8008400:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008404:	3b01      	subs	r3, #1
 8008406:	60a3      	str	r3, [r4, #8]
 8008408:	bb39      	cbnz	r1, 800845a <_puts_r+0x9e>
 800840a:	2b00      	cmp	r3, #0
 800840c:	da38      	bge.n	8008480 <_puts_r+0xc4>
 800840e:	4622      	mov	r2, r4
 8008410:	210a      	movs	r1, #10
 8008412:	4628      	mov	r0, r5
 8008414:	f000 f85c 	bl	80084d0 <__swbuf_r>
 8008418:	3001      	adds	r0, #1
 800841a:	d011      	beq.n	8008440 <_puts_r+0x84>
 800841c:	250a      	movs	r5, #10
 800841e:	e011      	b.n	8008444 <_puts_r+0x88>
 8008420:	4b1b      	ldr	r3, [pc, #108]	; (8008490 <_puts_r+0xd4>)
 8008422:	429c      	cmp	r4, r3
 8008424:	d101      	bne.n	800842a <_puts_r+0x6e>
 8008426:	68ac      	ldr	r4, [r5, #8]
 8008428:	e7da      	b.n	80083e0 <_puts_r+0x24>
 800842a:	4b1a      	ldr	r3, [pc, #104]	; (8008494 <_puts_r+0xd8>)
 800842c:	429c      	cmp	r4, r3
 800842e:	bf08      	it	eq
 8008430:	68ec      	ldreq	r4, [r5, #12]
 8008432:	e7d5      	b.n	80083e0 <_puts_r+0x24>
 8008434:	4621      	mov	r1, r4
 8008436:	4628      	mov	r0, r5
 8008438:	f000 f89c 	bl	8008574 <__swsetup_r>
 800843c:	2800      	cmp	r0, #0
 800843e:	d0dd      	beq.n	80083fc <_puts_r+0x40>
 8008440:	f04f 35ff 	mov.w	r5, #4294967295
 8008444:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008446:	07da      	lsls	r2, r3, #31
 8008448:	d405      	bmi.n	8008456 <_puts_r+0x9a>
 800844a:	89a3      	ldrh	r3, [r4, #12]
 800844c:	059b      	lsls	r3, r3, #22
 800844e:	d402      	bmi.n	8008456 <_puts_r+0x9a>
 8008450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008452:	f000 fab6 	bl	80089c2 <__retarget_lock_release_recursive>
 8008456:	4628      	mov	r0, r5
 8008458:	bd70      	pop	{r4, r5, r6, pc}
 800845a:	2b00      	cmp	r3, #0
 800845c:	da04      	bge.n	8008468 <_puts_r+0xac>
 800845e:	69a2      	ldr	r2, [r4, #24]
 8008460:	429a      	cmp	r2, r3
 8008462:	dc06      	bgt.n	8008472 <_puts_r+0xb6>
 8008464:	290a      	cmp	r1, #10
 8008466:	d004      	beq.n	8008472 <_puts_r+0xb6>
 8008468:	6823      	ldr	r3, [r4, #0]
 800846a:	1c5a      	adds	r2, r3, #1
 800846c:	6022      	str	r2, [r4, #0]
 800846e:	7019      	strb	r1, [r3, #0]
 8008470:	e7c5      	b.n	80083fe <_puts_r+0x42>
 8008472:	4622      	mov	r2, r4
 8008474:	4628      	mov	r0, r5
 8008476:	f000 f82b 	bl	80084d0 <__swbuf_r>
 800847a:	3001      	adds	r0, #1
 800847c:	d1bf      	bne.n	80083fe <_puts_r+0x42>
 800847e:	e7df      	b.n	8008440 <_puts_r+0x84>
 8008480:	6823      	ldr	r3, [r4, #0]
 8008482:	250a      	movs	r5, #10
 8008484:	1c5a      	adds	r2, r3, #1
 8008486:	6022      	str	r2, [r4, #0]
 8008488:	701d      	strb	r5, [r3, #0]
 800848a:	e7db      	b.n	8008444 <_puts_r+0x88>
 800848c:	0800a018 	.word	0x0800a018
 8008490:	0800a038 	.word	0x0800a038
 8008494:	08009ff8 	.word	0x08009ff8

08008498 <puts>:
 8008498:	4b02      	ldr	r3, [pc, #8]	; (80084a4 <puts+0xc>)
 800849a:	4601      	mov	r1, r0
 800849c:	6818      	ldr	r0, [r3, #0]
 800849e:	f7ff bf8d 	b.w	80083bc <_puts_r>
 80084a2:	bf00      	nop
 80084a4:	2000002c 	.word	0x2000002c

080084a8 <strrchr>:
 80084a8:	b538      	push	{r3, r4, r5, lr}
 80084aa:	4603      	mov	r3, r0
 80084ac:	460c      	mov	r4, r1
 80084ae:	b969      	cbnz	r1, 80084cc <strrchr+0x24>
 80084b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084b4:	f000 bed5 	b.w	8009262 <strchr>
 80084b8:	1c43      	adds	r3, r0, #1
 80084ba:	4605      	mov	r5, r0
 80084bc:	4621      	mov	r1, r4
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 fecf 	bl	8009262 <strchr>
 80084c4:	2800      	cmp	r0, #0
 80084c6:	d1f7      	bne.n	80084b8 <strrchr+0x10>
 80084c8:	4628      	mov	r0, r5
 80084ca:	bd38      	pop	{r3, r4, r5, pc}
 80084cc:	2500      	movs	r5, #0
 80084ce:	e7f5      	b.n	80084bc <strrchr+0x14>

080084d0 <__swbuf_r>:
 80084d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d2:	460e      	mov	r6, r1
 80084d4:	4614      	mov	r4, r2
 80084d6:	4605      	mov	r5, r0
 80084d8:	b118      	cbz	r0, 80084e2 <__swbuf_r+0x12>
 80084da:	6983      	ldr	r3, [r0, #24]
 80084dc:	b90b      	cbnz	r3, 80084e2 <__swbuf_r+0x12>
 80084de:	f000 f9d1 	bl	8008884 <__sinit>
 80084e2:	4b21      	ldr	r3, [pc, #132]	; (8008568 <__swbuf_r+0x98>)
 80084e4:	429c      	cmp	r4, r3
 80084e6:	d12b      	bne.n	8008540 <__swbuf_r+0x70>
 80084e8:	686c      	ldr	r4, [r5, #4]
 80084ea:	69a3      	ldr	r3, [r4, #24]
 80084ec:	60a3      	str	r3, [r4, #8]
 80084ee:	89a3      	ldrh	r3, [r4, #12]
 80084f0:	071a      	lsls	r2, r3, #28
 80084f2:	d52f      	bpl.n	8008554 <__swbuf_r+0x84>
 80084f4:	6923      	ldr	r3, [r4, #16]
 80084f6:	b36b      	cbz	r3, 8008554 <__swbuf_r+0x84>
 80084f8:	6923      	ldr	r3, [r4, #16]
 80084fa:	6820      	ldr	r0, [r4, #0]
 80084fc:	1ac0      	subs	r0, r0, r3
 80084fe:	6963      	ldr	r3, [r4, #20]
 8008500:	b2f6      	uxtb	r6, r6
 8008502:	4283      	cmp	r3, r0
 8008504:	4637      	mov	r7, r6
 8008506:	dc04      	bgt.n	8008512 <__swbuf_r+0x42>
 8008508:	4621      	mov	r1, r4
 800850a:	4628      	mov	r0, r5
 800850c:	f000 f926 	bl	800875c <_fflush_r>
 8008510:	bb30      	cbnz	r0, 8008560 <__swbuf_r+0x90>
 8008512:	68a3      	ldr	r3, [r4, #8]
 8008514:	3b01      	subs	r3, #1
 8008516:	60a3      	str	r3, [r4, #8]
 8008518:	6823      	ldr	r3, [r4, #0]
 800851a:	1c5a      	adds	r2, r3, #1
 800851c:	6022      	str	r2, [r4, #0]
 800851e:	701e      	strb	r6, [r3, #0]
 8008520:	6963      	ldr	r3, [r4, #20]
 8008522:	3001      	adds	r0, #1
 8008524:	4283      	cmp	r3, r0
 8008526:	d004      	beq.n	8008532 <__swbuf_r+0x62>
 8008528:	89a3      	ldrh	r3, [r4, #12]
 800852a:	07db      	lsls	r3, r3, #31
 800852c:	d506      	bpl.n	800853c <__swbuf_r+0x6c>
 800852e:	2e0a      	cmp	r6, #10
 8008530:	d104      	bne.n	800853c <__swbuf_r+0x6c>
 8008532:	4621      	mov	r1, r4
 8008534:	4628      	mov	r0, r5
 8008536:	f000 f911 	bl	800875c <_fflush_r>
 800853a:	b988      	cbnz	r0, 8008560 <__swbuf_r+0x90>
 800853c:	4638      	mov	r0, r7
 800853e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008540:	4b0a      	ldr	r3, [pc, #40]	; (800856c <__swbuf_r+0x9c>)
 8008542:	429c      	cmp	r4, r3
 8008544:	d101      	bne.n	800854a <__swbuf_r+0x7a>
 8008546:	68ac      	ldr	r4, [r5, #8]
 8008548:	e7cf      	b.n	80084ea <__swbuf_r+0x1a>
 800854a:	4b09      	ldr	r3, [pc, #36]	; (8008570 <__swbuf_r+0xa0>)
 800854c:	429c      	cmp	r4, r3
 800854e:	bf08      	it	eq
 8008550:	68ec      	ldreq	r4, [r5, #12]
 8008552:	e7ca      	b.n	80084ea <__swbuf_r+0x1a>
 8008554:	4621      	mov	r1, r4
 8008556:	4628      	mov	r0, r5
 8008558:	f000 f80c 	bl	8008574 <__swsetup_r>
 800855c:	2800      	cmp	r0, #0
 800855e:	d0cb      	beq.n	80084f8 <__swbuf_r+0x28>
 8008560:	f04f 37ff 	mov.w	r7, #4294967295
 8008564:	e7ea      	b.n	800853c <__swbuf_r+0x6c>
 8008566:	bf00      	nop
 8008568:	0800a018 	.word	0x0800a018
 800856c:	0800a038 	.word	0x0800a038
 8008570:	08009ff8 	.word	0x08009ff8

08008574 <__swsetup_r>:
 8008574:	4b32      	ldr	r3, [pc, #200]	; (8008640 <__swsetup_r+0xcc>)
 8008576:	b570      	push	{r4, r5, r6, lr}
 8008578:	681d      	ldr	r5, [r3, #0]
 800857a:	4606      	mov	r6, r0
 800857c:	460c      	mov	r4, r1
 800857e:	b125      	cbz	r5, 800858a <__swsetup_r+0x16>
 8008580:	69ab      	ldr	r3, [r5, #24]
 8008582:	b913      	cbnz	r3, 800858a <__swsetup_r+0x16>
 8008584:	4628      	mov	r0, r5
 8008586:	f000 f97d 	bl	8008884 <__sinit>
 800858a:	4b2e      	ldr	r3, [pc, #184]	; (8008644 <__swsetup_r+0xd0>)
 800858c:	429c      	cmp	r4, r3
 800858e:	d10f      	bne.n	80085b0 <__swsetup_r+0x3c>
 8008590:	686c      	ldr	r4, [r5, #4]
 8008592:	89a3      	ldrh	r3, [r4, #12]
 8008594:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008598:	0719      	lsls	r1, r3, #28
 800859a:	d42c      	bmi.n	80085f6 <__swsetup_r+0x82>
 800859c:	06dd      	lsls	r5, r3, #27
 800859e:	d411      	bmi.n	80085c4 <__swsetup_r+0x50>
 80085a0:	2309      	movs	r3, #9
 80085a2:	6033      	str	r3, [r6, #0]
 80085a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80085a8:	81a3      	strh	r3, [r4, #12]
 80085aa:	f04f 30ff 	mov.w	r0, #4294967295
 80085ae:	e03e      	b.n	800862e <__swsetup_r+0xba>
 80085b0:	4b25      	ldr	r3, [pc, #148]	; (8008648 <__swsetup_r+0xd4>)
 80085b2:	429c      	cmp	r4, r3
 80085b4:	d101      	bne.n	80085ba <__swsetup_r+0x46>
 80085b6:	68ac      	ldr	r4, [r5, #8]
 80085b8:	e7eb      	b.n	8008592 <__swsetup_r+0x1e>
 80085ba:	4b24      	ldr	r3, [pc, #144]	; (800864c <__swsetup_r+0xd8>)
 80085bc:	429c      	cmp	r4, r3
 80085be:	bf08      	it	eq
 80085c0:	68ec      	ldreq	r4, [r5, #12]
 80085c2:	e7e6      	b.n	8008592 <__swsetup_r+0x1e>
 80085c4:	0758      	lsls	r0, r3, #29
 80085c6:	d512      	bpl.n	80085ee <__swsetup_r+0x7a>
 80085c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085ca:	b141      	cbz	r1, 80085de <__swsetup_r+0x6a>
 80085cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085d0:	4299      	cmp	r1, r3
 80085d2:	d002      	beq.n	80085da <__swsetup_r+0x66>
 80085d4:	4630      	mov	r0, r6
 80085d6:	f000 fa59 	bl	8008a8c <_free_r>
 80085da:	2300      	movs	r3, #0
 80085dc:	6363      	str	r3, [r4, #52]	; 0x34
 80085de:	89a3      	ldrh	r3, [r4, #12]
 80085e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80085e4:	81a3      	strh	r3, [r4, #12]
 80085e6:	2300      	movs	r3, #0
 80085e8:	6063      	str	r3, [r4, #4]
 80085ea:	6923      	ldr	r3, [r4, #16]
 80085ec:	6023      	str	r3, [r4, #0]
 80085ee:	89a3      	ldrh	r3, [r4, #12]
 80085f0:	f043 0308 	orr.w	r3, r3, #8
 80085f4:	81a3      	strh	r3, [r4, #12]
 80085f6:	6923      	ldr	r3, [r4, #16]
 80085f8:	b94b      	cbnz	r3, 800860e <__swsetup_r+0x9a>
 80085fa:	89a3      	ldrh	r3, [r4, #12]
 80085fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008604:	d003      	beq.n	800860e <__swsetup_r+0x9a>
 8008606:	4621      	mov	r1, r4
 8008608:	4630      	mov	r0, r6
 800860a:	f000 f9ff 	bl	8008a0c <__smakebuf_r>
 800860e:	89a0      	ldrh	r0, [r4, #12]
 8008610:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008614:	f010 0301 	ands.w	r3, r0, #1
 8008618:	d00a      	beq.n	8008630 <__swsetup_r+0xbc>
 800861a:	2300      	movs	r3, #0
 800861c:	60a3      	str	r3, [r4, #8]
 800861e:	6963      	ldr	r3, [r4, #20]
 8008620:	425b      	negs	r3, r3
 8008622:	61a3      	str	r3, [r4, #24]
 8008624:	6923      	ldr	r3, [r4, #16]
 8008626:	b943      	cbnz	r3, 800863a <__swsetup_r+0xc6>
 8008628:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800862c:	d1ba      	bne.n	80085a4 <__swsetup_r+0x30>
 800862e:	bd70      	pop	{r4, r5, r6, pc}
 8008630:	0781      	lsls	r1, r0, #30
 8008632:	bf58      	it	pl
 8008634:	6963      	ldrpl	r3, [r4, #20]
 8008636:	60a3      	str	r3, [r4, #8]
 8008638:	e7f4      	b.n	8008624 <__swsetup_r+0xb0>
 800863a:	2000      	movs	r0, #0
 800863c:	e7f7      	b.n	800862e <__swsetup_r+0xba>
 800863e:	bf00      	nop
 8008640:	2000002c 	.word	0x2000002c
 8008644:	0800a018 	.word	0x0800a018
 8008648:	0800a038 	.word	0x0800a038
 800864c:	08009ff8 	.word	0x08009ff8

08008650 <__sflush_r>:
 8008650:	898a      	ldrh	r2, [r1, #12]
 8008652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008656:	4605      	mov	r5, r0
 8008658:	0710      	lsls	r0, r2, #28
 800865a:	460c      	mov	r4, r1
 800865c:	d458      	bmi.n	8008710 <__sflush_r+0xc0>
 800865e:	684b      	ldr	r3, [r1, #4]
 8008660:	2b00      	cmp	r3, #0
 8008662:	dc05      	bgt.n	8008670 <__sflush_r+0x20>
 8008664:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008666:	2b00      	cmp	r3, #0
 8008668:	dc02      	bgt.n	8008670 <__sflush_r+0x20>
 800866a:	2000      	movs	r0, #0
 800866c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008670:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008672:	2e00      	cmp	r6, #0
 8008674:	d0f9      	beq.n	800866a <__sflush_r+0x1a>
 8008676:	2300      	movs	r3, #0
 8008678:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800867c:	682f      	ldr	r7, [r5, #0]
 800867e:	602b      	str	r3, [r5, #0]
 8008680:	d032      	beq.n	80086e8 <__sflush_r+0x98>
 8008682:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008684:	89a3      	ldrh	r3, [r4, #12]
 8008686:	075a      	lsls	r2, r3, #29
 8008688:	d505      	bpl.n	8008696 <__sflush_r+0x46>
 800868a:	6863      	ldr	r3, [r4, #4]
 800868c:	1ac0      	subs	r0, r0, r3
 800868e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008690:	b10b      	cbz	r3, 8008696 <__sflush_r+0x46>
 8008692:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008694:	1ac0      	subs	r0, r0, r3
 8008696:	2300      	movs	r3, #0
 8008698:	4602      	mov	r2, r0
 800869a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800869c:	6a21      	ldr	r1, [r4, #32]
 800869e:	4628      	mov	r0, r5
 80086a0:	47b0      	blx	r6
 80086a2:	1c43      	adds	r3, r0, #1
 80086a4:	89a3      	ldrh	r3, [r4, #12]
 80086a6:	d106      	bne.n	80086b6 <__sflush_r+0x66>
 80086a8:	6829      	ldr	r1, [r5, #0]
 80086aa:	291d      	cmp	r1, #29
 80086ac:	d82c      	bhi.n	8008708 <__sflush_r+0xb8>
 80086ae:	4a2a      	ldr	r2, [pc, #168]	; (8008758 <__sflush_r+0x108>)
 80086b0:	40ca      	lsrs	r2, r1
 80086b2:	07d6      	lsls	r6, r2, #31
 80086b4:	d528      	bpl.n	8008708 <__sflush_r+0xb8>
 80086b6:	2200      	movs	r2, #0
 80086b8:	6062      	str	r2, [r4, #4]
 80086ba:	04d9      	lsls	r1, r3, #19
 80086bc:	6922      	ldr	r2, [r4, #16]
 80086be:	6022      	str	r2, [r4, #0]
 80086c0:	d504      	bpl.n	80086cc <__sflush_r+0x7c>
 80086c2:	1c42      	adds	r2, r0, #1
 80086c4:	d101      	bne.n	80086ca <__sflush_r+0x7a>
 80086c6:	682b      	ldr	r3, [r5, #0]
 80086c8:	b903      	cbnz	r3, 80086cc <__sflush_r+0x7c>
 80086ca:	6560      	str	r0, [r4, #84]	; 0x54
 80086cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086ce:	602f      	str	r7, [r5, #0]
 80086d0:	2900      	cmp	r1, #0
 80086d2:	d0ca      	beq.n	800866a <__sflush_r+0x1a>
 80086d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086d8:	4299      	cmp	r1, r3
 80086da:	d002      	beq.n	80086e2 <__sflush_r+0x92>
 80086dc:	4628      	mov	r0, r5
 80086de:	f000 f9d5 	bl	8008a8c <_free_r>
 80086e2:	2000      	movs	r0, #0
 80086e4:	6360      	str	r0, [r4, #52]	; 0x34
 80086e6:	e7c1      	b.n	800866c <__sflush_r+0x1c>
 80086e8:	6a21      	ldr	r1, [r4, #32]
 80086ea:	2301      	movs	r3, #1
 80086ec:	4628      	mov	r0, r5
 80086ee:	47b0      	blx	r6
 80086f0:	1c41      	adds	r1, r0, #1
 80086f2:	d1c7      	bne.n	8008684 <__sflush_r+0x34>
 80086f4:	682b      	ldr	r3, [r5, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d0c4      	beq.n	8008684 <__sflush_r+0x34>
 80086fa:	2b1d      	cmp	r3, #29
 80086fc:	d001      	beq.n	8008702 <__sflush_r+0xb2>
 80086fe:	2b16      	cmp	r3, #22
 8008700:	d101      	bne.n	8008706 <__sflush_r+0xb6>
 8008702:	602f      	str	r7, [r5, #0]
 8008704:	e7b1      	b.n	800866a <__sflush_r+0x1a>
 8008706:	89a3      	ldrh	r3, [r4, #12]
 8008708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800870c:	81a3      	strh	r3, [r4, #12]
 800870e:	e7ad      	b.n	800866c <__sflush_r+0x1c>
 8008710:	690f      	ldr	r7, [r1, #16]
 8008712:	2f00      	cmp	r7, #0
 8008714:	d0a9      	beq.n	800866a <__sflush_r+0x1a>
 8008716:	0793      	lsls	r3, r2, #30
 8008718:	680e      	ldr	r6, [r1, #0]
 800871a:	bf08      	it	eq
 800871c:	694b      	ldreq	r3, [r1, #20]
 800871e:	600f      	str	r7, [r1, #0]
 8008720:	bf18      	it	ne
 8008722:	2300      	movne	r3, #0
 8008724:	eba6 0807 	sub.w	r8, r6, r7
 8008728:	608b      	str	r3, [r1, #8]
 800872a:	f1b8 0f00 	cmp.w	r8, #0
 800872e:	dd9c      	ble.n	800866a <__sflush_r+0x1a>
 8008730:	6a21      	ldr	r1, [r4, #32]
 8008732:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008734:	4643      	mov	r3, r8
 8008736:	463a      	mov	r2, r7
 8008738:	4628      	mov	r0, r5
 800873a:	47b0      	blx	r6
 800873c:	2800      	cmp	r0, #0
 800873e:	dc06      	bgt.n	800874e <__sflush_r+0xfe>
 8008740:	89a3      	ldrh	r3, [r4, #12]
 8008742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008746:	81a3      	strh	r3, [r4, #12]
 8008748:	f04f 30ff 	mov.w	r0, #4294967295
 800874c:	e78e      	b.n	800866c <__sflush_r+0x1c>
 800874e:	4407      	add	r7, r0
 8008750:	eba8 0800 	sub.w	r8, r8, r0
 8008754:	e7e9      	b.n	800872a <__sflush_r+0xda>
 8008756:	bf00      	nop
 8008758:	20400001 	.word	0x20400001

0800875c <_fflush_r>:
 800875c:	b538      	push	{r3, r4, r5, lr}
 800875e:	690b      	ldr	r3, [r1, #16]
 8008760:	4605      	mov	r5, r0
 8008762:	460c      	mov	r4, r1
 8008764:	b913      	cbnz	r3, 800876c <_fflush_r+0x10>
 8008766:	2500      	movs	r5, #0
 8008768:	4628      	mov	r0, r5
 800876a:	bd38      	pop	{r3, r4, r5, pc}
 800876c:	b118      	cbz	r0, 8008776 <_fflush_r+0x1a>
 800876e:	6983      	ldr	r3, [r0, #24]
 8008770:	b90b      	cbnz	r3, 8008776 <_fflush_r+0x1a>
 8008772:	f000 f887 	bl	8008884 <__sinit>
 8008776:	4b14      	ldr	r3, [pc, #80]	; (80087c8 <_fflush_r+0x6c>)
 8008778:	429c      	cmp	r4, r3
 800877a:	d11b      	bne.n	80087b4 <_fflush_r+0x58>
 800877c:	686c      	ldr	r4, [r5, #4]
 800877e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d0ef      	beq.n	8008766 <_fflush_r+0xa>
 8008786:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008788:	07d0      	lsls	r0, r2, #31
 800878a:	d404      	bmi.n	8008796 <_fflush_r+0x3a>
 800878c:	0599      	lsls	r1, r3, #22
 800878e:	d402      	bmi.n	8008796 <_fflush_r+0x3a>
 8008790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008792:	f000 f915 	bl	80089c0 <__retarget_lock_acquire_recursive>
 8008796:	4628      	mov	r0, r5
 8008798:	4621      	mov	r1, r4
 800879a:	f7ff ff59 	bl	8008650 <__sflush_r>
 800879e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087a0:	07da      	lsls	r2, r3, #31
 80087a2:	4605      	mov	r5, r0
 80087a4:	d4e0      	bmi.n	8008768 <_fflush_r+0xc>
 80087a6:	89a3      	ldrh	r3, [r4, #12]
 80087a8:	059b      	lsls	r3, r3, #22
 80087aa:	d4dd      	bmi.n	8008768 <_fflush_r+0xc>
 80087ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087ae:	f000 f908 	bl	80089c2 <__retarget_lock_release_recursive>
 80087b2:	e7d9      	b.n	8008768 <_fflush_r+0xc>
 80087b4:	4b05      	ldr	r3, [pc, #20]	; (80087cc <_fflush_r+0x70>)
 80087b6:	429c      	cmp	r4, r3
 80087b8:	d101      	bne.n	80087be <_fflush_r+0x62>
 80087ba:	68ac      	ldr	r4, [r5, #8]
 80087bc:	e7df      	b.n	800877e <_fflush_r+0x22>
 80087be:	4b04      	ldr	r3, [pc, #16]	; (80087d0 <_fflush_r+0x74>)
 80087c0:	429c      	cmp	r4, r3
 80087c2:	bf08      	it	eq
 80087c4:	68ec      	ldreq	r4, [r5, #12]
 80087c6:	e7da      	b.n	800877e <_fflush_r+0x22>
 80087c8:	0800a018 	.word	0x0800a018
 80087cc:	0800a038 	.word	0x0800a038
 80087d0:	08009ff8 	.word	0x08009ff8

080087d4 <std>:
 80087d4:	2300      	movs	r3, #0
 80087d6:	b510      	push	{r4, lr}
 80087d8:	4604      	mov	r4, r0
 80087da:	e9c0 3300 	strd	r3, r3, [r0]
 80087de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087e2:	6083      	str	r3, [r0, #8]
 80087e4:	8181      	strh	r1, [r0, #12]
 80087e6:	6643      	str	r3, [r0, #100]	; 0x64
 80087e8:	81c2      	strh	r2, [r0, #14]
 80087ea:	6183      	str	r3, [r0, #24]
 80087ec:	4619      	mov	r1, r3
 80087ee:	2208      	movs	r2, #8
 80087f0:	305c      	adds	r0, #92	; 0x5c
 80087f2:	f7ff fdc3 	bl	800837c <memset>
 80087f6:	4b05      	ldr	r3, [pc, #20]	; (800880c <std+0x38>)
 80087f8:	6263      	str	r3, [r4, #36]	; 0x24
 80087fa:	4b05      	ldr	r3, [pc, #20]	; (8008810 <std+0x3c>)
 80087fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80087fe:	4b05      	ldr	r3, [pc, #20]	; (8008814 <std+0x40>)
 8008800:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008802:	4b05      	ldr	r3, [pc, #20]	; (8008818 <std+0x44>)
 8008804:	6224      	str	r4, [r4, #32]
 8008806:	6323      	str	r3, [r4, #48]	; 0x30
 8008808:	bd10      	pop	{r4, pc}
 800880a:	bf00      	nop
 800880c:	080091dd 	.word	0x080091dd
 8008810:	080091ff 	.word	0x080091ff
 8008814:	08009237 	.word	0x08009237
 8008818:	0800925b 	.word	0x0800925b

0800881c <_cleanup_r>:
 800881c:	4901      	ldr	r1, [pc, #4]	; (8008824 <_cleanup_r+0x8>)
 800881e:	f000 b8af 	b.w	8008980 <_fwalk_reent>
 8008822:	bf00      	nop
 8008824:	0800875d 	.word	0x0800875d

08008828 <__sfmoreglue>:
 8008828:	b570      	push	{r4, r5, r6, lr}
 800882a:	1e4a      	subs	r2, r1, #1
 800882c:	2568      	movs	r5, #104	; 0x68
 800882e:	4355      	muls	r5, r2
 8008830:	460e      	mov	r6, r1
 8008832:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008836:	f000 f979 	bl	8008b2c <_malloc_r>
 800883a:	4604      	mov	r4, r0
 800883c:	b140      	cbz	r0, 8008850 <__sfmoreglue+0x28>
 800883e:	2100      	movs	r1, #0
 8008840:	e9c0 1600 	strd	r1, r6, [r0]
 8008844:	300c      	adds	r0, #12
 8008846:	60a0      	str	r0, [r4, #8]
 8008848:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800884c:	f7ff fd96 	bl	800837c <memset>
 8008850:	4620      	mov	r0, r4
 8008852:	bd70      	pop	{r4, r5, r6, pc}

08008854 <__sfp_lock_acquire>:
 8008854:	4801      	ldr	r0, [pc, #4]	; (800885c <__sfp_lock_acquire+0x8>)
 8008856:	f000 b8b3 	b.w	80089c0 <__retarget_lock_acquire_recursive>
 800885a:	bf00      	nop
 800885c:	20000664 	.word	0x20000664

08008860 <__sfp_lock_release>:
 8008860:	4801      	ldr	r0, [pc, #4]	; (8008868 <__sfp_lock_release+0x8>)
 8008862:	f000 b8ae 	b.w	80089c2 <__retarget_lock_release_recursive>
 8008866:	bf00      	nop
 8008868:	20000664 	.word	0x20000664

0800886c <__sinit_lock_acquire>:
 800886c:	4801      	ldr	r0, [pc, #4]	; (8008874 <__sinit_lock_acquire+0x8>)
 800886e:	f000 b8a7 	b.w	80089c0 <__retarget_lock_acquire_recursive>
 8008872:	bf00      	nop
 8008874:	2000065f 	.word	0x2000065f

08008878 <__sinit_lock_release>:
 8008878:	4801      	ldr	r0, [pc, #4]	; (8008880 <__sinit_lock_release+0x8>)
 800887a:	f000 b8a2 	b.w	80089c2 <__retarget_lock_release_recursive>
 800887e:	bf00      	nop
 8008880:	2000065f 	.word	0x2000065f

08008884 <__sinit>:
 8008884:	b510      	push	{r4, lr}
 8008886:	4604      	mov	r4, r0
 8008888:	f7ff fff0 	bl	800886c <__sinit_lock_acquire>
 800888c:	69a3      	ldr	r3, [r4, #24]
 800888e:	b11b      	cbz	r3, 8008898 <__sinit+0x14>
 8008890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008894:	f7ff bff0 	b.w	8008878 <__sinit_lock_release>
 8008898:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800889c:	6523      	str	r3, [r4, #80]	; 0x50
 800889e:	4b13      	ldr	r3, [pc, #76]	; (80088ec <__sinit+0x68>)
 80088a0:	4a13      	ldr	r2, [pc, #76]	; (80088f0 <__sinit+0x6c>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80088a6:	42a3      	cmp	r3, r4
 80088a8:	bf04      	itt	eq
 80088aa:	2301      	moveq	r3, #1
 80088ac:	61a3      	streq	r3, [r4, #24]
 80088ae:	4620      	mov	r0, r4
 80088b0:	f000 f820 	bl	80088f4 <__sfp>
 80088b4:	6060      	str	r0, [r4, #4]
 80088b6:	4620      	mov	r0, r4
 80088b8:	f000 f81c 	bl	80088f4 <__sfp>
 80088bc:	60a0      	str	r0, [r4, #8]
 80088be:	4620      	mov	r0, r4
 80088c0:	f000 f818 	bl	80088f4 <__sfp>
 80088c4:	2200      	movs	r2, #0
 80088c6:	60e0      	str	r0, [r4, #12]
 80088c8:	2104      	movs	r1, #4
 80088ca:	6860      	ldr	r0, [r4, #4]
 80088cc:	f7ff ff82 	bl	80087d4 <std>
 80088d0:	68a0      	ldr	r0, [r4, #8]
 80088d2:	2201      	movs	r2, #1
 80088d4:	2109      	movs	r1, #9
 80088d6:	f7ff ff7d 	bl	80087d4 <std>
 80088da:	68e0      	ldr	r0, [r4, #12]
 80088dc:	2202      	movs	r2, #2
 80088de:	2112      	movs	r1, #18
 80088e0:	f7ff ff78 	bl	80087d4 <std>
 80088e4:	2301      	movs	r3, #1
 80088e6:	61a3      	str	r3, [r4, #24]
 80088e8:	e7d2      	b.n	8008890 <__sinit+0xc>
 80088ea:	bf00      	nop
 80088ec:	08009ff4 	.word	0x08009ff4
 80088f0:	0800881d 	.word	0x0800881d

080088f4 <__sfp>:
 80088f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088f6:	4607      	mov	r7, r0
 80088f8:	f7ff ffac 	bl	8008854 <__sfp_lock_acquire>
 80088fc:	4b1e      	ldr	r3, [pc, #120]	; (8008978 <__sfp+0x84>)
 80088fe:	681e      	ldr	r6, [r3, #0]
 8008900:	69b3      	ldr	r3, [r6, #24]
 8008902:	b913      	cbnz	r3, 800890a <__sfp+0x16>
 8008904:	4630      	mov	r0, r6
 8008906:	f7ff ffbd 	bl	8008884 <__sinit>
 800890a:	3648      	adds	r6, #72	; 0x48
 800890c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008910:	3b01      	subs	r3, #1
 8008912:	d503      	bpl.n	800891c <__sfp+0x28>
 8008914:	6833      	ldr	r3, [r6, #0]
 8008916:	b30b      	cbz	r3, 800895c <__sfp+0x68>
 8008918:	6836      	ldr	r6, [r6, #0]
 800891a:	e7f7      	b.n	800890c <__sfp+0x18>
 800891c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008920:	b9d5      	cbnz	r5, 8008958 <__sfp+0x64>
 8008922:	4b16      	ldr	r3, [pc, #88]	; (800897c <__sfp+0x88>)
 8008924:	60e3      	str	r3, [r4, #12]
 8008926:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800892a:	6665      	str	r5, [r4, #100]	; 0x64
 800892c:	f000 f847 	bl	80089be <__retarget_lock_init_recursive>
 8008930:	f7ff ff96 	bl	8008860 <__sfp_lock_release>
 8008934:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008938:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800893c:	6025      	str	r5, [r4, #0]
 800893e:	61a5      	str	r5, [r4, #24]
 8008940:	2208      	movs	r2, #8
 8008942:	4629      	mov	r1, r5
 8008944:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008948:	f7ff fd18 	bl	800837c <memset>
 800894c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008950:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008954:	4620      	mov	r0, r4
 8008956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008958:	3468      	adds	r4, #104	; 0x68
 800895a:	e7d9      	b.n	8008910 <__sfp+0x1c>
 800895c:	2104      	movs	r1, #4
 800895e:	4638      	mov	r0, r7
 8008960:	f7ff ff62 	bl	8008828 <__sfmoreglue>
 8008964:	4604      	mov	r4, r0
 8008966:	6030      	str	r0, [r6, #0]
 8008968:	2800      	cmp	r0, #0
 800896a:	d1d5      	bne.n	8008918 <__sfp+0x24>
 800896c:	f7ff ff78 	bl	8008860 <__sfp_lock_release>
 8008970:	230c      	movs	r3, #12
 8008972:	603b      	str	r3, [r7, #0]
 8008974:	e7ee      	b.n	8008954 <__sfp+0x60>
 8008976:	bf00      	nop
 8008978:	08009ff4 	.word	0x08009ff4
 800897c:	ffff0001 	.word	0xffff0001

08008980 <_fwalk_reent>:
 8008980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008984:	4606      	mov	r6, r0
 8008986:	4688      	mov	r8, r1
 8008988:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800898c:	2700      	movs	r7, #0
 800898e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008992:	f1b9 0901 	subs.w	r9, r9, #1
 8008996:	d505      	bpl.n	80089a4 <_fwalk_reent+0x24>
 8008998:	6824      	ldr	r4, [r4, #0]
 800899a:	2c00      	cmp	r4, #0
 800899c:	d1f7      	bne.n	800898e <_fwalk_reent+0xe>
 800899e:	4638      	mov	r0, r7
 80089a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089a4:	89ab      	ldrh	r3, [r5, #12]
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d907      	bls.n	80089ba <_fwalk_reent+0x3a>
 80089aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089ae:	3301      	adds	r3, #1
 80089b0:	d003      	beq.n	80089ba <_fwalk_reent+0x3a>
 80089b2:	4629      	mov	r1, r5
 80089b4:	4630      	mov	r0, r6
 80089b6:	47c0      	blx	r8
 80089b8:	4307      	orrs	r7, r0
 80089ba:	3568      	adds	r5, #104	; 0x68
 80089bc:	e7e9      	b.n	8008992 <_fwalk_reent+0x12>

080089be <__retarget_lock_init_recursive>:
 80089be:	4770      	bx	lr

080089c0 <__retarget_lock_acquire_recursive>:
 80089c0:	4770      	bx	lr

080089c2 <__retarget_lock_release_recursive>:
 80089c2:	4770      	bx	lr

080089c4 <__swhatbuf_r>:
 80089c4:	b570      	push	{r4, r5, r6, lr}
 80089c6:	460e      	mov	r6, r1
 80089c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089cc:	2900      	cmp	r1, #0
 80089ce:	b096      	sub	sp, #88	; 0x58
 80089d0:	4614      	mov	r4, r2
 80089d2:	461d      	mov	r5, r3
 80089d4:	da07      	bge.n	80089e6 <__swhatbuf_r+0x22>
 80089d6:	2300      	movs	r3, #0
 80089d8:	602b      	str	r3, [r5, #0]
 80089da:	89b3      	ldrh	r3, [r6, #12]
 80089dc:	061a      	lsls	r2, r3, #24
 80089de:	d410      	bmi.n	8008a02 <__swhatbuf_r+0x3e>
 80089e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089e4:	e00e      	b.n	8008a04 <__swhatbuf_r+0x40>
 80089e6:	466a      	mov	r2, sp
 80089e8:	f000 fc6a 	bl	80092c0 <_fstat_r>
 80089ec:	2800      	cmp	r0, #0
 80089ee:	dbf2      	blt.n	80089d6 <__swhatbuf_r+0x12>
 80089f0:	9a01      	ldr	r2, [sp, #4]
 80089f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80089f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80089fa:	425a      	negs	r2, r3
 80089fc:	415a      	adcs	r2, r3
 80089fe:	602a      	str	r2, [r5, #0]
 8008a00:	e7ee      	b.n	80089e0 <__swhatbuf_r+0x1c>
 8008a02:	2340      	movs	r3, #64	; 0x40
 8008a04:	2000      	movs	r0, #0
 8008a06:	6023      	str	r3, [r4, #0]
 8008a08:	b016      	add	sp, #88	; 0x58
 8008a0a:	bd70      	pop	{r4, r5, r6, pc}

08008a0c <__smakebuf_r>:
 8008a0c:	898b      	ldrh	r3, [r1, #12]
 8008a0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a10:	079d      	lsls	r5, r3, #30
 8008a12:	4606      	mov	r6, r0
 8008a14:	460c      	mov	r4, r1
 8008a16:	d507      	bpl.n	8008a28 <__smakebuf_r+0x1c>
 8008a18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a1c:	6023      	str	r3, [r4, #0]
 8008a1e:	6123      	str	r3, [r4, #16]
 8008a20:	2301      	movs	r3, #1
 8008a22:	6163      	str	r3, [r4, #20]
 8008a24:	b002      	add	sp, #8
 8008a26:	bd70      	pop	{r4, r5, r6, pc}
 8008a28:	ab01      	add	r3, sp, #4
 8008a2a:	466a      	mov	r2, sp
 8008a2c:	f7ff ffca 	bl	80089c4 <__swhatbuf_r>
 8008a30:	9900      	ldr	r1, [sp, #0]
 8008a32:	4605      	mov	r5, r0
 8008a34:	4630      	mov	r0, r6
 8008a36:	f000 f879 	bl	8008b2c <_malloc_r>
 8008a3a:	b948      	cbnz	r0, 8008a50 <__smakebuf_r+0x44>
 8008a3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a40:	059a      	lsls	r2, r3, #22
 8008a42:	d4ef      	bmi.n	8008a24 <__smakebuf_r+0x18>
 8008a44:	f023 0303 	bic.w	r3, r3, #3
 8008a48:	f043 0302 	orr.w	r3, r3, #2
 8008a4c:	81a3      	strh	r3, [r4, #12]
 8008a4e:	e7e3      	b.n	8008a18 <__smakebuf_r+0xc>
 8008a50:	4b0d      	ldr	r3, [pc, #52]	; (8008a88 <__smakebuf_r+0x7c>)
 8008a52:	62b3      	str	r3, [r6, #40]	; 0x28
 8008a54:	89a3      	ldrh	r3, [r4, #12]
 8008a56:	6020      	str	r0, [r4, #0]
 8008a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a5c:	81a3      	strh	r3, [r4, #12]
 8008a5e:	9b00      	ldr	r3, [sp, #0]
 8008a60:	6163      	str	r3, [r4, #20]
 8008a62:	9b01      	ldr	r3, [sp, #4]
 8008a64:	6120      	str	r0, [r4, #16]
 8008a66:	b15b      	cbz	r3, 8008a80 <__smakebuf_r+0x74>
 8008a68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a6c:	4630      	mov	r0, r6
 8008a6e:	f000 fc39 	bl	80092e4 <_isatty_r>
 8008a72:	b128      	cbz	r0, 8008a80 <__smakebuf_r+0x74>
 8008a74:	89a3      	ldrh	r3, [r4, #12]
 8008a76:	f023 0303 	bic.w	r3, r3, #3
 8008a7a:	f043 0301 	orr.w	r3, r3, #1
 8008a7e:	81a3      	strh	r3, [r4, #12]
 8008a80:	89a0      	ldrh	r0, [r4, #12]
 8008a82:	4305      	orrs	r5, r0
 8008a84:	81a5      	strh	r5, [r4, #12]
 8008a86:	e7cd      	b.n	8008a24 <__smakebuf_r+0x18>
 8008a88:	0800881d 	.word	0x0800881d

08008a8c <_free_r>:
 8008a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a8e:	2900      	cmp	r1, #0
 8008a90:	d048      	beq.n	8008b24 <_free_r+0x98>
 8008a92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a96:	9001      	str	r0, [sp, #4]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f1a1 0404 	sub.w	r4, r1, #4
 8008a9e:	bfb8      	it	lt
 8008aa0:	18e4      	addlt	r4, r4, r3
 8008aa2:	f000 fc41 	bl	8009328 <__malloc_lock>
 8008aa6:	4a20      	ldr	r2, [pc, #128]	; (8008b28 <_free_r+0x9c>)
 8008aa8:	9801      	ldr	r0, [sp, #4]
 8008aaa:	6813      	ldr	r3, [r2, #0]
 8008aac:	4615      	mov	r5, r2
 8008aae:	b933      	cbnz	r3, 8008abe <_free_r+0x32>
 8008ab0:	6063      	str	r3, [r4, #4]
 8008ab2:	6014      	str	r4, [r2, #0]
 8008ab4:	b003      	add	sp, #12
 8008ab6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008aba:	f000 bc3b 	b.w	8009334 <__malloc_unlock>
 8008abe:	42a3      	cmp	r3, r4
 8008ac0:	d90b      	bls.n	8008ada <_free_r+0x4e>
 8008ac2:	6821      	ldr	r1, [r4, #0]
 8008ac4:	1862      	adds	r2, r4, r1
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	bf04      	itt	eq
 8008aca:	681a      	ldreq	r2, [r3, #0]
 8008acc:	685b      	ldreq	r3, [r3, #4]
 8008ace:	6063      	str	r3, [r4, #4]
 8008ad0:	bf04      	itt	eq
 8008ad2:	1852      	addeq	r2, r2, r1
 8008ad4:	6022      	streq	r2, [r4, #0]
 8008ad6:	602c      	str	r4, [r5, #0]
 8008ad8:	e7ec      	b.n	8008ab4 <_free_r+0x28>
 8008ada:	461a      	mov	r2, r3
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	b10b      	cbz	r3, 8008ae4 <_free_r+0x58>
 8008ae0:	42a3      	cmp	r3, r4
 8008ae2:	d9fa      	bls.n	8008ada <_free_r+0x4e>
 8008ae4:	6811      	ldr	r1, [r2, #0]
 8008ae6:	1855      	adds	r5, r2, r1
 8008ae8:	42a5      	cmp	r5, r4
 8008aea:	d10b      	bne.n	8008b04 <_free_r+0x78>
 8008aec:	6824      	ldr	r4, [r4, #0]
 8008aee:	4421      	add	r1, r4
 8008af0:	1854      	adds	r4, r2, r1
 8008af2:	42a3      	cmp	r3, r4
 8008af4:	6011      	str	r1, [r2, #0]
 8008af6:	d1dd      	bne.n	8008ab4 <_free_r+0x28>
 8008af8:	681c      	ldr	r4, [r3, #0]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	6053      	str	r3, [r2, #4]
 8008afe:	4421      	add	r1, r4
 8008b00:	6011      	str	r1, [r2, #0]
 8008b02:	e7d7      	b.n	8008ab4 <_free_r+0x28>
 8008b04:	d902      	bls.n	8008b0c <_free_r+0x80>
 8008b06:	230c      	movs	r3, #12
 8008b08:	6003      	str	r3, [r0, #0]
 8008b0a:	e7d3      	b.n	8008ab4 <_free_r+0x28>
 8008b0c:	6825      	ldr	r5, [r4, #0]
 8008b0e:	1961      	adds	r1, r4, r5
 8008b10:	428b      	cmp	r3, r1
 8008b12:	bf04      	itt	eq
 8008b14:	6819      	ldreq	r1, [r3, #0]
 8008b16:	685b      	ldreq	r3, [r3, #4]
 8008b18:	6063      	str	r3, [r4, #4]
 8008b1a:	bf04      	itt	eq
 8008b1c:	1949      	addeq	r1, r1, r5
 8008b1e:	6021      	streq	r1, [r4, #0]
 8008b20:	6054      	str	r4, [r2, #4]
 8008b22:	e7c7      	b.n	8008ab4 <_free_r+0x28>
 8008b24:	b003      	add	sp, #12
 8008b26:	bd30      	pop	{r4, r5, pc}
 8008b28:	2000041c 	.word	0x2000041c

08008b2c <_malloc_r>:
 8008b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b2e:	1ccd      	adds	r5, r1, #3
 8008b30:	f025 0503 	bic.w	r5, r5, #3
 8008b34:	3508      	adds	r5, #8
 8008b36:	2d0c      	cmp	r5, #12
 8008b38:	bf38      	it	cc
 8008b3a:	250c      	movcc	r5, #12
 8008b3c:	2d00      	cmp	r5, #0
 8008b3e:	4606      	mov	r6, r0
 8008b40:	db01      	blt.n	8008b46 <_malloc_r+0x1a>
 8008b42:	42a9      	cmp	r1, r5
 8008b44:	d903      	bls.n	8008b4e <_malloc_r+0x22>
 8008b46:	230c      	movs	r3, #12
 8008b48:	6033      	str	r3, [r6, #0]
 8008b4a:	2000      	movs	r0, #0
 8008b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b4e:	f000 fbeb 	bl	8009328 <__malloc_lock>
 8008b52:	4921      	ldr	r1, [pc, #132]	; (8008bd8 <_malloc_r+0xac>)
 8008b54:	680a      	ldr	r2, [r1, #0]
 8008b56:	4614      	mov	r4, r2
 8008b58:	b99c      	cbnz	r4, 8008b82 <_malloc_r+0x56>
 8008b5a:	4f20      	ldr	r7, [pc, #128]	; (8008bdc <_malloc_r+0xb0>)
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	b923      	cbnz	r3, 8008b6a <_malloc_r+0x3e>
 8008b60:	4621      	mov	r1, r4
 8008b62:	4630      	mov	r0, r6
 8008b64:	f000 fb2a 	bl	80091bc <_sbrk_r>
 8008b68:	6038      	str	r0, [r7, #0]
 8008b6a:	4629      	mov	r1, r5
 8008b6c:	4630      	mov	r0, r6
 8008b6e:	f000 fb25 	bl	80091bc <_sbrk_r>
 8008b72:	1c43      	adds	r3, r0, #1
 8008b74:	d123      	bne.n	8008bbe <_malloc_r+0x92>
 8008b76:	230c      	movs	r3, #12
 8008b78:	6033      	str	r3, [r6, #0]
 8008b7a:	4630      	mov	r0, r6
 8008b7c:	f000 fbda 	bl	8009334 <__malloc_unlock>
 8008b80:	e7e3      	b.n	8008b4a <_malloc_r+0x1e>
 8008b82:	6823      	ldr	r3, [r4, #0]
 8008b84:	1b5b      	subs	r3, r3, r5
 8008b86:	d417      	bmi.n	8008bb8 <_malloc_r+0x8c>
 8008b88:	2b0b      	cmp	r3, #11
 8008b8a:	d903      	bls.n	8008b94 <_malloc_r+0x68>
 8008b8c:	6023      	str	r3, [r4, #0]
 8008b8e:	441c      	add	r4, r3
 8008b90:	6025      	str	r5, [r4, #0]
 8008b92:	e004      	b.n	8008b9e <_malloc_r+0x72>
 8008b94:	6863      	ldr	r3, [r4, #4]
 8008b96:	42a2      	cmp	r2, r4
 8008b98:	bf0c      	ite	eq
 8008b9a:	600b      	streq	r3, [r1, #0]
 8008b9c:	6053      	strne	r3, [r2, #4]
 8008b9e:	4630      	mov	r0, r6
 8008ba0:	f000 fbc8 	bl	8009334 <__malloc_unlock>
 8008ba4:	f104 000b 	add.w	r0, r4, #11
 8008ba8:	1d23      	adds	r3, r4, #4
 8008baa:	f020 0007 	bic.w	r0, r0, #7
 8008bae:	1ac2      	subs	r2, r0, r3
 8008bb0:	d0cc      	beq.n	8008b4c <_malloc_r+0x20>
 8008bb2:	1a1b      	subs	r3, r3, r0
 8008bb4:	50a3      	str	r3, [r4, r2]
 8008bb6:	e7c9      	b.n	8008b4c <_malloc_r+0x20>
 8008bb8:	4622      	mov	r2, r4
 8008bba:	6864      	ldr	r4, [r4, #4]
 8008bbc:	e7cc      	b.n	8008b58 <_malloc_r+0x2c>
 8008bbe:	1cc4      	adds	r4, r0, #3
 8008bc0:	f024 0403 	bic.w	r4, r4, #3
 8008bc4:	42a0      	cmp	r0, r4
 8008bc6:	d0e3      	beq.n	8008b90 <_malloc_r+0x64>
 8008bc8:	1a21      	subs	r1, r4, r0
 8008bca:	4630      	mov	r0, r6
 8008bcc:	f000 faf6 	bl	80091bc <_sbrk_r>
 8008bd0:	3001      	adds	r0, #1
 8008bd2:	d1dd      	bne.n	8008b90 <_malloc_r+0x64>
 8008bd4:	e7cf      	b.n	8008b76 <_malloc_r+0x4a>
 8008bd6:	bf00      	nop
 8008bd8:	2000041c 	.word	0x2000041c
 8008bdc:	20000420 	.word	0x20000420

08008be0 <__sfputc_r>:
 8008be0:	6893      	ldr	r3, [r2, #8]
 8008be2:	3b01      	subs	r3, #1
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	b410      	push	{r4}
 8008be8:	6093      	str	r3, [r2, #8]
 8008bea:	da08      	bge.n	8008bfe <__sfputc_r+0x1e>
 8008bec:	6994      	ldr	r4, [r2, #24]
 8008bee:	42a3      	cmp	r3, r4
 8008bf0:	db01      	blt.n	8008bf6 <__sfputc_r+0x16>
 8008bf2:	290a      	cmp	r1, #10
 8008bf4:	d103      	bne.n	8008bfe <__sfputc_r+0x1e>
 8008bf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bfa:	f7ff bc69 	b.w	80084d0 <__swbuf_r>
 8008bfe:	6813      	ldr	r3, [r2, #0]
 8008c00:	1c58      	adds	r0, r3, #1
 8008c02:	6010      	str	r0, [r2, #0]
 8008c04:	7019      	strb	r1, [r3, #0]
 8008c06:	4608      	mov	r0, r1
 8008c08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <__sfputs_r>:
 8008c0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c10:	4606      	mov	r6, r0
 8008c12:	460f      	mov	r7, r1
 8008c14:	4614      	mov	r4, r2
 8008c16:	18d5      	adds	r5, r2, r3
 8008c18:	42ac      	cmp	r4, r5
 8008c1a:	d101      	bne.n	8008c20 <__sfputs_r+0x12>
 8008c1c:	2000      	movs	r0, #0
 8008c1e:	e007      	b.n	8008c30 <__sfputs_r+0x22>
 8008c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c24:	463a      	mov	r2, r7
 8008c26:	4630      	mov	r0, r6
 8008c28:	f7ff ffda 	bl	8008be0 <__sfputc_r>
 8008c2c:	1c43      	adds	r3, r0, #1
 8008c2e:	d1f3      	bne.n	8008c18 <__sfputs_r+0xa>
 8008c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c34 <_vfiprintf_r>:
 8008c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c38:	460d      	mov	r5, r1
 8008c3a:	b09d      	sub	sp, #116	; 0x74
 8008c3c:	4614      	mov	r4, r2
 8008c3e:	4698      	mov	r8, r3
 8008c40:	4606      	mov	r6, r0
 8008c42:	b118      	cbz	r0, 8008c4c <_vfiprintf_r+0x18>
 8008c44:	6983      	ldr	r3, [r0, #24]
 8008c46:	b90b      	cbnz	r3, 8008c4c <_vfiprintf_r+0x18>
 8008c48:	f7ff fe1c 	bl	8008884 <__sinit>
 8008c4c:	4b89      	ldr	r3, [pc, #548]	; (8008e74 <_vfiprintf_r+0x240>)
 8008c4e:	429d      	cmp	r5, r3
 8008c50:	d11b      	bne.n	8008c8a <_vfiprintf_r+0x56>
 8008c52:	6875      	ldr	r5, [r6, #4]
 8008c54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c56:	07d9      	lsls	r1, r3, #31
 8008c58:	d405      	bmi.n	8008c66 <_vfiprintf_r+0x32>
 8008c5a:	89ab      	ldrh	r3, [r5, #12]
 8008c5c:	059a      	lsls	r2, r3, #22
 8008c5e:	d402      	bmi.n	8008c66 <_vfiprintf_r+0x32>
 8008c60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c62:	f7ff fead 	bl	80089c0 <__retarget_lock_acquire_recursive>
 8008c66:	89ab      	ldrh	r3, [r5, #12]
 8008c68:	071b      	lsls	r3, r3, #28
 8008c6a:	d501      	bpl.n	8008c70 <_vfiprintf_r+0x3c>
 8008c6c:	692b      	ldr	r3, [r5, #16]
 8008c6e:	b9eb      	cbnz	r3, 8008cac <_vfiprintf_r+0x78>
 8008c70:	4629      	mov	r1, r5
 8008c72:	4630      	mov	r0, r6
 8008c74:	f7ff fc7e 	bl	8008574 <__swsetup_r>
 8008c78:	b1c0      	cbz	r0, 8008cac <_vfiprintf_r+0x78>
 8008c7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c7c:	07dc      	lsls	r4, r3, #31
 8008c7e:	d50e      	bpl.n	8008c9e <_vfiprintf_r+0x6a>
 8008c80:	f04f 30ff 	mov.w	r0, #4294967295
 8008c84:	b01d      	add	sp, #116	; 0x74
 8008c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c8a:	4b7b      	ldr	r3, [pc, #492]	; (8008e78 <_vfiprintf_r+0x244>)
 8008c8c:	429d      	cmp	r5, r3
 8008c8e:	d101      	bne.n	8008c94 <_vfiprintf_r+0x60>
 8008c90:	68b5      	ldr	r5, [r6, #8]
 8008c92:	e7df      	b.n	8008c54 <_vfiprintf_r+0x20>
 8008c94:	4b79      	ldr	r3, [pc, #484]	; (8008e7c <_vfiprintf_r+0x248>)
 8008c96:	429d      	cmp	r5, r3
 8008c98:	bf08      	it	eq
 8008c9a:	68f5      	ldreq	r5, [r6, #12]
 8008c9c:	e7da      	b.n	8008c54 <_vfiprintf_r+0x20>
 8008c9e:	89ab      	ldrh	r3, [r5, #12]
 8008ca0:	0598      	lsls	r0, r3, #22
 8008ca2:	d4ed      	bmi.n	8008c80 <_vfiprintf_r+0x4c>
 8008ca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ca6:	f7ff fe8c 	bl	80089c2 <__retarget_lock_release_recursive>
 8008caa:	e7e9      	b.n	8008c80 <_vfiprintf_r+0x4c>
 8008cac:	2300      	movs	r3, #0
 8008cae:	9309      	str	r3, [sp, #36]	; 0x24
 8008cb0:	2320      	movs	r3, #32
 8008cb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cba:	2330      	movs	r3, #48	; 0x30
 8008cbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008e80 <_vfiprintf_r+0x24c>
 8008cc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cc4:	f04f 0901 	mov.w	r9, #1
 8008cc8:	4623      	mov	r3, r4
 8008cca:	469a      	mov	sl, r3
 8008ccc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cd0:	b10a      	cbz	r2, 8008cd6 <_vfiprintf_r+0xa2>
 8008cd2:	2a25      	cmp	r2, #37	; 0x25
 8008cd4:	d1f9      	bne.n	8008cca <_vfiprintf_r+0x96>
 8008cd6:	ebba 0b04 	subs.w	fp, sl, r4
 8008cda:	d00b      	beq.n	8008cf4 <_vfiprintf_r+0xc0>
 8008cdc:	465b      	mov	r3, fp
 8008cde:	4622      	mov	r2, r4
 8008ce0:	4629      	mov	r1, r5
 8008ce2:	4630      	mov	r0, r6
 8008ce4:	f7ff ff93 	bl	8008c0e <__sfputs_r>
 8008ce8:	3001      	adds	r0, #1
 8008cea:	f000 80aa 	beq.w	8008e42 <_vfiprintf_r+0x20e>
 8008cee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cf0:	445a      	add	r2, fp
 8008cf2:	9209      	str	r2, [sp, #36]	; 0x24
 8008cf4:	f89a 3000 	ldrb.w	r3, [sl]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f000 80a2 	beq.w	8008e42 <_vfiprintf_r+0x20e>
 8008cfe:	2300      	movs	r3, #0
 8008d00:	f04f 32ff 	mov.w	r2, #4294967295
 8008d04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d08:	f10a 0a01 	add.w	sl, sl, #1
 8008d0c:	9304      	str	r3, [sp, #16]
 8008d0e:	9307      	str	r3, [sp, #28]
 8008d10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d14:	931a      	str	r3, [sp, #104]	; 0x68
 8008d16:	4654      	mov	r4, sl
 8008d18:	2205      	movs	r2, #5
 8008d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d1e:	4858      	ldr	r0, [pc, #352]	; (8008e80 <_vfiprintf_r+0x24c>)
 8008d20:	f7f7 fa2e 	bl	8000180 <memchr>
 8008d24:	9a04      	ldr	r2, [sp, #16]
 8008d26:	b9d8      	cbnz	r0, 8008d60 <_vfiprintf_r+0x12c>
 8008d28:	06d1      	lsls	r1, r2, #27
 8008d2a:	bf44      	itt	mi
 8008d2c:	2320      	movmi	r3, #32
 8008d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d32:	0713      	lsls	r3, r2, #28
 8008d34:	bf44      	itt	mi
 8008d36:	232b      	movmi	r3, #43	; 0x2b
 8008d38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d40:	2b2a      	cmp	r3, #42	; 0x2a
 8008d42:	d015      	beq.n	8008d70 <_vfiprintf_r+0x13c>
 8008d44:	9a07      	ldr	r2, [sp, #28]
 8008d46:	4654      	mov	r4, sl
 8008d48:	2000      	movs	r0, #0
 8008d4a:	f04f 0c0a 	mov.w	ip, #10
 8008d4e:	4621      	mov	r1, r4
 8008d50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d54:	3b30      	subs	r3, #48	; 0x30
 8008d56:	2b09      	cmp	r3, #9
 8008d58:	d94e      	bls.n	8008df8 <_vfiprintf_r+0x1c4>
 8008d5a:	b1b0      	cbz	r0, 8008d8a <_vfiprintf_r+0x156>
 8008d5c:	9207      	str	r2, [sp, #28]
 8008d5e:	e014      	b.n	8008d8a <_vfiprintf_r+0x156>
 8008d60:	eba0 0308 	sub.w	r3, r0, r8
 8008d64:	fa09 f303 	lsl.w	r3, r9, r3
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	9304      	str	r3, [sp, #16]
 8008d6c:	46a2      	mov	sl, r4
 8008d6e:	e7d2      	b.n	8008d16 <_vfiprintf_r+0xe2>
 8008d70:	9b03      	ldr	r3, [sp, #12]
 8008d72:	1d19      	adds	r1, r3, #4
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	9103      	str	r1, [sp, #12]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	bfbb      	ittet	lt
 8008d7c:	425b      	neglt	r3, r3
 8008d7e:	f042 0202 	orrlt.w	r2, r2, #2
 8008d82:	9307      	strge	r3, [sp, #28]
 8008d84:	9307      	strlt	r3, [sp, #28]
 8008d86:	bfb8      	it	lt
 8008d88:	9204      	strlt	r2, [sp, #16]
 8008d8a:	7823      	ldrb	r3, [r4, #0]
 8008d8c:	2b2e      	cmp	r3, #46	; 0x2e
 8008d8e:	d10c      	bne.n	8008daa <_vfiprintf_r+0x176>
 8008d90:	7863      	ldrb	r3, [r4, #1]
 8008d92:	2b2a      	cmp	r3, #42	; 0x2a
 8008d94:	d135      	bne.n	8008e02 <_vfiprintf_r+0x1ce>
 8008d96:	9b03      	ldr	r3, [sp, #12]
 8008d98:	1d1a      	adds	r2, r3, #4
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	9203      	str	r2, [sp, #12]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	bfb8      	it	lt
 8008da2:	f04f 33ff 	movlt.w	r3, #4294967295
 8008da6:	3402      	adds	r4, #2
 8008da8:	9305      	str	r3, [sp, #20]
 8008daa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008e90 <_vfiprintf_r+0x25c>
 8008dae:	7821      	ldrb	r1, [r4, #0]
 8008db0:	2203      	movs	r2, #3
 8008db2:	4650      	mov	r0, sl
 8008db4:	f7f7 f9e4 	bl	8000180 <memchr>
 8008db8:	b140      	cbz	r0, 8008dcc <_vfiprintf_r+0x198>
 8008dba:	2340      	movs	r3, #64	; 0x40
 8008dbc:	eba0 000a 	sub.w	r0, r0, sl
 8008dc0:	fa03 f000 	lsl.w	r0, r3, r0
 8008dc4:	9b04      	ldr	r3, [sp, #16]
 8008dc6:	4303      	orrs	r3, r0
 8008dc8:	3401      	adds	r4, #1
 8008dca:	9304      	str	r3, [sp, #16]
 8008dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dd0:	482c      	ldr	r0, [pc, #176]	; (8008e84 <_vfiprintf_r+0x250>)
 8008dd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008dd6:	2206      	movs	r2, #6
 8008dd8:	f7f7 f9d2 	bl	8000180 <memchr>
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	d03f      	beq.n	8008e60 <_vfiprintf_r+0x22c>
 8008de0:	4b29      	ldr	r3, [pc, #164]	; (8008e88 <_vfiprintf_r+0x254>)
 8008de2:	bb1b      	cbnz	r3, 8008e2c <_vfiprintf_r+0x1f8>
 8008de4:	9b03      	ldr	r3, [sp, #12]
 8008de6:	3307      	adds	r3, #7
 8008de8:	f023 0307 	bic.w	r3, r3, #7
 8008dec:	3308      	adds	r3, #8
 8008dee:	9303      	str	r3, [sp, #12]
 8008df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008df2:	443b      	add	r3, r7
 8008df4:	9309      	str	r3, [sp, #36]	; 0x24
 8008df6:	e767      	b.n	8008cc8 <_vfiprintf_r+0x94>
 8008df8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dfc:	460c      	mov	r4, r1
 8008dfe:	2001      	movs	r0, #1
 8008e00:	e7a5      	b.n	8008d4e <_vfiprintf_r+0x11a>
 8008e02:	2300      	movs	r3, #0
 8008e04:	3401      	adds	r4, #1
 8008e06:	9305      	str	r3, [sp, #20]
 8008e08:	4619      	mov	r1, r3
 8008e0a:	f04f 0c0a 	mov.w	ip, #10
 8008e0e:	4620      	mov	r0, r4
 8008e10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e14:	3a30      	subs	r2, #48	; 0x30
 8008e16:	2a09      	cmp	r2, #9
 8008e18:	d903      	bls.n	8008e22 <_vfiprintf_r+0x1ee>
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d0c5      	beq.n	8008daa <_vfiprintf_r+0x176>
 8008e1e:	9105      	str	r1, [sp, #20]
 8008e20:	e7c3      	b.n	8008daa <_vfiprintf_r+0x176>
 8008e22:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e26:	4604      	mov	r4, r0
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e7f0      	b.n	8008e0e <_vfiprintf_r+0x1da>
 8008e2c:	ab03      	add	r3, sp, #12
 8008e2e:	9300      	str	r3, [sp, #0]
 8008e30:	462a      	mov	r2, r5
 8008e32:	4b16      	ldr	r3, [pc, #88]	; (8008e8c <_vfiprintf_r+0x258>)
 8008e34:	a904      	add	r1, sp, #16
 8008e36:	4630      	mov	r0, r6
 8008e38:	f3af 8000 	nop.w
 8008e3c:	4607      	mov	r7, r0
 8008e3e:	1c78      	adds	r0, r7, #1
 8008e40:	d1d6      	bne.n	8008df0 <_vfiprintf_r+0x1bc>
 8008e42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e44:	07d9      	lsls	r1, r3, #31
 8008e46:	d405      	bmi.n	8008e54 <_vfiprintf_r+0x220>
 8008e48:	89ab      	ldrh	r3, [r5, #12]
 8008e4a:	059a      	lsls	r2, r3, #22
 8008e4c:	d402      	bmi.n	8008e54 <_vfiprintf_r+0x220>
 8008e4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e50:	f7ff fdb7 	bl	80089c2 <__retarget_lock_release_recursive>
 8008e54:	89ab      	ldrh	r3, [r5, #12]
 8008e56:	065b      	lsls	r3, r3, #25
 8008e58:	f53f af12 	bmi.w	8008c80 <_vfiprintf_r+0x4c>
 8008e5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e5e:	e711      	b.n	8008c84 <_vfiprintf_r+0x50>
 8008e60:	ab03      	add	r3, sp, #12
 8008e62:	9300      	str	r3, [sp, #0]
 8008e64:	462a      	mov	r2, r5
 8008e66:	4b09      	ldr	r3, [pc, #36]	; (8008e8c <_vfiprintf_r+0x258>)
 8008e68:	a904      	add	r1, sp, #16
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	f000 f880 	bl	8008f70 <_printf_i>
 8008e70:	e7e4      	b.n	8008e3c <_vfiprintf_r+0x208>
 8008e72:	bf00      	nop
 8008e74:	0800a018 	.word	0x0800a018
 8008e78:	0800a038 	.word	0x0800a038
 8008e7c:	08009ff8 	.word	0x08009ff8
 8008e80:	0800a058 	.word	0x0800a058
 8008e84:	0800a062 	.word	0x0800a062
 8008e88:	00000000 	.word	0x00000000
 8008e8c:	08008c0f 	.word	0x08008c0f
 8008e90:	0800a05e 	.word	0x0800a05e

08008e94 <_printf_common>:
 8008e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e98:	4616      	mov	r6, r2
 8008e9a:	4699      	mov	r9, r3
 8008e9c:	688a      	ldr	r2, [r1, #8]
 8008e9e:	690b      	ldr	r3, [r1, #16]
 8008ea0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	bfb8      	it	lt
 8008ea8:	4613      	movlt	r3, r2
 8008eaa:	6033      	str	r3, [r6, #0]
 8008eac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008eb0:	4607      	mov	r7, r0
 8008eb2:	460c      	mov	r4, r1
 8008eb4:	b10a      	cbz	r2, 8008eba <_printf_common+0x26>
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	6033      	str	r3, [r6, #0]
 8008eba:	6823      	ldr	r3, [r4, #0]
 8008ebc:	0699      	lsls	r1, r3, #26
 8008ebe:	bf42      	ittt	mi
 8008ec0:	6833      	ldrmi	r3, [r6, #0]
 8008ec2:	3302      	addmi	r3, #2
 8008ec4:	6033      	strmi	r3, [r6, #0]
 8008ec6:	6825      	ldr	r5, [r4, #0]
 8008ec8:	f015 0506 	ands.w	r5, r5, #6
 8008ecc:	d106      	bne.n	8008edc <_printf_common+0x48>
 8008ece:	f104 0a19 	add.w	sl, r4, #25
 8008ed2:	68e3      	ldr	r3, [r4, #12]
 8008ed4:	6832      	ldr	r2, [r6, #0]
 8008ed6:	1a9b      	subs	r3, r3, r2
 8008ed8:	42ab      	cmp	r3, r5
 8008eda:	dc26      	bgt.n	8008f2a <_printf_common+0x96>
 8008edc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ee0:	1e13      	subs	r3, r2, #0
 8008ee2:	6822      	ldr	r2, [r4, #0]
 8008ee4:	bf18      	it	ne
 8008ee6:	2301      	movne	r3, #1
 8008ee8:	0692      	lsls	r2, r2, #26
 8008eea:	d42b      	bmi.n	8008f44 <_printf_common+0xb0>
 8008eec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ef0:	4649      	mov	r1, r9
 8008ef2:	4638      	mov	r0, r7
 8008ef4:	47c0      	blx	r8
 8008ef6:	3001      	adds	r0, #1
 8008ef8:	d01e      	beq.n	8008f38 <_printf_common+0xa4>
 8008efa:	6823      	ldr	r3, [r4, #0]
 8008efc:	68e5      	ldr	r5, [r4, #12]
 8008efe:	6832      	ldr	r2, [r6, #0]
 8008f00:	f003 0306 	and.w	r3, r3, #6
 8008f04:	2b04      	cmp	r3, #4
 8008f06:	bf08      	it	eq
 8008f08:	1aad      	subeq	r5, r5, r2
 8008f0a:	68a3      	ldr	r3, [r4, #8]
 8008f0c:	6922      	ldr	r2, [r4, #16]
 8008f0e:	bf0c      	ite	eq
 8008f10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f14:	2500      	movne	r5, #0
 8008f16:	4293      	cmp	r3, r2
 8008f18:	bfc4      	itt	gt
 8008f1a:	1a9b      	subgt	r3, r3, r2
 8008f1c:	18ed      	addgt	r5, r5, r3
 8008f1e:	2600      	movs	r6, #0
 8008f20:	341a      	adds	r4, #26
 8008f22:	42b5      	cmp	r5, r6
 8008f24:	d11a      	bne.n	8008f5c <_printf_common+0xc8>
 8008f26:	2000      	movs	r0, #0
 8008f28:	e008      	b.n	8008f3c <_printf_common+0xa8>
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	4652      	mov	r2, sl
 8008f2e:	4649      	mov	r1, r9
 8008f30:	4638      	mov	r0, r7
 8008f32:	47c0      	blx	r8
 8008f34:	3001      	adds	r0, #1
 8008f36:	d103      	bne.n	8008f40 <_printf_common+0xac>
 8008f38:	f04f 30ff 	mov.w	r0, #4294967295
 8008f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f40:	3501      	adds	r5, #1
 8008f42:	e7c6      	b.n	8008ed2 <_printf_common+0x3e>
 8008f44:	18e1      	adds	r1, r4, r3
 8008f46:	1c5a      	adds	r2, r3, #1
 8008f48:	2030      	movs	r0, #48	; 0x30
 8008f4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f4e:	4422      	add	r2, r4
 8008f50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f58:	3302      	adds	r3, #2
 8008f5a:	e7c7      	b.n	8008eec <_printf_common+0x58>
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	4622      	mov	r2, r4
 8008f60:	4649      	mov	r1, r9
 8008f62:	4638      	mov	r0, r7
 8008f64:	47c0      	blx	r8
 8008f66:	3001      	adds	r0, #1
 8008f68:	d0e6      	beq.n	8008f38 <_printf_common+0xa4>
 8008f6a:	3601      	adds	r6, #1
 8008f6c:	e7d9      	b.n	8008f22 <_printf_common+0x8e>
	...

08008f70 <_printf_i>:
 8008f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f74:	460c      	mov	r4, r1
 8008f76:	4691      	mov	r9, r2
 8008f78:	7e27      	ldrb	r7, [r4, #24]
 8008f7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008f7c:	2f78      	cmp	r7, #120	; 0x78
 8008f7e:	4680      	mov	r8, r0
 8008f80:	469a      	mov	sl, r3
 8008f82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f86:	d807      	bhi.n	8008f98 <_printf_i+0x28>
 8008f88:	2f62      	cmp	r7, #98	; 0x62
 8008f8a:	d80a      	bhi.n	8008fa2 <_printf_i+0x32>
 8008f8c:	2f00      	cmp	r7, #0
 8008f8e:	f000 80d8 	beq.w	8009142 <_printf_i+0x1d2>
 8008f92:	2f58      	cmp	r7, #88	; 0x58
 8008f94:	f000 80a3 	beq.w	80090de <_printf_i+0x16e>
 8008f98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008f9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008fa0:	e03a      	b.n	8009018 <_printf_i+0xa8>
 8008fa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008fa6:	2b15      	cmp	r3, #21
 8008fa8:	d8f6      	bhi.n	8008f98 <_printf_i+0x28>
 8008faa:	a001      	add	r0, pc, #4	; (adr r0, 8008fb0 <_printf_i+0x40>)
 8008fac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008fb0:	08009009 	.word	0x08009009
 8008fb4:	0800901d 	.word	0x0800901d
 8008fb8:	08008f99 	.word	0x08008f99
 8008fbc:	08008f99 	.word	0x08008f99
 8008fc0:	08008f99 	.word	0x08008f99
 8008fc4:	08008f99 	.word	0x08008f99
 8008fc8:	0800901d 	.word	0x0800901d
 8008fcc:	08008f99 	.word	0x08008f99
 8008fd0:	08008f99 	.word	0x08008f99
 8008fd4:	08008f99 	.word	0x08008f99
 8008fd8:	08008f99 	.word	0x08008f99
 8008fdc:	08009129 	.word	0x08009129
 8008fe0:	0800904d 	.word	0x0800904d
 8008fe4:	0800910b 	.word	0x0800910b
 8008fe8:	08008f99 	.word	0x08008f99
 8008fec:	08008f99 	.word	0x08008f99
 8008ff0:	0800914b 	.word	0x0800914b
 8008ff4:	08008f99 	.word	0x08008f99
 8008ff8:	0800904d 	.word	0x0800904d
 8008ffc:	08008f99 	.word	0x08008f99
 8009000:	08008f99 	.word	0x08008f99
 8009004:	08009113 	.word	0x08009113
 8009008:	680b      	ldr	r3, [r1, #0]
 800900a:	1d1a      	adds	r2, r3, #4
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	600a      	str	r2, [r1, #0]
 8009010:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009018:	2301      	movs	r3, #1
 800901a:	e0a3      	b.n	8009164 <_printf_i+0x1f4>
 800901c:	6825      	ldr	r5, [r4, #0]
 800901e:	6808      	ldr	r0, [r1, #0]
 8009020:	062e      	lsls	r6, r5, #24
 8009022:	f100 0304 	add.w	r3, r0, #4
 8009026:	d50a      	bpl.n	800903e <_printf_i+0xce>
 8009028:	6805      	ldr	r5, [r0, #0]
 800902a:	600b      	str	r3, [r1, #0]
 800902c:	2d00      	cmp	r5, #0
 800902e:	da03      	bge.n	8009038 <_printf_i+0xc8>
 8009030:	232d      	movs	r3, #45	; 0x2d
 8009032:	426d      	negs	r5, r5
 8009034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009038:	485e      	ldr	r0, [pc, #376]	; (80091b4 <_printf_i+0x244>)
 800903a:	230a      	movs	r3, #10
 800903c:	e019      	b.n	8009072 <_printf_i+0x102>
 800903e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009042:	6805      	ldr	r5, [r0, #0]
 8009044:	600b      	str	r3, [r1, #0]
 8009046:	bf18      	it	ne
 8009048:	b22d      	sxthne	r5, r5
 800904a:	e7ef      	b.n	800902c <_printf_i+0xbc>
 800904c:	680b      	ldr	r3, [r1, #0]
 800904e:	6825      	ldr	r5, [r4, #0]
 8009050:	1d18      	adds	r0, r3, #4
 8009052:	6008      	str	r0, [r1, #0]
 8009054:	0628      	lsls	r0, r5, #24
 8009056:	d501      	bpl.n	800905c <_printf_i+0xec>
 8009058:	681d      	ldr	r5, [r3, #0]
 800905a:	e002      	b.n	8009062 <_printf_i+0xf2>
 800905c:	0669      	lsls	r1, r5, #25
 800905e:	d5fb      	bpl.n	8009058 <_printf_i+0xe8>
 8009060:	881d      	ldrh	r5, [r3, #0]
 8009062:	4854      	ldr	r0, [pc, #336]	; (80091b4 <_printf_i+0x244>)
 8009064:	2f6f      	cmp	r7, #111	; 0x6f
 8009066:	bf0c      	ite	eq
 8009068:	2308      	moveq	r3, #8
 800906a:	230a      	movne	r3, #10
 800906c:	2100      	movs	r1, #0
 800906e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009072:	6866      	ldr	r6, [r4, #4]
 8009074:	60a6      	str	r6, [r4, #8]
 8009076:	2e00      	cmp	r6, #0
 8009078:	bfa2      	ittt	ge
 800907a:	6821      	ldrge	r1, [r4, #0]
 800907c:	f021 0104 	bicge.w	r1, r1, #4
 8009080:	6021      	strge	r1, [r4, #0]
 8009082:	b90d      	cbnz	r5, 8009088 <_printf_i+0x118>
 8009084:	2e00      	cmp	r6, #0
 8009086:	d04d      	beq.n	8009124 <_printf_i+0x1b4>
 8009088:	4616      	mov	r6, r2
 800908a:	fbb5 f1f3 	udiv	r1, r5, r3
 800908e:	fb03 5711 	mls	r7, r3, r1, r5
 8009092:	5dc7      	ldrb	r7, [r0, r7]
 8009094:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009098:	462f      	mov	r7, r5
 800909a:	42bb      	cmp	r3, r7
 800909c:	460d      	mov	r5, r1
 800909e:	d9f4      	bls.n	800908a <_printf_i+0x11a>
 80090a0:	2b08      	cmp	r3, #8
 80090a2:	d10b      	bne.n	80090bc <_printf_i+0x14c>
 80090a4:	6823      	ldr	r3, [r4, #0]
 80090a6:	07df      	lsls	r7, r3, #31
 80090a8:	d508      	bpl.n	80090bc <_printf_i+0x14c>
 80090aa:	6923      	ldr	r3, [r4, #16]
 80090ac:	6861      	ldr	r1, [r4, #4]
 80090ae:	4299      	cmp	r1, r3
 80090b0:	bfde      	ittt	le
 80090b2:	2330      	movle	r3, #48	; 0x30
 80090b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80090b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80090bc:	1b92      	subs	r2, r2, r6
 80090be:	6122      	str	r2, [r4, #16]
 80090c0:	f8cd a000 	str.w	sl, [sp]
 80090c4:	464b      	mov	r3, r9
 80090c6:	aa03      	add	r2, sp, #12
 80090c8:	4621      	mov	r1, r4
 80090ca:	4640      	mov	r0, r8
 80090cc:	f7ff fee2 	bl	8008e94 <_printf_common>
 80090d0:	3001      	adds	r0, #1
 80090d2:	d14c      	bne.n	800916e <_printf_i+0x1fe>
 80090d4:	f04f 30ff 	mov.w	r0, #4294967295
 80090d8:	b004      	add	sp, #16
 80090da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090de:	4835      	ldr	r0, [pc, #212]	; (80091b4 <_printf_i+0x244>)
 80090e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80090e4:	6823      	ldr	r3, [r4, #0]
 80090e6:	680e      	ldr	r6, [r1, #0]
 80090e8:	061f      	lsls	r7, r3, #24
 80090ea:	f856 5b04 	ldr.w	r5, [r6], #4
 80090ee:	600e      	str	r6, [r1, #0]
 80090f0:	d514      	bpl.n	800911c <_printf_i+0x1ac>
 80090f2:	07d9      	lsls	r1, r3, #31
 80090f4:	bf44      	itt	mi
 80090f6:	f043 0320 	orrmi.w	r3, r3, #32
 80090fa:	6023      	strmi	r3, [r4, #0]
 80090fc:	b91d      	cbnz	r5, 8009106 <_printf_i+0x196>
 80090fe:	6823      	ldr	r3, [r4, #0]
 8009100:	f023 0320 	bic.w	r3, r3, #32
 8009104:	6023      	str	r3, [r4, #0]
 8009106:	2310      	movs	r3, #16
 8009108:	e7b0      	b.n	800906c <_printf_i+0xfc>
 800910a:	6823      	ldr	r3, [r4, #0]
 800910c:	f043 0320 	orr.w	r3, r3, #32
 8009110:	6023      	str	r3, [r4, #0]
 8009112:	2378      	movs	r3, #120	; 0x78
 8009114:	4828      	ldr	r0, [pc, #160]	; (80091b8 <_printf_i+0x248>)
 8009116:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800911a:	e7e3      	b.n	80090e4 <_printf_i+0x174>
 800911c:	065e      	lsls	r6, r3, #25
 800911e:	bf48      	it	mi
 8009120:	b2ad      	uxthmi	r5, r5
 8009122:	e7e6      	b.n	80090f2 <_printf_i+0x182>
 8009124:	4616      	mov	r6, r2
 8009126:	e7bb      	b.n	80090a0 <_printf_i+0x130>
 8009128:	680b      	ldr	r3, [r1, #0]
 800912a:	6826      	ldr	r6, [r4, #0]
 800912c:	6960      	ldr	r0, [r4, #20]
 800912e:	1d1d      	adds	r5, r3, #4
 8009130:	600d      	str	r5, [r1, #0]
 8009132:	0635      	lsls	r5, r6, #24
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	d501      	bpl.n	800913c <_printf_i+0x1cc>
 8009138:	6018      	str	r0, [r3, #0]
 800913a:	e002      	b.n	8009142 <_printf_i+0x1d2>
 800913c:	0671      	lsls	r1, r6, #25
 800913e:	d5fb      	bpl.n	8009138 <_printf_i+0x1c8>
 8009140:	8018      	strh	r0, [r3, #0]
 8009142:	2300      	movs	r3, #0
 8009144:	6123      	str	r3, [r4, #16]
 8009146:	4616      	mov	r6, r2
 8009148:	e7ba      	b.n	80090c0 <_printf_i+0x150>
 800914a:	680b      	ldr	r3, [r1, #0]
 800914c:	1d1a      	adds	r2, r3, #4
 800914e:	600a      	str	r2, [r1, #0]
 8009150:	681e      	ldr	r6, [r3, #0]
 8009152:	6862      	ldr	r2, [r4, #4]
 8009154:	2100      	movs	r1, #0
 8009156:	4630      	mov	r0, r6
 8009158:	f7f7 f812 	bl	8000180 <memchr>
 800915c:	b108      	cbz	r0, 8009162 <_printf_i+0x1f2>
 800915e:	1b80      	subs	r0, r0, r6
 8009160:	6060      	str	r0, [r4, #4]
 8009162:	6863      	ldr	r3, [r4, #4]
 8009164:	6123      	str	r3, [r4, #16]
 8009166:	2300      	movs	r3, #0
 8009168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800916c:	e7a8      	b.n	80090c0 <_printf_i+0x150>
 800916e:	6923      	ldr	r3, [r4, #16]
 8009170:	4632      	mov	r2, r6
 8009172:	4649      	mov	r1, r9
 8009174:	4640      	mov	r0, r8
 8009176:	47d0      	blx	sl
 8009178:	3001      	adds	r0, #1
 800917a:	d0ab      	beq.n	80090d4 <_printf_i+0x164>
 800917c:	6823      	ldr	r3, [r4, #0]
 800917e:	079b      	lsls	r3, r3, #30
 8009180:	d413      	bmi.n	80091aa <_printf_i+0x23a>
 8009182:	68e0      	ldr	r0, [r4, #12]
 8009184:	9b03      	ldr	r3, [sp, #12]
 8009186:	4298      	cmp	r0, r3
 8009188:	bfb8      	it	lt
 800918a:	4618      	movlt	r0, r3
 800918c:	e7a4      	b.n	80090d8 <_printf_i+0x168>
 800918e:	2301      	movs	r3, #1
 8009190:	4632      	mov	r2, r6
 8009192:	4649      	mov	r1, r9
 8009194:	4640      	mov	r0, r8
 8009196:	47d0      	blx	sl
 8009198:	3001      	adds	r0, #1
 800919a:	d09b      	beq.n	80090d4 <_printf_i+0x164>
 800919c:	3501      	adds	r5, #1
 800919e:	68e3      	ldr	r3, [r4, #12]
 80091a0:	9903      	ldr	r1, [sp, #12]
 80091a2:	1a5b      	subs	r3, r3, r1
 80091a4:	42ab      	cmp	r3, r5
 80091a6:	dcf2      	bgt.n	800918e <_printf_i+0x21e>
 80091a8:	e7eb      	b.n	8009182 <_printf_i+0x212>
 80091aa:	2500      	movs	r5, #0
 80091ac:	f104 0619 	add.w	r6, r4, #25
 80091b0:	e7f5      	b.n	800919e <_printf_i+0x22e>
 80091b2:	bf00      	nop
 80091b4:	0800a069 	.word	0x0800a069
 80091b8:	0800a07a 	.word	0x0800a07a

080091bc <_sbrk_r>:
 80091bc:	b538      	push	{r3, r4, r5, lr}
 80091be:	4d06      	ldr	r5, [pc, #24]	; (80091d8 <_sbrk_r+0x1c>)
 80091c0:	2300      	movs	r3, #0
 80091c2:	4604      	mov	r4, r0
 80091c4:	4608      	mov	r0, r1
 80091c6:	602b      	str	r3, [r5, #0]
 80091c8:	f7f8 feba 	bl	8001f40 <_sbrk>
 80091cc:	1c43      	adds	r3, r0, #1
 80091ce:	d102      	bne.n	80091d6 <_sbrk_r+0x1a>
 80091d0:	682b      	ldr	r3, [r5, #0]
 80091d2:	b103      	cbz	r3, 80091d6 <_sbrk_r+0x1a>
 80091d4:	6023      	str	r3, [r4, #0]
 80091d6:	bd38      	pop	{r3, r4, r5, pc}
 80091d8:	20000668 	.word	0x20000668

080091dc <__sread>:
 80091dc:	b510      	push	{r4, lr}
 80091de:	460c      	mov	r4, r1
 80091e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091e4:	f000 f8ac 	bl	8009340 <_read_r>
 80091e8:	2800      	cmp	r0, #0
 80091ea:	bfab      	itete	ge
 80091ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80091ee:	89a3      	ldrhlt	r3, [r4, #12]
 80091f0:	181b      	addge	r3, r3, r0
 80091f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80091f6:	bfac      	ite	ge
 80091f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80091fa:	81a3      	strhlt	r3, [r4, #12]
 80091fc:	bd10      	pop	{r4, pc}

080091fe <__swrite>:
 80091fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009202:	461f      	mov	r7, r3
 8009204:	898b      	ldrh	r3, [r1, #12]
 8009206:	05db      	lsls	r3, r3, #23
 8009208:	4605      	mov	r5, r0
 800920a:	460c      	mov	r4, r1
 800920c:	4616      	mov	r6, r2
 800920e:	d505      	bpl.n	800921c <__swrite+0x1e>
 8009210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009214:	2302      	movs	r3, #2
 8009216:	2200      	movs	r2, #0
 8009218:	f000 f874 	bl	8009304 <_lseek_r>
 800921c:	89a3      	ldrh	r3, [r4, #12]
 800921e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009222:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009226:	81a3      	strh	r3, [r4, #12]
 8009228:	4632      	mov	r2, r6
 800922a:	463b      	mov	r3, r7
 800922c:	4628      	mov	r0, r5
 800922e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009232:	f000 b823 	b.w	800927c <_write_r>

08009236 <__sseek>:
 8009236:	b510      	push	{r4, lr}
 8009238:	460c      	mov	r4, r1
 800923a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800923e:	f000 f861 	bl	8009304 <_lseek_r>
 8009242:	1c43      	adds	r3, r0, #1
 8009244:	89a3      	ldrh	r3, [r4, #12]
 8009246:	bf15      	itete	ne
 8009248:	6560      	strne	r0, [r4, #84]	; 0x54
 800924a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800924e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009252:	81a3      	strheq	r3, [r4, #12]
 8009254:	bf18      	it	ne
 8009256:	81a3      	strhne	r3, [r4, #12]
 8009258:	bd10      	pop	{r4, pc}

0800925a <__sclose>:
 800925a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800925e:	f000 b81f 	b.w	80092a0 <_close_r>

08009262 <strchr>:
 8009262:	b2c9      	uxtb	r1, r1
 8009264:	4603      	mov	r3, r0
 8009266:	f810 2b01 	ldrb.w	r2, [r0], #1
 800926a:	b11a      	cbz	r2, 8009274 <strchr+0x12>
 800926c:	428a      	cmp	r2, r1
 800926e:	d1f9      	bne.n	8009264 <strchr+0x2>
 8009270:	4618      	mov	r0, r3
 8009272:	4770      	bx	lr
 8009274:	2900      	cmp	r1, #0
 8009276:	bf18      	it	ne
 8009278:	2300      	movne	r3, #0
 800927a:	e7f9      	b.n	8009270 <strchr+0xe>

0800927c <_write_r>:
 800927c:	b538      	push	{r3, r4, r5, lr}
 800927e:	4d07      	ldr	r5, [pc, #28]	; (800929c <_write_r+0x20>)
 8009280:	4604      	mov	r4, r0
 8009282:	4608      	mov	r0, r1
 8009284:	4611      	mov	r1, r2
 8009286:	2200      	movs	r2, #0
 8009288:	602a      	str	r2, [r5, #0]
 800928a:	461a      	mov	r2, r3
 800928c:	f7fe f83c 	bl	8007308 <_write>
 8009290:	1c43      	adds	r3, r0, #1
 8009292:	d102      	bne.n	800929a <_write_r+0x1e>
 8009294:	682b      	ldr	r3, [r5, #0]
 8009296:	b103      	cbz	r3, 800929a <_write_r+0x1e>
 8009298:	6023      	str	r3, [r4, #0]
 800929a:	bd38      	pop	{r3, r4, r5, pc}
 800929c:	20000668 	.word	0x20000668

080092a0 <_close_r>:
 80092a0:	b538      	push	{r3, r4, r5, lr}
 80092a2:	4d06      	ldr	r5, [pc, #24]	; (80092bc <_close_r+0x1c>)
 80092a4:	2300      	movs	r3, #0
 80092a6:	4604      	mov	r4, r0
 80092a8:	4608      	mov	r0, r1
 80092aa:	602b      	str	r3, [r5, #0]
 80092ac:	f7f8 fe3b 	bl	8001f26 <_close>
 80092b0:	1c43      	adds	r3, r0, #1
 80092b2:	d102      	bne.n	80092ba <_close_r+0x1a>
 80092b4:	682b      	ldr	r3, [r5, #0]
 80092b6:	b103      	cbz	r3, 80092ba <_close_r+0x1a>
 80092b8:	6023      	str	r3, [r4, #0]
 80092ba:	bd38      	pop	{r3, r4, r5, pc}
 80092bc:	20000668 	.word	0x20000668

080092c0 <_fstat_r>:
 80092c0:	b538      	push	{r3, r4, r5, lr}
 80092c2:	4d07      	ldr	r5, [pc, #28]	; (80092e0 <_fstat_r+0x20>)
 80092c4:	2300      	movs	r3, #0
 80092c6:	4604      	mov	r4, r0
 80092c8:	4608      	mov	r0, r1
 80092ca:	4611      	mov	r1, r2
 80092cc:	602b      	str	r3, [r5, #0]
 80092ce:	f7f8 fe2d 	bl	8001f2c <_fstat>
 80092d2:	1c43      	adds	r3, r0, #1
 80092d4:	d102      	bne.n	80092dc <_fstat_r+0x1c>
 80092d6:	682b      	ldr	r3, [r5, #0]
 80092d8:	b103      	cbz	r3, 80092dc <_fstat_r+0x1c>
 80092da:	6023      	str	r3, [r4, #0]
 80092dc:	bd38      	pop	{r3, r4, r5, pc}
 80092de:	bf00      	nop
 80092e0:	20000668 	.word	0x20000668

080092e4 <_isatty_r>:
 80092e4:	b538      	push	{r3, r4, r5, lr}
 80092e6:	4d06      	ldr	r5, [pc, #24]	; (8009300 <_isatty_r+0x1c>)
 80092e8:	2300      	movs	r3, #0
 80092ea:	4604      	mov	r4, r0
 80092ec:	4608      	mov	r0, r1
 80092ee:	602b      	str	r3, [r5, #0]
 80092f0:	f7f8 fe21 	bl	8001f36 <_isatty>
 80092f4:	1c43      	adds	r3, r0, #1
 80092f6:	d102      	bne.n	80092fe <_isatty_r+0x1a>
 80092f8:	682b      	ldr	r3, [r5, #0]
 80092fa:	b103      	cbz	r3, 80092fe <_isatty_r+0x1a>
 80092fc:	6023      	str	r3, [r4, #0]
 80092fe:	bd38      	pop	{r3, r4, r5, pc}
 8009300:	20000668 	.word	0x20000668

08009304 <_lseek_r>:
 8009304:	b538      	push	{r3, r4, r5, lr}
 8009306:	4d07      	ldr	r5, [pc, #28]	; (8009324 <_lseek_r+0x20>)
 8009308:	4604      	mov	r4, r0
 800930a:	4608      	mov	r0, r1
 800930c:	4611      	mov	r1, r2
 800930e:	2200      	movs	r2, #0
 8009310:	602a      	str	r2, [r5, #0]
 8009312:	461a      	mov	r2, r3
 8009314:	f7f8 fe11 	bl	8001f3a <_lseek>
 8009318:	1c43      	adds	r3, r0, #1
 800931a:	d102      	bne.n	8009322 <_lseek_r+0x1e>
 800931c:	682b      	ldr	r3, [r5, #0]
 800931e:	b103      	cbz	r3, 8009322 <_lseek_r+0x1e>
 8009320:	6023      	str	r3, [r4, #0]
 8009322:	bd38      	pop	{r3, r4, r5, pc}
 8009324:	20000668 	.word	0x20000668

08009328 <__malloc_lock>:
 8009328:	4801      	ldr	r0, [pc, #4]	; (8009330 <__malloc_lock+0x8>)
 800932a:	f7ff bb49 	b.w	80089c0 <__retarget_lock_acquire_recursive>
 800932e:	bf00      	nop
 8009330:	20000660 	.word	0x20000660

08009334 <__malloc_unlock>:
 8009334:	4801      	ldr	r0, [pc, #4]	; (800933c <__malloc_unlock+0x8>)
 8009336:	f7ff bb44 	b.w	80089c2 <__retarget_lock_release_recursive>
 800933a:	bf00      	nop
 800933c:	20000660 	.word	0x20000660

08009340 <_read_r>:
 8009340:	b538      	push	{r3, r4, r5, lr}
 8009342:	4d07      	ldr	r5, [pc, #28]	; (8009360 <_read_r+0x20>)
 8009344:	4604      	mov	r4, r0
 8009346:	4608      	mov	r0, r1
 8009348:	4611      	mov	r1, r2
 800934a:	2200      	movs	r2, #0
 800934c:	602a      	str	r2, [r5, #0]
 800934e:	461a      	mov	r2, r3
 8009350:	f7f8 fddc 	bl	8001f0c <_read>
 8009354:	1c43      	adds	r3, r0, #1
 8009356:	d102      	bne.n	800935e <_read_r+0x1e>
 8009358:	682b      	ldr	r3, [r5, #0]
 800935a:	b103      	cbz	r3, 800935e <_read_r+0x1e>
 800935c:	6023      	str	r3, [r4, #0]
 800935e:	bd38      	pop	{r3, r4, r5, pc}
 8009360:	20000668 	.word	0x20000668

08009364 <_init>:
 8009364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009366:	bf00      	nop
 8009368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800936a:	bc08      	pop	{r3}
 800936c:	469e      	mov	lr, r3
 800936e:	4770      	bx	lr

08009370 <_fini>:
 8009370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009372:	bf00      	nop
 8009374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009376:	bc08      	pop	{r3}
 8009378:	469e      	mov	lr, r3
 800937a:	4770      	bx	lr
