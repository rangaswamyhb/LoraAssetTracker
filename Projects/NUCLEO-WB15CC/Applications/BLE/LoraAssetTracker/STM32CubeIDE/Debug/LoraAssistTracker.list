
LoraAssistTracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000142b0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000249c  080143f0  080143f0  000243f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801688c  0801688c  0002688c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016894  08016894  00026894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08016898  08016898  00026898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000019c  20000008  0801689c  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  200001a4  08016a38  000301a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_APP_CONTEXT 00000088  20000240  08016ad1  00030240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_DRIVER_CONTEXT 00000021  200002c8  08016b59  000302c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 SYSTEM_DRIVER_CONTEXT 0000000e  200002ec  08016b7a  000302ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000994  200002fc  08016b88  000302fc  2**2
                  ALLOC
 12 ._user_heap_stack 00001400  20000c90  08016b88  00030c90  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000302fa  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 15 MB_MEM1       000001b8  20030028  20030028  00040000  2**2
                  ALLOC
 16 MB_MEM2       00001ddb  200301e0  200301e0  00040000  2**2
                  ALLOC
 17 .debug_info   000a436d  00000000  00000000  0003032a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 000114f5  00000000  00000000  000d4697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    0003902a  00000000  00000000  000e5b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00003290  00000000  00000000  0011ebb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00007660  00000000  00000000  00121e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  00031e85  00000000  00000000  001294a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   00064811  00000000  00000000  0015b32d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    000eed19  00000000  00000000  001bfb3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      00000053  00000000  00000000  002ae857  2**0
                  CONTENTS, READONLY
 26 .debug_frame  0000b190  00000000  00000000  002ae8ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002fc 	.word	0x200002fc
 800015c:	00000000 	.word	0x00000000
 8000160:	080143d8 	.word	0x080143d8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000300 	.word	0x20000300
 800017c:	080143d8 	.word	0x080143d8

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__gedf2>:
 8000598:	f04f 3cff 	mov.w	ip, #4294967295
 800059c:	e006      	b.n	80005ac <__cmpdf2+0x4>
 800059e:	bf00      	nop

080005a0 <__ledf2>:
 80005a0:	f04f 0c01 	mov.w	ip, #1
 80005a4:	e002      	b.n	80005ac <__cmpdf2+0x4>
 80005a6:	bf00      	nop

080005a8 <__cmpdf2>:
 80005a8:	f04f 0c01 	mov.w	ip, #1
 80005ac:	f84d cd04 	str.w	ip, [sp, #-4]!
 80005b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005bc:	bf18      	it	ne
 80005be:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005c2:	d01b      	beq.n	80005fc <__cmpdf2+0x54>
 80005c4:	b001      	add	sp, #4
 80005c6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005ca:	bf0c      	ite	eq
 80005cc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005d0:	ea91 0f03 	teqne	r1, r3
 80005d4:	bf02      	ittt	eq
 80005d6:	ea90 0f02 	teqeq	r0, r2
 80005da:	2000      	moveq	r0, #0
 80005dc:	4770      	bxeq	lr
 80005de:	f110 0f00 	cmn.w	r0, #0
 80005e2:	ea91 0f03 	teq	r1, r3
 80005e6:	bf58      	it	pl
 80005e8:	4299      	cmppl	r1, r3
 80005ea:	bf08      	it	eq
 80005ec:	4290      	cmpeq	r0, r2
 80005ee:	bf2c      	ite	cs
 80005f0:	17d8      	asrcs	r0, r3, #31
 80005f2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005f6:	f040 0001 	orr.w	r0, r0, #1
 80005fa:	4770      	bx	lr
 80005fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000600:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000604:	d102      	bne.n	800060c <__cmpdf2+0x64>
 8000606:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800060a:	d107      	bne.n	800061c <__cmpdf2+0x74>
 800060c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000610:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000614:	d1d6      	bne.n	80005c4 <__cmpdf2+0x1c>
 8000616:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800061a:	d0d3      	beq.n	80005c4 <__cmpdf2+0x1c>
 800061c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <__aeabi_cdrcmple>:
 8000624:	4684      	mov	ip, r0
 8000626:	4610      	mov	r0, r2
 8000628:	4662      	mov	r2, ip
 800062a:	468c      	mov	ip, r1
 800062c:	4619      	mov	r1, r3
 800062e:	4663      	mov	r3, ip
 8000630:	e000      	b.n	8000634 <__aeabi_cdcmpeq>
 8000632:	bf00      	nop

08000634 <__aeabi_cdcmpeq>:
 8000634:	b501      	push	{r0, lr}
 8000636:	f7ff ffb7 	bl	80005a8 <__cmpdf2>
 800063a:	2800      	cmp	r0, #0
 800063c:	bf48      	it	mi
 800063e:	f110 0f00 	cmnmi.w	r0, #0
 8000642:	bd01      	pop	{r0, pc}

08000644 <__aeabi_dcmpeq>:
 8000644:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000648:	f7ff fff4 	bl	8000634 <__aeabi_cdcmpeq>
 800064c:	bf0c      	ite	eq
 800064e:	2001      	moveq	r0, #1
 8000650:	2000      	movne	r0, #0
 8000652:	f85d fb08 	ldr.w	pc, [sp], #8
 8000656:	bf00      	nop

08000658 <__aeabi_dcmplt>:
 8000658:	f84d ed08 	str.w	lr, [sp, #-8]!
 800065c:	f7ff ffea 	bl	8000634 <__aeabi_cdcmpeq>
 8000660:	bf34      	ite	cc
 8000662:	2001      	movcc	r0, #1
 8000664:	2000      	movcs	r0, #0
 8000666:	f85d fb08 	ldr.w	pc, [sp], #8
 800066a:	bf00      	nop

0800066c <__aeabi_dcmple>:
 800066c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000670:	f7ff ffe0 	bl	8000634 <__aeabi_cdcmpeq>
 8000674:	bf94      	ite	ls
 8000676:	2001      	movls	r0, #1
 8000678:	2000      	movhi	r0, #0
 800067a:	f85d fb08 	ldr.w	pc, [sp], #8
 800067e:	bf00      	nop

08000680 <__aeabi_dcmpge>:
 8000680:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000684:	f7ff ffce 	bl	8000624 <__aeabi_cdrcmple>
 8000688:	bf94      	ite	ls
 800068a:	2001      	movls	r0, #1
 800068c:	2000      	movhi	r0, #0
 800068e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000692:	bf00      	nop

08000694 <__aeabi_dcmpgt>:
 8000694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000698:	f7ff ffc4 	bl	8000624 <__aeabi_cdrcmple>
 800069c:	bf34      	ite	cc
 800069e:	2001      	movcc	r0, #1
 80006a0:	2000      	movcs	r0, #0
 80006a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a6:	bf00      	nop

080006a8 <__aeabi_d2iz>:
 80006a8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80006ac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80006b0:	d215      	bcs.n	80006de <__aeabi_d2iz+0x36>
 80006b2:	d511      	bpl.n	80006d8 <__aeabi_d2iz+0x30>
 80006b4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80006b8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80006bc:	d912      	bls.n	80006e4 <__aeabi_d2iz+0x3c>
 80006be:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006c6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80006ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006ce:	fa23 f002 	lsr.w	r0, r3, r2
 80006d2:	bf18      	it	ne
 80006d4:	4240      	negne	r0, r0
 80006d6:	4770      	bx	lr
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	4770      	bx	lr
 80006de:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80006e2:	d105      	bne.n	80006f0 <__aeabi_d2iz+0x48>
 80006e4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80006e8:	bf08      	it	eq
 80006ea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80006ee:	4770      	bx	lr
 80006f0:	f04f 0000 	mov.w	r0, #0
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop

080006f8 <__aeabi_uldivmod>:
 80006f8:	b953      	cbnz	r3, 8000710 <__aeabi_uldivmod+0x18>
 80006fa:	b94a      	cbnz	r2, 8000710 <__aeabi_uldivmod+0x18>
 80006fc:	2900      	cmp	r1, #0
 80006fe:	bf08      	it	eq
 8000700:	2800      	cmpeq	r0, #0
 8000702:	bf1c      	itt	ne
 8000704:	f04f 31ff 	movne.w	r1, #4294967295
 8000708:	f04f 30ff 	movne.w	r0, #4294967295
 800070c:	f000 b96e 	b.w	80009ec <__aeabi_idiv0>
 8000710:	f1ad 0c08 	sub.w	ip, sp, #8
 8000714:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000718:	f000 f806 	bl	8000728 <__udivmoddi4>
 800071c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000720:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000724:	b004      	add	sp, #16
 8000726:	4770      	bx	lr

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	4604      	mov	r4, r0
 8000730:	468c      	mov	ip, r1
 8000732:	2b00      	cmp	r3, #0
 8000734:	f040 8083 	bne.w	800083e <__udivmoddi4+0x116>
 8000738:	428a      	cmp	r2, r1
 800073a:	4617      	mov	r7, r2
 800073c:	d947      	bls.n	80007ce <__udivmoddi4+0xa6>
 800073e:	fab2 f282 	clz	r2, r2
 8000742:	b142      	cbz	r2, 8000756 <__udivmoddi4+0x2e>
 8000744:	f1c2 0020 	rsb	r0, r2, #32
 8000748:	fa24 f000 	lsr.w	r0, r4, r0
 800074c:	4091      	lsls	r1, r2
 800074e:	4097      	lsls	r7, r2
 8000750:	ea40 0c01 	orr.w	ip, r0, r1
 8000754:	4094      	lsls	r4, r2
 8000756:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800075a:	0c23      	lsrs	r3, r4, #16
 800075c:	fbbc f6f8 	udiv	r6, ip, r8
 8000760:	fa1f fe87 	uxth.w	lr, r7
 8000764:	fb08 c116 	mls	r1, r8, r6, ip
 8000768:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800076c:	fb06 f10e 	mul.w	r1, r6, lr
 8000770:	4299      	cmp	r1, r3
 8000772:	d909      	bls.n	8000788 <__udivmoddi4+0x60>
 8000774:	18fb      	adds	r3, r7, r3
 8000776:	f106 30ff 	add.w	r0, r6, #4294967295
 800077a:	f080 8119 	bcs.w	80009b0 <__udivmoddi4+0x288>
 800077e:	4299      	cmp	r1, r3
 8000780:	f240 8116 	bls.w	80009b0 <__udivmoddi4+0x288>
 8000784:	3e02      	subs	r6, #2
 8000786:	443b      	add	r3, r7
 8000788:	1a5b      	subs	r3, r3, r1
 800078a:	b2a4      	uxth	r4, r4
 800078c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000790:	fb08 3310 	mls	r3, r8, r0, r3
 8000794:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000798:	fb00 fe0e 	mul.w	lr, r0, lr
 800079c:	45a6      	cmp	lr, r4
 800079e:	d909      	bls.n	80007b4 <__udivmoddi4+0x8c>
 80007a0:	193c      	adds	r4, r7, r4
 80007a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007a6:	f080 8105 	bcs.w	80009b4 <__udivmoddi4+0x28c>
 80007aa:	45a6      	cmp	lr, r4
 80007ac:	f240 8102 	bls.w	80009b4 <__udivmoddi4+0x28c>
 80007b0:	3802      	subs	r0, #2
 80007b2:	443c      	add	r4, r7
 80007b4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007b8:	eba4 040e 	sub.w	r4, r4, lr
 80007bc:	2600      	movs	r6, #0
 80007be:	b11d      	cbz	r5, 80007c8 <__udivmoddi4+0xa0>
 80007c0:	40d4      	lsrs	r4, r2
 80007c2:	2300      	movs	r3, #0
 80007c4:	e9c5 4300 	strd	r4, r3, [r5]
 80007c8:	4631      	mov	r1, r6
 80007ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ce:	b902      	cbnz	r2, 80007d2 <__udivmoddi4+0xaa>
 80007d0:	deff      	udf	#255	; 0xff
 80007d2:	fab2 f282 	clz	r2, r2
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d150      	bne.n	800087c <__udivmoddi4+0x154>
 80007da:	1bcb      	subs	r3, r1, r7
 80007dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007e0:	fa1f f887 	uxth.w	r8, r7
 80007e4:	2601      	movs	r6, #1
 80007e6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ea:	0c21      	lsrs	r1, r4, #16
 80007ec:	fb0e 331c 	mls	r3, lr, ip, r3
 80007f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007f4:	fb08 f30c 	mul.w	r3, r8, ip
 80007f8:	428b      	cmp	r3, r1
 80007fa:	d907      	bls.n	800080c <__udivmoddi4+0xe4>
 80007fc:	1879      	adds	r1, r7, r1
 80007fe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000802:	d202      	bcs.n	800080a <__udivmoddi4+0xe2>
 8000804:	428b      	cmp	r3, r1
 8000806:	f200 80e9 	bhi.w	80009dc <__udivmoddi4+0x2b4>
 800080a:	4684      	mov	ip, r0
 800080c:	1ac9      	subs	r1, r1, r3
 800080e:	b2a3      	uxth	r3, r4
 8000810:	fbb1 f0fe 	udiv	r0, r1, lr
 8000814:	fb0e 1110 	mls	r1, lr, r0, r1
 8000818:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800081c:	fb08 f800 	mul.w	r8, r8, r0
 8000820:	45a0      	cmp	r8, r4
 8000822:	d907      	bls.n	8000834 <__udivmoddi4+0x10c>
 8000824:	193c      	adds	r4, r7, r4
 8000826:	f100 33ff 	add.w	r3, r0, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x10a>
 800082c:	45a0      	cmp	r8, r4
 800082e:	f200 80d9 	bhi.w	80009e4 <__udivmoddi4+0x2bc>
 8000832:	4618      	mov	r0, r3
 8000834:	eba4 0408 	sub.w	r4, r4, r8
 8000838:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800083c:	e7bf      	b.n	80007be <__udivmoddi4+0x96>
 800083e:	428b      	cmp	r3, r1
 8000840:	d909      	bls.n	8000856 <__udivmoddi4+0x12e>
 8000842:	2d00      	cmp	r5, #0
 8000844:	f000 80b1 	beq.w	80009aa <__udivmoddi4+0x282>
 8000848:	2600      	movs	r6, #0
 800084a:	e9c5 0100 	strd	r0, r1, [r5]
 800084e:	4630      	mov	r0, r6
 8000850:	4631      	mov	r1, r6
 8000852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000856:	fab3 f683 	clz	r6, r3
 800085a:	2e00      	cmp	r6, #0
 800085c:	d14a      	bne.n	80008f4 <__udivmoddi4+0x1cc>
 800085e:	428b      	cmp	r3, r1
 8000860:	d302      	bcc.n	8000868 <__udivmoddi4+0x140>
 8000862:	4282      	cmp	r2, r0
 8000864:	f200 80b8 	bhi.w	80009d8 <__udivmoddi4+0x2b0>
 8000868:	1a84      	subs	r4, r0, r2
 800086a:	eb61 0103 	sbc.w	r1, r1, r3
 800086e:	2001      	movs	r0, #1
 8000870:	468c      	mov	ip, r1
 8000872:	2d00      	cmp	r5, #0
 8000874:	d0a8      	beq.n	80007c8 <__udivmoddi4+0xa0>
 8000876:	e9c5 4c00 	strd	r4, ip, [r5]
 800087a:	e7a5      	b.n	80007c8 <__udivmoddi4+0xa0>
 800087c:	f1c2 0320 	rsb	r3, r2, #32
 8000880:	fa20 f603 	lsr.w	r6, r0, r3
 8000884:	4097      	lsls	r7, r2
 8000886:	fa01 f002 	lsl.w	r0, r1, r2
 800088a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800088e:	40d9      	lsrs	r1, r3
 8000890:	4330      	orrs	r0, r6
 8000892:	0c03      	lsrs	r3, r0, #16
 8000894:	fbb1 f6fe 	udiv	r6, r1, lr
 8000898:	fa1f f887 	uxth.w	r8, r7
 800089c:	fb0e 1116 	mls	r1, lr, r6, r1
 80008a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a4:	fb06 f108 	mul.w	r1, r6, r8
 80008a8:	4299      	cmp	r1, r3
 80008aa:	fa04 f402 	lsl.w	r4, r4, r2
 80008ae:	d909      	bls.n	80008c4 <__udivmoddi4+0x19c>
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	f106 3cff 	add.w	ip, r6, #4294967295
 80008b6:	f080 808d 	bcs.w	80009d4 <__udivmoddi4+0x2ac>
 80008ba:	4299      	cmp	r1, r3
 80008bc:	f240 808a 	bls.w	80009d4 <__udivmoddi4+0x2ac>
 80008c0:	3e02      	subs	r6, #2
 80008c2:	443b      	add	r3, r7
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b281      	uxth	r1, r0
 80008c8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008cc:	fb0e 3310 	mls	r3, lr, r0, r3
 80008d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008d4:	fb00 f308 	mul.w	r3, r0, r8
 80008d8:	428b      	cmp	r3, r1
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x1c4>
 80008dc:	1879      	adds	r1, r7, r1
 80008de:	f100 3cff 	add.w	ip, r0, #4294967295
 80008e2:	d273      	bcs.n	80009cc <__udivmoddi4+0x2a4>
 80008e4:	428b      	cmp	r3, r1
 80008e6:	d971      	bls.n	80009cc <__udivmoddi4+0x2a4>
 80008e8:	3802      	subs	r0, #2
 80008ea:	4439      	add	r1, r7
 80008ec:	1acb      	subs	r3, r1, r3
 80008ee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008f2:	e778      	b.n	80007e6 <__udivmoddi4+0xbe>
 80008f4:	f1c6 0c20 	rsb	ip, r6, #32
 80008f8:	fa03 f406 	lsl.w	r4, r3, r6
 80008fc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000900:	431c      	orrs	r4, r3
 8000902:	fa20 f70c 	lsr.w	r7, r0, ip
 8000906:	fa01 f306 	lsl.w	r3, r1, r6
 800090a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800090e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000912:	431f      	orrs	r7, r3
 8000914:	0c3b      	lsrs	r3, r7, #16
 8000916:	fbb1 f9fe 	udiv	r9, r1, lr
 800091a:	fa1f f884 	uxth.w	r8, r4
 800091e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000922:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000926:	fb09 fa08 	mul.w	sl, r9, r8
 800092a:	458a      	cmp	sl, r1
 800092c:	fa02 f206 	lsl.w	r2, r2, r6
 8000930:	fa00 f306 	lsl.w	r3, r0, r6
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x220>
 8000936:	1861      	adds	r1, r4, r1
 8000938:	f109 30ff 	add.w	r0, r9, #4294967295
 800093c:	d248      	bcs.n	80009d0 <__udivmoddi4+0x2a8>
 800093e:	458a      	cmp	sl, r1
 8000940:	d946      	bls.n	80009d0 <__udivmoddi4+0x2a8>
 8000942:	f1a9 0902 	sub.w	r9, r9, #2
 8000946:	4421      	add	r1, r4
 8000948:	eba1 010a 	sub.w	r1, r1, sl
 800094c:	b2bf      	uxth	r7, r7
 800094e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000952:	fb0e 1110 	mls	r1, lr, r0, r1
 8000956:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800095a:	fb00 f808 	mul.w	r8, r0, r8
 800095e:	45b8      	cmp	r8, r7
 8000960:	d907      	bls.n	8000972 <__udivmoddi4+0x24a>
 8000962:	19e7      	adds	r7, r4, r7
 8000964:	f100 31ff 	add.w	r1, r0, #4294967295
 8000968:	d22e      	bcs.n	80009c8 <__udivmoddi4+0x2a0>
 800096a:	45b8      	cmp	r8, r7
 800096c:	d92c      	bls.n	80009c8 <__udivmoddi4+0x2a0>
 800096e:	3802      	subs	r0, #2
 8000970:	4427      	add	r7, r4
 8000972:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000976:	eba7 0708 	sub.w	r7, r7, r8
 800097a:	fba0 8902 	umull	r8, r9, r0, r2
 800097e:	454f      	cmp	r7, r9
 8000980:	46c6      	mov	lr, r8
 8000982:	4649      	mov	r1, r9
 8000984:	d31a      	bcc.n	80009bc <__udivmoddi4+0x294>
 8000986:	d017      	beq.n	80009b8 <__udivmoddi4+0x290>
 8000988:	b15d      	cbz	r5, 80009a2 <__udivmoddi4+0x27a>
 800098a:	ebb3 020e 	subs.w	r2, r3, lr
 800098e:	eb67 0701 	sbc.w	r7, r7, r1
 8000992:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000996:	40f2      	lsrs	r2, r6
 8000998:	ea4c 0202 	orr.w	r2, ip, r2
 800099c:	40f7      	lsrs	r7, r6
 800099e:	e9c5 2700 	strd	r2, r7, [r5]
 80009a2:	2600      	movs	r6, #0
 80009a4:	4631      	mov	r1, r6
 80009a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009aa:	462e      	mov	r6, r5
 80009ac:	4628      	mov	r0, r5
 80009ae:	e70b      	b.n	80007c8 <__udivmoddi4+0xa0>
 80009b0:	4606      	mov	r6, r0
 80009b2:	e6e9      	b.n	8000788 <__udivmoddi4+0x60>
 80009b4:	4618      	mov	r0, r3
 80009b6:	e6fd      	b.n	80007b4 <__udivmoddi4+0x8c>
 80009b8:	4543      	cmp	r3, r8
 80009ba:	d2e5      	bcs.n	8000988 <__udivmoddi4+0x260>
 80009bc:	ebb8 0e02 	subs.w	lr, r8, r2
 80009c0:	eb69 0104 	sbc.w	r1, r9, r4
 80009c4:	3801      	subs	r0, #1
 80009c6:	e7df      	b.n	8000988 <__udivmoddi4+0x260>
 80009c8:	4608      	mov	r0, r1
 80009ca:	e7d2      	b.n	8000972 <__udivmoddi4+0x24a>
 80009cc:	4660      	mov	r0, ip
 80009ce:	e78d      	b.n	80008ec <__udivmoddi4+0x1c4>
 80009d0:	4681      	mov	r9, r0
 80009d2:	e7b9      	b.n	8000948 <__udivmoddi4+0x220>
 80009d4:	4666      	mov	r6, ip
 80009d6:	e775      	b.n	80008c4 <__udivmoddi4+0x19c>
 80009d8:	4630      	mov	r0, r6
 80009da:	e74a      	b.n	8000872 <__udivmoddi4+0x14a>
 80009dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009e0:	4439      	add	r1, r7
 80009e2:	e713      	b.n	800080c <__udivmoddi4+0xe4>
 80009e4:	3802      	subs	r0, #2
 80009e6:	443c      	add	r4, r7
 80009e8:	e724      	b.n	8000834 <__udivmoddi4+0x10c>
 80009ea:	bf00      	nop

080009ec <__aeabi_idiv0>:
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <App_vLoraWanInit>:
{
	HW_TS_Stop(u8LoraWanTimerId);
}

void App_vLoraWanInit(void)
{
 80009f0:	b508      	push	{r3, lr}
	u8ProcessFlasg = 1;
 80009f2:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <App_vLoraWanInit+0x20>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	701a      	strb	r2, [r3, #0]
	lorawan_init();
 80009f8:	f003 f952 	bl	8003ca0 <lorawan_init>

	printf("App_vLoraWanInit\r\n");
 80009fc:	4805      	ldr	r0, [pc, #20]	; (8000a14 <App_vLoraWanInit+0x24>)
 80009fe:	f012 fb4f 	bl	80130a0 <puts>

	App_vLoraWanProcessTaskRun();
}
 8000a02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	UTIL_SEQ_RegTask( 1<< CFG_TASK_MY_LORA_WAN_PROCESS_TASK, UTIL_SEQ_RFU, App_vLoraWanProcess );
}

void App_vLoraWanProcessTaskRun(void)
{
	UTIL_SEQ_SetTask( 1<<CFG_TASK_MY_LORA_WAN_PROCESS_TASK, CFG_SCH_PRIO_0);
 8000a06:	2100      	movs	r1, #0
 8000a08:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a0c:	f012 b94a 	b.w	8012ca4 <UTIL_SEQ_SetTask>
 8000a10:	20000330 	.word	0x20000330
 8000a14:	080144cc 	.word	0x080144cc

08000a18 <App_vLoraPingPongInit>:
{
 8000a18:	b508      	push	{r3, lr}
	u8ProcessFlasg = 2;
 8000a1a:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <App_vLoraPingPongInit+0x20>)
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	701a      	strb	r2, [r3, #0]
	lorapingpong_init();
 8000a20:	f002 faf4 	bl	800300c <lorapingpong_init>
	printf("App_vLoraPingPongInit\r\n");
 8000a24:	4805      	ldr	r0, [pc, #20]	; (8000a3c <App_vLoraPingPongInit+0x24>)
 8000a26:	f012 fb3b 	bl	80130a0 <puts>
}
 8000a2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	UTIL_SEQ_RegTask( 1<< CFG_TASK_MY_LORA_PING_PONG_PROCESS_TASK, UTIL_SEQ_RFU, App_vLoraPingPongProcess );
}

void App_vLoraPingPongProcessTaskRun(void)
{
	UTIL_SEQ_SetTask( 1<<CFG_TASK_MY_LORA_PING_PONG_PROCESS_TASK, CFG_SCH_PRIO_0);
 8000a2e:	2100      	movs	r1, #0
 8000a30:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000a34:	f012 b936 	b.w	8012ca4 <UTIL_SEQ_SetTask>
 8000a38:	20000330 	.word	0x20000330
 8000a3c:	080144e0 	.word	0x080144e0

08000a40 <App_vNotifyDataTask>:
	u16NotifyData++;
 8000a40:	4908      	ldr	r1, [pc, #32]	; (8000a64 <App_vNotifyDataTask+0x24>)
 8000a42:	880b      	ldrh	r3, [r1, #0]
 8000a44:	3301      	adds	r3, #1
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	800b      	strh	r3, [r1, #0]
	if(u16NotifyData % 2)
 8000a4a:	07db      	lsls	r3, r3, #31
		P2PS_STM_App_Update_Char_With_Len(P2P_NOTIFY_CHAR_UUID, (uint16_t *)&u16NotifyData, 2);
 8000a4c:	f04f 0202 	mov.w	r2, #2
	if(u16NotifyData % 2)
 8000a50:	d503      	bpl.n	8000a5a <App_vNotifyDataTask+0x1a>
		P2PS_STM_App_Update_Char_With_Len(P2P_NOTIFY_CHAR_UUID, (uint16_t *)&u16NotifyData, 2);
 8000a52:	f64f 6042 	movw	r0, #65090	; 0xfe42
 8000a56:	f011 bb85 	b.w	8012164 <P2PS_STM_App_Update_Char_With_Len>
		P2PS_STM_App_Update_Char_With_Len(P2P_WRITE_CHAR_UUID, (uint16_t *)&u16NotifyData, 2);
 8000a5a:	f64f 6041 	movw	r0, #65089	; 0xfe41
 8000a5e:	f011 bb81 	b.w	8012164 <P2PS_STM_App_Update_Char_With_Len>
 8000a62:	bf00      	nop
 8000a64:	20000320 	.word	0x20000320

08000a68 <App_vLoraPingPongTimerHandler>:
{
 8000a68:	b538      	push	{r3, r4, r5, lr}
	u32LoraPingPongOneMinTimerCounter++;
 8000a6a:	4c0d      	ldr	r4, [pc, #52]	; (8000aa0 <App_vLoraPingPongTimerHandler+0x38>)
 8000a6c:	6823      	ldr	r3, [r4, #0]
 8000a6e:	3301      	adds	r3, #1
	if(u32LoraPingPongOneMinTimerCounter > 10)
 8000a70:	2b0a      	cmp	r3, #10
 8000a72:	d801      	bhi.n	8000a78 <App_vLoraPingPongTimerHandler+0x10>
	u32LoraPingPongOneMinTimerCounter++;
 8000a74:	6023      	str	r3, [r4, #0]
}
 8000a76:	bd38      	pop	{r3, r4, r5, pc}
		u32LoraPingPongOneMinTimerCounter = 0;
 8000a78:	2500      	movs	r5, #0
	UTIL_SEQ_SetTask( 1<<CFG_TASK_MY_LORA_WAN_INIT_TASK, CFG_SCH_PRIO_0);
 8000a7a:	4629      	mov	r1, r5
 8000a7c:	f44f 7080 	mov.w	r0, #256	; 0x100
		u32LoraPingPongOneMinTimerCounter = 0;
 8000a80:	6025      	str	r5, [r4, #0]
	UTIL_SEQ_SetTask( 1<<CFG_TASK_MY_LORA_WAN_INIT_TASK, CFG_SCH_PRIO_0);
 8000a82:	f012 f90f 	bl	8012ca4 <UTIL_SEQ_SetTask>
	HW_TS_Start(u8LoraWanTimerId, u32Timeout);
 8000a86:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <App_vLoraPingPongTimerHandler+0x3c>)
 8000a88:	4907      	ldr	r1, [pc, #28]	; (8000aa8 <App_vLoraPingPongTimerHandler+0x40>)
 8000a8a:	7818      	ldrb	r0, [r3, #0]
	u32LoraPingPongOneMinTimerCounter = 0;
 8000a8c:	6025      	str	r5, [r4, #0]
	HW_TS_Start(u8LoraWanTimerId, u32Timeout);
 8000a8e:	f000 fe79 	bl	8001784 <HW_TS_Start>
	HW_TS_Stop(u8LoraPingPongTimerId);
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <App_vLoraPingPongTimerHandler+0x44>)
 8000a94:	7818      	ldrb	r0, [r3, #0]
}
 8000a96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HW_TS_Stop(u8LoraPingPongTimerId);
 8000a9a:	f000 be15 	b.w	80016c8 <HW_TS_Stop>
 8000a9e:	bf00      	nop
 8000aa0:	20000328 	.word	0x20000328
 8000aa4:	2000032f 	.word	0x2000032f
 8000aa8:	0005a0d4 	.word	0x0005a0d4
 8000aac:	2000032e 	.word	0x2000032e

08000ab0 <App_vLoraWanTimerHandler>:
{
 8000ab0:	b508      	push	{r3, lr}
	}
}

eLoraModuleSelector_t App_eLoraModuleSelectorModeGet(void)
{
	return eLoraModuleSelector;
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <App_vLoraWanTimerHandler+0x2c>)
	if(App_eLoraModuleSelectorModeGet() == LORA_MODULE_PING_PONG)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d000      	beq.n	8000abc <App_vLoraWanTimerHandler+0xc>
}
 8000aba:	bd08      	pop	{r3, pc}
	UTIL_SEQ_SetTask( 1<<CFG_TASK_MY_LORA_PING_PONG_INT_TASK, CFG_SCH_PRIO_0);
 8000abc:	2100      	movs	r1, #0
 8000abe:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000ac2:	f012 f8ef 	bl	8012ca4 <UTIL_SEQ_SetTask>
	HW_TS_Start(u8LoraPingPongTimerId, u32Timeout);
 8000ac6:	4a06      	ldr	r2, [pc, #24]	; (8000ae0 <App_vLoraWanTimerHandler+0x30>)
	u32LoraPingPongOneMinTimerCounter = 0;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <App_vLoraWanTimerHandler+0x34>)
	HW_TS_Start(u8LoraPingPongTimerId, u32Timeout);
 8000aca:	7810      	ldrb	r0, [r2, #0]
 8000acc:	4906      	ldr	r1, [pc, #24]	; (8000ae8 <App_vLoraWanTimerHandler+0x38>)
	u32LoraPingPongOneMinTimerCounter = 0;
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
}
 8000ad2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HW_TS_Start(u8LoraPingPongTimerId, u32Timeout);
 8000ad6:	f000 be55 	b.w	8001784 <HW_TS_Start>
 8000ada:	bf00      	nop
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	2000032e 	.word	0x2000032e
 8000ae4:	20000328 	.word	0x20000328
 8000ae8:	0001e046 	.word	0x0001e046

08000aec <App_vLoraTimeoutTimerCreate>:
{
 8000aec:	b510      	push	{r4, lr}
	HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(u8LoraPingPongTimerId), hw_ts_Repeated, App_vLoraPingPongTimerHandler);
 8000aee:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <App_vLoraTimeoutTimerCreate+0x20>)
 8000af0:	4907      	ldr	r1, [pc, #28]	; (8000b10 <App_vLoraTimeoutTimerCreate+0x24>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	2000      	movs	r0, #0
 8000af6:	f000 fdbd 	bl	8001674 <HW_TS_Create>
	HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(u8LoraWanTimerId), hw_ts_SingleShot, App_vLoraWanTimerHandler);
 8000afa:	2200      	movs	r2, #0
}
 8000afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(u8LoraWanTimerId), hw_ts_SingleShot, App_vLoraWanTimerHandler);
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <App_vLoraTimeoutTimerCreate+0x28>)
 8000b02:	4905      	ldr	r1, [pc, #20]	; (8000b18 <App_vLoraTimeoutTimerCreate+0x2c>)
 8000b04:	4610      	mov	r0, r2
 8000b06:	f000 bdb5 	b.w	8001674 <HW_TS_Create>
 8000b0a:	bf00      	nop
 8000b0c:	08000a69 	.word	0x08000a69
 8000b10:	2000032e 	.word	0x2000032e
 8000b14:	08000ab1 	.word	0x08000ab1
 8000b18:	2000032f 	.word	0x2000032f

08000b1c <App_vNotifyCreateTask>:
	UTIL_SEQ_RegTask( 1<< CFG_TASK_MY_NOTIFY_DATA, UTIL_SEQ_RFU, App_vNotifyDataTask );
 8000b1c:	4a02      	ldr	r2, [pc, #8]	; (8000b28 <App_vNotifyCreateTask+0xc>)
 8000b1e:	2100      	movs	r1, #0
 8000b20:	2040      	movs	r0, #64	; 0x40
 8000b22:	f012 b9e7 	b.w	8012ef4 <UTIL_SEQ_RegTask>
 8000b26:	bf00      	nop
 8000b28:	08000a41 	.word	0x08000a41

08000b2c <App_vLoraWanInitTaskCreate>:
	UTIL_SEQ_RegTask( 1<< CFG_TASK_MY_LORA_WAN_INIT_TASK, UTIL_SEQ_RFU, App_vLoraWanInit );
 8000b2c:	4a02      	ldr	r2, [pc, #8]	; (8000b38 <App_vLoraWanInitTaskCreate+0xc>)
 8000b2e:	2100      	movs	r1, #0
 8000b30:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000b34:	f012 b9de 	b.w	8012ef4 <UTIL_SEQ_RegTask>
 8000b38:	080009f1 	.word	0x080009f1

08000b3c <App_vLoraWanProcessTaskCreate>:
	UTIL_SEQ_RegTask( 1<< CFG_TASK_MY_LORA_WAN_PROCESS_TASK, UTIL_SEQ_RFU, App_vLoraWanProcess );
 8000b3c:	4a02      	ldr	r2, [pc, #8]	; (8000b48 <App_vLoraWanProcessTaskCreate+0xc>)
 8000b3e:	2100      	movs	r1, #0
 8000b40:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b44:	f012 b9d6 	b.w	8012ef4 <UTIL_SEQ_RegTask>
 8000b48:	08000c09 	.word	0x08000c09

08000b4c <App_vLoraWanProcessTaskRun>:
	UTIL_SEQ_SetTask( 1<<CFG_TASK_MY_LORA_WAN_PROCESS_TASK, CFG_SCH_PRIO_0);
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b52:	f012 b8a7 	b.w	8012ca4 <UTIL_SEQ_SetTask>
 8000b56:	bf00      	nop

08000b58 <App_vLoraPingPongInitTaskCreate>:
	UTIL_SEQ_RegTask( 1<< CFG_TASK_MY_LORA_PING_PONG_INT_TASK, UTIL_SEQ_RFU, App_vLoraPingPongInit );
 8000b58:	4a02      	ldr	r2, [pc, #8]	; (8000b64 <App_vLoraPingPongInitTaskCreate+0xc>)
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000b60:	f012 b9c8 	b.w	8012ef4 <UTIL_SEQ_RegTask>
 8000b64:	08000a19 	.word	0x08000a19

08000b68 <App_vLoraPingPongProcessTaskCreate>:
	UTIL_SEQ_RegTask( 1<< CFG_TASK_MY_LORA_PING_PONG_PROCESS_TASK, UTIL_SEQ_RFU, App_vLoraPingPongProcess );
 8000b68:	4a02      	ldr	r2, [pc, #8]	; (8000b74 <App_vLoraPingPongProcessTaskCreate+0xc>)
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000b70:	f012 b9c0 	b.w	8012ef4 <UTIL_SEQ_RegTask>
 8000b74:	08000c45 	.word	0x08000c45

08000b78 <App_vLoraModuleSelectorUpdate>:
	if(u32LoraModuleSelector < LORA_MODULE_MAX)
 8000b78:	2802      	cmp	r0, #2
		eLoraModuleSelector = u32LoraModuleSelector;
 8000b7a:	bf9c      	itt	ls
 8000b7c:	4b01      	ldrls	r3, [pc, #4]	; (8000b84 <App_vLoraModuleSelectorUpdate+0xc>)
 8000b7e:	7018      	strbls	r0, [r3, #0]
}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000008 	.word	0x20000008

08000b88 <App_vLoraAppStateMachineRun>:
}

void App_vLoraAppStateMachineRun(void)
{
 8000b88:	b510      	push	{r4, lr}

    switch(eLoraModuleSelector)
 8000b8a:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <App_vLoraAppStateMachineRun+0x4c>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d002      	beq.n	8000b98 <App_vLoraAppStateMachineRun+0x10>
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	d00a      	beq.n	8000bac <App_vLoraAppStateMachineRun+0x24>
    break;

    default:
    	break;
    }
}
 8000b96:	bd10      	pop	{r4, pc}
    	printf("App_vLoraAppStateMachineRun :: LORA_MODULE_WAN_NETWORK\r\n");
 8000b98:	480f      	ldr	r0, [pc, #60]	; (8000bd8 <App_vLoraAppStateMachineRun+0x50>)
 8000b9a:	f012 fa81 	bl	80130a0 <puts>
}
 8000b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	UTIL_SEQ_SetTask( 1<<CFG_TASK_MY_LORA_WAN_INIT_TASK, CFG_SCH_PRIO_0);
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000ba8:	f012 b87c 	b.w	8012ca4 <UTIL_SEQ_SetTask>
    	printf("App_vLoraAppStateMachineRun :: LORA_MODULE_PING_PONG\r\n");
 8000bac:	480b      	ldr	r0, [pc, #44]	; (8000bdc <App_vLoraAppStateMachineRun+0x54>)
 8000bae:	f012 fa77 	bl	80130a0 <puts>
}


void App_vLoraPingPongPacketCounterClear(void)
{
	u8LoraPingPongPacketCounter = 0;
 8000bb2:	2400      	movs	r4, #0
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <App_vLoraAppStateMachineRun+0x58>)
	UTIL_SEQ_SetTask( 1<<CFG_TASK_MY_LORA_PING_PONG_INT_TASK, CFG_SCH_PRIO_0);
 8000bb6:	4621      	mov	r1, r4
 8000bb8:	f44f 6080 	mov.w	r0, #1024	; 0x400
	u8LoraPingPongPacketCounter = 0;
 8000bbc:	701c      	strb	r4, [r3, #0]
	UTIL_SEQ_SetTask( 1<<CFG_TASK_MY_LORA_PING_PONG_INT_TASK, CFG_SCH_PRIO_0);
 8000bbe:	f012 f871 	bl	8012ca4 <UTIL_SEQ_SetTask>
	HW_TS_Start(u8LoraPingPongTimerId, u32Timeout);
 8000bc2:	4a08      	ldr	r2, [pc, #32]	; (8000be4 <App_vLoraAppStateMachineRun+0x5c>)
	u32LoraPingPongOneMinTimerCounter = 0;
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <App_vLoraAppStateMachineRun+0x60>)
	HW_TS_Start(u8LoraPingPongTimerId, u32Timeout);
 8000bc6:	7810      	ldrb	r0, [r2, #0]
	u32LoraPingPongOneMinTimerCounter = 0;
 8000bc8:	601c      	str	r4, [r3, #0]
	HW_TS_Start(u8LoraPingPongTimerId, u32Timeout);
 8000bca:	4908      	ldr	r1, [pc, #32]	; (8000bec <App_vLoraAppStateMachineRun+0x64>)
}
 8000bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HW_TS_Start(u8LoraPingPongTimerId, u32Timeout);
 8000bd0:	f000 bdd8 	b.w	8001784 <HW_TS_Start>
 8000bd4:	20000008 	.word	0x20000008
 8000bd8:	080144f8 	.word	0x080144f8
 8000bdc:	08014530 	.word	0x08014530
 8000be0:	2000032d 	.word	0x2000032d
 8000be4:	2000032e 	.word	0x2000032e
 8000be8:	20000328 	.word	0x20000328
 8000bec:	0001e046 	.word	0x0001e046

08000bf0 <App_vReqLoraAppRun.part.0>:
void App_vReqLoraAppRun(void)
 8000bf0:	b508      	push	{r3, lr}
		App_vLoraAppStateMachineRun();
 8000bf2:	f7ff ffc9 	bl	8000b88 <App_vLoraAppStateMachineRun>
		u32LoraModeSelector = eLoraModuleSelector;
 8000bf6:	4a02      	ldr	r2, [pc, #8]	; (8000c00 <App_vReqLoraAppRun.part.0+0x10>)
 8000bf8:	4b02      	ldr	r3, [pc, #8]	; (8000c04 <App_vReqLoraAppRun.part.0+0x14>)
 8000bfa:	7812      	ldrb	r2, [r2, #0]
 8000bfc:	601a      	str	r2, [r3, #0]
}
 8000bfe:	bd08      	pop	{r3, pc}
 8000c00:	20000008 	.word	0x20000008
 8000c04:	20000324 	.word	0x20000324

08000c08 <App_vLoraWanProcess>:
{
 8000c08:	b508      	push	{r3, lr}
	if(u8ProcessFlasg == 1)
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <App_vLoraWanProcess+0x30>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d00a      	beq.n	8000c28 <App_vLoraWanProcess+0x20>
	if(u32LoraModeSelector != eLoraModuleSelector)
 8000c12:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <App_vLoraWanProcess+0x34>)
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <App_vLoraWanProcess+0x38>)
 8000c16:	7812      	ldrb	r2, [r2, #0]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d100      	bne.n	8000c20 <App_vLoraWanProcess+0x18>
}
 8000c1e:	bd08      	pop	{r3, pc}
 8000c20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000c24:	f7ff bfe4 	b.w	8000bf0 <App_vReqLoraAppRun.part.0>
		lorawan_process();
 8000c28:	f003 f888 	bl	8003d3c <lorawan_process>
	UTIL_SEQ_SetTask( 1<<CFG_TASK_MY_LORA_WAN_PROCESS_TASK, CFG_SCH_PRIO_0);
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c32:	f012 f837 	bl	8012ca4 <UTIL_SEQ_SetTask>
}
 8000c36:	e7ec      	b.n	8000c12 <App_vLoraWanProcess+0xa>
 8000c38:	20000330 	.word	0x20000330
 8000c3c:	20000008 	.word	0x20000008
 8000c40:	20000324 	.word	0x20000324

08000c44 <App_vLoraPingPongProcess>:
{
 8000c44:	b508      	push	{r3, lr}
	if(u8ProcessFlasg == 2)
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <App_vLoraPingPongProcess+0x30>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d00a      	beq.n	8000c64 <App_vLoraPingPongProcess+0x20>
	if(u32LoraModeSelector != eLoraModuleSelector)
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <App_vLoraPingPongProcess+0x34>)
 8000c50:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <App_vLoraPingPongProcess+0x38>)
 8000c52:	7812      	ldrb	r2, [r2, #0]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d100      	bne.n	8000c5c <App_vLoraPingPongProcess+0x18>
}
 8000c5a:	bd08      	pop	{r3, pc}
 8000c5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000c60:	f7ff bfc6 	b.w	8000bf0 <App_vReqLoraAppRun.part.0>
		lorapingpong_process();
 8000c64:	f002 fa7a 	bl	800315c <lorapingpong_process>
	UTIL_SEQ_SetTask( 1<<CFG_TASK_MY_LORA_PING_PONG_PROCESS_TASK, CFG_SCH_PRIO_0);
 8000c68:	2100      	movs	r1, #0
 8000c6a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000c6e:	f012 f819 	bl	8012ca4 <UTIL_SEQ_SetTask>
}
 8000c72:	e7ec      	b.n	8000c4e <App_vLoraPingPongProcess+0xa>
 8000c74:	20000330 	.word	0x20000330
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	20000324 	.word	0x20000324

08000c80 <App_vReqLoraAppRun>:
	if(u32LoraModeSelector != eLoraModuleSelector)
 8000c80:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <App_vReqLoraAppRun+0x14>)
 8000c82:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <App_vReqLoraAppRun+0x18>)
 8000c84:	7812      	ldrb	r2, [r2, #0]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d100      	bne.n	8000c8e <App_vReqLoraAppRun+0xe>
}
 8000c8c:	4770      	bx	lr
 8000c8e:	f7ff bfaf 	b.w	8000bf0 <App_vReqLoraAppRun.part.0>
 8000c92:	bf00      	nop
 8000c94:	20000008 	.word	0x20000008
 8000c98:	20000324 	.word	0x20000324

08000c9c <App_vBleReceiveProcessData>:
{
 8000c9c:	b570      	push	{r4, r5, r6, lr}
	memset(&sBleRxData, 0x00, sizeof(sBleRxData));
 8000c9e:	4c27      	ldr	r4, [pc, #156]	; (8000d3c <App_vBleReceiveProcessData+0xa0>)
{
 8000ca0:	4606      	mov	r6, r0
 8000ca2:	460d      	mov	r5, r1
	memset(&sBleRxData, 0x00, sizeof(sBleRxData));
 8000ca4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4620      	mov	r0, r4
 8000cac:	f012 f96a 	bl	8012f84 <memset>
	memcpy((uint8_t *) &sBleRxData.au8Payload, (uint8_t *) pu8Data, u8Len);
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	462a      	mov	r2, r5
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f012 f957 	bl	8012f68 <memcpy>
	switch(sBleRxData.au8Payload[0])
 8000cba:	7826      	ldrb	r6, [r4, #0]
	sBleRxData.u8Length = u8Len;
 8000cbc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
	switch(sBleRxData.au8Payload[0])
 8000cc0:	2e03      	cmp	r6, #3
 8000cc2:	d01f      	beq.n	8000d04 <App_vBleReceiveProcessData+0x68>
 8000cc4:	2e4e      	cmp	r6, #78	; 0x4e
 8000cc6:	d018      	beq.n	8000cfa <App_vBleReceiveProcessData+0x5e>
 8000cc8:	2e01      	cmp	r6, #1
 8000cca:	d00a      	beq.n	8000ce2 <App_vBleReceiveProcessData+0x46>
 8000ccc:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <App_vBleReceiveProcessData+0xa4>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
	if(u32LoraModeSelector != eLoraModuleSelector)
 8000cd0:	4a1c      	ldr	r2, [pc, #112]	; (8000d44 <App_vBleReceiveProcessData+0xa8>)
 8000cd2:	6812      	ldr	r2, [r2, #0]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d100      	bne.n	8000cda <App_vBleReceiveProcessData+0x3e>
}
 8000cd8:	bd70      	pop	{r4, r5, r6, pc}
 8000cda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000cde:	f7ff bf87 	b.w	8000bf0 <App_vReqLoraAppRun.part.0>
		if(sBleRxData.au8Payload[1] == 0x55)
 8000ce2:	7863      	ldrb	r3, [r4, #1]
 8000ce4:	2b55      	cmp	r3, #85	; 0x55
 8000ce6:	d021      	beq.n	8000d2c <App_vBleReceiveProcessData+0x90>
		else if(sBleRxData.au8Payload[1] == 0xAA)
 8000ce8:	2baa      	cmp	r3, #170	; 0xaa
 8000cea:	d1ef      	bne.n	8000ccc <App_vBleReceiveProcessData+0x30>
			printf("BLE_RX_FRAME_MSG_TYPE_LORA_MODE :: LORA WAN\r\n");
 8000cec:	4816      	ldr	r0, [pc, #88]	; (8000d48 <App_vBleReceiveProcessData+0xac>)
 8000cee:	f012 f9d7 	bl	80130a0 <puts>
		eLoraModuleSelector = u32LoraModuleSelector;
 8000cf2:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <App_vBleReceiveProcessData+0xa4>)
 8000cf4:	4633      	mov	r3, r6
 8000cf6:	7016      	strb	r6, [r2, #0]
 8000cf8:	e7ea      	b.n	8000cd0 <App_vBleReceiveProcessData+0x34>
	UTIL_SEQ_SetTask( 1<<CFG_TASK_MY_NOTIFY_DATA, CFG_SCH_PRIO_0);
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2040      	movs	r0, #64	; 0x40
 8000cfe:	f011 ffd1 	bl	8012ca4 <UTIL_SEQ_SetTask>
 8000d02:	e7e3      	b.n	8000ccc <App_vBleReceiveProcessData+0x30>
		printf("BLE_RX_FRAME_MSG_TYPE_SLAVE_MASTER_SELECTOR\r\n");
 8000d04:	4811      	ldr	r0, [pc, #68]	; (8000d4c <App_vBleReceiveProcessData+0xb0>)
 8000d06:	f012 f9cb 	bl	80130a0 <puts>
		if(sBleRxData.au8Payload[1] == 0x01)
 8000d0a:	7863      	ldrb	r3, [r4, #1]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d007      	beq.n	8000d20 <App_vBleReceiveProcessData+0x84>
		else if(sBleRxData.au8Payload[1] == 0x02)
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d1db      	bne.n	8000ccc <App_vBleReceiveProcessData+0x30>
/* Lora Master / Smave Selector */
void App_vSetDeviceIsMaster(uint8_t u8Bool)
{
	if(u8Bool)
	{
		loraMasterSelector = TRUE;
 8000d14:	4a0e      	ldr	r2, [pc, #56]	; (8000d50 <App_vBleReceiveProcessData+0xb4>)
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <App_vBleReceiveProcessData+0xa4>)
 8000d18:	2101      	movs	r1, #1
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	6011      	str	r1, [r2, #0]
	}
	else
	{
		loraMasterSelector = FALSE;
	}
}
 8000d1e:	e7d7      	b.n	8000cd0 <App_vBleReceiveProcessData+0x34>
		loraMasterSelector = FALSE;
 8000d20:	4a0b      	ldr	r2, [pc, #44]	; (8000d50 <App_vBleReceiveProcessData+0xb4>)
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <App_vBleReceiveProcessData+0xa4>)
 8000d24:	2100      	movs	r1, #0
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	6011      	str	r1, [r2, #0]
}
 8000d2a:	e7d1      	b.n	8000cd0 <App_vBleReceiveProcessData+0x34>
			printf("BLE_RX_FRAME_MSG_TYPE_LORA_MODE :: LORA PING PONG\r\n");
 8000d2c:	4809      	ldr	r0, [pc, #36]	; (8000d54 <App_vBleReceiveProcessData+0xb8>)
 8000d2e:	f012 f9b7 	bl	80130a0 <puts>
		eLoraModuleSelector = u32LoraModuleSelector;
 8000d32:	4a03      	ldr	r2, [pc, #12]	; (8000d40 <App_vBleReceiveProcessData+0xa4>)
 8000d34:	2302      	movs	r3, #2
 8000d36:	7013      	strb	r3, [r2, #0]
 8000d38:	e7ca      	b.n	8000cd0 <App_vBleReceiveProcessData+0x34>
 8000d3a:	bf00      	nop
 8000d3c:	200006f8 	.word	0x200006f8
 8000d40:	20000008 	.word	0x20000008
 8000d44:	20000324 	.word	0x20000324
 8000d48:	0801459c 	.word	0x0801459c
 8000d4c:	080145cc 	.word	0x080145cc
 8000d50:	2000031c 	.word	0x2000031c
 8000d54:	08014568 	.word	0x08014568

08000d58 <App_vPrepareBleAdvData>:
{
 8000d58:	b470      	push	{r4, r5, r6}
	return (i8LoraSnrValue);
 8000d5a:	490c      	ldr	r1, [pc, #48]	; (8000d8c <App_vPrepareBleAdvData+0x34>)
	return eLoraModuleSelector;
 8000d5c:	4c0c      	ldr	r4, [pc, #48]	; (8000d90 <App_vPrepareBleAdvData+0x38>)
	memset((uint8_t *)&g_uBleAdvData, 0x00, sizeof(g_uBleAdvData));
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <App_vPrepareBleAdvData+0x3c>)
	return (i8LoraRssiValue);
 8000d60:	480d      	ldr	r0, [pc, #52]	; (8000d98 <App_vPrepareBleAdvData+0x40>)
	return (u8LoraPingPongPacketCounter);
 8000d62:	4a0e      	ldr	r2, [pc, #56]	; (8000d9c <App_vPrepareBleAdvData+0x44>)
	g_uBleAdvData.u8LoraMode = App_eLoraModuleSelectorModeGet();
 8000d64:	7826      	ldrb	r6, [r4, #0]
	g_uBleAdvData.au8Data[1] = App_vLoraSnrGet();
 8000d66:	780c      	ldrb	r4, [r1, #0]
	g_uBleAdvData.au8Data[0] = App_vLoraRssiGet();
 8000d68:	7805      	ldrb	r5, [r0, #0]
	g_uBleAdvData.au8Data[2] = App_vLoraPingPongPacketCounterGet();
 8000d6a:	7810      	ldrb	r0, [r2, #0]
	g_uBleAdvData.u8LoraMode = App_eLoraModuleSelectorModeGet();
 8000d6c:	f803 6c04 	strb.w	r6, [r3, #-4]
	memset((uint8_t *)&g_uBleAdvData, 0x00, sizeof(g_uBleAdvData));
 8000d70:	2100      	movs	r1, #0
	g_uBleAdvData.u8MsgType = BLE_ADV_FRAME_MSG_TYPE_ADV;
 8000d72:	2201      	movs	r2, #1
	memset((uint8_t *)&g_uBleAdvData, 0x00, sizeof(g_uBleAdvData));
 8000d74:	6019      	str	r1, [r3, #0]
 8000d76:	7119      	strb	r1, [r3, #4]
	g_uBleAdvData.au8Data[0] = App_vLoraRssiGet();
 8000d78:	f803 5c03 	strb.w	r5, [r3, #-3]
	g_uBleAdvData.au8Data[1] = App_vLoraSnrGet();
 8000d7c:	f803 4c02 	strb.w	r4, [r3, #-2]
	g_uBleAdvData.u8MsgType = BLE_ADV_FRAME_MSG_TYPE_ADV;
 8000d80:	f803 2c05 	strb.w	r2, [r3, #-5]
}
 8000d84:	bc70      	pop	{r4, r5, r6}
	g_uBleAdvData.au8Data[2] = App_vLoraPingPongPacketCounterGet();
 8000d86:	f803 0c01 	strb.w	r0, [r3, #-1]
}
 8000d8a:	4770      	bx	lr
 8000d8c:	20000319 	.word	0x20000319
 8000d90:	20000008 	.word	0x20000008
 8000d94:	200007fd 	.word	0x200007fd
 8000d98:	20000318 	.word	0x20000318
 8000d9c:	2000032d 	.word	0x2000032d

08000da0 <App_vBleAdvDataGet>:
	if(len > MAX_BLE_ADV_DATA)
 8000da0:	290a      	cmp	r1, #10
 8000da2:	d900      	bls.n	8000da6 <App_vBleAdvDataGet+0x6>
 8000da4:	4770      	bx	lr
{
 8000da6:	b538      	push	{r3, r4, r5, lr}
	memcpy((uint8_t *) pu8Data, (uint8_t *)&g_uBleAdvData.au8Payload, len);
 8000da8:	460a      	mov	r2, r1
 8000daa:	460c      	mov	r4, r1
 8000dac:	4605      	mov	r5, r0
 8000dae:	4905      	ldr	r1, [pc, #20]	; (8000dc4 <App_vBleAdvDataGet+0x24>)
 8000db0:	f012 f8da 	bl	8012f68 <memcpy>
	pu8Data[len - 2] = 0xBE;
 8000db4:	1928      	adds	r0, r5, r4
 8000db6:	22be      	movs	r2, #190	; 0xbe
	pu8Data[len - 1] = 0xEF;
 8000db8:	23ef      	movs	r3, #239	; 0xef
	pu8Data[len - 2] = 0xBE;
 8000dba:	f800 2c02 	strb.w	r2, [r0, #-2]
	pu8Data[len - 1] = 0xEF;
 8000dbe:	f800 3c01 	strb.w	r3, [r0, #-1]
}
 8000dc2:	bd38      	pop	{r3, r4, r5, pc}
 8000dc4:	200007f8 	.word	0x200007f8

08000dc8 <App_vLoraRssiSet>:
	i8LoraRssiValue = i8Rssi;
 8000dc8:	4b01      	ldr	r3, [pc, #4]	; (8000dd0 <App_vLoraRssiSet+0x8>)
 8000dca:	7018      	strb	r0, [r3, #0]
}
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000318 	.word	0x20000318

08000dd4 <App_vLoraSnrSet>:
	i8LoraSnrValue = i8Rssi;
 8000dd4:	4b01      	ldr	r3, [pc, #4]	; (8000ddc <App_vLoraSnrSet+0x8>)
 8000dd6:	7018      	strb	r0, [r3, #0]
}
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000319 	.word	0x20000319

08000de0 <App_vLoraPingPongPacketCounterIncreament>:
	u8LoraPingPongPacketCounter++;
 8000de0:	4a02      	ldr	r2, [pc, #8]	; (8000dec <App_vLoraPingPongPacketCounterIncreament+0xc>)
 8000de2:	7813      	ldrb	r3, [r2, #0]
 8000de4:	3301      	adds	r3, #1
 8000de6:	7013      	strb	r3, [r2, #0]
}
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	2000032d 	.word	0x2000032d

08000df0 <App_vSetBleConnectionStatus>:
	u8BleConnectionStatus = u8Bool;
 8000df0:	4b01      	ldr	r3, [pc, #4]	; (8000df8 <App_vSetBleConnectionStatus+0x8>)
 8000df2:	7018      	strb	r0, [r3, #0]
}
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	2000032c 	.word	0x2000032c

08000dfc <App_ReqAdvUpdateData>:
{
 8000dfc:	b508      	push	{r3, lr}
	return (u8BleConnectionStatus);
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <App_ReqAdvUpdateData+0x34>)
	if(App_u8GetBleConnectionStatus() != TRUE)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d006      	beq.n	8000e14 <App_ReqAdvUpdateData+0x18>
		printf("Adv the Ping Pong Data\r\n");
 8000e06:	480b      	ldr	r0, [pc, #44]	; (8000e34 <App_ReqAdvUpdateData+0x38>)
 8000e08:	f012 f94a 	bl	80130a0 <puts>
}
 8000e0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Adv_UpdateData();
 8000e10:	f00c b8a2 	b.w	800cf58 <Adv_UpdateData>
		printf("Notfy the Ping Pong Data\r\n");
 8000e14:	4808      	ldr	r0, [pc, #32]	; (8000e38 <App_ReqAdvUpdateData+0x3c>)
 8000e16:	f012 f943 	bl	80130a0 <puts>
		App_vPrepareBleAdvData();
 8000e1a:	f7ff ff9d 	bl	8000d58 <App_vPrepareBleAdvData>
}
 8000e1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		P2PS_STM_App_Update_Char_With_Len(P2P_NOTIFY_CHAR_UUID, (uint8_t *) &g_uBleAdvData, sizeof(uBleAdvData_t));
 8000e22:	4906      	ldr	r1, [pc, #24]	; (8000e3c <App_ReqAdvUpdateData+0x40>)
 8000e24:	220a      	movs	r2, #10
 8000e26:	f64f 6042 	movw	r0, #65090	; 0xfe42
 8000e2a:	f011 b99b 	b.w	8012164 <P2PS_STM_App_Update_Char_With_Len>
 8000e2e:	bf00      	nop
 8000e30:	2000032c 	.word	0x2000032c
 8000e34:	080145fc 	.word	0x080145fc
 8000e38:	08014614 	.word	0x08014614
 8000e3c:	200007f8 	.word	0x200007f8

08000e40 <App_SeLoraCommInterval>:
{
 8000e40:	b510      	push	{r4, lr}
	printf("App_SeLoraCommInterval: %d", u16TimeInMin);
 8000e42:	4c08      	ldr	r4, [pc, #32]	; (8000e64 <App_SeLoraCommInterval+0x24>)
{
 8000e44:	b082      	sub	sp, #8
 8000e46:	4601      	mov	r1, r0
	printf("App_SeLoraCommInterval: %d", u16TimeInMin);
 8000e48:	9001      	str	r0, [sp, #4]
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	f012 f8a2 	bl	8012f94 <iprintf>
	u16LoraCommTimeInterval = u16TimeInMin;
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <App_SeLoraCommInterval+0x28>)
	printf("App_SeLoraCommInterval: %d", u16LoraCommTimeInterval);
 8000e52:	9901      	ldr	r1, [sp, #4]
	u16LoraCommTimeInterval = u16TimeInMin;
 8000e54:	8019      	strh	r1, [r3, #0]
	printf("App_SeLoraCommInterval: %d", u16LoraCommTimeInterval);
 8000e56:	4620      	mov	r0, r4
}
 8000e58:	b002      	add	sp, #8
 8000e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printf("App_SeLoraCommInterval: %d", u16LoraCommTimeInterval);
 8000e5e:	f012 b899 	b.w	8012f94 <iprintf>
 8000e62:	bf00      	nop
 8000e64:	08014630 	.word	0x08014630
 8000e68:	2000000a 	.word	0x2000000a

08000e6c <App_GetLoraCommInterval>:
	return u16LoraCommTimeInterval;
 8000e6c:	4b01      	ldr	r3, [pc, #4]	; (8000e74 <App_GetLoraCommInterval+0x8>)
}
 8000e6e:	8818      	ldrh	r0, [r3, #0]
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	2000000a 	.word	0x2000000a

08000e78 <App_u8GetDeviceIsMaster>:

uint8_t App_u8GetDeviceIsMaster(void)
{
	return loraMasterSelector;
 8000e78:	4b01      	ldr	r3, [pc, #4]	; (8000e80 <App_u8GetDeviceIsMaster+0x8>)
}
 8000e7a:	7818      	ldrb	r0, [r3, #0]
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	2000031c 	.word	0x2000031c

08000e84 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e86:	b08d      	sub	sp, #52	; 0x34
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000e88:	f00c faf4 	bl	800d474 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000e8c:	f00c fafa 	bl	800d484 <HAL_DBGMCU_EnableDBGStopMode>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000e90:	4a51      	ldr	r2, [pc, #324]	; (8000fd8 <APPD_Init+0x154>)
 8000e92:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000e9e:	f010 ff5f 	bl	8011d60 <DbgTraceInit>
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000ea2:	4b4e      	ldr	r3, [pc, #312]	; (8000fdc <APPD_Init+0x158>)

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
  {
    if( aGpioConfigList[local_loop].enable != 0)
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000ea4:	484e      	ldr	r0, [pc, #312]	; (8000fe0 <APPD_Init+0x15c>)
 8000ea6:	494f      	ldr	r1, [pc, #316]	; (8000fe4 <APPD_Init+0x160>)
  GPIO_InitTypeDef gpio_config = {0};
 8000ea8:	2400      	movs	r4, #0
 8000eaa:	940b      	str	r4, [sp, #44]	; 0x2c
  gpiob_pin_list = 0;
 8000eac:	4625      	mov	r5, r4
  gpioa_pin_list = 0;
 8000eae:	4626      	mov	r6, r4
 8000eb0:	f503 7798 	add.w	r7, r3, #304	; 0x130
    if( aGpioConfigList[local_loop].enable != 0)
 8000eb4:	3308      	adds	r3, #8
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000eb6:	42bb      	cmp	r3, r7
 8000eb8:	d010      	beq.n	8000edc <APPD_Init+0x58>
    if( aGpioConfigList[local_loop].enable != 0)
 8000eba:	799a      	ldrb	r2, [r3, #6]
 8000ebc:	2a00      	cmp	r2, #0
 8000ebe:	d0f9      	beq.n	8000eb4 <APPD_Init+0x30>
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	4282      	cmp	r2, r0
 8000ec4:	d019      	beq.n	8000efa <APPD_Init+0x76>
 8000ec6:	428a      	cmp	r2, r1
 8000ec8:	d014      	beq.n	8000ef4 <APPD_Init+0x70>
 8000eca:	f1b2 4f90 	cmp.w	r2, #1207959552	; 0x48000000
 8000ece:	d1f1      	bne.n	8000eb4 <APPD_Init+0x30>
      {
        case (uint32_t)GPIOA:
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000ed0:	889a      	ldrh	r2, [r3, #4]
 8000ed2:	3308      	adds	r3, #8
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000ed4:	42bb      	cmp	r3, r7
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000ed6:	ea46 0602 	orr.w	r6, r6, r2
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000eda:	d1ee      	bne.n	8000eba <APPD_Init+0x36>
          break;
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000edc:	2700      	movs	r7, #0
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000ede:	2201      	movs	r2, #1
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee0:	2303      	movs	r3, #3
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee2:	e9cd 2708 	strd	r2, r7, [sp, #32]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee6:	930a      	str	r3, [sp, #40]	; 0x28

  if(gpioa_pin_list != 0)
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d14f      	bne.n	8000f8c <APPD_Init+0x108>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
    HAL_GPIO_Init(GPIOA, &gpio_config);
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
  }

  if(gpiob_pin_list != 0)
 8000eec:	b945      	cbnz	r5, 8000f00 <APPD_Init+0x7c>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
    HAL_GPIO_Init(GPIOB, &gpio_config);
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
  }

  if(gpioc_pin_list != 0)
 8000eee:	bb54      	cbnz	r4, 8000f46 <APPD_Init+0xc2>
}
 8000ef0:	b00d      	add	sp, #52	; 0x34
 8000ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000ef4:	889a      	ldrh	r2, [r3, #4]
 8000ef6:	4314      	orrs	r4, r2
          break;
 8000ef8:	e7dc      	b.n	8000eb4 <APPD_Init+0x30>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000efa:	889a      	ldrh	r2, [r3, #4]
 8000efc:	4315      	orrs	r5, r2
          break;
 8000efe:	e7d9      	b.n	8000eb4 <APPD_Init+0x30>
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    gpio_config.Pin = gpiob_pin_list;
 8000f04:	9507      	str	r5, [sp, #28]
 8000f06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000f08:	4835      	ldr	r0, [pc, #212]	; (8000fe0 <APPD_Init+0x15c>)
 8000f0a:	f042 0202 	orr.w	r2, r2, #2
 8000f0e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f12:	f002 0202 	and.w	r2, r2, #2
 8000f16:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8000f18:	9a03      	ldr	r2, [sp, #12]
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000f1a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000f1e:	f042 0202 	orr.w	r2, r2, #2
 8000f22:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000f26:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	9304      	str	r3, [sp, #16]
 8000f30:	a907      	add	r1, sp, #28
  (void)tmpreg;
 8000f32:	9b04      	ldr	r3, [sp, #16]
 8000f34:	f00c fdb6 	bl	800daa4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000f38:	4829      	ldr	r0, [pc, #164]	; (8000fe0 <APPD_Init+0x15c>)
 8000f3a:	4629      	mov	r1, r5
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f00c ff03 	bl	800dd48 <HAL_GPIO_WritePin>
  if(gpioc_pin_list != 0)
 8000f42:	2c00      	cmp	r4, #0
 8000f44:	d0d4      	beq.n	8000ef0 <APPD_Init+0x6c>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  {
    gpio_config.Pin = gpioc_pin_list;
 8000f4a:	9407      	str	r4, [sp, #28]
 8000f4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    __HAL_RCC_GPIOC_CLK_ENABLE();
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000f4e:	4825      	ldr	r0, [pc, #148]	; (8000fe4 <APPD_Init+0x160>)
 8000f50:	f042 0204 	orr.w	r2, r2, #4
 8000f54:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f58:	f002 0204 	and.w	r2, r2, #4
 8000f5c:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000f5e:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000f60:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000f64:	f042 0204 	orr.w	r2, r2, #4
 8000f68:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000f6c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000f70:	f003 0304 	and.w	r3, r3, #4
 8000f74:	a907      	add	r1, sp, #28
 8000f76:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8000f78:	9b02      	ldr	r3, [sp, #8]
 8000f7a:	f00c fd93 	bl	800daa4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000f7e:	4819      	ldr	r0, [pc, #100]	; (8000fe4 <APPD_Init+0x160>)
 8000f80:	4621      	mov	r1, r4
 8000f82:	2200      	movs	r2, #0
 8000f84:	f00c fee0 	bl	800dd48 <HAL_GPIO_WritePin>
}
 8000f88:	b00d      	add	sp, #52	; 0x34
 8000f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    gpio_config.Pin = gpioa_pin_list;
 8000f90:	9607      	str	r6, [sp, #28]
 8000f92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f94:	f042 0201 	orr.w	r2, r2, #1
 8000f98:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f9c:	f002 0201 	and.w	r2, r2, #1
 8000fa0:	9205      	str	r2, [sp, #20]
  (void)tmpreg;
 8000fa2:	9a05      	ldr	r2, [sp, #20]
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000fa4:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000fa8:	f042 0201 	orr.w	r2, r2, #1
 8000fac:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000fb0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000fba:	a907      	add	r1, sp, #28
 8000fbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  (void)tmpreg;
 8000fc0:	9b06      	ldr	r3, [sp, #24]
 8000fc2:	f00c fd6f 	bl	800daa4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000fc6:	463a      	mov	r2, r7
 8000fc8:	4631      	mov	r1, r6
 8000fca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fce:	f00c febb 	bl	800dd48 <HAL_GPIO_WritePin>
  if(gpiob_pin_list != 0)
 8000fd2:	2d00      	cmp	r5, #0
 8000fd4:	d08b      	beq.n	8000eee <APPD_Init+0x6a>
 8000fd6:	e793      	b.n	8000f00 <APPD_Init+0x7c>
 8000fd8:	58000800 	.word	0x58000800
 8000fdc:	0801464c 	.word	0x0801464c
 8000fe0:	48000400 	.word	0x48000400
 8000fe4:	48000800 	.word	0x48000800

08000fe8 <APPD_EnableCPU2>:
{
 8000fe8:	b530      	push	{r4, r5, lr}
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000fea:	4d09      	ldr	r5, [pc, #36]	; (8001010 <APPD_EnableCPU2+0x28>)
 8000fec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
 8000fee:	b089      	sub	sp, #36	; 0x24
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000ff0:	ac01      	add	r4, sp, #4
 8000ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ff4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ff8:	c403      	stmia	r4!, {r0, r1}
 8000ffa:	f824 2b02 	strh.w	r2, [r4], #2
 8000ffe:	0c12      	lsrs	r2, r2, #16
 8001000:	7022      	strb	r2, [r4, #0]
  TL_TRACES_Init( );
 8001002:	f011 fe05 	bl	8012c10 <TL_TRACES_Init>
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8001006:	a801      	add	r0, sp, #4
 8001008:	f011 f8de 	bl	80121c8 <SHCI_C2_DEBUG_Init>
}
 800100c:	b009      	add	sp, #36	; 0x24
 800100e:	bd30      	pop	{r4, r5, pc}
 8001010:	080143f0 	.word	0x080143f0

08001014 <DbgOutputInit>:
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8001014:	f000 bde6 	b.w	8001be4 <MX_USART1_UART_Init>

08001018 <DbgOutputTraces>:
/* USER CODE END DbgOutputInit */
  return;
}

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8001018:	b410      	push	{r4}
 800101a:	460c      	mov	r4, r1
 800101c:	4613      	mov	r3, r2
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 800101e:	4601      	mov	r1, r0
 8001020:	4622      	mov	r2, r4
 8001022:	2000      	movs	r0, #0

/* USER CODE END DbgOutputTraces */
  return;
}
 8001024:	f85d 4b04 	ldr.w	r4, [sp], #4
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8001028:	f000 bcdc 	b.w	80019e4 <HW_UART_Transmit_DMA>

0800102c <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
  UNUSED(status);
  return;
}
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8001030:	b570      	push	{r4, r5, r6, lr}
 8001032:	4604      	mov	r4, r0
 8001034:	b088      	sub	sp, #32
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);

  /* Read the firmware version of both the wireless firmware and the FUS */
  SHCI_GetWirelessFwInfo( &WirelessInfo );
 8001036:	a804      	add	r0, sp, #16
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001038:	6865      	ldr	r5, [r4, #4]
  SHCI_GetWirelessFwInfo( &WirelessInfo );
 800103a:	f011 f8e3 	bl	8012204 <SHCI_GetWirelessFwInfo>
  APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 800103e:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8001042:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8001046:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800104a:	4842      	ldr	r0, [pc, #264]	; (8001154 <APPE_SysUserEvtRx+0x124>)
 800104c:	f011 ffa2 	bl	8012f94 <iprintf>
  APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8001050:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8001054:	4840      	ldr	r0, [pc, #256]	; (8001158 <APPE_SysUserEvtRx+0x128>)
 8001056:	f011 ff9d 	bl	8012f94 <iprintf>
  APP_DBG_MSG("FUS version %d.%d.%d\n\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 800105a:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800105e:	f89d 201b 	ldrb.w	r2, [sp, #27]
 8001062:	f89d 101a 	ldrb.w	r1, [sp, #26]
 8001066:	483d      	ldr	r0, [pc, #244]	; (800115c <APPE_SysUserEvtRx+0x12c>)
 8001068:	f011 ff94 	bl	8012f94 <iprintf>

  switch(p_sys_event->subevtcode)
 800106c:	f8b5 300b 	ldrh.w	r3, [r5, #11]
 8001070:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8001074:	2b07      	cmp	r3, #7
 8001076:	d814      	bhi.n	80010a2 <APPE_SysUserEvtRx+0x72>
 8001078:	e8df f003 	tbb	[pc, r3]
 800107c:	13251a04 	.word	0x13251a04
 8001080:	1536313d 	.word	0x1536313d
static void APPE_SysEvtReadyProcessing( void * pPayload )
{
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001084:	2500      	movs	r5, #0
 8001086:	e9cd 5500 	strd	r5, r5, [sp]
  uint32_t RevisionID=0;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;

  if(p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800108a:	6863      	ldr	r3, [r4, #4]
  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 800108c:	9502      	str	r5, [sp, #8]
 800108e:	f8ad 500c 	strh.w	r5, [sp, #12]
  if(p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001092:	7b5e      	ldrb	r6, [r3, #13]
 8001094:	2e00      	cmp	r6, #0
 8001096:	d039      	beq.n	800110c <APPE_SysUserEvtRx+0xdc>
    (void)SHCI_C2_Config(&config_param);

    APP_BLE_Init( );
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
  }
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001098:	2e01      	cmp	r6, #1
 800109a:	d055      	beq.n	8001148 <APPE_SysUserEvtRx+0x118>
    /* The packet shall not be released as this is not supported by the FUS */
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
  }
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n");
 800109c:	4830      	ldr	r0, [pc, #192]	; (8001160 <APPE_SysUserEvtRx+0x130>)
 800109e:	f011 ffff 	bl	80130a0 <puts>
}
 80010a2:	b008      	add	sp, #32
 80010a4:	bd70      	pop	{r4, r5, r6, pc}
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_END_ERASE\n");
 80010a6:	482f      	ldr	r0, [pc, #188]	; (8001164 <APPE_SysUserEvtRx+0x134>)
 80010a8:	f011 fffa 	bl	80130a0 <puts>
}
 80010ac:	b008      	add	sp, #32
 80010ae:	bd70      	pop	{r4, r5, r6, pc}
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80010b0:	6864      	ldr	r4, [r4, #4]
  APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n",(*p_sys_error_code));
 80010b2:	482d      	ldr	r0, [pc, #180]	; (8001168 <APPE_SysUserEvtRx+0x138>)
 80010b4:	7b61      	ldrb	r1, [r4, #13]
 80010b6:	f011 ff6d 	bl	8012f94 <iprintf>
  if ((*p_sys_error_code) == ERR_BLE_INIT)
 80010ba:	7b63      	ldrb	r3, [r4, #13]
 80010bc:	bb13      	cbnz	r3, 8001104 <APPE_SysUserEvtRx+0xd4>
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 80010be:	482b      	ldr	r0, [pc, #172]	; (800116c <APPE_SysUserEvtRx+0x13c>)
 80010c0:	f011 ffee 	bl	80130a0 <puts>
 80010c4:	e7ed      	b.n	80010a2 <APPE_SysUserEvtRx+0x72>
    APP_DBG_MSG("-- BLE NVM RAM HAS BEEN UPDATED BY CMO+ \n");
 80010c6:	482a      	ldr	r0, [pc, #168]	; (8001170 <APPE_SysUserEvtRx+0x140>)
 80010c8:	f011 ffea 	bl	80130a0 <puts>
    APP_DBG_MSG("SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE : StartAddress = %lx , Size = %ld\n",
 80010cc:	f8d5 2011 	ldr.w	r2, [r5, #17]
 80010d0:	f8d5 100d 	ldr.w	r1, [r5, #13]
 80010d4:	4827      	ldr	r0, [pc, #156]	; (8001174 <APPE_SysUserEvtRx+0x144>)
 80010d6:	f011 ff5d 	bl	8012f94 <iprintf>
}
 80010da:	b008      	add	sp, #32
 80010dc:	bd70      	pop	{r4, r5, r6, pc}
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_END_WRITE\n");
 80010de:	4826      	ldr	r0, [pc, #152]	; (8001178 <APPE_SysUserEvtRx+0x148>)
 80010e0:	f011 ffde 	bl	80130a0 <puts>
}
 80010e4:	b008      	add	sp, #32
 80010e6:	bd70      	pop	{r4, r5, r6, pc}
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 80010e8:	f8d5 100d 	ldr.w	r1, [r5, #13]
 80010ec:	4823      	ldr	r0, [pc, #140]	; (800117c <APPE_SysUserEvtRx+0x14c>)
 80010ee:	f011 ff51 	bl	8012f94 <iprintf>
}
 80010f2:	b008      	add	sp, #32
 80010f4:	bd70      	pop	{r4, r5, r6, pc}
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 80010f6:	f8d5 100d 	ldr.w	r1, [r5, #13]
 80010fa:	4821      	ldr	r0, [pc, #132]	; (8001180 <APPE_SysUserEvtRx+0x150>)
 80010fc:	f011 ff4a 	bl	8012f94 <iprintf>
}
 8001100:	b008      	add	sp, #32
 8001102:	bd70      	pop	{r4, r5, r6, pc}
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8001104:	481f      	ldr	r0, [pc, #124]	; (8001184 <APPE_SysUserEvtRx+0x154>)
 8001106:	f011 ffcb 	bl	80130a0 <puts>
 800110a:	e7ca      	b.n	80010a2 <APPE_SysUserEvtRx+0x72>
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - WIRELESS_FW_RUNNING \n");
 800110c:	481e      	ldr	r0, [pc, #120]	; (8001188 <APPE_SysUserEvtRx+0x158>)
 800110e:	f011 ffc7 	bl	80130a0 <puts>
    APPD_EnableCPU2( );
 8001112:	f7ff ff69 	bl	8000fe8 <APPD_EnableCPU2>
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <APPE_SysUserEvtRx+0x15c>)
    APP_DBG_MSG("DBGMCU_GetRevisionID= %lx \n\n", RevisionID);
 8001118:	481d      	ldr	r0, [pc, #116]	; (8001190 <APPE_SysUserEvtRx+0x160>)
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800111a:	227f      	movs	r2, #127	; 0x7f
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800111c:	210d      	movs	r1, #13
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800111e:	f88d 2002 	strb.w	r2, [sp, #2]
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8001122:	f88d 1000 	strb.w	r1, [sp]
 8001126:	681c      	ldr	r4, [r3, #0]
 8001128:	0c24      	lsrs	r4, r4, #16
    APP_DBG_MSG("DBGMCU_GetRevisionID= %lx \n\n", RevisionID);
 800112a:	4621      	mov	r1, r4
 800112c:	f011 ff32 	bl	8012f94 <iprintf>
    (void)SHCI_C2_Config(&config_param);
 8001130:	4668      	mov	r0, sp
    config_param.RevisionID = RevisionID;
 8001132:	f8ad 400c 	strh.w	r4, [sp, #12]
    (void)SHCI_C2_Config(&config_param);
 8001136:	f011 f857 	bl	80121e8 <SHCI_C2_Config>
    APP_BLE_Init( );
 800113a:	f00b fcf5 	bl	800cb28 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800113e:	4631      	mov	r1, r6
 8001140:	2001      	movs	r0, #1
 8001142:	f011 fd97 	bl	8012c74 <UTIL_LPM_SetOffMode>
 8001146:	e7ac      	b.n	80010a2 <APPE_SysUserEvtRx+0x72>
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n");
 8001148:	4812      	ldr	r0, [pc, #72]	; (8001194 <APPE_SysUserEvtRx+0x164>)
 800114a:	f011 ffa9 	bl	80130a0 <puts>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800114e:	7025      	strb	r5, [r4, #0]
 8001150:	e7a7      	b.n	80010a2 <APPE_SysUserEvtRx+0x72>
 8001152:	bf00      	nop
 8001154:	0801477c 	.word	0x0801477c
 8001158:	080147a0 	.word	0x080147a0
 800115c:	080147bc 	.word	0x080147bc
 8001160:	08014850 	.word	0x08014850
 8001164:	08014a0c 	.word	0x08014a0c
 8001168:	0801487c 	.word	0x0801487c
 800116c:	080148a8 	.word	0x080148a8
 8001170:	08014914 	.word	0x08014914
 8001174:	08014940 	.word	0x08014940
 8001178:	080149b8 	.word	0x080149b8
 800117c:	080149d4 	.word	0x080149d4
 8001180:	08014984 	.word	0x08014984
 8001184:	080148e0 	.word	0x080148e0
 8001188:	080147d4 	.word	0x080147d4
 800118c:	e0042000 	.word	0xe0042000
 8001190:	08014804 	.word	0x08014804
 8001194:	08014824 	.word	0x08014824

08001198 <MX_APPE_Config>:
{
 8001198:	b508      	push	{r3, lr}
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <MX_APPE_Config+0x30>)
 800119c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011a0:	611a      	str	r2, [r3, #16]
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80011a2:	2000      	movs	r0, #0
 80011a4:	f010 ff24 	bl	8011ff0 <OTP_Read>
  if (p_otp)
 80011a8:	b168      	cbz	r0, 80011c6 <MX_APPE_Config+0x2e>
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80011aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011ae:	4b07      	ldr	r3, [pc, #28]	; (80011cc <MX_APPE_Config+0x34>)
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80011b0:	7981      	ldrb	r1, [r0, #6]
 80011b2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80011b6:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80011ba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80011be:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80011c2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 80011c6:	bd08      	pop	{r3, pc}
 80011c8:	58004000 	.word	0x58004000
 80011cc:	cafecafe 	.word	0xcafecafe

080011d0 <MX_APPE_Init>:
 80011d0:	4a28      	ldr	r2, [pc, #160]	; (8001274 <MX_APPE_Init+0xa4>)
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80011d2:	4b29      	ldr	r3, [pc, #164]	; (8001278 <MX_APPE_Init+0xa8>)
 80011d4:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
{
 80011d8:	b510      	push	{r4, lr}
 80011da:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
 80011de:	21ca      	movs	r1, #202	; 0xca
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80011e0:	2253      	movs	r2, #83	; 0x53
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80011e2:	6259      	str	r1, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80011e4:	625a      	str	r2, [r3, #36]	; 0x24
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80011e6:	689a      	ldr	r2, [r3, #8]
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80011e8:	4c24      	ldr	r4, [pc, #144]	; (800127c <MX_APPE_Init+0xac>)
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80011ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80011ee:	20ff      	movs	r0, #255	; 0xff
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80011f0:	f022 0207 	bic.w	r2, r2, #7
 80011f4:	609a      	str	r2, [r3, #8]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80011f6:	6258      	str	r0, [r3, #36]	; 0x24
 80011f8:	688b      	ldr	r3, [r1, #8]
 80011fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
{
 80011fe:	b088      	sub	sp, #32
 8001200:	608b      	str	r3, [r1, #8]
  UTIL_LPM_Init();
 8001202:	f011 fd2d 	bl	8012c60 <UTIL_LPM_Init>
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001206:	4a1e      	ldr	r2, [pc, #120]	; (8001280 <MX_APPE_Init+0xb0>)
 8001208:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800120c:	f023 0307 	bic.w	r3, r3, #7
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  HAL_PWREx_EnableSRAMRetention();
 8001218:	f00c fe18 	bl	800de4c <HAL_PWREx_EnableSRAMRetention>
  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800121c:	4919      	ldr	r1, [pc, #100]	; (8001284 <MX_APPE_Init+0xb4>)
 800121e:	2000      	movs	r0, #0
 8001220:	f000 f990 	bl	8001544 <HW_TS_Init>
  APPD_Init();
 8001224:	f7ff fe2e 	bl	8000e84 <APPD_Init>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001228:	2101      	movs	r1, #1
 800122a:	4608      	mov	r0, r1
 800122c:	f011 fd22 	bl	8012c74 <UTIL_LPM_SetOffMode>
  TL_Init();
 8001230:	f011 fbfa 	bl	8012a28 <TL_Init>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8001234:	4a14      	ldr	r2, [pc, #80]	; (8001288 <MX_APPE_Init+0xb8>)
 8001236:	2100      	movs	r1, #0
 8001238:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800123c:	f011 fe5a 	bl	8012ef4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <MX_APPE_Init+0xbc>)
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001242:	4813      	ldr	r0, [pc, #76]	; (8001290 <MX_APPE_Init+0xc0>)
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001244:	9400      	str	r4, [sp, #0]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001246:	4669      	mov	r1, sp
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001248:	9301      	str	r3, [sp, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800124a:	f011 f829 	bl	80122a0 <shci_init>
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800124e:	f504 7186 	add.w	r1, r4, #268	; 0x10c
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001252:	f504 7206 	add.w	r2, r4, #536	; 0x218
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001256:	f240 533c 	movw	r3, #1340	; 0x53c
  TL_MM_Init( &tl_mm_config );
 800125a:	a802      	add	r0, sp, #8
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800125c:	f504 7449 	add.w	r4, r4, #804	; 0x324
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001260:	e9cd 1202 	strd	r1, r2, [sp, #8]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001264:	e9cd 4304 	strd	r4, r3, [sp, #16]
  TL_MM_Init( &tl_mm_config );
 8001268:	f011 fca4 	bl	8012bb4 <TL_MM_Init>
  TL_Enable();
 800126c:	f011 fbda 	bl	8012a24 <TL_Enable>
}
 8001270:	b008      	add	sp, #32
 8001272:	bd10      	pop	{r4, pc}
 8001274:	58000800 	.word	0x58000800
 8001278:	40002800 	.word	0x40002800
 800127c:	200301e8 	.word	0x200301e8
 8001280:	58000400 	.word	0x58000400
 8001284:	20000938 	.word	0x20000938
 8001288:	080122fd 	.word	0x080122fd
 800128c:	0800102d 	.word	0x0800102d
 8001290:	08001031 	.word	0x08001031

08001294 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001294:	b570      	push	{r4, r5, r6, lr}
 8001296:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8001298:	f00c f8da 	bl	800d450 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129c:	1c6b      	adds	r3, r5, #1
  uint32_t tickstart = HAL_GetTick();
 800129e:	4606      	mov	r6, r0
  if (wait < HAL_MAX_DELAY)
 80012a0:	d002      	beq.n	80012a8 <HAL_Delay+0x14>
  {
    wait += HAL_GetTickFreq();
 80012a2:	f00c f8e1 	bl	800d468 <HAL_GetTickFreq>
 80012a6:	4405      	add	r5, r0
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80012a8:	4c06      	ldr	r4, [pc, #24]	; (80012c4 <HAL_Delay+0x30>)
 80012aa:	e004      	b.n	80012b6 <HAL_Delay+0x22>
 80012ac:	6923      	ldr	r3, [r4, #16]
 80012ae:	f023 0304 	bic.w	r3, r3, #4
 80012b2:	6123      	str	r3, [r4, #16]
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 80012b4:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80012b6:	f00c f8cb 	bl	800d450 <HAL_GetTick>
 80012ba:	1b83      	subs	r3, r0, r6
 80012bc:	42ab      	cmp	r3, r5
 80012be:	d3f5      	bcc.n	80012ac <HAL_Delay+0x18>
  }
}
 80012c0:	bd70      	pop	{r4, r5, r6, pc}
 80012c2:	bf00      	nop
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <MX_APPE_Process>:
void MX_APPE_Process(void)
{
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	f011 bd48 	b.w	8012d60 <UTIL_SEQ_Run>

080012d0 <UTIL_SEQ_Idle>:
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop

080012d4 <UTIL_SEQ_EvtIdle>:
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295
 80012d8:	f011 bd42 	b.w	8012d60 <UTIL_SEQ_Run>

080012dc <shci_notify_asynch_evt>:
  return;
}

void shci_notify_asynch_evt(void* pdata)
{
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80012dc:	2100      	movs	r1, #0
 80012de:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80012e2:	f011 bcdf 	b.w	8012ca4 <UTIL_SEQ_SetTask>
 80012e6:	bf00      	nop

080012e8 <shci_cmd_resp_release>:
  return;
}

void shci_cmd_resp_release(uint32_t flag)
{
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80012e8:	2002      	movs	r0, #2
 80012ea:	f011 bd0b 	b.w	8012d04 <UTIL_SEQ_SetEvt>
 80012ee:	bf00      	nop

080012f0 <shci_cmd_resp_wait>:
  return;
}

void shci_cmd_resp_wait(uint32_t timeout)
{
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80012f0:	2002      	movs	r0, #2
 80012f2:	f011 bdcd 	b.w	8012e90 <UTIL_SEQ_WaitEvt>
 80012f6:	bf00      	nop

080012f8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80012f8:	b470      	push	{r4, r5, r6}
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80012fa:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <UnlinkTimer+0x78>)
 80012fc:	781a      	ldrb	r2, [r3, #0]
 80012fe:	4282      	cmp	r2, r0
 8001300:	d021      	beq.n	8001346 <UnlinkTimer+0x4e>
    PreviousRunningTimerID = CurrentRunningTimerID;
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001302:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8001306:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800130a:	7e22      	ldrb	r2, [r4, #24]
    next_id = aTimerContext[TimerID].NextID;
 800130c:	7e66      	ldrb	r6, [r4, #25]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800130e:	7e65      	ldrb	r5, [r4, #25]
 8001310:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001314:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8001318:	b2ed      	uxtb	r5, r5
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800131a:	2e06      	cmp	r6, #6
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800131c:	7655      	strb	r5, [r2, #25]
    next_id = aTimerContext[TimerID].NextID;
 800131e:	b2f2      	uxtb	r2, r6
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001320:	d006      	beq.n	8001330 <UnlinkTimer+0x38>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001322:	7e24      	ldrb	r4, [r4, #24]
 8001324:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001328:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800132c:	b2e4      	uxtb	r4, r4
 800132e:	7614      	strb	r4, [r2, #24]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001330:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001334:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8001338:	2201      	movs	r2, #1
 800133a:	7402      	strb	r2, [r0, #16]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800133c:	781a      	ldrb	r2, [r3, #0]
 800133e:	2a06      	cmp	r2, #6
 8001340:	d00e      	beq.n	8001360 <UnlinkTimer+0x68>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
  }

  return;
}
 8001342:	bc70      	pop	{r4, r5, r6}
 8001344:	4770      	bx	lr
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001346:	b2d4      	uxtb	r4, r2
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001348:	4620      	mov	r0, r4
    PreviousRunningTimerID = CurrentRunningTimerID;
 800134a:	781c      	ldrb	r4, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800134c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8001350:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001354:	b2e4      	uxtb	r4, r4
 8001356:	705c      	strb	r4, [r3, #1]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001358:	7e52      	ldrb	r2, [r2, #25]
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	701a      	strb	r2, [r3, #0]
 800135e:	e7e7      	b.n	8001330 <UnlinkTimer+0x38>
  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001360:	2900      	cmp	r1, #0
 8001362:	d1ee      	bne.n	8001342 <UnlinkTimer+0x4a>
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001364:	f04f 32ff 	mov.w	r2, #4294967295
}
 8001368:	bc70      	pop	{r4, r5, r6}
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800136a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 800136e:	4770      	bx	lr
 8001370:	200001a4 	.word	0x200001a4

08001374 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001374:	b410      	push	{r4}
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001376:	4c17      	ldr	r4, [pc, #92]	; (80013d4 <ReturnTimeElapsed+0x60>)
 8001378:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800137c:	3301      	adds	r3, #1
 800137e:	d024      	beq.n	80013ca <ReturnTimeElapsed+0x56>
  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001380:	4815      	ldr	r0, [pc, #84]	; (80013d8 <ReturnTimeElapsed+0x64>)
 8001382:	6a83      	ldr	r3, [r0, #40]	; 0x28
  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001384:	6a82      	ldr	r2, [r0, #40]	; 0x28
  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001386:	b29b      	uxth	r3, r3
  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001388:	b292      	uxth	r2, r2
  while(first_read != second_read)
 800138a:	4293      	cmp	r3, r2
 800138c:	d004      	beq.n	8001398 <ReturnTimeElapsed+0x24>
    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800138e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001390:	4613      	mov	r3, r2
 8001392:	b28a      	uxth	r2, r1
  while(first_read != second_read)
 8001394:	429a      	cmp	r2, r3
 8001396:	d1fa      	bne.n	800138e <ReturnTimeElapsed+0x1a>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */

    if (SSRValueOnLastSetup >= return_value)
 8001398:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800139c:	429a      	cmp	r2, r3
 800139e:	d210      	bcs.n	80013c2 <ReturnTimeElapsed+0x4e>
    {
      return_value = SSRValueOnLastSetup - return_value;
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80013a0:	490e      	ldr	r1, [pc, #56]	; (80013dc <ReturnTimeElapsed+0x68>)
      return_value = SSRValueOnLastSetup + wrap_counter;
 80013a2:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80013a6:	8808      	ldrh	r0, [r1, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80013a8:	4410      	add	r0, r2
 80013aa:	1ac0      	subs	r0, r0, r3

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80013ac:	4a0c      	ldr	r2, [pc, #48]	; (80013e0 <ReturnTimeElapsed+0x6c>)
    return_value = return_value >> WakeupTimerDivider;
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <ReturnTimeElapsed+0x70>)
    return_value = return_value*AsynchPrescalerUserConfig;
 80013b0:	7812      	ldrb	r2, [r2, #0]
    return_value = return_value >> WakeupTimerDivider;
 80013b2:	781b      	ldrb	r3, [r3, #0]
  {
    return_value = 0;
  }

  return (uint16_t)return_value;
}
 80013b4:	f85d 4b04 	ldr.w	r4, [sp], #4
    return_value = return_value*AsynchPrescalerUserConfig;
 80013b8:	fb00 f002 	mul.w	r0, r0, r2
    return_value = return_value >> WakeupTimerDivider;
 80013bc:	40d8      	lsrs	r0, r3
 80013be:	b280      	uxth	r0, r0
}
 80013c0:	4770      	bx	lr
      return_value = SSRValueOnLastSetup - return_value;
 80013c2:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 80013c6:	1ac0      	subs	r0, r0, r3
 80013c8:	e7f0      	b.n	80013ac <ReturnTimeElapsed+0x38>
 80013ca:	2000      	movs	r0, #0
}
 80013cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	200001a4 	.word	0x200001a4
 80013d8:	40002800 	.word	0x40002800
 80013dc:	20000334 	.word	0x20000334
 80013e0:	20000331 	.word	0x20000331
 80013e4:	20000336 	.word	0x20000336

080013e8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80013e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80013ec:	4b4f      	ldr	r3, [pc, #316]	; (800152c <RescheduleTimerList+0x144>)
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80013ee:	4e50      	ldr	r6, [pc, #320]	; (8001530 <RescheduleTimerList+0x148>)
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80013f0:	689b      	ldr	r3, [r3, #8]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80013f2:	f8d6 8000 	ldr.w	r8, [r6]
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80013f6:	0558      	lsls	r0, r3, #21
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80013f8:	f8d8 2000 	ldr.w	r2, [r8]
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80013fc:	d464      	bmi.n	80014c8 <RescheduleTimerList+0xe0>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80013fe:	6893      	ldr	r3, [r2, #8]

  localTimerID = CurrentRunningTimerID;
 8001400:	4f4c      	ldr	r7, [pc, #304]	; (8001534 <RescheduleTimerList+0x14c>)
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001402:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001406:	6093      	str	r3, [r2, #8]
  localTimerID = CurrentRunningTimerID;
 8001408:	783c      	ldrb	r4, [r7, #0]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800140a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800140e:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
  localTimerID = CurrentRunningTimerID;
 8001412:	b2e5      	uxtb	r5, r4
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001414:	f8d3 900c 	ldr.w	r9, [r3, #12]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001418:	f7ff ffac 	bl	8001374 <ReturnTimeElapsed>

  if(timecountleft < time_elapsed )
 800141c:	4548      	cmp	r0, r9
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800141e:	ea4f 0444 	mov.w	r4, r4, lsl #1
  if(timecountleft < time_elapsed )
 8001422:	d96b      	bls.n	80014fc <RescheduleTimerList+0x114>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001424:	2301      	movs	r3, #1
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001426:	2d06      	cmp	r5, #6
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001428:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
    wakeup_timer_value = 0;
 800142c:	bf18      	it	ne
 800142e:	2100      	movne	r1, #0
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001430:	d051      	beq.n	80014d6 <RescheduleTimerList+0xee>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001432:	f04f 0c00 	mov.w	ip, #0
 8001436:	e000      	b.n	800143a <RescheduleTimerList+0x52>
 8001438:	006c      	lsls	r4, r5, #1
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800143a:	1963      	adds	r3, r4, r5
 800143c:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001440:	442c      	add	r4, r5
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001442:	68da      	ldr	r2, [r3, #12]
 8001444:	4290      	cmp	r0, r2
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001446:	bf96      	itet	ls
 8001448:	68da      	ldrls	r2, [r3, #12]
      aTimerContext[localTimerID].CountLeft = 0;
 800144a:	f8c3 c00c 	strhi.w	ip, [r3, #12]
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800144e:	1a12      	subls	r2, r2, r0
    localTimerID = aTimerContext[localTimerID].NextID;
 8001450:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001454:	bf98      	it	ls
 8001456:	60da      	strls	r2, [r3, #12]
    localTimerID = aTimerContext[localTimerID].NextID;
 8001458:	7e63      	ldrb	r3, [r4, #25]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800145a:	2b06      	cmp	r3, #6
    localTimerID = aTimerContext[localTimerID].NextID;
 800145c:	b2dd      	uxtb	r5, r3
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800145e:	d1eb      	bne.n	8001438 <RescheduleTimerList+0x50>
  if(Value == 0)
 8001460:	2900      	cmp	r1, #0
 8001462:	d038      	beq.n	80014d6 <RescheduleTimerList+0xee>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001464:	2901      	cmp	r1, #1
 8001466:	d95a      	bls.n	800151e <RescheduleTimerList+0x136>
      Value -= 1;
 8001468:	1e4b      	subs	r3, r1, #1
 800146a:	b29c      	uxth	r4, r3
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800146c:	f8d8 2000 	ldr.w	r2, [r8]
 8001470:	68d3      	ldr	r3, [r2, #12]
 8001472:	075b      	lsls	r3, r3, #29
 8001474:	d5fc      	bpl.n	8001470 <RescheduleTimerList+0x88>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001476:	68d3      	ldr	r3, [r2, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001478:	492f      	ldr	r1, [pc, #188]	; (8001538 <RescheduleTimerList+0x150>)
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800147a:	b2db      	uxtb	r3, r3
 800147c:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8001480:	60d3      	str	r3, [r2, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001482:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001486:	60cb      	str	r3, [r1, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001488:	2003      	movs	r0, #3
 800148a:	f00c f8c9 	bl	800d620 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800148e:	4827      	ldr	r0, [pc, #156]	; (800152c <RescheduleTimerList+0x144>)
 8001490:	6943      	ldr	r3, [r0, #20]
 8001492:	0c1b      	lsrs	r3, r3, #16
 8001494:	041b      	lsls	r3, r3, #16
 8001496:	4323      	orrs	r3, r4
 8001498:	6143      	str	r3, [r0, #20]
  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800149a:	6a82      	ldr	r2, [r0, #40]	; 0x28
  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800149c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800149e:	b292      	uxth	r2, r2
  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80014a0:	b29b      	uxth	r3, r3
  while(first_read != second_read)
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d004      	beq.n	80014b0 <RescheduleTimerList+0xc8>
    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80014a6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80014a8:	461a      	mov	r2, r3
 80014aa:	b28b      	uxth	r3, r1
  while(first_read != second_read)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d1fa      	bne.n	80014a6 <RescheduleTimerList+0xbe>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 80014b0:	6833      	ldr	r3, [r6, #0]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80014b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	6893      	ldr	r3, [r2, #8]
 80014ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014be:	6093      	str	r3, [r2, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80014c0:	f3af 8000 	nop.w
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);

  return ;
}
 80014c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80014c8:	68d3      	ldr	r3, [r2, #12]
 80014ca:	0759      	lsls	r1, r3, #29
 80014cc:	d597      	bpl.n	80013fe <RescheduleTimerList+0x16>
 80014ce:	68d3      	ldr	r3, [r2, #12]
 80014d0:	0759      	lsls	r1, r3, #29
 80014d2:	d4f9      	bmi.n	80014c8 <RescheduleTimerList+0xe0>
 80014d4:	e793      	b.n	80013fe <RescheduleTimerList+0x16>
  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80014d6:	4815      	ldr	r0, [pc, #84]	; (800152c <RescheduleTimerList+0x144>)
 80014d8:	6a82      	ldr	r2, [r0, #40]	; 0x28
  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80014da:	6a83      	ldr	r3, [r0, #40]	; 0x28
  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80014dc:	b292      	uxth	r2, r2
  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80014de:	b29b      	uxth	r3, r3
  while(first_read != second_read)
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d004      	beq.n	80014ee <RescheduleTimerList+0x106>
    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80014e4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80014e6:	461a      	mov	r2, r3
 80014e8:	b28b      	uxth	r3, r1
  while(first_read != second_read)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d1fa      	bne.n	80014e4 <RescheduleTimerList+0xfc>
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80014ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80014f2:	2003      	movs	r0, #3
}
 80014f4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80014f8:	f00c b87c 	b.w	800d5f4 <HAL_NVIC_SetPendingIRQ>
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80014fc:	4a0f      	ldr	r2, [pc, #60]	; (800153c <RescheduleTimerList+0x154>)
 80014fe:	8813      	ldrh	r3, [r2, #0]
 8001500:	fa10 f383 	uxtah	r3, r0, r3
 8001504:	454b      	cmp	r3, r9
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001506:	bf39      	ittee	cc
 8001508:	8811      	ldrhcc	r1, [r2, #0]
      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800150a:	2300      	movcc	r3, #0
      wakeup_timer_value = timecountleft - time_elapsed;
 800150c:	eba9 0100 	subcs.w	r1, r9, r0
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001510:	2301      	movcs	r3, #1
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001512:	2d06      	cmp	r5, #6
      wakeup_timer_value = timecountleft - time_elapsed;
 8001514:	b289      	uxth	r1, r1
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001516:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800151a:	d18a      	bne.n	8001432 <RescheduleTimerList+0x4a>
 800151c:	e7a0      	b.n	8001460 <RescheduleTimerList+0x78>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <RescheduleTimerList+0x158>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d1a0      	bne.n	8001468 <RescheduleTimerList+0x80>
 8001526:	461c      	mov	r4, r3
 8001528:	e7a0      	b.n	800146c <RescheduleTimerList+0x84>
 800152a:	bf00      	nop
 800152c:	40002800 	.word	0x40002800
 8001530:	20000338 	.word	0x20000338
 8001534:	200001a4 	.word	0x200001a4
 8001538:	58000800 	.word	0x58000800
 800153c:	20000332 	.word	0x20000332
 8001540:	20000336 	.word	0x20000336

08001544 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   * Get RTC handler
   */
  phrtc = hrtc;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001546:	680d      	ldr	r5, [r1, #0]

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001548:	4e42      	ldr	r6, [pc, #264]	; (8001654 <HW_TS_Init+0x110>)
  phrtc = hrtc;
 800154a:	4c43      	ldr	r4, [pc, #268]	; (8001658 <HW_TS_Init+0x114>)
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800154c:	22ca      	movs	r2, #202	; 0xca
 800154e:	2353      	movs	r3, #83	; 0x53
 8001550:	626a      	str	r2, [r5, #36]	; 0x24
 8001552:	626b      	str	r3, [r5, #36]	; 0x24
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001554:	68b3      	ldr	r3, [r6, #8]
  phrtc = hrtc;
 8001556:	6021      	str	r1, [r4, #0]
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001558:	f043 0320 	orr.w	r3, r3, #32
 800155c:	60b3      	str	r3, [r6, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800155e:	68b3      	ldr	r3, [r6, #8]
 8001560:	4a3e      	ldr	r2, [pc, #248]	; (800165c <HW_TS_Init+0x118>)
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	f1c3 0304 	rsb	r3, r3, #4
 800156a:	b2d9      	uxtb	r1, r3
 800156c:	7011      	strb	r1, [r2, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800156e:	6932      	ldr	r2, [r6, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001570:	f44f 03fe 	mov.w	r3, #8323072	; 0x7f0000
 8001574:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001578:	fa93 f3a3 	rbit	r3, r3
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 800157c:	fab3 f383 	clz	r3, r3
 8001580:	fa22 f303 	lsr.w	r3, r2, r3
 8001584:	3301      	adds	r3, #1
 8001586:	4a36      	ldr	r2, [pc, #216]	; (8001660 <HW_TS_Init+0x11c>)

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001588:	4f36      	ldr	r7, [pc, #216]	; (8001664 <HW_TS_Init+0x120>)
  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800158a:	b2db      	uxtb	r3, r3
 800158c:	7013      	strb	r3, [r2, #0]
  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800158e:	6932      	ldr	r2, [r6, #16]
 8001590:	f3c2 020e 	ubfx	r2, r2, #0, #15

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001594:	4616      	mov	r6, r2
 8001596:	fb03 f306 	mul.w	r3, r3, r6
 800159a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800159e:	40cb      	lsrs	r3, r1

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80015a0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80015a4:	3201      	adds	r2, #1
  if(localmaxwakeuptimersetup >= 0xFFFF)
 80015a6:	428b      	cmp	r3, r1
  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80015a8:	803a      	strh	r2, [r7, #0]
  if(localmaxwakeuptimersetup >= 0xFFFF)
 80015aa:	d946      	bls.n	800163a <HW_TS_Init+0xf6>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80015ac:	4b2e      	ldr	r3, [pc, #184]	; (8001668 <HW_TS_Init+0x124>)
 80015ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015b2:	801a      	strh	r2, [r3, #0]
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80015b4:	4b2d      	ldr	r3, [pc, #180]	; (800166c <HW_TS_Init+0x128>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80015bc:	601a      	str	r2, [r3, #0]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80015be:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80015c2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80015c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);

  if(TimerInitMode == hw_ts_InitMode_Full)
 80015ca:	2800      	cmp	r0, #0
 80015cc:	d139      	bne.n	8001642 <HW_TS_Init+0xfe>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80015ce:	4a28      	ldr	r2, [pc, #160]	; (8001670 <HW_TS_Init+0x12c>)
 80015d0:	2101      	movs	r1, #1
 80015d2:	f882 1098 	strb.w	r1, [r2, #152]	; 0x98
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80015d6:	f04f 36ff 	mov.w	r6, #4294967295
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80015da:	2106      	movs	r1, #6
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80015dc:	f8c2 6094 	str.w	r6, [r2, #148]	; 0x94
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80015e0:	7410      	strb	r0, [r2, #16]
 80015e2:	f882 0028 	strb.w	r0, [r2, #40]	; 0x28
 80015e6:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
 80015ea:	f882 0058 	strb.w	r0, [r2, #88]	; 0x58
 80015ee:	f882 0070 	strb.w	r0, [r2, #112]	; 0x70
 80015f2:	f882 0088 	strb.w	r0, [r2, #136]	; 0x88
    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80015f6:	7011      	strb	r1, [r2, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 80015f8:	68aa      	ldr	r2, [r5, #8]
 80015fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015fe:	60aa      	str	r2, [r5, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001600:	68ea      	ldr	r2, [r5, #12]
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	f462 6290 	orn	r2, r2, #1152	; 0x480
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001608:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800160c:	60ea      	str	r2, [r5, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800160e:	2003      	movs	r0, #3
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001610:	60d9      	str	r1, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001612:	f00c f805 	bl	800d620 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001616:	6823      	ldr	r3, [r4, #0]
 8001618:	681d      	ldr	r5, [r3, #0]
 800161a:	68ab      	ldr	r3, [r5, #8]
 800161c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001620:	60ab      	str	r3, [r5, #8]
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001622:	23ff      	movs	r3, #255	; 0xff

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001624:	2103      	movs	r1, #3
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001626:	626b      	str	r3, [r5, #36]	; 0x24
  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001628:	4608      	mov	r0, r1
 800162a:	2200      	movs	r2, #0
 800162c:	f00b ff50 	bl	800d4d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */

  return;
}
 8001630:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001634:	2003      	movs	r0, #3
 8001636:	f00b bf95 	b.w	800d564 <HAL_NVIC_EnableIRQ>
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800163a:	4a0b      	ldr	r2, [pc, #44]	; (8001668 <HW_TS_Init+0x124>)
 800163c:	b29b      	uxth	r3, r3
 800163e:	8013      	strh	r3, [r2, #0]
 8001640:	e7b8      	b.n	80015b4 <HW_TS_Init+0x70>
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001642:	68eb      	ldr	r3, [r5, #12]
 8001644:	055b      	lsls	r3, r3, #21
 8001646:	d5ec      	bpl.n	8001622 <HW_TS_Init+0xde>
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001648:	2003      	movs	r0, #3
 800164a:	f00b ffd3 	bl	800d5f4 <HAL_NVIC_SetPendingIRQ>
 800164e:	6823      	ldr	r3, [r4, #0]
 8001650:	681d      	ldr	r5, [r3, #0]
 8001652:	e7e6      	b.n	8001622 <HW_TS_Init+0xde>
 8001654:	40002800 	.word	0x40002800
 8001658:	20000338 	.word	0x20000338
 800165c:	20000336 	.word	0x20000336
 8001660:	20000331 	.word	0x20000331
 8001664:	20000334 	.word	0x20000334
 8001668:	20000332 	.word	0x20000332
 800166c:	58000800 	.word	0x58000800
 8001670:	200001a4 	.word	0x200001a4

08001674 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001678:	4680      	mov	r8, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800167a:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800167e:	b672      	cpsid	i
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001680:	4f10      	ldr	r7, [pc, #64]	; (80016c4 <HW_TS_Create+0x50>)
 8001682:	2400      	movs	r4, #0
 8001684:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8001688:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 800168c:	fa5f fc84 	uxtb.w	ip, r4
 8001690:	7c2e      	ldrb	r6, [r5, #16]
 8001692:	f105 0e10 	add.w	lr, r5, #16
 8001696:	3401      	adds	r4, #1
 8001698:	f006 00ff 	and.w	r0, r6, #255	; 0xff
 800169c:	b136      	cbz	r6, 80016ac <HW_TS_Create+0x38>
 800169e:	2c06      	cmp	r4, #6
 80016a0:	d1f0      	bne.n	8001684 <HW_TS_Create+0x10>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016a2:	f389 8810 	msr	PRIMASK, r9
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80016a6:	2001      	movs	r0, #1
  }

  return(localreturnstatus);
}
 80016a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80016ac:	2401      	movs	r4, #1
 80016ae:	742c      	strb	r4, [r5, #16]
 80016b0:	f389 8810 	msr	PRIMASK, r9
    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80016b4:	f8c5 8014 	str.w	r8, [r5, #20]
    aTimerContext[loop].TimerMode = TimerMode;
 80016b8:	746a      	strb	r2, [r5, #17]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80016ba:	606b      	str	r3, [r5, #4]
    *pTimerId = loop;
 80016bc:	f881 c000 	strb.w	ip, [r1]
}
 80016c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016c4:	200001a4 	.word	0x200001a4

080016c8 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80016c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016cc:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016ce:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80016d2:	b672      	cpsid	i
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80016d4:	4f27      	ldr	r7, [pc, #156]	; (8001774 <HW_TS_Stop+0xac>)

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80016d6:	4d28      	ldr	r5, [pc, #160]	; (8001778 <HW_TS_Stop+0xb0>)
  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80016d8:	2003      	movs	r0, #3
 80016da:	f00b ff57 	bl	800d58c <HAL_NVIC_DisableIRQ>
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80016de:	683e      	ldr	r6, [r7, #0]
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80016e0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80016e4:	6833      	ldr	r3, [r6, #0]
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80016e6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80016ea:	20ca      	movs	r0, #202	; 0xca
 80016ec:	2153      	movs	r1, #83	; 0x53
 80016ee:	6258      	str	r0, [r3, #36]	; 0x24
 80016f0:	6259      	str	r1, [r3, #36]	; 0x24
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80016f2:	7c12      	ldrb	r2, [r2, #16]
 80016f4:	2a02      	cmp	r2, #2
 80016f6:	d008      	beq.n	800170a <HW_TS_Stop+0x42>
      RescheduleTimerList();
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80016f8:	22ff      	movs	r2, #255	; 0xff
 80016fa:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80016fc:	2003      	movs	r0, #3
 80016fe:	f00b ff31 	bl	800d564 <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001702:	f388 8810 	msr	PRIMASK, r8
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
}
 8001706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800170a:	4620      	mov	r0, r4
 800170c:	2100      	movs	r1, #0
 800170e:	f7ff fdf3 	bl	80012f8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001712:	782b      	ldrb	r3, [r5, #0]
    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001714:	2b06      	cmp	r3, #6
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001716:	b2da      	uxtb	r2, r3
    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001718:	d004      	beq.n	8001724 <HW_TS_Stop+0x5c>
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800171a:	786b      	ldrb	r3, [r5, #1]
 800171c:	4293      	cmp	r3, r2
 800171e:	d124      	bne.n	800176a <HW_TS_Stop+0xa2>
 8001720:	6833      	ldr	r3, [r6, #0]
 8001722:	e7e9      	b.n	80016f8 <HW_TS_Stop+0x30>
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001724:	4b15      	ldr	r3, [pc, #84]	; (800177c <HW_TS_Stop+0xb4>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f413 6f80 	tst.w	r3, #1024	; 0x400
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800172c:	6833      	ldr	r3, [r6, #0]
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800172e:	d115      	bne.n	800175c <HW_TS_Stop+0x94>
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001736:	609a      	str	r2, [r3, #8]
      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001738:	68da      	ldr	r2, [r3, #12]
 800173a:	0752      	lsls	r2, r2, #29
 800173c:	d5fc      	bpl.n	8001738 <HW_TS_Stop+0x70>
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800173e:	68da      	ldr	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001740:	490f      	ldr	r1, [pc, #60]	; (8001780 <HW_TS_Stop+0xb8>)
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	f462 6290 	orn	r2, r2, #1152	; 0x480
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001748:	f44f 2400 	mov.w	r4, #524288	; 0x80000
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800174c:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800174e:	2003      	movs	r0, #3
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001750:	60cc      	str	r4, [r1, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001752:	f00b ff65 	bl	800d620 <HAL_NVIC_ClearPendingIRQ>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	e7cd      	b.n	80016f8 <HW_TS_Stop+0x30>
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	0751      	lsls	r1, r2, #29
 8001760:	d5e6      	bpl.n	8001730 <HW_TS_Stop+0x68>
 8001762:	68da      	ldr	r2, [r3, #12]
 8001764:	0751      	lsls	r1, r2, #29
 8001766:	d4f9      	bmi.n	800175c <HW_TS_Stop+0x94>
 8001768:	e7e2      	b.n	8001730 <HW_TS_Stop+0x68>
      RescheduleTimerList();
 800176a:	f7ff fe3d 	bl	80013e8 <RescheduleTimerList>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	e7c1      	b.n	80016f8 <HW_TS_Stop+0x30>
 8001774:	20000338 	.word	0x20000338
 8001778:	200001a4 	.word	0x200001a4
 800177c:	40002800 	.word	0x40002800
 8001780:	58000800 	.word	0x58000800

08001784 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001784:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001788:	4c5e      	ldr	r4, [pc, #376]	; (8001904 <HW_TS_Start+0x180>)
 800178a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800178e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
{
 8001792:	4681      	mov	r9, r0
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001794:	7c1b      	ldrb	r3, [r3, #16]
 8001796:	2b02      	cmp	r3, #2
{
 8001798:	468b      	mov	fp, r1
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800179a:	ea4f 0640 	mov.w	r6, r0, lsl #1
 800179e:	f000 80a5 	beq.w	80018ec <HW_TS_Start+0x168>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017a2:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80017a6:	b672      	cpsid	i
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80017a8:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8001908 <HW_TS_Start+0x184>
  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80017ac:	2003      	movs	r0, #3
 80017ae:	f00b feed 	bl	800d58c <HAL_NVIC_DisableIRQ>
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80017b2:	f8d8 a000 	ldr.w	sl, [r8]
 80017b6:	f8da 3000 	ldr.w	r3, [sl]
 80017ba:	22ca      	movs	r2, #202	; 0xca

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80017bc:	eb06 0509 	add.w	r5, r6, r9
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80017c0:	625a      	str	r2, [r3, #36]	; 0x24
  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80017c2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80017c6:	2253      	movs	r2, #83	; 0x53
 80017c8:	625a      	str	r2, [r3, #36]	; 0x24
  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80017ca:	2302      	movs	r3, #2
 80017cc:	742b      	strb	r3, [r5, #16]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80017ce:	f8c5 b00c 	str.w	fp, [r5, #12]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80017d2:	f8c5 b008 	str.w	fp, [r5, #8]
  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80017d6:	7823      	ldrb	r3, [r4, #0]
 80017d8:	2b06      	cmp	r3, #6
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	d11f      	bne.n	800181e <HW_TS_Start+0x9a>
    PreviousRunningTimerID = CurrentRunningTimerID;
 80017de:	7823      	ldrb	r3, [r4, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80017e0:	f04f 31ff 	mov.w	r1, #4294967295
    PreviousRunningTimerID = CurrentRunningTimerID;
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	7063      	strb	r3, [r4, #1]
    time_elapsed = 0;
 80017e8:	2000      	movs	r0, #0
    CurrentRunningTimerID = TimerID;
 80017ea:	f884 9000 	strb.w	r9, [r4]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80017ee:	766a      	strb	r2, [r5, #25]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80017f0:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94

  time_elapsed =  linkTimer(timer_id);

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80017f4:	7823      	ldrb	r3, [r4, #0]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80017f6:	7862      	ldrb	r2, [r4, #1]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d157      	bne.n	80018ac <HW_TS_Start+0x128>
  {
    RescheduleTimerList();
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80017fc:	444e      	add	r6, r9
 80017fe:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8001802:	68e3      	ldr	r3, [r4, #12]
 8001804:	1a18      	subs	r0, r3, r0
 8001806:	60e0      	str	r0, [r4, #12]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001808:	f8da 3000 	ldr.w	r3, [sl]
 800180c:	22ff      	movs	r2, #255	; 0xff
 800180e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001810:	2003      	movs	r0, #3
 8001812:	f00b fea7 	bl	800d564 <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001816:	f387 8810 	msr	PRIMASK, r7
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
}
 800181a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    time_elapsed = ReturnTimeElapsed();
 800181e:	f7ff fda9 	bl	8001374 <ReturnTimeElapsed>
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001822:	68eb      	ldr	r3, [r5, #12]
 8001824:	4403      	add	r3, r0
 8001826:	60eb      	str	r3, [r5, #12]
    time_left = aTimerContext[TimerID].CountLeft;
 8001828:	68e9      	ldr	r1, [r5, #12]
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800182a:	7823      	ldrb	r3, [r4, #0]
 800182c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001830:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	4299      	cmp	r1, r3
 8001838:	d33d      	bcc.n	80018b6 <HW_TS_Start+0x132>
      timer_id_lookup = CurrentRunningTimerID;
 800183a:	7823      	ldrb	r3, [r4, #0]
 800183c:	e00c      	b.n	8001858 <HW_TS_Start+0xd4>
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800183e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001842:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001846:	eb02 0c05 	add.w	ip, r2, r5
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	4299      	cmp	r1, r3
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 800184e:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001852:	d30f      	bcc.n	8001874 <HW_TS_Start+0xf0>
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001854:	f89c 3019 	ldrb.w	r3, [ip, #25]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001858:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800185c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001860:	b2dd      	uxtb	r5, r3
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001862:	f892 c019 	ldrb.w	ip, [r2, #25]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001866:	f1bc 0f06 	cmp.w	ip, #6
        next_id = aTimerContext[timer_id_lookup].NextID;
 800186a:	ea4f 0243 	mov.w	r2, r3, lsl #1
 800186e:	fa5f f38c 	uxtb.w	r3, ip
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001872:	d1e4      	bne.n	800183e <HW_TS_Start+0xba>
  next_id = aTimerContext[RefTimerID].NextID;
 8001874:	1953      	adds	r3, r2, r5
 8001876:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800187a:	7e5b      	ldrb	r3, [r3, #25]
  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800187c:	2b06      	cmp	r3, #6
  next_id = aTimerContext[RefTimerID].NextID;
 800187e:	b2d9      	uxtb	r1, r3
  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001880:	d005      	beq.n	800188e <HW_TS_Start+0x10a>
    aTimerContext[next_id].PreviousID = TimerID;
 8001882:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8001886:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800188a:	f883 9018 	strb.w	r9, [r3, #24]
  aTimerContext[RefTimerID].NextID = TimerID;
 800188e:	1953      	adds	r3, r2, r5
  aTimerContext[TimerID].NextID = next_id;
 8001890:	eb06 0209 	add.w	r2, r6, r9
 8001894:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
  aTimerContext[RefTimerID].NextID = TimerID;
 8001898:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  aTimerContext[TimerID].NextID = next_id;
 800189c:	7651      	strb	r1, [r2, #25]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800189e:	7615      	strb	r5, [r2, #24]
  aTimerContext[RefTimerID].NextID = TimerID;
 80018a0:	f883 9019 	strb.w	r9, [r3, #25]
  localcurrentrunningtimerid = CurrentRunningTimerID;
 80018a4:	7823      	ldrb	r3, [r4, #0]
  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80018a6:	7862      	ldrb	r2, [r4, #1]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d0a7      	beq.n	80017fc <HW_TS_Start+0x78>
    RescheduleTimerList();
 80018ac:	f7ff fd9c 	bl	80013e8 <RescheduleTimerList>
 80018b0:	f8d8 a000 	ldr.w	sl, [r8]
 80018b4:	e7a8      	b.n	8001808 <HW_TS_Start+0x84>
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80018b6:	7822      	ldrb	r2, [r4, #0]
  if(RefTimerID != CurrentRunningTimerID)
 80018b8:	7821      	ldrb	r1, [r4, #0]
 80018ba:	428a      	cmp	r2, r1
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80018bc:	b2d3      	uxtb	r3, r2
  if(RefTimerID != CurrentRunningTimerID)
 80018be:	d018      	beq.n	80018f2 <HW_TS_Start+0x16e>
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80018c0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80018c4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80018c8:	7e0a      	ldrb	r2, [r1, #24]
    aTimerContext[previous_id].NextID = TimerID;
 80018ca:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 80018ce:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80018d2:	b2d2      	uxtb	r2, r2
    aTimerContext[previous_id].NextID = TimerID;
 80018d4:	f88c 9019 	strb.w	r9, [ip, #25]
    aTimerContext[TimerID].NextID = RefTimerID;
 80018d8:	766b      	strb	r3, [r5, #25]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80018da:	762a      	strb	r2, [r5, #24]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80018dc:	f881 9018 	strb.w	r9, [r1, #24]
      PreviousRunningTimerID = CurrentRunningTimerID;
 80018e0:	7823      	ldrb	r3, [r4, #0]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	7063      	strb	r3, [r4, #1]
      CurrentRunningTimerID = TimerID;
 80018e6:	f884 9000 	strb.w	r9, [r4]
 80018ea:	e783      	b.n	80017f4 <HW_TS_Start+0x70>
    HW_TS_Stop( timer_id );
 80018ec:	f7ff feec 	bl	80016c8 <HW_TS_Stop>
 80018f0:	e757      	b.n	80017a2 <HW_TS_Start+0x1e>
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80018f2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80018f6:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    aTimerContext[TimerID].NextID = RefTimerID;
 80018fa:	766b      	strb	r3, [r5, #25]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80018fc:	f882 9018 	strb.w	r9, [r2, #24]
 8001900:	e7ee      	b.n	80018e0 <HW_TS_Start+0x15c>
 8001902:	bf00      	nop
 8001904:	200001a4 	.word	0x200001a4
 8001908:	20000338 	.word	0x20000338

0800190c <HW_TS_RTC_Int_AppNot>:
  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
  pTimerCallBack();
 800190c:	4710      	bx	r2
 800190e:	bf00      	nop

08001910 <HW_TS_RTC_Wakeup_Handler>:
{
 8001910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001914:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001918:	b672      	cpsid	i
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800191a:	4e2f      	ldr	r6, [pc, #188]	; (80019d8 <HW_TS_RTC_Wakeup_Handler+0xc8>)
  local_current_running_timer_id = CurrentRunningTimerID;
 800191c:	492f      	ldr	r1, [pc, #188]	; (80019dc <HW_TS_RTC_Wakeup_Handler+0xcc>)
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800191e:	6833      	ldr	r3, [r6, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f04f 09ca 	mov.w	r9, #202	; 0xca
 8001926:	f04f 0853 	mov.w	r8, #83	; 0x53
 800192a:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
 800192e:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001938:	609a      	str	r2, [r3, #8]
  local_current_running_timer_id = CurrentRunningTimerID;
 800193a:	7808      	ldrb	r0, [r1, #0]
  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 800193c:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8001940:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8001944:	7c2a      	ldrb	r2, [r5, #16]
 8001946:	2a02      	cmp	r2, #2
 8001948:	d013      	beq.n	8001972 <HW_TS_RTC_Wakeup_Handler+0x62>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800194a:	68da      	ldr	r2, [r3, #12]
 800194c:	0752      	lsls	r2, r2, #29
 800194e:	d5fc      	bpl.n	800194a <HW_TS_RTC_Wakeup_Handler+0x3a>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001950:	68da      	ldr	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001952:	4923      	ldr	r1, [pc, #140]	; (80019e0 <HW_TS_RTC_Wakeup_Handler+0xd0>)
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	f462 6290 	orn	r2, r2, #1152	; 0x480
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800195a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800195e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001960:	60c8      	str	r0, [r1, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001962:	f387 8810 	msr	PRIMASK, r7
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001966:	6833      	ldr	r3, [r6, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	22ff      	movs	r2, #255	; 0xff
 800196c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800196e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001972:	f8d5 b004 	ldr.w	fp, [r5, #4]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001976:	f8d5 a014 	ldr.w	sl, [r5, #20]
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800197a:	f891 3098 	ldrb.w	r3, [r1, #152]	; 0x98
 800197e:	b32b      	cbz	r3, 80019cc <HW_TS_RTC_Wakeup_Handler+0xbc>
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001980:	7c6b      	ldrb	r3, [r5, #17]
 8001982:	2b01      	cmp	r3, #1
 8001984:	b2c4      	uxtb	r4, r0
 8001986:	b2d9      	uxtb	r1, r3
 8001988:	d010      	beq.n	80019ac <HW_TS_RTC_Wakeup_Handler+0x9c>
 800198a:	f387 8810 	msr	PRIMASK, r7
        HW_TS_Stop(local_current_running_timer_id);
 800198e:	4620      	mov	r0, r4
 8001990:	f7ff fe9a 	bl	80016c8 <HW_TS_Stop>
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001994:	6833      	ldr	r3, [r6, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
 800199c:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80019a0:	465a      	mov	r2, fp
 80019a2:	4621      	mov	r1, r4
 80019a4:	4650      	mov	r0, sl
 80019a6:	f7ff ffb1 	bl	800190c <HW_TS_RTC_Int_AppNot>
 80019aa:	e7dc      	b.n	8001966 <HW_TS_RTC_Wakeup_Handler+0x56>
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80019ac:	4620      	mov	r0, r4
 80019ae:	f7ff fca3 	bl	80012f8 <UnlinkTimer>
 80019b2:	f387 8810 	msr	PRIMASK, r7
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80019b6:	68a9      	ldr	r1, [r5, #8]
 80019b8:	4620      	mov	r0, r4
 80019ba:	f7ff fee3 	bl	8001784 <HW_TS_Start>
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80019be:	6833      	ldr	r3, [r6, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
 80019c6:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
 80019ca:	e7e9      	b.n	80019a0 <HW_TS_RTC_Wakeup_Handler+0x90>
      RescheduleTimerList();
 80019cc:	f7ff fd0c 	bl	80013e8 <RescheduleTimerList>
 80019d0:	f387 8810 	msr	PRIMASK, r7
}
 80019d4:	e7c7      	b.n	8001966 <HW_TS_RTC_Wakeup_Handler+0x56>
 80019d6:	bf00      	nop
 80019d8:	20000338 	.word	0x20000338
 80019dc:	200001a4 	.word	0x200001a4
 80019e0:	58000800 	.word	0x58000800

080019e4 <HW_UART_Transmit_DMA>:
hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
    HAL_StatusTypeDef hal_status = HAL_OK;
    hw_status_t hw_status = hw_uart_ok;

    switch (hw_uart_id)
 80019e4:	b108      	cbz	r0, 80019ea <HW_UART_Transmit_DMA+0x6>
{
 80019e6:	2000      	movs	r0, #0
        default:
            break;
    }

    return hw_status;
}
 80019e8:	4770      	bx	lr
{
 80019ea:	b538      	push	{r3, r4, r5, lr}
            huart1.Instance = USART1;
 80019ec:	4806      	ldr	r0, [pc, #24]	; (8001a08 <HW_UART_Transmit_DMA+0x24>)
            HW_huart1TxCb = cb;
 80019ee:	4c07      	ldr	r4, [pc, #28]	; (8001a0c <HW_UART_Transmit_DMA+0x28>)
            huart1.Instance = USART1;
 80019f0:	4d07      	ldr	r5, [pc, #28]	; (8001a10 <HW_UART_Transmit_DMA+0x2c>)
            HW_huart1TxCb = cb;
 80019f2:	6023      	str	r3, [r4, #0]
            huart1.Instance = USART1;
 80019f4:	6005      	str	r5, [r0, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80019f6:	f00e fe35 	bl	8010664 <HAL_UART_Transmit_DMA>
    switch (hal_status)
 80019fa:	1e43      	subs	r3, r0, #1
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b02      	cmp	r3, #2
{
 8001a00:	bf88      	it	hi
 8001a02:	2000      	movhi	r0, #0
}
 8001a04:	bd38      	pop	{r3, r4, r5, pc}
 8001a06:	bf00      	nop
 8001a08:	200008a8 	.word	0x200008a8
 8001a0c:	20000808 	.word	0x20000808
 8001a10:	40013800 	.word	0x40013800

08001a14 <HAL_UART_TxCpltCallback>:
    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
    switch ((uint32_t)huart->Instance)
 8001a14:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <HAL_UART_TxCpltCallback+0x14>)
 8001a16:	6802      	ldr	r2, [r0, #0]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d000      	beq.n	8001a1e <HAL_UART_TxCpltCallback+0xa>
        default:
            break;
    }

    return;
}
 8001a1c:	4770      	bx	lr
            if(HW_huart1TxCb)
 8001a1e:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <HAL_UART_TxCpltCallback+0x18>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0fa      	beq.n	8001a1c <HAL_UART_TxCpltCallback+0x8>
                HW_huart1TxCb();
 8001a26:	4718      	bx	r3
 8001a28:	40013800 	.word	0x40013800
 8001a2c:	20000808 	.word	0x20000808

08001a30 <spdt_2g4_on>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void spdt_2g4_on( void )
{
	HAL_GPIO_WritePin(VCC_24GHZ_SW_GPIO_Port, VCC_24GHZ_SW_Pin, 1);
 8001a30:	2201      	movs	r2, #1
 8001a32:	2108      	movs	r1, #8
 8001a34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a38:	f00c b986 	b.w	800dd48 <HAL_GPIO_WritePin>

08001a3c <set_wifi_antenna>:

void set_wifi_antenna( void )
{
    /* SWITCH_WIFI_BLE_Pin = 1 ==> Wi-Fi */
//    hal_gpio_set_value( SWITCH_WIFI_BLE, 1 );
	HAL_GPIO_WritePin(BLE_WIFI_SEL_SWITCH_GPIO_Port, BLE_WIFI_SEL_SWITCH_Pin, 1);
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a46:	f00c b97f 	b.w	800dd48 <HAL_GPIO_WritePin>
 8001a4a:	bf00      	nop

08001a4c <set_ble_antenna>:

void set_ble_antenna( void )
{
    /* SWITCH_WIFI_BLE_Pin = 0 ==> BLE */
//    hal_gpio_set_value( SWITCH_WIFI_BLE, 0 );
    HAL_GPIO_WritePin(BLE_WIFI_SEL_SWITCH_GPIO_Port, BLE_WIFI_SEL_SWITCH_Pin, 0);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a56:	f00c b977 	b.w	800dd48 <HAL_GPIO_WritePin>
 8001a5a:	bf00      	nop

08001a5c <__io_getchar>:
{
	HAL_UART_Transmit(&huart1, &ch, 1, 1000);
}

int __io_getchar(void)
{
 8001a5c:	b510      	push	{r4, lr}
 8001a5e:	b082      	sub	sp, #8
	uint8_t u8Data = 0;
 8001a60:	2400      	movs	r4, #0
	HAL_UART_Receive(&huart1, &u8Data, 1, 1000);
 8001a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a66:	2201      	movs	r2, #1
 8001a68:	f10d 0107 	add.w	r1, sp, #7
 8001a6c:	4804      	ldr	r0, [pc, #16]	; (8001a80 <__io_getchar+0x24>)
	uint8_t u8Data = 0;
 8001a6e:	f88d 4007 	strb.w	r4, [sp, #7]
	HAL_UART_Receive(&huart1, &u8Data, 1, 1000);
 8001a72:	f00f fb2b 	bl	80110cc <HAL_UART_Receive>
	return u8Data;
}
 8001a76:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001a7a:	b002      	add	sp, #8
 8001a7c:	bd10      	pop	{r4, pc}
 8001a7e:	bf00      	nop
 8001a80:	200008a8 	.word	0x200008a8

08001a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a84:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a86:	2100      	movs	r1, #0
{
 8001a88:	b099      	sub	sp, #100	; 0x64
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a8a:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a8c:	2244      	movs	r2, #68	; 0x44
 8001a8e:	a807      	add	r0, sp, #28
 8001a90:	f011 fa78 	bl	8012f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a94:	e9cd 4400 	strd	r4, r4, [sp]
 8001a98:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001a9c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001aa0:	9406      	str	r4, [sp, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001aa2:	f00c f9c3 	bl	800de2c <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001aa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001aaa:	2501      	movs	r5, #1
 8001aac:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001ab0:	f023 0318 	bic.w	r3, r3, #24
 8001ab4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8001ab8:	230f      	movs	r3, #15
 8001aba:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001abc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ac4:	e9cd 5309 	strd	r5, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ac8:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001aca:	2305      	movs	r3, #5
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001acc:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ace:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001ad0:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ad4:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ad6:	f00c fa8b 	bl	800dff0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001ada:	226f      	movs	r2, #111	; 0x6f
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001adc:	2302      	movs	r3, #2
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ade:	4629      	mov	r1, r5
 8001ae0:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001ae2:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ae6:	e9cd 4402 	strd	r4, r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001aea:	e9cd 4404 	strd	r4, r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001aee:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001af0:	f00c fe70 	bl	800e7d4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSI);
 8001af4:	4620      	mov	r0, r4
 8001af6:	f00d fa33 	bl	800ef60 <HAL_RCCEx_EnableLSCO>
}
 8001afa:	b019      	add	sp, #100	; 0x64
 8001afc:	bd30      	pop	{r4, r5, pc}
 8001afe:	bf00      	nop

08001b00 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b00:	b510      	push	{r4, lr}
 8001b02:	b08c      	sub	sp, #48	; 0x30
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b04:	2220      	movs	r2, #32
 8001b06:	2100      	movs	r1, #0
 8001b08:	a801      	add	r0, sp, #4
 8001b0a:	f011 fa3b 	bl	8012f84 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001b0e:	f44f 5440 	mov.w	r4, #12288	; 0x3000
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001b12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001b16:	2202      	movs	r2, #2
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001b18:	2310      	movs	r3, #16

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b1a:	4668      	mov	r0, sp
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001b1c:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001b20:	9400      	str	r4, [sp, #0]
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001b22:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b24:	f00d f850 	bl	800ebc8 <HAL_RCCEx_PeriphCLKConfig>
    Error_Handler();
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001b28:	b00c      	add	sp, #48	; 0x30
 8001b2a:	bd10      	pop	{r4, pc}

08001b2c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void MX_RTC_Init(void)
{
 8001b2c:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001b2e:	2400      	movs	r4, #0
{
 8001b30:	b090      	sub	sp, #64	; 0x40
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b32:	4d29      	ldr	r5, [pc, #164]	; (8001bd8 <MX_RTC_Init+0xac>)
 8001b34:	4e29      	ldr	r6, [pc, #164]	; (8001bdc <MX_RTC_Init+0xb0>)
  RTC_TimeTypeDef sTime = {0};
 8001b36:	9402      	str	r4, [sp, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8001b38:	4621      	mov	r1, r4
 8001b3a:	a806      	add	r0, sp, #24
 8001b3c:	2228      	movs	r2, #40	; 0x28
  RTC_TimeTypeDef sTime = {0};
 8001b3e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8001b42:	9401      	str	r4, [sp, #4]
 8001b44:	9405      	str	r4, [sp, #20]
  RTC_DateTypeDef sDate = {0};
 8001b46:	9400      	str	r4, [sp, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8001b48:	f011 fa1c 	bl	8012f84 <memset>
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001b4c:	f647 73ff 	movw	r3, #32767	; 0x7fff
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001b50:	220f      	movs	r2, #15
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b52:	4628      	mov	r0, r5
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001b54:	e9c5 2302 	strd	r2, r3, [r5, #8]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001b58:	e9c5 4405 	strd	r4, r4, [r5, #20]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b5c:	606c      	str	r4, [r5, #4]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b5e:	612c      	str	r4, [r5, #16]
  hrtc.Instance = RTC;
 8001b60:	602e      	str	r6, [r5, #0]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b62:	f00d fddb 	bl	800f71c <HAL_RTC_Init>
  sTime.Minutes = 0x0;
  sTime.Seconds = 0x0;
  sTime.SubSeconds = 0x0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001b66:	a901      	add	r1, sp, #4
 8001b68:	4628      	mov	r0, r5
 8001b6a:	2201      	movs	r2, #1
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b6c:	e9cd 4404 	strd	r4, r4, [sp, #16]
  sTime.Hours = 0x0;
 8001b70:	f8ad 4004 	strh.w	r4, [sp, #4]
  sTime.Seconds = 0x0;
 8001b74:	f88d 4006 	strb.w	r4, [sp, #6]
  sTime.SubSeconds = 0x0;
 8001b78:	9402      	str	r4, [sp, #8]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001b7a:	f00d fe8b 	bl	800f894 <HAL_RTC_SetTime>
  {
    Error_Handler();
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001b7e:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <MX_RTC_Init+0xb4>)
 8001b80:	9300      	str	r3, [sp, #0]
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 0x1;
  sDate.Year = 0x0;
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001b82:	4669      	mov	r1, sp
 8001b84:	4628      	mov	r0, r5
 8001b86:	2201      	movs	r2, #1
 8001b88:	f00d ffc4 	bl	800fb14 <HAL_RTC_SetDate>
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
  sAlarm.AlarmDateWeekDay = 0x1;
  sAlarm.Alarm = RTC_ALARM_A;
 8001b8c:	f44f 7380 	mov.w	r3, #256	; 0x100
  sAlarm.AlarmDateWeekDay = 0x1;
 8001b90:	2201      	movs	r2, #1
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001b92:	a906      	add	r1, sp, #24
 8001b94:	4628      	mov	r0, r5
  sAlarm.Alarm = RTC_ALARM_A;
 8001b96:	930f      	str	r3, [sp, #60]	; 0x3c
  sAlarm.AlarmDateWeekDay = 0x1;
 8001b98:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b9c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001ba0:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  sAlarm.AlarmTime.Hours = 0x0;
 8001ba4:	f8ad 4018 	strh.w	r4, [sp, #24]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001ba8:	f88d 401a 	strb.w	r4, [sp, #26]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001bac:	9407      	str	r4, [sp, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001bae:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001bb0:	f00d fad0 	bl	800f154 <HAL_RTC_SetAlarm_IT>
  {
    Error_Handler();
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001bb4:	4622      	mov	r2, r4
 8001bb6:	4621      	mov	r1, r4
 8001bb8:	4628      	mov	r0, r5
 8001bba:	f00e f8bb 	bl	800fd34 <HAL_RTCEx_SetWakeUpTimer_IT>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001bbe:	22ca      	movs	r2, #202	; 0xca
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001bc0:	2353      	movs	r3, #83	; 0x53
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001bc2:	6272      	str	r2, [r6, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001bc4:	6273      	str	r3, [r6, #36]	; 0x24
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001bc6:	68b3      	ldr	r3, [r6, #8]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001bc8:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001bca:	f023 0307 	bic.w	r3, r3, #7
 8001bce:	60b3      	str	r3, [r6, #8]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001bd0:	6272      	str	r2, [r6, #36]	; 0x24

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
  /* USER CODE END RTC_Init 2 */

}
 8001bd2:	b010      	add	sp, #64	; 0x40
 8001bd4:	bd70      	pop	{r4, r5, r6, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000938 	.word	0x20000938
 8001bdc:	40002800 	.word	0x40002800
 8001be0:	00010101 	.word	0x00010101

08001be4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001be4:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001be6:	4c11      	ldr	r4, [pc, #68]	; (8001c2c <MX_USART1_UART_Init+0x48>)
 8001be8:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <MX_USART1_UART_Init+0x4c>)
 8001bea:	6023      	str	r3, [r4, #0]
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bec:	2500      	movs	r5, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bf2:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 8001bf4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bf8:	4620      	mov	r0, r4
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bfa:	6162      	str	r2, [r4, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001bfc:	61e3      	str	r3, [r4, #28]
  huart1.Init.BaudRate = 115200;
 8001bfe:	6061      	str	r1, [r4, #4]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c00:	e9c4 5502 	strd	r5, r5, [r4, #8]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c04:	e9c4 5508 	strd	r5, r5, [r4, #32]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c08:	6125      	str	r5, [r4, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c0a:	61a5      	str	r5, [r4, #24]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c0c:	62a5      	str	r5, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c0e:	f00f fb21 	bl	8011254 <HAL_UART_Init>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c12:	4629      	mov	r1, r5
 8001c14:	4620      	mov	r0, r4
 8001c16:	f00f fbcb 	bl	80113b0 <HAL_UARTEx_SetTxFifoThreshold>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c1a:	4629      	mov	r1, r5
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	f00f fc11 	bl	8011444 <HAL_UARTEx_SetRxFifoThreshold>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c22:	4620      	mov	r0, r4
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c28:	f00f bb94 	b.w	8011354 <HAL_UARTEx_DisableFifoMode>
 8001c2c:	200008a8 	.word	0x200008a8
 8001c30:	40013800 	.word	0x40013800

08001c34 <MX_DMA_Init>:
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001c38:	b500      	push	{lr}
 8001c3a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001c3c:	f041 0104 	orr.w	r1, r1, #4
 8001c40:	6499      	str	r1, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001c42:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001c44:	b083      	sub	sp, #12
 8001c46:	f001 0104 	and.w	r1, r1, #4
 8001c4a:	9101      	str	r1, [sp, #4]
  (void)tmpreg;
 8001c4c:	9901      	ldr	r1, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001c4e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001c50:	f041 0101 	orr.w	r1, r1, #1
 8001c54:	6499      	str	r1, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	9300      	str	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	210f      	movs	r1, #15
 8001c62:	200e      	movs	r0, #14
  (void)tmpreg;
 8001c64:	9b00      	ldr	r3, [sp, #0]
 8001c66:	f00b fc33 	bl	800d4d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001c6a:	200e      	movs	r0, #14

}
 8001c6c:	b003      	add	sp, #12
 8001c6e:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001c72:	f00b bc77 	b.w	800d564 <HAL_NVIC_EnableIRQ>
 8001c76:	bf00      	nop

08001c78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8001c78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	2400      	movs	r4, #0
{
 8001c7e:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001c84:	e9cd 4407 	strd	r4, r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c8c:	9409      	str	r4, [sp, #36]	; 0x24
 8001c8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GNSS_ANT_SWITCH_Pin|EFFECT_HAL_OUT_Pin|RX1_LED_Pin, GPIO_PIN_RESET);
 8001c90:	4d4f      	ldr	r5, [pc, #316]	; (8001dd0 <MX_GPIO_Init+0x158>)
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LR_NRESET_Pin|VCC_SENSORS_MCU_Pin|VCC_24GHZ_SW_Pin|NSS_Pin
                          |LNA_PON_MCU_Pin|BLE_WIFI_SEL_SWITCH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX1_LED_GPIO_Port, TX1_LED_Pin, GPIO_PIN_RESET);
 8001c92:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8001dd8 <MX_GPIO_Init+0x160>
 8001c96:	f042 0204 	orr.w	r2, r2, #4
 8001c9a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c9e:	f002 0204 	and.w	r2, r2, #4
 8001ca2:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 8001ca4:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ca6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ca8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cac:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001cae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cb0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001cb4:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8001cb6:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001cb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cba:	f042 0202 	orr.w	r2, r2, #2
 8001cbe:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001cc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cc2:	f002 0202 	and.w	r2, r2, #2
 8001cc6:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001cc8:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001cca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ccc:	f042 0201 	orr.w	r2, r2, #1
 8001cd0:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001cd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cd4:	f002 0201 	and.w	r2, r2, #1
 8001cd8:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001cda:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001cdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cde:	f042 0210 	orr.w	r2, r2, #16
 8001ce2:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce6:	f003 0310 	and.w	r3, r3, #16
 8001cea:	9300      	str	r3, [sp, #0]
  HAL_GPIO_WritePin(GPIOB, GNSS_ANT_SWITCH_Pin|EFFECT_HAL_OUT_Pin|RX1_LED_Pin, GPIO_PIN_RESET);
 8001cec:	4622      	mov	r2, r4
 8001cee:	4628      	mov	r0, r5
 8001cf0:	f44f 7192 	mov.w	r1, #292	; 0x124
  (void)tmpreg;
 8001cf4:	9b00      	ldr	r3, [sp, #0]
 8001cf6:	f00c f827 	bl	800dd48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LR_NRESET_Pin|VCC_SENSORS_MCU_Pin|VCC_24GHZ_SW_Pin|NSS_Pin
 8001cfa:	4622      	mov	r2, r4
 8001cfc:	f248 111b 	movw	r1, #33051	; 0x811b
 8001d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d04:	f00c f820 	bl	800dd48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TX1_LED_GPIO_Port, TX1_LED_Pin, GPIO_PIN_RESET);
 8001d08:	4622      	mov	r2, r4
 8001d0a:	4640      	mov	r0, r8
 8001d0c:	2110      	movs	r1, #16
 8001d0e:	f00c f81b 	bl	800dd48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d12:	2603      	movs	r6, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d14:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d16:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d18:	482e      	ldr	r0, [pc, #184]	; (8001dd4 <MX_GPIO_Init+0x15c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	9407      	str	r4, [sp, #28]

  /*Configure GPIO pins : GNSS_ANT_SWITCH_Pin EFFECT_HAL_OUT_Pin RX1_LED_Pin */
  GPIO_InitStruct.Pin = GNSS_ANT_SWITCH_Pin|EFFECT_HAL_OUT_Pin|RX1_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1c:	2701      	movs	r7, #1
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d1e:	e9cd 3605 	strd	r3, r6, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d22:	f00b febf 	bl	800daa4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d26:	a905      	add	r1, sp, #20
 8001d28:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GNSS_ANT_SWITCH_Pin|EFFECT_HAL_OUT_Pin|RX1_LED_Pin;
 8001d2a:	f44f 7392 	mov.w	r3, #292	; 0x124
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2e:	e9cd 3705 	strd	r3, r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d32:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d36:	f00b feb5 	bl	800daa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1_INPUT_SWITCH_Pin LR_BUSY_Pin ACC_INT1_Pin */
  GPIO_InitStruct.Pin = PB1_INPUT_SWITCH_Pin|LR_BUSY_Pin|ACC_INT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3a:	a905      	add	r1, sp, #20
 8001d3c:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = PB1_INPUT_SWITCH_Pin|LR_BUSY_Pin|ACC_INT1_Pin;
 8001d3e:	f240 2303 	movw	r3, #515	; 0x203
 8001d42:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	e9cd 4406 	strd	r4, r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d48:	f00b feac 	bl	800daa4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LR_NRESET_Pin|VCC_SENSORS_MCU_Pin|VCC_24GHZ_SW_Pin|NSS_Pin
                          |LNA_PON_MCU_Pin|BLE_WIFI_SEL_SWITCH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = LR_NRESET_Pin|VCC_SENSORS_MCU_Pin|VCC_24GHZ_SW_Pin|NSS_Pin
 8001d4e:	f248 131b 	movw	r3, #33051	; 0x811b
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LR_NRESET_Pin|VCC_SENSORS_MCU_Pin|VCC_24GHZ_SW_Pin|NSS_Pin
 8001d56:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	e9cd 7406 	strd	r7, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5e:	f00b fea1 	bl	800daa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d62:	2204      	movs	r2, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF0_LSCO;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d66:	a905      	add	r1, sp, #20
 8001d68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6c:	e9cd 2305 	strd	r2, r3, [sp, #20]

  /*Configure GPIO pin : TX1_LED_Pin */
  GPIO_InitStruct.Pin = TX1_LED_Pin;
 8001d70:	f04f 0910 	mov.w	r9, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d74:	e9cd 4407 	strd	r4, r4, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_LSCO;
 8001d78:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7a:	f00b fe93 	bl	800daa4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(TX1_LED_GPIO_Port, &GPIO_InitStruct);
 8001d7e:	4640      	mov	r0, r8
 8001d80:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	e9cd 7406 	strd	r7, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d86:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = TX1_LED_Pin;
 8001d88:	f8cd 9014 	str.w	r9, [sp, #20]
  HAL_GPIO_Init(TX1_LED_GPIO_Port, &GPIO_InitStruct);
 8001d8c:	f00b fe8a 	bl	800daa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d90:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d92:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d9a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	e9cd 6406 	strd	r6, r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da0:	f00b fe80 	bl	800daa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_IRQ_Pin */
  GPIO_InitStruct.Pin = LR_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(LR_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001da4:	a905      	add	r1, sp, #20
 8001da6:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001da8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001dac:	e9cd 3406 	strd	r3, r4, [sp, #24]
  GPIO_InitStruct.Pin = LR_IRQ_Pin;
 8001db0:	f8cd 9014 	str.w	r9, [sp, #20]
  HAL_GPIO_Init(LR_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001db4:	f00b fe76 	bl	800daa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001db8:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dba:	a905      	add	r1, sp, #20
 8001dbc:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	e9cd 6406 	strd	r6, r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dc2:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc4:	f00b fe6e 	bl	800daa4 <HAL_GPIO_Init>

}
 8001dc8:	b00b      	add	sp, #44	; 0x2c
 8001dca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001dce:	bf00      	nop
 8001dd0:	48000400 	.word	0x48000400
 8001dd4:	48001c00 	.word	0x48001c00
 8001dd8:	48001000 	.word	0x48001000

08001ddc <main>:
{
 8001ddc:	b530      	push	{r4, r5, lr}
 8001dde:	b087      	sub	sp, #28
  HAL_Init();
 8001de0:	f00b fb12 	bl	800d408 <HAL_Init>
  MX_APPE_Config();
 8001de4:	f7ff f9d8 	bl	8001198 <MX_APPE_Config>
  SystemClock_Config();
 8001de8:	f7ff fe4c 	bl	8001a84 <SystemClock_Config>
  PeriphCommonClock_Config();
 8001dec:	f7ff fe88 	bl	8001b00 <PeriphCommonClock_Config>
  hipcc.Instance = IPCC;
 8001df0:	4833      	ldr	r0, [pc, #204]	; (8001ec0 <main+0xe4>)
 8001df2:	4b34      	ldr	r3, [pc, #208]	; (8001ec4 <main+0xe8>)
 8001df4:	6003      	str	r3, [r0, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001df6:	f00b ffe1 	bl	800ddbc <HAL_IPCC_Init>
  MX_GPIO_Init();
 8001dfa:	f7ff ff3d 	bl	8001c78 <MX_GPIO_Init>
  MX_DMA_Init();
 8001dfe:	f7ff ff19 	bl	8001c34 <MX_DMA_Init>
  MX_RTC_Init();
 8001e02:	f7ff fe93 	bl	8001b2c <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001e06:	f7ff feed 	bl	8001be4 <MX_USART1_UART_Init>
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001e0a:	4b2f      	ldr	r3, [pc, #188]	; (8001ec8 <main+0xec>)
  hrng.Instance = RNG;
 8001e0c:	482f      	ldr	r0, [pc, #188]	; (8001ecc <main+0xf0>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001e0e:	2400      	movs	r4, #0
 8001e10:	e9c0 3400 	strd	r3, r4, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001e14:	f00d f8ec 	bl	800eff0 <HAL_RNG_Init>
  hspi1.Instance = SPI1;
 8001e18:	482d      	ldr	r0, [pc, #180]	; (8001ed0 <main+0xf4>)
 8001e1a:	4a2e      	ldr	r2, [pc, #184]	; (8001ed4 <main+0xf8>)
 8001e1c:	6002      	str	r2, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e1e:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e22:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi1.Init.CRCPolynomial = 7;
 8001e26:	2207      	movs	r2, #7
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e28:	6043      	str	r3, [r0, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e2a:	f44f 65e0 	mov.w	r5, #1792	; 0x700
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e2e:	2308      	movs	r3, #8
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e30:	6181      	str	r1, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 8001e32:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e34:	6343      	str	r3, [r0, #52]	; 0x34
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e36:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e3a:	e9c0 4407 	strd	r4, r4, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e3e:	e9c0 4409 	strd	r4, r4, [r0, #36]	; 0x24
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e42:	6084      	str	r4, [r0, #8]
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e44:	6304      	str	r4, [r0, #48]	; 0x30
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e46:	60c5      	str	r5, [r0, #12]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e48:	f00e f94a 	bl	80100e0 <HAL_SPI_Init>
  RtcInit();
 8001e4c:	f000 fe08 	bl	8002a60 <RtcInit>
  MX_APPE_Init();
 8001e50:	f7ff f9be 	bl	80011d0 <MX_APPE_Init>
  Ble_GetMacId(au8MacId);
 8001e54:	a804      	add	r0, sp, #16
  uint8_t au8MacId[6] = {0, };
 8001e56:	9404      	str	r4, [sp, #16]
 8001e58:	f8ad 4014 	strh.w	r4, [sp, #20]
  Ble_GetMacId(au8MacId);
 8001e5c:	f00b f8c0 	bl	800cfe0 <Ble_GetMacId>
  printf("\r\n\r\n\r\n");
 8001e60:	481d      	ldr	r0, [pc, #116]	; (8001ed8 <main+0xfc>)
 8001e62:	f011 f91d 	bl	80130a0 <puts>
  printf("===================================================\r\n");
 8001e66:	481d      	ldr	r0, [pc, #116]	; (8001edc <main+0x100>)
 8001e68:	f011 f91a 	bl	80130a0 <puts>
  printf("||       Lora Asset Tracker v%d.%d.%d                ||\r\n",
 8001e6c:	4622      	mov	r2, r4
 8001e6e:	4621      	mov	r1, r4
 8001e70:	2301      	movs	r3, #1
 8001e72:	481b      	ldr	r0, [pc, #108]	; (8001ee0 <main+0x104>)
 8001e74:	f011 f88e 	bl	8012f94 <iprintf>
  printf("===================================================\r\n\r\n");
 8001e78:	481a      	ldr	r0, [pc, #104]	; (8001ee4 <main+0x108>)
 8001e7a:	f011 f911 	bl	80130a0 <puts>
  printf("BLE Mac ID: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001e7e:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8001e82:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8001e86:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8001e90:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8001e94:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001e98:	f89d 1015 	ldrb.w	r1, [sp, #21]
 8001e9c:	4812      	ldr	r0, [pc, #72]	; (8001ee8 <main+0x10c>)
 8001e9e:	f011 f879 	bl	8012f94 <iprintf>
  App_vLoraWanInitTaskCreate();
 8001ea2:	f7fe fe43 	bl	8000b2c <App_vLoraWanInitTaskCreate>
  App_vLoraWanProcessTaskCreate();
 8001ea6:	f7fe fe49 	bl	8000b3c <App_vLoraWanProcessTaskCreate>
  App_vLoraTimeoutTimerCreate();
 8001eaa:	f7fe fe1f 	bl	8000aec <App_vLoraTimeoutTimerCreate>
  App_vLoraPingPongInitTaskCreate();
 8001eae:	f7fe fe53 	bl	8000b58 <App_vLoraPingPongInitTaskCreate>
  App_vLoraPingPongProcessTaskCreate();
 8001eb2:	f7fe fe59 	bl	8000b68 <App_vLoraPingPongProcessTaskCreate>
    MX_APPE_Process();
 8001eb6:	f7ff fa07 	bl	80012c8 <MX_APPE_Process>
    App_vReqLoraAppRun();
 8001eba:	f7fe fee1 	bl	8000c80 <App_vReqLoraAppRun>
  while (1)
 8001ebe:	e7fa      	b.n	8001eb6 <main+0xda>
 8001ec0:	2000080c 	.word	0x2000080c
 8001ec4:	58000c00 	.word	0x58000c00
 8001ec8:	58001000 	.word	0x58001000
 8001ecc:	2000095c 	.word	0x2000095c
 8001ed0:	20000970 	.word	0x20000970
 8001ed4:	40013000 	.word	0x40013000
 8001ed8:	08014a28 	.word	0x08014a28
 8001edc:	08014a30 	.word	0x08014a30
 8001ee0:	08014a68 	.word	0x08014a68
 8001ee4:	08014aa4 	.word	0x08014aa4
 8001ee8:	08014adc 	.word	0x08014adc

08001eec <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop

08001ef0 <assert_failed>:
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop

08001ef4 <HAL_MspInit>:
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef8:	b500      	push	{lr}
 8001efa:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001efc:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 8001f00:	6519      	str	r1, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f04:	b083      	sub	sp, #12

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001f06:	2200      	movs	r2, #0
 8001f08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f0c:	9301      	str	r3, [sp, #4]
 8001f0e:	4611      	mov	r1, r2
 8001f10:	202e      	movs	r0, #46	; 0x2e
  (void)tmpreg;
 8001f12:	9b01      	ldr	r3, [sp, #4]
 8001f14:	f00b fadc 	bl	800d4d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001f18:	202e      	movs	r0, #46	; 0x2e

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f1a:	b003      	add	sp, #12
 8001f1c:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001f20:	f00b bb20 	b.w	800d564 <HAL_NVIC_EnableIRQ>

08001f24 <HAL_IPCC_MspInit>:
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
  if(hipcc->Instance==IPCC)
 8001f24:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <HAL_IPCC_MspInit+0x4c>)
 8001f26:	6802      	ldr	r2, [r0, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d000      	beq.n	8001f2e <HAL_IPCC_MspInit+0xa>
 8001f2c:	4770      	bx	lr
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8001f32:	b500      	push	{lr}
 8001f34:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001f36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001f3a:	6519      	str	r1, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f3e:	b083      	sub	sp, #12

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001f40:	2200      	movs	r2, #0
 8001f42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f46:	4611      	mov	r1, r2
 8001f48:	9301      	str	r3, [sp, #4]
 8001f4a:	202c      	movs	r0, #44	; 0x2c
  (void)tmpreg;
 8001f4c:	9b01      	ldr	r3, [sp, #4]
 8001f4e:	f00b fabf 	bl	800d4d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001f52:	202c      	movs	r0, #44	; 0x2c
 8001f54:	f00b fb06 	bl	800d564 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	202d      	movs	r0, #45	; 0x2d
 8001f5e:	f00b fab7 	bl	800d4d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001f62:	202d      	movs	r0, #45	; 0x2d
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001f64:	b003      	add	sp, #12
 8001f66:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001f6a:	f00b bafb 	b.w	800d564 <HAL_NVIC_EnableIRQ>
 8001f6e:	bf00      	nop
 8001f70:	58000c00 	.word	0x58000c00

08001f74 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001f74:	b510      	push	{r4, lr}
 8001f76:	4604      	mov	r4, r0
 8001f78:	b08e      	sub	sp, #56	; 0x38
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f7a:	2230      	movs	r2, #48	; 0x30
 8001f7c:	a802      	add	r0, sp, #8
 8001f7e:	2100      	movs	r1, #0
 8001f80:	f011 f800 	bl	8012f84 <memset>
  if(hrng->Instance==RNG)
 8001f84:	6822      	ldr	r2, [r4, #0]
 8001f86:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <HAL_RNG_MspInit+0x50>)
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d001      	beq.n	8001f90 <HAL_RNG_MspInit+0x1c>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001f8c:	b00e      	add	sp, #56	; 0x38
 8001f8e:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001f90:	f44f 7200 	mov.w	r2, #512	; 0x200
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_LSE;
 8001f94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f98:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001f9a:	9202      	str	r2, [sp, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_LSE;
 8001f9c:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f9e:	f00c fe13 	bl	800ebc8 <HAL_RCCEx_PeriphCLKConfig>
 8001fa2:	b960      	cbnz	r0, 8001fbe <HAL_RNG_MspInit+0x4a>
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001faa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001fae:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fb6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001fb8:	9b01      	ldr	r3, [sp, #4]
}
 8001fba:	b00e      	add	sp, #56	; 0x38
 8001fbc:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001fbe:	f7ff ff95 	bl	8001eec <Error_Handler>
 8001fc2:	e7ef      	b.n	8001fa4 <HAL_RNG_MspInit+0x30>
 8001fc4:	58001000 	.word	0x58001000

08001fc8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001fc8:	b510      	push	{r4, lr}
 8001fca:	4604      	mov	r4, r0
 8001fcc:	b08e      	sub	sp, #56	; 0x38
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fce:	2230      	movs	r2, #48	; 0x30
 8001fd0:	a802      	add	r0, sp, #8
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	f010 ffd6 	bl	8012f84 <memset>
  if(hrtc->Instance==RTC)
 8001fd8:	6822      	ldr	r2, [r4, #0]
 8001fda:	4b23      	ldr	r3, [pc, #140]	; (8002068 <HAL_RTC_MspInit+0xa0>)
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d001      	beq.n	8001fe4 <HAL_RTC_MspInit+0x1c>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001fe0:	b00e      	add	sp, #56	; 0x38
 8001fe2:	bd10      	pop	{r4, pc}
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001fe4:	f00b ff22 	bl	800de2c <HAL_PWR_EnableBkUpAccess>
  HAL_PWR_EnableBkUpAccess();
 8001fe8:	f00b ff20 	bl	800de2c <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001fec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ff0:	a802      	add	r0, sp, #8
 8001ff2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ffe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002002:	f44f 6200 	mov.w	r2, #2048	; 0x800
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002006:	f44f 7380 	mov.w	r3, #256	; 0x100
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800200a:	9202      	str	r2, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800200c:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800200e:	f00c fddb 	bl	800ebc8 <HAL_RCCEx_PeriphCLKConfig>
 8002012:	bb28      	cbnz	r0, 8002060 <HAL_RTC_MspInit+0x98>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002018:	2200      	movs	r2, #0
 800201a:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800201e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8002022:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002026:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8002028:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800202c:	6599      	str	r1, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800202e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002034:	4611      	mov	r1, r2
 8002036:	9301      	str	r3, [sp, #4]
 8002038:	2003      	movs	r0, #3
  (void)tmpreg;
 800203a:	9b01      	ldr	r3, [sp, #4]
 800203c:	f00b fa48 	bl	800d4d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002040:	2003      	movs	r0, #3
 8002042:	f00b fa8f 	bl	800d564 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	4611      	mov	r1, r2
 800204a:	2029      	movs	r0, #41	; 0x29
 800204c:	f00b fa40 	bl	800d4d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002050:	2029      	movs	r0, #41	; 0x29
 8002052:	f00b fa87 	bl	800d564 <HAL_NVIC_EnableIRQ>
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8002056:	4620      	mov	r0, r4
 8002058:	f00d ff34 	bl	800fec4 <HAL_RTCEx_EnableBypassShadow>
}
 800205c:	b00e      	add	sp, #56	; 0x38
 800205e:	bd10      	pop	{r4, pc}
      Error_Handler();
 8002060:	f7ff ff44 	bl	8001eec <Error_Handler>
 8002064:	e7d6      	b.n	8002014 <HAL_RTC_MspInit+0x4c>
 8002066:	bf00      	nop
 8002068:	40002800 	.word	0x40002800

0800206c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800206c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 800206e:	6801      	ldr	r1, [r0, #0]
 8002070:	4a17      	ldr	r2, [pc, #92]	; (80020d0 <HAL_SPI_MspInit+0x64>)
{
 8002072:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	2300      	movs	r3, #0
  if(hspi->Instance==SPI1)
 8002076:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800207c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8002080:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8002082:	d001      	beq.n	8002088 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002084:	b008      	add	sp, #32
 8002086:	bd70      	pop	{r4, r5, r6, pc}
  SET_BIT(RCC->APB2ENR, Periphs);
 8002088:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208c:	a903      	add	r1, sp, #12
 800208e:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8002090:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8002094:	6610      	str	r0, [r2, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002096:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8002098:	f400 5080 	and.w	r0, r0, #4096	; 0x1000
 800209c:	9002      	str	r0, [sp, #8]
  (void)tmpreg;
 800209e:	9802      	ldr	r0, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020a0:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 80020a2:	f040 0001 	orr.w	r0, r0, #1
 80020a6:	64d0      	str	r0, [r2, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020a8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	9305      	str	r3, [sp, #20]
 80020ac:	f002 0201 	and.w	r2, r2, #1
 80020b0:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 80020b2:	25e0      	movs	r5, #224	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020b4:	2205      	movs	r2, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b6:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	e9cd 5403 	strd	r5, r4, [sp, #12]
  (void)tmpreg;
 80020c0:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020c4:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c6:	f00b fced 	bl	800daa4 <HAL_GPIO_Init>
}
 80020ca:	b008      	add	sp, #32
 80020cc:	bd70      	pop	{r4, r5, r6, pc}
 80020ce:	bf00      	nop
 80020d0:	40013000 	.word	0x40013000

080020d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020d4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d6:	2400      	movs	r4, #0
{
 80020d8:	b094      	sub	sp, #80	; 0x50
 80020da:	4605      	mov	r5, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020dc:	2230      	movs	r2, #48	; 0x30
 80020de:	4621      	mov	r1, r4
 80020e0:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e2:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80020e6:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80020ea:	9407      	str	r4, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020ec:	f010 ff4a 	bl	8012f84 <memset>
  if(huart->Instance==USART1)
 80020f0:	682a      	ldr	r2, [r5, #0]
 80020f2:	4b2b      	ldr	r3, [pc, #172]	; (80021a0 <HAL_UART_MspInit+0xcc>)
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d001      	beq.n	80020fc <HAL_UART_MspInit+0x28>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80020f8:	b014      	add	sp, #80	; 0x50
 80020fa:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80020fc:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020fe:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002100:	e9cd 3408 	strd	r3, r4, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002104:	f00c fd60 	bl	800ebc8 <HAL_RCCEx_PeriphCLKConfig>
 8002108:	2800      	cmp	r0, #0
 800210a:	d142      	bne.n	8002192 <HAL_UART_MspInit+0xbe>
  SET_BIT(RCC->APB2ENR, Periphs);
 800210c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002110:	2001      	movs	r0, #1
 8002112:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002114:	4c23      	ldr	r4, [pc, #140]	; (80021a4 <HAL_UART_MspInit+0xd0>)
 8002116:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800211a:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800211c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800211e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002122:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002124:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002126:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002128:	f042 0201 	orr.w	r2, r2, #1
 800212c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800212e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002130:	9005      	str	r0, [sp, #20]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002138:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002140:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002144:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002146:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002148:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800214c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  (void)tmpreg;
 8002150:	9e01      	ldr	r6, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002152:	f00b fca7 	bl	800daa4 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002156:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <HAL_UART_MspInit+0xd4>)
 8002158:	6023      	str	r3, [r4, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800215a:	230f      	movs	r3, #15
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800215c:	2110      	movs	r1, #16
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800215e:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002160:	6063      	str	r3, [r4, #4]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002162:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002164:	2300      	movs	r3, #0
 8002166:	e9c4 3203 	strd	r3, r2, [r4, #12]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800216a:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800216e:	e9c4 3307 	strd	r3, r3, [r4, #28]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002172:	60a1      	str	r1, [r4, #8]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002174:	f00b fa6a 	bl	800d64c <HAL_DMA_Init>
 8002178:	b970      	cbnz	r0, 8002198 <HAL_UART_MspInit+0xc4>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800217a:	2200      	movs	r2, #0
 800217c:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800217e:	67ac      	str	r4, [r5, #120]	; 0x78
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002180:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002182:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002184:	f00b f9a4 	bl	800d4d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002188:	2024      	movs	r0, #36	; 0x24
 800218a:	f00b f9eb 	bl	800d564 <HAL_NVIC_EnableIRQ>
}
 800218e:	b014      	add	sp, #80	; 0x50
 8002190:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8002192:	f7ff feab 	bl	8001eec <Error_Handler>
 8002196:	e7b9      	b.n	800210c <HAL_UART_MspInit+0x38>
      Error_Handler();
 8002198:	f7ff fea8 	bl	8001eec <Error_Handler>
 800219c:	e7ed      	b.n	800217a <HAL_UART_MspInit+0xa6>
 800219e:	bf00      	nop
 80021a0:	40013800 	.word	0x40013800
 80021a4:	20000848 	.word	0x20000848
 80021a8:	40020044 	.word	0x40020044

080021ac <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021ac:	e7fe      	b.n	80021ac <NMI_Handler>
 80021ae:	bf00      	nop

080021b0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021b0:	e7fe      	b.n	80021b0 <HardFault_Handler>
 80021b2:	bf00      	nop

080021b4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021b4:	e7fe      	b.n	80021b4 <MemManage_Handler>
 80021b6:	bf00      	nop

080021b8 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021b8:	e7fe      	b.n	80021b8 <BusFault_Handler>
 80021ba:	bf00      	nop

080021bc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021bc:	e7fe      	b.n	80021bc <UsageFault_Handler>
 80021be:	bf00      	nop

080021c0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop

080021c4 <DebugMon_Handler>:
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop

080021c8 <PendSV_Handler>:
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop

080021cc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021cc:	f00b b934 	b.w	800d438 <HAL_IncTick>

080021d0 <RTC_WKUP_IRQHandler>:
void RTC_WKUP_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80021d0:	f7ff bb9e 	b.w	8001910 <HW_TS_RTC_Wakeup_Handler>

080021d4 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80021d4:	4801      	ldr	r0, [pc, #4]	; (80021dc <DMA1_Channel4_IRQHandler+0x8>)
 80021d6:	f00b bc17 	b.w	800da08 <HAL_DMA_IRQHandler>
 80021da:	bf00      	nop
 80021dc:	20000848 	.word	0x20000848

080021e0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021e0:	4801      	ldr	r0, [pc, #4]	; (80021e8 <USART1_IRQHandler+0x8>)
 80021e2:	f00e bb0f 	b.w	8010804 <HAL_UART_IRQHandler>
 80021e6:	bf00      	nop
 80021e8:	200008a8 	.word	0x200008a8

080021ec <RTC_Alarm_IRQHandler>:
void RTC_Alarm_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80021ec:	4801      	ldr	r0, [pc, #4]	; (80021f4 <RTC_Alarm_IRQHandler+0x8>)
 80021ee:	f00d ba35 	b.w	800f65c <HAL_RTC_AlarmIRQHandler>
 80021f2:	bf00      	nop
 80021f4:	20000938 	.word	0x20000938

080021f8 <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80021f8:	f00b b84e 	b.w	800d298 <HW_IPCC_Rx_Handler>

080021fc <IPCC_C1_TX_IRQHandler>:
void IPCC_C1_TX_IRQHandler(void)
{
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80021fc:	f00a bfdc 	b.w	800d1b8 <HW_IPCC_Tx_Handler>

08002200 <HSEM_IRQHandler>:
void HSEM_IRQHandler(void)
{
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002200:	f00b bdca 	b.w	800dd98 <HAL_HSEM_IRQHandler>

08002204 <EXTI4_IRQHandler>:
//{
//  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
//}

void EXTI4_IRQHandler(void)
{
 8002204:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NSS_Pin);
 8002206:	2010      	movs	r0, #16
 8002208:	f00b fdb8 	bl	800dd7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  myRadioOnDioIrq();

  /* USER CODE END EXTI4_IRQn 1 */
}
 800220c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  myRadioOnDioIrq();
 8002210:	f009 bdf2 	b.w	800bdf8 <myRadioOnDioIrq>

08002214 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002214:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002216:	1e16      	subs	r6, r2, #0
 8002218:	dd07      	ble.n	800222a <_read+0x16>
 800221a:	460c      	mov	r4, r1
 800221c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800221e:	f7ff fc1d 	bl	8001a5c <__io_getchar>
 8002222:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002226:	42a5      	cmp	r5, r4
 8002228:	d1f9      	bne.n	800221e <_read+0xa>
	}

return len;
}
 800222a:	4630      	mov	r0, r6
 800222c:	bd70      	pop	{r4, r5, r6, pc}
 800222e:	bf00      	nop

08002230 <_close>:
}

int _close(int file)
{
	return -1;
}
 8002230:	f04f 30ff 	mov.w	r0, #4294967295
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop

08002238 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002238:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800223c:	604b      	str	r3, [r1, #4]
	return 0;
}
 800223e:	2000      	movs	r0, #0
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop

08002244 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002244:	2001      	movs	r0, #1
 8002246:	4770      	bx	lr

08002248 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002248:	2000      	movs	r0, #0
 800224a:	4770      	bx	lr

0800224c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800224c:	490c      	ldr	r1, [pc, #48]	; (8002280 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800224e:	4a0d      	ldr	r2, [pc, #52]	; (8002284 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8002250:	680b      	ldr	r3, [r1, #0]
{
 8002252:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002254:	4c0c      	ldr	r4, [pc, #48]	; (8002288 <_sbrk+0x3c>)
 8002256:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8002258:	b12b      	cbz	r3, 8002266 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800225a:	4418      	add	r0, r3
 800225c:	4290      	cmp	r0, r2
 800225e:	d807      	bhi.n	8002270 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002260:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8002262:	4618      	mov	r0, r3
 8002264:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002266:	4b09      	ldr	r3, [pc, #36]	; (800228c <_sbrk+0x40>)
 8002268:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800226a:	4418      	add	r0, r3
 800226c:	4290      	cmp	r0, r2
 800226e:	d9f7      	bls.n	8002260 <_sbrk+0x14>
    errno = ENOMEM;
 8002270:	f010 fe50 	bl	8012f14 <__errno>
 8002274:	230c      	movs	r3, #12
 8002276:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002278:	f04f 33ff 	mov.w	r3, #4294967295
}
 800227c:	4618      	mov	r0, r3
 800227e:	bd10      	pop	{r4, pc}
 8002280:	20000340 	.word	0x20000340
 8002284:	20003000 	.word	0x20003000
 8002288:	00001000 	.word	0x00001000
 800228c:	20000c90 	.word	0x20000c90

08002290 <BoardCriticalSectionBegin>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002290:	f3ef 8310 	mrs	r3, PRIMASK
uint8_t Uart2TxBuffer[UART2_FIFO_TX_SIZE];
uint8_t Uart2RxBuffer[UART2_FIFO_RX_SIZE];

void BoardCriticalSectionBegin( uint32_t *mask )
{
    *mask = __get_PRIMASK( );
 8002294:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002296:	b672      	cpsid	i
    __disable_irq( );
}
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop

0800229c <BoardCriticalSectionEnd>:
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800229c:	6803      	ldr	r3, [r0, #0]
 800229e:	f383 8810 	msr	PRIMASK, r3

void BoardCriticalSectionEnd( uint32_t *mask )
{
    __set_PRIMASK( *mask );
}
 80022a2:	4770      	bx	lr

080022a4 <BoardInitPeriph>:

void BoardInitPeriph( void )
{

}
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop

080022a8 <BoardInitMcu>:

void BoardInitMcu( void )
{
 80022a8:	b538      	push	{r3, r4, r5, lr}
        SX1276IoTcxoInit( );
#endif
    }
#else

    lr1110_board_init_io( &LR1110 );
 80022aa:	4c0a      	ldr	r4, [pc, #40]	; (80022d4 <BoardInitMcu+0x2c>)
 80022ac:	4620      	mov	r0, r4
 80022ae:	f000 f9bf 	bl	8002630 <lr1110_board_init_io>
//    GpioInit( &( ( lr1110_t* ) context )->spi.Nss, RADIO_NSS, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
//    GpioInit( &( ( lr1110_t* ) context )->dio_1, RADIO_DIO_1, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//    GpioInit( &( ( lr1110_t* ) context )->busy, RADIO_BUSY, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//

    LR1110.spi.Miso.pin  = RADIO_MISO;
 80022b2:	2506      	movs	r5, #6
    LR1110.spi.Mosi.pin  = RADIO_MOSI;
 80022b4:	2007      	movs	r0, #7
    LR1110.spi.Sclk.pin  = RADIO_SCLK;
 80022b6:	2105      	movs	r1, #5
    LR1110.spi.Nss.pin   = RADIO_NSS;
 80022b8:	2204      	movs	r2, #4
    LR1110.spi.SpiId     = 1;
 80022ba:	2301      	movs	r3, #1
    LR1110.spi.Miso.pin  = RADIO_MISO;
 80022bc:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
    LR1110.spi.Mosi.pin  = RADIO_MOSI;
 80022c0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    LR1110.spi.Sclk.pin  = RADIO_SCLK;
 80022c4:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
    LR1110.spi.Nss.pin   = RADIO_NSS;
 80022c8:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
    LR1110.spi.SpiId     = 1;
 80022cc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
//    LR1110.spi.pins.mosi  = RADIO_MOSI;
//    LR1110.spi.pins.sclk  = RADIO_SCLK;
//    LR1110.spi_id         = HAL_RADIO_SPI_ID;

#endif
}
 80022d0:	bd38      	pop	{r3, r4, r5, pc}
 80022d2:	bf00      	nop
 80022d4:	20000a7c 	.word	0x20000a7c

080022d8 <BoardGetUniqueId>:
    return ( ( *( uint32_t* )ID1 ) ^ ( *( uint32_t* )ID2 ) ^ ( *( uint32_t* )ID3 ) );
}

void BoardGetUniqueId( uint8_t *id )
{
    id[7] = ( ( *( uint32_t* )ID1 )+ ( *( uint32_t* )ID3 ) ) >> 24;
 80022d8:	4b10      	ldr	r3, [pc, #64]	; (800231c <BoardGetUniqueId+0x44>)
 80022da:	4911      	ldr	r1, [pc, #68]	; (8002320 <BoardGetUniqueId+0x48>)
{
 80022dc:	b410      	push	{r4}
    id[7] = ( ( *( uint32_t* )ID1 )+ ( *( uint32_t* )ID3 ) ) >> 24;
 80022de:	680a      	ldr	r2, [r1, #0]
 80022e0:	681c      	ldr	r4, [r3, #0]
 80022e2:	4422      	add	r2, r4
 80022e4:	0e12      	lsrs	r2, r2, #24
 80022e6:	71c2      	strb	r2, [r0, #7]
    id[6] = ( ( *( uint32_t* )ID1 )+ ( *( uint32_t* )ID3 ) ) >> 16;
 80022e8:	681c      	ldr	r4, [r3, #0]
 80022ea:	680a      	ldr	r2, [r1, #0]
 80022ec:	4422      	add	r2, r4
 80022ee:	0c12      	lsrs	r2, r2, #16
 80022f0:	7182      	strb	r2, [r0, #6]
    id[5] = ( ( *( uint32_t* )ID1 )+ ( *( uint32_t* )ID3 ) ) >> 8;
 80022f2:	681c      	ldr	r4, [r3, #0]
 80022f4:	680a      	ldr	r2, [r1, #0]
 80022f6:	4422      	add	r2, r4
 80022f8:	0a12      	lsrs	r2, r2, #8
 80022fa:	7142      	strb	r2, [r0, #5]
    id[4] = ( ( *( uint32_t* )ID1 )+ ( *( uint32_t* )ID3 ) );
 80022fc:	680a      	ldr	r2, [r1, #0]
 80022fe:	6819      	ldr	r1, [r3, #0]
    id[3] = ( ( *( uint32_t* )ID2 ) ) >> 24;
    id[2] = ( ( *( uint32_t* )ID2 ) ) >> 16;
    id[1] = ( ( *( uint32_t* )ID2 ) ) >> 8;
    id[0] = ( ( *( uint32_t* )ID2 ) );
}
 8002300:	f85d 4b04 	ldr.w	r4, [sp], #4
    id[4] = ( ( *( uint32_t* )ID1 )+ ( *( uint32_t* )ID3 ) );
 8002304:	440a      	add	r2, r1
 8002306:	7102      	strb	r2, [r0, #4]
    id[3] = ( ( *( uint32_t* )ID2 ) ) >> 24;
 8002308:	78da      	ldrb	r2, [r3, #3]
 800230a:	70c2      	strb	r2, [r0, #3]
    id[2] = ( ( *( uint32_t* )ID2 ) ) >> 16;
 800230c:	885a      	ldrh	r2, [r3, #2]
 800230e:	7082      	strb	r2, [r0, #2]
    id[1] = ( ( *( uint32_t* )ID2 ) ) >> 8;
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	0a12      	lsrs	r2, r2, #8
 8002314:	7042      	strb	r2, [r0, #1]
    id[0] = ( ( *( uint32_t* )ID2 ) );
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	7003      	strb	r3, [r0, #0]
}
 800231a:	4770      	bx	lr
 800231c:	1fff7594 	.word	0x1fff7594
 8002320:	1fff7590 	.word	0x1fff7590

08002324 <GpioMcuInit>:
#endif

static Gpio_t *GpioIrq[16];

void GpioMcuInit( Gpio_t *obj, PinNames pin, PinModes mode, PinConfigs config, PinTypes type, uint32_t value )
{
 8002324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002326:	b08b      	sub	sp, #44	; 0x2c
    if( pin < IOE_0 )
 8002328:	296f      	cmp	r1, #111	; 0x6f
{
 800232a:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
    if( pin < IOE_0 )
 800232e:	dc39      	bgt.n	80023a4 <GpioMcuInit+0x80>
 8002330:	4605      	mov	r5, r0
    {
        GPIO_InitTypeDef GPIO_InitStructure;

        obj->pin = pin;
 8002332:	7001      	strb	r1, [r0, #0]

        if( pin == NC )
 8002334:	1c48      	adds	r0, r1, #1
 8002336:	d035      	beq.n	80023a4 <GpioMcuInit+0x80>
        {
            return;
        }

        obj->pinIndex = ( 0x01 << ( obj->pin & 0x0F ) );
 8002338:	f001 000f 	and.w	r0, r1, #15
 800233c:	2601      	movs	r6, #1
 800233e:	4086      	lsls	r6, r0
 8002340:	fa1f fc86 	uxth.w	ip, r6

        if( ( obj->pin & 0xF0 ) == 0x00 )
 8002344:	f011 04f0 	ands.w	r4, r1, #240	; 0xf0
        obj->pinIndex = ( 0x01 << ( obj->pin & 0x0F ) );
 8002348:	f8a5 c002 	strh.w	ip, [r5, #2]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800234c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
        if( ( obj->pin & 0xF0 ) == 0x00 )
 8002350:	d02a      	beq.n	80023a8 <GpioMcuInit+0x84>
        {
            obj->port = GPIOA;
            __HAL_RCC_GPIOA_CLK_ENABLE( );
        }
        else if( ( obj->pin & 0xF0 ) == 0x10 )
 8002352:	2c10      	cmp	r4, #16
 8002354:	d03d      	beq.n	80023d2 <GpioMcuInit+0xae>
        {
            obj->port = GPIOB;
            __HAL_RCC_GPIOB_CLK_ENABLE( );
        }
        else if( ( obj->pin & 0xF0 ) == 0x20 )
 8002356:	2c20      	cmp	r4, #32
 8002358:	d047      	beq.n	80023ea <GpioMcuInit+0xc6>
 800235a:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
//            obj->port = GPIOD;
//            __HAL_RCC_GPIOD_CLK_ENABLE( );
//        }
        else
        {
            obj->port = GPIOH;
 800235c:	482d      	ldr	r0, [pc, #180]	; (8002414 <GpioMcuInit+0xf0>)
 800235e:	6068      	str	r0, [r5, #4]
 8002360:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8002364:	64cc      	str	r4, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002366:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8002368:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800236c:	9104      	str	r1, [sp, #16]
  (void)tmpreg;
 800236e:	9904      	ldr	r1, [sp, #16]
            __HAL_RCC_GPIOH_CLK_ENABLE( );
        }

        GPIO_InitStructure.Pin =  obj->pinIndex ;
 8002370:	9605      	str	r6, [sp, #20]
        GPIO_InitStructure.Pull = obj->pull = type;
        GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002372:	2102      	movs	r1, #2
 8002374:	e9cd 7107 	strd	r7, r1, [sp, #28]
        GPIO_InitStructure.Pull = obj->pull = type;
 8002378:	72af      	strb	r7, [r5, #10]

        if( mode == PIN_INPUT )
 800237a:	b342      	cbz	r2, 80023ce <GpioMcuInit+0xaa>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
        }
        else if( mode == PIN_ANALOGIC )
 800237c:	2a03      	cmp	r2, #3
 800237e:	d026      	beq.n	80023ce <GpioMcuInit+0xaa>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
        }
        else if( mode == PIN_ALTERNATE_FCT )
 8002380:	2a02      	cmp	r2, #2
 8002382:	d03e      	beq.n	8002402 <GpioMcuInit+0xde>
            }
            GPIO_InitStructure.Alternate = value;
        }
        else // mode output
        {
            if( config == PIN_OPEN_DRAIN )
 8002384:	2b01      	cmp	r3, #1
            {
                GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 8002386:	bf0c      	ite	eq
 8002388:	2311      	moveq	r3, #17
            }
            else
            {
                GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800238a:	2301      	movne	r3, #1
            }
        }

        // Sets initial output value
        if( mode == PIN_OUTPUT )
 800238c:	2a01      	cmp	r2, #1
                GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800238e:	9306      	str	r3, [sp, #24]
        if( mode == PIN_OUTPUT )
 8002390:	d105      	bne.n	800239e <GpioMcuInit+0x7a>
        // Check if pin is not connected
        if( obj->pin == NC )
        {
            return;
        }
        HAL_GPIO_WritePin( obj->port, obj->pinIndex , ( GPIO_PinState )value );
 8002392:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002394:	4661      	mov	r1, ip
 8002396:	b2da      	uxtb	r2, r3
 8002398:	f00b fcd6 	bl	800dd48 <HAL_GPIO_WritePin>
    {
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeWrite( obj, value );
#endif
    }
 800239c:	6868      	ldr	r0, [r5, #4]
        HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 800239e:	a905      	add	r1, sp, #20
 80023a0:	f00b fb80 	bl	800daa4 <HAL_GPIO_Init>
}
 80023a4:	b00b      	add	sp, #44	; 0x2c
 80023a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  SET_BIT(RCC->AHB2ENR, Periphs);
 80023a8:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
            obj->port = GPIOA;
 80023aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ae:	f044 0401 	orr.w	r4, r4, #1
 80023b2:	6068      	str	r0, [r5, #4]
 80023b4:	64cc      	str	r4, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80023b6:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
        GPIO_InitStructure.Pin =  obj->pinIndex ;
 80023b8:	9605      	str	r6, [sp, #20]
 80023ba:	f001 0101 	and.w	r1, r1, #1
 80023be:	9101      	str	r1, [sp, #4]
  (void)tmpreg;
 80023c0:	9901      	ldr	r1, [sp, #4]
        GPIO_InitStructure.Pull = obj->pull = type;
 80023c2:	72af      	strb	r7, [r5, #10]
        GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80023c4:	2102      	movs	r1, #2
 80023c6:	e9cd 7107 	strd	r7, r1, [sp, #28]
        if( mode == PIN_INPUT )
 80023ca:	2a00      	cmp	r2, #0
 80023cc:	d1d6      	bne.n	800237c <GpioMcuInit+0x58>
            GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 80023ce:	9206      	str	r2, [sp, #24]
 80023d0:	e7e5      	b.n	800239e <GpioMcuInit+0x7a>
  SET_BIT(RCC->AHB2ENR, Periphs);
 80023d2:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
            obj->port = GPIOB;
 80023d4:	4810      	ldr	r0, [pc, #64]	; (8002418 <GpioMcuInit+0xf4>)
 80023d6:	6068      	str	r0, [r5, #4]
 80023d8:	f044 0402 	orr.w	r4, r4, #2
 80023dc:	64cc      	str	r4, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80023de:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80023e0:	f001 0102 	and.w	r1, r1, #2
 80023e4:	9102      	str	r1, [sp, #8]
  (void)tmpreg;
 80023e6:	9902      	ldr	r1, [sp, #8]
}
 80023e8:	e7c2      	b.n	8002370 <GpioMcuInit+0x4c>
  SET_BIT(RCC->AHB2ENR, Periphs);
 80023ea:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
            obj->port = GPIOC;
 80023ec:	480b      	ldr	r0, [pc, #44]	; (800241c <GpioMcuInit+0xf8>)
 80023ee:	6068      	str	r0, [r5, #4]
 80023f0:	f044 0404 	orr.w	r4, r4, #4
 80023f4:	64cc      	str	r4, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80023f6:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80023f8:	f001 0104 	and.w	r1, r1, #4
 80023fc:	9103      	str	r1, [sp, #12]
  (void)tmpreg;
 80023fe:	9903      	ldr	r1, [sp, #12]
}
 8002400:	e7b6      	b.n	8002370 <GpioMcuInit+0x4c>
                GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002402:	2b01      	cmp	r3, #1
            GPIO_InitStructure.Alternate = value;
 8002404:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002406:	9209      	str	r2, [sp, #36]	; 0x24
                GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002408:	bf0c      	ite	eq
 800240a:	2312      	moveq	r3, #18
 800240c:	2302      	movne	r3, #2
 800240e:	9306      	str	r3, [sp, #24]
            GPIO_InitStructure.Alternate = value;
 8002410:	e7c5      	b.n	800239e <GpioMcuInit+0x7a>
 8002412:	bf00      	nop
 8002414:	48001c00 	.word	0x48001c00
 8002418:	48000400 	.word	0x48000400
 800241c:	48000800 	.word	0x48000800

08002420 <GpioMcuSetInterrupt>:
{
 8002420:	b530      	push	{r4, r5, lr}
 8002422:	4605      	mov	r5, r0
    if( obj->pin < IOE_0 )
 8002424:	f990 0000 	ldrsb.w	r0, [r0]
 8002428:	286f      	cmp	r0, #111	; 0x6f
{
 800242a:	b087      	sub	sp, #28
    if( obj->pin < IOE_0 )
 800242c:	dc45      	bgt.n	80024ba <GpioMcuSetInterrupt+0x9a>
        if( irqHandler == NULL )
 800242e:	2b00      	cmp	r3, #0
 8002430:	d043      	beq.n	80024ba <GpioMcuSetInterrupt+0x9a>
 8002432:	4614      	mov	r4, r2
        if( irqMode == IRQ_RISING_EDGE )
 8002434:	2901      	cmp	r1, #1
        GPIO_InitStructure.Pin =  obj->pinIndex;
 8002436:	886a      	ldrh	r2, [r5, #2]
        obj->IrqHandler = irqHandler;
 8002438:	612b      	str	r3, [r5, #16]
        GPIO_InitStructure.Pin =  obj->pinIndex;
 800243a:	9201      	str	r2, [sp, #4]
        if( irqMode == IRQ_RISING_EDGE )
 800243c:	d076      	beq.n	800252c <GpioMcuSetInterrupt+0x10c>
        else if( irqMode == IRQ_FALLING_EDGE )
 800243e:	2902      	cmp	r1, #2
            GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 8002440:	bf0c      	ite	eq
 8002442:	f44f 1304 	moveq.w	r3, #2162688	; 0x210000
            GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002446:	f44f 1344 	movne.w	r3, #3211264	; 0x310000
 800244a:	9302      	str	r3, [sp, #8]
        GPIO_InitStructure.Pull = obj->pull;
 800244c:	7aab      	ldrb	r3, [r5, #10]
 800244e:	9303      	str	r3, [sp, #12]
        HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 8002450:	a901      	add	r1, sp, #4
        GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002452:	2302      	movs	r3, #2
        HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 8002454:	6868      	ldr	r0, [r5, #4]
        GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002456:	9304      	str	r3, [sp, #16]
        HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 8002458:	f00b fb24 	bl	800daa4 <HAL_GPIO_Init>
        switch( irqPriority )
 800245c:	2c03      	cmp	r4, #3
 800245e:	bf9c      	itt	ls
 8002460:	4b34      	ldrls	r3, [pc, #208]	; (8002534 <GpioMcuSetInterrupt+0x114>)
 8002462:	f853 1024 	ldrls.w	r1, [r3, r4, lsl #2]
        switch( obj->pinIndex )
 8002466:	886b      	ldrh	r3, [r5, #2]
        HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 8002468:	bf88      	it	hi
 800246a:	2100      	movhi	r1, #0
        switch( obj->pinIndex )
 800246c:	2b20      	cmp	r3, #32
 800246e:	d82c      	bhi.n	80024ca <GpioMcuSetInterrupt+0xaa>
 8002470:	2b01      	cmp	r3, #1
 8002472:	d928      	bls.n	80024c6 <GpioMcuSetInterrupt+0xa6>
 8002474:	3b02      	subs	r3, #2
 8002476:	2b1e      	cmp	r3, #30
 8002478:	d825      	bhi.n	80024c6 <GpioMcuSetInterrupt+0xa6>
 800247a:	e8df f003 	tbb	[pc, r3]
 800247e:	2422      	.short	0x2422
 8002480:	24242420 	.word	0x24242420
 8002484:	24242455 	.word	0x24242455
 8002488:	24242424 	.word	0x24242424
 800248c:	24242453 	.word	0x24242453
 8002490:	24242424 	.word	0x24242424
 8002494:	24242424 	.word	0x24242424
 8002498:	24242424 	.word	0x24242424
 800249c:	10          	.byte	0x10
 800249d:	00          	.byte	0x00
            IRQnb = EXTI9_5_IRQn;
 800249e:	2417      	movs	r4, #23
        GpioIrq[( obj->pin ) & 0x0F] = obj;
 80024a0:	782b      	ldrb	r3, [r5, #0]
 80024a2:	4825      	ldr	r0, [pc, #148]	; (8002538 <GpioMcuSetInterrupt+0x118>)
 80024a4:	f003 030f 	and.w	r3, r3, #15
        HAL_NVIC_SetPriority( IRQnb , priority, 0 );
 80024a8:	2200      	movs	r2, #0
        GpioIrq[( obj->pin ) & 0x0F] = obj;
 80024aa:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
        HAL_NVIC_SetPriority( IRQnb , priority, 0 );
 80024ae:	4620      	mov	r0, r4
 80024b0:	f00b f80e 	bl	800d4d0 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ( IRQnb );
 80024b4:	4620      	mov	r0, r4
 80024b6:	f00b f855 	bl	800d564 <HAL_NVIC_EnableIRQ>
}
 80024ba:	b007      	add	sp, #28
 80024bc:	bd30      	pop	{r4, r5, pc}
            IRQnb = EXTI2_IRQn;
 80024be:	2408      	movs	r4, #8
 80024c0:	e7ee      	b.n	80024a0 <GpioMcuSetInterrupt+0x80>
        switch( obj->pinIndex )
 80024c2:	2407      	movs	r4, #7
 80024c4:	e7ec      	b.n	80024a0 <GpioMcuSetInterrupt+0x80>
        IRQn_Type IRQnb = EXTI0_IRQn;
 80024c6:	2406      	movs	r4, #6
 80024c8:	e7ea      	b.n	80024a0 <GpioMcuSetInterrupt+0x80>
        switch( obj->pinIndex )
 80024ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ce:	d027      	beq.n	8002520 <GpioMcuSetInterrupt+0x100>
 80024d0:	d90c      	bls.n	80024ec <GpioMcuSetInterrupt+0xcc>
 80024d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024d6:	d023      	beq.n	8002520 <GpioMcuSetInterrupt+0x100>
 80024d8:	d912      	bls.n	8002500 <GpioMcuSetInterrupt+0xe0>
 80024da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024de:	d01f      	beq.n	8002520 <GpioMcuSetInterrupt+0x100>
            IRQnb = EXTI15_10_IRQn;
 80024e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024e4:	bf14      	ite	ne
 80024e6:	2406      	movne	r4, #6
 80024e8:	2428      	moveq	r4, #40	; 0x28
 80024ea:	e7d9      	b.n	80024a0 <GpioMcuSetInterrupt+0x80>
        switch( obj->pinIndex )
 80024ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024f0:	d0d5      	beq.n	800249e <GpioMcuSetInterrupt+0x7e>
 80024f2:	d90e      	bls.n	8002512 <GpioMcuSetInterrupt+0xf2>
            IRQnb = EXTI9_5_IRQn;
 80024f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024f8:	bf14      	ite	ne
 80024fa:	2406      	movne	r4, #6
 80024fc:	2417      	moveq	r4, #23
 80024fe:	e7cf      	b.n	80024a0 <GpioMcuSetInterrupt+0x80>
        switch( obj->pinIndex )
 8002500:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002504:	d00c      	beq.n	8002520 <GpioMcuSetInterrupt+0x100>
            IRQnb = EXTI15_10_IRQn;
 8002506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800250a:	bf14      	ite	ne
 800250c:	2406      	movne	r4, #6
 800250e:	2428      	moveq	r4, #40	; 0x28
 8002510:	e7c6      	b.n	80024a0 <GpioMcuSetInterrupt+0x80>
        switch( obj->pinIndex )
 8002512:	2b40      	cmp	r3, #64	; 0x40
 8002514:	d0c3      	beq.n	800249e <GpioMcuSetInterrupt+0x7e>
            IRQnb = EXTI9_5_IRQn;
 8002516:	2b80      	cmp	r3, #128	; 0x80
 8002518:	bf14      	ite	ne
 800251a:	2406      	movne	r4, #6
 800251c:	2417      	moveq	r4, #23
 800251e:	e7bf      	b.n	80024a0 <GpioMcuSetInterrupt+0x80>
            IRQnb = EXTI15_10_IRQn;
 8002520:	2428      	movs	r4, #40	; 0x28
 8002522:	e7bd      	b.n	80024a0 <GpioMcuSetInterrupt+0x80>
            IRQnb = EXTI4_IRQn;
 8002524:	240a      	movs	r4, #10
            break;
 8002526:	e7bb      	b.n	80024a0 <GpioMcuSetInterrupt+0x80>
            IRQnb = EXTI3_IRQn;
 8002528:	2409      	movs	r4, #9
            break;
 800252a:	e7b9      	b.n	80024a0 <GpioMcuSetInterrupt+0x80>
            GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800252c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002530:	9302      	str	r3, [sp, #8]
 8002532:	e78b      	b.n	800244c <GpioMcuSetInterrupt+0x2c>
 8002534:	08014b08 	.word	0x08014b08
 8002538:	20000344 	.word	0x20000344

0800253c <EXTI0_IRQHandler>:
    }
}

void EXTI0_IRQHandler( void )
{
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_0 );
 800253c:	2001      	movs	r0, #1
 800253e:	f00b bc1d 	b.w	800dd7c <HAL_GPIO_EXTI_IRQHandler>
 8002542:	bf00      	nop

08002544 <EXTI1_IRQHandler>:
}

void EXTI1_IRQHandler( void )
{
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_1 );
 8002544:	2002      	movs	r0, #2
 8002546:	f00b bc19 	b.w	800dd7c <HAL_GPIO_EXTI_IRQHandler>
 800254a:	bf00      	nop

0800254c <EXTI2_IRQHandler>:
}

void EXTI2_IRQHandler( void )
{
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_2 );
 800254c:	2004      	movs	r0, #4
 800254e:	f00b bc15 	b.w	800dd7c <HAL_GPIO_EXTI_IRQHandler>
 8002552:	bf00      	nop

08002554 <EXTI3_IRQHandler>:
}

void EXTI3_IRQHandler( void )
{
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_3 );
 8002554:	2008      	movs	r0, #8
 8002556:	f00b bc11 	b.w	800dd7c <HAL_GPIO_EXTI_IRQHandler>
 800255a:	bf00      	nop

0800255c <EXTI9_5_IRQHandler>:
//{
//    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_4 );
//}

void EXTI9_5_IRQHandler( void )
{
 800255c:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_5 );
 800255e:	2020      	movs	r0, #32
 8002560:	f00b fc0c 	bl	800dd7c <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_6 );
 8002564:	2040      	movs	r0, #64	; 0x40
 8002566:	f00b fc09 	bl	800dd7c <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 800256a:	2080      	movs	r0, #128	; 0x80
 800256c:	f00b fc06 	bl	800dd7c <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_8 );
 8002570:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002574:	f00b fc02 	bl	800dd7c <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
}
 8002578:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
 800257c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002580:	f00b bbfc 	b.w	800dd7c <HAL_GPIO_EXTI_IRQHandler>

08002584 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler( void )
{
 8002584:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_10 );
 8002586:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800258a:	f00b fbf7 	bl	800dd7c <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_11 );
 800258e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002592:	f00b fbf3 	bl	800dd7c <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_12 );
 8002596:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800259a:	f00b fbef 	bl	800dd7c <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_13 );
 800259e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80025a2:	f00b fbeb 	bl	800dd7c <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_14 );
 80025a6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80025aa:	f00b fbe7 	bl	800dd7c <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
}
 80025ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
 80025b2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80025b6:	f00b bbe1 	b.w	800dd7c <HAL_GPIO_EXTI_IRQHandler>
 80025ba:	bf00      	nop

080025bc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback( uint16_t gpioPin )
{
    uint8_t callbackIndex = 0;

    if( gpioPin > 0 )
 80025bc:	2801      	cmp	r0, #1
    uint8_t callbackIndex = 0;
 80025be:	f04f 0300 	mov.w	r3, #0
    if( gpioPin > 0 )
 80025c2:	d807      	bhi.n	80025d4 <HAL_GPIO_EXTI_Callback+0x18>
            gpioPin = gpioPin >> 1;
            callbackIndex++;
        }
    }

    if( ( GpioIrq[callbackIndex] != NULL ) && ( GpioIrq[callbackIndex]->IrqHandler != NULL ) )
 80025c4:	4a09      	ldr	r2, [pc, #36]	; (80025ec <HAL_GPIO_EXTI_Callback+0x30>)
 80025c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ca:	b173      	cbz	r3, 80025ea <HAL_GPIO_EXTI_Callback+0x2e>
 80025cc:	691a      	ldr	r2, [r3, #16]
 80025ce:	b162      	cbz	r2, 80025ea <HAL_GPIO_EXTI_Callback+0x2e>
    {
        GpioIrq[callbackIndex]->IrqHandler( GpioIrq[callbackIndex]->Context );
 80025d0:	68d8      	ldr	r0, [r3, #12]
 80025d2:	4710      	bx	r2
            gpioPin = gpioPin >> 1;
 80025d4:	0840      	lsrs	r0, r0, #1
            callbackIndex++;
 80025d6:	3301      	adds	r3, #1
        while( gpioPin != 0x01 )
 80025d8:	2801      	cmp	r0, #1
            callbackIndex++;
 80025da:	b2db      	uxtb	r3, r3
        while( gpioPin != 0x01 )
 80025dc:	d0f2      	beq.n	80025c4 <HAL_GPIO_EXTI_Callback+0x8>
            gpioPin = gpioPin >> 1;
 80025de:	0840      	lsrs	r0, r0, #1
            callbackIndex++;
 80025e0:	3301      	adds	r3, #1
        while( gpioPin != 0x01 )
 80025e2:	2801      	cmp	r0, #1
            callbackIndex++;
 80025e4:	b2db      	uxtb	r3, r3
        while( gpioPin != 0x01 )
 80025e6:	d1f5      	bne.n	80025d4 <HAL_GPIO_EXTI_Callback+0x18>
 80025e8:	e7ec      	b.n	80025c4 <HAL_GPIO_EXTI_Callback+0x8>
    }
}
 80025ea:	4770      	bx	lr
 80025ec:	20000344 	.word	0x20000344

080025f0 <LpmSetStopMode>:
    CRITICAL_SECTION_END( );
    return;
}

void LpmSetStopMode( LpmId_t id, LpmSetMode_t mode )
{
 80025f0:	b530      	push	{r4, r5, lr}
 80025f2:	b083      	sub	sp, #12
 80025f4:	460c      	mov	r4, r1
 80025f6:	4605      	mov	r5, r0
    CRITICAL_SECTION_BEGIN( );
 80025f8:	a801      	add	r0, sp, #4
 80025fa:	f7ff fe49 	bl	8002290 <BoardCriticalSectionBegin>

    switch( mode )
 80025fe:	b154      	cbz	r4, 8002616 <LpmSetStopMode+0x26>
 8002600:	2c01      	cmp	r4, #1
 8002602:	d103      	bne.n	800260c <LpmSetStopMode+0x1c>
    {
        case LPM_DISABLE:
        {
            StopModeDisable |= ( uint32_t )id;
 8002604:	4a09      	ldr	r2, [pc, #36]	; (800262c <LpmSetStopMode+0x3c>)
 8002606:	6813      	ldr	r3, [r2, #0]
 8002608:	432b      	orrs	r3, r5
 800260a:	6013      	str	r3, [r2, #0]
        {
            break;
        }
    }

    CRITICAL_SECTION_END( );
 800260c:	a801      	add	r0, sp, #4
 800260e:	f7ff fe45 	bl	800229c <BoardCriticalSectionEnd>
    return;
}
 8002612:	b003      	add	sp, #12
 8002614:	bd30      	pop	{r4, r5, pc}
            StopModeDisable &= ~( uint32_t )id;
 8002616:	4a05      	ldr	r2, [pc, #20]	; (800262c <LpmSetStopMode+0x3c>)
 8002618:	6813      	ldr	r3, [r2, #0]
    CRITICAL_SECTION_END( );
 800261a:	a801      	add	r0, sp, #4
            StopModeDisable &= ~( uint32_t )id;
 800261c:	ea23 0305 	bic.w	r3, r3, r5
 8002620:	6013      	str	r3, [r2, #0]
    CRITICAL_SECTION_END( );
 8002622:	f7ff fe3b 	bl	800229c <BoardCriticalSectionEnd>
}
 8002626:	b003      	add	sp, #12
 8002628:	bd30      	pop	{r4, r5, pc}
 800262a:	bf00      	nop
 800262c:	20000384 	.word	0x20000384

08002630 <lr1110_board_init_io>:
#endif

static void lr1110_board_init_tcxo_io( const void* context );

void lr1110_board_init_io( const void* context )
{
 8002630:	b570      	push	{r4, r5, r6, lr}
 8002632:	b082      	sub	sp, #8

#if 1
    GpioInit( &( ( lr1110_t* ) context )->reset, RADIO_RESET, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 8002634:	2400      	movs	r4, #0
 8002636:	2601      	movs	r6, #1
{
 8002638:	4605      	mov	r5, r0
    GpioInit( &( ( lr1110_t* ) context )->reset, RADIO_RESET, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 800263a:	4632      	mov	r2, r6
 800263c:	4623      	mov	r3, r4
 800263e:	4621      	mov	r1, r4
 8002640:	9601      	str	r6, [sp, #4]
 8002642:	9400      	str	r4, [sp, #0]
 8002644:	f009 ff2c 	bl	800c4a0 <GpioInit>
    GpioInit( &( ( lr1110_t* ) context )->spi.Nss, RADIO_NSS, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 8002648:	4632      	mov	r2, r6
 800264a:	f105 007c 	add.w	r0, r5, #124	; 0x7c
 800264e:	4623      	mov	r3, r4
 8002650:	e9cd 4600 	strd	r4, r6, [sp]
 8002654:	2104      	movs	r1, #4
 8002656:	f009 ff23 	bl	800c4a0 <GpioInit>
    GpioInit( &( ( lr1110_t* ) context )->dio_1, RADIO_DIO_1, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800265a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800265e:	4623      	mov	r3, r4
 8002660:	4622      	mov	r2, r4
 8002662:	e9cd 4400 	strd	r4, r4, [sp]
 8002666:	2114      	movs	r1, #20
 8002668:	f009 ff1a 	bl	800c4a0 <GpioInit>
    GpioInit( &( ( lr1110_t* ) context )->busy, RADIO_BUSY, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800266c:	e9cd 4400 	strd	r4, r4, [sp]
 8002670:	f105 0014 	add.w	r0, r5, #20
 8002674:	4623      	mov	r3, r4
 8002676:	4622      	mov	r2, r4
 8002678:	2110      	movs	r1, #16
 800267a:	f009 ff11 	bl	800c4a0 <GpioInit>
#endif
}
 800267e:	b002      	add	sp, #8
 8002680:	bd70      	pop	{r4, r5, r6, pc}
 8002682:	bf00      	nop

08002684 <lr1110_board_set_rf_tx_power>:
}

void lr1110_board_set_rf_tx_power( const void* context, int8_t power )
{
    // TODO: Add PA Config check
    if( power > 0 )
 8002684:	2900      	cmp	r1, #0
 8002686:	dd05      	ble.n	8002694 <lr1110_board_set_rf_tx_power+0x10>
    {
        if( power > 22 )
 8002688:	2916      	cmp	r1, #22
 800268a:	bfa8      	it	ge
 800268c:	2116      	movge	r1, #22
        if( power < -9 )
        {
            power = -9;
        }
    }
    lr1110_radio_set_tx_params( context, power, LR1110_RADIO_RAMP_TIME_40U );
 800268e:	2202      	movs	r2, #2
 8002690:	f008 b982 	b.w	800a998 <lr1110_radio_set_tx_params>
        if( power < -9 )
 8002694:	f06f 0308 	mvn.w	r3, #8
 8002698:	4299      	cmp	r1, r3
 800269a:	bfb8      	it	lt
 800269c:	4619      	movlt	r1, r3
    lr1110_radio_set_tx_params( context, power, LR1110_RADIO_RAMP_TIME_40U );
 800269e:	2202      	movs	r2, #2
 80026a0:	f008 b97a 	b.w	800a998 <lr1110_radio_set_tx_params>

080026a4 <lr1110_board_get_tcxo_wakeup_time>:
}

uint32_t lr1110_board_get_tcxo_wakeup_time( const void* context )
{
    return BOARD_TCXO_WAKEUP_TIME;
}
 80026a4:	2005      	movs	r0, #5
 80026a6:	4770      	bx	lr

080026a8 <lr1110_get_dio_1_pin_state>:

uint32_t lr1110_get_dio_1_pin_state( const void* context )
{
    return GpioRead( &( ( lr1110_t* ) context )->dio_1 );
 80026a8:	3028      	adds	r0, #40	; 0x28
 80026aa:	f009 bf03 	b.w	800c4b4 <GpioRead>
 80026ae:	bf00      	nop

080026b0 <lr1110_board_init>:
}

void lr1110_board_init( const void* context, lr1110_dio_irq_handler dio_irq )
{
 80026b0:	b530      	push	{r4, r5, lr}
 80026b2:	b08b      	sub	sp, #44	; 0x2c
 80026b4:	4604      	mov	r4, r0
 80026b6:	9101      	str	r1, [sp, #4]
    lr1110_system_reset( context );
 80026b8:	f008 fa94 	bl	800abe4 <lr1110_system_reset>
    return ( ( lr1110_t* ) context )->op_mode;
}

void lr1110_hal_set_operating_mode( const void* context, lr1110_hal_operating_mode_t op_mode )
{
    ( ( lr1110_t* ) context )->op_mode = op_mode;
 80026bc:	2101      	movs	r1, #1
    GpioSetInterrupt( &( ( lr1110_t* ) context )->dio_1, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, dio_irq );
 80026be:	9b01      	ldr	r3, [sp, #4]
    ( ( lr1110_t* ) context )->op_mode = op_mode;
 80026c0:	f884 1090 	strb.w	r1, [r4, #144]	; 0x90
    GpioSetInterrupt( &( ( lr1110_t* ) context )->dio_1, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, dio_irq );
 80026c4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80026c8:	2203      	movs	r2, #3
 80026ca:	f009 fef1 	bl	800c4b0 <GpioSetInterrupt>
    uint32_t              irq = 0;
 80026ce:	2500      	movs	r5, #0
    lr1110_system_get_status( context, &stat1, &stat2, &irq );
 80026d0:	ab05      	add	r3, sp, #20
 80026d2:	aa04      	add	r2, sp, #16
 80026d4:	4620      	mov	r0, r4
 80026d6:	a903      	add	r1, sp, #12
    uint32_t              irq = 0;
 80026d8:	9505      	str	r5, [sp, #20]
    lr1110_system_get_status( context, &stat1, &stat2, &irq );
 80026da:	f008 fa85 	bl	800abe8 <lr1110_system_get_status>
    lr1110_system_get_version( context, &version );
 80026de:	4620      	mov	r0, r4
 80026e0:	a906      	add	r1, sp, #24
 80026e2:	f008 fab3 	bl	800ac4c <lr1110_system_get_version>
    lr1110_system_get_errors( context, &errors );
 80026e6:	f10d 0112 	add.w	r1, sp, #18
 80026ea:	4620      	mov	r0, r4
    lr1110_system_errors_t errors = { 0 };
 80026ec:	f8ad 5012 	strh.w	r5, [sp, #18]
    lr1110_system_get_errors( context, &errors );
 80026f0:	f008 fac8 	bl	800ac84 <lr1110_system_get_errors>
    lr1110_system_clear_errors( context );
 80026f4:	4620      	mov	r0, r4
 80026f6:	f008 fadd 	bl	800acb4 <lr1110_system_clear_errors>
    lr1110_system_set_tcxo_mode( context, LR1110_SYSTEM_TCXO_SUPPLY_VOLTAGE_1_8V,
 80026fa:	22a3      	movs	r2, #163	; 0xa3
 80026fc:	4620      	mov	r0, r4
 80026fe:	2102      	movs	r1, #2
 8002700:	f008 fb68 	bl	800add4 <lr1110_system_set_tcxo_mode>
    lr1110_system_calibrate( context, calib_params );
 8002704:	4620      	mov	r0, r4
 8002706:	213f      	movs	r1, #63	; 0x3f
 8002708:	f008 fae2 	bl	800acd0 <lr1110_system_calibrate>
    rf_switch_configuration.enable  = LR1110_SYSTEM_RFSW0_HIGH | LR1110_SYSTEM_RFSW1_HIGH;
 800270c:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <lr1110_board_init+0x88>)
 800270e:	9308      	str	r3, [sp, #32]
    lr1110_system_set_dio_as_rf_switch( context, &rf_switch_configuration );
 8002710:	4620      	mov	r0, r4
 8002712:	a908      	add	r1, sp, #32
    rf_switch_configuration.gnss    = 0;
 8002714:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
    lr1110_system_set_dio_as_rf_switch( context, &rf_switch_configuration );
 8002718:	f008 fafe 	bl	800ad18 <lr1110_system_set_dio_as_rf_switch>
    lr1110_radio_pa_config_t paConfig = {
 800271c:	4b07      	ldr	r3, [pc, #28]	; (800273c <lr1110_board_init+0x8c>)
    lr1110_radio_set_pa_config( context, &paConfig );
 800271e:	4620      	mov	r0, r4
    lr1110_radio_pa_config_t paConfig = {
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	9307      	str	r3, [sp, #28]
    lr1110_radio_set_pa_config( context, &paConfig );
 8002724:	a907      	add	r1, sp, #28
 8002726:	f008 f96b 	bl	800aa00 <lr1110_radio_set_pa_config>
    lr1110_radio_set_packet_type( context, packet_type );
 800272a:	4620      	mov	r0, r4
 800272c:	2102      	movs	r1, #2
 800272e:	f008 f8af 	bl	800a890 <lr1110_radio_set_packet_type>
}
 8002732:	b00b      	add	sp, #44	; 0x2c
 8002734:	bd30      	pop	{r4, r5, pc}
 8002736:	bf00      	nop
 8002738:	03020003 	.word	0x03020003
 800273c:	0801440c 	.word	0x0801440c

08002740 <lr1110_hal_reset>:
{
 8002740:	b508      	push	{r3, lr}
	printf("LR1110 -- Reset\r\n");
 8002742:	480a      	ldr	r0, [pc, #40]	; (800276c <lr1110_hal_reset+0x2c>)
 8002744:	f010 fcac 	bl	80130a0 <puts>
	HAL_GPIO_WritePin(LR_NRESET_GPIO_Port, LR_NRESET_Pin, 0);
 8002748:	2200      	movs	r2, #0
 800274a:	2101      	movs	r1, #1
 800274c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002750:	f00b fafa 	bl	800dd48 <HAL_GPIO_WritePin>
	HAL_Delay( 1 );
 8002754:	2001      	movs	r0, #1
 8002756:	f7fe fd9d 	bl	8001294 <HAL_Delay>
	HAL_GPIO_WritePin(LR_NRESET_GPIO_Port, LR_NRESET_Pin, 1);
 800275a:	2201      	movs	r2, #1
}
 800275c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_WritePin(LR_NRESET_GPIO_Port, LR_NRESET_Pin, 1);
 8002760:	4611      	mov	r1, r2
 8002762:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002766:	f00b baef 	b.w	800dd48 <HAL_GPIO_WritePin>
 800276a:	bf00      	nop
 800276c:	08014b18 	.word	0x08014b18

08002770 <lr1110_hal_wakeup>:
{
 8002770:	b510      	push	{r4, lr}
    return ( ( lr1110_t* ) context )->op_mode;
 8002772:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
{
 8002776:	4604      	mov	r4, r0
    if( ( lr1110_hal_get_operating_mode( context ) == LR1110_HAL_OP_MODE_SLEEP ) ||
 8002778:	b153      	cbz	r3, 8002790 <lr1110_hal_wakeup+0x20>
 800277a:	2b07      	cmp	r3, #7
 800277c:	d008      	beq.n	8002790 <lr1110_hal_wakeup+0x20>
    while( HAL_GPIO_ReadPin(LR_BUSY_GPIO_Port, LR_BUSY_Pin) == 1 )
 800277e:	4c0c      	ldr	r4, [pc, #48]	; (80027b0 <lr1110_hal_wakeup+0x40>)
 8002780:	2101      	movs	r1, #1
 8002782:	4620      	mov	r0, r4
 8002784:	f00b face 	bl	800dd24 <HAL_GPIO_ReadPin>
 8002788:	2801      	cmp	r0, #1
 800278a:	d0f9      	beq.n	8002780 <lr1110_hal_wakeup+0x10>
}
 800278c:	2000      	movs	r0, #0
 800278e:	bd10      	pop	{r4, pc}
        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 0);
 8002790:	2200      	movs	r2, #0
 8002792:	2110      	movs	r1, #16
 8002794:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002798:	f00b fad6 	bl	800dd48 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 1);
 800279c:	2201      	movs	r2, #1
 800279e:	2110      	movs	r1, #16
 80027a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027a4:	f00b fad0 	bl	800dd48 <HAL_GPIO_WritePin>
        ( ( lr1110_t* ) context )->op_mode = LR1110_HAL_OP_MODE_STDBY_RC;
 80027a8:	2301      	movs	r3, #1
 80027aa:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
 80027ae:	e7e6      	b.n	800277e <lr1110_hal_wakeup+0xe>
 80027b0:	48000400 	.word	0x48000400

080027b4 <lr1110_hal_write>:
{
 80027b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027b8:	4688      	mov	r8, r1
 80027ba:	f8bd a028 	ldrh.w	sl, [sp, #40]	; 0x28
 80027be:	4616      	mov	r6, r2
 80027c0:	461c      	mov	r4, r3
 80027c2:	4681      	mov	r9, r0
    if( lr1110_hal_wakeup( context ) == LR1110_HAL_STATUS_OK )
 80027c4:	f7ff ffd4 	bl	8002770 <lr1110_hal_wakeup>
 80027c8:	b118      	cbz	r0, 80027d2 <lr1110_hal_write+0x1e>
    return LR1110_HAL_STATUS_ERROR;
 80027ca:	2703      	movs	r7, #3
}
 80027cc:	4638      	mov	r0, r7
 80027ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 0);
 80027d2:	4607      	mov	r7, r0
 80027d4:	4602      	mov	r2, r0
 80027d6:	2110      	movs	r1, #16
 80027d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027dc:	f00b fab4 	bl	800dd48 <HAL_GPIO_WritePin>
        for( uint16_t i = 0; i < command_length; i++ )
 80027e0:	b16e      	cbz	r6, 80027fe <lr1110_hal_write+0x4a>
 80027e2:	3e01      	subs	r6, #1
 80027e4:	fa18 f686 	uxtah	r6, r8, r6
 80027e8:	f109 0b3c 	add.w	fp, r9, #60	; 0x3c
 80027ec:	f108 35ff 	add.w	r5, r8, #4294967295
            SpiInOut( &( ( lr1110_t* ) context )->spi, command[i] );
 80027f0:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80027f4:	4658      	mov	r0, fp
 80027f6:	f000 fae3 	bl	8002dc0 <SpiInOut>
        for( uint16_t i = 0; i < command_length; i++ )
 80027fa:	42b5      	cmp	r5, r6
 80027fc:	d1f8      	bne.n	80027f0 <lr1110_hal_write+0x3c>
        for( uint16_t i = 0; i < data_length; i++ )
 80027fe:	f1ba 0f00 	cmp.w	sl, #0
 8002802:	d00d      	beq.n	8002820 <lr1110_hal_write+0x6c>
 8002804:	f10a 35ff 	add.w	r5, sl, #4294967295
 8002808:	fa14 f585 	uxtah	r5, r4, r5
 800280c:	f109 093c 	add.w	r9, r9, #60	; 0x3c
 8002810:	3c01      	subs	r4, #1
            SpiInOut( &( ( lr1110_t* ) context )->spi, data[i] );
 8002812:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002816:	4648      	mov	r0, r9
 8002818:	f000 fad2 	bl	8002dc0 <SpiInOut>
        for( uint16_t i = 0; i < data_length; i++ )
 800281c:	42ac      	cmp	r4, r5
 800281e:	d1f8      	bne.n	8002812 <lr1110_hal_write+0x5e>
        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 1);
 8002820:	2201      	movs	r2, #1
 8002822:	2110      	movs	r1, #16
 8002824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002828:	f00b fa8e 	bl	800dd48 <HAL_GPIO_WritePin>
        if( ( ( command[0] << 8 ) | command[1] ) != 0x011B )
 800282c:	f8b8 2000 	ldrh.w	r2, [r8]
 8002830:	f641 3301 	movw	r3, #6913	; 0x1b01
 8002834:	429a      	cmp	r2, r3
 8002836:	d0c9      	beq.n	80027cc <lr1110_hal_write+0x18>
    while( HAL_GPIO_ReadPin(LR_BUSY_GPIO_Port, LR_BUSY_Pin) == 1 )
 8002838:	4c04      	ldr	r4, [pc, #16]	; (800284c <lr1110_hal_write+0x98>)
 800283a:	2101      	movs	r1, #1
 800283c:	4620      	mov	r0, r4
 800283e:	f00b fa71 	bl	800dd24 <HAL_GPIO_ReadPin>
 8002842:	2801      	cmp	r0, #1
 8002844:	d0f9      	beq.n	800283a <lr1110_hal_write+0x86>
}
 8002846:	4638      	mov	r0, r7
 8002848:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800284c:	48000400 	.word	0x48000400

08002850 <lr1110_hal_read>:
{
 8002850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002854:	460d      	mov	r5, r1
 8002856:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 800285a:	4690      	mov	r8, r2
 800285c:	461c      	mov	r4, r3
 800285e:	4606      	mov	r6, r0
    if( lr1110_hal_wakeup( context ) == LR1110_HAL_STATUS_OK )
 8002860:	f7ff ff86 	bl	8002770 <lr1110_hal_wakeup>
 8002864:	b118      	cbz	r0, 800286e <lr1110_hal_read+0x1e>
    return LR1110_HAL_STATUS_ERROR;
 8002866:	2703      	movs	r7, #3
}
 8002868:	4638      	mov	r0, r7
 800286a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 0);
 800286e:	4607      	mov	r7, r0
 8002870:	4602      	mov	r2, r0
 8002872:	2110      	movs	r1, #16
 8002874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002878:	f00b fa66 	bl	800dd48 <HAL_GPIO_WritePin>
        for( uint16_t i = 0; i < command_length; i++ )
 800287c:	f1b8 0f00 	cmp.w	r8, #0
 8002880:	d043      	beq.n	800290a <lr1110_hal_read+0xba>
 8002882:	f108 38ff 	add.w	r8, r8, #4294967295
 8002886:	fa15 f888 	uxtah	r8, r5, r8
 800288a:	363c      	adds	r6, #60	; 0x3c
 800288c:	3d01      	subs	r5, #1
            SpiInOut( &( ( lr1110_t* ) context )->spi, command[i] );
 800288e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002892:	4630      	mov	r0, r6
 8002894:	f000 fa94 	bl	8002dc0 <SpiInOut>
        for( uint16_t i = 0; i < command_length; i++ )
 8002898:	4545      	cmp	r5, r8
 800289a:	d1f8      	bne.n	800288e <lr1110_hal_read+0x3e>
        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 1);
 800289c:	2201      	movs	r2, #1
 800289e:	2110      	movs	r1, #16
 80028a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028a4:	f00b fa50 	bl	800dd48 <HAL_GPIO_WritePin>
    while( HAL_GPIO_ReadPin(LR_BUSY_GPIO_Port, LR_BUSY_Pin) == 1 )
 80028a8:	4d19      	ldr	r5, [pc, #100]	; (8002910 <lr1110_hal_read+0xc0>)
 80028aa:	2101      	movs	r1, #1
 80028ac:	4628      	mov	r0, r5
 80028ae:	f00b fa39 	bl	800dd24 <HAL_GPIO_ReadPin>
 80028b2:	2801      	cmp	r0, #1
 80028b4:	d0f9      	beq.n	80028aa <lr1110_hal_read+0x5a>
        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 0);
 80028b6:	2110      	movs	r1, #16
 80028b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028bc:	2200      	movs	r2, #0
 80028be:	f00b fa43 	bl	800dd48 <HAL_GPIO_WritePin>
        SpiInOut( &( ( lr1110_t* ) context )->spi, 0 );
 80028c2:	2100      	movs	r1, #0
 80028c4:	4630      	mov	r0, r6
 80028c6:	f000 fa7b 	bl	8002dc0 <SpiInOut>
        for( uint16_t i = 0; i < data_length; i++ )
 80028ca:	f1b9 0f00 	cmp.w	r9, #0
 80028ce:	d00c      	beq.n	80028ea <lr1110_hal_read+0x9a>
 80028d0:	f109 35ff 	add.w	r5, r9, #4294967295
 80028d4:	fa14 f585 	uxtah	r5, r4, r5
 80028d8:	3c01      	subs	r4, #1
            data[i] = SpiInOut( &( ( lr1110_t* ) context )->spi, 0 );
 80028da:	2100      	movs	r1, #0
 80028dc:	4630      	mov	r0, r6
 80028de:	f000 fa6f 	bl	8002dc0 <SpiInOut>
 80028e2:	f804 0f01 	strb.w	r0, [r4, #1]!
        for( uint16_t i = 0; i < data_length; i++ )
 80028e6:	42ac      	cmp	r4, r5
 80028e8:	d1f7      	bne.n	80028da <lr1110_hal_read+0x8a>
        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 1);
 80028ea:	2201      	movs	r2, #1
 80028ec:	2110      	movs	r1, #16
 80028ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028f2:	f00b fa29 	bl	800dd48 <HAL_GPIO_WritePin>
    while( HAL_GPIO_ReadPin(LR_BUSY_GPIO_Port, LR_BUSY_Pin) == 1 )
 80028f6:	4c06      	ldr	r4, [pc, #24]	; (8002910 <lr1110_hal_read+0xc0>)
 80028f8:	2101      	movs	r1, #1
 80028fa:	4620      	mov	r0, r4
 80028fc:	f00b fa12 	bl	800dd24 <HAL_GPIO_ReadPin>
 8002900:	2801      	cmp	r0, #1
 8002902:	d0f9      	beq.n	80028f8 <lr1110_hal_read+0xa8>
}
 8002904:	4638      	mov	r0, r7
 8002906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800290a:	363c      	adds	r6, #60	; 0x3c
 800290c:	e7c6      	b.n	800289c <lr1110_hal_read+0x4c>
 800290e:	bf00      	nop
 8002910:	48000400 	.word	0x48000400

08002914 <lr1110_hal_write_read>:
{
 8002914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002918:	4688      	mov	r8, r1
 800291a:	4615      	mov	r5, r2
 800291c:	461e      	mov	r6, r3
 800291e:	4607      	mov	r7, r0
    if( lr1110_hal_wakeup( context ) == LR1110_HAL_STATUS_OK )
 8002920:	f7ff ff26 	bl	8002770 <lr1110_hal_wakeup>
 8002924:	b120      	cbz	r0, 8002930 <lr1110_hal_write_read+0x1c>
    return LR1110_HAL_STATUS_ERROR;
 8002926:	f04f 0903 	mov.w	r9, #3
}
 800292a:	4648      	mov	r0, r9
 800292c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 0);
 8002930:	4681      	mov	r9, r0
 8002932:	4602      	mov	r2, r0
 8002934:	2110      	movs	r1, #16
 8002936:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800293a:	f00b fa05 	bl	800dd48 <HAL_GPIO_WritePin>
        for( uint16_t i = 0; i < data_length; i++ )
 800293e:	b17e      	cbz	r6, 8002960 <lr1110_hal_write_read+0x4c>
 8002940:	3e01      	subs	r6, #1
 8002942:	fa18 f686 	uxtah	r6, r8, r6
 8002946:	373c      	adds	r7, #60	; 0x3c
 8002948:	3d01      	subs	r5, #1
 800294a:	f108 34ff 	add.w	r4, r8, #4294967295
            data[i] = SpiInOut( &( ( lr1110_t* ) context )->spi, command[i] );
 800294e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002952:	4638      	mov	r0, r7
 8002954:	f000 fa34 	bl	8002dc0 <SpiInOut>
        for( uint16_t i = 0; i < data_length; i++ )
 8002958:	42b4      	cmp	r4, r6
            data[i] = SpiInOut( &( ( lr1110_t* ) context )->spi, command[i] );
 800295a:	f805 0f01 	strb.w	r0, [r5, #1]!
        for( uint16_t i = 0; i < data_length; i++ )
 800295e:	d1f6      	bne.n	800294e <lr1110_hal_write_read+0x3a>
        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 1);
 8002960:	2201      	movs	r2, #1
 8002962:	2110      	movs	r1, #16
 8002964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002968:	f00b f9ee 	bl	800dd48 <HAL_GPIO_WritePin>
        if( ( ( command[0] << 8 ) | command[1] ) != 0x011B )
 800296c:	f8b8 2000 	ldrh.w	r2, [r8]
 8002970:	f641 3301 	movw	r3, #6913	; 0x1b01
 8002974:	429a      	cmp	r2, r3
 8002976:	d0d8      	beq.n	800292a <lr1110_hal_write_read+0x16>
    while( HAL_GPIO_ReadPin(LR_BUSY_GPIO_Port, LR_BUSY_Pin) == 1 )
 8002978:	4c04      	ldr	r4, [pc, #16]	; (800298c <lr1110_hal_write_read+0x78>)
 800297a:	2101      	movs	r1, #1
 800297c:	4620      	mov	r0, r4
 800297e:	f00b f9d1 	bl	800dd24 <HAL_GPIO_ReadPin>
 8002982:	2801      	cmp	r0, #1
 8002984:	d0f9      	beq.n	800297a <lr1110_hal_write_read+0x66>
}
 8002986:	4648      	mov	r0, r9
 8002988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800298c:	48000400 	.word	0x48000400

08002990 <lr1110_hal_get_operating_mode>:
}
 8002990:	f890 0090 	ldrb.w	r0, [r0, #144]	; 0x90
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop

08002998 <lr1110_hal_set_operating_mode>:
    ( ( lr1110_t* ) context )->op_mode = op_mode;
 8002998:	f880 1090 	strb.w	r1, [r0, #144]	; 0x90
        GpioWrite( &DbgPinTx, 0 );
        GpioWrite( &DbgPinRx, 0 );
        break;
    }
#endif
}
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop

080029a0 <RtcGetCalendarValue>:

  return( ( uint32_t )( calendarValue - RtcTimerContext.Time ) );
}

static uint64_t RtcGetCalendarValue( RTC_DateTypeDef* date, RTC_TimeTypeDef* time )
{
 80029a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t seconds;

    // Make sure it is correct due to asynchronus nature of RTC
    do
    {
        firstRead = RTC->SSR;
 80029a4:	4d29      	ldr	r5, [pc, #164]	; (8002a4c <RtcGetCalendarValue+0xac>)
        HAL_RTC_GetDate( &RtcHandle, date, RTC_FORMAT_BIN );
 80029a6:	4c2a      	ldr	r4, [pc, #168]	; (8002a50 <RtcGetCalendarValue+0xb0>)
{
 80029a8:	4680      	mov	r8, r0
 80029aa:	460f      	mov	r7, r1
        HAL_RTC_GetDate( &RtcHandle, date, RTC_FORMAT_BIN );
 80029ac:	2200      	movs	r2, #0
 80029ae:	4641      	mov	r1, r8
 80029b0:	4620      	mov	r0, r4
        firstRead = RTC->SSR;
 80029b2:	6aae      	ldr	r6, [r5, #40]	; 0x28
        HAL_RTC_GetDate( &RtcHandle, date, RTC_FORMAT_BIN );
 80029b4:	f00c fb96 	bl	800f0e4 <HAL_RTC_GetDate>
        HAL_RTC_GetTime( &RtcHandle, time, RTC_FORMAT_BIN );
 80029b8:	2200      	movs	r2, #0
 80029ba:	4639      	mov	r1, r7
 80029bc:	4620      	mov	r0, r4
 80029be:	f00c fb53 	bl	800f068 <HAL_RTC_GetTime>
    }while( firstRead != RTC->SSR );
 80029c2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80029c4:	42b3      	cmp	r3, r6
 80029c6:	d1f1      	bne.n	80029ac <RtcGetCalendarValue+0xc>
    // Calculte amount of elapsed days since 01/01/2000
    seconds = DIVC( ( DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR ) * date->Year , 4 );

    correction = ( ( date->Year % 4 ) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM;

    seconds += ( DIVC( ( date->Month-1 ) * ( 30 + 31 ), 2 ) - ( ( ( correction >> ( ( date->Month - 1 ) * 2 ) ) & 0x03 ) ) );
 80029c8:	f898 4001 	ldrb.w	r4, [r8, #1]
    seconds = DIVC( ( DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR ) * date->Year , 4 );
 80029cc:	f898 1003 	ldrb.w	r1, [r8, #3]

    seconds += ( date->Date -1 );
 80029d0:	f898 2002 	ldrb.w	r2, [r8, #2]
    correction = ( ( date->Year % 4 ) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM;
 80029d4:	f8df c084 	ldr.w	ip, [pc, #132]	; 8002a5c <RtcGetCalendarValue+0xbc>
 80029d8:	481e      	ldr	r0, [pc, #120]	; (8002a54 <RtcGetCalendarValue+0xb4>)
    seconds += ( DIVC( ( date->Month-1 ) * ( 30 + 31 ), 2 ) - ( ( ( correction >> ( ( date->Month - 1 ) * 2 ) ) & 0x03 ) ) );
 80029da:	3c01      	subs	r4, #1
 80029dc:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
    seconds = DIVC( ( DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR ) * date->Year , 4 );
 80029e0:	f240 56b5 	movw	r6, #1461	; 0x5b5
    correction = ( ( date->Year % 4 ) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM;
 80029e4:	f011 0f03 	tst.w	r1, #3
    seconds += ( DIVC( ( date->Month-1 ) * ( 30 + 31 ), 2 ) - ( ( ( correction >> ( ( date->Month - 1 ) * 2 ) ) & 0x03 ) ) );
 80029e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    seconds = DIVC( ( DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR ) * date->Year , 4 );
 80029ec:	fb06 f601 	mul.w	r6, r6, r1

    // Convert from days to seconds
    seconds *= SECONDS_IN_1DAY;

    seconds += ( ( uint32_t )time->Seconds + 
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
 80029f0:	7879      	ldrb	r1, [r7, #1]
    seconds += ( DIVC( ( date->Month-1 ) * ( 30 + 31 ), 2 ) - ( ( ( correction >> ( ( date->Month - 1 ) * 2 ) ) & 0x03 ) ) );
 80029f2:	f103 0301 	add.w	r3, r3, #1
 80029f6:	f102 32ff 	add.w	r2, r2, #4294967295
    seconds = DIVC( ( DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR ) * date->Year , 4 );
 80029fa:	f106 0603 	add.w	r6, r6, #3
    correction = ( ( date->Year % 4 ) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM;
 80029fe:	bf18      	it	ne
 8002a00:	4660      	movne	r0, ip
    seconds += ( DIVC( ( date->Month-1 ) * ( 30 + 31 ), 2 ) - ( ( ( correction >> ( ( date->Month - 1 ) * 2 ) ) & 0x03 ) ) );
 8002a02:	0065      	lsls	r5, r4, #1
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
 8002a04:	ebc1 1401 	rsb	r4, r1, r1, lsl #4
    seconds += ( DIVC( ( date->Month-1 ) * ( 30 + 31 ), 2 ) - ( ( ( correction >> ( ( date->Month - 1 ) * 2 ) ) & 0x03 ) ) );
 8002a08:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
 8002a0c:	eb02 0396 	add.w	r3, r2, r6, lsr #2
                 ( ( uint32_t )time->Hours * SECONDS_IN_1HOUR ) ) ;
 8002a10:	783e      	ldrb	r6, [r7, #0]
    seconds += ( DIVC( ( date->Month-1 ) * ( 30 + 31 ), 2 ) - ( ( ( correction >> ( ( date->Month - 1 ) * 2 ) ) & 0x03 ) ) );
 8002a12:	fa20 f205 	lsr.w	r2, r0, r5
                 ( ( uint32_t )time->Hours * SECONDS_IN_1HOUR ) ) ;
 8002a16:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
    seconds += ( ( uint32_t )time->Seconds + 
 8002a1a:	78b8      	ldrb	r0, [r7, #2]

    calendarValue = ( ( ( uint64_t )seconds ) << N_PREDIV_S ) + ( PREDIV_S - time->SubSeconds );
 8002a1c:	687d      	ldr	r5, [r7, #4]
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
 8002a1e:	00a4      	lsls	r4, r4, #2
 8002a20:	eb03 0361 	add.w	r3, r3, r1, asr #1
    seconds += ( DIVC( ( date->Month-1 ) * ( 30 + 31 ), 2 ) - ( ( ( correction >> ( ( date->Month - 1 ) * 2 ) ) & 0x03 ) ) );
 8002a24:	f002 0203 	and.w	r2, r2, #3
    seconds *= SECONDS_IN_1DAY;
 8002a28:	490b      	ldr	r1, [pc, #44]	; (8002a58 <RtcGetCalendarValue+0xb8>)
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
 8002a2a:	fb0c 4406 	mla	r4, ip, r6, r4
 8002a2e:	4404      	add	r4, r0
    seconds += ( date->Date -1 );
 8002a30:	1a9b      	subs	r3, r3, r2
    seconds += ( ( uint32_t )time->Seconds + 
 8002a32:	fb01 4303 	mla	r3, r1, r3, r4
    calendarValue = ( ( ( uint64_t )seconds ) << N_PREDIV_S ) + ( PREDIV_S - time->SubSeconds );
 8002a36:	f5c5 757f 	rsb	r5, r5, #1020	; 0x3fc
 8002a3a:	3503      	adds	r5, #3
 8002a3c:	0298      	lsls	r0, r3, #10
 8002a3e:	0d99      	lsrs	r1, r3, #22

    return( calendarValue );
}
 8002a40:	1940      	adds	r0, r0, r5
 8002a42:	f141 0100 	adc.w	r1, r1, #0
 8002a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40002800 	.word	0x40002800
 8002a50:	200003b0 	.word	0x200003b0
 8002a54:	00445550 	.word	0x00445550
 8002a58:	00015180 	.word	0x00015180
 8002a5c:	0099aaa0 	.word	0x0099aaa0

08002a60 <RtcInit>:
{
 8002a60:	b570      	push	{r4, r5, r6, lr}
    if( RtcInitialized == false )
 8002a62:	4e24      	ldr	r6, [pc, #144]	; (8002af4 <RtcInit+0x94>)
 8002a64:	7834      	ldrb	r4, [r6, #0]
{
 8002a66:	b086      	sub	sp, #24
    if( RtcInitialized == false )
 8002a68:	b10c      	cbz	r4, 8002a6e <RtcInit+0xe>
}
 8002a6a:	b006      	add	sp, #24
 8002a6c:	bd70      	pop	{r4, r5, r6, pc}
 8002a6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        RtcHandle.Instance            = RTC;
 8002a72:	4d21      	ldr	r5, [pc, #132]	; (8002af8 <RtcInit+0x98>)
 8002a74:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002a78:	4920      	ldr	r1, [pc, #128]	; (8002afc <RtcInit+0x9c>)
        RtcHandle.Init.HourFormat     = RTC_HOURFORMAT_24;
 8002a7a:	606c      	str	r4, [r5, #4]
 8002a7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        HAL_RTC_Init( &RtcHandle );
 8002a84:	4628      	mov	r0, r5
        RtcHandle.Init.AsynchPrediv   = PREDIV_A;  // RTC_ASYNCH_PREDIV;
 8002a86:	221f      	movs	r2, #31
        RtcHandle.Init.SynchPrediv    = PREDIV_S;  // RTC_SYNCH_PREDIV;
 8002a88:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002a8c:	e9c5 2302 	strd	r2, r3, [r5, #8]
        RtcHandle.Init.OutPutType     = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002a90:	e9c5 4406 	strd	r4, r4, [r5, #24]
        RtcHandle.Init.OutPut         = RTC_OUTPUT_DISABLE;
 8002a94:	612c      	str	r4, [r5, #16]
        RtcHandle.Instance            = RTC;
 8002a96:	6029      	str	r1, [r5, #0]
        HAL_RTC_Init( &RtcHandle );
 8002a98:	f00c fe40 	bl	800f71c <HAL_RTC_Init>
        date.WeekDay                  = RTC_WEEKDAY_MONDAY;
 8002a9c:	4b18      	ldr	r3, [pc, #96]	; (8002b00 <RtcInit+0xa0>)
 8002a9e:	9300      	str	r3, [sp, #0]
        HAL_RTC_SetDate( &RtcHandle, &date, RTC_FORMAT_BIN );
 8002aa0:	4622      	mov	r2, r4
 8002aa2:	4669      	mov	r1, sp
 8002aa4:	4628      	mov	r0, r5
 8002aa6:	f00d f835 	bl	800fb14 <HAL_RTC_SetDate>
        HAL_RTC_SetTime( &RtcHandle, &time, RTC_FORMAT_BIN );
 8002aaa:	4622      	mov	r2, r4
 8002aac:	a901      	add	r1, sp, #4
 8002aae:	4628      	mov	r0, r5
        time.SubSeconds               = 0;
 8002ab0:	e9cd 4401 	strd	r4, r4, [sp, #4]
        time.DayLightSaving           = RTC_DAYLIGHTSAVING_NONE;
 8002ab4:	e9cd 4404 	strd	r4, r4, [sp, #16]
        HAL_RTC_SetTime( &RtcHandle, &time, RTC_FORMAT_BIN );
 8002ab8:	f00c feec 	bl	800f894 <HAL_RTC_SetTime>
        HAL_RTCEx_EnableBypassShadow( &RtcHandle );
 8002abc:	4628      	mov	r0, r5
 8002abe:	f00d fa01 	bl	800fec4 <HAL_RTCEx_EnableBypassShadow>
        HAL_NVIC_SetPriority( RTC_Alarm_IRQn, 1, 0 );
 8002ac2:	4622      	mov	r2, r4
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	2029      	movs	r0, #41	; 0x29
 8002ac8:	f00a fd02 	bl	800d4d0 <HAL_NVIC_SetPriority>
    RtcTimerContext.Time = ( uint32_t )RtcGetCalendarValue( &RtcTimerContext.CalendarDate, &RtcTimerContext.CalendarTime );
 8002acc:	4c0d      	ldr	r4, [pc, #52]	; (8002b04 <RtcInit+0xa4>)
        HAL_NVIC_EnableIRQ( RTC_Alarm_IRQn );
 8002ace:	2029      	movs	r0, #41	; 0x29
 8002ad0:	f00a fd48 	bl	800d564 <HAL_NVIC_EnableIRQ>
        HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 8002ad4:	4628      	mov	r0, r5
 8002ad6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ada:	f00c fd4b 	bl	800f574 <HAL_RTC_DeactivateAlarm>
    RtcTimerContext.Time = ( uint32_t )RtcGetCalendarValue( &RtcTimerContext.CalendarDate, &RtcTimerContext.CalendarTime );
 8002ade:	1d21      	adds	r1, r4, #4
 8002ae0:	f104 0018 	add.w	r0, r4, #24
 8002ae4:	f7ff ff5c 	bl	80029a0 <RtcGetCalendarValue>
        RtcInitialized = true;
 8002ae8:	2301      	movs	r3, #1
    RtcTimerContext.Time = ( uint32_t )RtcGetCalendarValue( &RtcTimerContext.CalendarDate, &RtcTimerContext.CalendarTime );
 8002aea:	6020      	str	r0, [r4, #0]
        RtcInitialized = true;
 8002aec:	7033      	strb	r3, [r6, #0]
}
 8002aee:	b006      	add	sp, #24
 8002af0:	bd70      	pop	{r4, r5, r6, pc}
 8002af2:	bf00      	nop
 8002af4:	200003d4 	.word	0x200003d4
 8002af8:	200003b0 	.word	0x200003b0
 8002afc:	40002800 	.word	0x40002800
 8002b00:	00010101 	.word	0x00010101
 8002b04:	200003d8 	.word	0x200003d8

08002b08 <RtcSetTimerContext>:
{
 8002b08:	b510      	push	{r4, lr}
    RtcTimerContext.Time = ( uint32_t )RtcGetCalendarValue( &RtcTimerContext.CalendarDate, &RtcTimerContext.CalendarTime );
 8002b0a:	4c04      	ldr	r4, [pc, #16]	; (8002b1c <RtcSetTimerContext+0x14>)
 8002b0c:	1d21      	adds	r1, r4, #4
 8002b0e:	f104 0018 	add.w	r0, r4, #24
 8002b12:	f7ff ff45 	bl	80029a0 <RtcGetCalendarValue>
 8002b16:	6020      	str	r0, [r4, #0]
}
 8002b18:	bd10      	pop	{r4, pc}
 8002b1a:	bf00      	nop
 8002b1c:	200003d8 	.word	0x200003d8

08002b20 <RtcGetTimerContext>:
    return RtcTimerContext.Time;
 8002b20:	4b01      	ldr	r3, [pc, #4]	; (8002b28 <RtcGetTimerContext+0x8>)
}
 8002b22:	6818      	ldr	r0, [r3, #0]
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	200003d8 	.word	0x200003d8

08002b2c <RtcGetMinimumTimeout>:
}
 8002b2c:	2003      	movs	r0, #3
 8002b2e:	4770      	bx	lr

08002b30 <RtcMs2Tick>:
{
 8002b30:	b508      	push	{r3, lr}
 8002b32:	4601      	mov	r1, r0
    return ( uint32_t )( ( ( ( uint64_t )milliseconds ) * CONV_DENOM ) / CONV_NUMER );
 8002b34:	227d      	movs	r2, #125	; 0x7d
 8002b36:	2300      	movs	r3, #0
 8002b38:	01c0      	lsls	r0, r0, #7
 8002b3a:	0e49      	lsrs	r1, r1, #25
 8002b3c:	f7fd fddc 	bl	80006f8 <__aeabi_uldivmod>
}
 8002b40:	bd08      	pop	{r3, pc}
 8002b42:	bf00      	nop

08002b44 <RtcTick2Ms>:
    return ( ( seconds * 1000 ) + ( ( tick * 1000 ) >> N_PREDIV_S ) );
 8002b44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    tick = tick & PREDIV_S;
 8002b48:	f3c0 0209 	ubfx	r2, r0, #0, #10
    uint32_t seconds = tick >> N_PREDIV_S;
 8002b4c:	0a80      	lsrs	r0, r0, #10
    return ( ( seconds * 1000 ) + ( ( tick * 1000 ) >> N_PREDIV_S ) );
 8002b4e:	fb03 f202 	mul.w	r2, r3, r2
 8002b52:	fb03 f000 	mul.w	r0, r3, r0
}
 8002b56:	eb00 2092 	add.w	r0, r0, r2, lsr #10
 8002b5a:	4770      	bx	lr

08002b5c <RtcStopAlarm>:
{
 8002b5c:	b510      	push	{r4, lr}
    HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 8002b5e:	4c08      	ldr	r4, [pc, #32]	; (8002b80 <RtcStopAlarm+0x24>)
 8002b60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b64:	4620      	mov	r0, r4
 8002b66:	f00c fd05 	bl	800f574 <HAL_RTC_DeactivateAlarm>
    __HAL_RTC_ALARM_CLEAR_FLAG( &RtcHandle, RTC_FLAG_ALRAF );
 8002b6a:	6822      	ldr	r2, [r4, #0]
    __HAL_RTC_ALARM_EXTI_CLEAR_FLAG( );
 8002b6c:	4905      	ldr	r1, [pc, #20]	; (8002b84 <RtcStopAlarm+0x28>)
    __HAL_RTC_ALARM_CLEAR_FLAG( &RtcHandle, RTC_FLAG_ALRAF );
 8002b6e:	68d3      	ldr	r3, [r2, #12]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	f463 73c0 	orn	r3, r3, #384	; 0x180
    __HAL_RTC_ALARM_EXTI_CLEAR_FLAG( );
 8002b76:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    __HAL_RTC_ALARM_CLEAR_FLAG( &RtcHandle, RTC_FLAG_ALRAF );
 8002b7a:	60d3      	str	r3, [r2, #12]
    __HAL_RTC_ALARM_EXTI_CLEAR_FLAG( );
 8002b7c:	60c8      	str	r0, [r1, #12]
}
 8002b7e:	bd10      	pop	{r4, pc}
 8002b80:	200003b0 	.word	0x200003b0
 8002b84:	58000800 	.word	0x58000800

08002b88 <RtcStartAlarm>:
{
 8002b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    RTC_TimeTypeDef time = RtcTimerContext.CalendarTime;
 8002b8c:	4b4f      	ldr	r3, [pc, #316]	; (8002ccc <RtcStartAlarm+0x144>)
{
 8002b8e:	b083      	sub	sp, #12
    RTC_TimeTypeDef time = RtcTimerContext.CalendarTime;
 8002b90:	689a      	ldr	r2, [r3, #8]
    RTC_DateTypeDef date = RtcTimerContext.CalendarDate;
 8002b92:	f893 b01a 	ldrb.w	fp, [r3, #26]
    RTC_TimeTypeDef time = RtcTimerContext.CalendarTime;
 8002b96:	9201      	str	r2, [sp, #4]
{
 8002b98:	4682      	mov	sl, r0
    RTC_TimeTypeDef time = RtcTimerContext.CalendarTime;
 8002b9a:	f893 9004 	ldrb.w	r9, [r3, #4]
 8002b9e:	795c      	ldrb	r4, [r3, #5]
 8002ba0:	f893 8006 	ldrb.w	r8, [r3, #6]
 8002ba4:	79dd      	ldrb	r5, [r3, #7]
    RTC_DateTypeDef date = RtcTimerContext.CalendarDate;
 8002ba6:	7e5e      	ldrb	r6, [r3, #25]
 8002ba8:	7edf      	ldrb	r7, [r3, #27]
    RtcStopAlarm( );
 8002baa:	f7ff ffd7 	bl	8002b5c <RtcStopAlarm>
    rtcAlarmSubSeconds =  PREDIV_S - time.SubSeconds;
 8002bae:	9a01      	ldr	r2, [sp, #4]
    while( timeout >= TM_SECONDS_IN_1DAY )
 8002bb0:	4847      	ldr	r0, [pc, #284]	; (8002cd0 <RtcStartAlarm+0x148>)
    rtcAlarmSubSeconds =  PREDIV_S - time.SubSeconds;
 8002bb2:	f5c2 7e7f 	rsb	lr, r2, #1020	; 0x3fc
 8002bb6:	f10e 0e03 	add.w	lr, lr, #3
    rtcAlarmSubSeconds += ( timeout & PREDIV_S );
 8002bba:	f3ca 0209 	ubfx	r2, sl, #0, #10
 8002bbe:	fa12 fe8e 	uxtah	lr, r2, lr
    while( timeout >= TM_SECONDS_IN_1DAY )
 8002bc2:	ebb0 2f9a 	cmp.w	r0, sl, lsr #10
    rtcAlarmDays =  date.Date;
 8002bc6:	fa1f fc8b 	uxth.w	ip, fp
    rtcAlarmSubSeconds += ( timeout & PREDIV_S );
 8002bca:	fa1f fe8e 	uxth.w	lr, lr
    timeout >>= N_PREDIV_S;
 8002bce:	ea4f 229a 	mov.w	r2, sl, lsr #10
    while( timeout >= TM_SECONDS_IN_1DAY )
 8002bd2:	d209      	bcs.n	8002be8 <RtcStartAlarm+0x60>
        timeout -= TM_SECONDS_IN_1DAY;
 8002bd4:	f5a2 32a8 	sub.w	r2, r2, #86016	; 0x15000
 8002bd8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
        rtcAlarmDays++;
 8002bdc:	f10c 0101 	add.w	r1, ip, #1
    while( timeout >= TM_SECONDS_IN_1DAY )
 8002be0:	4282      	cmp	r2, r0
        rtcAlarmDays++;
 8002be2:	fa1f fc81 	uxth.w	ip, r1
    while( timeout >= TM_SECONDS_IN_1DAY )
 8002be6:	d8f5      	bhi.n	8002bd4 <RtcStartAlarm+0x4c>
    while( timeout >= TM_SECONDS_IN_1HOUR )
 8002be8:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
    rtcAlarmHours = time.Hours;
 8002bec:	fa1f f389 	uxth.w	r3, r9
    while( timeout >= TM_SECONDS_IN_1HOUR )
 8002bf0:	d30b      	bcc.n	8002c0a <RtcStartAlarm+0x82>
        timeout -= TM_SECONDS_IN_1HOUR;
 8002bf2:	f5a2 6261 	sub.w	r2, r2, #3600	; 0xe10
        rtcAlarmHours++;
 8002bf6:	3301      	adds	r3, #1
    while( timeout >= TM_SECONDS_IN_1HOUR )
 8002bf8:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
        rtcAlarmHours++;
 8002bfc:	b29b      	uxth	r3, r3
    while( timeout >= TM_SECONDS_IN_1HOUR )
 8002bfe:	d2f8      	bcs.n	8002bf2 <RtcStartAlarm+0x6a>
    while( timeout >= TM_SECONDS_IN_1MINUTE )
 8002c00:	2a3b      	cmp	r2, #59	; 0x3b
        rtcAlarmMinutes++;
 8002c02:	b2a4      	uxth	r4, r4
    while( timeout >= TM_SECONDS_IN_1MINUTE )
 8002c04:	d904      	bls.n	8002c10 <RtcStartAlarm+0x88>
        rtcAlarmMinutes++;
 8002c06:	3401      	adds	r4, #1
        timeout -= TM_SECONDS_IN_1MINUTE;
 8002c08:	3a3c      	subs	r2, #60	; 0x3c
    while( timeout >= TM_SECONDS_IN_1MINUTE )
 8002c0a:	2a3b      	cmp	r2, #59	; 0x3b
        rtcAlarmMinutes++;
 8002c0c:	b2a4      	uxth	r4, r4
    while( timeout >= TM_SECONDS_IN_1MINUTE )
 8002c0e:	d8fa      	bhi.n	8002c06 <RtcStartAlarm+0x7e>
    rtcAlarmSeconds =  time.Seconds + timeout;
 8002c10:	4442      	add	r2, r8
    while( rtcAlarmSubSeconds >= ( PREDIV_S + 1 ) )
 8002c12:	f5be 6f80 	cmp.w	lr, #1024	; 0x400
    rtcAlarmSeconds =  time.Seconds + timeout;
 8002c16:	b292      	uxth	r2, r2
    while( rtcAlarmSubSeconds >= ( PREDIV_S + 1 ) )
 8002c18:	d30d      	bcc.n	8002c36 <RtcStartAlarm+0xae>
 8002c1a:	f5ae 6180 	sub.w	r1, lr, #1024	; 0x400
 8002c1e:	f3c1 2185 	ubfx	r1, r1, #10, #6
 8002c22:	3101      	adds	r1, #1
 8002c24:	440a      	add	r2, r1
 8002c26:	b292      	uxth	r2, r2
 8002c28:	f3ce 0e09 	ubfx	lr, lr, #0, #10
    while( rtcAlarmSeconds >= TM_SECONDS_IN_1MINUTE )
 8002c2c:	e003      	b.n	8002c36 <RtcStartAlarm+0xae>
        rtcAlarmSeconds -= TM_SECONDS_IN_1MINUTE;
 8002c2e:	3a3c      	subs	r2, #60	; 0x3c
        rtcAlarmMinutes++;
 8002c30:	3401      	adds	r4, #1
        rtcAlarmSeconds -= TM_SECONDS_IN_1MINUTE;
 8002c32:	b292      	uxth	r2, r2
        rtcAlarmMinutes++;
 8002c34:	b2a4      	uxth	r4, r4
    while( rtcAlarmSeconds >= TM_SECONDS_IN_1MINUTE )
 8002c36:	2a3b      	cmp	r2, #59	; 0x3b
 8002c38:	d8f9      	bhi.n	8002c2e <RtcStartAlarm+0xa6>
    while( rtcAlarmMinutes >= TM_MINUTES_IN_1HOUR )
 8002c3a:	2c3b      	cmp	r4, #59	; 0x3b
 8002c3c:	d90d      	bls.n	8002c5a <RtcStartAlarm+0xd2>
        rtcAlarmMinutes -= TM_MINUTES_IN_1HOUR;
 8002c3e:	3c3c      	subs	r4, #60	; 0x3c
 8002c40:	b2a4      	uxth	r4, r4
        rtcAlarmHours++;
 8002c42:	3301      	adds	r3, #1
    while( rtcAlarmMinutes >= TM_MINUTES_IN_1HOUR )
 8002c44:	2c3b      	cmp	r4, #59	; 0x3b
        rtcAlarmHours++;
 8002c46:	b29b      	uxth	r3, r3
    while( rtcAlarmMinutes >= TM_MINUTES_IN_1HOUR )
 8002c48:	d8f9      	bhi.n	8002c3e <RtcStartAlarm+0xb6>
    while( rtcAlarmHours >= TM_HOURS_IN_1DAY )
 8002c4a:	2b17      	cmp	r3, #23
 8002c4c:	d907      	bls.n	8002c5e <RtcStartAlarm+0xd6>
        rtcAlarmHours -= TM_HOURS_IN_1DAY;
 8002c4e:	3b18      	subs	r3, #24
        rtcAlarmDays++;
 8002c50:	f10c 0101 	add.w	r1, ip, #1
        rtcAlarmHours -= TM_HOURS_IN_1DAY;
 8002c54:	b29b      	uxth	r3, r3
        rtcAlarmDays++;
 8002c56:	fa1f fc81 	uxth.w	ip, r1
    while( rtcAlarmHours >= TM_HOURS_IN_1DAY )
 8002c5a:	2b17      	cmp	r3, #23
 8002c5c:	d8f7      	bhi.n	8002c4e <RtcStartAlarm+0xc6>
    if( date.Year % 4 == 0 ) 
 8002c5e:	07b9      	lsls	r1, r7, #30
 8002c60:	d127      	bne.n	8002cb2 <RtcStartAlarm+0x12a>
        if( rtcAlarmDays > DaysInMonthLeapYear[date.Month - 1] )
 8002c62:	491c      	ldr	r1, [pc, #112]	; (8002cd4 <RtcStartAlarm+0x14c>)
 8002c64:	440e      	add	r6, r1
 8002c66:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8002c6a:	4561      	cmp	r1, ip
 8002c6c:	d205      	bcs.n	8002c7a <RtcStartAlarm+0xf2>
            rtcAlarmDays = rtcAlarmDays % DaysInMonth[date.Month - 1];
 8002c6e:	fbbc f0f1 	udiv	r0, ip, r1
 8002c72:	fb01 c110 	mls	r1, r1, r0, ip
 8002c76:	fa1f fc81 	uxth.w	ip, r1
    RtcAlarm.AlarmTime.SubSeconds     = PREDIV_S - rtcAlarmSubSeconds;
 8002c7a:	4917      	ldr	r1, [pc, #92]	; (8002cd8 <RtcStartAlarm+0x150>)
    HAL_RTC_SetAlarm_IT( &RtcHandle, &RtcAlarm, RTC_FORMAT_BIN );
 8002c7c:	4817      	ldr	r0, [pc, #92]	; (8002cdc <RtcStartAlarm+0x154>)
    RtcAlarm.AlarmTime.Seconds        = rtcAlarmSeconds;
 8002c7e:	708a      	strb	r2, [r1, #2]
    RtcAlarm.AlarmTime.SubSeconds     = PREDIV_S - rtcAlarmSubSeconds;
 8002c80:	f5ce 767f 	rsb	r6, lr, #1020	; 0x3fc
 8002c84:	3603      	adds	r6, #3
    RtcAlarm.AlarmDateWeekDaySel      = RTC_ALARMDATEWEEKDAYSEL_DATE; 
 8002c86:	2200      	movs	r2, #0
    RtcAlarm.AlarmTime.SubSeconds     = PREDIV_S - rtcAlarmSubSeconds;
 8002c88:	604e      	str	r6, [r1, #4]
    RtcAlarm.AlarmTime.Minutes        = rtcAlarmMinutes;
 8002c8a:	704c      	strb	r4, [r1, #1]
    RtcAlarm.AlarmSubSecondMask       = ALARM_SUBSECOND_MASK; 
 8002c8c:	f04f 6620 	mov.w	r6, #167772160	; 0xa000000
    RtcAlarm.Alarm                    = RTC_ALARM_A;
 8002c90:	f44f 7480 	mov.w	r4, #256	; 0x100
    RtcAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002c94:	e9c1 2203 	strd	r2, r2, [r1, #12]
    RtcAlarm.AlarmTime.Hours          = rtcAlarmHours;
 8002c98:	700b      	strb	r3, [r1, #0]
    RtcAlarm.AlarmDateWeekDay         = ( uint8_t )rtcAlarmDays;
 8002c9a:	f881 c020 	strb.w	ip, [r1, #32]
    RtcAlarm.AlarmTime.TimeFormat     = time.TimeFormat;
 8002c9e:	70cd      	strb	r5, [r1, #3]
    RtcAlarm.AlarmSubSecondMask       = ALARM_SUBSECOND_MASK; 
 8002ca0:	618e      	str	r6, [r1, #24]
    RtcAlarm.Alarm                    = RTC_ALARM_A;
 8002ca2:	624c      	str	r4, [r1, #36]	; 0x24
    RtcAlarm.AlarmDateWeekDaySel      = RTC_ALARMDATEWEEKDAYSEL_DATE; 
 8002ca4:	61ca      	str	r2, [r1, #28]
    RtcAlarm.AlarmMask                = RTC_ALARMMASK_NONE;
 8002ca6:	614a      	str	r2, [r1, #20]
}
 8002ca8:	b003      	add	sp, #12
 8002caa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    HAL_RTC_SetAlarm_IT( &RtcHandle, &RtcAlarm, RTC_FORMAT_BIN );
 8002cae:	f00c ba51 	b.w	800f154 <HAL_RTC_SetAlarm_IT>
        if( rtcAlarmDays > DaysInMonth[date.Month - 1] )
 8002cb2:	490b      	ldr	r1, [pc, #44]	; (8002ce0 <RtcStartAlarm+0x158>)
 8002cb4:	440e      	add	r6, r1
 8002cb6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8002cba:	4561      	cmp	r1, ip
 8002cbc:	d2dd      	bcs.n	8002c7a <RtcStartAlarm+0xf2>
            rtcAlarmDays = rtcAlarmDays % DaysInMonth[date.Month - 1];
 8002cbe:	fbbc f0f1 	udiv	r0, ip, r1
 8002cc2:	fb01 c110 	mls	r1, r1, r0, ip
 8002cc6:	fa1f fc81 	uxth.w	ip, r1
 8002cca:	e7d6      	b.n	8002c7a <RtcStartAlarm+0xf2>
 8002ccc:	200003d8 	.word	0x200003d8
 8002cd0:	0001517f 	.word	0x0001517f
 8002cd4:	08014b38 	.word	0x08014b38
 8002cd8:	20000388 	.word	0x20000388
 8002cdc:	200003b0 	.word	0x200003b0
 8002ce0:	08014b2c 	.word	0x08014b2c

08002ce4 <RtcSetAlarm>:
{
 8002ce4:	b510      	push	{r4, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	4604      	mov	r4, r0
  uint32_t calendarValue = ( uint32_t )RtcGetCalendarValue( &date, &time );
 8002cea:	a901      	add	r1, sp, #4
 8002cec:	4668      	mov	r0, sp
 8002cee:	f7ff fe57 	bl	80029a0 <RtcGetCalendarValue>
  return( ( uint32_t )( calendarValue - RtcTimerContext.Time ) );
 8002cf2:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <RtcSetAlarm+0x30>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
    if( ( int64_t )MIN_ALARM_DELAY < ( int64_t )( timeout - RtcGetTimerElapsedTime( ) ) )
 8002cf6:	4423      	add	r3, r4
 8002cf8:	1a1b      	subs	r3, r3, r0
 8002cfa:	2b03      	cmp	r3, #3
        LpmSetStopMode( LPM_RTC_ID, LPM_ENABLE );
 8002cfc:	bf8c      	ite	hi
 8002cfe:	2100      	movhi	r1, #0
        LpmSetStopMode( LPM_RTC_ID, LPM_DISABLE );
 8002d00:	2101      	movls	r1, #1
 8002d02:	2004      	movs	r0, #4
 8002d04:	f7ff fc74 	bl	80025f0 <LpmSetStopMode>
    RtcStartAlarm( timeout );
 8002d08:	4620      	mov	r0, r4
 8002d0a:	f7ff ff3d 	bl	8002b88 <RtcStartAlarm>
}
 8002d0e:	b006      	add	sp, #24
 8002d10:	bd10      	pop	{r4, pc}
 8002d12:	bf00      	nop
 8002d14:	200003d8 	.word	0x200003d8

08002d18 <RtcGetTimerValue>:
{
 8002d18:	b500      	push	{lr}
 8002d1a:	b087      	sub	sp, #28
    uint32_t calendarValue = ( uint32_t )RtcGetCalendarValue( &date, &time );
 8002d1c:	a901      	add	r1, sp, #4
 8002d1e:	4668      	mov	r0, sp
 8002d20:	f7ff fe3e 	bl	80029a0 <RtcGetCalendarValue>
}
 8002d24:	b007      	add	sp, #28
 8002d26:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d2a:	bf00      	nop

08002d2c <RtcGetTimerElapsedTime>:
{
 8002d2c:	b500      	push	{lr}
 8002d2e:	b087      	sub	sp, #28
  uint32_t calendarValue = ( uint32_t )RtcGetCalendarValue( &date, &time );
 8002d30:	a901      	add	r1, sp, #4
 8002d32:	4668      	mov	r0, sp
 8002d34:	f7ff fe34 	bl	80029a0 <RtcGetCalendarValue>
  return( ( uint32_t )( calendarValue - RtcTimerContext.Time ) );
 8002d38:	4b02      	ldr	r3, [pc, #8]	; (8002d44 <RtcGetTimerElapsedTime+0x18>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
}
 8002d3c:	1ac0      	subs	r0, r0, r3
 8002d3e:	b007      	add	sp, #28
 8002d40:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d44:	200003d8 	.word	0x200003d8

08002d48 <RtcGetCalendarTime>:

uint32_t RtcGetCalendarTime( uint16_t *milliseconds )
{
 8002d48:	b510      	push	{r4, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	4604      	mov	r4, r0
    RTC_TimeTypeDef time ;
    RTC_DateTypeDef date;
    uint32_t ticks;

    uint64_t calendarValue = RtcGetCalendarValue( &date, &time );
 8002d4e:	a901      	add	r1, sp, #4
 8002d50:	4668      	mov	r0, sp
 8002d52:	f7ff fe25 	bl	80029a0 <RtcGetCalendarValue>
    return ( ( seconds * 1000 ) + ( ( tick * 1000 ) >> N_PREDIV_S ) );
 8002d56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    uint64_t calendarValue = RtcGetCalendarValue( &date, &time );
 8002d5a:	4603      	mov	r3, r0

    uint32_t seconds = ( uint32_t )( calendarValue >> N_PREDIV_S );

    ticks =  ( uint32_t )calendarValue & PREDIV_S;
 8002d5c:	f3c0 0009 	ubfx	r0, r0, #0, #10
    return ( ( seconds * 1000 ) + ( ( tick * 1000 ) >> N_PREDIV_S ) );
 8002d60:	fb02 f200 	mul.w	r2, r2, r0
    uint32_t seconds = ( uint32_t )( calendarValue >> N_PREDIV_S );
 8002d64:	0a9b      	lsrs	r3, r3, #10
    return ( ( seconds * 1000 ) + ( ( tick * 1000 ) >> N_PREDIV_S ) );
 8002d66:	0a92      	lsrs	r2, r2, #10

    *milliseconds = RtcTick2Ms( ticks );

    return seconds;
}
 8002d68:	ea43 5081 	orr.w	r0, r3, r1, lsl #22
    *milliseconds = RtcTick2Ms( ticks );
 8002d6c:	8022      	strh	r2, [r4, #0]
}
 8002d6e:	b006      	add	sp, #24
 8002d70:	bd10      	pop	{r4, pc}
 8002d72:	bf00      	nop

08002d74 <HAL_RTC_AlarmAEventCallback>:
 *
 * \param [IN] hrtc RTC handle
 */
void HAL_RTC_AlarmAEventCallback( RTC_HandleTypeDef *hrtc )
{
    TimerIrqHandler( );
 8002d74:	f009 bc36 	b.w	800c5e4 <TimerIrqHandler>

08002d78 <RtcBkupWrite>:
}

void RtcBkupWrite( uint32_t data0, uint32_t data1 )
{
 8002d78:	b538      	push	{r3, r4, r5, lr}
    HAL_RTCEx_BKUPWrite( &RtcHandle, RTC_BKP_DR0, data0 );
 8002d7a:	4d07      	ldr	r5, [pc, #28]	; (8002d98 <RtcBkupWrite+0x20>)
{
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460c      	mov	r4, r1
    HAL_RTCEx_BKUPWrite( &RtcHandle, RTC_BKP_DR0, data0 );
 8002d80:	4628      	mov	r0, r5
 8002d82:	2100      	movs	r1, #0
 8002d84:	f00d f870 	bl	800fe68 <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite( &RtcHandle, RTC_BKP_DR1, data1 );
 8002d88:	4622      	mov	r2, r4
 8002d8a:	4628      	mov	r0, r5
 8002d8c:	2101      	movs	r1, #1
}
 8002d8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_RTCEx_BKUPWrite( &RtcHandle, RTC_BKP_DR1, data1 );
 8002d92:	f00d b869 	b.w	800fe68 <HAL_RTCEx_BKUPWrite>
 8002d96:	bf00      	nop
 8002d98:	200003b0 	.word	0x200003b0

08002d9c <RtcBkupRead>:

void RtcBkupRead( uint32_t *data0, uint32_t *data1 )
{
 8002d9c:	b570      	push	{r4, r5, r6, lr}
  *data0 = HAL_RTCEx_BKUPRead( &RtcHandle, RTC_BKP_DR0 );
 8002d9e:	4e07      	ldr	r6, [pc, #28]	; (8002dbc <RtcBkupRead+0x20>)
{
 8002da0:	4605      	mov	r5, r0
 8002da2:	460c      	mov	r4, r1
  *data0 = HAL_RTCEx_BKUPRead( &RtcHandle, RTC_BKP_DR0 );
 8002da4:	4630      	mov	r0, r6
 8002da6:	2100      	movs	r1, #0
 8002da8:	f00d f876 	bl	800fe98 <HAL_RTCEx_BKUPRead>
  *data1 = HAL_RTCEx_BKUPRead( &RtcHandle, RTC_BKP_DR1 );
 8002dac:	2101      	movs	r1, #1
  *data0 = HAL_RTCEx_BKUPRead( &RtcHandle, RTC_BKP_DR0 );
 8002dae:	6028      	str	r0, [r5, #0]
  *data1 = HAL_RTCEx_BKUPRead( &RtcHandle, RTC_BKP_DR1 );
 8002db0:	4630      	mov	r0, r6
 8002db2:	f00d f871 	bl	800fe98 <HAL_RTCEx_BKUPRead>
 8002db6:	6020      	str	r0, [r4, #0]
}
 8002db8:	bd70      	pop	{r4, r5, r6, pc}
 8002dba:	bf00      	nop
 8002dbc:	200003b0 	.word	0x200003b0

08002dc0 <SpiInOut>:
}

extern SPI_HandleTypeDef hspi1;

uint16_t SpiInOut( Spi_t *obj, uint16_t outData )
{
 8002dc0:	b500      	push	{lr}
 8002dc2:	b087      	sub	sp, #28
//        assert_param( LMN_STATUS_ERROR );
//    }
//
//    __HAL_SPI_ENABLE( &SpiHandle[obj->SpiId] );

    CRITICAL_SECTION_BEGIN( );
 8002dc4:	a805      	add	r0, sp, #20
    uint8_t rxData = 0;
 8002dc6:	2300      	movs	r3, #0
{
 8002dc8:	f8ad 100e 	strh.w	r1, [sp, #14]
    uint8_t rxData = 0;
 8002dcc:	f88d 3013 	strb.w	r3, [sp, #19]
    CRITICAL_SECTION_BEGIN( );
 8002dd0:	f7ff fa5e 	bl	8002290 <BoardCriticalSectionBegin>

    HAL_SPI_TransmitReceive(&hspi1,  ( uint8_t* )&outData, &rxData, 1, HAL_MAX_DELAY);
 8002dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	f10d 0213 	add.w	r2, sp, #19
 8002dde:	2301      	movs	r3, #1
 8002de0:	f10d 010e 	add.w	r1, sp, #14
 8002de4:	4805      	ldr	r0, [pc, #20]	; (8002dfc <SpiInOut+0x3c>)
 8002de6:	f00d faa7 	bl	8010338 <HAL_SPI_TransmitReceive>

//    HAL_SPI_TransmitReceive( &SpiHandle[obj->SpiId], ( uint8_t* )&outData, &rxData, 1, HAL_MAX_DELAY );

    CRITICAL_SECTION_END( );
 8002dea:	a805      	add	r0, sp, #20
 8002dec:	f7ff fa56 	bl	800229c <BoardCriticalSectionEnd>

    return( rxData );
}
 8002df0:	f89d 0013 	ldrb.w	r0, [sp, #19]
 8002df4:	b007      	add	sp, #28
 8002df6:	f85d fb04 	ldr.w	pc, [sp], #4
 8002dfa:	bf00      	nop
 8002dfc:	20000970 	.word	0x20000970

08002e00 <srand1>:
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
}

void srand1( uint32_t seed )
{
    next = seed;
 8002e00:	4b01      	ldr	r3, [pc, #4]	; (8002e08 <srand1+0x8>)
 8002e02:	6018      	str	r0, [r3, #0]
}
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	2000000c 	.word	0x2000000c

08002e0c <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8002e0c:	b430      	push	{r4, r5}
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8002e0e:	4c0d      	ldr	r4, [pc, #52]	; (8002e44 <randr+0x38>)
 8002e10:	4d0d      	ldr	r5, [pc, #52]	; (8002e48 <randr+0x3c>)
 8002e12:	6822      	ldr	r2, [r4, #0]
 8002e14:	f243 0339 	movw	r3, #12345	; 0x3039
 8002e18:	fb05 3202 	mla	r2, r5, r2, r3
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	fba3 5302 	umull	r5, r3, r3, r2
 8002e22:	1ad5      	subs	r5, r2, r3
 8002e24:	eb03 0355 	add.w	r3, r3, r5, lsr #1
 8002e28:	0f9b      	lsrs	r3, r3, #30
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8002e2a:	1a09      	subs	r1, r1, r0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8002e2c:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8002e30:	3101      	adds	r1, #1
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8002e32:	1ad3      	subs	r3, r2, r3
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8002e34:	fb93 f5f1 	sdiv	r5, r3, r1
 8002e38:	fb01 3315 	mls	r3, r1, r5, r3
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8002e3c:	6022      	str	r2, [r4, #0]
}
 8002e3e:	4418      	add	r0, r3
 8002e40:	bc30      	pop	{r4, r5}
 8002e42:	4770      	bx	lr
 8002e44:	2000000c 	.word	0x2000000c
 8002e48:	41c64e6d 	.word	0x41c64e6d

08002e4c <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 8002e4c:	1e53      	subs	r3, r2, #1
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	b142      	cbz	r2, 8002e64 <memcpy1+0x18>
 8002e52:	3301      	adds	r3, #1
 8002e54:	18ca      	adds	r2, r1, r3
 8002e56:	3801      	subs	r0, #1
    {
        *dst++ = *src++;
 8002e58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e5c:	f800 3f01 	strb.w	r3, [r0, #1]!
    while( size-- )
 8002e60:	4291      	cmp	r1, r2
 8002e62:	d1f9      	bne.n	8002e58 <memcpy1+0xc>
    }
}
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop

08002e68 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
    while( size-- )
 8002e68:	b172      	cbz	r2, 8002e88 <memcpyr+0x20>
{
 8002e6a:	b410      	push	{r4}
 8002e6c:	1e54      	subs	r4, r2, #1
 8002e6e:	b2a4      	uxth	r4, r4
 8002e70:	3401      	adds	r4, #1
 8002e72:	440c      	add	r4, r1
 8002e74:	4402      	add	r2, r0
    {
        *dst-- = *src++;
 8002e76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e7a:	f802 3d01 	strb.w	r3, [r2, #-1]!
    while( size-- )
 8002e7e:	42a1      	cmp	r1, r4
 8002e80:	d1f9      	bne.n	8002e76 <memcpyr+0xe>
    }
}
 8002e82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop

08002e8c <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 8002e8c:	1e53      	subs	r3, r2, #1
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	b12a      	cbz	r2, 8002e9e <memset1+0x12>
 8002e92:	3301      	adds	r3, #1
 8002e94:	4403      	add	r3, r0
    {
        *dst++ = value;
 8002e96:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 8002e9a:	4298      	cmp	r0, r3
 8002e9c:	d1fb      	bne.n	8002e96 <memset1+0xa>
    }
}
 8002e9e:	4770      	bx	lr

08002ea0 <Crc32>:
    const uint32_t reversedPolynom = 0xEDB88320;

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 8002ea0:	b1d0      	cbz	r0, 8002ed8 <Crc32+0x38>
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 8002ea2:	b1d1      	cbz	r1, 8002eda <Crc32+0x3a>
{
 8002ea4:	b430      	push	{r4, r5}
 8002ea6:	1e4d      	subs	r5, r1, #1
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8002ea8:	490d      	ldr	r1, [pc, #52]	; (8002ee0 <Crc32+0x40>)
 8002eaa:	fa10 f585 	uxtah	r5, r0, r5
 8002eae:	1e44      	subs	r4, r0, #1
    uint32_t crc = 0xFFFFFFFF;
 8002eb0:	f04f 30ff 	mov.w	r0, #4294967295
        crc ^= ( uint32_t )buffer[i];
 8002eb4:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8002eb8:	2308      	movs	r3, #8
 8002eba:	4050      	eors	r0, r2
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8002ebc:	f340 0200 	sbfx	r2, r0, #0, #1
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	400a      	ands	r2, r1
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f6      	bne.n	8002ebc <Crc32+0x1c>
    for( uint16_t i = 0; i < length; ++i )
 8002ece:	42a5      	cmp	r5, r4
 8002ed0:	d1f0      	bne.n	8002eb4 <Crc32+0x14>
 8002ed2:	43c0      	mvns	r0, r0
        }
    }

    return ~crc;
}
 8002ed4:	bc30      	pop	{r4, r5}
 8002ed6:	4770      	bx	lr
 8002ed8:	4770      	bx	lr
    for( uint16_t i = 0; i < length; ++i )
 8002eda:	4608      	mov	r0, r1
    return ~crc;
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	edb88320 	.word	0xedb88320

08002ee4 <OnTxDone>:
        }
    }
}

void OnTxDone( void )
{
 8002ee4:	b508      	push	{r3, lr}
    Radio.Sleep( );
 8002ee6:	4b05      	ldr	r3, [pc, #20]	; (8002efc <OnTxDone+0x18>)
 8002ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eea:	4798      	blx	r3
    State = TX;
 8002eec:	4b04      	ldr	r3, [pc, #16]	; (8002f00 <OnTxDone+0x1c>)
    printf("OnTxDone\r\n");
 8002eee:	4805      	ldr	r0, [pc, #20]	; (8002f04 <OnTxDone+0x20>)
    State = TX;
 8002ef0:	2204      	movs	r2, #4
 8002ef2:	701a      	strb	r2, [r3, #0]
}
 8002ef4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    printf("OnTxDone\r\n");
 8002ef8:	f010 b8d2 	b.w	80130a0 <puts>
 8002efc:	08015848 	.word	0x08015848
 8002f00:	20000432 	.word	0x20000432
 8002f04:	08014b44 	.word	0x08014b44

08002f08 <OnTxTimeout>:

    printf("OnRxDone\r\n");
}

void OnTxTimeout( void )
{
 8002f08:	b508      	push	{r3, lr}
    Radio.Sleep( );
 8002f0a:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <OnTxTimeout+0x18>)
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	4798      	blx	r3
    State = TX_TIMEOUT;
 8002f10:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <OnTxTimeout+0x1c>)
    printf("OnTxTimeout\r\n");
 8002f12:	4805      	ldr	r0, [pc, #20]	; (8002f28 <OnTxTimeout+0x20>)
    State = TX_TIMEOUT;
 8002f14:	2205      	movs	r2, #5
 8002f16:	701a      	strb	r2, [r3, #0]
}
 8002f18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    printf("OnTxTimeout\r\n");
 8002f1c:	f010 b8c0 	b.w	80130a0 <puts>
 8002f20:	08015848 	.word	0x08015848
 8002f24:	20000432 	.word	0x20000432
 8002f28:	08014b50 	.word	0x08014b50

08002f2c <OnRxTimeout>:

void OnRxTimeout( void )
{
 8002f2c:	b508      	push	{r3, lr}
    Radio.Sleep( );
 8002f2e:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <OnRxTimeout+0x18>)
 8002f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f32:	4798      	blx	r3
    State = RX_TIMEOUT;
 8002f34:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <OnRxTimeout+0x1c>)
    printf("OnRxTimeout\r\n");
 8002f36:	4805      	ldr	r0, [pc, #20]	; (8002f4c <OnRxTimeout+0x20>)
    State = RX_TIMEOUT;
 8002f38:	2202      	movs	r2, #2
 8002f3a:	701a      	strb	r2, [r3, #0]
}
 8002f3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    printf("OnRxTimeout\r\n");
 8002f40:	f010 b8ae 	b.w	80130a0 <puts>
 8002f44:	08015848 	.word	0x08015848
 8002f48:	20000432 	.word	0x20000432
 8002f4c:	08014b60 	.word	0x08014b60

08002f50 <OnRxError>:

void OnRxError( void )
{
 8002f50:	b508      	push	{r3, lr}
    Radio.Sleep( );
 8002f52:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <OnRxError+0x18>)
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	4798      	blx	r3
    State = RX_ERROR;
 8002f58:	4b04      	ldr	r3, [pc, #16]	; (8002f6c <OnRxError+0x1c>)
    printf("OnRxError\r\n");
 8002f5a:	4805      	ldr	r0, [pc, #20]	; (8002f70 <OnRxError+0x20>)
    State = RX_ERROR;
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	701a      	strb	r2, [r3, #0]
}
 8002f60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    printf("OnRxError\r\n");
 8002f64:	f010 b89c 	b.w	80130a0 <puts>
 8002f68:	08015848 	.word	0x08015848
 8002f6c:	20000432 	.word	0x20000432
 8002f70:	08014b70 	.word	0x08014b70

08002f74 <OnPingPongTxNextPacketTimerEvent>:
{
 8002f74:	b508      	push	{r3, lr}
	TimerStop( &PingPongTxNextPacketTimer );
 8002f76:	4808      	ldr	r0, [pc, #32]	; (8002f98 <OnPingPongTxNextPacketTimerEvent+0x24>)
 8002f78:	f009 fb74 	bl	800c664 <TimerStop>
	TimerSetValue( &PingPongTxNextPacketTimer, PING_PONG_TX_PACKET_TIME );
 8002f7c:	4806      	ldr	r0, [pc, #24]	; (8002f98 <OnPingPongTxNextPacketTimerEvent+0x24>)
 8002f7e:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8002f82:	f009 fba9 	bl	800c6d8 <TimerSetValue>
	TimerStart( &PingPongTxNextPacketTimer );
 8002f86:	4804      	ldr	r0, [pc, #16]	; (8002f98 <OnPingPongTxNextPacketTimerEvent+0x24>)
 8002f88:	f009 facc 	bl	800c524 <TimerStart>
	if(State == LOWPOWER)
 8002f8c:	4b03      	ldr	r3, [pc, #12]	; (8002f9c <OnPingPongTxNextPacketTimerEvent+0x28>)
 8002f8e:	781a      	ldrb	r2, [r3, #0]
 8002f90:	b90a      	cbnz	r2, 8002f96 <OnPingPongTxNextPacketTimerEvent+0x22>
		State = FORCE_TX;
 8002f92:	2206      	movs	r2, #6
 8002f94:	701a      	strb	r2, [r3, #0]
}
 8002f96:	bd08      	pop	{r3, pc}
 8002f98:	200003f4 	.word	0x200003f4
 8002f9c:	20000432 	.word	0x20000432

08002fa0 <OnRxDone>:
{
 8002fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    Radio.Sleep( );
 8002fa2:	4c13      	ldr	r4, [pc, #76]	; (8002ff0 <OnRxDone+0x50>)
{
 8002fa4:	b083      	sub	sp, #12
    Radio.Sleep( );
 8002fa6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
{
 8002fa8:	9001      	str	r0, [sp, #4]
 8002faa:	460e      	mov	r6, r1
 8002fac:	461d      	mov	r5, r3
 8002fae:	4614      	mov	r4, r2
    Radio.Sleep( );
 8002fb0:	47b8      	blx	r7
    BufferSize = size;
 8002fb2:	4b10      	ldr	r3, [pc, #64]	; (8002ff4 <OnRxDone+0x54>)
    memcpy( Buffer, payload, BufferSize );
 8002fb4:	9901      	ldr	r1, [sp, #4]
 8002fb6:	4810      	ldr	r0, [pc, #64]	; (8002ff8 <OnRxDone+0x58>)
    BufferSize = size;
 8002fb8:	801e      	strh	r6, [r3, #0]
    memcpy( Buffer, payload, BufferSize );
 8002fba:	4632      	mov	r2, r6
 8002fbc:	f00f ffd4 	bl	8012f68 <memcpy>
    RssiValue = rssi;
 8002fc0:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <OnRxDone+0x5c>)
 8002fc2:	b260      	sxtb	r0, r4
 8002fc4:	7018      	strb	r0, [r3, #0]
    App_vLoraRssiSet(rssi);
 8002fc6:	f7fd feff 	bl	8000dc8 <App_vLoraRssiSet>
    App_vLoraSnrSet(snr);
 8002fca:	4628      	mov	r0, r5
 8002fcc:	f7fd ff02 	bl	8000dd4 <App_vLoraSnrSet>
    App_vLoraPingPongPacketCounterIncreament();
 8002fd0:	f7fd ff06 	bl	8000de0 <App_vLoraPingPongPacketCounterIncreament>
    SnrValue = snr;
 8002fd4:	4a0a      	ldr	r2, [pc, #40]	; (8003000 <OnRxDone+0x60>)
    State = RX;
 8002fd6:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <OnRxDone+0x64>)
    SnrValue = snr;
 8002fd8:	7015      	strb	r5, [r2, #0]
    State = RX;
 8002fda:	2201      	movs	r2, #1
 8002fdc:	701a      	strb	r2, [r3, #0]
    App_ReqAdvUpdateData();
 8002fde:	f7fd ff0d 	bl	8000dfc <App_ReqAdvUpdateData>
    printf("OnRxDone\r\n");
 8002fe2:	4809      	ldr	r0, [pc, #36]	; (8003008 <OnRxDone+0x68>)
}
 8002fe4:	b003      	add	sp, #12
 8002fe6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    printf("OnRxDone\r\n");
 8002fea:	f010 b859 	b.w	80130a0 <puts>
 8002fee:	bf00      	nop
 8002ff0:	08015848 	.word	0x08015848
 8002ff4:	20000010 	.word	0x20000010
 8002ff8:	200009d4 	.word	0x200009d4
 8002ffc:	20000430 	.word	0x20000430
 8003000:	20000431 	.word	0x20000431
 8003004:	20000432 	.word	0x20000432
 8003008:	08014b7c 	.word	0x08014b7c

0800300c <lorapingpong_init>:
{
 800300c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003010:	b08b      	sub	sp, #44	; 0x2c
    BoardInitMcu( );
 8003012:	f7ff f949 	bl	80022a8 <BoardInitMcu>
    printf("#=========== Enter to Lora Main ==========#\r\n");
 8003016:	483e      	ldr	r0, [pc, #248]	; (8003110 <lorapingpong_init+0x104>)
    Radio.Init( &RadioEvents );
 8003018:	4e3e      	ldr	r6, [pc, #248]	; (8003114 <lorapingpong_init+0x108>)
    RadioEvents.RxDone = OnRxDone;
 800301a:	4c3f      	ldr	r4, [pc, #252]	; (8003118 <lorapingpong_init+0x10c>)
    RadioEvents.TxDone = OnTxDone;
 800301c:	4d3f      	ldr	r5, [pc, #252]	; (800311c <lorapingpong_init+0x110>)
    printf("#=========== Enter to Lora Main ==========#\r\n");
 800301e:	f010 f83f 	bl	80130a0 <puts>
    RadioEvents.TxTimeout = OnTxTimeout;
 8003022:	493f      	ldr	r1, [pc, #252]	; (8003120 <lorapingpong_init+0x114>)
    RadioEvents.RxTimeout = OnRxTimeout;
 8003024:	4a3f      	ldr	r2, [pc, #252]	; (8003124 <lorapingpong_init+0x118>)
    RadioEvents.TxDone = OnTxDone;
 8003026:	4840      	ldr	r0, [pc, #256]	; (8003128 <lorapingpong_init+0x11c>)
    RadioEvents.RxError = OnRxError;
 8003028:	4b40      	ldr	r3, [pc, #256]	; (800312c <lorapingpong_init+0x120>)
    RadioEvents.TxDone = OnTxDone;
 800302a:	6005      	str	r5, [r0, #0]
    RadioEvents.TxTimeout = OnTxTimeout;
 800302c:	e9c0 1401 	strd	r1, r4, [r0, #4]
    RadioEvents.RxError = OnRxError;
 8003030:	e9c0 2303 	strd	r2, r3, [r0, #12]
    Radio.Init( &RadioEvents );
 8003034:	6833      	ldr	r3, [r6, #0]
 8003036:	4798      	blx	r3
    printf("Radio.Init\r\n");
 8003038:	483d      	ldr	r0, [pc, #244]	; (8003130 <lorapingpong_init+0x124>)
 800303a:	f010 f831 	bl	80130a0 <puts>
    Radio.SetChannel( RF_FREQUENCY );
 800303e:	68f3      	ldr	r3, [r6, #12]
 8003040:	483c      	ldr	r0, [pc, #240]	; (8003134 <lorapingpong_init+0x128>)
 8003042:	4798      	blx	r3
    printf("Radio.SetChannel\r\n");
 8003044:	483c      	ldr	r0, [pc, #240]	; (8003138 <lorapingpong_init+0x12c>)
 8003046:	f010 f82b 	bl	80130a0 <puts>
    Radio.SetTxConfig( MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 800304a:	69f2      	ldr	r2, [r6, #28]
 800304c:	2400      	movs	r4, #0
 800304e:	2501      	movs	r5, #1
 8003050:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003054:	f04f 0908 	mov.w	r9, #8
 8003058:	f04f 080c 	mov.w	r8, #12
 800305c:	e9cd 4307 	strd	r4, r3, [sp, #28]
 8003060:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8003064:	4623      	mov	r3, r4
 8003066:	4617      	mov	r7, r2
 8003068:	9403      	str	r4, [sp, #12]
 800306a:	4622      	mov	r2, r4
 800306c:	4628      	mov	r0, r5
 800306e:	2116      	movs	r1, #22
 8003070:	9504      	str	r5, [sp, #16]
 8003072:	9501      	str	r5, [sp, #4]
 8003074:	f8cd 9008 	str.w	r9, [sp, #8]
 8003078:	f8cd 8000 	str.w	r8, [sp]
 800307c:	47b8      	blx	r7
    Radio.SetRxConfig( MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 800307e:	2305      	movs	r3, #5
 8003080:	4642      	mov	r2, r8
 8003082:	4621      	mov	r1, r4
 8003084:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003088:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800308c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8003090:	e9cd 4900 	strd	r4, r9, [sp]
 8003094:	9403      	str	r4, [sp, #12]
 8003096:	9302      	str	r3, [sp, #8]
 8003098:	4628      	mov	r0, r5
 800309a:	462b      	mov	r3, r5
 800309c:	69b4      	ldr	r4, [r6, #24]
 800309e:	47a0      	blx	r4
    Radio.SetMaxPayloadLength( MODEM_LORA, BUFFER_SIZE );
 80030a0:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80030a2:	4628      	mov	r0, r5
 80030a4:	210a      	movs	r1, #10
 80030a6:	4798      	blx	r3
    printf("Radio Config\r\n");
 80030a8:	4824      	ldr	r0, [pc, #144]	; (800313c <lorapingpong_init+0x130>)
 80030aa:	f00f fff9 	bl	80130a0 <puts>
    if(App_u8GetDeviceIsMaster())
 80030ae:	f7fd fee3 	bl	8000e78 <App_u8GetDeviceIsMaster>
 80030b2:	b180      	cbz	r0, 80030d6 <lorapingpong_init+0xca>
    	Radio.Rx( RX_TIMEOUT_VALUE + RX_TIMEOUT_VALUE );
 80030b4:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80030b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80030ba:	4798      	blx	r3
    	u32RxWindowTimeout =  5 * RX_TIMEOUT_VALUE;
 80030bc:	4b20      	ldr	r3, [pc, #128]	; (8003140 <lorapingpong_init+0x134>)
    	printf("\r\n\r\n########### Master Mode #############\r\n");
 80030be:	4821      	ldr	r0, [pc, #132]	; (8003144 <lorapingpong_init+0x138>)
    	u32RxWindowTimeout =  5 * RX_TIMEOUT_VALUE;
 80030c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c4:	601a      	str	r2, [r3, #0]
    	printf("\r\n\r\n########### Master Mode #############\r\n");
 80030c6:	f00f ffeb 	bl	80130a0 <puts>
    printf("Radio Rx\r\n");
 80030ca:	481f      	ldr	r0, [pc, #124]	; (8003148 <lorapingpong_init+0x13c>)
}
 80030cc:	b00b      	add	sp, #44	; 0x2c
 80030ce:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    printf("Radio Rx\r\n");
 80030d2:	f00f bfe5 	b.w	80130a0 <puts>
    	u32RxWindowTimeout = RX_TIMEOUT_VALUE + 500;
 80030d6:	4b1a      	ldr	r3, [pc, #104]	; (8003140 <lorapingpong_init+0x134>)
    	State = FORCE_TX;
 80030d8:	4c1c      	ldr	r4, [pc, #112]	; (800314c <lorapingpong_init+0x140>)
	    TimerInit( &PingPongTxNextPacketTimer, OnPingPongTxNextPacketTimerEvent );
 80030da:	491d      	ldr	r1, [pc, #116]	; (8003150 <lorapingpong_init+0x144>)
 80030dc:	481d      	ldr	r0, [pc, #116]	; (8003154 <lorapingpong_init+0x148>)
    	u32RxWindowTimeout = RX_TIMEOUT_VALUE + 500;
 80030de:	f240 52dc 	movw	r2, #1500	; 0x5dc
    	State = FORCE_TX;
 80030e2:	2506      	movs	r5, #6
    	u32RxWindowTimeout = RX_TIMEOUT_VALUE + 500;
 80030e4:	601a      	str	r2, [r3, #0]
    	State = FORCE_TX;
 80030e6:	7025      	strb	r5, [r4, #0]
	    TimerInit( &PingPongTxNextPacketTimer, OnPingPongTxNextPacketTimerEvent );
 80030e8:	f009 fa14 	bl	800c514 <TimerInit>
		TimerSetValue( &PingPongTxNextPacketTimer, PING_PONG_TX_PACKET_TIME );
 80030ec:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80030f0:	4818      	ldr	r0, [pc, #96]	; (8003154 <lorapingpong_init+0x148>)
 80030f2:	f009 faf1 	bl	800c6d8 <TimerSetValue>
		TimerStart( &PingPongTxNextPacketTimer );
 80030f6:	4817      	ldr	r0, [pc, #92]	; (8003154 <lorapingpong_init+0x148>)
 80030f8:	f009 fa14 	bl	800c524 <TimerStart>
		printf("\r\n\r\n########### Slave Mode #############\r\n");
 80030fc:	4816      	ldr	r0, [pc, #88]	; (8003158 <lorapingpong_init+0x14c>)
 80030fe:	f00f ffcf 	bl	80130a0 <puts>
    printf("Radio Rx\r\n");
 8003102:	4811      	ldr	r0, [pc, #68]	; (8003148 <lorapingpong_init+0x13c>)
}
 8003104:	b00b      	add	sp, #44	; 0x2c
 8003106:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    printf("Radio Rx\r\n");
 800310a:	f00f bfc9 	b.w	80130a0 <puts>
 800310e:	bf00      	nop
 8003110:	08014b88 	.word	0x08014b88
 8003114:	08015848 	.word	0x08015848
 8003118:	08002fa1 	.word	0x08002fa1
 800311c:	08002ee5 	.word	0x08002ee5
 8003120:	08002f09 	.word	0x08002f09
 8003124:	08002f2d 	.word	0x08002f2d
 8003128:	2000040c 	.word	0x2000040c
 800312c:	08002f51 	.word	0x08002f51
 8003130:	08014bb8 	.word	0x08014bb8
 8003134:	338eda40 	.word	0x338eda40
 8003138:	08014bc4 	.word	0x08014bc4
 800313c:	08014bd8 	.word	0x08014bd8
 8003140:	20000434 	.word	0x20000434
 8003144:	08014be8 	.word	0x08014be8
 8003148:	08014c40 	.word	0x08014c40
 800314c:	20000432 	.word	0x20000432
 8003150:	08002f75 	.word	0x08002f75
 8003154:	200003f4 	.word	0x200003f4
 8003158:	08014c14 	.word	0x08014c14

0800315c <lorapingpong_process>:
{
 800315c:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( State )
 800315e:	4d71      	ldr	r5, [pc, #452]	; (8003324 <lorapingpong_process+0x1c8>)
 8003160:	782b      	ldrb	r3, [r5, #0]
 8003162:	3b01      	subs	r3, #1
{
 8003164:	b08d      	sub	sp, #52	; 0x34
 8003166:	2b05      	cmp	r3, #5
 8003168:	f200 80da 	bhi.w	8003320 <lorapingpong_process+0x1c4>
 800316c:	e8df f003 	tbb	[pc, r3]
 8003170:	2a030388 	.word	0x2a030388
 8003174:	644d      	.short	0x644d
    	printf("RX_TIMEOUT State\r\n");
 8003176:	486c      	ldr	r0, [pc, #432]	; (8003328 <lorapingpong_process+0x1cc>)
 8003178:	f00f ff92 	bl	80130a0 <puts>
    	if( App_u8GetDeviceIsMaster() )
 800317c:	f7fd fe7c 	bl	8000e78 <App_u8GetDeviceIsMaster>
 8003180:	2800      	cmp	r0, #0
 8003182:	f000 80bf 	beq.w	8003304 <lorapingpong_process+0x1a8>
    		Radio.SetRxConfig( MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 8003186:	2100      	movs	r1, #0
 8003188:	4c68      	ldr	r4, [pc, #416]	; (800332c <lorapingpong_process+0x1d0>)
 800318a:	9106      	str	r1, [sp, #24]
 800318c:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8003190:	e9cd 1103 	strd	r1, r1, [sp, #12]
 8003194:	2301      	movs	r3, #1
 8003196:	69a6      	ldr	r6, [r4, #24]
 8003198:	9309      	str	r3, [sp, #36]	; 0x24
 800319a:	2705      	movs	r7, #5
 800319c:	2208      	movs	r2, #8
 800319e:	9305      	str	r3, [sp, #20]
 80031a0:	4618      	mov	r0, r3
 80031a2:	9100      	str	r1, [sp, #0]
    		Radio.SetRxConfig( MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 80031a4:	e9cd 2701 	strd	r2, r7, [sp, #4]
 80031a8:	220c      	movs	r2, #12
 80031aa:	47b0      	blx	r6
    		 Radio.Rx( u32RxWindowTimeout );
 80031ac:	4a60      	ldr	r2, [pc, #384]	; (8003330 <lorapingpong_process+0x1d4>)
 80031ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80031b0:	6810      	ldr	r0, [r2, #0]
 80031b2:	4798      	blx	r3
		State = LOWPOWER;
 80031b4:	2300      	movs	r3, #0
 80031b6:	702b      	strb	r3, [r5, #0]
    if( Radio.IrqProcess != NULL )
 80031b8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80031ba:	b323      	cbz	r3, 8003206 <lorapingpong_process+0xaa>
}
 80031bc:	b00d      	add	sp, #52	; 0x34
 80031be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        Radio.IrqProcess( );
 80031c2:	4718      	bx	r3
    	Radio.SetRxConfig( MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 80031c4:	4c59      	ldr	r4, [pc, #356]	; (800332c <lorapingpong_process+0x1d0>)
    	printf("TX State\r\n");
 80031c6:	485b      	ldr	r0, [pc, #364]	; (8003334 <lorapingpong_process+0x1d8>)
 80031c8:	f00f ff6a 	bl	80130a0 <puts>
    	Radio.SetRxConfig( MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 80031cc:	69a1      	ldr	r1, [r4, #24]
 80031ce:	910b      	str	r1, [sp, #44]	; 0x2c
 80031d0:	2600      	movs	r6, #0
 80031d2:	2301      	movs	r3, #1
 80031d4:	2705      	movs	r7, #5
 80031d6:	2208      	movs	r2, #8
 80031d8:	e9cd 2701 	strd	r2, r7, [sp, #4]
 80031dc:	4618      	mov	r0, r3
 80031de:	9309      	str	r3, [sp, #36]	; 0x24
 80031e0:	9305      	str	r3, [sp, #20]
 80031e2:	4631      	mov	r1, r6
 80031e4:	220c      	movs	r2, #12
 80031e6:	e9cd 6607 	strd	r6, r6, [sp, #28]
 80031ea:	e9cd 6603 	strd	r6, r6, [sp, #12]
 80031ee:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80031f0:	9606      	str	r6, [sp, #24]
 80031f2:	9600      	str	r6, [sp, #0]
 80031f4:	47b8      	blx	r7
        Radio.Rx( u32RxWindowTimeout );
 80031f6:	4a4e      	ldr	r2, [pc, #312]	; (8003330 <lorapingpong_process+0x1d4>)
 80031f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80031fa:	6810      	ldr	r0, [r2, #0]
 80031fc:	4798      	blx	r3
    if( Radio.IrqProcess != NULL )
 80031fe:	6e23      	ldr	r3, [r4, #96]	; 0x60
        State = LOWPOWER;
 8003200:	702e      	strb	r6, [r5, #0]
    if( Radio.IrqProcess != NULL )
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1da      	bne.n	80031bc <lorapingpong_process+0x60>
}
 8003206:	b00d      	add	sp, #52	; 0x34
 8003208:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	printf("TX_TIMEOUT\r\n");
 800320a:	484b      	ldr	r0, [pc, #300]	; (8003338 <lorapingpong_process+0x1dc>)
 800320c:	f00f ff48 	bl	80130a0 <puts>
    	if(App_u8GetDeviceIsMaster())
 8003210:	f7fd fe32 	bl	8000e78 <App_u8GetDeviceIsMaster>
 8003214:	2800      	cmp	r0, #0
 8003216:	d1b6      	bne.n	8003186 <lorapingpong_process+0x2a>
    		Radio.SetRxConfig( MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 8003218:	4c44      	ldr	r4, [pc, #272]	; (800332c <lorapingpong_process+0x1d0>)
 800321a:	9008      	str	r0, [sp, #32]
 800321c:	2301      	movs	r3, #1
 800321e:	e9cd 0006 	strd	r0, r0, [sp, #24]
 8003222:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8003226:	9000      	str	r0, [sp, #0]
 8003228:	4601      	mov	r1, r0
 800322a:	69a6      	ldr	r6, [r4, #24]
 800322c:	9309      	str	r3, [sp, #36]	; 0x24
 800322e:	2705      	movs	r7, #5
 8003230:	2208      	movs	r2, #8
 8003232:	9305      	str	r3, [sp, #20]
 8003234:	4618      	mov	r0, r3
 8003236:	e7b5      	b.n	80031a4 <lorapingpong_process+0x48>
    	printf("## FORCE_TX ##\r\n");
 8003238:	4840      	ldr	r0, [pc, #256]	; (800333c <lorapingpong_process+0x1e0>)
		for( i = 4; i < BufferSize; i++ )
 800323a:	4e41      	ldr	r6, [pc, #260]	; (8003340 <lorapingpong_process+0x1e4>)
    	printf("## FORCE_TX ##\r\n");
 800323c:	f00f ff30 	bl	80130a0 <puts>
    	printf("Sending PING\r\n");
 8003240:	4840      	ldr	r0, [pc, #256]	; (8003344 <lorapingpong_process+0x1e8>)
 8003242:	f00f ff2d 	bl	80130a0 <puts>
		Buffer[0] = 'P';
 8003246:	4a40      	ldr	r2, [pc, #256]	; (8003348 <lorapingpong_process+0x1ec>)
		for( i = 4; i < BufferSize; i++ )
 8003248:	8831      	ldrh	r1, [r6, #0]
		Buffer[0] = 'P';
 800324a:	2050      	movs	r0, #80	; 0x50
		Buffer[1] = 'I';
 800324c:	2349      	movs	r3, #73	; 0x49
		Buffer[0] = 'P';
 800324e:	7010      	strb	r0, [r2, #0]
		Buffer[1] = 'I';
 8003250:	7053      	strb	r3, [r2, #1]
		Buffer[2] = 'N';
 8003252:	204e      	movs	r0, #78	; 0x4e
		Buffer[3] = 'G';
 8003254:	2347      	movs	r3, #71	; 0x47
		for( i = 4; i < BufferSize; i++ )
 8003256:	2904      	cmp	r1, #4
		Buffer[2] = 'N';
 8003258:	7090      	strb	r0, [r2, #2]
		Buffer[3] = 'G';
 800325a:	70d3      	strb	r3, [r2, #3]
		for( i = 4; i < BufferSize; i++ )
 800325c:	d907      	bls.n	800326e <lorapingpong_process+0x112>
 800325e:	3203      	adds	r2, #3
 8003260:	3904      	subs	r1, #4
 8003262:	2300      	movs	r3, #0
			Buffer[i] = i - 4;
 8003264:	f802 3f01 	strb.w	r3, [r2, #1]!
		for( i = 4; i < BufferSize; i++ )
 8003268:	3301      	adds	r3, #1
 800326a:	428b      	cmp	r3, r1
 800326c:	d1fa      	bne.n	8003264 <lorapingpong_process+0x108>
		Radio.Send( Buffer, BufferSize );
 800326e:	4c2f      	ldr	r4, [pc, #188]	; (800332c <lorapingpong_process+0x1d0>)
		DelayMs( 1 );
 8003270:	2001      	movs	r0, #1
 8003272:	f009 f913 	bl	800c49c <DelayMs>
		Radio.Send( Buffer, BufferSize );
 8003276:	7831      	ldrb	r1, [r6, #0]
 8003278:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800327a:	4833      	ldr	r0, [pc, #204]	; (8003348 <lorapingpong_process+0x1ec>)
 800327c:	4798      	blx	r3
 800327e:	e799      	b.n	80031b4 <lorapingpong_process+0x58>
    	printf("RX State:\r\n");
 8003280:	4832      	ldr	r0, [pc, #200]	; (800334c <lorapingpong_process+0x1f0>)
 8003282:	f00f ff0d 	bl	80130a0 <puts>
    	printf("Rx RSSI: %d, 0x%x,  SNR value: %d, 0x%x\r\n", RssiValue, RssiValue, SnrValue, SnrValue);
 8003286:	4a32      	ldr	r2, [pc, #200]	; (8003350 <lorapingpong_process+0x1f4>)
 8003288:	4b32      	ldr	r3, [pc, #200]	; (8003354 <lorapingpong_process+0x1f8>)
 800328a:	f992 2000 	ldrsb.w	r2, [r2]
 800328e:	f993 3000 	ldrsb.w	r3, [r3]
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	4611      	mov	r1, r2
 8003296:	4830      	ldr	r0, [pc, #192]	; (8003358 <lorapingpong_process+0x1fc>)
 8003298:	f00f fe7c 	bl	8012f94 <iprintf>
    	if(App_u8GetDeviceIsMaster())
 800329c:	f7fd fdec 	bl	8000e78 <App_u8GetDeviceIsMaster>
 80032a0:	b368      	cbz	r0, 80032fe <lorapingpong_process+0x1a2>
    		if(BufferSize > 0)
 80032a2:	4e27      	ldr	r6, [pc, #156]	; (8003340 <lorapingpong_process+0x1e4>)
 80032a4:	8833      	ldrh	r3, [r6, #0]
 80032a6:	b36b      	cbz	r3, 8003304 <lorapingpong_process+0x1a8>
				if( strncmp( ( const char* )Buffer, ( const char* )PingMsg, 4 ) == 0 )
 80032a8:	4f27      	ldr	r7, [pc, #156]	; (8003348 <lorapingpong_process+0x1ec>)
 80032aa:	492c      	ldr	r1, [pc, #176]	; (800335c <lorapingpong_process+0x200>)
 80032ac:	4638      	mov	r0, r7
 80032ae:	2204      	movs	r2, #4
 80032b0:	f00f ff1e 	bl	80130f0 <strncmp>
 80032b4:	4604      	mov	r4, r0
 80032b6:	bb28      	cbnz	r0, 8003304 <lorapingpong_process+0x1a8>
					printf("Ping string Match\r\n");
 80032b8:	4829      	ldr	r0, [pc, #164]	; (8003360 <lorapingpong_process+0x204>)
 80032ba:	f00f fef1 	bl	80130a0 <puts>
					Buffer[0] = 'P';
 80032be:	2350      	movs	r3, #80	; 0x50
					for( i = 4; i < BufferSize; i++ )
 80032c0:	8832      	ldrh	r2, [r6, #0]
					Buffer[0] = 'P';
 80032c2:	703b      	strb	r3, [r7, #0]
					Buffer[1] = 'O';
 80032c4:	234f      	movs	r3, #79	; 0x4f
 80032c6:	707b      	strb	r3, [r7, #1]
					Buffer[2] = 'N';
 80032c8:	234e      	movs	r3, #78	; 0x4e
 80032ca:	70bb      	strb	r3, [r7, #2]
					for( i = 4; i < BufferSize; i++ )
 80032cc:	2a04      	cmp	r2, #4
					Buffer[3] = 'G';
 80032ce:	f04f 0347 	mov.w	r3, #71	; 0x47
 80032d2:	70fb      	strb	r3, [r7, #3]
					for( i = 4; i < BufferSize; i++ )
 80032d4:	d907      	bls.n	80032e6 <lorapingpong_process+0x18a>
 80032d6:	1cfb      	adds	r3, r7, #3
 80032d8:	3a04      	subs	r2, #4
 80032da:	4620      	mov	r0, r4
						Buffer[i] = i - 4;
 80032dc:	f803 0f01 	strb.w	r0, [r3, #1]!
					for( i = 4; i < BufferSize; i++ )
 80032e0:	3001      	adds	r0, #1
 80032e2:	4282      	cmp	r2, r0
 80032e4:	d1fa      	bne.n	80032dc <lorapingpong_process+0x180>
					Radio.Send( Buffer, BufferSize );
 80032e6:	4c11      	ldr	r4, [pc, #68]	; (800332c <lorapingpong_process+0x1d0>)
					DelayMs( 1 );
 80032e8:	2001      	movs	r0, #1
 80032ea:	f009 f8d7 	bl	800c49c <DelayMs>
					Radio.Send( Buffer, BufferSize );
 80032ee:	7831      	ldrb	r1, [r6, #0]
 80032f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80032f2:	4815      	ldr	r0, [pc, #84]	; (8003348 <lorapingpong_process+0x1ec>)
 80032f4:	4798      	blx	r3
					printf("Sending Pong....\r\n");
 80032f6:	481b      	ldr	r0, [pc, #108]	; (8003364 <lorapingpong_process+0x208>)
 80032f8:	f00f fed2 	bl	80130a0 <puts>
 80032fc:	e75a      	b.n	80031b4 <lorapingpong_process+0x58>
    		if(BufferSize > 0)
 80032fe:	4b10      	ldr	r3, [pc, #64]	; (8003340 <lorapingpong_process+0x1e4>)
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	b90b      	cbnz	r3, 8003308 <lorapingpong_process+0x1ac>
 8003304:	4c09      	ldr	r4, [pc, #36]	; (800332c <lorapingpong_process+0x1d0>)
 8003306:	e755      	b.n	80031b4 <lorapingpong_process+0x58>
    			if( strncmp( ( const char* )Buffer, ( const char* )PongMsg, 4 ) == 0 )
 8003308:	4917      	ldr	r1, [pc, #92]	; (8003368 <lorapingpong_process+0x20c>)
 800330a:	480f      	ldr	r0, [pc, #60]	; (8003348 <lorapingpong_process+0x1ec>)
 800330c:	2204      	movs	r2, #4
 800330e:	f00f feef 	bl	80130f0 <strncmp>
 8003312:	2800      	cmp	r0, #0
 8003314:	d1f6      	bne.n	8003304 <lorapingpong_process+0x1a8>
					printf("PONG string matches\r\n");
 8003316:	4815      	ldr	r0, [pc, #84]	; (800336c <lorapingpong_process+0x210>)
 8003318:	4c04      	ldr	r4, [pc, #16]	; (800332c <lorapingpong_process+0x1d0>)
 800331a:	f00f fec1 	bl	80130a0 <puts>
        State = LOWPOWER;
 800331e:	e749      	b.n	80031b4 <lorapingpong_process+0x58>
 8003320:	4c02      	ldr	r4, [pc, #8]	; (800332c <lorapingpong_process+0x1d0>)
 8003322:	e749      	b.n	80031b8 <lorapingpong_process+0x5c>
 8003324:	20000432 	.word	0x20000432
 8003328:	08014cd0 	.word	0x08014cd0
 800332c:	08015848 	.word	0x08015848
 8003330:	20000434 	.word	0x20000434
 8003334:	08014cc4 	.word	0x08014cc4
 8003338:	08014ce4 	.word	0x08014ce4
 800333c:	08014cf0 	.word	0x08014cf0
 8003340:	20000010 	.word	0x20000010
 8003344:	08014d00 	.word	0x08014d00
 8003348:	200009d4 	.word	0x200009d4
 800334c:	08014c4c 	.word	0x08014c4c
 8003350:	20000430 	.word	0x20000430
 8003354:	20000431 	.word	0x20000431
 8003358:	08014c58 	.word	0x08014c58
 800335c:	08014d10 	.word	0x08014d10
 8003360:	08014c84 	.word	0x08014c84
 8003364:	08014c98 	.word	0x08014c98
 8003368:	08014d18 	.word	0x08014d18
 800336c:	08014cac 	.word	0x08014cac

08003370 <OnMacProcessNotify>:
    }
}

void OnMacProcessNotify( void )
{
    IsMacProcessPending = 1;
 8003370:	4b02      	ldr	r3, [pc, #8]	; (800337c <OnMacProcessNotify+0xc>)
 8003372:	2201      	movs	r2, #1
 8003374:	701a      	strb	r2, [r3, #0]
    App_vLoraWanProcessTaskRun();
 8003376:	f7fd bbe9 	b.w	8000b4c <App_vLoraWanProcessTaskRun>
 800337a:	bf00      	nop
 800337c:	20000533 	.word	0x20000533

08003380 <PrepareTxFrame>:
    switch( port )
 8003380:	2802      	cmp	r0, #2
{
 8003382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch( port )
 8003386:	d006      	beq.n	8003396 <PrepareTxFrame+0x16>
 8003388:	28e0      	cmp	r0, #224	; 0xe0
 800338a:	4605      	mov	r5, r0
 800338c:	d047      	beq.n	800341e <PrepareTxFrame+0x9e>
 800338e:	2801      	cmp	r0, #1
 8003390:	d00e      	beq.n	80033b0 <PrepareTxFrame+0x30>
}
 8003392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            AppDataBuffer[0] = 0x11;
 8003396:	4b33      	ldr	r3, [pc, #204]	; (8003464 <PrepareTxFrame+0xe4>)
 8003398:	4a33      	ldr	r2, [pc, #204]	; (8003468 <PrepareTxFrame+0xe8>)
            AppDataSizeBackup = AppDataSize = 5;
 800339a:	4c34      	ldr	r4, [pc, #208]	; (800346c <PrepareTxFrame+0xec>)
 800339c:	4834      	ldr	r0, [pc, #208]	; (8003470 <PrepareTxFrame+0xf0>)
            AppDataBuffer[0] = 0x11;
 800339e:	601a      	str	r2, [r3, #0]
            AppDataBuffer[4] = 0x55;
 80033a0:	f246 6155 	movw	r1, #26197	; 0x6655
            AppDataSizeBackup = AppDataSize = 5;
 80033a4:	2205      	movs	r2, #5
 80033a6:	7022      	strb	r2, [r4, #0]
 80033a8:	7002      	strb	r2, [r0, #0]
            AppDataBuffer[4] = 0x55;
 80033aa:	8099      	strh	r1, [r3, #4]
}
 80033ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  memset((uint8_t *) &sLoraWifiMacFrame, 0x00, sizeof(sLoraWifiMacFrame));
 80033b0:	4c30      	ldr	r4, [pc, #192]	; (8003474 <PrepareTxFrame+0xf4>)
	    AppDataBuffer[i] = i+30;
 80033b2:	4e2c      	ldr	r6, [pc, #176]	; (8003464 <PrepareTxFrame+0xe4>)
 80033b4:	4b30      	ldr	r3, [pc, #192]	; (8003478 <PrepareTxFrame+0xf8>)
 80033b6:	4a31      	ldr	r2, [pc, #196]	; (800347c <PrepareTxFrame+0xfc>)
	  AppDataSizeBackup = AppDataSize = i;
 80033b8:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800346c <PrepareTxFrame+0xec>
 80033bc:	4f2c      	ldr	r7, [pc, #176]	; (8003470 <PrepareTxFrame+0xf0>)
	    AppDataBuffer[i] = i+30;
 80033be:	6033      	str	r3, [r6, #0]
 80033c0:	f242 7126 	movw	r1, #10022	; 0x2726
	  AppDataSizeBackup = AppDataSize = i;
 80033c4:	230a      	movs	r3, #10
	    AppDataBuffer[i] = i+30;
 80033c6:	6072      	str	r2, [r6, #4]
 80033c8:	8131      	strh	r1, [r6, #8]
	  memset((uint8_t *) &sLoraWifiMacFrame, 0x00, sizeof(sLoraWifiMacFrame));
 80033ca:	2227      	movs	r2, #39	; 0x27
 80033cc:	2100      	movs	r1, #0
 80033ce:	4620      	mov	r0, r4
	  AppDataSizeBackup = AppDataSize = i;
 80033d0:	f888 3000 	strb.w	r3, [r8]
 80033d4:	703b      	strb	r3, [r7, #0]
	  memset((uint8_t *) &sLoraWifiMacFrame, 0x00, sizeof(sLoraWifiMacFrame));
 80033d6:	f00f fdd5 	bl	8012f84 <memset>
	  sLoraWifiMacFrame.u8PacktCount = u8PacketCounter++;
 80033da:	4a29      	ldr	r2, [pc, #164]	; (8003480 <PrepareTxFrame+0x100>)
	  sLoraWifiMacFrame.u8MsgType = 0x01;
 80033dc:	7025      	strb	r5, [r4, #0]
	  sLoraWifiMacFrame.u8PacktCount = u8PacketCounter++;
 80033de:	7813      	ldrb	r3, [r2, #0]
 80033e0:	7063      	strb	r3, [r4, #1]
 80033e2:	3301      	adds	r3, #1
 80033e4:	b2db      	uxtb	r3, r3
	  app_wifi_scan((uint8_t *) &sLoraWifiMacFrame.sWifiMacId);
 80033e6:	1ce0      	adds	r0, r4, #3
	  sLoraWifiMacFrame.u8PacktCount = u8PacketCounter++;
 80033e8:	7013      	strb	r3, [r2, #0]
	  app_wifi_scan((uint8_t *) &sLoraWifiMacFrame.sWifiMacId);
 80033ea:	f009 f821 	bl	800c430 <app_wifi_scan>
	  memcpy((uint8_t *)AppDataBuffer, (uint8_t *) &sLoraWifiMacFrame, sizeof(sLoraWifiMacFrame));
 80033ee:	f104 0c20 	add.w	ip, r4, #32
 80033f2:	6820      	ldr	r0, [r4, #0]
 80033f4:	6861      	ldr	r1, [r4, #4]
 80033f6:	68a2      	ldr	r2, [r4, #8]
 80033f8:	68e3      	ldr	r3, [r4, #12]
 80033fa:	4635      	mov	r5, r6
 80033fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033fe:	3410      	adds	r4, #16
 8003400:	4564      	cmp	r4, ip
 8003402:	462e      	mov	r6, r5
 8003404:	d1f5      	bne.n	80033f2 <PrepareTxFrame+0x72>
 8003406:	6820      	ldr	r0, [r4, #0]
 8003408:	88a1      	ldrh	r1, [r4, #4]
 800340a:	79a2      	ldrb	r2, [r4, #6]
 800340c:	71aa      	strb	r2, [r5, #6]
 800340e:	6028      	str	r0, [r5, #0]
	  AppDataSizeBackup = AppDataSize = sizeof(sLoraWifiMacFrame);
 8003410:	2327      	movs	r3, #39	; 0x27
	  memcpy((uint8_t *)AppDataBuffer, (uint8_t *) &sLoraWifiMacFrame, sizeof(sLoraWifiMacFrame));
 8003412:	80a9      	strh	r1, [r5, #4]
	  AppDataSizeBackup = AppDataSize = sizeof(sLoraWifiMacFrame);
 8003414:	f888 3000 	strb.w	r3, [r8]
 8003418:	703b      	strb	r3, [r7, #0]
}
 800341a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ComplianceTest.LinkCheck == true )
 800341e:	4b19      	ldr	r3, [pc, #100]	; (8003484 <PrepareTxFrame+0x104>)
 8003420:	7b9a      	ldrb	r2, [r3, #14]
 8003422:	b93a      	cbnz	r2, 8003434 <PrepareTxFrame+0xb4>
            switch( ComplianceTest.State )
 8003424:	785a      	ldrb	r2, [r3, #1]
 8003426:	2a01      	cmp	r2, #1
 8003428:	d014      	beq.n	8003454 <PrepareTxFrame+0xd4>
 800342a:	2a04      	cmp	r2, #4
 800342c:	d1b1      	bne.n	8003392 <PrepareTxFrame+0x12>
                ComplianceTest.State = 1;
 800342e:	2201      	movs	r2, #1
 8003430:	705a      	strb	r2, [r3, #1]
                break;
 8003432:	e7ae      	b.n	8003392 <PrepareTxFrame+0x12>
            AppDataBuffer[0] = 5;
 8003434:	4a0b      	ldr	r2, [pc, #44]	; (8003464 <PrepareTxFrame+0xe4>)
            AppDataSize = 3;
 8003436:	490d      	ldr	r1, [pc, #52]	; (800346c <PrepareTxFrame+0xec>)
            AppDataBuffer[1] = ComplianceTest.DemodMargin;
 8003438:	7bd8      	ldrb	r0, [r3, #15]
 800343a:	7050      	strb	r0, [r2, #1]
            AppDataSize = 3;
 800343c:	2003      	movs	r0, #3
 800343e:	7008      	strb	r0, [r1, #0]
            AppDataBuffer[2] = ComplianceTest.NbGateways;
 8003440:	7c1c      	ldrb	r4, [r3, #16]
 8003442:	7094      	strb	r4, [r2, #2]
            AppDataBuffer[0] = 5;
 8003444:	2505      	movs	r5, #5
            ComplianceTest.State = 1;
 8003446:	2101      	movs	r1, #1
            ComplianceTest.LinkCheck = false;
 8003448:	2000      	movs	r0, #0
            AppDataBuffer[0] = 5;
 800344a:	7015      	strb	r5, [r2, #0]
            ComplianceTest.State = 1;
 800344c:	7059      	strb	r1, [r3, #1]
            ComplianceTest.LinkCheck = false;
 800344e:	7398      	strb	r0, [r3, #14]
}
 8003450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                AppDataBuffer[0] = ComplianceTest.DownLinkCounter >> 8;
 8003454:	899b      	ldrh	r3, [r3, #12]
 8003456:	4803      	ldr	r0, [pc, #12]	; (8003464 <PrepareTxFrame+0xe4>)
                AppDataSize = 2;
 8003458:	4a04      	ldr	r2, [pc, #16]	; (800346c <PrepareTxFrame+0xec>)
                AppDataBuffer[0] = ComplianceTest.DownLinkCounter >> 8;
 800345a:	ba5b      	rev16	r3, r3
                AppDataSize = 2;
 800345c:	2102      	movs	r1, #2
                AppDataBuffer[0] = ComplianceTest.DownLinkCounter >> 8;
 800345e:	8003      	strh	r3, [r0, #0]
                AppDataSize = 2;
 8003460:	7011      	strb	r1, [r2, #0]
}
 8003462:	e796      	b.n	8003392 <PrepareTxFrame+0x12>
 8003464:	20000440 	.word	0x20000440
 8003468:	44332211 	.word	0x44332211
 800346c:	20000012 	.word	0x20000012
 8003470:	20000013 	.word	0x20000013
 8003474:	20000a18 	.word	0x20000a18
 8003478:	21201f1e 	.word	0x21201f1e
 800347c:	25242322 	.word	0x25242322
 8003480:	2000055c 	.word	0x2000055c
 8003484:	20000a50 	.word	0x20000a50

08003488 <SendFrame>:
{
 8003488:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( LoRaMacQueryTxPossible( AppDataSize, &txInfo ) != LORAMAC_STATUS_OK )
 800348a:	4d31      	ldr	r5, [pc, #196]	; (8003550 <SendFrame+0xc8>)
{
 800348c:	b087      	sub	sp, #28
    if( LoRaMacQueryTxPossible( AppDataSize, &txInfo ) != LORAMAC_STATUS_OK )
 800348e:	7828      	ldrb	r0, [r5, #0]
 8003490:	4669      	mov	r1, sp
 8003492:	f003 f8ff 	bl	8006694 <LoRaMacQueryTxPossible>
 8003496:	2800      	cmp	r0, #0
 8003498:	d03a      	beq.n	8003510 <SendFrame+0x88>
        mcpsReq.Req.Unconfirmed.Datarate = LORAWAN_DEFAULT_DATARATE;
 800349a:	2101      	movs	r1, #1
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800349c:	2300      	movs	r3, #0
        mcpsReq.Req.Unconfirmed.Datarate = LORAWAN_DEFAULT_DATARATE;
 800349e:	f88d 1012 	strb.w	r1, [sp, #18]
 80034a2:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80034a6:	7829      	ldrb	r1, [r5, #0]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 80034a8:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 80034ac:	461e      	mov	r6, r3
 80034ae:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 80034b0:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.Datarate = LORAWAN_DEFAULT_DATARATE;
 80034b4:	461c      	mov	r4, r3
 80034b6:	461a      	mov	r2, r3
    AppData.MsgType = ( mcpsReq.Type == MCPS_CONFIRMED ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 80034b8:	4b26      	ldr	r3, [pc, #152]	; (8003554 <SendFrame+0xcc>)
    printf("Lora Send: %d\r\n", AppDataSize);
 80034ba:	4827      	ldr	r0, [pc, #156]	; (8003558 <SendFrame+0xd0>)
    AppData.MsgType = ( mcpsReq.Type == MCPS_CONFIRMED ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 80034bc:	701a      	strb	r2, [r3, #0]
    AppData.Port = mcpsReq.Req.Unconfirmed.fPort;
 80034be:	705f      	strb	r7, [r3, #1]
    AppData.Buffer = mcpsReq.Req.Unconfirmed.fBuffer;
 80034c0:	605c      	str	r4, [r3, #4]
    AppData.BufferSize = mcpsReq.Req.Unconfirmed.fBufferSize;
 80034c2:	709e      	strb	r6, [r3, #2]
    printf("Lora Send: %d\r\n", AppDataSize);
 80034c4:	f00f fd66 	bl	8012f94 <iprintf>
    for(ii = 0; ii < AppDataSize; ii++)
 80034c8:	782b      	ldrb	r3, [r5, #0]
 80034ca:	b163      	cbz	r3, 80034e6 <SendFrame+0x5e>
 80034cc:	2400      	movs	r4, #0
 80034ce:	4f23      	ldr	r7, [pc, #140]	; (800355c <SendFrame+0xd4>)
    	printf("0x%02X, ", AppDataBuffer[ii]);
 80034d0:	4e23      	ldr	r6, [pc, #140]	; (8003560 <SendFrame+0xd8>)
 80034d2:	4623      	mov	r3, r4
 80034d4:	5cf9      	ldrb	r1, [r7, r3]
 80034d6:	4630      	mov	r0, r6
 80034d8:	f00f fd5c 	bl	8012f94 <iprintf>
    for(ii = 0; ii < AppDataSize; ii++)
 80034dc:	3401      	adds	r4, #1
 80034de:	782a      	ldrb	r2, [r5, #0]
 80034e0:	b2e3      	uxtb	r3, r4
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d8f6      	bhi.n	80034d4 <SendFrame+0x4c>
    printf("\r\n\r\n");
 80034e6:	481f      	ldr	r0, [pc, #124]	; (8003564 <SendFrame+0xdc>)
 80034e8:	f00f fdda 	bl	80130a0 <puts>
    status = LoRaMacMcpsRequest( &mcpsReq );
 80034ec:	a801      	add	r0, sp, #4
 80034ee:	f003 ff0f 	bl	8007310 <LoRaMacMcpsRequest>
 80034f2:	4604      	mov	r4, r0
    printf( "\r\n###### ===== MCPS-Request ==== ######\r\n" );
 80034f4:	481c      	ldr	r0, [pc, #112]	; (8003568 <SendFrame+0xe0>)
 80034f6:	f00f fdd3 	bl	80130a0 <puts>
    printf( "STATUS      : %s\r\n", myMacStatusStrings[status] );
 80034fa:	4b1c      	ldr	r3, [pc, #112]	; (800356c <SendFrame+0xe4>)
 80034fc:	481c      	ldr	r0, [pc, #112]	; (8003570 <SendFrame+0xe8>)
 80034fe:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8003502:	f00f fd47 	bl	8012f94 <iprintf>
    if( status == LORAMAC_STATUS_OK )
 8003506:	1e20      	subs	r0, r4, #0
 8003508:	bf18      	it	ne
 800350a:	2001      	movne	r0, #1
}
 800350c:	b007      	add	sp, #28
 800350e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( IsTxConfirmed == false )
 8003510:	4b18      	ldr	r3, [pc, #96]	; (8003574 <SendFrame+0xec>)
            mcpsReq.Req.Unconfirmed.fBuffer = AppDataBuffer;
 8003512:	4c12      	ldr	r4, [pc, #72]	; (800355c <SendFrame+0xd4>)
        if( IsTxConfirmed == false )
 8003514:	781a      	ldrb	r2, [r3, #0]
            mcpsReq.Req.Unconfirmed.fPort = AppPort;
 8003516:	4b18      	ldr	r3, [pc, #96]	; (8003578 <SendFrame+0xf0>)
            mcpsReq.Req.Unconfirmed.fBufferSize = AppDataSize;
 8003518:	7829      	ldrb	r1, [r5, #0]
            mcpsReq.Req.Unconfirmed.fPort = AppPort;
 800351a:	781f      	ldrb	r7, [r3, #0]
        if( IsTxConfirmed == false )
 800351c:	b95a      	cbnz	r2, 8003536 <SendFrame+0xae>
            mcpsReq.Req.Unconfirmed.Datarate = LORAWAN_DEFAULT_DATARATE;
 800351e:	2301      	movs	r3, #1
            mcpsReq.Type = MCPS_UNCONFIRMED;
 8003520:	f88d 2004 	strb.w	r2, [sp, #4]
            mcpsReq.Req.Unconfirmed.fPort = AppPort;
 8003524:	f88d 7008 	strb.w	r7, [sp, #8]
            mcpsReq.Req.Unconfirmed.fBuffer = AppDataBuffer;
 8003528:	9403      	str	r4, [sp, #12]
            mcpsReq.Req.Unconfirmed.fBufferSize = AppDataSize;
 800352a:	f8ad 1010 	strh.w	r1, [sp, #16]
            mcpsReq.Req.Unconfirmed.Datarate = LORAWAN_DEFAULT_DATARATE;
 800352e:	460e      	mov	r6, r1
 8003530:	f88d 3012 	strb.w	r3, [sp, #18]
 8003534:	e7c0      	b.n	80034b8 <SendFrame+0x30>
            mcpsReq.Type = MCPS_CONFIRMED;
 8003536:	2201      	movs	r2, #1
            mcpsReq.Req.Confirmed.fPort = AppPort;
 8003538:	f88d 7008 	strb.w	r7, [sp, #8]
            mcpsReq.Req.Confirmed.fBuffer = AppDataBuffer;
 800353c:	9403      	str	r4, [sp, #12]
            mcpsReq.Req.Confirmed.fBufferSize = AppDataSize;
 800353e:	f8ad 1010 	strh.w	r1, [sp, #16]
            mcpsReq.Req.Confirmed.Datarate = LORAWAN_DEFAULT_DATARATE;
 8003542:	460e      	mov	r6, r1
            mcpsReq.Type = MCPS_CONFIRMED;
 8003544:	f88d 2004 	strb.w	r2, [sp, #4]
            mcpsReq.Req.Confirmed.Datarate = LORAWAN_DEFAULT_DATARATE;
 8003548:	f88d 2012 	strb.w	r2, [sp, #18]
 800354c:	e7b4      	b.n	80034b8 <SendFrame+0x30>
 800354e:	bf00      	nop
 8003550:	20000012 	.word	0x20000012
 8003554:	20000438 	.word	0x20000438
 8003558:	08015044 	.word	0x08015044
 800355c:	20000440 	.word	0x20000440
 8003560:	08015094 	.word	0x08015094
 8003564:	08015c20 	.word	0x08015c20
 8003568:	08015054 	.word	0x08015054
 800356c:	2000007c 	.word	0x2000007c
 8003570:	08015080 	.word	0x08015080
 8003574:	20000534 	.word	0x20000534
 8003578:	20000024 	.word	0x20000024

0800357c <JoinNetwork>:
{
 800357c:	b510      	push	{r4, lr}
 800357e:	b090      	sub	sp, #64	; 0x40
    mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8003580:	f44f 7381 	mov.w	r3, #258	; 0x102
    mlmeReq.Type = MLME_JOIN;
 8003584:	2201      	movs	r2, #1
    status = LoRaMacMlmeRequest( &mlmeReq );
 8003586:	a801      	add	r0, sp, #4
    mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8003588:	f8ad 3008 	strh.w	r3, [sp, #8]
    mlmeReq.Type = MLME_JOIN;
 800358c:	f88d 2004 	strb.w	r2, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 8003590:	f003 fd9a 	bl	80070c8 <LoRaMacMlmeRequest>
 8003594:	4604      	mov	r4, r0
    printf( "\r\n## MLME-Request - MLME_JOIN ##\r\n" );
 8003596:	4815      	ldr	r0, [pc, #84]	; (80035ec <JoinNetwork+0x70>)
 8003598:	f00f fd82 	bl	80130a0 <puts>
    printf( "STATUS      : %s\r\n", myMacStatusStrings[status] );
 800359c:	4b14      	ldr	r3, [pc, #80]	; (80035f0 <JoinNetwork+0x74>)
 800359e:	4815      	ldr	r0, [pc, #84]	; (80035f4 <JoinNetwork+0x78>)
 80035a0:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 80035a4:	f00f fcf6 	bl	8012f94 <iprintf>
    if( status == LORAMAC_STATUS_OK )
 80035a8:	b94c      	cbnz	r4, 80035be <JoinNetwork+0x42>
        printf( "## JOINING ##\r\n" );
 80035aa:	4813      	ldr	r0, [pc, #76]	; (80035f8 <JoinNetwork+0x7c>)
 80035ac:	f00f fd78 	bl	80130a0 <puts>
        u32JoinCount  = 0;
 80035b0:	4a12      	ldr	r2, [pc, #72]	; (80035fc <JoinNetwork+0x80>)
        DeviceState = DEVICE_STATE_SLEEP;
 80035b2:	4b13      	ldr	r3, [pc, #76]	; (8003600 <JoinNetwork+0x84>)
        u32JoinCount  = 0;
 80035b4:	6014      	str	r4, [r2, #0]
        DeviceState = DEVICE_STATE_SLEEP;
 80035b6:	2207      	movs	r2, #7
 80035b8:	701a      	strb	r2, [r3, #0]
}
 80035ba:	b010      	add	sp, #64	; 0x40
 80035bc:	bd10      	pop	{r4, pc}
        LoRaMacMibGetRequestConfirm( &mibReq );
 80035be:	a806      	add	r0, sp, #24
        mibReq.Type = MIB_DEVICE_CLASS;
 80035c0:	2400      	movs	r4, #0
 80035c2:	f88d 4018 	strb.w	r4, [sp, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 80035c6:	f003 f8d3 	bl	8006770 <LoRaMacMibGetRequestConfirm>
        if( currentClass != CLASS_A )
 80035ca:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80035ce:	b923      	cbnz	r3, 80035da <JoinNetwork+0x5e>
        DeviceState = DEVICE_STATE_START;
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <JoinNetwork+0x84>)
 80035d2:	2202      	movs	r2, #2
 80035d4:	701a      	strb	r2, [r3, #0]
}
 80035d6:	b010      	add	sp, #64	; 0x40
 80035d8:	bd10      	pop	{r4, pc}
			LoRaMacMibSetRequestConfirm( &mibReq );
 80035da:	a806      	add	r0, sp, #24
        	mibReq.Param.Class = CLASS_A;
 80035dc:	f88d 401c 	strb.w	r4, [sp, #28]
			LoRaMacMibSetRequestConfirm( &mibReq );
 80035e0:	f003 fa1a 	bl	8006a18 <LoRaMacMibSetRequestConfirm>
        DeviceState = DEVICE_STATE_START;
 80035e4:	4b06      	ldr	r3, [pc, #24]	; (8003600 <JoinNetwork+0x84>)
 80035e6:	2202      	movs	r2, #2
 80035e8:	701a      	strb	r2, [r3, #0]
 80035ea:	e7f4      	b.n	80035d6 <JoinNetwork+0x5a>
 80035ec:	080150a0 	.word	0x080150a0
 80035f0:	2000007c 	.word	0x2000007c
 80035f4:	08015080 	.word	0x08015080
 80035f8:	080150c4 	.word	0x080150c4
 80035fc:	20000558 	.word	0x20000558
 8003600:	20000532 	.word	0x20000532

08003604 <OnTxNextPacketTimerEvent>:
{
 8003604:	b510      	push	{r4, lr}
	s_u32LorawanTimerCounter++;
 8003606:	4c19      	ldr	r4, [pc, #100]	; (800366c <OnTxNextPacketTimerEvent+0x68>)
 8003608:	6823      	ldr	r3, [r4, #0]
{
 800360a:	b08a      	sub	sp, #40	; 0x28
	s_u32LorawanTimerCounter++;
 800360c:	3301      	adds	r3, #1
 800360e:	6023      	str	r3, [r4, #0]
	if(s_u32LorawanTimerCounter >= App_GetLoraCommInterval())
 8003610:	f7fd fc2c 	bl	8000e6c <App_GetLoraCommInterval>
 8003614:	6823      	ldr	r3, [r4, #0]
 8003616:	4298      	cmp	r0, r3
 8003618:	d815      	bhi.n	8003646 <OnTxNextPacketTimerEvent+0x42>
		TimerStop( &TxNextPacketTimer );
 800361a:	4815      	ldr	r0, [pc, #84]	; (8003670 <OnTxNextPacketTimerEvent+0x6c>)
		s_u32LorawanTimerCounter = 0;
 800361c:	2300      	movs	r3, #0
 800361e:	6023      	str	r3, [r4, #0]
		TimerStop( &TxNextPacketTimer );
 8003620:	f009 f820 	bl	800c664 <TimerStop>
		mibReq.Type = MIB_NETWORK_ACTIVATION;
 8003624:	2401      	movs	r4, #1
		status = LoRaMacMibGetRequestConfirm( &mibReq );
 8003626:	4668      	mov	r0, sp
		mibReq.Type = MIB_NETWORK_ACTIVATION;
 8003628:	f88d 4000 	strb.w	r4, [sp]
		status = LoRaMacMibGetRequestConfirm( &mibReq );
 800362c:	f003 f8a0 	bl	8006770 <LoRaMacMibGetRequestConfirm>
		if( status == LORAMAC_STATUS_OK )
 8003630:	b938      	cbnz	r0, 8003642 <OnTxNextPacketTimerEvent+0x3e>
			if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8003632:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003636:	b1b3      	cbz	r3, 8003666 <OnTxNextPacketTimerEvent+0x62>
				DeviceState = DEVICE_STATE_SEND;
 8003638:	4a0e      	ldr	r2, [pc, #56]	; (8003674 <OnTxNextPacketTimerEvent+0x70>)
				NextTx = true;
 800363a:	4b0f      	ldr	r3, [pc, #60]	; (8003678 <OnTxNextPacketTimerEvent+0x74>)
				DeviceState = DEVICE_STATE_SEND;
 800363c:	2104      	movs	r1, #4
 800363e:	7011      	strb	r1, [r2, #0]
				NextTx = true;
 8003640:	701c      	strb	r4, [r3, #0]
}
 8003642:	b00a      	add	sp, #40	; 0x28
 8003644:	bd10      	pop	{r4, pc}
		DeviceState = DEVICE_STATE_TIMER;
 8003646:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <OnTxNextPacketTimerEvent+0x70>)
		TimerStop( &TxNextPacketTimer );
 8003648:	4809      	ldr	r0, [pc, #36]	; (8003670 <OnTxNextPacketTimerEvent+0x6c>)
		DeviceState = DEVICE_STATE_TIMER;
 800364a:	2206      	movs	r2, #6
 800364c:	701a      	strb	r2, [r3, #0]
		TimerStop( &TxNextPacketTimer );
 800364e:	f009 f809 	bl	800c664 <TimerStop>
		TimerSetValue( &TxNextPacketTimer, APP_TX_DUTYCYCLE );
 8003652:	f64e 2160 	movw	r1, #60000	; 0xea60
 8003656:	4806      	ldr	r0, [pc, #24]	; (8003670 <OnTxNextPacketTimerEvent+0x6c>)
 8003658:	f009 f83e 	bl	800c6d8 <TimerSetValue>
		TimerStart( &TxNextPacketTimer );
 800365c:	4804      	ldr	r0, [pc, #16]	; (8003670 <OnTxNextPacketTimerEvent+0x6c>)
 800365e:	f008 ff61 	bl	800c524 <TimerStart>
}
 8003662:	b00a      	add	sp, #40	; 0x28
 8003664:	bd10      	pop	{r4, pc}
				JoinNetwork( );
 8003666:	f7ff ff89 	bl	800357c <JoinNetwork>
 800366a:	e7ea      	b.n	8003642 <OnTxNextPacketTimerEvent+0x3e>
 800366c:	20000554 	.word	0x20000554
 8003670:	2000053c 	.word	0x2000053c
 8003674:	20000532 	.word	0x20000532
 8003678:	20000025 	.word	0x20000025

0800367c <MlmeIndication>:
{
 800367c:	b510      	push	{r4, lr}
    if( mlmeIndication->Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 800367e:	7843      	ldrb	r3, [r0, #1]
 8003680:	2b0d      	cmp	r3, #13
{
 8003682:	4604      	mov	r4, r0
    if( mlmeIndication->Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 8003684:	d009      	beq.n	800369a <MlmeIndication+0x1e>
        printf( "\r\n###### ===== MLME-Indication ==== ######\r\n" );
 8003686:	4809      	ldr	r0, [pc, #36]	; (80036ac <MlmeIndication+0x30>)
 8003688:	f00f fd0a 	bl	80130a0 <puts>
        printf( "STATUS      : %s\r\n", myEventInfoStatusStrings[mlmeIndication->Status] );
 800368c:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <MlmeIndication+0x34>)
 800368e:	7862      	ldrb	r2, [r4, #1]
 8003690:	4808      	ldr	r0, [pc, #32]	; (80036b4 <MlmeIndication+0x38>)
 8003692:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003696:	f00f fc7d 	bl	8012f94 <iprintf>
    switch( mlmeIndication->MlmeIndication )
 800369a:	7823      	ldrb	r3, [r4, #0]
 800369c:	2b0e      	cmp	r3, #14
 800369e:	d000      	beq.n	80036a2 <MlmeIndication+0x26>
}
 80036a0:	bd10      	pop	{r4, pc}
 80036a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            OnTxNextPacketTimerEvent( NULL );
 80036a6:	2000      	movs	r0, #0
 80036a8:	f7ff bfac 	b.w	8003604 <OnTxNextPacketTimerEvent>
 80036ac:	080150d4 	.word	0x080150d4
 80036b0:	20000038 	.word	0x20000038
 80036b4:	08015080 	.word	0x08015080

080036b8 <MlmeConfirm>:
{
 80036b8:	b510      	push	{r4, lr}
 80036ba:	4604      	mov	r4, r0
 80036bc:	b08a      	sub	sp, #40	; 0x28
    printf( "\r\n## MLME-Confirm ##\r\n" );
 80036be:	4823      	ldr	r0, [pc, #140]	; (800374c <MlmeConfirm+0x94>)
 80036c0:	f00f fcee 	bl	80130a0 <puts>
    printf( "STATUS      : %s\r\n", myEventInfoStatusStrings[mlmeConfirm->Status] );
 80036c4:	7862      	ldrb	r2, [r4, #1]
 80036c6:	4b22      	ldr	r3, [pc, #136]	; (8003750 <MlmeConfirm+0x98>)
 80036c8:	4822      	ldr	r0, [pc, #136]	; (8003754 <MlmeConfirm+0x9c>)
 80036ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80036ce:	f00f fc61 	bl	8012f94 <iprintf>
    switch( mlmeConfirm->MlmeRequest )
 80036d2:	7823      	ldrb	r3, [r4, #0]
    if( mlmeConfirm->Status != LORAMAC_EVENT_INFO_STATUS_OK )
 80036d4:	7862      	ldrb	r2, [r4, #1]
    switch( mlmeConfirm->MlmeRequest )
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d00d      	beq.n	80036f6 <MlmeConfirm+0x3e>
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d109      	bne.n	80036f2 <MlmeConfirm+0x3a>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80036de:	b942      	cbnz	r2, 80036f2 <MlmeConfirm+0x3a>
                if( ComplianceTest.Running == true )
 80036e0:	4b1d      	ldr	r3, [pc, #116]	; (8003758 <MlmeConfirm+0xa0>)
 80036e2:	781a      	ldrb	r2, [r3, #0]
 80036e4:	b12a      	cbz	r2, 80036f2 <MlmeConfirm+0x3a>
                    ComplianceTest.LinkCheck = true;
 80036e6:	2201      	movs	r2, #1
 80036e8:	739a      	strb	r2, [r3, #14]
                    ComplianceTest.DemodMargin = mlmeConfirm->DemodMargin;
 80036ea:	7a22      	ldrb	r2, [r4, #8]
 80036ec:	73da      	strb	r2, [r3, #15]
                    ComplianceTest.NbGateways = mlmeConfirm->NbGateways;
 80036ee:	7a62      	ldrb	r2, [r4, #9]
 80036f0:	741a      	strb	r2, [r3, #16]
}
 80036f2:	b00a      	add	sp, #40	; 0x28
 80036f4:	bd10      	pop	{r4, pc}
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80036f6:	bb2a      	cbnz	r2, 8003744 <MlmeConfirm+0x8c>
                printf( "###### ===== JOINED ==== ######\r\n" );
 80036f8:	4818      	ldr	r0, [pc, #96]	; (800375c <MlmeConfirm+0xa4>)
 80036fa:	f00f fcd1 	bl	80130a0 <puts>
                printf( "\r\nOTAA\r\n\r\n" );
 80036fe:	4818      	ldr	r0, [pc, #96]	; (8003760 <MlmeConfirm+0xa8>)
 8003700:	f00f fcce 	bl	80130a0 <puts>
                mibGet.Type = MIB_DEV_ADDR;
 8003704:	2307      	movs	r3, #7
                LoRaMacMibGetRequestConfirm( &mibGet );
 8003706:	4668      	mov	r0, sp
                mibGet.Type = MIB_DEV_ADDR;
 8003708:	f88d 3000 	strb.w	r3, [sp]
                LoRaMacMibGetRequestConfirm( &mibGet );
 800370c:	f003 f830 	bl	8006770 <LoRaMacMibGetRequestConfirm>
                printf( "DevAddr     : %08lX\r\n", mibGet.Param.DevAddr );
 8003710:	9901      	ldr	r1, [sp, #4]
 8003712:	4814      	ldr	r0, [pc, #80]	; (8003764 <MlmeConfirm+0xac>)
 8003714:	f00f fc3e 	bl	8012f94 <iprintf>
                printf( "\n\r\n" );
 8003718:	4813      	ldr	r0, [pc, #76]	; (8003768 <MlmeConfirm+0xb0>)
 800371a:	f00f fcc1 	bl	80130a0 <puts>
                mibGet.Type = MIB_CHANNELS_DATARATE;
 800371e:	232d      	movs	r3, #45	; 0x2d
                LoRaMacMibGetRequestConfirm( &mibGet );
 8003720:	4668      	mov	r0, sp
                mibGet.Type = MIB_CHANNELS_DATARATE;
 8003722:	f88d 3000 	strb.w	r3, [sp]
                LoRaMacMibGetRequestConfirm( &mibGet );
 8003726:	f003 f823 	bl	8006770 <LoRaMacMibGetRequestConfirm>
                printf( "DATA RATE   : DR_%d\r\n", mibGet.Param.ChannelsDatarate );
 800372a:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800372e:	480f      	ldr	r0, [pc, #60]	; (800376c <MlmeConfirm+0xb4>)
 8003730:	f00f fc30 	bl	8012f94 <iprintf>
                printf( "\r\n" );
 8003734:	480e      	ldr	r0, [pc, #56]	; (8003770 <MlmeConfirm+0xb8>)
 8003736:	f00f fcb3 	bl	80130a0 <puts>
                DeviceState = DEVICE_STATE_SEND;
 800373a:	4b0e      	ldr	r3, [pc, #56]	; (8003774 <MlmeConfirm+0xbc>)
 800373c:	2204      	movs	r2, #4
 800373e:	701a      	strb	r2, [r3, #0]
}
 8003740:	b00a      	add	sp, #40	; 0x28
 8003742:	bd10      	pop	{r4, pc}
                JoinNetwork( );
 8003744:	f7ff ff1a 	bl	800357c <JoinNetwork>
}
 8003748:	b00a      	add	sp, #40	; 0x28
 800374a:	bd10      	pop	{r4, pc}
 800374c:	08015100 	.word	0x08015100
 8003750:	20000038 	.word	0x20000038
 8003754:	08015080 	.word	0x08015080
 8003758:	20000a50 	.word	0x20000a50
 800375c:	08015118 	.word	0x08015118
 8003760:	0801513c 	.word	0x0801513c
 8003764:	08015148 	.word	0x08015148
 8003768:	08015c44 	.word	0x08015c44
 800376c:	08015160 	.word	0x08015160
 8003770:	08014a2c 	.word	0x08014a2c
 8003774:	20000532 	.word	0x20000532

08003778 <mymyPrintHexBuffer>:
    for( uint8_t i = 0; i < size; i++ )
 8003778:	b1f1      	cbz	r1, 80037b8 <mymyPrintHexBuffer+0x40>
{
 800377a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        printf( "0x%x ,", buffer[i] );
 800377e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 80037c4 <mymyPrintHexBuffer+0x4c>
            printf( "\r\n" );
 8003782:	4f0f      	ldr	r7, [pc, #60]	; (80037c0 <mymyPrintHexBuffer+0x48>)
 8003784:	4606      	mov	r6, r0
 8003786:	460d      	mov	r5, r1
    for( uint8_t i = 0; i < size; i++ )
 8003788:	2400      	movs	r4, #0
        printf( "0x%x ,", buffer[i] );
 800378a:	5d31      	ldrb	r1, [r6, r4]
 800378c:	4640      	mov	r0, r8
 800378e:	f00f fc01 	bl	8012f94 <iprintf>
        if( ( ( i + 1 ) % 16 ) == 0 )
 8003792:	1c63      	adds	r3, r4, #1
 8003794:	f013 0f0f 	tst.w	r3, #15
    for( uint8_t i = 0; i < size; i++ )
 8003798:	b2dc      	uxtb	r4, r3
            printf( "\r\n" );
 800379a:	4638      	mov	r0, r7
        if( ( ( i + 1 ) % 16 ) == 0 )
 800379c:	d104      	bne.n	80037a8 <mymyPrintHexBuffer+0x30>
    for( uint8_t i = 0; i < size; i++ )
 800379e:	42a5      	cmp	r5, r4
 80037a0:	d905      	bls.n	80037ae <mymyPrintHexBuffer+0x36>
            printf( "\r\n" );
 80037a2:	f00f fc7d 	bl	80130a0 <puts>
            newline = 0;
 80037a6:	e7f0      	b.n	800378a <mymyPrintHexBuffer+0x12>
    for( uint8_t i = 0; i < size; i++ )
 80037a8:	b2dc      	uxtb	r4, r3
 80037aa:	42a5      	cmp	r5, r4
 80037ac:	d8ed      	bhi.n	800378a <mymyPrintHexBuffer+0x12>
}
 80037ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    printf( "\r\n" );
 80037b2:	4803      	ldr	r0, [pc, #12]	; (80037c0 <mymyPrintHexBuffer+0x48>)
 80037b4:	f00f bc74 	b.w	80130a0 <puts>
 80037b8:	4801      	ldr	r0, [pc, #4]	; (80037c0 <mymyPrintHexBuffer+0x48>)
 80037ba:	f00f bc71 	b.w	80130a0 <puts>
 80037be:	bf00      	nop
 80037c0:	08014a2c 	.word	0x08014a2c
 80037c4:	08015178 	.word	0x08015178

080037c8 <McpsIndication>:
{
 80037c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ca:	4604      	mov	r4, r0
 80037cc:	b08b      	sub	sp, #44	; 0x2c
    printf( "\r\n### ===== MCPS-Indication ==== ###\r\n" );
 80037ce:	48a7      	ldr	r0, [pc, #668]	; (8003a6c <McpsIndication+0x2a4>)
 80037d0:	f00f fc66 	bl	80130a0 <puts>
    printf( "STATUS      : %s\r\n", myEventInfoStatusStrings[mcpsIndication->Status] );
 80037d4:	7862      	ldrb	r2, [r4, #1]
 80037d6:	4ba6      	ldr	r3, [pc, #664]	; (8003a70 <McpsIndication+0x2a8>)
 80037d8:	48a6      	ldr	r0, [pc, #664]	; (8003a74 <McpsIndication+0x2ac>)
 80037da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80037de:	f00f fbd9 	bl	8012f94 <iprintf>
    if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
 80037e2:	7860      	ldrb	r0, [r4, #1]
 80037e4:	2800      	cmp	r0, #0
 80037e6:	d149      	bne.n	800387c <McpsIndication+0xb4>
    if( mcpsIndication->IsUplinkTxPending == true )
 80037e8:	7963      	ldrb	r3, [r4, #5]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d076      	beq.n	80038dc <McpsIndication+0x114>
    if( ComplianceTest.Running == true )
 80037ee:	4ea2      	ldr	r6, [pc, #648]	; (8003a78 <McpsIndication+0x2b0>)
 80037f0:	7833      	ldrb	r3, [r6, #0]
 80037f2:	b113      	cbz	r3, 80037fa <McpsIndication+0x32>
        ComplianceTest.DownLinkCounter++;
 80037f4:	89b2      	ldrh	r2, [r6, #12]
 80037f6:	3201      	adds	r2, #1
 80037f8:	81b2      	strh	r2, [r6, #12]
    if( mcpsIndication->RxData == true )
 80037fa:	7b62      	ldrb	r2, [r4, #13]
 80037fc:	b132      	cbz	r2, 800380c <McpsIndication+0x44>
        switch( mcpsIndication->Port )
 80037fe:	78e2      	ldrb	r2, [r4, #3]
 8003800:	2a02      	cmp	r2, #2
 8003802:	d003      	beq.n	800380c <McpsIndication+0x44>
 8003804:	2ae0      	cmp	r2, #224	; 0xe0
 8003806:	d06c      	beq.n	80038e2 <McpsIndication+0x11a>
 8003808:	2a01      	cmp	r2, #1
 800380a:	d041      	beq.n	8003890 <McpsIndication+0xc8>
                    break;
 800380c:	466d      	mov	r5, sp
    const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };
 800380e:	4e9b      	ldr	r6, [pc, #620]	; (8003a7c <McpsIndication+0x2b4>)
 8003810:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003812:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003814:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003818:	e885 0003 	stmia.w	r5, {r0, r1}
    printf( "\r\n###### ===== DOWNLINK FRAME %lu ==== ######\r\n", mcpsIndication->DownLinkCounter );
 800381c:	6961      	ldr	r1, [r4, #20]
 800381e:	4898      	ldr	r0, [pc, #608]	; (8003a80 <McpsIndication+0x2b8>)
 8003820:	f00f fbb8 	bl	8012f94 <iprintf>
    printf( "RX WINDOW   : %s\r\n", slotStrings[mcpsIndication->RxSlot] );
 8003824:	7c63      	ldrb	r3, [r4, #17]
 8003826:	4897      	ldr	r0, [pc, #604]	; (8003a84 <McpsIndication+0x2bc>)
 8003828:	aa0a      	add	r2, sp, #40	; 0x28
 800382a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800382e:	f853 1c28 	ldr.w	r1, [r3, #-40]
 8003832:	f00f fbaf 	bl	8012f94 <iprintf>
    printf( "RX PORT     : %d\r\n", mcpsIndication->Port );
 8003836:	78e1      	ldrb	r1, [r4, #3]
 8003838:	4893      	ldr	r0, [pc, #588]	; (8003a88 <McpsIndication+0x2c0>)
 800383a:	f00f fbab 	bl	8012f94 <iprintf>
    printf( "RX DATA SIZE: %d\r\n", mcpsIndication->BufferSize);
 800383e:	7b21      	ldrb	r1, [r4, #12]
 8003840:	4892      	ldr	r0, [pc, #584]	; (8003a8c <McpsIndication+0x2c4>)
 8003842:	f00f fba7 	bl	8012f94 <iprintf>
    if( mcpsIndication->BufferSize != 0 )
 8003846:	7b23      	ldrb	r3, [r4, #12]
 8003848:	b9d3      	cbnz	r3, 8003880 <McpsIndication+0xb8>
    printf( "DATA RATE   : DR_%d\r\n", mcpsIndication->RxDatarate );
 800384a:	7921      	ldrb	r1, [r4, #4]
 800384c:	4890      	ldr	r0, [pc, #576]	; (8003a90 <McpsIndication+0x2c8>)
 800384e:	f00f fba1 	bl	8012f94 <iprintf>
    printf( "RX RSSI     : %d\r\n", mcpsIndication->Rssi );
 8003852:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003856:	488f      	ldr	r0, [pc, #572]	; (8003a94 <McpsIndication+0x2cc>)
 8003858:	f00f fb9c 	bl	8012f94 <iprintf>
    printf( "RX SNR      : %d\r\n", mcpsIndication->Snr );
 800385c:	f994 1010 	ldrsb.w	r1, [r4, #16]
 8003860:	488d      	ldr	r0, [pc, #564]	; (8003a98 <McpsIndication+0x2d0>)
 8003862:	f00f fb97 	bl	8012f94 <iprintf>
    App_vLoraRssiSet(mcpsIndication->Rssi);
 8003866:	f994 000e 	ldrsb.w	r0, [r4, #14]
 800386a:	f7fd faad 	bl	8000dc8 <App_vLoraRssiSet>
    App_vLoraSnrSet(mcpsIndication->Snr);
 800386e:	f994 0010 	ldrsb.w	r0, [r4, #16]
 8003872:	f7fd faaf 	bl	8000dd4 <App_vLoraSnrSet>
    printf( "\r\n" );
 8003876:	4889      	ldr	r0, [pc, #548]	; (8003a9c <McpsIndication+0x2d4>)
 8003878:	f00f fc12 	bl	80130a0 <puts>
}
 800387c:	b00b      	add	sp, #44	; 0x2c
 800387e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        printf( "RX DATA     : \r\n" );
 8003880:	4887      	ldr	r0, [pc, #540]	; (8003aa0 <McpsIndication+0x2d8>)
 8003882:	f00f fc0d 	bl	80130a0 <puts>
        mymyPrintHexBuffer( mcpsIndication->Buffer, mcpsIndication->BufferSize );
 8003886:	7b21      	ldrb	r1, [r4, #12]
 8003888:	68a0      	ldr	r0, [r4, #8]
 800388a:	f7ff ff75 	bl	8003778 <mymyPrintHexBuffer>
 800388e:	e7dc      	b.n	800384a <McpsIndication+0x82>
          if( mcpsIndication->BufferSize )
 8003890:	7b23      	ldrb	r3, [r4, #12]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0ba      	beq.n	800380c <McpsIndication+0x44>
            printf("Lora RX DATA: ");
 8003896:	4883      	ldr	r0, [pc, #524]	; (8003aa4 <McpsIndication+0x2dc>)
 8003898:	f00f fb7c 	bl	8012f94 <iprintf>
            for( i = 0; i < mcpsIndication->BufferSize; i++ )
 800389c:	7b23      	ldrb	r3, [r4, #12]
 800389e:	b15b      	cbz	r3, 80038b8 <McpsIndication+0xf0>
              printf("0x%x, ", mcpsIndication->Buffer[i]);
 80038a0:	4e81      	ldr	r6, [pc, #516]	; (8003aa8 <McpsIndication+0x2e0>)
            for( i = 0; i < mcpsIndication->BufferSize; i++ )
 80038a2:	2500      	movs	r5, #0
              printf("0x%x, ", mcpsIndication->Buffer[i]);
 80038a4:	68a3      	ldr	r3, [r4, #8]
 80038a6:	4630      	mov	r0, r6
 80038a8:	5d59      	ldrb	r1, [r3, r5]
 80038aa:	f00f fb73 	bl	8012f94 <iprintf>
            for( i = 0; i < mcpsIndication->BufferSize; i++ )
 80038ae:	3501      	adds	r5, #1
 80038b0:	7b22      	ldrb	r2, [r4, #12]
 80038b2:	b2ab      	uxth	r3, r5
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d8f5      	bhi.n	80038a4 <McpsIndication+0xdc>
            printf("\r\n");
 80038b8:	4878      	ldr	r0, [pc, #480]	; (8003a9c <McpsIndication+0x2d4>)
 80038ba:	f00f fbf1 	bl	80130a0 <puts>
            switch(mcpsIndication->Buffer[0])
 80038be:	68a3      	ldr	r3, [r4, #8]
 80038c0:	781a      	ldrb	r2, [r3, #0]
 80038c2:	2a01      	cmp	r2, #1
 80038c4:	f000 80c6 	beq.w	8003a54 <McpsIndication+0x28c>
 80038c8:	2a02      	cmp	r2, #2
 80038ca:	d19f      	bne.n	800380c <McpsIndication+0x44>
            	uint16_t u16Interval = ((mcpsIndication->Buffer[2]) << 8) | (mcpsIndication->Buffer[1]);
 80038cc:	7898      	ldrb	r0, [r3, #2]
 80038ce:	785b      	ldrb	r3, [r3, #1]
            	App_SeLoraCommInterval(u16Interval);
 80038d0:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80038d4:	f7fd fab4 	bl	8000e40 <App_SeLoraCommInterval>
            if( mcpsIndication->BufferSize == 1 )
 80038d8:	466d      	mov	r5, sp
            	break;
 80038da:	e798      	b.n	800380e <McpsIndication+0x46>
        OnTxNextPacketTimerEvent( NULL );
 80038dc:	f7ff fe92 	bl	8003604 <OnTxNextPacketTimerEvent>
 80038e0:	e785      	b.n	80037ee <McpsIndication+0x26>
            if( ComplianceTest.Running == false )
 80038e2:	bb53      	cbnz	r3, 800393a <McpsIndication+0x172>
                if( ( mcpsIndication->BufferSize == 4 ) &&
 80038e4:	7b21      	ldrb	r1, [r4, #12]
 80038e6:	2904      	cmp	r1, #4
 80038e8:	d190      	bne.n	800380c <McpsIndication+0x44>
                    ( mcpsIndication->Buffer[0] == 0x01 ) &&
 80038ea:	68a1      	ldr	r1, [r4, #8]
                if( ( mcpsIndication->BufferSize == 4 ) &&
 80038ec:	7808      	ldrb	r0, [r1, #0]
 80038ee:	2801      	cmp	r0, #1
 80038f0:	d18c      	bne.n	800380c <McpsIndication+0x44>
                    ( mcpsIndication->Buffer[0] == 0x01 ) &&
 80038f2:	7848      	ldrb	r0, [r1, #1]
 80038f4:	2801      	cmp	r0, #1
 80038f6:	d189      	bne.n	800380c <McpsIndication+0x44>
                    ( mcpsIndication->Buffer[1] == 0x01 ) &&
 80038f8:	7888      	ldrb	r0, [r1, #2]
 80038fa:	2801      	cmp	r0, #1
 80038fc:	d186      	bne.n	800380c <McpsIndication+0x44>
                    ( mcpsIndication->Buffer[2] == 0x01 ) &&
 80038fe:	78c8      	ldrb	r0, [r1, #3]
 8003900:	2801      	cmp	r0, #1
 8003902:	d183      	bne.n	800380c <McpsIndication+0x44>
                    AppDataSizeBackup = AppDataSize;
 8003904:	4969      	ldr	r1, [pc, #420]	; (8003aac <McpsIndication+0x2e4>)
                    mibReq.Param.AdrEnable = true;
 8003906:	f88d 0004 	strb.w	r0, [sp, #4]
                    AppDataSize = 2;
 800390a:	2002      	movs	r0, #2
                    AppDataSizeBackup = AppDataSize;
 800390c:	f891 c000 	ldrb.w	ip, [r1]
 8003910:	4d67      	ldr	r5, [pc, #412]	; (8003ab0 <McpsIndication+0x2e8>)
                    AppDataSize = 2;
 8003912:	7008      	strb	r0, [r1, #0]
                    IsTxConfirmed = false;
 8003914:	4967      	ldr	r1, [pc, #412]	; (8003ab4 <McpsIndication+0x2ec>)
                    AppDataSizeBackup = AppDataSize;
 8003916:	f885 c000 	strb.w	ip, [r5]
                    IsTxConfirmed = false;
 800391a:	700b      	strb	r3, [r1, #0]
                    AppPort = 224;
 800391c:	4f66      	ldr	r7, [pc, #408]	; (8003ab8 <McpsIndication+0x2f0>)
                    ComplianceTest.DownLinkCounter = 0;
 800391e:	60f3      	str	r3, [r6, #12]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 8003920:	466d      	mov	r5, sp
                    ComplianceTest.Running = true;
 8003922:	f240 1101 	movw	r1, #257	; 0x101
                    ComplianceTest.NbGateways = 0;
 8003926:	7433      	strb	r3, [r6, #16]
                    ComplianceTest.Running = true;
 8003928:	8031      	strh	r1, [r6, #0]
                    mibReq.Type = MIB_ADR;
 800392a:	2305      	movs	r3, #5
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800392c:	4628      	mov	r0, r5
                    AppPort = 224;
 800392e:	703a      	strb	r2, [r7, #0]
                    mibReq.Type = MIB_ADR;
 8003930:	f88d 3000 	strb.w	r3, [sp]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 8003934:	f003 f870 	bl	8006a18 <LoRaMacMibSetRequestConfirm>
 8003938:	e769      	b.n	800380e <McpsIndication+0x46>
                ComplianceTest.State = mcpsIndication->Buffer[0];
 800393a:	68a2      	ldr	r2, [r4, #8]
 800393c:	7813      	ldrb	r3, [r2, #0]
 800393e:	7073      	strb	r3, [r6, #1]
                switch( ComplianceTest.State )
 8003940:	2b08      	cmp	r3, #8
 8003942:	f63f af63 	bhi.w	800380c <McpsIndication+0x44>
 8003946:	e8df f003 	tbb	[pc, r3]
 800394a:	464b      	.short	0x464b
 800394c:	616b3a40 	.word	0x616b3a40
 8003950:	1722      	.short	0x1722
 8003952:	05          	.byte	0x05
 8003953:	00          	.byte	0x00
                        LoRaMacStatus_t status = LoRaMacMlmeRequest( &mlmeReq );
 8003954:	466d      	mov	r5, sp
                        mlmeReq.Type = MLME_DEVICE_TIME;
 8003956:	2308      	movs	r3, #8
                        LoRaMacStatus_t status = LoRaMacMlmeRequest( &mlmeReq );
 8003958:	4628      	mov	r0, r5
                        mlmeReq.Type = MLME_DEVICE_TIME;
 800395a:	f88d 3000 	strb.w	r3, [sp]
                        LoRaMacStatus_t status = LoRaMacMlmeRequest( &mlmeReq );
 800395e:	f003 fbb3 	bl	80070c8 <LoRaMacMlmeRequest>
 8003962:	4606      	mov	r6, r0
                        printf( "\r\n###### ===== MLME-Request - MLME_DEVICE_TIME ==== ######\r\n" );
 8003964:	4855      	ldr	r0, [pc, #340]	; (8003abc <McpsIndication+0x2f4>)
 8003966:	f00f fb9b 	bl	80130a0 <puts>
                        printf( "STATUS      : %s\r\n", myMacStatusStrings[status] );
 800396a:	4b55      	ldr	r3, [pc, #340]	; (8003ac0 <McpsIndication+0x2f8>)
 800396c:	4841      	ldr	r0, [pc, #260]	; (8003a74 <McpsIndication+0x2ac>)
 800396e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8003972:	f00f fb0f 	bl	8012f94 <iprintf>
                    break;
 8003976:	e74a      	b.n	800380e <McpsIndication+0x46>
                        if( mcpsIndication->BufferSize == 3 )
 8003978:	7b23      	ldrb	r3, [r4, #12]
 800397a:	2b03      	cmp	r3, #3
 800397c:	f000 80a8 	beq.w	8003ad0 <McpsIndication+0x308>
                        else if( mcpsIndication->BufferSize == 7 )
 8003980:	2b07      	cmp	r3, #7
 8003982:	f000 80bd 	beq.w	8003b00 <McpsIndication+0x338>
 8003986:	466d      	mov	r5, sp
                        ComplianceTest.State = 1;
 8003988:	2301      	movs	r3, #1
 800398a:	7073      	strb	r3, [r6, #1]
                    break;
 800398c:	e73f      	b.n	800380e <McpsIndication+0x46>
                        AppDataSize = AppDataSizeBackup;
 800398e:	4848      	ldr	r0, [pc, #288]	; (8003ab0 <McpsIndication+0x2e8>)
 8003990:	4b46      	ldr	r3, [pc, #280]	; (8003aac <McpsIndication+0x2e4>)
                        IsTxConfirmed = LORAWAN_CONFIRMED_MSG_ON;
 8003992:	4948      	ldr	r1, [pc, #288]	; (8003ab4 <McpsIndication+0x2ec>)
                        AppDataSize = AppDataSizeBackup;
 8003994:	7800      	ldrb	r0, [r0, #0]
                        AppPort = LORAWAN_APP_PORT;
 8003996:	4a48      	ldr	r2, [pc, #288]	; (8003ab8 <McpsIndication+0x2f0>)
                        AppDataSize = AppDataSizeBackup;
 8003998:	7018      	strb	r0, [r3, #0]
                        LoRaMacMibSetRequestConfirm( &mibReq );
 800399a:	466d      	mov	r5, sp
                        IsTxConfirmed = LORAWAN_CONFIRMED_MSG_ON;
 800399c:	2300      	movs	r3, #0
 800399e:	700b      	strb	r3, [r1, #0]
                        ComplianceTest.DownLinkCounter = 0;
 80039a0:	81b3      	strh	r3, [r6, #12]
                        AppPort = LORAWAN_APP_PORT;
 80039a2:	2101      	movs	r1, #1
                        ComplianceTest.Running = false;
 80039a4:	7033      	strb	r3, [r6, #0]
                        mibReq.Param.AdrEnable = LORAWAN_ADR_ON;
 80039a6:	f88d 3004 	strb.w	r3, [sp, #4]
                        LoRaMacMibSetRequestConfirm( &mibReq );
 80039aa:	4628      	mov	r0, r5
                        mibReq.Type = MIB_ADR;
 80039ac:	2305      	movs	r3, #5
                        AppPort = LORAWAN_APP_PORT;
 80039ae:	7011      	strb	r1, [r2, #0]
                        mibReq.Type = MIB_ADR;
 80039b0:	f88d 3000 	strb.w	r3, [sp]
                        LoRaMacMibSetRequestConfirm( &mibReq );
 80039b4:	f003 f830 	bl	8006a18 <LoRaMacMibSetRequestConfirm>
                        JoinNetwork( );
 80039b8:	f7ff fde0 	bl	800357c <JoinNetwork>
                    break;
 80039bc:	e727      	b.n	800380e <McpsIndication+0x46>
                    IsTxConfirmed = false;
 80039be:	4a3d      	ldr	r2, [pc, #244]	; (8003ab4 <McpsIndication+0x2ec>)
 80039c0:	2100      	movs	r1, #0
                    ComplianceTest.State = 1;
 80039c2:	2301      	movs	r3, #1
                    IsTxConfirmed = false;
 80039c4:	7011      	strb	r1, [r2, #0]
                    ComplianceTest.State = 1;
 80039c6:	7073      	strb	r3, [r6, #1]
 80039c8:	e720      	b.n	800380c <McpsIndication+0x44>
                    IsTxConfirmed = true;
 80039ca:	4a3a      	ldr	r2, [pc, #232]	; (8003ab4 <McpsIndication+0x2ec>)
 80039cc:	2301      	movs	r3, #1
 80039ce:	7013      	strb	r3, [r2, #0]
                    ComplianceTest.State = 1;
 80039d0:	7073      	strb	r3, [r6, #1]
                    break;
 80039d2:	466d      	mov	r5, sp
 80039d4:	e71b      	b.n	800380e <McpsIndication+0x46>
                    AppDataSize = 2;
 80039d6:	4b35      	ldr	r3, [pc, #212]	; (8003aac <McpsIndication+0x2e4>)
 80039d8:	2202      	movs	r2, #2
 80039da:	701a      	strb	r2, [r3, #0]
                    break;
 80039dc:	466d      	mov	r5, sp
 80039de:	e716      	b.n	800380e <McpsIndication+0x46>
                    AppDataSize = AppDataSizeBackup;
 80039e0:	4833      	ldr	r0, [pc, #204]	; (8003ab0 <McpsIndication+0x2e8>)
 80039e2:	4b32      	ldr	r3, [pc, #200]	; (8003aac <McpsIndication+0x2e4>)
 80039e4:	7800      	ldrb	r0, [r0, #0]
                    IsTxConfirmed = LORAWAN_CONFIRMED_MSG_ON;
 80039e6:	4933      	ldr	r1, [pc, #204]	; (8003ab4 <McpsIndication+0x2ec>)
                    AppDataSize = AppDataSizeBackup;
 80039e8:	7018      	strb	r0, [r3, #0]
                    AppPort = LORAWAN_APP_PORT;
 80039ea:	4a33      	ldr	r2, [pc, #204]	; (8003ab8 <McpsIndication+0x2f0>)
                    IsTxConfirmed = LORAWAN_CONFIRMED_MSG_ON;
 80039ec:	2300      	movs	r3, #0
                    LoRaMacMibSetRequestConfirm( &mibReq );
 80039ee:	466d      	mov	r5, sp
                    IsTxConfirmed = LORAWAN_CONFIRMED_MSG_ON;
 80039f0:	700b      	strb	r3, [r1, #0]
                    ComplianceTest.DownLinkCounter = 0;
 80039f2:	81b3      	strh	r3, [r6, #12]
                    ComplianceTest.Running = false;
 80039f4:	7033      	strb	r3, [r6, #0]
                    AppPort = LORAWAN_APP_PORT;
 80039f6:	2101      	movs	r1, #1
                    mibReq.Param.AdrEnable = LORAWAN_ADR_ON;
 80039f8:	f88d 3004 	strb.w	r3, [sp, #4]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 80039fc:	4628      	mov	r0, r5
                    mibReq.Type = MIB_ADR;
 80039fe:	2305      	movs	r3, #5
                    AppPort = LORAWAN_APP_PORT;
 8003a00:	7011      	strb	r1, [r2, #0]
                    mibReq.Type = MIB_ADR;
 8003a02:	f88d 3000 	strb.w	r3, [sp]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 8003a06:	f003 f807 	bl	8006a18 <LoRaMacMibSetRequestConfirm>
                    break;
 8003a0a:	e700      	b.n	800380e <McpsIndication+0x46>
                        LoRaMacStatus_t status = LoRaMacMlmeRequest( &mlmeReq );
 8003a0c:	466d      	mov	r5, sp
                        mlmeReq.Type = MLME_LINK_CHECK;
 8003a0e:	2304      	movs	r3, #4
                        LoRaMacStatus_t status = LoRaMacMlmeRequest( &mlmeReq );
 8003a10:	4628      	mov	r0, r5
                        mlmeReq.Type = MLME_LINK_CHECK;
 8003a12:	f88d 3000 	strb.w	r3, [sp]
                        LoRaMacStatus_t status = LoRaMacMlmeRequest( &mlmeReq );
 8003a16:	f003 fb57 	bl	80070c8 <LoRaMacMlmeRequest>
 8003a1a:	4606      	mov	r6, r0
                        printf( "\r\n###### ===== MLME-Request - MLME_LINK_CHECK ==== ######\r\n" );
 8003a1c:	4829      	ldr	r0, [pc, #164]	; (8003ac4 <McpsIndication+0x2fc>)
 8003a1e:	e7a2      	b.n	8003966 <McpsIndication+0x19e>
                    AppDataSize = mcpsIndication->BufferSize;
 8003a20:	7b23      	ldrb	r3, [r4, #12]
 8003a22:	4822      	ldr	r0, [pc, #136]	; (8003aac <McpsIndication+0x2e4>)
                    AppDataBuffer[0] = 4;
 8003a24:	4928      	ldr	r1, [pc, #160]	; (8003ac8 <McpsIndication+0x300>)
                    AppDataSize = mcpsIndication->BufferSize;
 8003a26:	7003      	strb	r3, [r0, #0]
                    for( uint8_t i = 1; i < MIN( AppDataSize, LORAWAN_APP_DATA_MAX_SIZE ); i++ )
 8003a28:	2bf2      	cmp	r3, #242	; 0xf2
 8003a2a:	461d      	mov	r5, r3
                    AppDataBuffer[0] = 4;
 8003a2c:	f04f 0004 	mov.w	r0, #4
                    for( uint8_t i = 1; i < MIN( AppDataSize, LORAWAN_APP_DATA_MAX_SIZE ); i++ )
 8003a30:	bf28      	it	cs
 8003a32:	25f2      	movcs	r5, #242	; 0xf2
 8003a34:	2b01      	cmp	r3, #1
                    AppDataBuffer[0] = 4;
 8003a36:	7008      	strb	r0, [r1, #0]
                    for( uint8_t i = 1; i < MIN( AppDataSize, LORAWAN_APP_DATA_MAX_SIZE ); i++ )
 8003a38:	bf88      	it	hi
 8003a3a:	2301      	movhi	r3, #1
 8003a3c:	d801      	bhi.n	8003a42 <McpsIndication+0x27a>
 8003a3e:	e6e5      	b.n	800380c <McpsIndication+0x44>
 8003a40:	68a2      	ldr	r2, [r4, #8]
                        AppDataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8003a42:	5cd2      	ldrb	r2, [r2, r3]
 8003a44:	3301      	adds	r3, #1
                    for( uint8_t i = 1; i < MIN( AppDataSize, LORAWAN_APP_DATA_MAX_SIZE ); i++ )
 8003a46:	b2d8      	uxtb	r0, r3
                        AppDataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8003a48:	3201      	adds	r2, #1
                    for( uint8_t i = 1; i < MIN( AppDataSize, LORAWAN_APP_DATA_MAX_SIZE ); i++ )
 8003a4a:	42a8      	cmp	r0, r5
                        AppDataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8003a4c:	f801 2f01 	strb.w	r2, [r1, #1]!
                    for( uint8_t i = 1; i < MIN( AppDataSize, LORAWAN_APP_DATA_MAX_SIZE ); i++ )
 8003a50:	d3f6      	bcc.n	8003a40 <McpsIndication+0x278>
 8003a52:	e6db      	b.n	800380c <McpsIndication+0x44>
            	if(mcpsIndication->Buffer[1] == 0x55)
 8003a54:	785b      	ldrb	r3, [r3, #1]
 8003a56:	2b55      	cmp	r3, #85	; 0x55
 8003a58:	f47f aed8 	bne.w	800380c <McpsIndication+0x44>
                	u32LoraWanSelector = 0xAA;
 8003a5c:	4b1b      	ldr	r3, [pc, #108]	; (8003acc <McpsIndication+0x304>)
 8003a5e:	22aa      	movs	r2, #170	; 0xaa
                	App_vLoraModuleSelectorUpdate(LORA_MODULE_PING_PONG);
 8003a60:	2002      	movs	r0, #2
                	u32LoraWanSelector = 0xAA;
 8003a62:	601a      	str	r2, [r3, #0]
                	App_vLoraModuleSelectorUpdate(LORA_MODULE_PING_PONG);
 8003a64:	466d      	mov	r5, sp
 8003a66:	f7fd f887 	bl	8000b78 <App_vLoraModuleSelectorUpdate>
 8003a6a:	e6d0      	b.n	800380e <McpsIndication+0x46>
 8003a6c:	08015180 	.word	0x08015180
 8003a70:	20000038 	.word	0x20000038
 8003a74:	08015080 	.word	0x08015080
 8003a78:	20000a50 	.word	0x20000a50
 8003a7c:	08014410 	.word	0x08014410
 8003a80:	080152a8 	.word	0x080152a8
 8003a84:	080152d8 	.word	0x080152d8
 8003a88:	080152ec 	.word	0x080152ec
 8003a8c:	08015300 	.word	0x08015300
 8003a90:	08015160 	.word	0x08015160
 8003a94:	08015324 	.word	0x08015324
 8003a98:	08015338 	.word	0x08015338
 8003a9c:	08014a2c 	.word	0x08014a2c
 8003aa0:	08015314 	.word	0x08015314
 8003aa4:	080151a8 	.word	0x080151a8
 8003aa8:	080151b8 	.word	0x080151b8
 8003aac:	20000012 	.word	0x20000012
 8003ab0:	20000013 	.word	0x20000013
 8003ab4:	20000534 	.word	0x20000534
 8003ab8:	20000024 	.word	0x20000024
 8003abc:	0801526c 	.word	0x0801526c
 8003ac0:	2000007c 	.word	0x2000007c
 8003ac4:	080151c0 	.word	0x080151c0
 8003ac8:	20000440 	.word	0x20000440
 8003acc:	2000033c 	.word	0x2000033c
                            mlmeReq.Type = MLME_TXCW;
 8003ad0:	2305      	movs	r3, #5
 8003ad2:	f88d 3000 	strb.w	r3, [sp]
                            mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8003ad6:	7851      	ldrb	r1, [r2, #1]
 8003ad8:	7893      	ldrb	r3, [r2, #2]
                            LoRaMacStatus_t status = LoRaMacMlmeRequest( &mlmeReq );
 8003ada:	466d      	mov	r5, sp
                            mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8003adc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                            LoRaMacStatus_t status = LoRaMacMlmeRequest( &mlmeReq );
 8003ae0:	4628      	mov	r0, r5
                            mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8003ae2:	f8ad 3004 	strh.w	r3, [sp, #4]
                            LoRaMacStatus_t status = LoRaMacMlmeRequest( &mlmeReq );
 8003ae6:	f003 faef 	bl	80070c8 <LoRaMacMlmeRequest>
 8003aea:	4607      	mov	r7, r0
                            printf( "\r\n###### ===== MLME-Request - MLME_TXCW ==== ######\r\n" );
 8003aec:	4813      	ldr	r0, [pc, #76]	; (8003b3c <McpsIndication+0x374>)
                            printf( "\r\n###### ===== MLME-Request - MLME_TXCW1 ==== ######\r\n" );
 8003aee:	f00f fad7 	bl	80130a0 <puts>
                            printf( "STATUS      : %s\r\n", myMacStatusStrings[status] );
 8003af2:	4b13      	ldr	r3, [pc, #76]	; (8003b40 <McpsIndication+0x378>)
 8003af4:	4813      	ldr	r0, [pc, #76]	; (8003b44 <McpsIndication+0x37c>)
 8003af6:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8003afa:	f00f fa4b 	bl	8012f94 <iprintf>
 8003afe:	e743      	b.n	8003988 <McpsIndication+0x1c0>
                            mlmeReq.Type = MLME_TXCW;
 8003b00:	2305      	movs	r3, #5
 8003b02:	f88d 3000 	strb.w	r3, [sp]
                            mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8003b06:	7851      	ldrb	r1, [r2, #1]
 8003b08:	7893      	ldrb	r3, [r2, #2]
 8003b0a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003b0e:	f8ad 3004 	strh.w	r3, [sp, #4]
                            mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8003b12:	7913      	ldrb	r3, [r2, #4]
 8003b14:	78d0      	ldrb	r0, [r2, #3]
 8003b16:	7951      	ldrb	r1, [r2, #5]
 8003b18:	021b      	lsls	r3, r3, #8
 8003b1a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003b1e:	430b      	orrs	r3, r1
 8003b20:	2164      	movs	r1, #100	; 0x64
 8003b22:	fb01 f303 	mul.w	r3, r1, r3
 8003b26:	9302      	str	r3, [sp, #8]
                            LoRaMacStatus_t status = LoRaMacMlmeRequest( &mlmeReq );
 8003b28:	466d      	mov	r5, sp
                            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8003b2a:	7993      	ldrb	r3, [r2, #6]
 8003b2c:	f88d 300c 	strb.w	r3, [sp, #12]
                            LoRaMacStatus_t status = LoRaMacMlmeRequest( &mlmeReq );
 8003b30:	4628      	mov	r0, r5
 8003b32:	f003 fac9 	bl	80070c8 <LoRaMacMlmeRequest>
 8003b36:	4607      	mov	r7, r0
                            printf( "\r\n###### ===== MLME-Request - MLME_TXCW1 ==== ######\r\n" );
 8003b38:	4803      	ldr	r0, [pc, #12]	; (8003b48 <McpsIndication+0x380>)
 8003b3a:	e7d8      	b.n	8003aee <McpsIndication+0x326>
 8003b3c:	080151fc 	.word	0x080151fc
 8003b40:	2000007c 	.word	0x2000007c
 8003b44:	08015080 	.word	0x08015080
 8003b48:	08015234 	.word	0x08015234

08003b4c <McpsConfirm>:
{
 8003b4c:	b530      	push	{r4, r5, lr}
 8003b4e:	4604      	mov	r4, r0
 8003b50:	b095      	sub	sp, #84	; 0x54
    printf( "\r\n###### ===== MCPS-Confirm ==== ######\r\n" );
 8003b52:	483f      	ldr	r0, [pc, #252]	; (8003c50 <McpsConfirm+0x104>)
    printf( "TX PORT     : %d\r\n", AppData.Port );
 8003b54:	4d3f      	ldr	r5, [pc, #252]	; (8003c54 <McpsConfirm+0x108>)
    printf( "\r\n###### ===== MCPS-Confirm ==== ######\r\n" );
 8003b56:	f00f faa3 	bl	80130a0 <puts>
    printf( "STATUS      : %s\r\n", myEventInfoStatusStrings[mcpsConfirm->Status] );
 8003b5a:	7862      	ldrb	r2, [r4, #1]
 8003b5c:	4b3e      	ldr	r3, [pc, #248]	; (8003c58 <McpsConfirm+0x10c>)
 8003b5e:	483f      	ldr	r0, [pc, #252]	; (8003c5c <McpsConfirm+0x110>)
 8003b60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b64:	f00f fa16 	bl	8012f94 <iprintf>
    mibReq.Type = MIB_DEVICE_CLASS;
 8003b68:	2300      	movs	r3, #0
    LoRaMacMibGetRequestConfirm( &mibReq );
 8003b6a:	a80a      	add	r0, sp, #40	; 0x28
    mibReq.Type = MIB_DEVICE_CLASS;
 8003b6c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    LoRaMacMibGetRequestConfirm( &mibReq );
 8003b70:	f002 fdfe 	bl	8006770 <LoRaMacMibGetRequestConfirm>
    printf( "\r\n###### ===== UPLINK FRAME %lu ==== ######\r\n", mcpsConfirm->UpLinkCounter );
 8003b74:	68e1      	ldr	r1, [r4, #12]
 8003b76:	483a      	ldr	r0, [pc, #232]	; (8003c60 <McpsConfirm+0x114>)
 8003b78:	f00f fa0c 	bl	8012f94 <iprintf>
    printf( "\r\n" );
 8003b7c:	4839      	ldr	r0, [pc, #228]	; (8003c64 <McpsConfirm+0x118>)
 8003b7e:	f00f fa8f 	bl	80130a0 <puts>
    printf( "CLASS       : %c\r\n", "ABC"[mibReq.Param.Class] );
 8003b82:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8003b86:	4a38      	ldr	r2, [pc, #224]	; (8003c68 <McpsConfirm+0x11c>)
 8003b88:	4838      	ldr	r0, [pc, #224]	; (8003c6c <McpsConfirm+0x120>)
 8003b8a:	5cd1      	ldrb	r1, [r2, r3]
 8003b8c:	f00f fa02 	bl	8012f94 <iprintf>
    printf( "\r\n" );
 8003b90:	4834      	ldr	r0, [pc, #208]	; (8003c64 <McpsConfirm+0x118>)
 8003b92:	f00f fa85 	bl	80130a0 <puts>
    printf( "TX PORT     : %d\r\n", AppData.Port );
 8003b96:	7869      	ldrb	r1, [r5, #1]
 8003b98:	4835      	ldr	r0, [pc, #212]	; (8003c70 <McpsConfirm+0x124>)
 8003b9a:	f00f f9fb 	bl	8012f94 <iprintf>
    printf( "TX DATA SIZE: %d\r\n", AppData.BufferSize);
 8003b9e:	78a9      	ldrb	r1, [r5, #2]
 8003ba0:	4834      	ldr	r0, [pc, #208]	; (8003c74 <McpsConfirm+0x128>)
 8003ba2:	f00f f9f7 	bl	8012f94 <iprintf>
    if( AppData.BufferSize != 0 )
 8003ba6:	78ab      	ldrb	r3, [r5, #2]
 8003ba8:	b9fb      	cbnz	r3, 8003bea <McpsConfirm+0x9e>
    printf( "\r\n" );
 8003baa:	482e      	ldr	r0, [pc, #184]	; (8003c64 <McpsConfirm+0x118>)
 8003bac:	f00f fa78 	bl	80130a0 <puts>
    printf( "DATA RATE   : DR_%d\r\n", mcpsConfirm->Datarate );
 8003bb0:	78a1      	ldrb	r1, [r4, #2]
 8003bb2:	4831      	ldr	r0, [pc, #196]	; (8003c78 <McpsConfirm+0x12c>)
 8003bb4:	f00f f9ee 	bl	8012f94 <iprintf>
    mibGet.Type  = MIB_CHANNELS;
 8003bb8:	231e      	movs	r3, #30
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
 8003bba:	4668      	mov	r0, sp
    mibGet.Type  = MIB_CHANNELS;
 8003bbc:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
 8003bc0:	f002 fdd6 	bl	8006770 <LoRaMacMibGetRequestConfirm>
 8003bc4:	2800      	cmp	r0, #0
 8003bc6:	d035      	beq.n	8003c34 <McpsConfirm+0xe8>
    printf( "TX POWER    : %d\r\n", mcpsConfirm->TxPower );
 8003bc8:	f994 1003 	ldrsb.w	r1, [r4, #3]
 8003bcc:	482b      	ldr	r0, [pc, #172]	; (8003c7c <McpsConfirm+0x130>)
 8003bce:	f00f f9e1 	bl	8012f94 <iprintf>
    mibGet.Type  = MIB_CHANNELS_MASK;
 8003bd2:	2323      	movs	r3, #35	; 0x23
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
 8003bd4:	4668      	mov	r0, sp
    mibGet.Type  = MIB_CHANNELS_MASK;
 8003bd6:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
 8003bda:	f002 fdc9 	bl	8006770 <LoRaMacMibGetRequestConfirm>
 8003bde:	b1c8      	cbz	r0, 8003c14 <McpsConfirm+0xc8>
    printf( "\r\n" );
 8003be0:	4820      	ldr	r0, [pc, #128]	; (8003c64 <McpsConfirm+0x118>)
 8003be2:	f00f fa5d 	bl	80130a0 <puts>
}
 8003be6:	b015      	add	sp, #84	; 0x54
 8003be8:	bd30      	pop	{r4, r5, pc}
        printf( "TX DATA     : " );
 8003bea:	4825      	ldr	r0, [pc, #148]	; (8003c80 <McpsConfirm+0x134>)
 8003bec:	f00f f9d2 	bl	8012f94 <iprintf>
        if( AppData.MsgType == LORAMAC_HANDLER_CONFIRMED_MSG )
 8003bf0:	782b      	ldrb	r3, [r5, #0]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d128      	bne.n	8003c48 <McpsConfirm+0xfc>
            printf( "CONFIRMED - %s\r\n", ( mcpsConfirm->AckReceived != 0 ) ? "ACK" : "NACK" );
 8003bf6:	7921      	ldrb	r1, [r4, #4]
 8003bf8:	4a22      	ldr	r2, [pc, #136]	; (8003c84 <McpsConfirm+0x138>)
 8003bfa:	4b23      	ldr	r3, [pc, #140]	; (8003c88 <McpsConfirm+0x13c>)
 8003bfc:	4823      	ldr	r0, [pc, #140]	; (8003c8c <McpsConfirm+0x140>)
 8003bfe:	2900      	cmp	r1, #0
 8003c00:	bf14      	ite	ne
 8003c02:	4611      	movne	r1, r2
 8003c04:	4619      	moveq	r1, r3
 8003c06:	f00f f9c5 	bl	8012f94 <iprintf>
        mymyPrintHexBuffer( AppData.Buffer, AppData.BufferSize );
 8003c0a:	78a9      	ldrb	r1, [r5, #2]
 8003c0c:	6868      	ldr	r0, [r5, #4]
 8003c0e:	f7ff fdb3 	bl	8003778 <mymyPrintHexBuffer>
 8003c12:	e7ca      	b.n	8003baa <McpsConfirm+0x5e>
        printf("CHANNEL MASK: ");
 8003c14:	481e      	ldr	r0, [pc, #120]	; (8003c90 <McpsConfirm+0x144>)
 8003c16:	f00f f9bd 	bl	8012f94 <iprintf>
            printf("%04X ", mibGet.Param.ChannelsMask[i] );
 8003c1a:	9b01      	ldr	r3, [sp, #4]
 8003c1c:	481d      	ldr	r0, [pc, #116]	; (8003c94 <McpsConfirm+0x148>)
 8003c1e:	8819      	ldrh	r1, [r3, #0]
 8003c20:	f00f f9b8 	bl	8012f94 <iprintf>
        printf("\r\n");
 8003c24:	480f      	ldr	r0, [pc, #60]	; (8003c64 <McpsConfirm+0x118>)
 8003c26:	f00f fa3b 	bl	80130a0 <puts>
    printf( "\r\n" );
 8003c2a:	480e      	ldr	r0, [pc, #56]	; (8003c64 <McpsConfirm+0x118>)
 8003c2c:	f00f fa38 	bl	80130a0 <puts>
}
 8003c30:	b015      	add	sp, #84	; 0x54
 8003c32:	bd30      	pop	{r4, r5, pc}
        printf( "U/L FREQ    : %lu\r\n", mibGet.Param.ChannelList[mcpsConfirm->Channel].Frequency );
 8003c34:	6923      	ldr	r3, [r4, #16]
 8003c36:	9a01      	ldr	r2, [sp, #4]
 8003c38:	4817      	ldr	r0, [pc, #92]	; (8003c98 <McpsConfirm+0x14c>)
 8003c3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003c3e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003c42:	f00f f9a7 	bl	8012f94 <iprintf>
 8003c46:	e7bf      	b.n	8003bc8 <McpsConfirm+0x7c>
            printf( "UNCONFIRMED\r\n" );
 8003c48:	4814      	ldr	r0, [pc, #80]	; (8003c9c <McpsConfirm+0x150>)
 8003c4a:	f00f fa29 	bl	80130a0 <puts>
 8003c4e:	e7dc      	b.n	8003c0a <McpsConfirm+0xbe>
 8003c50:	08015358 	.word	0x08015358
 8003c54:	20000438 	.word	0x20000438
 8003c58:	20000038 	.word	0x20000038
 8003c5c:	08015080 	.word	0x08015080
 8003c60:	08015384 	.word	0x08015384
 8003c64:	08014a2c 	.word	0x08014a2c
 8003c68:	08015464 	.word	0x08015464
 8003c6c:	080153b4 	.word	0x080153b4
 8003c70:	080153c8 	.word	0x080153c8
 8003c74:	080153dc 	.word	0x080153dc
 8003c78:	08015160 	.word	0x08015160
 8003c7c:	08015438 	.word	0x08015438
 8003c80:	080153f0 	.word	0x080153f0
 8003c84:	0801534c 	.word	0x0801534c
 8003c88:	08015350 	.word	0x08015350
 8003c8c:	08015400 	.word	0x08015400
 8003c90:	0801544c 	.word	0x0801544c
 8003c94:	0801545c 	.word	0x0801545c
 8003c98:	08015424 	.word	0x08015424
 8003c9c:	08015414 	.word	0x08015414

08003ca0 <lorawan_init>:
LoRaMacPrimitives_t g_macPrimitives;
LoRaMacCallback_t g_macCallbacks;
MibRequestConfirm_t g_mibReq;

int lorawan_init(void)
{
 8003ca0:	b538      	push	{r3, r4, r5, lr}

    LoRaMacStatus_t status;

    printf("#========== Jump into Lorawan Init ==============#\r\n");
 8003ca2:	4818      	ldr	r0, [pc, #96]	; (8003d04 <lorawan_init+0x64>)
    BoardInitMcu( );
    BoardInitPeriph( );

//    RtcInit();

    g_macPrimitives.MacMcpsConfirm = McpsConfirm;
 8003ca4:	4c18      	ldr	r4, [pc, #96]	; (8003d08 <lorawan_init+0x68>)
    g_macPrimitives.MacMcpsIndication = McpsIndication;
    g_macPrimitives.MacMlmeConfirm = MlmeConfirm;
    g_macPrimitives.MacMlmeIndication = MlmeIndication;
    g_macCallbacks.GetBatteryLevel = NULL;
 8003ca6:	4d19      	ldr	r5, [pc, #100]	; (8003d0c <lorawan_init+0x6c>)
    printf("#========== Jump into Lorawan Init ==============#\r\n");
 8003ca8:	f00f f9fa 	bl	80130a0 <puts>
    BoardInitMcu( );
 8003cac:	f7fe fafc 	bl	80022a8 <BoardInitMcu>
    BoardInitPeriph( );
 8003cb0:	f7fe faf8 	bl	80022a4 <BoardInitPeriph>
    g_macPrimitives.MacMcpsConfirm = McpsConfirm;
 8003cb4:	4a16      	ldr	r2, [pc, #88]	; (8003d10 <lorawan_init+0x70>)
    g_macPrimitives.MacMcpsIndication = McpsIndication;
 8003cb6:	4b17      	ldr	r3, [pc, #92]	; (8003d14 <lorawan_init+0x74>)
    g_macPrimitives.MacMlmeConfirm = MlmeConfirm;
 8003cb8:	4817      	ldr	r0, [pc, #92]	; (8003d18 <lorawan_init+0x78>)
    g_macPrimitives.MacMlmeIndication = MlmeIndication;
 8003cba:	4918      	ldr	r1, [pc, #96]	; (8003d1c <lorawan_init+0x7c>)
    g_macPrimitives.MacMcpsConfirm = McpsConfirm;
 8003cbc:	6022      	str	r2, [r4, #0]
    g_macPrimitives.MacMcpsIndication = McpsIndication;
 8003cbe:	6063      	str	r3, [r4, #4]
    g_macCallbacks.GetTemperatureLevel = NULL;
    g_macCallbacks.NvmDataChange = NULL;
    g_macCallbacks.MacProcessNotify = OnMacProcessNotify;
 8003cc0:	4a17      	ldr	r2, [pc, #92]	; (8003d20 <lorawan_init+0x80>)
    g_macPrimitives.MacMlmeConfirm = MlmeConfirm;
 8003cc2:	60a0      	str	r0, [r4, #8]
    g_macCallbacks.GetBatteryLevel = NULL;
 8003cc4:	2300      	movs	r3, #0

    printf("#========== LORA WAN Start ==============#\r\n");
 8003cc6:	4817      	ldr	r0, [pc, #92]	; (8003d24 <lorawan_init+0x84>)
    g_macPrimitives.MacMlmeIndication = MlmeIndication;
 8003cc8:	60e1      	str	r1, [r4, #12]
    g_macCallbacks.GetTemperatureLevel = NULL;
 8003cca:	e9c5 3300 	strd	r3, r3, [r5]
    g_macCallbacks.MacProcessNotify = OnMacProcessNotify;
 8003cce:	60ea      	str	r2, [r5, #12]
    g_macCallbacks.NvmDataChange = NULL;
 8003cd0:	60ab      	str	r3, [r5, #8]
    printf("#========== LORA WAN Start ==============#\r\n");
 8003cd2:	f00f f9e5 	bl	80130a0 <puts>

    status = LoRaMacInitialization( &g_macPrimitives, &g_macCallbacks, ACTIVE_REGION );
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	4629      	mov	r1, r5
 8003cda:	2207      	movs	r2, #7
 8003cdc:	f002 fae4 	bl	80062a8 <LoRaMacInitialization>
    if ( status != LORAMAC_STATUS_OK )
 8003ce0:	4604      	mov	r4, r0
 8003ce2:	b130      	cbz	r0, 8003cf2 <lorawan_init+0x52>
    {
        printf( "LoRaMac wasn't properly initialized, error: %s", myMacStatusStrings[status] );
 8003ce4:	4b10      	ldr	r3, [pc, #64]	; (8003d28 <lorawan_init+0x88>)
 8003ce6:	4811      	ldr	r0, [pc, #68]	; (8003d2c <lorawan_init+0x8c>)
 8003ce8:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8003cec:	f00f f952 	bl	8012f94 <iprintf>
        // Fatal error, endless loop.
        while ( 1 )
 8003cf0:	e7fe      	b.n	8003cf0 <lorawan_init+0x50>
        {
        }
    }

    DeviceState = DEVICE_STATE_RESTORE;
 8003cf2:	4b0f      	ldr	r3, [pc, #60]	; (8003d30 <lorawan_init+0x90>)
    printf("LoRaMacInitialization --> Done\r\n");
 8003cf4:	480f      	ldr	r0, [pc, #60]	; (8003d34 <lorawan_init+0x94>)
    DeviceState = DEVICE_STATE_RESTORE;
 8003cf6:	701c      	strb	r4, [r3, #0]
    printf("LoRaMacInitialization --> Done\r\n");
 8003cf8:	f00f f9d2 	bl	80130a0 <puts>
	s_u32LorawanTimerCounter = 0;
 8003cfc:	4b0e      	ldr	r3, [pc, #56]	; (8003d38 <lorawan_init+0x98>)

//    HAL_Delay(2000);
//    app_gnss_scan();

    return ((status != LORAMAC_STATUS_OK)? false : true);
}
 8003cfe:	2001      	movs	r0, #1
	s_u32LorawanTimerCounter = 0;
 8003d00:	601c      	str	r4, [r3, #0]
}
 8003d02:	bd38      	pop	{r3, r4, r5, pc}
 8003d04:	08015468 	.word	0x08015468
 8003d08:	200009e0 	.word	0x200009e0
 8003d0c:	20000a40 	.word	0x20000a40
 8003d10:	08003b4d 	.word	0x08003b4d
 8003d14:	080037c9 	.word	0x080037c9
 8003d18:	080036b9 	.word	0x080036b9
 8003d1c:	0800367d 	.word	0x0800367d
 8003d20:	08003371 	.word	0x08003371
 8003d24:	0801549c 	.word	0x0801549c
 8003d28:	2000007c 	.word	0x2000007c
 8003d2c:	080154c8 	.word	0x080154c8
 8003d30:	20000532 	.word	0x20000532
 8003d34:	080154f8 	.word	0x080154f8
 8003d38:	20000554 	.word	0x20000554

08003d3c <lorawan_process>:

void lorawan_process(void)
{
 8003d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    LoRaMacStatus_t status;
    uint8_t devEui[] = LORAWAN_DEVICE_EUI;
 8003d40:	4b97      	ldr	r3, [pc, #604]	; (8003fa0 <lorawan_process+0x264>)
    uint8_t joinEui[] = LORAWAN_JOIN_EUI;


    // Process Radio IRQ
    if( Radio.IrqProcess != NULL )
 8003d42:	4a98      	ldr	r2, [pc, #608]	; (8003fa4 <lorawan_process+0x268>)
    uint8_t devEui[] = LORAWAN_DEVICE_EUI;
 8003d44:	e893 0003 	ldmia.w	r3, {r0, r1}
{
 8003d48:	b086      	sub	sp, #24
    uint8_t devEui[] = LORAWAN_DEVICE_EUI;
 8003d4a:	ad02      	add	r5, sp, #8
 8003d4c:	e885 0003 	stmia.w	r5, {r0, r1}
    uint8_t joinEui[] = LORAWAN_JOIN_EUI;
 8003d50:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    if( Radio.IrqProcess != NULL )
 8003d54:	6e12      	ldr	r2, [r2, #96]	; 0x60
    uint8_t joinEui[] = LORAWAN_JOIN_EUI;
 8003d56:	ae04      	add	r6, sp, #16
 8003d58:	e886 0003 	stmia.w	r6, {r0, r1}
    if( Radio.IrqProcess != NULL )
 8003d5c:	b102      	cbz	r2, 8003d60 <lorawan_process+0x24>
    {
        Radio.IrqProcess( );
 8003d5e:	4790      	blx	r2
    }
    // Processes the LoRaMac events
    LoRaMacProcess( );


    switch( DeviceState )
 8003d60:	4f91      	ldr	r7, [pc, #580]	; (8003fa8 <lorawan_process+0x26c>)
    LoRaMacProcess( );
 8003d62:	f001 fcc5 	bl	80056f0 <LoRaMacProcess>
    switch( DeviceState )
 8003d66:	783b      	ldrb	r3, [r7, #0]
 8003d68:	2b07      	cmp	r3, #7
 8003d6a:	f200 8116 	bhi.w	8003f9a <lorawan_process+0x25e>
 8003d6e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003d72:	0018      	.short	0x0018
 8003d74:	005e0056 	.word	0x005e0056
 8003d78:	00d5008b 	.word	0x00d5008b
 8003d7c:	00f900e0 	.word	0x00f900e0
 8003d80:	0008      	.short	0x0008
            if( 1 == 0 )
            {
                printf( "\r\n###### ===== CTXS STORED ==== ######\r\n" );
            }

            CRITICAL_SECTION_BEGIN( );
 8003d82:	a801      	add	r0, sp, #4
 8003d84:	f7fe fa84 	bl	8002290 <BoardCriticalSectionBegin>
            if( IsMacProcessPending == 1 )
 8003d88:	4b88      	ldr	r3, [pc, #544]	; (8003fac <lorawan_process+0x270>)
 8003d8a:	781a      	ldrb	r2, [r3, #0]
 8003d8c:	2a01      	cmp	r2, #1
            {
                // Clear flag and prevent MCU to go into low power modes.
                IsMacProcessPending = 0;
 8003d8e:	bf08      	it	eq
 8003d90:	2200      	moveq	r2, #0
            else
            {
                // The MCU wakes up through events
//                BoardLowPowerHandler( );
            }
            CRITICAL_SECTION_END( );
 8003d92:	a801      	add	r0, sp, #4
                IsMacProcessPending = 0;
 8003d94:	bf08      	it	eq
 8003d96:	701a      	strbeq	r2, [r3, #0]
            CRITICAL_SECTION_END( );
 8003d98:	f7fe fa80 	bl	800229c <BoardCriticalSectionEnd>
        {
            DeviceState = DEVICE_STATE_START;
            break;
        }
    }
}
 8003d9c:	b006      	add	sp, #24
 8003d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                g_mibReq.Type = MIB_APP_KEY;
 8003da2:	4c83      	ldr	r4, [pc, #524]	; (8003fb0 <lorawan_process+0x274>)
                printf("mibReq.Type = MIB_APP_KEY;\r\n");
 8003da4:	4883      	ldr	r0, [pc, #524]	; (8003fb4 <lorawan_process+0x278>)
 8003da6:	f00f f97b 	bl	80130a0 <puts>
                g_mibReq.Param.AppKey = AppKey;
 8003daa:	4b83      	ldr	r3, [pc, #524]	; (8003fb8 <lorawan_process+0x27c>)
 8003dac:	6063      	str	r3, [r4, #4]
                g_mibReq.Type = MIB_APP_KEY;
 8003dae:	2208      	movs	r2, #8
                LoRaMacMibSetRequestConfirm( &g_mibReq );
 8003db0:	4620      	mov	r0, r4
                g_mibReq.Type = MIB_APP_KEY;
 8003db2:	7022      	strb	r2, [r4, #0]
                LoRaMacMibSetRequestConfirm( &g_mibReq );
 8003db4:	f002 fe30 	bl	8006a18 <LoRaMacMibSetRequestConfirm>
                g_mibReq.Param.NwkKey = NwkKey;
 8003db8:	4b80      	ldr	r3, [pc, #512]	; (8003fbc <lorawan_process+0x280>)
 8003dba:	6063      	str	r3, [r4, #4]
                g_mibReq.Type = MIB_NWK_KEY;
 8003dbc:	2209      	movs	r2, #9
                LoRaMacMibSetRequestConfirm( &g_mibReq );
 8003dbe:	4620      	mov	r0, r4
                g_mibReq.Type = MIB_NWK_KEY;
 8003dc0:	7022      	strb	r2, [r4, #0]
                LoRaMacMibSetRequestConfirm( &g_mibReq );
 8003dc2:	f002 fe29 	bl	8006a18 <LoRaMacMibSetRequestConfirm>
                    ( devEui[6] == 0 ) && ( devEui[7] == 0 ) )
 8003dc6:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8003dca:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003dce:	f89d 100a 	ldrb.w	r1, [sp, #10]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8003dd8:	430b      	orrs	r3, r1
 8003dda:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8003de4:	430b      	orrs	r3, r1
 8003de6:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8003df0:	430b      	orrs	r3, r1
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f000 80cd 	beq.w	8003f92 <lorawan_process+0x256>
                g_mibReq.Type = MIB_DEV_EUI;
 8003df8:	f04f 0802 	mov.w	r8, #2
                LoRaMacMibSetRequestConfirm( &g_mibReq );
 8003dfc:	486c      	ldr	r0, [pc, #432]	; (8003fb0 <lorawan_process+0x274>)
                g_mibReq.Param.DevEui = devEui;
 8003dfe:	6065      	str	r5, [r4, #4]
                g_mibReq.Type = MIB_DEV_EUI;
 8003e00:	f884 8000 	strb.w	r8, [r4]
                LoRaMacMibSetRequestConfirm( &g_mibReq );
 8003e04:	f002 fe08 	bl	8006a18 <LoRaMacMibSetRequestConfirm>
                g_mibReq.Type = MIB_JOIN_EUI;
 8003e08:	2303      	movs	r3, #3
                LoRaMacMibSetRequestConfirm( &g_mibReq );
 8003e0a:	4869      	ldr	r0, [pc, #420]	; (8003fb0 <lorawan_process+0x274>)
                g_mibReq.Param.JoinEui = joinEui;
 8003e0c:	6066      	str	r6, [r4, #4]
                g_mibReq.Type = MIB_JOIN_EUI;
 8003e0e:	7023      	strb	r3, [r4, #0]
                LoRaMacMibSetRequestConfirm( &g_mibReq );
 8003e10:	f002 fe02 	bl	8006a18 <LoRaMacMibSetRequestConfirm>
            DeviceState = DEVICE_STATE_START;
 8003e14:	f887 8000 	strb.w	r8, [r7]
}
 8003e18:	b006      	add	sp, #24
 8003e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			printf("#======== DEVICE_STATE_INIT ==========#\r\n");
 8003e1e:	4868      	ldr	r0, [pc, #416]	; (8003fc0 <lorawan_process+0x284>)
 8003e20:	f00f f93e 	bl	80130a0 <puts>
			lorawan_init();
 8003e24:	f7ff ff3c 	bl	8003ca0 <lorawan_init>
}
 8003e28:	b006      	add	sp, #24
 8003e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	s_u32LorawanTimerCounter = 0;
 8003e2e:	4b65      	ldr	r3, [pc, #404]	; (8003fc4 <lorawan_process+0x288>)
            g_mibReq.Type = MIB_PUBLIC_NETWORK;
 8003e30:	4c5f      	ldr	r4, [pc, #380]	; (8003fb0 <lorawan_process+0x274>)
        	printf("State: DEVICE_STATE_START\r\n");
 8003e32:	4865      	ldr	r0, [pc, #404]	; (8003fc8 <lorawan_process+0x28c>)
	s_u32LorawanTimerCounter = 0;
 8003e34:	2600      	movs	r6, #0
 8003e36:	601e      	str	r6, [r3, #0]
        	printf("State: DEVICE_STATE_START\r\n");
 8003e38:	f00f f932 	bl	80130a0 <puts>
            TimerInit( &TxNextPacketTimer, OnTxNextPacketTimerEvent );
 8003e3c:	4963      	ldr	r1, [pc, #396]	; (8003fcc <lorawan_process+0x290>)
 8003e3e:	4864      	ldr	r0, [pc, #400]	; (8003fd0 <lorawan_process+0x294>)
 8003e40:	f008 fb68 	bl	800c514 <TimerInit>
            g_mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8003e44:	2501      	movs	r5, #1
            g_mibReq.Type = MIB_PUBLIC_NETWORK;
 8003e46:	231d      	movs	r3, #29
            LoRaMacMibSetRequestConfirm( &g_mibReq );
 8003e48:	4620      	mov	r0, r4
            g_mibReq.Type = MIB_PUBLIC_NETWORK;
 8003e4a:	7023      	strb	r3, [r4, #0]
            g_mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8003e4c:	7125      	strb	r5, [r4, #4]
            LoRaMacMibSetRequestConfirm( &g_mibReq );
 8003e4e:	f002 fde3 	bl	8006a18 <LoRaMacMibSetRequestConfirm>
            g_mibReq.Type = MIB_ADR;
 8003e52:	2305      	movs	r3, #5
            LoRaMacMibSetRequestConfirm( &g_mibReq );
 8003e54:	4620      	mov	r0, r4
            g_mibReq.Type = MIB_ADR;
 8003e56:	7023      	strb	r3, [r4, #0]
            g_mibReq.Param.AdrEnable = LORAWAN_ADR_ON;
 8003e58:	7126      	strb	r6, [r4, #4]
            LoRaMacMibSetRequestConfirm( &g_mibReq );
 8003e5a:	f002 fddd 	bl	8006a18 <LoRaMacMibSetRequestConfirm>
            g_mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8003e5e:	2230      	movs	r2, #48	; 0x30
            g_mibReq.Param.SystemMaxRxError = 20;
 8003e60:	2314      	movs	r3, #20
            LoRaMacMibSetRequestConfirm( &g_mibReq );
 8003e62:	4620      	mov	r0, r4
            g_mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8003e64:	7022      	strb	r2, [r4, #0]
            g_mibReq.Param.SystemMaxRxError = 20;
 8003e66:	6063      	str	r3, [r4, #4]
            LoRaMacMibSetRequestConfirm( &g_mibReq );
 8003e68:	f002 fdd6 	bl	8006a18 <LoRaMacMibSetRequestConfirm>
            LoRaMacStart( );
 8003e6c:	f002 fc0a 	bl	8006684 <LoRaMacStart>
            status = LoRaMacMibGetRequestConfirm( &g_mibReq );
 8003e70:	4620      	mov	r0, r4
            g_mibReq.Type = MIB_NETWORK_ACTIVATION;
 8003e72:	7025      	strb	r5, [r4, #0]
            status = LoRaMacMibGetRequestConfirm( &g_mibReq );
 8003e74:	f002 fc7c 	bl	8006770 <LoRaMacMibGetRequestConfirm>
            if( status == LORAMAC_STATUS_OK )
 8003e78:	2800      	cmp	r0, #0
 8003e7a:	d18f      	bne.n	8003d9c <lorawan_process+0x60>
                if( g_mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8003e7c:	7923      	ldrb	r3, [r4, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d17a      	bne.n	8003f78 <lorawan_process+0x23c>
                    DeviceState = DEVICE_STATE_JOIN;
 8003e82:	2303      	movs	r3, #3
 8003e84:	703b      	strb	r3, [r7, #0]
 8003e86:	e789      	b.n	8003d9c <lorawan_process+0x60>
            g_mibReq.Type = MIB_DEV_EUI;
 8003e88:	4c49      	ldr	r4, [pc, #292]	; (8003fb0 <lorawan_process+0x274>)
        	printf("State: DEVICE_STATE_JOIN\r\n");
 8003e8a:	4852      	ldr	r0, [pc, #328]	; (8003fd4 <lorawan_process+0x298>)
                printf( "-%02X", g_mibReq.Param.DevEui[i] );
 8003e8c:	4e52      	ldr	r6, [pc, #328]	; (8003fd8 <lorawan_process+0x29c>)
        	printf("State: DEVICE_STATE_JOIN\r\n");
 8003e8e:	f00f f907 	bl	80130a0 <puts>
            g_mibReq.Type = MIB_DEV_EUI;
 8003e92:	2302      	movs	r3, #2
            LoRaMacMibGetRequestConfirm( &g_mibReq );
 8003e94:	4620      	mov	r0, r4
            g_mibReq.Type = MIB_DEV_EUI;
 8003e96:	7023      	strb	r3, [r4, #0]
            LoRaMacMibGetRequestConfirm( &g_mibReq );
 8003e98:	f002 fc6a 	bl	8006770 <LoRaMacMibGetRequestConfirm>
            printf( "DevEui      : %02X", g_mibReq.Param.DevEui[0] );
 8003e9c:	6863      	ldr	r3, [r4, #4]
 8003e9e:	484f      	ldr	r0, [pc, #316]	; (8003fdc <lorawan_process+0x2a0>)
 8003ea0:	7819      	ldrb	r1, [r3, #0]
 8003ea2:	f00f f877 	bl	8012f94 <iprintf>
            for( int i = 1; i < 8; i++ )
 8003ea6:	2501      	movs	r5, #1
                printf( "-%02X", g_mibReq.Param.DevEui[i] );
 8003ea8:	6863      	ldr	r3, [r4, #4]
 8003eaa:	4630      	mov	r0, r6
 8003eac:	5d59      	ldrb	r1, [r3, r5]
            for( int i = 1; i < 8; i++ )
 8003eae:	3501      	adds	r5, #1
                printf( "-%02X", g_mibReq.Param.DevEui[i] );
 8003eb0:	f00f f870 	bl	8012f94 <iprintf>
            for( int i = 1; i < 8; i++ )
 8003eb4:	2d08      	cmp	r5, #8
 8003eb6:	d1f7      	bne.n	8003ea8 <lorawan_process+0x16c>
            printf( "\r\n" );
 8003eb8:	4849      	ldr	r0, [pc, #292]	; (8003fe0 <lorawan_process+0x2a4>)
                printf( "-%02X", g_mibReq.Param.JoinEui[i] );
 8003eba:	4e47      	ldr	r6, [pc, #284]	; (8003fd8 <lorawan_process+0x29c>)
            printf( "\r\n" );
 8003ebc:	f00f f8f0 	bl	80130a0 <puts>
            g_mibReq.Type = MIB_JOIN_EUI;
 8003ec0:	2303      	movs	r3, #3
            LoRaMacMibGetRequestConfirm( &g_mibReq );
 8003ec2:	483b      	ldr	r0, [pc, #236]	; (8003fb0 <lorawan_process+0x274>)
            g_mibReq.Type = MIB_JOIN_EUI;
 8003ec4:	7023      	strb	r3, [r4, #0]
            LoRaMacMibGetRequestConfirm( &g_mibReq );
 8003ec6:	f002 fc53 	bl	8006770 <LoRaMacMibGetRequestConfirm>
            printf( "AppEui      : %02X", g_mibReq.Param.JoinEui[0] );
 8003eca:	6863      	ldr	r3, [r4, #4]
 8003ecc:	4845      	ldr	r0, [pc, #276]	; (8003fe4 <lorawan_process+0x2a8>)
 8003ece:	7819      	ldrb	r1, [r3, #0]
 8003ed0:	f00f f860 	bl	8012f94 <iprintf>
            for( int i = 1; i < 8; i++ )
 8003ed4:	2501      	movs	r5, #1
                printf( "-%02X", g_mibReq.Param.JoinEui[i] );
 8003ed6:	6863      	ldr	r3, [r4, #4]
 8003ed8:	4630      	mov	r0, r6
 8003eda:	5d59      	ldrb	r1, [r3, r5]
            for( int i = 1; i < 8; i++ )
 8003edc:	3501      	adds	r5, #1
                printf( "-%02X", g_mibReq.Param.JoinEui[i] );
 8003ede:	f00f f859 	bl	8012f94 <iprintf>
            for( int i = 1; i < 8; i++ )
 8003ee2:	2d08      	cmp	r5, #8
 8003ee4:	d1f7      	bne.n	8003ed6 <lorawan_process+0x19a>
            printf( "AppKey      : %02X", NwkKey[0] );
 8003ee6:	4d35      	ldr	r5, [pc, #212]	; (8003fbc <lorawan_process+0x280>)
            printf( "\r\n" );
 8003ee8:	483d      	ldr	r0, [pc, #244]	; (8003fe0 <lorawan_process+0x2a4>)
                printf( " %02X", NwkKey[i] );
 8003eea:	4e3f      	ldr	r6, [pc, #252]	; (8003fe8 <lorawan_process+0x2ac>)
            printf( "AppKey      : %02X", NwkKey[0] );
 8003eec:	462c      	mov	r4, r5
            printf( "\r\n" );
 8003eee:	f00f f8d7 	bl	80130a0 <puts>
            printf( "AppKey      : %02X", NwkKey[0] );
 8003ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ef6:	483d      	ldr	r0, [pc, #244]	; (8003fec <lorawan_process+0x2b0>)
 8003ef8:	f00f f84c 	bl	8012f94 <iprintf>
            for( int i = 1; i < 16; i++ )
 8003efc:	3510      	adds	r5, #16
                printf( " %02X", NwkKey[i] );
 8003efe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f02:	4630      	mov	r0, r6
 8003f04:	f00f f846 	bl	8012f94 <iprintf>
            for( int i = 1; i < 16; i++ )
 8003f08:	42a5      	cmp	r5, r4
 8003f0a:	d1f8      	bne.n	8003efe <lorawan_process+0x1c2>
            printf( "\n\r\n" );
 8003f0c:	4838      	ldr	r0, [pc, #224]	; (8003ff0 <lorawan_process+0x2b4>)
 8003f0e:	f00f f8c7 	bl	80130a0 <puts>
            JoinNetwork( );
 8003f12:	f7ff fb33 	bl	800357c <JoinNetwork>
}
 8003f16:	b006      	add	sp, #24
 8003f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if( NextTx == true )
 8003f1c:	4c35      	ldr	r4, [pc, #212]	; (8003ff4 <lorawan_process+0x2b8>)
          printf( "\r\n## STATE_SEND ##\r\n" );
 8003f1e:	4836      	ldr	r0, [pc, #216]	; (8003ff8 <lorawan_process+0x2bc>)
 8003f20:	f00f f8be 	bl	80130a0 <puts>
            if( NextTx == true )
 8003f24:	7823      	ldrb	r3, [r4, #0]
 8003f26:	bb63      	cbnz	r3, 8003f82 <lorawan_process+0x246>
            DeviceState = DEVICE_STATE_CYCLE;
 8003f28:	2305      	movs	r3, #5
 8003f2a:	703b      	strb	r3, [r7, #0]
}
 8003f2c:	b006      	add	sp, #24
 8003f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          printf( "\r\n## STATE_CYCLE ##\r\n" );
 8003f32:	4832      	ldr	r0, [pc, #200]	; (8003ffc <lorawan_process+0x2c0>)
 8003f34:	f00f f8b4 	bl	80130a0 <puts>
            if( ComplianceTest.Running == true )
 8003f38:	4b31      	ldr	r3, [pc, #196]	; (8004000 <lorawan_process+0x2c4>)
 8003f3a:	4a32      	ldr	r2, [pc, #200]	; (8004004 <lorawan_process+0x2c8>)
 8003f3c:	781c      	ldrb	r4, [r3, #0]
            TimerSetValue( &TxNextPacketTimer, TxDutyCycleTime );
 8003f3e:	4824      	ldr	r0, [pc, #144]	; (8003fd0 <lorawan_process+0x294>)
            	TxDutyCycleTime = APP_TX_DUTYCYCLE;
 8003f40:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003f44:	f241 3188 	movw	r1, #5000	; 0x1388
 8003f48:	2c00      	cmp	r4, #0
 8003f4a:	bf08      	it	eq
 8003f4c:	4619      	moveq	r1, r3
            DeviceState = DEVICE_STATE_SLEEP;
 8003f4e:	2307      	movs	r3, #7
 8003f50:	6011      	str	r1, [r2, #0]
 8003f52:	703b      	strb	r3, [r7, #0]
            TimerSetValue( &TxNextPacketTimer, TxDutyCycleTime );
 8003f54:	f008 fbc0 	bl	800c6d8 <TimerSetValue>
            TimerStart( &TxNextPacketTimer );
 8003f58:	481d      	ldr	r0, [pc, #116]	; (8003fd0 <lorawan_process+0x294>)
 8003f5a:	f008 fae3 	bl	800c524 <TimerStart>
}
 8003f5e:	b006      	add	sp, #24
 8003f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        	printf("Lora WAN Device Timer: %d\r\n", s_u32LorawanTimerCounter);
 8003f64:	4b17      	ldr	r3, [pc, #92]	; (8003fc4 <lorawan_process+0x288>)
 8003f66:	4828      	ldr	r0, [pc, #160]	; (8004008 <lorawan_process+0x2cc>)
 8003f68:	6819      	ldr	r1, [r3, #0]
 8003f6a:	f00f f813 	bl	8012f94 <iprintf>
        	DeviceState = DEVICE_STATE_SLEEP;
 8003f6e:	2307      	movs	r3, #7
 8003f70:	703b      	strb	r3, [r7, #0]
}
 8003f72:	b006      	add	sp, #24
 8003f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    NextTx = true;
 8003f78:	4a1e      	ldr	r2, [pc, #120]	; (8003ff4 <lorawan_process+0x2b8>)
                    DeviceState = DEVICE_STATE_SEND;
 8003f7a:	2304      	movs	r3, #4
                    NextTx = true;
 8003f7c:	7015      	strb	r5, [r2, #0]
                    DeviceState = DEVICE_STATE_SEND;
 8003f7e:	703b      	strb	r3, [r7, #0]
                    NextTx = true;
 8003f80:	e70c      	b.n	8003d9c <lorawan_process+0x60>
                PrepareTxFrame( AppPort );
 8003f82:	4b22      	ldr	r3, [pc, #136]	; (800400c <lorawan_process+0x2d0>)
 8003f84:	7818      	ldrb	r0, [r3, #0]
 8003f86:	f7ff f9fb 	bl	8003380 <PrepareTxFrame>
                NextTx = SendFrame( );
 8003f8a:	f7ff fa7d 	bl	8003488 <SendFrame>
 8003f8e:	7020      	strb	r0, [r4, #0]
 8003f90:	e7ca      	b.n	8003f28 <lorawan_process+0x1ec>
                    BoardGetUniqueId( devEui );
 8003f92:	4628      	mov	r0, r5
 8003f94:	f7fe f9a0 	bl	80022d8 <BoardGetUniqueId>
 8003f98:	e72e      	b.n	8003df8 <lorawan_process+0xbc>
            DeviceState = DEVICE_STATE_START;
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	703b      	strb	r3, [r7, #0]
}
 8003f9e:	e6fd      	b.n	8003d9c <lorawan_process+0x60>
 8003fa0:	08014428 	.word	0x08014428
 8003fa4:	08015848 	.word	0x08015848
 8003fa8:	20000532 	.word	0x20000532
 8003fac:	20000533 	.word	0x20000533
 8003fb0:	200009f0 	.word	0x200009f0
 8003fb4:	08015544 	.word	0x08015544
 8003fb8:	20000014 	.word	0x20000014
 8003fbc:	20000028 	.word	0x20000028
 8003fc0:	08015518 	.word	0x08015518
 8003fc4:	20000554 	.word	0x20000554
 8003fc8:	08015560 	.word	0x08015560
 8003fcc:	08003605 	.word	0x08003605
 8003fd0:	2000053c 	.word	0x2000053c
 8003fd4:	0801557c 	.word	0x0801557c
 8003fd8:	080155ac 	.word	0x080155ac
 8003fdc:	08015598 	.word	0x08015598
 8003fe0:	08014a2c 	.word	0x08014a2c
 8003fe4:	080155b4 	.word	0x080155b4
 8003fe8:	080155dc 	.word	0x080155dc
 8003fec:	080155c8 	.word	0x080155c8
 8003ff0:	08015c44 	.word	0x08015c44
 8003ff4:	20000025 	.word	0x20000025
 8003ff8:	080155e4 	.word	0x080155e4
 8003ffc:	080155f8 	.word	0x080155f8
 8004000:	20000a50 	.word	0x20000a50
 8004004:	20000538 	.word	0x20000538
 8004008:	08015610 	.word	0x08015610
 800400c:	20000024 	.word	0x20000024

08004010 <OnRadioTxTimeout>:
    }
}

static void OnRadioTxTimeout( void )
{
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8004010:	4a06      	ldr	r2, [pc, #24]	; (800402c <OnRadioTxTimeout+0x1c>)

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8004012:	4907      	ldr	r1, [pc, #28]	; (8004030 <OnRadioTxTimeout+0x20>)
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8004014:	7813      	ldrb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8004016:	f8d1 1348 	ldr.w	r1, [r1, #840]	; 0x348
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800401a:	f043 0308 	orr.w	r3, r3, #8
 800401e:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8004020:	b111      	cbz	r1, 8004028 <OnRadioTxTimeout+0x18>
 8004022:	68cb      	ldr	r3, [r1, #12]
 8004024:	b103      	cbz	r3, 8004028 <OnRadioTxTimeout+0x18>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8004026:	4718      	bx	r3
    }
}
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	20000560 	.word	0x20000560
 8004030:	20030a48 	.word	0x20030a48

08004034 <OnRadioRxError>:

static void OnRadioRxError( void )
{
    LoRaMacRadioEvents.Events.RxError = 1;
 8004034:	4a06      	ldr	r2, [pc, #24]	; (8004050 <OnRadioRxError+0x1c>)

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8004036:	4907      	ldr	r1, [pc, #28]	; (8004054 <OnRadioRxError+0x20>)
    LoRaMacRadioEvents.Events.RxError = 1;
 8004038:	7813      	ldrb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800403a:	f8d1 1348 	ldr.w	r1, [r1, #840]	; 0x348
    LoRaMacRadioEvents.Events.RxError = 1;
 800403e:	f043 0304 	orr.w	r3, r3, #4
 8004042:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8004044:	b111      	cbz	r1, 800404c <OnRadioRxError+0x18>
 8004046:	68cb      	ldr	r3, [r1, #12]
 8004048:	b103      	cbz	r3, 800404c <OnRadioRxError+0x18>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800404a:	4718      	bx	r3
    }
}
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	20000560 	.word	0x20000560
 8004054:	20030a48 	.word	0x20030a48

08004058 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8004058:	4a06      	ldr	r2, [pc, #24]	; (8004074 <OnRadioRxTimeout+0x1c>)

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800405a:	4907      	ldr	r1, [pc, #28]	; (8004078 <OnRadioRxTimeout+0x20>)
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800405c:	7813      	ldrb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800405e:	f8d1 1348 	ldr.w	r1, [r1, #840]	; 0x348
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8004062:	f043 0302 	orr.w	r3, r3, #2
 8004066:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8004068:	b111      	cbz	r1, 8004070 <OnRadioRxTimeout+0x18>
 800406a:	68cb      	ldr	r3, [r1, #12]
 800406c:	b103      	cbz	r3, 8004070 <OnRadioRxTimeout+0x18>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800406e:	4718      	bx	r3
    }
}
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	20000560 	.word	0x20000560
 8004078:	20030a48 	.word	0x20030a48

0800407c <OnRetransmitTimeoutTimerEvent>:

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
}

static void OnRetransmitTimeoutTimerEvent( void* context )
{
 800407c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800407e:	4c0a      	ldr	r4, [pc, #40]	; (80040a8 <OnRetransmitTimeoutTimerEvent+0x2c>)
 8004080:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8004084:	f008 faee 	bl	800c664 <TimerStop>

    if( MacCtx.NodeAckRequested == true )
 8004088:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 800408c:	b113      	cbz	r3, 8004094 <OnRetransmitTimeoutTimerEvent+0x18>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 800408e:	2301      	movs	r3, #1
 8004090:	f884 3419 	strb.w	r3, [r4, #1049]	; 0x419
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8004094:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
 8004098:	b123      	cbz	r3, 80040a4 <OnRetransmitTimeoutTimerEvent+0x28>
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	b113      	cbz	r3, 80040a4 <OnRetransmitTimeoutTimerEvent+0x28>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
    }
}
 800409e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MacCtx.MacCallbacks->MacProcessNotify( );
 80040a2:	4718      	bx	r3
}
 80040a4:	bd10      	pop	{r4, pc}
 80040a6:	bf00      	nop
 80040a8:	20030a48 	.word	0x20030a48

080040ac <PrepareRxDoneAbort>:
{
 80040ac:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80040ae:	4c0f      	ldr	r4, [pc, #60]	; (80040ec <PrepareRxDoneAbort+0x40>)
 80040b0:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 80040b4:	f894 241a 	ldrb.w	r2, [r4, #1050]	; 0x41a
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80040b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040bc:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 80040c0:	b97a      	cbnz	r2, 80040e2 <PrepareRxDoneAbort+0x36>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80040c2:	f894 2724 	ldrb.w	r2, [r4, #1828]	; 0x724
    MacCtx.MacFlags.Bits.McpsInd = 1;
 80040c6:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
        MacCtx.RxSlot = RX_SLOT_NONE;
 80040ca:	2a02      	cmp	r2, #2
    MacCtx.MacFlags.Bits.McpsInd = 1;
 80040cc:	f023 0312 	bic.w	r3, r3, #18
 80040d0:	f043 0312 	orr.w	r3, r3, #18
        MacCtx.RxSlot = RX_SLOT_NONE;
 80040d4:	bf18      	it	ne
 80040d6:	2206      	movne	r2, #6
    MacCtx.MacFlags.Bits.McpsInd = 1;
 80040d8:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80040dc:	f884 248c 	strb.w	r2, [r4, #1164]	; 0x48c
}
 80040e0:	bd10      	pop	{r4, pc}
        OnRetransmitTimeoutTimerEvent( NULL );
 80040e2:	2000      	movs	r0, #0
 80040e4:	f7ff ffca 	bl	800407c <OnRetransmitTimeoutTimerEvent>
 80040e8:	e7eb      	b.n	80040c2 <PrepareRxDoneAbort+0x16>
 80040ea:	bf00      	nop
 80040ec:	20030a48 	.word	0x20030a48

080040f0 <StopRetransmission>:
    }
    return counter;
}

static bool StopRetransmission( void )
{
 80040f0:	b510      	push	{r4, lr}
    // Increase Rejoin Uplinks counter
    if( Nvm.MacGroup2.Rejoin0UplinksLimit != 0 )
 80040f2:	4c24      	ldr	r4, [pc, #144]	; (8004184 <StopRetransmission+0x94>)
 80040f4:	f8d4 3740 	ldr.w	r3, [r4, #1856]	; 0x740
{
 80040f8:	b082      	sub	sp, #8
    if( Nvm.MacGroup2.Rejoin0UplinksLimit != 0 )
 80040fa:	b123      	cbz	r3, 8004106 <StopRetransmission+0x16>
    {
        Nvm.MacGroup1.Rejoin0UplinksCounter++;
 80040fc:	f8d4 35d0 	ldr.w	r3, [r4, #1488]	; 0x5d0
 8004100:	3301      	adds	r3, #1
 8004102:	f8c4 35d0 	str.w	r3, [r4, #1488]	; 0x5d0
    }

    if( Nvm.MacGroup2.Version.Fields.Minor >= 1 )
 8004106:	f894 373a 	ldrb.w	r3, [r4, #1850]	; 0x73a
 800410a:	b9fb      	cbnz	r3, 800414c <StopRetransmission+0x5c>
                MacCtx.MlmeIndication.MlmeIndication = MLME_REVERT_JOIN;
            }
        }
    }

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800410c:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8004110:	0799      	lsls	r1, r3, #30
 8004112:	d503      	bpl.n	800411c <StopRetransmission+0x2c>
 8004114:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 8004118:	2b01      	cmp	r3, #1
 800411a:	d909      	bls.n	8004130 <StopRetransmission+0x40>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800411c:	f894 3726 	ldrb.w	r3, [r4, #1830]	; 0x726
 8004120:	b133      	cbz	r3, 8004130 <StopRetransmission+0x40>
        {
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8004122:	f8d4 35bc 	ldr.w	r3, [r4, #1468]	; 0x5bc
    if( counter < ADR_ACK_COUNTER_MAX )
 8004126:	1c5a      	adds	r2, r3, #1
        counter++;
 8004128:	bf18      	it	ne
 800412a:	3301      	addne	r3, #1
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 800412c:	f8c4 35bc 	str.w	r3, [r4, #1468]	; 0x5bc
    }

    MacCtx.ChannelsNbTransCounter = 0;
    MacCtx.NodeAckRequested = false;
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8004130:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
    MacCtx.ChannelsNbTransCounter = 0;
 8004134:	2200      	movs	r2, #0
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8004136:	f023 0302 	bic.w	r3, r3, #2

    return true;
}
 800413a:	2001      	movs	r0, #1
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800413c:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    MacCtx.ChannelsNbTransCounter = 0;
 8004140:	f8a4 2418 	strh.w	r2, [r4, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 8004144:	f884 241a 	strb.w	r2, [r4, #1050]	; 0x41a
}
 8004148:	b002      	add	sp, #8
 800414a:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetCmd( MOTE_MAC_REKEY_IND, &macCmd ) == LORAMAC_COMMANDS_SUCCESS )
 800414c:	a901      	add	r1, sp, #4
 800414e:	200b      	movs	r0, #11
 8004150:	f003 fb0c 	bl	800776c <LoRaMacCommandsGetCmd>
 8004154:	2800      	cmp	r0, #0
 8004156:	d1d9      	bne.n	800410c <StopRetransmission+0x1c>
            Nvm.MacGroup1.RekeyIndUplinksCounter++;
 8004158:	f8b4 35d6 	ldrh.w	r3, [r4, #1494]	; 0x5d6
            if( Nvm.MacGroup1.RekeyIndUplinksCounter == MacCtx.AdrAckLimit )
 800415c:	f8b4 23fc 	ldrh.w	r2, [r4, #1020]	; 0x3fc
            Nvm.MacGroup1.RekeyIndUplinksCounter++;
 8004160:	3301      	adds	r3, #1
 8004162:	b29b      	uxth	r3, r3
            if( Nvm.MacGroup1.RekeyIndUplinksCounter == MacCtx.AdrAckLimit )
 8004164:	429a      	cmp	r2, r3
            Nvm.MacGroup1.RekeyIndUplinksCounter++;
 8004166:	f8a4 35d6 	strh.w	r3, [r4, #1494]	; 0x5d6
            if( Nvm.MacGroup1.RekeyIndUplinksCounter == MacCtx.AdrAckLimit )
 800416a:	d1cf      	bne.n	800410c <StopRetransmission+0x1c>
                MacCtx.MacFlags.Bits.MlmeInd = 1;
 800416c:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8004170:	f884 073c 	strb.w	r0, [r4, #1852]	; 0x73c
                MacCtx.MacFlags.Bits.MlmeInd = 1;
 8004174:	f043 0308 	orr.w	r3, r3, #8
                MacCtx.MlmeIndication.MlmeIndication = MLME_REVERT_JOIN;
 8004178:	220e      	movs	r2, #14
                MacCtx.MacFlags.Bits.MlmeInd = 1;
 800417a:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
                MacCtx.MlmeIndication.MlmeIndication = MLME_REVERT_JOIN;
 800417e:	f884 246c 	strb.w	r2, [r4, #1132]	; 0x46c
 8004182:	e7c3      	b.n	800410c <StopRetransmission+0x1c>
 8004184:	20030a48 	.word	0x20030a48

08004188 <HandleRadioRxErrorTimeout>:
{
 8004188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800418a:	4c3a      	ldr	r4, [pc, #232]	; (8004274 <HandleRadioRxErrorTimeout+0xec>)
 800418c:	f894 3724 	ldrb.w	r3, [r4, #1828]	; 0x724
 8004190:	2b02      	cmp	r3, #2
{
 8004192:	4607      	mov	r7, r0
 8004194:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8004196:	d002      	beq.n	800419e <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 8004198:	4b37      	ldr	r3, [pc, #220]	; (8004278 <HandleRadioRxErrorTimeout+0xf0>)
 800419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419c:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800419e:	f003 fa15 	bl	80075cc <LoRaMacClassBIsBeaconExpected>
 80041a2:	4605      	mov	r5, r0
 80041a4:	bba0      	cbnz	r0, 8004210 <HandleRadioRxErrorTimeout+0x88>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80041a6:	f894 3724 	ldrb.w	r3, [r4, #1828]	; 0x724
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d03a      	beq.n	8004224 <HandleRadioRxErrorTimeout+0x9c>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80041ae:	f894 348c 	ldrb.w	r3, [r4, #1164]	; 0x48c
 80041b2:	b9bb      	cbnz	r3, 80041e4 <HandleRadioRxErrorTimeout+0x5c>
            if( MacCtx.NodeAckRequested == true )
 80041b4:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 80041b8:	b10b      	cbz	r3, 80041be <HandleRadioRxErrorTimeout+0x36>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 80041ba:	f884 7445 	strb.w	r7, [r4, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 80041be:	4638      	mov	r0, r7
 80041c0:	f003 fc22 	bl	8007a08 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 80041c4:	f8d4 05c0 	ldr.w	r0, [r4, #1472]	; 0x5c0
 80041c8:	f008 faa0 	bl	800c70c <TimerGetElapsedTime>
 80041cc:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 80041d0:	4298      	cmp	r0, r3
 80041d2:	d230      	bcs.n	8004236 <HandleRadioRxErrorTimeout+0xae>
 80041d4:	f894 3724 	ldrb.w	r3, [r4, #1828]	; 0x724
        MacCtx.RxSlot = RX_SLOT_NONE;
 80041d8:	2b02      	cmp	r3, #2
 80041da:	bf18      	it	ne
 80041dc:	2306      	movne	r3, #6
 80041de:	f884 348c 	strb.w	r3, [r4, #1164]	; 0x48c
}
 80041e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( MacCtx.NodeAckRequested == true )
 80041e4:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 80041e8:	b10b      	cbz	r3, 80041ee <HandleRadioRxErrorTimeout+0x66>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 80041ea:	f884 6445 	strb.w	r6, [r4, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 80041ee:	4630      	mov	r0, r6
 80041f0:	f003 fc0a 	bl	8007a08 <LoRaMacConfirmQueueSetStatusCmn>
            MacCtx.MacFlags.Bits.MacDone = 1;
 80041f4:	f894 3724 	ldrb.w	r3, [r4, #1828]	; 0x724
 80041f8:	f894 248d 	ldrb.w	r2, [r4, #1165]	; 0x48d
        MacCtx.RxSlot = RX_SLOT_NONE;
 80041fc:	2b02      	cmp	r3, #2
            MacCtx.MacFlags.Bits.MacDone = 1;
 80041fe:	f042 0210 	orr.w	r2, r2, #16
        MacCtx.RxSlot = RX_SLOT_NONE;
 8004202:	bf18      	it	ne
 8004204:	2306      	movne	r3, #6
            MacCtx.MacFlags.Bits.MacDone = 1;
 8004206:	f884 248d 	strb.w	r2, [r4, #1165]	; 0x48d
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800420a:	f884 348c 	strb.w	r3, [r4, #1164]	; 0x48c
}
 800420e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8004210:	2002      	movs	r0, #2
 8004212:	f003 f9cb 	bl	80075ac <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8004216:	2000      	movs	r0, #0
 8004218:	f003 f9d0 	bl	80075bc <LoRaMacClassBBeaconTimerEvent>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800421c:	f894 3724 	ldrb.w	r3, [r4, #1828]	; 0x724
 8004220:	2b01      	cmp	r3, #1
 8004222:	d1d9      	bne.n	80041d8 <HandleRadioRxErrorTimeout+0x50>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8004224:	f003 f9d4 	bl	80075d0 <LoRaMacClassBIsPingExpected>
 8004228:	b988      	cbnz	r0, 800424e <HandleRadioRxErrorTimeout+0xc6>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800422a:	f003 f9d3 	bl	80075d4 <LoRaMacClassBIsMulticastExpected>
 800422e:	b9c0      	cbnz	r0, 8004262 <HandleRadioRxErrorTimeout+0xda>
    if( classBRx == false )
 8004230:	2d00      	cmp	r5, #0
 8004232:	d0bc      	beq.n	80041ae <HandleRadioRxErrorTimeout+0x26>
 8004234:	e7ce      	b.n	80041d4 <HandleRadioRxErrorTimeout+0x4c>
                TimerStop( &MacCtx.RxWindowTimer2 );
 8004236:	4811      	ldr	r0, [pc, #68]	; (800427c <HandleRadioRxErrorTimeout+0xf4>)
 8004238:	f008 fa14 	bl	800c664 <TimerStop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800423c:	f894 248d 	ldrb.w	r2, [r4, #1165]	; 0x48d
 8004240:	f894 3724 	ldrb.w	r3, [r4, #1828]	; 0x724
 8004244:	f042 0210 	orr.w	r2, r2, #16
 8004248:	f884 248d 	strb.w	r2, [r4, #1165]	; 0x48d
 800424c:	e7c4      	b.n	80041d8 <HandleRadioRxErrorTimeout+0x50>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800424e:	2000      	movs	r0, #0
 8004250:	f003 f9ae 	bl	80075b0 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8004254:	2000      	movs	r0, #0
 8004256:	f003 f9b3 	bl	80075c0 <LoRaMacClassBPingSlotTimerEvent>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800425a:	f003 f9bb 	bl	80075d4 <LoRaMacClassBIsMulticastExpected>
 800425e:	2800      	cmp	r0, #0
 8004260:	d0b8      	beq.n	80041d4 <HandleRadioRxErrorTimeout+0x4c>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8004262:	2000      	movs	r0, #0
 8004264:	f003 f9a6 	bl	80075b4 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8004268:	2000      	movs	r0, #0
 800426a:	f003 f9ab 	bl	80075c4 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 800426e:	f894 3724 	ldrb.w	r3, [r4, #1828]	; 0x724
 8004272:	e7b1      	b.n	80041d8 <HandleRadioRxErrorTimeout+0x50>
 8004274:	20030a48 	.word	0x20030a48
 8004278:	08015848 	.word	0x08015848
 800427c:	20030de8 	.word	0x20030de8

08004280 <OnRadioRxDone>:
{
 8004280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004284:	4617      	mov	r7, r2
 8004286:	461e      	mov	r6, r3
 8004288:	4681      	mov	r9, r0
 800428a:	4688      	mov	r8, r1
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800428c:	f008 fa36 	bl	800c6fc <TimerGetCurrentTime>
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 8004290:	4b0c      	ldr	r3, [pc, #48]	; (80042c4 <OnRadioRxDone+0x44>)
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8004292:	4a0d      	ldr	r2, [pc, #52]	; (80042c8 <OnRadioRxDone+0x48>)
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 8004294:	781c      	ldrb	r4, [r3, #0]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8004296:	4d0d      	ldr	r5, [pc, #52]	; (80042cc <OnRadioRxDone+0x4c>)
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8004298:	f8d2 2348 	ldr.w	r2, [r2, #840]	; 0x348
    RxDoneParams.Payload = payload;
 800429c:	f8c5 9004 	str.w	r9, [r5, #4]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 80042a0:	f024 0411 	bic.w	r4, r4, #17
 80042a4:	f044 0411 	orr.w	r4, r4, #17
    RxDoneParams.Size = size;
 80042a8:	f8a5 8008 	strh.w	r8, [r5, #8]
    RxDoneParams.Rssi = rssi;
 80042ac:	816f      	strh	r7, [r5, #10]
    RxDoneParams.Snr = snr;
 80042ae:	732e      	strb	r6, [r5, #12]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 80042b0:	6028      	str	r0, [r5, #0]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 80042b2:	701c      	strb	r4, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80042b4:	b122      	cbz	r2, 80042c0 <OnRadioRxDone+0x40>
 80042b6:	68d3      	ldr	r3, [r2, #12]
 80042b8:	b113      	cbz	r3, 80042c0 <OnRadioRxDone+0x40>
}
 80042ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        MacCtx.MacCallbacks->MacProcessNotify( );
 80042be:	4718      	bx	r3
}
 80042c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c4:	20000560 	.word	0x20000560
 80042c8:	20030a48 	.word	0x20030a48
 80042cc:	20000a68 	.word	0x20000a68

080042d0 <OnRadioTxDone>:
{
 80042d0:	b570      	push	{r4, r5, r6, lr}
 80042d2:	b082      	sub	sp, #8
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80042d4:	f008 fa12 	bl	800c6fc <TimerGetCurrentTime>
 80042d8:	4b0e      	ldr	r3, [pc, #56]	; (8004314 <OnRadioTxDone+0x44>)
    MacCtx.LastTxSysTime = SysTimeGet( );
 80042da:	4c0f      	ldr	r4, [pc, #60]	; (8004318 <OnRadioTxDone+0x48>)
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80042dc:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 80042de:	466d      	mov	r5, sp
 80042e0:	4628      	mov	r0, r5
 80042e2:	f008 fa81 	bl	800c7e8 <SysTimeGet>
    LoRaMacRadioEvents.Events.TxDone = 1;
 80042e6:	4a0d      	ldr	r2, [pc, #52]	; (800431c <OnRadioTxDone+0x4c>)
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80042e8:	f8d4 6348 	ldr.w	r6, [r4, #840]	; 0x348
    LoRaMacRadioEvents.Events.TxDone = 1;
 80042ec:	7813      	ldrb	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 80042ee:	e895 0003 	ldmia.w	r5, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 80042f2:	f043 0320 	orr.w	r3, r3, #32
    MacCtx.LastTxSysTime = SysTimeGet( );
 80042f6:	f504 744e 	add.w	r4, r4, #824	; 0x338
 80042fa:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 80042fe:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8004300:	b12e      	cbz	r6, 800430e <OnRadioTxDone+0x3e>
 8004302:	68f3      	ldr	r3, [r6, #12]
 8004304:	b11b      	cbz	r3, 800430e <OnRadioTxDone+0x3e>
}
 8004306:	b002      	add	sp, #8
 8004308:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MacCtx.MacCallbacks->MacProcessNotify( );
 800430c:	4718      	bx	r3
}
 800430e:	b002      	add	sp, #8
 8004310:	bd70      	pop	{r4, r5, r6, pc}
 8004312:	bf00      	nop
 8004314:	20000a64 	.word	0x20000a64
 8004318:	20030a48 	.word	0x20030a48
 800431c:	20000560 	.word	0x20000560

08004320 <ResetMacParameters>:
{
 8004320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8004324:	4c4d      	ldr	r4, [pc, #308]	; (800445c <ResetMacParameters+0x13c>)
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8004326:	f8b4 3658 	ldrh.w	r3, [r4, #1624]	; 0x658
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800432a:	f8d4 1640 	ldr.w	r1, [r4, #1600]	; 0x640
 800432e:	f8d4 063c 	ldr.w	r0, [r4, #1596]	; 0x63c
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8004332:	f8a4 35cc 	strh.w	r3, [r4, #1484]	; 0x5cc
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8004336:	f204 5384 	addw	r3, r4, #1412	; 0x584
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800433a:	f504 62c0 	add.w	r2, r4, #1536	; 0x600
{
 800433e:	b090      	sub	sp, #64	; 0x40
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8004340:	e882 0003 	stmia.w	r2, {r0, r1}
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8004344:	f8d3 60cc 	ldr.w	r6, [r3, #204]	; 0xcc
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8004348:	f8d3 50d0 	ldr.w	r5, [r3, #208]	; 0xd0
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800434c:	f894 c639 	ldrb.w	ip, [r4, #1593]	; 0x639
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8004350:	f8b4 764c 	ldrh.w	r7, [r4, #1612]	; 0x64c
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8004354:	f8d4 1648 	ldr.w	r1, [r4, #1608]	; 0x648
 8004358:	f8d4 0644 	ldr.w	r0, [r4, #1604]	; 0x644
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800435c:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8004360:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8004364:	f04f 0801 	mov.w	r8, #1
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8004368:	2500      	movs	r5, #0
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800436a:	f504 62c1 	add.w	r2, r4, #1544	; 0x608
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800436e:	f8a4 7610 	strh.w	r7, [r4, #1552]	; 0x610
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8004372:	f884 c5fd 	strb.w	ip, [r4, #1533]	; 0x5fd
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8004376:	f504 6710 	add.w	r7, r4, #2304	; 0x900
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800437a:	f604 0cfc 	addw	ip, r4, #2300	; 0x8fc
    params.Bands = &RegionBands;
 800437e:	f504 661e 	add.w	r6, r4, #2528	; 0x9e0
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8004382:	e882 0003 	stmia.w	r2, {r0, r1}
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8004386:	e9cd c703 	strd	ip, r7, [sp, #12]
    params.Bands = &RegionBands;
 800438a:	9605      	str	r6, [sp, #20]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800438c:	a903      	add	r1, sp, #12
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800438e:	f884 573c 	strb.w	r5, [r4, #1852]	; 0x73c
    Nvm.MacGroup1.AdrAckCounter = 0;
 8004392:	f8c4 55bc 	str.w	r5, [r4, #1468]	; 0x5bc
    MacCtx.ResponseTimeoutStartTime = 0;
 8004396:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    Nvm.MacGroup2.MaxDCycle = 0;
 800439a:	f884 5727 	strb.w	r5, [r4, #1831]	; 0x727
    MacCtx.ChannelsNbTransCounter = 0;
 800439e:	f8a4 5418 	strh.w	r5, [r4, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 80043a2:	f884 541a 	strb.w	r5, [r4, #1050]	; 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 80043a6:	f884 55ce 	strb.w	r5, [r4, #1486]	; 0x5ce
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 80043aa:	f884 5729 	strb.w	r5, [r4, #1833]	; 0x729
    Nvm.MacGroup2.DownlinkReceived = false;
 80043ae:	f884 572a 	strb.w	r5, [r4, #1834]	; 0x72a
    Nvm.MacGroup2.AggregatedDCycle = 1;
 80043b2:	f8a4 872c 	strh.w	r8, [r4, #1836]	; 0x72c
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80043b6:	f88d 8018 	strb.w	r8, [sp, #24]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80043ba:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 80043be:	f004 fba9 	bl	8008b14 <RegionInitDefaults>
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80043c2:	f8d4 3600 	ldr.w	r3, [r4, #1536]	; 0x600
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80043c6:	f884 53d4 	strb.w	r5, [r4, #980]	; 0x3d4
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80043ca:	f8c4 33d8 	str.w	r3, [r4, #984]	; 0x3d8
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80043ce:	f504 7775 	add.w	r7, r4, #980	; 0x3d4
 80043d2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80043d4:	f504 767a 	add.w	r6, r4, #1000	; 0x3e8
 80043d8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80043da:	f894 2611 	ldrb.w	r2, [r4, #1553]	; 0x611
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80043de:	f894 373c 	ldrb.w	r3, [r4, #1852]	; 0x73c
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80043e2:	f884 23e4 	strb.w	r2, [r4, #996]	; 0x3e4
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80043e6:	f884 33e7 	strb.w	r3, [r4, #999]	; 0x3e7
    MacCtx.RxWindow2Config.RxContinuous = false;
 80043ea:	f884 53e5 	strb.w	r5, [r4, #997]	; 0x3e5
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80043ee:	f884 83e6 	strb.w	r8, [r4, #998]	; 0x3e6
    if( MacCtx.MacCallbacks != NULL )
 80043f2:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80043f6:	6839      	ldr	r1, [r7, #0]
 80043f8:	6031      	str	r1, [r6, #0]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80043fa:	2202      	movs	r2, #2
    classBCallbacks.MacProcessNotify = NULL;
 80043fc:	e9cd 5501 	strd	r5, r5, [sp, #4]
    MacCtx.Channel = 0;
 8004400:	f884 541b 	strb.w	r5, [r4, #1051]	; 0x41b
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8004404:	f884 83f9 	strb.w	r8, [r4, #1017]	; 0x3f9
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8004408:	f884 23fa 	strb.w	r2, [r4, #1018]	; 0x3fa
    if( MacCtx.MacCallbacks != NULL )
 800440c:	b11b      	cbz	r3, 8004416 <ResetMacParameters+0xf6>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800440e:	685a      	ldr	r2, [r3, #4]
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	e9cd 2301 	strd	r2, r3, [sp, #4]
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8004416:	4a12      	ldr	r2, [pc, #72]	; (8004460 <ResetMacParameters+0x140>)
 8004418:	9207      	str	r2, [sp, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800441a:	f1a2 054c 	sub.w	r5, r2, #76	; 0x4c
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800441e:	f1a2 0414 	sub.w	r4, r2, #20
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8004422:	f102 0321 	add.w	r3, r2, #33	; 0x21
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8004426:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800442a:	f502 70b8 	add.w	r0, r2, #368	; 0x170
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800442e:	9508      	str	r5, [sp, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8004430:	9409      	str	r4, [sp, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8004432:	f502 75ba 	add.w	r5, r2, #372	; 0x174
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8004436:	f502 74fc 	add.w	r4, r2, #504	; 0x1f8
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800443a:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800443c:	910b      	str	r1, [sp, #44]	; 0x2c
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 800443e:	f502 7334 	add.w	r3, r2, #720	; 0x2d0
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8004442:	900c      	str	r0, [sp, #48]	; 0x30
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8004444:	f202 525c 	addw	r2, r2, #1372	; 0x55c
 8004448:	a901      	add	r1, sp, #4
 800444a:	a807      	add	r0, sp, #28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800444c:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8004450:	930f      	str	r3, [sp, #60]	; 0x3c
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8004452:	f003 f8a9 	bl	80075a8 <LoRaMacClassBInit>
}
 8004456:	b010      	add	sp, #64	; 0x40
 8004458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800445c:	20030a48 	.word	0x20030a48
 8004460:	20030eb4 	.word	0x20030eb4

08004464 <OpenContinuousRxCWindow>:
{
 8004464:	b530      	push	{r4, r5, lr}
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8004466:	4c15      	ldr	r4, [pc, #84]	; (80044bc <OpenContinuousRxCWindow+0x58>)
{
 8004468:	b083      	sub	sp, #12
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800446a:	f504 757a 	add.w	r5, r4, #1000	; 0x3e8
 800446e:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 8004472:	f894 25e4 	ldrb.w	r2, [r4, #1508]	; 0x5e4
 8004476:	f994 160c 	ldrsb.w	r1, [r4, #1548]	; 0x60c
 800447a:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800447e:	9500      	str	r5, [sp, #0]
 8004480:	f004 fb66 	bl	8008b50 <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8004484:	2302      	movs	r3, #2
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8004486:	4629      	mov	r1, r5
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8004488:	f884 33fa 	strb.w	r3, [r4, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800448c:	f894 573c 	ldrb.w	r5, [r4, #1852]	; 0x73c
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8004490:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8004494:	f884 53fb 	strb.w	r5, [r4, #1019]	; 0x3fb
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8004498:	2301      	movs	r3, #1
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800449a:	f204 4224 	addw	r2, r4, #1060	; 0x424
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800449e:	f884 33f9 	strb.w	r3, [r4, #1017]	; 0x3f9
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80044a2:	f004 fb65 	bl	8008b70 <RegionRxConfig>
 80044a6:	b138      	cbz	r0, 80044b8 <OpenContinuousRxCWindow+0x54>
        Radio.Rx( 0 ); // Continuous mode
 80044a8:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <OpenContinuousRxCWindow+0x5c>)
 80044aa:	2000      	movs	r0, #0
 80044ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ae:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80044b0:	f894 33fa 	ldrb.w	r3, [r4, #1018]	; 0x3fa
 80044b4:	f884 348c 	strb.w	r3, [r4, #1164]	; 0x48c
}
 80044b8:	b003      	add	sp, #12
 80044ba:	bd30      	pop	{r4, r5, pc}
 80044bc:	20030a48 	.word	0x20030a48
 80044c0:	08015848 	.word	0x08015848

080044c4 <SwitchClass>:
{
 80044c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( Nvm.MacGroup2.DeviceClass )
 80044c6:	4e3c      	ldr	r6, [pc, #240]	; (80045b8 <SwitchClass+0xf4>)
 80044c8:	f896 4724 	ldrb.w	r4, [r6, #1828]	; 0x724
 80044cc:	2c01      	cmp	r4, #1
{
 80044ce:	4605      	mov	r5, r0
    switch( Nvm.MacGroup2.DeviceClass )
 80044d0:	d004      	beq.n	80044dc <SwitchClass+0x18>
 80044d2:	2c02      	cmp	r4, #2
 80044d4:	d03c      	beq.n	8004550 <SwitchClass+0x8c>
 80044d6:	b144      	cbz	r4, 80044ea <SwitchClass+0x26>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80044d8:	2003      	movs	r0, #3
}
 80044da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            status = LoRaMacClassBSwitchClass( deviceClass );
 80044dc:	f003 f884 	bl	80075e8 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 80044e0:	2800      	cmp	r0, #0
 80044e2:	d1fa      	bne.n	80044da <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80044e4:	f886 5724 	strb.w	r5, [r6, #1828]	; 0x724
}
 80044e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( deviceClass == CLASS_A )
 80044ea:	2800      	cmp	r0, #0
 80044ec:	d03d      	beq.n	800456a <SwitchClass+0xa6>
            if( deviceClass == CLASS_B )
 80044ee:	2801      	cmp	r0, #1
 80044f0:	d0f4      	beq.n	80044dc <SwitchClass+0x18>
            if( deviceClass == CLASS_C )
 80044f2:	2802      	cmp	r0, #2
 80044f4:	d1f0      	bne.n	80044d8 <SwitchClass+0x14>
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80044f6:	f506 7c75 	add.w	ip, r6, #980	; 0x3d4
 80044fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80044fe:	f506 777a 	add.w	r7, r6, #1000	; 0x3e8
 8004502:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004504:	f8dc 3000 	ldr.w	r3, [ip]
 8004508:	603b      	str	r3, [r7, #0]
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800450a:	f886 5724 	strb.w	r5, [r6, #1828]	; 0x724
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800450e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8004512:	f886 53fa 	strb.w	r5, [r6, #1018]	; 0x3fa
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8004516:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
 800451a:	b11a      	cbz	r2, 8004524 <SwitchClass+0x60>
 800451c:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
 8004520:	2a02      	cmp	r2, #2
 8004522:	d02c      	beq.n	800457e <SwitchClass+0xba>
 8004524:	3401      	adds	r4, #1
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8004526:	2c04      	cmp	r4, #4
 8004528:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800452c:	d1f3      	bne.n	8004516 <SwitchClass+0x52>
                Radio.Sleep( );
 800452e:	4b23      	ldr	r3, [pc, #140]	; (80045bc <SwitchClass+0xf8>)
                MacCtx.NodeAckRequested = false;
 8004530:	2200      	movs	r2, #0
                Radio.Sleep( );
 8004532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                MacCtx.NodeAckRequested = false;
 8004534:	f886 241a 	strb.w	r2, [r6, #1050]	; 0x41a
                Radio.Sleep( );
 8004538:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800453a:	f7ff ff93 	bl	8004464 <OpenContinuousRxCWindow>
                if( Nvm.MacGroup2.Version.Fields.Minor >= 1 )
 800453e:	f896 373a 	ldrb.w	r3, [r6, #1850]	; 0x73a
 8004542:	b183      	cbz	r3, 8004566 <SwitchClass+0xa2>
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
 8004544:	491e      	ldr	r1, [pc, #120]	; (80045c0 <SwitchClass+0xfc>)
 8004546:	2201      	movs	r2, #1
 8004548:	2020      	movs	r0, #32
 800454a:	f003 f873 	bl	8007634 <LoRaMacCommandsAddCmd>
 800454e:	e00a      	b.n	8004566 <SwitchClass+0xa2>
            if( deviceClass == CLASS_A )
 8004550:	2800      	cmp	r0, #0
 8004552:	d1c1      	bne.n	80044d8 <SwitchClass+0x14>
                Radio.Sleep( );
 8004554:	4b19      	ldr	r3, [pc, #100]	; (80045bc <SwitchClass+0xf8>)
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8004556:	f886 0724 	strb.w	r0, [r6, #1828]	; 0x724
                Radio.Sleep( );
 800455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455c:	4798      	blx	r3
                if( Nvm.MacGroup2.Version.Fields.Minor >= 1 )
 800455e:	f896 373a 	ldrb.w	r3, [r6, #1850]	; 0x73a
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1ee      	bne.n	8004544 <SwitchClass+0x80>
                status = LORAMAC_STATUS_OK;
 8004566:	2000      	movs	r0, #0
}
 8004568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800456a:	f8d6 0600 	ldr.w	r0, [r6, #1536]	; 0x600
 800456e:	f8d6 1604 	ldr.w	r1, [r6, #1540]	; 0x604
 8004572:	f506 66c1 	add.w	r6, r6, #1544	; 0x608
 8004576:	e886 0003 	stmia.w	r6, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800457a:	2003      	movs	r0, #3
}
 800457c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800457e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8004582:	eb06 1304 	add.w	r3, r6, r4, lsl #4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8004586:	f896 0611 	ldrb.w	r0, [r6, #1553]	; 0x611
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800458a:	f8d3 2680 	ldr.w	r2, [r3, #1664]	; 0x680
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800458e:	f893 5684 	ldrb.w	r5, [r3, #1668]	; 0x684
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8004592:	f896 441b 	ldrb.w	r4, [r6, #1051]	; 0x41b
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 8004596:	f8c6 2608 	str.w	r2, [r6, #1544]	; 0x608
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800459a:	2103      	movs	r1, #3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800459c:	2301      	movs	r3, #1
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800459e:	f8c6 23ec 	str.w	r2, [r6, #1004]	; 0x3ec
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 80045a2:	f886 560c 	strb.w	r5, [r6, #1548]	; 0x60c
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80045a6:	f886 43e8 	strb.w	r4, [r6, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80045aa:	f886 03f8 	strb.w	r0, [r6, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80045ae:	f886 13fa 	strb.w	r1, [r6, #1018]	; 0x3fa
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 80045b2:	f886 33f9 	strb.w	r3, [r6, #1017]	; 0x3f9
                        break;
 80045b6:	e7ba      	b.n	800452e <SwitchClass+0x6a>
 80045b8:	20030a48 	.word	0x20030a48
 80045bc:	08015848 	.word	0x08015848
 80045c0:	2003116c 	.word	0x2003116c

080045c4 <RxWindowSetup.constprop.0>:
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 80045c4:	b570      	push	{r4, r5, r6, lr}
    Radio.Standby( );
 80045c6:	4e0b      	ldr	r6, [pc, #44]	; (80045f4 <RxWindowSetup.constprop.0+0x30>)
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80045c8:	4d0b      	ldr	r5, [pc, #44]	; (80045f8 <RxWindowSetup.constprop.0+0x34>)
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 80045ca:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 80045cc:	f008 f84a 	bl	800c664 <TimerStop>
    Radio.Standby( );
 80045d0:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80045d2:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80045d4:	f895 05dc 	ldrb.w	r0, [r5, #1500]	; 0x5dc
 80045d8:	4621      	mov	r1, r4
 80045da:	f205 4224 	addw	r2, r5, #1060	; 0x424
 80045de:	f004 fac7 	bl	8008b70 <RegionRxConfig>
 80045e2:	b130      	cbz	r0, 80045f2 <RxWindowSetup.constprop.0+0x2e>
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 80045e4:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80045e6:	f8d5 05e8 	ldr.w	r0, [r5, #1512]	; 0x5e8
 80045ea:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80045ec:	7ca3      	ldrb	r3, [r4, #18]
 80045ee:	f885 348c 	strb.w	r3, [r5, #1164]	; 0x48c
}
 80045f2:	bd70      	pop	{r4, r5, r6, pc}
 80045f4:	08015848 	.word	0x08015848
 80045f8:	20030a48 	.word	0x20030a48

080045fc <OnRxWindow1TimerEvent>:
{
 80045fc:	b430      	push	{r4, r5}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80045fe:	4b0e      	ldr	r3, [pc, #56]	; (8004638 <OnRxWindow1TimerEvent+0x3c>)
    MacCtx.RxWindow1Config.RxContinuous = false;
 8004600:	2200      	movs	r2, #0
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8004602:	f893 141b 	ldrb.w	r1, [r3, #1051]	; 0x41b
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8004606:	f893 05fd 	ldrb.w	r0, [r3, #1533]	; 0x5fd
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800460a:	f893 5611 	ldrb.w	r5, [r3, #1553]	; 0x611
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800460e:	f893 473c 	ldrb.w	r4, [r3, #1852]	; 0x73c
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8004612:	f883 13c0 	strb.w	r1, [r3, #960]	; 0x3c0
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8004616:	f883 03c3 	strb.w	r0, [r3, #963]	; 0x3c3
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800461a:	f883 53d0 	strb.w	r5, [r3, #976]	; 0x3d0
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800461e:	f883 43d3 	strb.w	r4, [r3, #979]	; 0x3d3
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8004622:	f883 23d2 	strb.w	r2, [r3, #978]	; 0x3d2
}
 8004626:	bc30      	pop	{r4, r5}
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8004628:	f503 7170 	add.w	r1, r3, #960	; 0x3c0
 800462c:	f503 7062 	add.w	r0, r3, #904	; 0x388
    MacCtx.RxWindow1Config.RxContinuous = false;
 8004630:	f883 23d1 	strb.w	r2, [r3, #977]	; 0x3d1
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8004634:	f7ff bfc6 	b.w	80045c4 <RxWindowSetup.constprop.0>
 8004638:	20030a48 	.word	0x20030a48

0800463c <OnRxWindow2TimerEvent>:
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800463c:	4b11      	ldr	r3, [pc, #68]	; (8004684 <OnRxWindow2TimerEvent+0x48>)
 800463e:	f893 248c 	ldrb.w	r2, [r3, #1164]	; 0x48c
 8004642:	b902      	cbnz	r2, 8004646 <OnRxWindow2TimerEvent+0xa>
 8004644:	4770      	bx	lr
{
 8004646:	b430      	push	{r4, r5}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8004648:	f893 441b 	ldrb.w	r4, [r3, #1051]	; 0x41b
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800464c:	f893 0611 	ldrb.w	r0, [r3, #1553]	; 0x611
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8004650:	f883 43d4 	strb.w	r4, [r3, #980]	; 0x3d4
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8004654:	f893 273c 	ldrb.w	r2, [r3, #1852]	; 0x73c
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8004658:	f8d3 1600 	ldr.w	r1, [r3, #1536]	; 0x600
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800465c:	f883 03e4 	strb.w	r0, [r3, #996]	; 0x3e4
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8004660:	2401      	movs	r4, #1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8004662:	2500      	movs	r5, #0
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8004664:	f883 43e6 	strb.w	r4, [r3, #998]	; 0x3e6
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8004668:	f883 23e7 	strb.w	r2, [r3, #999]	; 0x3e7
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800466c:	f8c3 13d8 	str.w	r1, [r3, #984]	; 0x3d8
    MacCtx.RxWindow2Config.RxContinuous = false;
 8004670:	f883 53e5 	strb.w	r5, [r3, #997]	; 0x3e5
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8004674:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
}
 8004678:	bc30      	pop	{r4, r5}
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800467a:	f503 7068 	add.w	r0, r3, #928	; 0x3a0
 800467e:	f7ff bfa1 	b.w	80045c4 <RxWindowSetup.constprop.0>
 8004682:	bf00      	nop
 8004684:	20030a48 	.word	0x20030a48

08004688 <PrepareFrame>:
{
 8004688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MacCtx.PktBufferLen = 0;
 800468c:	4c5c      	ldr	r4, [pc, #368]	; (8004800 <PrepareFrame+0x178>)
{
 800468e:	b087      	sub	sp, #28
    MacCtx.PktBufferLen = 0;
 8004690:	2500      	movs	r5, #0
    size_t macCmdsSize = 0;
 8004692:	e9cd 5501 	strd	r5, r5, [sp, #4]
{
 8004696:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
    MacCtx.PktBufferLen = 0;
 800469a:	8025      	strh	r5, [r4, #0]
{
 800469c:	4607      	mov	r7, r0
 800469e:	4688      	mov	r8, r1
 80046a0:	4691      	mov	r9, r2
    if( fBuffer == NULL )
 80046a2:	461e      	mov	r6, r3
    MacCtx.NodeAckRequested = false;
 80046a4:	f884 541a 	strb.w	r5, [r4, #1050]	; 0x41a
    if( fBuffer == NULL )
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d04c      	beq.n	8004746 <PrepareFrame+0xbe>
 80046ac:	fa5f fb8a 	uxtb.w	fp, sl
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80046b0:	4854      	ldr	r0, [pc, #336]	; (8004804 <PrepareFrame+0x17c>)
 80046b2:	4652      	mov	r2, sl
 80046b4:	4631      	mov	r1, r6
 80046b6:	f7fe fbc9 	bl	8002e4c <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80046ba:	f884 b237 	strb.w	fp, [r4, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 80046be:	783b      	ldrb	r3, [r7, #0]
 80046c0:	70a3      	strb	r3, [r4, #2]
    switch( macHdr->Bits.MType )
 80046c2:	783d      	ldrb	r5, [r7, #0]
 80046c4:	096d      	lsrs	r5, r5, #5
 80046c6:	2d04      	cmp	r5, #4
 80046c8:	d007      	beq.n	80046da <PrepareFrame+0x52>
 80046ca:	2d07      	cmp	r5, #7
 80046cc:	d03e      	beq.n	800474c <PrepareFrame+0xc4>
 80046ce:	2d02      	cmp	r5, #2
 80046d0:	d006      	beq.n	80046e0 <PrepareFrame+0x58>
 80046d2:	2002      	movs	r0, #2
}
 80046d4:	b007      	add	sp, #28
 80046d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MacCtx.NodeAckRequested = true;
 80046da:	2301      	movs	r3, #1
 80046dc:	f884 341a 	strb.w	r3, [r4, #1050]	; 0x41a
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 80046e0:	2304      	movs	r3, #4
 80046e2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 80046e6:	4d48      	ldr	r5, [pc, #288]	; (8004808 <PrepareFrame+0x180>)
 80046e8:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80046ec:	23ff      	movs	r3, #255	; 0xff
 80046ee:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 80046f2:	783a      	ldrb	r2, [r7, #0]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 80046f4:	f8d4 3660 	ldr.w	r3, [r4, #1632]	; 0x660
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 80046f8:	f884 210d 	strb.w	r2, [r4, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 80046fc:	f884 9128 	strb.w	r9, [r4, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8004700:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8004704:	f898 3000 	ldrb.w	r3, [r8]
 8004708:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800470c:	a801      	add	r0, sp, #4
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800470e:	f505 739b 	add.w	r3, r5, #310	; 0x136
 8004712:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8004716:	f884 b130 	strb.w	fp, [r4, #304]	; 0x130
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800471a:	f003 fc19 	bl	8007f50 <LoRaMacCryptoGetFCntUp>
 800471e:	4603      	mov	r3, r0
 8004720:	bb20      	cbnz	r0, 800476c <PrepareFrame+0xe4>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8004722:	9a01      	ldr	r2, [sp, #4]
            MacCtx.McpsConfirm.AckReceived = false;
 8004724:	f8a4 3448 	strh.w	r3, [r4, #1096]	; 0x448
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8004728:	a802      	add	r0, sp, #8
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800472a:	f8a4 2116 	strh.w	r2, [r4, #278]	; 0x116
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800472e:	f8c4 2450 	str.w	r2, [r4, #1104]	; 0x450
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8004732:	f003 f89d 	bl	8007870 <LoRaMacCommandsGetSizeSerializedCmds>
 8004736:	2800      	cmp	r0, #0
 8004738:	d14b      	bne.n	80047d2 <PrepareFrame+0x14a>
            if( macCmdsSize > 0 )
 800473a:	9b02      	ldr	r3, [sp, #8]
 800473c:	b9d3      	cbnz	r3, 8004774 <PrepareFrame+0xec>
    return LORAMAC_STATUS_OK;
 800473e:	2000      	movs	r0, #0
}
 8004740:	b007      	add	sp, #28
 8004742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004746:	469b      	mov	fp, r3
        fBufferSize = 0;
 8004748:	469a      	mov	sl, r3
 800474a:	e7b1      	b.n	80046b0 <PrepareFrame+0x28>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800474c:	2e00      	cmp	r6, #0
 800474e:	d0f6      	beq.n	800473e <PrepareFrame+0xb6>
 8004750:	f1bb 0f00 	cmp.w	fp, #0
 8004754:	d0f3      	beq.n	800473e <PrepareFrame+0xb6>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8004756:	482d      	ldr	r0, [pc, #180]	; (800480c <PrepareFrame+0x184>)
 8004758:	fa5f f28a 	uxtb.w	r2, sl
 800475c:	4631      	mov	r1, r6
 800475e:	f7fe fb75 	bl	8002e4c <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8004762:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 8004766:	3301      	adds	r3, #1
 8004768:	8023      	strh	r3, [r4, #0]
 800476a:	e7e8      	b.n	800473e <PrepareFrame+0xb6>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800476c:	2012      	movs	r0, #18
}
 800476e:	b007      	add	sp, #28
 8004770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8004774:	f994 35cd 	ldrsb.w	r3, [r4, #1485]	; 0x5cd
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8004778:	f894 2610 	ldrb.w	r2, [r4, #1552]	; 0x610
    getPhy.Datarate = datarate;
 800477c:	f88d 3011 	strb.w	r3, [sp, #17]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8004780:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8004784:	f88d 2012 	strb.w	r2, [sp, #18]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8004788:	230d      	movs	r3, #13
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800478a:	a904      	add	r1, sp, #16
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800478c:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8004790:	f004 f9b0 	bl	8008af4 <RegionGetPhyParam>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8004794:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 8004798:	b15b      	cbz	r3, 80047b2 <PrepareFrame+0x12a>
 800479a:	9b02      	ldr	r3, [sp, #8]
 800479c:	2b0f      	cmp	r3, #15
 800479e:	d91c      	bls.n	80047da <PrepareFrame+0x152>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80047a0:	f205 5202 	addw	r2, r5, #1282	; 0x502
 80047a4:	a902      	add	r1, sp, #8
 80047a6:	b2c0      	uxtb	r0, r0
 80047a8:	f003 f86e 	bl	8007888 <LoRaMacCommandsSerializeCmds>
 80047ac:	b988      	cbnz	r0, 80047d2 <PrepareFrame+0x14a>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 80047ae:	200a      	movs	r0, #10
 80047b0:	e790      	b.n	80046d4 <PrepareFrame+0x4c>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80047b2:	f205 5502 	addw	r5, r5, #1282	; 0x502
 80047b6:	a902      	add	r1, sp, #8
 80047b8:	b2c0      	uxtb	r0, r0
 80047ba:	462a      	mov	r2, r5
 80047bc:	f003 f864 	bl	8007888 <LoRaMacCommandsSerializeCmds>
 80047c0:	b938      	cbnz	r0, 80047d2 <PrepareFrame+0x14a>
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80047c2:	9b02      	ldr	r3, [sp, #8]
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 80047c4:	f884 0128 	strb.w	r0, [r4, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 80047c8:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80047cc:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
 80047d0:	e780      	b.n	80046d4 <PrepareFrame+0x4c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80047d2:	2013      	movs	r0, #19
}
 80047d4:	b007      	add	sp, #28
 80047d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80047da:	f505 728b 	add.w	r2, r5, #278	; 0x116
 80047de:	a902      	add	r1, sp, #8
 80047e0:	200f      	movs	r0, #15
 80047e2:	f003 f851 	bl	8007888 <LoRaMacCommandsSerializeCmds>
 80047e6:	2800      	cmp	r0, #0
 80047e8:	d1f3      	bne.n	80047d2 <PrepareFrame+0x14a>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80047ea:	f898 3000 	ldrb.w	r3, [r8]
 80047ee:	9a02      	ldr	r2, [sp, #8]
 80047f0:	f362 0303 	bfi	r3, r2, #0, #4
 80047f4:	f888 3000 	strb.w	r3, [r8]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80047f8:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
 80047fc:	e76a      	b.n	80046d4 <PrepareFrame+0x4c>
 80047fe:	bf00      	nop
 8004800:	20030a48 	.word	0x20030a48
 8004804:	20030b80 	.word	0x20030b80
 8004808:	20030a4a 	.word	0x20030a4a
 800480c:	20030a4b 	.word	0x20030a4b

08004810 <SendFrameOnChannel>:
{
 8004810:	b5f0      	push	{r4, r5, r6, r7, lr}
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8004812:	4c4f      	ldr	r4, [pc, #316]	; (8004950 <SendFrameOnChannel+0x140>)
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8004814:	f204 5384 	addw	r3, r4, #1412	; 0x584
{
 8004818:	b087      	sub	sp, #28
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800481a:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800481e:	f894 65cd 	ldrb.w	r6, [r4, #1485]	; 0x5cd
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8004822:	f894 25cc 	ldrb.w	r2, [r4, #1484]	; 0x5cc
    txConfig.PktLen = MacCtx.PktBufferLen;
 8004826:	8821      	ldrh	r1, [r4, #0]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8004828:	f8d3 7094 	ldr.w	r7, [r3, #148]	; 0x94
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800482c:	9503      	str	r5, [sp, #12]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800482e:	f204 431c 	addw	r3, r4, #1052	; 0x41c
{
 8004832:	4605      	mov	r5, r0
    txConfig.Channel = channel;
 8004834:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8004838:	f88d 6009 	strb.w	r6, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800483c:	f88d 200a 	strb.w	r2, [sp, #10]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8004840:	f8ad 1014 	strh.w	r1, [sp, #20]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8004844:	f10d 0203 	add.w	r2, sp, #3
 8004848:	a902      	add	r1, sp, #8
 800484a:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800484e:	9704      	str	r7, [sp, #16]
    int8_t txPower = 0;
 8004850:	2600      	movs	r6, #0
 8004852:	f88d 6003 	strb.w	r6, [sp, #3]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8004856:	f004 f995 	bl	8008b84 <RegionTxConfig>
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800485a:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800485e:	f894 15cd 	ldrb.w	r1, [r4, #1485]	; 0x5cd
    MacCtx.McpsConfirm.TxPower = txPower;
 8004862:	f89d 2003 	ldrb.w	r2, [sp, #3]
    MacCtx.McpsConfirm.Channel = channel;
 8004866:	f8c4 5454 	str.w	r5, [r4, #1108]	; 0x454
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800486a:	2001      	movs	r0, #1
 800486c:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8004870:	f884 1446 	strb.w	r1, [r4, #1094]	; 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 8004874:	f884 2447 	strb.w	r2, [r4, #1095]	; 0x447
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8004878:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800487c:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8004880:	f002 feaa 	bl	80075d8 <LoRaMacClassBIsBeaconModeActive>
 8004884:	b9a0      	cbnz	r0, 80048b0 <SendFrameOnChannel+0xa0>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8004886:	f894 3724 	ldrb.w	r3, [r4, #1828]	; 0x724
 800488a:	2b01      	cmp	r3, #1
 800488c:	d05b      	beq.n	8004946 <SendFrameOnChannel+0x136>
    LoRaMacClassBHaltBeaconing( );
 800488e:	f002 fea7 	bl	80075e0 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8004892:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8004896:	f994 55cd 	ldrsb.w	r5, [r4, #1485]	; 0x5cd
 800489a:	f894 641b 	ldrb.w	r6, [r4, #1051]	; 0x41b
    uint32_t fCntUp = 0;
 800489e:	2000      	movs	r0, #0
 80048a0:	9001      	str	r0, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 80048a2:	2b04      	cmp	r3, #4
 80048a4:	d84c      	bhi.n	8004940 <SendFrameOnChannel+0x130>
 80048a6:	e8df f003 	tbb	[pc, r3]
 80048aa:	3f37      	.short	0x3f37
 80048ac:	4b45      	.short	0x4b45
 80048ae:	0b          	.byte	0x0b
 80048af:	00          	.byte	0x00
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80048b0:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
 80048b4:	f002 fea8 	bl	8007608 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 80048b8:	2800      	cmp	r0, #0
 80048ba:	d0e4      	beq.n	8004886 <SendFrameOnChannel+0x76>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80048bc:	2010      	movs	r0, #16
 80048be:	e029      	b.n	8004914 <SendFrameOnChannel+0x104>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80048c0:	a801      	add	r0, sp, #4
 80048c2:	f003 fb45 	bl	8007f50 <LoRaMacCryptoGetFCntUp>
 80048c6:	2800      	cmp	r0, #0
 80048c8:	d140      	bne.n	800494c <SendFrameOnChannel+0x13c>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 80048ca:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
                fCntUp -= 1;
 80048ce:	9801      	ldr	r0, [sp, #4]
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 80048d0:	b10b      	cbz	r3, 80048d6 <SendFrameOnChannel+0xc6>
                fCntUp -= 1;
 80048d2:	3801      	subs	r0, #1
 80048d4:	9001      	str	r0, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80048d6:	4b1f      	ldr	r3, [pc, #124]	; (8004954 <SendFrameOnChannel+0x144>)
 80048d8:	4632      	mov	r2, r6
 80048da:	b2e9      	uxtb	r1, r5
 80048dc:	f003 fc4e 	bl	800817c <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80048e0:	b9f8      	cbnz	r0, 8004922 <SendFrameOnChannel+0x112>
    MacCtx.ChannelsNbTransCounter++;
 80048e2:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80048e6:	f8d4 5340 	ldr.w	r5, [r4, #832]	; 0x340
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80048ea:	4a1b      	ldr	r2, [pc, #108]	; (8004958 <SendFrameOnChannel+0x148>)
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80048ec:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80048f0:	481a      	ldr	r0, [pc, #104]	; (800495c <SendFrameOnChannel+0x14c>)
 80048f2:	6a92      	ldr	r2, [r2, #40]	; 0x28
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80048f4:	8021      	strh	r1, [r4, #0]
    MacCtx.ChannelsNbTransCounter++;
 80048f6:	3301      	adds	r3, #1
 80048f8:	b2db      	uxtb	r3, r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80048fa:	f045 0602 	orr.w	r6, r5, #2
    MacCtx.ResponseTimeoutStartTime = 0;
 80048fe:	2500      	movs	r5, #0
    MacCtx.ChannelsNbTransCounter++;
 8004900:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8004904:	f884 3449 	strb.w	r3, [r4, #1097]	; 0x449
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8004908:	f8c4 6340 	str.w	r6, [r4, #832]	; 0x340
    MacCtx.ResponseTimeoutStartTime = 0;
 800490c:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8004910:	4790      	blx	r2
    return LORAMAC_STATUS_OK;
 8004912:	4628      	mov	r0, r5
}
 8004914:	b007      	add	sp, #28
 8004916:	bdf0      	pop	{r4, r5, r6, r7, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8004918:	480e      	ldr	r0, [pc, #56]	; (8004954 <SendFrameOnChannel+0x144>)
 800491a:	f003 fb81 	bl	8008020 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800491e:	2800      	cmp	r0, #0
 8004920:	d0df      	beq.n	80048e2 <SendFrameOnChannel+0xd2>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8004922:	2011      	movs	r0, #17
}
 8004924:	b007      	add	sp, #28
 8004926:	bdf0      	pop	{r4, r5, r6, r7, pc}
            macCryptoStatus = LoRaMacCryptoPrepareReJoinType1( &MacCtx.TxMsg.Message.ReJoin1 );
 8004928:	480a      	ldr	r0, [pc, #40]	; (8004954 <SendFrameOnChannel+0x144>)
 800492a:	f003 fbcd 	bl	80080c8 <LoRaMacCryptoPrepareReJoinType1>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800492e:	2800      	cmp	r0, #0
 8004930:	d0d7      	beq.n	80048e2 <SendFrameOnChannel+0xd2>
 8004932:	e7f6      	b.n	8004922 <SendFrameOnChannel+0x112>
            macCryptoStatus = LoRaMacCryptoPrepareReJoinType0or2( &MacCtx.TxMsg.Message.ReJoin0or2 );
 8004934:	4807      	ldr	r0, [pc, #28]	; (8004954 <SendFrameOnChannel+0x144>)
 8004936:	f003 fbf5 	bl	8008124 <LoRaMacCryptoPrepareReJoinType0or2>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800493a:	2800      	cmp	r0, #0
 800493c:	d0d1      	beq.n	80048e2 <SendFrameOnChannel+0xd2>
 800493e:	e7f0      	b.n	8004922 <SendFrameOnChannel+0x112>
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8004940:	2003      	movs	r0, #3
}
 8004942:	b007      	add	sp, #28
 8004944:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LoRaMacClassBStopRxSlots( );
 8004946:	f002 fe61 	bl	800760c <LoRaMacClassBStopRxSlots>
 800494a:	e7a0      	b.n	800488e <SendFrameOnChannel+0x7e>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800494c:	2012      	movs	r0, #18
 800494e:	e7e1      	b.n	8004914 <SendFrameOnChannel+0x104>
 8004950:	20030a48 	.word	0x20030a48
 8004954:	20030b50 	.word	0x20030b50
 8004958:	08015848 	.word	0x08015848
 800495c:	20030a4a 	.word	0x20030a4a

08004960 <ScheduleTx>:
{
 8004960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004962:	b091      	sub	sp, #68	; 0x44
 8004964:	4606      	mov	r6, r0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8004966:	f002 fe31 	bl	80075cc <LoRaMacClassBIsBeaconExpected>
 800496a:	2800      	cmp	r0, #0
 800496c:	d17f      	bne.n	8004a6e <ScheduleTx+0x10e>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800496e:	4c7a      	ldr	r4, [pc, #488]	; (8004b58 <ScheduleTx+0x1f8>)
 8004970:	f894 3724 	ldrb.w	r3, [r4, #1828]	; 0x724
 8004974:	2b01      	cmp	r3, #1
 8004976:	f000 8083 	beq.w	8004a80 <ScheduleTx+0x120>
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800497a:	f8d4 35c4 	ldr.w	r3, [r4, #1476]	; 0x5c4
 800497e:	b943      	cbnz	r3, 8004992 <ScheduleTx+0x32>
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8004980:	f8b4 272c 	ldrh.w	r2, [r4, #1836]	; 0x72c
 8004984:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
 8004988:	3a01      	subs	r2, #1
 800498a:	fb03 f302 	mul.w	r3, r3, r2
 800498e:	f8c4 35c4 	str.w	r3, [r4, #1476]	; 0x5c4
    switch( MacCtx.TxMsg.Type )
 8004992:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8004996:	2b00      	cmp	r3, #0
 8004998:	d062      	beq.n	8004a60 <ScheduleTx+0x100>
 800499a:	2b04      	cmp	r3, #4
 800499c:	d003      	beq.n	80049a6 <ScheduleTx+0x46>
 800499e:	2503      	movs	r5, #3
}
 80049a0:	4628      	mov	r0, r5
 80049a2:	b011      	add	sp, #68	; 0x44
 80049a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80049a6:	486d      	ldr	r0, [pc, #436]	; (8004b5c <ScheduleTx+0x1fc>)
 80049a8:	f004 f82c 	bl	8008a04 <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80049ac:	2800      	cmp	r0, #0
 80049ae:	d15c      	bne.n	8004a6a <ScheduleTx+0x10a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80049b0:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 80049b4:	f8d4 15c4 	ldr.w	r1, [r4, #1476]	; 0x5c4
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80049b8:	f894 25cd 	ldrb.w	r2, [r4, #1485]	; 0x5cd
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80049bc:	8023      	strh	r3, [r4, #0]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80049be:	af08      	add	r7, sp, #32
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 80049c0:	f894 3728 	ldrb.w	r3, [r4, #1832]	; 0x728
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 80049c4:	910a      	str	r1, [sp, #40]	; 0x28
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80049c6:	4638      	mov	r0, r7
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80049c8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 80049cc:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80049d0:	f007 ff30 	bl	800c834 <SysTimeGetMcuTime>
 80049d4:	f8d4 3734 	ldr.w	r3, [r4, #1844]	; 0x734
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	ad02      	add	r5, sp, #8
 80049dc:	e897 0006 	ldmia.w	r7, {r1, r2}
 80049e0:	4628      	mov	r0, r5
 80049e2:	f8d4 3730 	ldr.w	r3, [r4, #1840]	; 0x730
 80049e6:	f007 febf 	bl	800c768 <SysTimeSub>
 80049ea:	e895 0003 	ldmia.w	r5, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 80049ee:	f8d4 35c0 	ldr.w	r3, [r4, #1472]	; 0x5c0
 80049f2:	930b      	str	r3, [sp, #44]	; 0x2c
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80049f4:	f894 273c 	ldrb.w	r2, [r4, #1852]	; 0x73c
    nextChan.PktLen = MacCtx.PktBufferLen;
 80049f8:	8825      	ldrh	r5, [r4, #0]
 80049fa:	f8ad 503e 	strh.w	r5, [sp, #62]	; 0x3e
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80049fe:	ab0d      	add	r3, sp, #52	; 0x34
 8004a00:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastTxIsJoinRequest = false;
 8004a04:	2700      	movs	r7, #0
    nextChan.Joined = true;
 8004a06:	2301      	movs	r3, #1
    nextChan.LastTxIsJoinRequest = false;
 8004a08:	f88d 703c 	strb.w	r7, [sp, #60]	; 0x3c
    nextChan.Joined = true;
 8004a0c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8004a10:	b38a      	cbz	r2, 8004a76 <ScheduleTx+0x116>
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8004a12:	4f53      	ldr	r7, [pc, #332]	; (8004b60 <ScheduleTx+0x200>)
 8004a14:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 8004a18:	9700      	str	r7, [sp, #0]
 8004a1a:	f46f 72d4 	mvn.w	r2, #424	; 0x1a8
 8004a1e:	f1a7 03c8 	sub.w	r3, r7, #200	; 0xc8
 8004a22:	18ba      	adds	r2, r7, r2
 8004a24:	a90a      	add	r1, sp, #40	; 0x28
 8004a26:	f004 f8f5 	bl	8008c14 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 8004a2a:	4605      	mov	r5, r0
 8004a2c:	b390      	cbz	r0, 8004a94 <ScheduleTx+0x134>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8004a2e:	280b      	cmp	r0, #11
 8004a30:	d1b6      	bne.n	80049a0 <ScheduleTx+0x40>
 8004a32:	2e00      	cmp	r6, #0
 8004a34:	d0b4      	beq.n	80049a0 <ScheduleTx+0x40>
            if( MacCtx.DutyCycleWaitTime != 0 )
 8004a36:	f8d4 54fc 	ldr.w	r5, [r4, #1276]	; 0x4fc
 8004a3a:	2d00      	cmp	r5, #0
 8004a3c:	d0b0      	beq.n	80049a0 <ScheduleTx+0x40>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8004a3e:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8004a42:	4629      	mov	r1, r5
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8004a44:	f043 0320 	orr.w	r3, r3, #32
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8004a48:	f5a7 7015 	sub.w	r0, r7, #596	; 0x254
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8004a4c:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8004a50:	f007 fe42 	bl	800c6d8 <TimerSetValue>
                TimerStart( &MacCtx.TxDelayedTimer );
 8004a54:	f5a7 7015 	sub.w	r0, r7, #596	; 0x254
 8004a58:	f007 fd64 	bl	800c524 <TimerStart>
            return LORAMAC_STATUS_OK;
 8004a5c:	2500      	movs	r5, #0
 8004a5e:	e79f      	b.n	80049a0 <ScheduleTx+0x40>
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8004a60:	483e      	ldr	r0, [pc, #248]	; (8004b5c <ScheduleTx+0x1fc>)
 8004a62:	f003 ff21 	bl	80088a8 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8004a66:	2800      	cmp	r0, #0
 8004a68:	d0a2      	beq.n	80049b0 <ScheduleTx+0x50>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8004a6a:	2511      	movs	r5, #17
 8004a6c:	e798      	b.n	80049a0 <ScheduleTx+0x40>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8004a6e:	250e      	movs	r5, #14
}
 8004a70:	4628      	mov	r0, r5
 8004a72:	b011      	add	sp, #68	; 0x44
 8004a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nextChan.LastTxIsJoinRequest = true;
 8004a76:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
        nextChan.Joined = false;
 8004a7a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 8004a7e:	e7c8      	b.n	8004a12 <ScheduleTx+0xb2>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8004a80:	f002 fda6 	bl	80075d0 <LoRaMacClassBIsPingExpected>
 8004a84:	b920      	cbnz	r0, 8004a90 <ScheduleTx+0x130>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8004a86:	f002 fda5 	bl	80075d4 <LoRaMacClassBIsMulticastExpected>
 8004a8a:	2800      	cmp	r0, #0
 8004a8c:	f43f af75 	beq.w	800497a <ScheduleTx+0x1a>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8004a90:	250f      	movs	r5, #15
 8004a92:	e785      	b.n	80049a0 <ScheduleTx+0x40>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8004a94:	f894 65dc 	ldrb.w	r6, [r4, #1500]	; 0x5dc
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8004a98:	f994 35fd 	ldrsb.w	r3, [r4, #1533]	; 0x5fd
 8004a9c:	f994 25cd 	ldrsb.w	r2, [r4, #1485]	; 0x5cd
 8004aa0:	f894 1611 	ldrb.w	r1, [r4, #1553]	; 0x611
 8004aa4:	4630      	mov	r0, r6
 8004aa6:	f004 f8c5 	bl	8008c34 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8004aaa:	f5a7 7301 	sub.w	r3, r7, #516	; 0x204
 8004aae:	b241      	sxtb	r1, r0
 8004ab0:	f894 25e4 	ldrb.w	r2, [r4, #1508]	; 0x5e4
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	4630      	mov	r0, r6
 8004ab8:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8004abc:	f5a7 77f8 	sub.w	r7, r7, #496	; 0x1f0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8004ac0:	f004 f846 	bl	8008b50 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8004ac4:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 8004ac8:	f894 25e4 	ldrb.w	r2, [r4, #1508]	; 0x5e4
 8004acc:	f994 1604 	ldrsb.w	r1, [r4, #1540]	; 0x604
 8004ad0:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 8004ad4:	9700      	str	r7, [sp, #0]
 8004ad6:	f004 f83b 	bl	8008b50 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8004ada:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 8004ade:	f8d4 25ec 	ldr.w	r2, [r4, #1516]	; 0x5ec
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8004ae2:	f8d4 13e0 	ldr.w	r1, [r4, #992]	; 0x3e0
 8004ae6:	f8d4 35f0 	ldr.w	r3, [r4, #1520]	; 0x5f0
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8004aea:	f894 673c 	ldrb.w	r6, [r4, #1852]	; 0x73c
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8004aee:	4402      	add	r2, r0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8004af0:	440b      	add	r3, r1
 8004af2:	e9c4 23ee 	strd	r2, r3, [r4, #952]	; 0x3b8
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8004af6:	b1f6      	cbz	r6, 8004b36 <ScheduleTx+0x1d6>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8004af8:	a804      	add	r0, sp, #16
    size_t macCmdsSize = 0;
 8004afa:	9504      	str	r5, [sp, #16]
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8004afc:	f002 feb8 	bl	8007870 <LoRaMacCommandsGetSizeSerializedCmds>
 8004b00:	bb38      	cbnz	r0, 8004b52 <ScheduleTx+0x1f2>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8004b02:	f994 35cd 	ldrsb.w	r3, [r4, #1485]	; 0x5cd
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8004b06:	f894 2610 	ldrb.w	r2, [r4, #1552]	; 0x610
    getPhy.Datarate = datarate;
 8004b0a:	f88d 3019 	strb.w	r3, [sp, #25]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8004b0e:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8004b12:	f894 5237 	ldrb.w	r5, [r4, #567]	; 0x237
 8004b16:	f89d 6010 	ldrb.w	r6, [sp, #16]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8004b1a:	f88d 201a 	strb.w	r2, [sp, #26]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8004b1e:	230d      	movs	r3, #13
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8004b20:	a906      	add	r1, sp, #24
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8004b22:	f88d 3018 	strb.w	r3, [sp, #24]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8004b26:	f003 ffe5 	bl	8008af4 <RegionGetPhyParam>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8004b2a:	4435      	add	r5, r6
 8004b2c:	b2c0      	uxtb	r0, r0
 8004b2e:	42a8      	cmp	r0, r5
 8004b30:	d209      	bcs.n	8004b46 <ScheduleTx+0x1e6>
            return LORAMAC_STATUS_LENGTH_ERROR;
 8004b32:	2508      	movs	r5, #8
 8004b34:	e734      	b.n	80049a0 <ScheduleTx+0x40>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8004b36:	f8d4 25f4 	ldr.w	r2, [r4, #1524]	; 0x5f4
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8004b3a:	f8d4 35f8 	ldr.w	r3, [r4, #1528]	; 0x5f8
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8004b3e:	4402      	add	r2, r0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8004b40:	440b      	add	r3, r1
 8004b42:	e9c4 23ee 	strd	r2, r3, [r4, #952]	; 0x3b8
    return SendFrameOnChannel( MacCtx.Channel );
 8004b46:	f894 041b 	ldrb.w	r0, [r4, #1051]	; 0x41b
 8004b4a:	f7ff fe61 	bl	8004810 <SendFrameOnChannel>
 8004b4e:	4605      	mov	r5, r0
 8004b50:	e726      	b.n	80049a0 <ScheduleTx+0x40>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8004b52:	2513      	movs	r5, #19
 8004b54:	e724      	b.n	80049a0 <ScheduleTx+0x40>
 8004b56:	bf00      	nop
 8004b58:	20030a48 	.word	0x20030a48
 8004b5c:	20030b50 	.word	0x20030b50
 8004b60:	2003100c 	.word	0x2003100c

08004b64 <OnTxDelayedTimerEvent>:
{
 8004b64:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 8004b66:	4c17      	ldr	r4, [pc, #92]	; (8004bc4 <OnTxDelayedTimerEvent+0x60>)
 8004b68:	f504 705c 	add.w	r0, r4, #880	; 0x370
 8004b6c:	f007 fd7a 	bl	800c664 <TimerStop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8004b70:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
    if( LoRaMacHandleResponseTimeout( REGION_COMMON_CLASS_B_C_RESP_TIMEOUT,
 8004b74:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8004b78:	f023 0320 	bic.w	r3, r3, #32
 8004b7c:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( startTimeInMs != 0 )
 8004b80:	b9b8      	cbnz	r0, 8004bb2 <OnTxDelayedTimerEvent+0x4e>
    switch( ScheduleTx( true ) )
 8004b82:	2001      	movs	r0, #1
 8004b84:	f7ff feec 	bl	8004960 <ScheduleTx>
 8004b88:	b108      	cbz	r0, 8004b8e <OnTxDelayedTimerEvent+0x2a>
 8004b8a:	280b      	cmp	r0, #11
 8004b8c:	d100      	bne.n	8004b90 <OnTxDelayedTimerEvent+0x2c>
}
 8004b8e:	bd10      	pop	{r4, pc}
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8004b90:	f894 25cd 	ldrb.w	r2, [r4, #1485]	; 0x5cd
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8004b94:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8004b98:	f884 2446 	strb.w	r2, [r4, #1094]	; 0x446
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8004b9c:	2009      	movs	r0, #9
 8004b9e:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8004ba2:	f884 3449 	strb.w	r3, [r4, #1097]	; 0x449
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8004ba6:	f002 ff2f 	bl	8007a08 <LoRaMacConfirmQueueSetStatusCmn>
}
 8004baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            StopRetransmission( );
 8004bae:	f7ff ba9f 	b.w	80040f0 <StopRetransmission>
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 8004bb2:	f007 fdab 	bl	800c70c <TimerGetElapsedTime>
        if( elapsedTime > timeoutInMs )
 8004bb6:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
 8004bba:	d9e2      	bls.n	8004b82 <OnTxDelayedTimerEvent+0x1e>
            Nvm.MacGroup1.SrvAckRequested = false;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f884 35ce 	strb.w	r3, [r4, #1486]	; 0x5ce
}
 8004bc2:	bd10      	pop	{r4, pc}
 8004bc4:	20030a48 	.word	0x20030a48

08004bc8 <Send>:
{
 8004bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bcc:	4c40      	ldr	r4, [pc, #256]	; (8004cd0 <Send+0x108>)
 8004bce:	b08a      	sub	sp, #40	; 0x28
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8004bd0:	f894 a73c 	ldrb.w	sl, [r4, #1852]	; 0x73c
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8004bd4:	f8d4 e5bc 	ldr.w	lr, [r4, #1468]	; 0x5bc
 8004bd8:	f8b4 c5cc 	ldrh.w	ip, [r4, #1484]	; 0x5cc
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8004bdc:	f8b4 85cc 	ldrh.w	r8, [r4, #1484]	; 0x5cc
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8004be0:	f8cd e010 	str.w	lr, [sp, #16]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8004be4:	f1ba 0f00 	cmp.w	sl, #0
 8004be8:	d06e      	beq.n	8004cc8 <Send+0x100>
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8004bea:	4699      	mov	r9, r3
 8004bec:	f894 3727 	ldrb.w	r3, [r4, #1831]	; 0x727
 8004bf0:	4605      	mov	r5, r0
 8004bf2:	460e      	mov	r6, r1
 8004bf4:	4617      	mov	r7, r2
 8004bf6:	fa9c fc9c 	rev16.w	ip, ip
 8004bfa:	b90b      	cbnz	r3, 8004c00 <Send+0x38>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8004bfc:	f8c4 35c4 	str.w	r3, [r4, #1476]	; 0x5c4
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8004c00:	f894 3724 	ldrb.w	r3, [r4, #1828]	; 0x724
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8004c04:	f894 2726 	ldrb.w	r2, [r4, #1830]	; 0x726
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8004c08:	f894 05ce 	ldrb.w	r0, [r4, #1486]	; 0x5ce
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8004c0c:	f1a3 0301 	sub.w	r3, r3, #1
 8004c10:	fab3 f383 	clz	r3, r3
 8004c14:	01d1      	lsls	r1, r2, #7
 8004c16:	095b      	lsrs	r3, r3, #5
 8004c18:	f363 1104 	bfi	r1, r3, #4, #1
 8004c1c:	f88d 100c 	strb.w	r1, [sp, #12]
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8004c20:	2800      	cmp	r0, #0
 8004c22:	d139      	bne.n	8004c98 <Send+0xd0>
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8004c24:	4b2b      	ldr	r3, [pc, #172]	; (8004cd4 <Send+0x10c>)
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8004c26:	f8d4 03fc 	ldr.w	r0, [r4, #1020]	; 0x3fc
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8004c2a:	f8ad c020 	strh.w	ip, [sp, #32]
    adrNext.UpdateChanMask = true;
 8004c2e:	f04f 0c01 	mov.w	ip, #1
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8004c32:	f88d 2015 	strb.w	r2, [sp, #21]
    adrNext.UpdateChanMask = true;
 8004c36:	f88d c014 	strb.w	ip, [sp, #20]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8004c3a:	aa04      	add	r2, sp, #16
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8004c3c:	f894 c5fc 	ldrb.w	ip, [r4, #1532]	; 0x5fc
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8004c40:	9007      	str	r0, [sp, #28]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8004c42:	f894 0610 	ldrb.w	r0, [r4, #1552]	; 0x610
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8004c46:	9200      	str	r2, [sp, #0]
 8004c48:	f1a3 012f 	sub.w	r1, r3, #47	; 0x2f
 8004c4c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8004c50:	f88d c022 	strb.w	ip, [sp, #34]	; 0x22
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8004c54:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8004c58:	f894 c5dc 	ldrb.w	ip, [r4, #1500]	; 0x5dc
 8004c5c:	f88d c024 	strb.w	ip, [sp, #36]	; 0x24
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8004c60:	a805      	add	r0, sp, #20
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8004c62:	f8cd e018 	str.w	lr, [sp, #24]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8004c66:	f002 fc25 	bl	80074b4 <LoRaMacAdrCalcNext>
 8004c6a:	f89d c00c 	ldrb.w	ip, [sp, #12]
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8004c6e:	f8cd 9000 	str.w	r9, [sp]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8004c72:	4601      	mov	r1, r0
 8004c74:	f361 1c86 	bfi	ip, r1, #6, #1
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8004c78:	463b      	mov	r3, r7
 8004c7a:	4632      	mov	r2, r6
 8004c7c:	4628      	mov	r0, r5
 8004c7e:	a903      	add	r1, sp, #12
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8004c80:	f88d c00c 	strb.w	ip, [sp, #12]
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8004c84:	f7ff fd00 	bl	8004688 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8004c88:	b160      	cbz	r0, 8004ca4 <Send+0xdc>
 8004c8a:	280a      	cmp	r0, #10
 8004c8c:	d00a      	beq.n	8004ca4 <Send+0xdc>
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8004c8e:	f8a4 85cc 	strh.w	r8, [r4, #1484]	; 0x5cc
}
 8004c92:	b00a      	add	sp, #40	; 0x28
 8004c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.Ack = 1;
 8004c98:	b2cb      	uxtb	r3, r1
 8004c9a:	f043 0320 	orr.w	r3, r3, #32
 8004c9e:	f88d 300c 	strb.w	r3, [sp, #12]
 8004ca2:	e7bf      	b.n	8004c24 <Send+0x5c>
        status = ScheduleTx( false );
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	f7ff fe5b 	bl	8004960 <ScheduleTx>
    if( status != LORAMAC_STATUS_OK )
 8004caa:	2800      	cmp	r0, #0
 8004cac:	d1ef      	bne.n	8004c8e <Send+0xc6>
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8004cae:	9b04      	ldr	r3, [sp, #16]
        Nvm.MacGroup1.SrvAckRequested = false;
 8004cb0:	f884 05ce 	strb.w	r0, [r4, #1486]	; 0x5ce
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8004cb4:	f8c4 35bc 	str.w	r3, [r4, #1468]	; 0x5bc
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8004cb8:	f002 fd6a 	bl	8007790 <LoRaMacCommandsRemoveNoneStickyCmds>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8004cbc:	2800      	cmp	r0, #0
 8004cbe:	bf18      	it	ne
 8004cc0:	2013      	movne	r0, #19
}
 8004cc2:	b00a      	add	sp, #40	; 0x28
 8004cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8004cc8:	2007      	movs	r0, #7
}
 8004cca:	b00a      	add	sp, #40	; 0x28
 8004ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cd0:	20030a48 	.word	0x20030a48
 8004cd4:	20031044 	.word	0x20031044

08004cd8 <SendReJoinReq>:
{
 8004cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( joinReqType )
 8004cda:	2802      	cmp	r0, #2
    macHdr.Value = 0;
 8004cdc:	f04f 0500 	mov.w	r5, #0
{
 8004ce0:	4604      	mov	r4, r0
    macHdr.Value = 0;
 8004ce2:	462e      	mov	r6, r5
    switch( joinReqType )
 8004ce4:	d057      	beq.n	8004d96 <SendReJoinReq+0xbe>
 8004ce6:	d830      	bhi.n	8004d4a <SendReJoinReq+0x72>
 8004ce8:	2800      	cmp	r0, #0
 8004cea:	d054      	beq.n	8004d96 <SendReJoinReq+0xbe>
            Nvm.MacGroup2.IsRejoinAcceptPending = true;
 8004cec:	4c41      	ldr	r4, [pc, #260]	; (8004df4 <SendReJoinReq+0x11c>)
            macHdr.Bits.MType = FRAME_TYPE_REJOIN;
 8004cee:	2306      	movs	r3, #6
            MacCtx.TxMsg.Message.ReJoin1.Buffer = MacCtx.PktBuffer;
 8004cf0:	1ca1      	adds	r1, r4, #2
            MacCtx.TxMsg.Message.ReJoin1.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8004cf2:	22ff      	movs	r2, #255	; 0xff
            macHdr.Bits.MType = FRAME_TYPE_REJOIN;
 8004cf4:	f363 1647 	bfi	r6, r3, #5, #3
            Nvm.MacGroup2.IsRejoinAcceptPending = true;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	f884 3754 	strb.w	r3, [r4, #1876]	; 0x754
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_RE_JOIN_1;
 8004cfe:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
            MacCtx.TxMsg.Message.ReJoin1.ReJoinType = 1;
 8004d02:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
            MacCtx.TxMsg.Message.ReJoin1.Buffer = MacCtx.PktBuffer;
 8004d06:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
            MacCtx.TxMsg.Message.ReJoin1.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8004d0a:	f884 210c 	strb.w	r2, [r4, #268]	; 0x10c
            MacCtx.TxMsg.Message.ReJoin1.MHDR.Value = macHdr.Value;
 8004d0e:	f884 610d 	strb.w	r6, [r4, #269]	; 0x10d
            memcpy1( MacCtx.TxMsg.Message.ReJoin1.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8004d12:	f005 fac5 	bl	800a2a0 <SecureElementGetJoinEui>
 8004d16:	2208      	movs	r2, #8
 8004d18:	4601      	mov	r1, r0
 8004d1a:	f204 100f 	addw	r0, r4, #271	; 0x10f
 8004d1e:	f7fe f895 	bl	8002e4c <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.ReJoin1.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8004d22:	f005 faa7 	bl	800a274 <SecureElementGetDevEui>
 8004d26:	2208      	movs	r2, #8
 8004d28:	4601      	mov	r1, r0
 8004d2a:	f204 1017 	addw	r0, r4, #279	; 0x117
 8004d2e:	f7fe f88d 	bl	8002e4c <memcpy1>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetRJcount( RJ_COUNT_1, &MacCtx.TxMsg.Message.ReJoin1.RJcount1 ) )
 8004d32:	f504 7190 	add.w	r1, r4, #288	; 0x120
 8004d36:	2009      	movs	r0, #9
 8004d38:	f003 f93e 	bl	8007fb8 <LoRaMacCryptoGetRJcount>
 8004d3c:	2800      	cmp	r0, #0
 8004d3e:	d157      	bne.n	8004df0 <SendReJoinReq+0x118>
}
 8004d40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bool allowDelayedTx = true;
 8004d44:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 8004d46:	f7ff be0b 	b.w	8004960 <ScheduleTx>
    switch( joinReqType )
 8004d4a:	28ff      	cmp	r0, #255	; 0xff
 8004d4c:	d1f8      	bne.n	8004d40 <SendReJoinReq+0x68>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8004d4e:	4f29      	ldr	r7, [pc, #164]	; (8004df4 <SendReJoinReq+0x11c>)
            SwitchClass( CLASS_A );
 8004d50:	4628      	mov	r0, r5
 8004d52:	f7ff fbb7 	bl	80044c4 <SwitchClass>
            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8004d56:	f365 1647 	bfi	r6, r5, #5, #3
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8004d5a:	1cbb      	adds	r3, r7, #2
 8004d5c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8004d60:	f887 610d 	strb.w	r6, [r7, #269]	; 0x10d
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8004d64:	f887 5104 	strb.w	r5, [r7, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8004d68:	f887 410c 	strb.w	r4, [r7, #268]	; 0x10c
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8004d6c:	f005 fa98 	bl	800a2a0 <SecureElementGetJoinEui>
 8004d70:	2208      	movs	r2, #8
 8004d72:	4601      	mov	r1, r0
 8004d74:	f507 7087 	add.w	r0, r7, #270	; 0x10e
 8004d78:	f7fe f868 	bl	8002e4c <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8004d7c:	f005 fa7a 	bl	800a274 <SecureElementGetDevEui>
 8004d80:	2208      	movs	r2, #8
 8004d82:	4601      	mov	r1, r0
 8004d84:	f507 708b 	add.w	r0, r7, #278	; 0x116
 8004d88:	f7fe f860 	bl	8002e4c <memcpy1>
            allowDelayedTx = false;
 8004d8c:	4628      	mov	r0, r5
}
 8004d8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    status = ScheduleTx( allowDelayedTx );
 8004d92:	f7ff bde5 	b.w	8004960 <ScheduleTx>
 8004d96:	4d17      	ldr	r5, [pc, #92]	; (8004df4 <SendReJoinReq+0x11c>)
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_RE_JOIN_0_2;
 8004d98:	2102      	movs	r1, #2
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[0] = Nvm.MacGroup2.NetID & 0xFF;
 8004d9a:	f8d5 365c 	ldr.w	r3, [r5, #1628]	; 0x65c
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_RE_JOIN_0_2;
 8004d9e:	f885 1104 	strb.w	r1, [r5, #260]	; 0x104
            macHdr.Bits.MType = FRAME_TYPE_REJOIN;
 8004da2:	2206      	movs	r2, #6
            Nvm.MacGroup2.IsRejoinAcceptPending = true;
 8004da4:	2001      	movs	r0, #1
            macHdr.Bits.MType = FRAME_TYPE_REJOIN;
 8004da6:	f362 1647 	bfi	r6, r2, #5, #3
            MacCtx.TxMsg.Message.ReJoin0or2.Buffer = MacCtx.PktBuffer;
 8004daa:	186a      	adds	r2, r5, r1
            Nvm.MacGroup2.IsRejoinAcceptPending = true;
 8004dac:	f885 0754 	strb.w	r0, [r5, #1876]	; 0x754
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[1] = ( Nvm.MacGroup2.NetID >> 8 ) & 0xFF;
 8004db0:	0a19      	lsrs	r1, r3, #8
            MacCtx.TxMsg.Message.ReJoin0or2.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8004db2:	20ff      	movs	r0, #255	; 0xff
            MacCtx.TxMsg.Message.ReJoin0or2.Buffer = MacCtx.PktBuffer;
 8004db4:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[2] = ( Nvm.MacGroup2.NetID >> 16 ) & 0xFF;
 8004db8:	0c1a      	lsrs	r2, r3, #16
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[0] = Nvm.MacGroup2.NetID & 0xFF;
 8004dba:	f885 310f 	strb.w	r3, [r5, #271]	; 0x10f
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[1] = ( Nvm.MacGroup2.NetID >> 8 ) & 0xFF;
 8004dbe:	f885 1110 	strb.w	r1, [r5, #272]	; 0x110
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[2] = ( Nvm.MacGroup2.NetID >> 16 ) & 0xFF;
 8004dc2:	f885 2111 	strb.w	r2, [r5, #273]	; 0x111
 8004dc6:	f885 410e 	strb.w	r4, [r5, #270]	; 0x10e
            MacCtx.TxMsg.Message.ReJoin0or2.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8004dca:	f885 010c 	strb.w	r0, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.ReJoin0or2.MHDR.Value = macHdr.Value;
 8004dce:	f885 610d 	strb.w	r6, [r5, #269]	; 0x10d
            memcpy1( MacCtx.TxMsg.Message.ReJoin0or2.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8004dd2:	f005 fa4f 	bl	800a274 <SecureElementGetDevEui>
 8004dd6:	2208      	movs	r2, #8
 8004dd8:	4601      	mov	r1, r0
 8004dda:	f505 7089 	add.w	r0, r5, #274	; 0x112
 8004dde:	f7fe f835 	bl	8002e4c <memcpy1>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetRJcount( RJ_COUNT_0, &MacCtx.TxMsg.Message.ReJoin0or2.RJcount0 ) )
 8004de2:	f505 718d 	add.w	r1, r5, #282	; 0x11a
 8004de6:	2008      	movs	r0, #8
 8004de8:	f003 f8e6 	bl	8007fb8 <LoRaMacCryptoGetRJcount>
 8004dec:	2800      	cmp	r0, #0
 8004dee:	d0a7      	beq.n	8004d40 <SendReJoinReq+0x68>
}
 8004df0:	2011      	movs	r0, #17
 8004df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004df4:	20030a48 	.word	0x20030a48

08004df8 <OnForceRejoinReqCycleTimerEvent>:
    TimerSetValue( &MacCtx.Rejoin2CycleTimer, MacCtx.Rejoin2CycleTime );
    TimerStart( &MacCtx.Rejoin2CycleTimer );
}

static void OnForceRejoinReqCycleTimerEvent( void* context )
{
 8004df8:	b510      	push	{r4, lr}
    if( Nvm.MacGroup1.ForceRejoinRetriesCounter == Nvm.MacGroup2.ForceRejoinMaxRetries )
 8004dfa:	4c0f      	ldr	r4, [pc, #60]	; (8004e38 <OnForceRejoinReqCycleTimerEvent+0x40>)
 8004dfc:	f894 35d4 	ldrb.w	r3, [r4, #1492]	; 0x5d4
 8004e00:	f894 2744 	ldrb.w	r2, [r4, #1860]	; 0x744
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d011      	beq.n	8004e2c <OnForceRejoinReqCycleTimerEvent+0x34>
 8004e08:	3301      	adds	r3, #1
 8004e0a:	b2db      	uxtb	r3, r3
        Nvm.MacGroup1.ForceRejoinRetriesCounter = 0;
    }

    Nvm.MacGroup1.ForceRejoinRetriesCounter ++;

    if( ( Nvm.MacGroup2.ForceRejoinType == 0 ) || ( Nvm.MacGroup2.ForceRejoinType == 1 ) )
 8004e0c:	f894 2745 	ldrb.w	r2, [r4, #1861]	; 0x745
    Nvm.MacGroup1.ForceRejoinRetriesCounter ++;
 8004e10:	f884 35d4 	strb.w	r3, [r4, #1492]	; 0x5d4
    if( ( Nvm.MacGroup2.ForceRejoinType == 0 ) || ( Nvm.MacGroup2.ForceRejoinType == 1 ) )
 8004e14:	2a01      	cmp	r2, #1
 8004e16:	d904      	bls.n	8004e22 <OnForceRejoinReqCycleTimerEvent+0x2a>
    }
    else
    {
        SendReJoinReq( REJOIN_REQ_2 );
    }
}
 8004e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SendReJoinReq( REJOIN_REQ_2 );
 8004e1c:	2002      	movs	r0, #2
 8004e1e:	f7ff bf5b 	b.w	8004cd8 <SendReJoinReq>
}
 8004e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SendReJoinReq( REJOIN_REQ_0 );
 8004e26:	2000      	movs	r0, #0
 8004e28:	f7ff bf56 	b.w	8004cd8 <SendReJoinReq>
        TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
 8004e2c:	f504 609b 	add.w	r0, r4, #1240	; 0x4d8
 8004e30:	f007 fc18 	bl	800c664 <TimerStop>
 8004e34:	2301      	movs	r3, #1
 8004e36:	e7e9      	b.n	8004e0c <OnForceRejoinReqCycleTimerEvent+0x14>
 8004e38:	20030a48 	.word	0x20030a48

08004e3c <OnRejoin2CycleTimerEvent>:
{
 8004e3c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.Rejoin2CycleTimer );
 8004e3e:	4c0e      	ldr	r4, [pc, #56]	; (8004e78 <OnRejoin2CycleTimerEvent+0x3c>)
 8004e40:	f504 6098 	add.w	r0, r4, #1216	; 0x4c0
 8004e44:	f007 fc0e 	bl	800c664 <TimerStop>
    ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin2CycleInSec, &MacCtx.Rejoin2CycleTime );
 8004e48:	f8d4 3750 	ldr.w	r3, [r4, #1872]	; 0x750
    if( rejoinCycleTime > 4294967 )
 8004e4c:	4a0b      	ldr	r2, [pc, #44]	; (8004e7c <OnRejoin2CycleTimerEvent+0x40>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d905      	bls.n	8004e5e <OnRejoin2CycleTimerEvent+0x22>
        *timeInMiliSec = rejoinCycleTime * 1000;
 8004e52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e56:	fb02 f303 	mul.w	r3, r2, r3
 8004e5a:	f8c4 34f8 	str.w	r3, [r4, #1272]	; 0x4f8
    SendReJoinReq( REJOIN_REQ_2 );
 8004e5e:	2002      	movs	r0, #2
 8004e60:	f7ff ff3a 	bl	8004cd8 <SendReJoinReq>
    TimerSetValue( &MacCtx.Rejoin2CycleTimer, MacCtx.Rejoin2CycleTime );
 8004e64:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
 8004e68:	4805      	ldr	r0, [pc, #20]	; (8004e80 <OnRejoin2CycleTimerEvent+0x44>)
 8004e6a:	f007 fc35 	bl	800c6d8 <TimerSetValue>
}
 8004e6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TimerStart( &MacCtx.Rejoin2CycleTimer );
 8004e72:	4803      	ldr	r0, [pc, #12]	; (8004e80 <OnRejoin2CycleTimerEvent+0x44>)
 8004e74:	f007 bb56 	b.w	800c524 <TimerStart>
 8004e78:	20030a48 	.word	0x20030a48
 8004e7c:	00418937 	.word	0x00418937
 8004e80:	20030f08 	.word	0x20030f08

08004e84 <OnRejoin1CycleTimerEvent>:
{
 8004e84:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.Rejoin1CycleTimer );
 8004e86:	4c0e      	ldr	r4, [pc, #56]	; (8004ec0 <OnRejoin1CycleTimerEvent+0x3c>)
 8004e88:	f504 6095 	add.w	r0, r4, #1192	; 0x4a8
 8004e8c:	f007 fbea 	bl	800c664 <TimerStop>
    ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin1CycleInSec, &MacCtx.Rejoin1CycleTime );
 8004e90:	f8d4 374c 	ldr.w	r3, [r4, #1868]	; 0x74c
    if( rejoinCycleTime > 4294967 )
 8004e94:	4a0b      	ldr	r2, [pc, #44]	; (8004ec4 <OnRejoin1CycleTimerEvent+0x40>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d905      	bls.n	8004ea6 <OnRejoin1CycleTimerEvent+0x22>
        *timeInMiliSec = rejoinCycleTime * 1000;
 8004e9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ea2:	f8c4 34f4 	str.w	r3, [r4, #1268]	; 0x4f4
    SendReJoinReq( REJOIN_REQ_1 );
 8004ea6:	2001      	movs	r0, #1
 8004ea8:	f7ff ff16 	bl	8004cd8 <SendReJoinReq>
    TimerSetValue( &MacCtx.Rejoin1CycleTimer, MacCtx.Rejoin1CycleTime );
 8004eac:	f8d4 14f4 	ldr.w	r1, [r4, #1268]	; 0x4f4
 8004eb0:	4805      	ldr	r0, [pc, #20]	; (8004ec8 <OnRejoin1CycleTimerEvent+0x44>)
 8004eb2:	f007 fc11 	bl	800c6d8 <TimerSetValue>
}
 8004eb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TimerStart( &MacCtx.Rejoin1CycleTimer );
 8004eba:	4803      	ldr	r0, [pc, #12]	; (8004ec8 <OnRejoin1CycleTimerEvent+0x44>)
 8004ebc:	f007 bb32 	b.w	800c524 <TimerStart>
 8004ec0:	20030a48 	.word	0x20030a48
 8004ec4:	00418937 	.word	0x00418937
 8004ec8:	20030ef0 	.word	0x20030ef0

08004ecc <OnRejoin0CycleTimerEvent>:
{
 8004ecc:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.Rejoin0CycleTimer );
 8004ece:	4c0e      	ldr	r4, [pc, #56]	; (8004f08 <OnRejoin0CycleTimerEvent+0x3c>)
 8004ed0:	f504 6092 	add.w	r0, r4, #1168	; 0x490
 8004ed4:	f007 fbc6 	bl	800c664 <TimerStop>
    ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin0CycleInSec, &MacCtx.Rejoin0CycleTime );
 8004ed8:	f8d4 3748 	ldr.w	r3, [r4, #1864]	; 0x748
    if( rejoinCycleTime > 4294967 )
 8004edc:	4a0b      	ldr	r2, [pc, #44]	; (8004f0c <OnRejoin0CycleTimerEvent+0x40>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d905      	bls.n	8004eee <OnRejoin0CycleTimerEvent+0x22>
        *timeInMiliSec = rejoinCycleTime * 1000;
 8004ee2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ee6:	fb02 f303 	mul.w	r3, r2, r3
 8004eea:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
    SendReJoinReq( REJOIN_REQ_0 );
 8004eee:	2000      	movs	r0, #0
 8004ef0:	f7ff fef2 	bl	8004cd8 <SendReJoinReq>
    TimerSetValue( &MacCtx.Rejoin0CycleTimer, MacCtx.Rejoin0CycleTime );
 8004ef4:	f8d4 14f0 	ldr.w	r1, [r4, #1264]	; 0x4f0
 8004ef8:	4805      	ldr	r0, [pc, #20]	; (8004f10 <OnRejoin0CycleTimerEvent+0x44>)
 8004efa:	f007 fbed 	bl	800c6d8 <TimerSetValue>
}
 8004efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TimerStart( &MacCtx.Rejoin0CycleTimer );
 8004f02:	4803      	ldr	r0, [pc, #12]	; (8004f10 <OnRejoin0CycleTimerEvent+0x44>)
 8004f04:	f007 bb0e 	b.w	800c524 <TimerStart>
 8004f08:	20030a48 	.word	0x20030a48
 8004f0c:	00418937 	.word	0x00418937
 8004f10:	20030ed8 	.word	0x20030ed8

08004f14 <ProcessMacCommands.constprop.0>:
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8004f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f18:	b093      	sub	sp, #76	; 0x4c
    uint8_t status = 0;
 8004f1a:	f04f 0900 	mov.w	r9, #0
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8004f1e:	2b01      	cmp	r3, #1
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8004f20:	9203      	str	r2, [sp, #12]
    uint8_t status = 0;
 8004f22:	f88d 9019 	strb.w	r9, [sp, #25]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8004f26:	f8ad 901c 	strh.w	r9, [sp, #28]
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8004f2a:	d84e      	bhi.n	8004fca <ProcessMacCommands.constprop.0+0xb6>
    while( macIndex < commandsSize )
 8004f2c:	4688      	mov	r8, r1
 8004f2e:	2900      	cmp	r1, #0
 8004f30:	d04b      	beq.n	8004fca <ProcessMacCommands.constprop.0+0xb6>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8004f32:	f8df b2f8 	ldr.w	fp, [pc, #760]	; 800522c <ProcessMacCommands.constprop.0+0x318>
 8004f36:	4606      	mov	r6, r0
    while( macIndex < commandsSize )
 8004f38:	464c      	mov	r4, r9
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8004f3a:	5d30      	ldrb	r0, [r6, r4]
 8004f3c:	f002 fcdc 	bl	80078f8 <LoRaMacCommandsGetCmdSize>
 8004f40:	4420      	add	r0, r4
 8004f42:	4540      	cmp	r0, r8
 8004f44:	dc41      	bgt.n	8004fca <ProcessMacCommands.constprop.0+0xb6>
        switch( payload[macIndex++] )
 8004f46:	5d33      	ldrb	r3, [r6, r4]
 8004f48:	1c65      	adds	r5, r4, #1
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b2ed      	uxtb	r5, r5
 8004f4e:	2b1f      	cmp	r3, #31
 8004f50:	d83b      	bhi.n	8004fca <ProcessMacCommands.constprop.0+0xb6>
 8004f52:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004f56:	026f      	.short	0x026f
 8004f58:	02800259 	.word	0x02800259
 8004f5c:	020d0244 	.word	0x020d0244
 8004f60:	01d50020 	.word	0x01d50020
 8004f64:	016d01ba 	.word	0x016d01ba
 8004f68:	01260137 	.word	0x01260137
 8004f6c:	0100010e 	.word	0x0100010e
 8004f70:	00a800ca 	.word	0x00a800ca
 8004f74:	00720095 	.word	0x00720095
 8004f78:	004b0068 	.word	0x004b0068
 8004f7c:	003a003a 	.word	0x003a003a
 8004f80:	003a003a 	.word	0x003a003a
 8004f84:	003a003a 	.word	0x003a003a
 8004f88:	003a003a 	.word	0x003a003a
 8004f8c:	003a003a 	.word	0x003a003a
 8004f90:	003a003a 	.word	0x003a003a
 8004f94:	003d      	.short	0x003d
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8004f96:	4fa2      	ldr	r7, [pc, #648]	; (8005220 <ProcessMacCommands.constprop.0+0x30c>)
 8004f98:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 82fd 	beq.w	800559c <ProcessMacCommands.constprop.0+0x688>
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 82f9 	beq.w	800559c <ProcessMacCommands.constprop.0+0x688>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8004faa:	4798      	blx	r3
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8004fac:	9b03      	ldr	r3, [sp, #12]
                macCmdPayload[0] = batteryLevel;
 8004fae:	f88d 001c 	strb.w	r0, [sp, #28]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8004fb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	a907      	add	r1, sp, #28
 8004fba:	2006      	movs	r0, #6
        switch( payload[macIndex++] )
 8004fbc:	462c      	mov	r4, r5
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8004fbe:	f88d 301d 	strb.w	r3, [sp, #29]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8004fc2:	f002 fb37 	bl	8007634 <LoRaMacCommandsAddCmd>
    while( macIndex < commandsSize )
 8004fc6:	45a0      	cmp	r8, r4
 8004fc8:	d8b7      	bhi.n	8004f3a <ProcessMacCommands.constprop.0+0x26>
}
 8004fca:	b013      	add	sp, #76	; 0x4c
 8004fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                macIndex++;
 8004fd0:	3402      	adds	r4, #2
                if( LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_MODE_IND, &macCmd) == LORAMAC_COMMANDS_SUCCESS )
 8004fd2:	a909      	add	r1, sp, #36	; 0x24
 8004fd4:	2020      	movs	r0, #32
                macIndex++;
 8004fd6:	b2e4      	uxtb	r4, r4
                if( LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_MODE_IND, &macCmd) == LORAMAC_COMMANDS_SUCCESS )
 8004fd8:	f002 fbc8 	bl	800776c <LoRaMacCommandsGetCmd>
 8004fdc:	2800      	cmp	r0, #0
 8004fde:	d1f2      	bne.n	8004fc6 <ProcessMacCommands.constprop.0+0xb2>
                    LoRaMacCommandsRemoveCmd( macCmd );
 8004fe0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fe2:	f002 fb8f 	bl	8007704 <LoRaMacCommandsRemoveCmd>
    while( macIndex < commandsSize )
 8004fe6:	45a0      	cmp	r8, r4
 8004fe8:	d8a7      	bhi.n	8004f3a <ProcessMacCommands.constprop.0+0x26>
 8004fea:	e7ee      	b.n	8004fca <ProcessMacCommands.constprop.0+0xb6>
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8004fec:	1ce3      	adds	r3, r4, #3
                    frequency = ( uint32_t )payload[macIndex++];
 8004fee:	1ca2      	adds	r2, r4, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	b2d2      	uxtb	r2, r2
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8004ff4:	5cf3      	ldrb	r3, [r6, r3]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8004ff6:	5cb2      	ldrb	r2, [r6, r2]
                    frequency = ( uint32_t )payload[macIndex++];
 8004ff8:	5d70      	ldrb	r0, [r6, r5]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8004ffa:	041b      	lsls	r3, r3, #16
 8004ffc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005000:	4303      	orrs	r3, r0
                    frequency *= 100;
 8005002:	2064      	movs	r0, #100	; 0x64
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8005004:	fb00 f003 	mul.w	r0, r0, r3
 8005008:	f002 fafc 	bl	8007604 <LoRaMacClassBBeaconFreqReq>
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800500c:	3404      	adds	r4, #4
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800500e:	4603      	mov	r3, r0
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8005010:	b2e4      	uxtb	r4, r4
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8005012:	2201      	movs	r2, #1
 8005014:	a907      	add	r1, sp, #28
 8005016:	2013      	movs	r0, #19
 8005018:	f88d 301c 	strb.w	r3, [sp, #28]
 800501c:	f002 fb0a 	bl	8007634 <LoRaMacCommandsAddCmd>
    while( macIndex < commandsSize )
 8005020:	45a0      	cmp	r8, r4
 8005022:	d88a      	bhi.n	8004f3a <ProcessMacCommands.constprop.0+0x26>
 8005024:	e7d1      	b.n	8004fca <ProcessMacCommands.constprop.0+0xb6>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8005026:	200c      	movs	r0, #12
 8005028:	f002 fd0c 	bl	8007a44 <LoRaMacConfirmQueueIsCmdActive>
 800502c:	2800      	cmp	r0, #0
 800502e:	f040 824c 	bne.w	80054ca <ProcessMacCommands.constprop.0+0x5b6>
        switch( payload[macIndex++] )
 8005032:	462c      	mov	r4, r5
    while( macIndex < commandsSize )
 8005034:	45a0      	cmp	r8, r4
 8005036:	d880      	bhi.n	8004f3a <ProcessMacCommands.constprop.0+0x26>
 8005038:	e7c7      	b.n	8004fca <ProcessMacCommands.constprop.0+0xb6>
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800503a:	1ce3      	adds	r3, r4, #3
                frequency = ( uint32_t )payload[macIndex++];
 800503c:	1ca2      	adds	r2, r4, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800503e:	b2d2      	uxtb	r2, r2
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8005040:	b2db      	uxtb	r3, r3
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8005042:	5cb0      	ldrb	r0, [r6, r2]
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8005044:	5cf3      	ldrb	r3, [r6, r3]
                frequency = ( uint32_t )payload[macIndex++];
 8005046:	5d71      	ldrb	r1, [r6, r5]
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8005048:	1d22      	adds	r2, r4, #4
 800504a:	b2d2      	uxtb	r2, r2
 800504c:	041b      	lsls	r3, r3, #16
 800504e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                datarate = payload[macIndex++] & 0x0F;
 8005052:	5cb0      	ldrb	r0, [r6, r2]
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8005054:	430b      	orrs	r3, r1
                frequency *= 100;
 8005056:	2164      	movs	r1, #100	; 0x64
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8005058:	fb01 f103 	mul.w	r1, r1, r3
 800505c:	f000 000f 	and.w	r0, r0, #15
 8005060:	f002 faca 	bl	80075f8 <LoRaMacClassBPingSlotChannelReq>
                datarate = payload[macIndex++] & 0x0F;
 8005064:	3405      	adds	r4, #5
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8005066:	4603      	mov	r3, r0
                datarate = payload[macIndex++] & 0x0F;
 8005068:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 800506a:	2201      	movs	r2, #1
 800506c:	a907      	add	r1, sp, #28
 800506e:	2011      	movs	r0, #17
                macCmdPayload[0] = status;
 8005070:	f88d 301c 	strb.w	r3, [sp, #28]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8005074:	f002 fade 	bl	8007634 <LoRaMacCommandsAddCmd>
    while( macIndex < commandsSize )
 8005078:	45a0      	cmp	r8, r4
 800507a:	f63f af5e 	bhi.w	8004f3a <ProcessMacCommands.constprop.0+0x26>
 800507e:	e7a4      	b.n	8004fca <ProcessMacCommands.constprop.0+0xb6>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8005080:	200b      	movs	r0, #11
 8005082:	f002 fcdf 	bl	8007a44 <LoRaMacConfirmQueueIsCmdActive>
 8005086:	2800      	cmp	r0, #0
 8005088:	d0d3      	beq.n	8005032 <ProcessMacCommands.constprop.0+0x11e>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800508a:	4f65      	ldr	r7, [pc, #404]	; (8005220 <ProcessMacCommands.constprop.0+0x30c>)
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800508c:	210b      	movs	r1, #11
 800508e:	2000      	movs	r0, #0
 8005090:	f002 fc7e 	bl	8007990 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8005094:	f897 348c 	ldrb.w	r3, [r7, #1164]	; 0x48c
 8005098:	3b04      	subs	r3, #4
 800509a:	2b01      	cmp	r3, #1
 800509c:	d9c9      	bls.n	8005032 <ProcessMacCommands.constprop.0+0x11e>
                        LoRaMacClassBPingSlotInfoAns( );
 800509e:	f002 faa9 	bl	80075f4 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 80050a2:	462c      	mov	r4, r5
 80050a4:	e78f      	b.n	8004fc6 <ProcessMacCommands.constprop.0+0xb2>
                uint8_t maxCountN = 0x0F & payload[macIndex];
 80050a6:	5d73      	ldrb	r3, [r6, r5]
    if( rejoinCycleTime > 4294967 )
 80050a8:	485e      	ldr	r0, [pc, #376]	; (8005224 <ProcessMacCommands.constprop.0+0x310>)
                Nvm.MacGroup2.Rejoin0CycleInSec = 0x01 << ( maxTimeN + 10 );
 80050aa:	4f5d      	ldr	r7, [pc, #372]	; (8005220 <ProcessMacCommands.constprop.0+0x30c>)
 80050ac:	091a      	lsrs	r2, r3, #4
 80050ae:	2501      	movs	r5, #1
                Nvm.MacGroup2.Rejoin0UplinksLimit = 0x01 << ( maxCountN + 4 );
 80050b0:	f003 030f 	and.w	r3, r3, #15
                Nvm.MacGroup2.Rejoin0CycleInSec = 0x01 << ( maxTimeN + 10 );
 80050b4:	320a      	adds	r2, #10
 80050b6:	fa05 f102 	lsl.w	r1, r5, r2
                Nvm.MacGroup2.Rejoin0UplinksLimit = 0x01 << ( maxCountN + 4 );
 80050ba:	3304      	adds	r3, #4
                macIndex ++;
 80050bc:	3402      	adds	r4, #2
                Nvm.MacGroup2.Rejoin0UplinksLimit = 0x01 << ( maxCountN + 4 );
 80050be:	fa05 f303 	lsl.w	r3, r5, r3
    if( rejoinCycleTime > 4294967 )
 80050c2:	4281      	cmp	r1, r0
                macIndex ++;
 80050c4:	b2e4      	uxtb	r4, r4
                Nvm.MacGroup2.Rejoin0UplinksLimit = 0x01 << ( maxCountN + 4 );
 80050c6:	f8c7 3740 	str.w	r3, [r7, #1856]	; 0x740
                Nvm.MacGroup2.Rejoin0CycleInSec = 0x01 << ( maxTimeN + 10 );
 80050ca:	f8c7 1748 	str.w	r1, [r7, #1864]	; 0x748
    if( rejoinCycleTime > 4294967 )
 80050ce:	f300 81d7 	bgt.w	8005480 <ProcessMacCommands.constprop.0+0x56c>
                uint8_t timeOK = 0;
 80050d2:	2500      	movs	r5, #0
                LoRaMacCommandsAddCmd( MOTE_MAC_REJOIN_PARAM_ANS, macCmdPayload, 1 );
 80050d4:	2201      	movs	r2, #1
 80050d6:	a907      	add	r1, sp, #28
 80050d8:	200f      	movs	r0, #15
                macCmdPayload[0] = timeOK;
 80050da:	f88d 501c 	strb.w	r5, [sp, #28]
                LoRaMacCommandsAddCmd( MOTE_MAC_REJOIN_PARAM_ANS, macCmdPayload, 1 );
 80050de:	f002 faa9 	bl	8007634 <LoRaMacCommandsAddCmd>
    while( macIndex < commandsSize )
 80050e2:	45a0      	cmp	r8, r4
 80050e4:	f63f af29 	bhi.w	8004f3a <ProcessMacCommands.constprop.0+0x26>
 80050e8:	e76f      	b.n	8004fca <ProcessMacCommands.constprop.0+0xb6>
                uint8_t period = ( 0x38 & payload[macIndex] ) >> 3;
 80050ea:	5d75      	ldrb	r5, [r6, r5]
                Nvm.MacGroup2.ForceRejoinMaxRetries = 0x07 & payload[macIndex];
 80050ec:	4f4c      	ldr	r7, [pc, #304]	; (8005220 <ProcessMacCommands.constprop.0+0x30c>)
                macIndex++;
 80050ee:	1ca3      	adds	r3, r4, #2
                Nvm.MacGroup2.ForceRejoinMaxRetries = 0x07 & payload[macIndex];
 80050f0:	f005 0207 	and.w	r2, r5, #7
                Nvm.MacGroup2.ForceRejoinType = ( 0x70 & payload[macIndex] ) >> 4;
 80050f4:	b2db      	uxtb	r3, r3
                Nvm.MacGroup2.ForceRejoinMaxRetries = 0x07 & payload[macIndex];
 80050f6:	f887 2744 	strb.w	r2, [r7, #1860]	; 0x744
                Nvm.MacGroup2.ForceRejoinType = ( 0x70 & payload[macIndex] ) >> 4;
 80050fa:	5cf2      	ldrb	r2, [r6, r3]
 80050fc:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8005100:	f887 2745 	strb.w	r2, [r7, #1861]	; 0x745
                Nvm.MacGroup1.ChannelsDatarate = 0x0F & payload[macIndex];
 8005104:	5cf3      	ldrb	r3, [r6, r3]
                uint32_t rejoinCycleInSec = 32 * ( 0x01 << period ) + randr( 0, 32 );
 8005106:	2120      	movs	r1, #32
                Nvm.MacGroup1.ChannelsDatarate = 0x0F & payload[macIndex];
 8005108:	f003 030f 	and.w	r3, r3, #15
                uint32_t rejoinCycleInSec = 32 * ( 0x01 << period ) + randr( 0, 32 );
 800510c:	2000      	movs	r0, #0
                Nvm.MacGroup1.ChannelsDatarate = 0x0F & payload[macIndex];
 800510e:	f887 35cd 	strb.w	r3, [r7, #1485]	; 0x5cd
                uint32_t rejoinCycleInSec = 32 * ( 0x01 << period ) + randr( 0, 32 );
 8005112:	f7fd fe7b 	bl	8002e0c <randr>
 8005116:	f3c5 05c2 	ubfx	r5, r5, #3, #3
 800511a:	2320      	movs	r3, #32
    if( rejoinCycleTime > 4294967 )
 800511c:	4a41      	ldr	r2, [pc, #260]	; (8005224 <ProcessMacCommands.constprop.0+0x310>)
                uint32_t rejoinCycleInSec = 32 * ( 0x01 << period ) + randr( 0, 32 );
 800511e:	40ab      	lsls	r3, r5
 8005120:	4418      	add	r0, r3
    if( rejoinCycleTime > 4294967 )
 8005122:	4290      	cmp	r0, r2
        *timeInMiliSec = rejoinCycleTime * 1000;
 8005124:	bf86      	itte	hi
 8005126:	f44f 717a 	movhi.w	r1, #1000	; 0x3e8
 800512a:	4341      	mulhi	r1, r0
                uint32_t forceRejoinReqCycleTime = 0;
 800512c:	2100      	movls	r1, #0
                TimerSetValue( &MacCtx.ForceRejoinReqCycleTimer, forceRejoinReqCycleTime );
 800512e:	483e      	ldr	r0, [pc, #248]	; (8005228 <ProcessMacCommands.constprop.0+0x314>)
 8005130:	f007 fad2 	bl	800c6d8 <TimerSetValue>
                if( ( Nvm.MacGroup2.ForceRejoinType == 0 ) || ( Nvm.MacGroup2.ForceRejoinType == 1 ) )
 8005134:	f897 3745 	ldrb.w	r3, [r7, #1861]	; 0x745
 8005138:	2b01      	cmp	r3, #1
                    SendReJoinReq( REJOIN_REQ_0 );
 800513a:	bf94      	ite	ls
 800513c:	2000      	movls	r0, #0
                    SendReJoinReq( REJOIN_REQ_2 );
 800513e:	2002      	movhi	r0, #2
                macIndex ++;
 8005140:	3403      	adds	r4, #3
                    SendReJoinReq( REJOIN_REQ_2 );
 8005142:	f7ff fdc9 	bl	8004cd8 <SendReJoinReq>
                macIndex ++;
 8005146:	b2e4      	uxtb	r4, r4
                TimerStart( &MacCtx.ForceRejoinReqCycleTimer );
 8005148:	4837      	ldr	r0, [pc, #220]	; (8005228 <ProcessMacCommands.constprop.0+0x314>)
 800514a:	f007 f9eb 	bl	800c524 <TimerStart>
    while( macIndex < commandsSize )
 800514e:	45a0      	cmp	r8, r4
 8005150:	f63f aef3 	bhi.w	8004f3a <ProcessMacCommands.constprop.0+0x26>
 8005154:	e739      	b.n	8004fca <ProcessMacCommands.constprop.0+0xb6>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8005156:	2008      	movs	r0, #8
 8005158:	f002 fc74 	bl	8007a44 <LoRaMacConfirmQueueIsCmdActive>
 800515c:	2800      	cmp	r0, #0
 800515e:	f040 81cf 	bne.w	8005500 <ProcessMacCommands.constprop.0+0x5ec>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8005162:	4f2f      	ldr	r7, [pc, #188]	; (8005220 <ProcessMacCommands.constprop.0+0x30c>)
        switch( payload[macIndex++] )
 8005164:	462c      	mov	r4, r5
    while( macIndex < commandsSize )
 8005166:	45a0      	cmp	r8, r4
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8005168:	f887 043c 	strb.w	r0, [r7, #1084]	; 0x43c
    while( macIndex < commandsSize )
 800516c:	f63f aee5 	bhi.w	8004f3a <ProcessMacCommands.constprop.0+0x26>
 8005170:	e72b      	b.n	8004fca <ProcessMacCommands.constprop.0+0xb6>
                uint8_t delayExp = 0x0F & payload[macIndex];
 8005172:	5d73      	ldrb	r3, [r6, r5]
                MacCtx.AdrAckDelay = 0x01 << delayExp;
 8005174:	4f2a      	ldr	r7, [pc, #168]	; (8005220 <ProcessMacCommands.constprop.0+0x30c>)
                MacCtx.AdrAckLimit = 0x01 << limitExp;
 8005176:	091a      	lsrs	r2, r3, #4
                MacCtx.AdrAckDelay = 0x01 << delayExp;
 8005178:	f003 010f 	and.w	r1, r3, #15
 800517c:	2301      	movs	r3, #1
 800517e:	fa03 f101 	lsl.w	r1, r3, r1
                macIndex++;
 8005182:	3402      	adds	r4, #2
                MacCtx.AdrAckLimit = 0x01 << limitExp;
 8005184:	4093      	lsls	r3, r2
                MacCtx.AdrAckDelay = 0x01 << delayExp;
 8005186:	f8a7 13fe 	strh.w	r1, [r7, #1022]	; 0x3fe
                LoRaMacCommandsAddCmd( MOTE_MAC_ADR_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800518a:	2200      	movs	r2, #0
                macIndex++;
 800518c:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_ADR_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800518e:	a907      	add	r1, sp, #28
 8005190:	200c      	movs	r0, #12
                MacCtx.AdrAckLimit = 0x01 << limitExp;
 8005192:	f8a7 33fc 	strh.w	r3, [r7, #1020]	; 0x3fc
                LoRaMacCommandsAddCmd( MOTE_MAC_ADR_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8005196:	f002 fa4d 	bl	8007634 <LoRaMacCommandsAddCmd>
    while( macIndex < commandsSize )
 800519a:	45a0      	cmp	r8, r4
 800519c:	f63f aecd 	bhi.w	8004f3a <ProcessMacCommands.constprop.0+0x26>
 80051a0:	e713      	b.n	8004fca <ProcessMacCommands.constprop.0+0xb6>
                if( Nvm.MacGroup2.Version.Fields.Minor >= serverMinorVersion )
 80051a2:	4f1f      	ldr	r7, [pc, #124]	; (8005220 <ProcessMacCommands.constprop.0+0x30c>)
 80051a4:	5d72      	ldrb	r2, [r6, r5]
 80051a6:	f897 373a 	ldrb.w	r3, [r7, #1850]	; 0x73a
                uint8_t serverMinorVersion = payload[macIndex++];
 80051aa:	3402      	adds	r4, #2
                if( Nvm.MacGroup2.Version.Fields.Minor >= serverMinorVersion )
 80051ac:	429a      	cmp	r2, r3
                uint8_t serverMinorVersion = payload[macIndex++];
 80051ae:	b2e4      	uxtb	r4, r4
                if( Nvm.MacGroup2.Version.Fields.Minor >= serverMinorVersion )
 80051b0:	f63f af09 	bhi.w	8004fc6 <ProcessMacCommands.constprop.0+0xb2>
                    if( LoRaMacCommandsGetCmd( MOTE_MAC_REKEY_IND, &macCmd) == LORAMAC_COMMANDS_SUCCESS )
 80051b4:	a909      	add	r1, sp, #36	; 0x24
 80051b6:	200b      	movs	r0, #11
 80051b8:	f002 fad8 	bl	800776c <LoRaMacCommandsGetCmd>
 80051bc:	2800      	cmp	r0, #0
 80051be:	f47f af02 	bne.w	8004fc6 <ProcessMacCommands.constprop.0+0xb2>
 80051c2:	e70d      	b.n	8004fe0 <ProcessMacCommands.constprop.0+0xcc>
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80051c4:	1ce2      	adds	r2, r4, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80051c6:	b2d2      	uxtb	r2, r2
 80051c8:	1d23      	adds	r3, r4, #4
 80051ca:	5cb1      	ldrb	r1, [r6, r2]
                dlChannelReq.ChannelId = payload[macIndex++];
 80051cc:	5d72      	ldrb	r2, [r6, r5]
 80051ce:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80051d2:	b2db      	uxtb	r3, r3
                dlChannelReq.ChannelId = payload[macIndex++];
 80051d4:	1ca2      	adds	r2, r4, #2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80051d6:	5cf3      	ldrb	r3, [r6, r3]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80051d8:	4f11      	ldr	r7, [pc, #68]	; (8005220 <ProcessMacCommands.constprop.0+0x30c>)
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80051da:	b2d2      	uxtb	r2, r2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80051dc:	041b      	lsls	r3, r3, #16
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80051de:	5cb2      	ldrb	r2, [r6, r2]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80051e0:	f897 05dc 	ldrb.w	r0, [r7, #1500]	; 0x5dc
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80051e4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80051e8:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
 80051ea:	2264      	movs	r2, #100	; 0x64
 80051ec:	fb02 f303 	mul.w	r3, r2, r3
 80051f0:	930f      	str	r3, [sp, #60]	; 0x3c
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80051f2:	a90e      	add	r1, sp, #56	; 0x38
                status = 0x03;
 80051f4:	2303      	movs	r3, #3
 80051f6:	f88d 3019 	strb.w	r3, [sp, #25]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80051fa:	f003 fcf9 	bl	8008bf0 <RegionDlChannelReq>
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80051fe:	3405      	adds	r4, #5
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8005200:	b2c3      	uxtb	r3, r0
                if( ( int8_t )status >= 0 )
 8005202:	2800      	cmp	r0, #0
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8005204:	b2e4      	uxtb	r4, r4
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8005206:	f88d 3019 	strb.w	r3, [sp, #25]
                if( ( int8_t )status >= 0 )
 800520a:	f6ff aedc 	blt.w	8004fc6 <ProcessMacCommands.constprop.0+0xb2>
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800520e:	2201      	movs	r2, #1
 8005210:	a907      	add	r1, sp, #28
 8005212:	200a      	movs	r0, #10
                    macCmdPayload[0] = status;
 8005214:	f88d 301c 	strb.w	r3, [sp, #28]
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8005218:	f002 fa0c 	bl	8007634 <LoRaMacCommandsAddCmd>
                break;
 800521c:	e6d3      	b.n	8004fc6 <ProcessMacCommands.constprop.0+0xb2>
 800521e:	bf00      	nop
 8005220:	20030a48 	.word	0x20030a48
 8005224:	00418937 	.word	0x00418937
 8005228:	20030f20 	.word	0x20030f20
 800522c:	cccccccd 	.word	0xcccccccd
                uint8_t eirpDwellTime = payload[macIndex++];
 8005230:	5d73      	ldrb	r3, [r6, r5]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8005232:	4fb0      	ldr	r7, [pc, #704]	; (80054f4 <ProcessMacCommands.constprop.0+0x5e0>)
                txParamSetupReq.UplinkDwellTime = 0;
 8005234:	2200      	movs	r2, #0
 8005236:	f88d 2020 	strb.w	r2, [sp, #32]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800523a:	f013 0220 	ands.w	r2, r3, #32
                    txParamSetupReq.DownlinkDwellTime = 1;
 800523e:	bf18      	it	ne
 8005240:	2201      	movne	r2, #1
 8005242:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8005246:	06da      	lsls	r2, r3, #27
                    txParamSetupReq.UplinkDwellTime = 1;
 8005248:	bf48      	it	mi
 800524a:	2201      	movmi	r2, #1
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800524c:	f003 030f 	and.w	r3, r3, #15
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8005250:	f897 05dc 	ldrb.w	r0, [r7, #1500]	; 0x5dc
                    txParamSetupReq.UplinkDwellTime = 1;
 8005254:	bf48      	it	mi
 8005256:	f88d 2020 	strbmi.w	r2, [sp, #32]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800525a:	a908      	add	r1, sp, #32
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800525c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8005260:	f003 fcbe 	bl	8008be0 <RegionTxParamSetupReq>
                uint8_t eirpDwellTime = payload[macIndex++];
 8005264:	3402      	adds	r4, #2
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8005266:	3001      	adds	r0, #1
                uint8_t eirpDwellTime = payload[macIndex++];
 8005268:	b2e4      	uxtb	r4, r4
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800526a:	f43f aeac 	beq.w	8004fc6 <ProcessMacCommands.constprop.0+0xb2>
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800526e:	49a2      	ldr	r1, [pc, #648]	; (80054f8 <ProcessMacCommands.constprop.0+0x5e4>)
 8005270:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8005274:	f89d 3020 	ldrb.w	r3, [sp, #32]
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8005278:	5c8a      	ldrb	r2, [r1, r2]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800527a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800527e:	ee07 2a90 	vmov	s15, r2
 8005282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005286:	f207 5384 	addw	r3, r7, #1412	; 0x584
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800528a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800528e:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8005292:	a90e      	add	r1, sp, #56	; 0x38
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8005294:	2302      	movs	r3, #2
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8005296:	f897 05dc 	ldrb.w	r0, [r7, #1500]	; 0x5dc
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800529a:	f8a7 2610 	strh.w	r2, [r7, #1552]	; 0x610
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800529e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80052a2:	f003 fc27 	bl	8008af4 <RegionGetPhyParam>
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80052a6:	f997 35cd 	ldrsb.w	r3, [r7, #1485]	; 0x5cd
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80052aa:	900a      	str	r0, [sp, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80052ac:	b240      	sxtb	r0, r0
 80052ae:	4298      	cmp	r0, r3
 80052b0:	bfb8      	it	lt
 80052b2:	4618      	movlt	r0, r3
 80052b4:	f887 05cd 	strb.w	r0, [r7, #1485]	; 0x5cd
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80052b8:	2200      	movs	r2, #0
 80052ba:	a907      	add	r1, sp, #28
 80052bc:	2009      	movs	r0, #9
 80052be:	f002 f9b9 	bl	8007634 <LoRaMacCommandsAddCmd>
    while( macIndex < commandsSize )
 80052c2:	45a0      	cmp	r8, r4
 80052c4:	f63f ae39 	bhi.w	8004f3a <ProcessMacCommands.constprop.0+0x26>
 80052c8:	e67f      	b.n	8004fca <ProcessMacCommands.constprop.0+0xb6>
                uint8_t delay = payload[macIndex++] & 0x0F;
 80052ca:	5d73      	ldrb	r3, [r6, r5]
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80052cc:	4f89      	ldr	r7, [pc, #548]	; (80054f4 <ProcessMacCommands.constprop.0+0x5e0>)
                uint8_t delay = payload[macIndex++] & 0x0F;
 80052ce:	f003 030f 	and.w	r3, r3, #15
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	bf38      	it	cc
 80052d6:	2301      	movcc	r3, #1
 80052d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052dc:	fb02 f303 	mul.w	r3, r2, r3
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80052e0:	1899      	adds	r1, r3, r2
                uint8_t delay = payload[macIndex++] & 0x0F;
 80052e2:	3402      	adds	r4, #2
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80052e4:	f8c7 15f0 	str.w	r1, [r7, #1520]	; 0x5f0
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80052e8:	2200      	movs	r2, #0
                uint8_t delay = payload[macIndex++] & 0x0F;
 80052ea:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80052ec:	a907      	add	r1, sp, #28
 80052ee:	2008      	movs	r0, #8
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80052f0:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80052f4:	f002 f99e 	bl	8007634 <LoRaMacCommandsAddCmd>
    while( macIndex < commandsSize )
 80052f8:	45a0      	cmp	r8, r4
 80052fa:	f63f ae1e 	bhi.w	8004f3a <ProcessMacCommands.constprop.0+0x26>
 80052fe:	e664      	b.n	8004fca <ProcessMacCommands.constprop.0+0xb6>
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8005300:	1ce2      	adds	r2, r4, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	1d23      	adds	r3, r4, #4
 8005306:	5cb1      	ldrb	r1, [r6, r2]
                newChannelReq.ChannelId = payload[macIndex++];
 8005308:	5d72      	ldrb	r2, [r6, r5]
 800530a:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800530e:	b2db      	uxtb	r3, r3
                newChannelReq.ChannelId = payload[macIndex++];
 8005310:	1ca2      	adds	r2, r4, #2
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8005312:	5cf3      	ldrb	r3, [r6, r3]
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8005314:	4f77      	ldr	r7, [pc, #476]	; (80054f4 <ProcessMacCommands.constprop.0+0x5e0>)
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8005316:	b2d2      	uxtb	r2, r2
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8005318:	041b      	lsls	r3, r3, #16
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800531a:	5cb2      	ldrb	r2, [r6, r2]
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800531c:	f897 05dc 	ldrb.w	r0, [r7, #1500]	; 0x5dc
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8005320:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005324:	4313      	orrs	r3, r2
 8005326:	1d61      	adds	r1, r4, #5
                chParam.Frequency *= 100;
 8005328:	2264      	movs	r2, #100	; 0x64
 800532a:	fb02 f303 	mul.w	r3, r2, r3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800532e:	b2c9      	uxtb	r1, r1
                chParam.Frequency *= 100;
 8005330:	930e      	str	r3, [sp, #56]	; 0x38
                status = 0x03;
 8005332:	2303      	movs	r3, #3
                chParam.DrRange.Value = payload[macIndex++];
 8005334:	5c72      	ldrb	r2, [r6, r1]
                status = 0x03;
 8005336:	f88d 3019 	strb.w	r3, [sp, #25]
                newChannelReq.NewChannel = &chParam;
 800533a:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
                chParam.Rx1Frequency = 0;
 800533e:	2300      	movs	r3, #0
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8005340:	a90a      	add	r1, sp, #40	; 0x28
                chParam.Rx1Frequency = 0;
 8005342:	930f      	str	r3, [sp, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 8005344:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
                newChannelReq.NewChannel = &chParam;
 8005348:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800534c:	f003 fc40 	bl	8008bd0 <RegionNewChannelReq>
                chParam.DrRange.Value = payload[macIndex++];
 8005350:	3406      	adds	r4, #6
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8005352:	b2c3      	uxtb	r3, r0
                if( ( int8_t )status >= 0 )
 8005354:	2800      	cmp	r0, #0
                chParam.DrRange.Value = payload[macIndex++];
 8005356:	b2e4      	uxtb	r4, r4
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8005358:	f88d 3019 	strb.w	r3, [sp, #25]
                if( ( int8_t )status >= 0 )
 800535c:	f6ff ae33 	blt.w	8004fc6 <ProcessMacCommands.constprop.0+0xb2>
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8005360:	2201      	movs	r2, #1
 8005362:	a907      	add	r1, sp, #28
 8005364:	2007      	movs	r0, #7
                    macCmdPayload[0] = status;
 8005366:	f88d 301c 	strb.w	r3, [sp, #28]
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800536a:	f002 f963 	bl	8007634 <LoRaMacCommandsAddCmd>
                break;
 800536e:	e62a      	b.n	8004fc6 <ProcessMacCommands.constprop.0+0xb2>
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8005370:	1d23      	adds	r3, r4, #4
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8005372:	1ce2      	adds	r2, r4, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8005374:	b2db      	uxtb	r3, r3
 8005376:	b2d2      	uxtb	r2, r2
                macIndex++;
 8005378:	1ca1      	adds	r1, r4, #2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800537a:	5cf3      	ldrb	r3, [r6, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800537c:	5cb0      	ldrb	r0, [r6, r2]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800537e:	5d72      	ldrb	r2, [r6, r5]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8005380:	4f5c      	ldr	r7, [pc, #368]	; (80054f4 <ProcessMacCommands.constprop.0+0x5e0>)
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8005382:	b2c9      	uxtb	r1, r1
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8005384:	041b      	lsls	r3, r3, #16
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8005386:	5c71      	ldrb	r1, [r6, r1]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8005388:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800538c:	430b      	orrs	r3, r1
                rxParamSetupReq.Frequency *= 100;
 800538e:	2164      	movs	r1, #100	; 0x64
 8005390:	fb01 f303 	mul.w	r3, r1, r3
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8005394:	f3c2 1102 	ubfx	r1, r2, #4, #3
                rxParamSetupReq.Frequency *= 100;
 8005398:	930f      	str	r3, [sp, #60]	; 0x3c
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800539a:	f002 020f 	and.w	r2, r2, #15
                status = 0x07;
 800539e:	2307      	movs	r3, #7
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80053a0:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80053a4:	f897 05dc 	ldrb.w	r0, [r7, #1500]	; 0x5dc
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 80053a8:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80053ac:	a90e      	add	r1, sp, #56	; 0x38
                status = 0x07;
 80053ae:	f88d 3019 	strb.w	r3, [sp, #25]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80053b2:	f003 fc05 	bl	8008bc0 <RegionRxParamSetupReq>
                if( ( status & 0x07 ) == 0x07 )
 80053b6:	f000 0207 	and.w	r2, r0, #7
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80053ba:	3405      	adds	r4, #5
                if( ( status & 0x07 ) == 0x07 )
 80053bc:	2a07      	cmp	r2, #7
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80053be:	b2e4      	uxtb	r4, r4
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80053c0:	4603      	mov	r3, r0
 80053c2:	f88d 0019 	strb.w	r0, [sp, #25]
                if( ( status & 0x07 ) == 0x07 )
 80053c6:	d070      	beq.n	80054aa <ProcessMacCommands.constprop.0+0x596>
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80053c8:	2201      	movs	r2, #1
 80053ca:	a907      	add	r1, sp, #28
 80053cc:	2005      	movs	r0, #5
                macCmdPayload[0] = status;
 80053ce:	f88d 301c 	strb.w	r3, [sp, #28]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80053d2:	f002 f92f 	bl	8007634 <LoRaMacCommandsAddCmd>
    while( macIndex < commandsSize )
 80053d6:	45a0      	cmp	r8, r4
 80053d8:	f63f adaf 	bhi.w	8004f3a <ProcessMacCommands.constprop.0+0x26>
 80053dc:	e5f5      	b.n	8004fca <ProcessMacCommands.constprop.0+0xb6>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80053de:	5d73      	ldrb	r3, [r6, r5]
 80053e0:	4f44      	ldr	r7, [pc, #272]	; (80054f4 <ProcessMacCommands.constprop.0+0x5e0>)
 80053e2:	f003 030f 	and.w	r3, r3, #15
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 80053e6:	2101      	movs	r1, #1
 80053e8:	4099      	lsls	r1, r3
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80053ea:	3402      	adds	r4, #2
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 80053ec:	f8a7 172c 	strh.w	r1, [r7, #1836]	; 0x72c
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80053f0:	2200      	movs	r2, #0
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80053f2:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80053f4:	a907      	add	r1, sp, #28
 80053f6:	2004      	movs	r0, #4
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80053f8:	f887 3727 	strb.w	r3, [r7, #1831]	; 0x727
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80053fc:	f002 f91a 	bl	8007634 <LoRaMacCommandsAddCmd>
    while( macIndex < commandsSize )
 8005400:	45a0      	cmp	r8, r4
 8005402:	f63f ad9a 	bhi.w	8004f3a <ProcessMacCommands.constprop.0+0x26>
 8005406:	e5e0      	b.n	8004fca <ProcessMacCommands.constprop.0+0xb6>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8005408:	2004      	movs	r0, #4
 800540a:	f002 fb1b 	bl	8007a44 <LoRaMacConfirmQueueIsCmdActive>
 800540e:	2800      	cmp	r0, #0
 8005410:	f43f ae0f 	beq.w	8005032 <ProcessMacCommands.constprop.0+0x11e>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8005414:	4f37      	ldr	r7, [pc, #220]	; (80054f4 <ProcessMacCommands.constprop.0+0x5e0>)
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8005416:	2104      	movs	r1, #4
 8005418:	2000      	movs	r0, #0
 800541a:	f002 fab9 	bl	8007990 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800541e:	5d73      	ldrb	r3, [r6, r5]
 8005420:	f887 3460 	strb.w	r3, [r7, #1120]	; 0x460
 8005424:	1ca3      	adds	r3, r4, #2
 8005426:	b2db      	uxtb	r3, r3
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8005428:	3403      	adds	r4, #3
 800542a:	5cf3      	ldrb	r3, [r6, r3]
 800542c:	f887 3461 	strb.w	r3, [r7, #1121]	; 0x461
 8005430:	b2e4      	uxtb	r4, r4
 8005432:	e5c8      	b.n	8004fc6 <ProcessMacCommands.constprop.0+0xb2>
                if( Nvm.MacGroup2.Version.Fields.Minor >= serverMinorVersion )
 8005434:	4f2f      	ldr	r7, [pc, #188]	; (80054f4 <ProcessMacCommands.constprop.0+0x5e0>)
 8005436:	5d72      	ldrb	r2, [r6, r5]
 8005438:	f897 373a 	ldrb.w	r3, [r7, #1850]	; 0x73a
                uint8_t serverMinorVersion = payload[macIndex++];
 800543c:	3402      	adds	r4, #2
                if( Nvm.MacGroup2.Version.Fields.Minor >= serverMinorVersion )
 800543e:	429a      	cmp	r2, r3
                uint8_t serverMinorVersion = payload[macIndex++];
 8005440:	b2e4      	uxtb	r4, r4
                if( Nvm.MacGroup2.Version.Fields.Minor >= serverMinorVersion )
 8005442:	f63f adc0 	bhi.w	8004fc6 <ProcessMacCommands.constprop.0+0xb2>
                    if( LoRaMacCommandsGetCmd( MOTE_MAC_RESET_IND, &macCmd) == LORAMAC_COMMANDS_SUCCESS )
 8005446:	a909      	add	r1, sp, #36	; 0x24
 8005448:	2001      	movs	r0, #1
 800544a:	f002 f98f 	bl	800776c <LoRaMacCommandsGetCmd>
 800544e:	2800      	cmp	r0, #0
 8005450:	f47f adb9 	bne.w	8004fc6 <ProcessMacCommands.constprop.0+0xb2>
 8005454:	e5c4      	b.n	8004fe0 <ProcessMacCommands.constprop.0+0xcc>
                int8_t linkAdrDatarate = DR_0;
 8005456:	2300      	movs	r3, #0
 8005458:	f88d 301a 	strb.w	r3, [sp, #26]
                int8_t linkAdrTxPower = TX_POWER_0;
 800545c:	f88d 301b 	strb.w	r3, [sp, #27]
                uint8_t linkAdrNbRep = 0;
 8005460:	f88d 3020 	strb.w	r3, [sp, #32]
                uint8_t linkAdrNbBytesParsed = 0;
 8005464:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                if( adrBlockFound == false )
 8005468:	f1b9 0f00 	cmp.w	r9, #0
 800546c:	f000 8098 	beq.w	80055a0 <ProcessMacCommands.constprop.0+0x68c>
                    macIndex += 4;
 8005470:	3405      	adds	r4, #5
 8005472:	b2e4      	uxtb	r4, r4
    while( macIndex < commandsSize )
 8005474:	45a0      	cmp	r8, r4
 8005476:	f04f 0901 	mov.w	r9, #1
 800547a:	f63f ad5e 	bhi.w	8004f3a <ProcessMacCommands.constprop.0+0x26>
 800547e:	e5a4      	b.n	8004fca <ProcessMacCommands.constprop.0+0xb6>
        *timeInMiliSec = rejoinCycleTime * 1000;
 8005480:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005484:	fa03 f202 	lsl.w	r2, r3, r2
                    TimerStop( &MacCtx.Rejoin0CycleTimer );
 8005488:	f507 6092 	add.w	r0, r7, #1168	; 0x490
        *timeInMiliSec = rejoinCycleTime * 1000;
 800548c:	f8c7 24f0 	str.w	r2, [r7, #1264]	; 0x4f0
                    TimerStop( &MacCtx.Rejoin0CycleTimer );
 8005490:	f007 f8e8 	bl	800c664 <TimerStop>
                    TimerSetValue( &MacCtx.Rejoin0CycleTimer, MacCtx.Rejoin0CycleTime );
 8005494:	f507 6092 	add.w	r0, r7, #1168	; 0x490
 8005498:	f8d7 14f0 	ldr.w	r1, [r7, #1264]	; 0x4f0
 800549c:	f007 f91c 	bl	800c6d8 <TimerSetValue>
                    TimerStart( &MacCtx.Rejoin0CycleTimer );
 80054a0:	f507 6092 	add.w	r0, r7, #1168	; 0x490
 80054a4:	f007 f83e 	bl	800c524 <TimerStart>
 80054a8:	e614      	b.n	80050d4 <ProcessMacCommands.constprop.0+0x1c0>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 80054aa:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80054ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 80054b0:	f887 1604 	strb.w	r1, [r7, #1540]	; 0x604
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 80054b4:	f887 160c 	strb.w	r1, [r7, #1548]	; 0x60c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80054b8:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80054bc:	f8c7 2600 	str.w	r2, [r7, #1536]	; 0x600
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80054c0:	f8c7 2608 	str.w	r2, [r7, #1544]	; 0x608
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80054c4:	f887 15fd 	strb.w	r1, [r7, #1533]	; 0x5fd
 80054c8:	e77e      	b.n	80053c8 <ProcessMacCommands.constprop.0+0x4b4>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 80054ca:	210c      	movs	r1, #12
 80054cc:	2000      	movs	r0, #0
 80054ce:	f002 fa5f 	bl	8007990 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 80054d2:	1ca2      	adds	r2, r4, #2
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	1ce3      	adds	r3, r4, #3
 80054d8:	5d71      	ldrb	r1, [r6, r5]
 80054da:	5cb0      	ldrb	r0, [r6, r2]
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80054dc:	4a07      	ldr	r2, [pc, #28]	; (80054fc <ProcessMacCommands.constprop.0+0x5e8>)
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80054de:	b2db      	uxtb	r3, r3
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80054e0:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 80054e4:	6812      	ldr	r2, [r2, #0]
 80054e6:	5cf1      	ldrb	r1, [r6, r3]
                    beaconTimingChannel = payload[macIndex++];
 80054e8:	3404      	adds	r4, #4
 80054ea:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80054ec:	f002 f886 	bl	80075fc <LoRaMacClassBBeaconTimingAns>
 80054f0:	e569      	b.n	8004fc6 <ProcessMacCommands.constprop.0+0xb2>
 80054f2:	bf00      	nop
 80054f4:	20030a48 	.word	0x20030a48
 80054f8:	0801562c 	.word	0x0801562c
 80054fc:	20000a68 	.word	0x20000a68
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8005500:	2108      	movs	r1, #8
 8005502:	2000      	movs	r0, #0
 8005504:	f002 fa44 	bl	8007990 <LoRaMacConfirmQueueSetStatus>
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8005508:	1ce3      	adds	r3, r4, #3
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800550a:	1ca2      	adds	r2, r4, #2
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800550c:	b2d2      	uxtb	r2, r2
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800550e:	b2db      	uxtb	r3, r3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8005510:	f816 c002 	ldrb.w	ip, [r6, r2]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8005514:	5cf3      	ldrb	r3, [r6, r3]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8005516:	5d70      	ldrb	r0, [r6, r5]
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8005518:	4f5f      	ldr	r7, [pc, #380]	; (8005698 <ProcessMacCommands.constprop.0+0x784>)
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800551a:	1d22      	adds	r2, r4, #4
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800551c:	1d61      	adds	r1, r4, #5
 800551e:	b2d2      	uxtb	r2, r2
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8005520:	041d      	lsls	r5, r3, #16
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8005522:	b2c9      	uxtb	r1, r1
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8005524:	ea45 250c 	orr.w	r5, r5, ip, lsl #8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8005528:	5cb2      	ldrb	r2, [r6, r2]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800552a:	5c71      	ldrb	r1, [r6, r1]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800552c:	4305      	orrs	r5, r0
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800552e:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8005532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005536:	fb03 f301 	mul.w	r3, r3, r1
                    sysTimeCurrent = SysTimeGet( );
 800553a:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800553e:	f105 5596 	add.w	r5, r5, #314572800	; 0x12c00000
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8005542:	121b      	asrs	r3, r3, #8
                    SysTime_t sysTime = { 0 };
 8005544:	2200      	movs	r2, #0
                    sysTimeCurrent = SysTimeGet( );
 8005546:	4650      	mov	r0, sl
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8005548:	f505 15a9 	add.w	r5, r5, #1384448	; 0x152000
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800554c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
                    SysTime_t sysTime = { 0 };
 8005550:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8005554:	f505 55ec 	add.w	r5, r5, #7552	; 0x1d80
                    sysTimeCurrent = SysTimeGet( );
 8005558:	f007 f946 	bl	800c7e8 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800555c:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8005560:	950a      	str	r5, [sp, #40]	; 0x28
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	ad0a      	add	r5, sp, #40	; 0x28
 8005566:	e9d5 1200 	ldrd	r1, r2, [r5]
 800556a:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800556e:	a80c      	add	r0, sp, #48	; 0x30
 8005570:	f007 f8fa 	bl	800c768 <SysTimeSub>
 8005574:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	e89a 0006 	ldmia.w	sl, {r1, r2}
 800557c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800557e:	4628      	mov	r0, r5
 8005580:	f007 f8d4 	bl	800c72c <SysTimeAdd>
                    SysTimeSet( sysTime );
 8005584:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005588:	f007 f90c 	bl	800c7a4 <SysTimeSet>
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800558c:	3406      	adds	r4, #6
                    LoRaMacClassBDeviceTimeAns( );
 800558e:	f002 f837 	bl	8007600 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8005592:	2301      	movs	r3, #1
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8005594:	b2e4      	uxtb	r4, r4
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8005596:	f887 343c 	strb.w	r3, [r7, #1084]	; 0x43c
 800559a:	e514      	b.n	8004fc6 <ProcessMacCommands.constprop.0+0xb2>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800559c:	20ff      	movs	r0, #255	; 0xff
 800559e:	e505      	b.n	8004fac <ProcessMacCommands.constprop.0+0x98>
 80055a0:	aa0a      	add	r2, sp, #40	; 0x28
 80055a2:	9204      	str	r2, [sp, #16]
 80055a4:	4f3c      	ldr	r7, [pc, #240]	; (8005698 <ProcessMacCommands.constprop.0+0x784>)
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80055a6:	f108 0201 	add.w	r2, r8, #1
 80055aa:	1e6b      	subs	r3, r5, #1
 80055ac:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 80055b0:	f10d 0920 	add.w	r9, sp, #32
 80055b4:	9205      	str	r2, [sp, #20]
                        linkAdrReq.Payload = &payload[macIndex - 1];
 80055b6:	4433      	add	r3, r6
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80055b8:	f897 15cd 	ldrb.w	r1, [r7, #1485]	; 0x5cd
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80055bc:	f897 2726 	ldrb.w	r2, [r7, #1830]	; 0x726
                        linkAdrReq.Payload = &payload[macIndex - 1];
 80055c0:	930f      	str	r3, [sp, #60]	; 0x3c
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80055c2:	f897 35cc 	ldrb.w	r3, [r7, #1484]	; 0x5cc
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80055c6:	f897 0610 	ldrb.w	r0, [r7, #1552]	; 0x610
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80055ca:	f88d 1043 	strb.w	r1, [sp, #67]	; 0x43
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80055ce:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80055d2:	f897 15fc 	ldrb.w	r1, [r7, #1532]	; 0x5fc
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 80055d6:	f8d7 3738 	ldr.w	r3, [r7, #1848]	; 0x738
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80055da:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80055de:	f88d 0041 	strb.w	r0, [sp, #65]	; 0x41
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80055e2:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 80055e6:	930e      	str	r3, [sp, #56]	; 0x38
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80055e8:	2a00      	cmp	r2, #0
 80055ea:	d04f      	beq.n	800568c <ProcessMacCommands.constprop.0+0x778>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80055ec:	9b05      	ldr	r3, [sp, #20]
 80055ee:	eba3 0c05 	sub.w	ip, r3, r5
 80055f2:	fa5f fc8c 	uxtb.w	ip, ip
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 80055f6:	9b04      	ldr	r3, [sp, #16]
 80055f8:	f897 05dc 	ldrb.w	r0, [r7, #1500]	; 0x5dc
 80055fc:	f88d c040 	strb.w	ip, [sp, #64]	; 0x40
 8005600:	e9cd 9300 	strd	r9, r3, [sp]
 8005604:	f10d 021a 	add.w	r2, sp, #26
 8005608:	f10d 031b 	add.w	r3, sp, #27
 800560c:	4651      	mov	r1, sl
 800560e:	f003 fac7 	bl	8008ba0 <RegionLinkAdrReq>
                        if( ( status & 0x07 ) == 0x07 )
 8005612:	f000 0307 	and.w	r3, r0, #7
 8005616:	2b07      	cmp	r3, #7
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8005618:	f88d 0019 	strb.w	r0, [sp, #25]
                        if( ( status & 0x07 ) == 0x07 )
 800561c:	d113      	bne.n	8005646 <ProcessMacCommands.constprop.0+0x732>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800561e:	f997 25cd 	ldrsb.w	r2, [r7, #1485]	; 0x5cd
 8005622:	f99d 301a 	ldrsb.w	r3, [sp, #26]
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8005626:	f887 35cd 	strb.w	r3, [r7, #1485]	; 0x5cd
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800562a:	429a      	cmp	r2, r3
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800562c:	bfb8      	it	lt
 800562e:	2201      	movlt	r2, #1
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8005630:	f89d 3020 	ldrb.w	r3, [sp, #32]
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 8005634:	bfb8      	it	lt
 8005636:	f887 2729 	strblt.w	r2, [r7, #1833]	; 0x729
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800563a:	f89d 201b 	ldrb.w	r2, [sp, #27]
 800563e:	f887 25cc 	strb.w	r2, [r7, #1484]	; 0x5cc
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8005642:	f887 35fc 	strb.w	r3, [r7, #1532]	; 0x5fc
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8005646:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 800564a:	2a04      	cmp	r2, #4
 800564c:	bf88      	it	hi
 800564e:	2400      	movhi	r4, #0
 8005650:	d90e      	bls.n	8005670 <ProcessMacCommands.constprop.0+0x75c>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8005652:	2201      	movs	r2, #1
 8005654:	f10d 0119 	add.w	r1, sp, #25
 8005658:	2003      	movs	r0, #3
 800565a:	f001 ffeb 	bl	8007634 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800565e:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 8005662:	3401      	adds	r4, #1
 8005664:	b2e3      	uxtb	r3, r4
 8005666:	fbab 0102 	umull	r0, r1, fp, r2
 800566a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800566e:	d3f0      	bcc.n	8005652 <ProcessMacCommands.constprop.0+0x73e>
                        macIndex += linkAdrNbBytesParsed - 1;
 8005670:	4415      	add	r5, r2
 8005672:	b2ed      	uxtb	r5, r5
 8005674:	1e6b      	subs	r3, r5, #1
 8005676:	b2da      	uxtb	r2, r3
                        if( macIndex >= commandsSize )
 8005678:	4590      	cmp	r8, r2
 800567a:	d90a      	bls.n	8005692 <ProcessMacCommands.constprop.0+0x77e>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800567c:	5cb1      	ldrb	r1, [r6, r2]
 800567e:	2903      	cmp	r1, #3
 8005680:	d099      	beq.n	80055b6 <ProcessMacCommands.constprop.0+0x6a2>
                    if( macIndex < commandsSize )
 8005682:	4614      	mov	r4, r2
 8005684:	45a8      	cmp	r8, r5
 8005686:	bf98      	it	ls
 8005688:	462c      	movls	r4, r5
 800568a:	e6f3      	b.n	8005474 <ProcessMacCommands.constprop.0+0x560>
                            linkAdrReq.PayloadSize = 5;
 800568c:	f04f 0c05 	mov.w	ip, #5
 8005690:	e7b1      	b.n	80055f6 <ProcessMacCommands.constprop.0+0x6e2>
 8005692:	4614      	mov	r4, r2
 8005694:	e6ee      	b.n	8005474 <ProcessMacCommands.constprop.0+0x560>
 8005696:	bf00      	nop
 8005698:	20030a48 	.word	0x20030a48

0800569c <DetermineFrameType>:
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800569c:	b1b0      	cbz	r0, 80056cc <DetermineFrameType+0x30>
 800569e:	b1a9      	cbz	r1, 80056cc <DetermineFrameType+0x30>
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80056a0:	7b03      	ldrb	r3, [r0, #12]
 80056a2:	f013 030f 	ands.w	r3, r3, #15
 80056a6:	d107      	bne.n	80056b8 <DetermineFrameType+0x1c>
    else if( macMsg->FRMPayloadSize == 0 )
 80056a8:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 80056ac:	b9aa      	cbnz	r2, 80056da <DetermineFrameType+0x3e>
        *fType = FRAME_TYPE_B;
 80056ae:	2301      	movs	r3, #1
 80056b0:	700b      	strb	r3, [r1, #0]
    return LORAMAC_STATUS_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	4770      	bx	lr
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80056b8:	f890 3020 	ldrb.w	r3, [r0, #32]
 80056bc:	b94b      	cbnz	r3, 80056d2 <DetermineFrameType+0x36>
    else if( macMsg->FRMPayloadSize == 0 )
 80056be:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0f3      	beq.n	80056ae <DetermineFrameType+0x12>
        return LORAMAC_STATUS_ERROR;
 80056c6:	2317      	movs	r3, #23
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80056cc:	2303      	movs	r3, #3
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	4770      	bx	lr
        *fType = FRAME_TYPE_A;
 80056d2:	2300      	movs	r3, #0
 80056d4:	700b      	strb	r3, [r1, #0]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	4770      	bx	lr
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80056da:	f890 2020 	ldrb.w	r2, [r0, #32]
 80056de:	b912      	cbnz	r2, 80056e6 <DetermineFrameType+0x4a>
        *fType = FRAME_TYPE_C;
 80056e0:	2202      	movs	r2, #2
 80056e2:	700a      	strb	r2, [r1, #0]
 80056e4:	e7e6      	b.n	80056b4 <DetermineFrameType+0x18>
        *fType = FRAME_TYPE_D;
 80056e6:	2203      	movs	r2, #3
 80056e8:	700a      	strb	r2, [r1, #0]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop

080056f0 <LoRaMacProcess>:
{
 80056f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    events = LoRaMacRadioEvents;
 80056f4:	4dc7      	ldr	r5, [pc, #796]	; (8005a14 <LoRaMacProcess+0x324>)
{
 80056f6:	b0a9      	sub	sp, #164	; 0xa4
    CRITICAL_SECTION_BEGIN( );
 80056f8:	a808      	add	r0, sp, #32
 80056fa:	f7fc fdc9 	bl	8002290 <BoardCriticalSectionBegin>
    events = LoRaMacRadioEvents;
 80056fe:	682c      	ldr	r4, [r5, #0]
    LoRaMacRadioEvents.Value = 0;
 8005700:	2300      	movs	r3, #0
    CRITICAL_SECTION_END( );
 8005702:	a808      	add	r0, sp, #32
    LoRaMacRadioEvents.Value = 0;
 8005704:	602b      	str	r3, [r5, #0]
    CRITICAL_SECTION_END( );
 8005706:	f7fc fdc9 	bl	800229c <BoardCriticalSectionEnd>
    if( events.Value != 0 )
 800570a:	2c00      	cmp	r4, #0
 800570c:	f040 808e 	bne.w	800582c <LoRaMacProcess+0x13c>
 8005710:	4cc1      	ldr	r4, [pc, #772]	; (8005a18 <LoRaMacProcess+0x328>)
    LoRaMacClassBProcess( );
 8005712:	f001 ff7f 	bl	8007614 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8005716:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 800571a:	06d8      	lsls	r0, r3, #27
 800571c:	d55e      	bpl.n	80057dc <LoRaMacProcess+0xec>
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800571e:	f8d4 2340 	ldr.w	r2, [r4, #832]	; 0x340
    MacCtx.AllowRequests = requestState;
 8005722:	2100      	movs	r1, #0
 8005724:	f884 148e 	strb.w	r1, [r4, #1166]	; 0x48e
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8005728:	0611      	lsls	r1, r2, #24
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800572a:	bf44      	itt	mi
 800572c:	f022 0282 	bicmi.w	r2, r2, #130	; 0x82
 8005730:	f8c4 2340 	strmi.w	r2, [r4, #832]	; 0x340
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8005734:	f013 0f05 	tst.w	r3, #5
 8005738:	f040 8105 	bne.w	8005946 <LoRaMacProcess+0x256>
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800573c:	075d      	lsls	r5, r3, #29
 800573e:	f100 825f 	bmi.w	8005c00 <LoRaMacProcess+0x510>
 8005742:	f003 0201 	and.w	r2, r3, #1
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8005746:	2a00      	cmp	r2, #0
 8005748:	f000 8243 	beq.w	8005bd2 <LoRaMacProcess+0x4e2>
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800574c:	f894 2444 	ldrb.w	r2, [r4, #1092]	; 0x444
 8005750:	2a00      	cmp	r2, #0
 8005752:	f000 812c 	beq.w	80059ae <LoRaMacProcess+0x2be>
 8005756:	2a03      	cmp	r2, #3
 8005758:	f000 8129 	beq.w	80059ae <LoRaMacProcess+0x2be>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800575c:	2a01      	cmp	r2, #1
 800575e:	f000 8437 	beq.w	8005fd0 <LoRaMacProcess+0x8e0>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8005762:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
            MacCtx.RetransmitTimeoutRetry = false;
 8005766:	2000      	movs	r0, #0
            MacCtx.MacFlags.Bits.MacDone = 0;
 8005768:	f36f 1304 	bfc	r3, #4, #1
 800576c:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
            MacCtx.RetransmitTimeoutRetry = false;
 8005770:	f884 0419 	strb.w	r0, [r4, #1049]	; 0x419
            OnTxDelayedTimerEvent( NULL );
 8005774:	f7ff f9f6 	bl	8004b64 <OnTxDelayedTimerEvent>
    if( MacCtx.MacState == LORAMAC_IDLE )
 8005778:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800577c:	bb2b      	cbnz	r3, 80057ca <LoRaMacProcess+0xda>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800577e:	f894 548d 	ldrb.w	r5, [r4, #1165]	; 0x48d
 8005782:	07ea      	lsls	r2, r5, #31
 8005784:	f140 80f8 	bpl.w	8005978 <LoRaMacProcess+0x288>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8005788:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 800578c:	f36f 0300 	bfc	r3, #0, #1
 8005790:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8005794:	b2da      	uxtb	r2, r3
 8005796:	075b      	lsls	r3, r3, #29
 8005798:	f140 83a3 	bpl.w	8005ee2 <LoRaMacProcess+0x7f2>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800579c:	f36f 0282 	bfc	r2, #2, #1
    MacCtx.AllowRequests = requestState;
 80057a0:	2301      	movs	r3, #1
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80057a2:	f884 248d 	strb.w	r2, [r4, #1165]	; 0x48d
    MacCtx.AllowRequests = requestState;
 80057a6:	f884 348e 	strb.w	r3, [r4, #1166]	; 0x48e
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 80057aa:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 80057ae:	489b      	ldr	r0, [pc, #620]	; (8005a1c <LoRaMacProcess+0x32c>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 80057b4:	076f      	lsls	r7, r5, #29
 80057b6:	f100 80eb 	bmi.w	8005990 <LoRaMacProcess+0x2a0>
        LoRaMacClassBResumeBeaconing( );
 80057ba:	f001 ff13 	bl	80075e4 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 80057be:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 80057c2:	f36f 1304 	bfc	r3, #4, #1
 80057c6:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80057ca:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
    MacCtx.AllowRequests = requestState;
 80057ce:	2201      	movs	r2, #1
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80057d0:	f043 0320 	orr.w	r3, r3, #32
 80057d4:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    MacCtx.AllowRequests = requestState;
 80057d8:	f884 248e 	strb.w	r2, [r4, #1166]	; 0x48e
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 80057dc:	071e      	lsls	r6, r3, #28
 80057de:	d50c      	bpl.n	80057fa <LoRaMacProcess+0x10a>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 80057e0:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 80057e4:	f8d4 2344 	ldr.w	r2, [r4, #836]	; 0x344
 80057e8:	488d      	ldr	r0, [pc, #564]	; (8005a20 <LoRaMacProcess+0x330>)
 80057ea:	68d2      	ldr	r2, [r2, #12]
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 80057ec:	f36f 03c3 	bfc	r3, #3, #1
 80057f0:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 80057f4:	4790      	blx	r2
 80057f6:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80057fa:	079d      	lsls	r5, r3, #30
 80057fc:	d50a      	bpl.n	8005814 <LoRaMacProcess+0x124>
        MacCtx.MacFlags.Bits.McpsInd = 0;
 80057fe:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 8005802:	f8d4 2344 	ldr.w	r2, [r4, #836]	; 0x344
 8005806:	4887      	ldr	r0, [pc, #540]	; (8005a24 <LoRaMacProcess+0x334>)
 8005808:	6852      	ldr	r2, [r2, #4]
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800580a:	f36f 0341 	bfc	r3, #1, #1
 800580e:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 8005812:	4790      	blx	r2
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8005814:	f894 348c 	ldrb.w	r3, [r4, #1164]	; 0x48c
 8005818:	2b02      	cmp	r3, #2
 800581a:	f000 8091 	beq.w	8005940 <LoRaMacProcess+0x250>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800581e:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8005822:	0698      	lsls	r0, r3, #26
 8005824:	d419      	bmi.n	800585a <LoRaMacProcess+0x16a>
}
 8005826:	b029      	add	sp, #164	; 0xa4
 8005828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( events.Events.TxDone == 1 )
 800582c:	f014 0f20 	tst.w	r4, #32
 8005830:	b2e6      	uxtb	r6, r4
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8005832:	4c79      	ldr	r4, [pc, #484]	; (8005a18 <LoRaMacProcess+0x328>)
        if( events.Events.TxDone == 1 )
 8005834:	f040 810a 	bne.w	8005a4c <LoRaMacProcess+0x35c>
        if( events.Events.RxDone == 1 )
 8005838:	06f7      	lsls	r7, r6, #27
 800583a:	f100 8155 	bmi.w	8005ae8 <LoRaMacProcess+0x3f8>
        if( events.Events.TxTimeout == 1 )
 800583e:	0733      	lsls	r3, r6, #28
 8005840:	f100 81a7 	bmi.w	8005b92 <LoRaMacProcess+0x4a2>
        if( events.Events.RxError == 1 )
 8005844:	0777      	lsls	r7, r6, #29
 8005846:	f100 80e0 	bmi.w	8005a0a <LoRaMacProcess+0x31a>
        if( events.Events.RxTimeout == 1 )
 800584a:	07b5      	lsls	r5, r6, #30
 800584c:	f57f af61 	bpl.w	8005712 <LoRaMacProcess+0x22>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8005850:	2104      	movs	r1, #4
 8005852:	2003      	movs	r0, #3
 8005854:	f7fe fc98 	bl	8004188 <HandleRadioRxErrorTimeout>
}
 8005858:	e75b      	b.n	8005712 <LoRaMacProcess+0x22>
    if( MacCtx.MacState != LORAMAC_IDLE )
 800585a:	f8d4 5340 	ldr.w	r5, [r4, #832]	; 0x340
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800585e:	f36f 1345 	bfc	r3, #5, #1
 8005862:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    if( MacCtx.MacState != LORAMAC_IDLE )
 8005866:	2d00      	cmp	r5, #0
 8005868:	d1dd      	bne.n	8005826 <LoRaMacProcess+0x136>
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800586a:	2134      	movs	r1, #52	; 0x34
 800586c:	486e      	ldr	r0, [pc, #440]	; (8005a28 <LoRaMacProcess+0x338>)
 800586e:	f7fd fb17 	bl	8002ea0 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 8005872:	f8d4 35b8 	ldr.w	r3, [r4, #1464]	; 0x5b8
 8005876:	4298      	cmp	r0, r3
        nvmData->Crypto.Crc32 = crc;
 8005878:	bf18      	it	ne
 800587a:	f8c4 05b8 	strne.w	r0, [r4, #1464]	; 0x5b8
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800587e:	f04f 011c 	mov.w	r1, #28
 8005882:	486a      	ldr	r0, [pc, #424]	; (8005a2c <LoRaMacProcess+0x33c>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8005884:	bf18      	it	ne
 8005886:	2501      	movne	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8005888:	f7fd fb0a 	bl	8002ea0 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800588c:	f8d4 35d8 	ldr.w	r3, [r4, #1496]	; 0x5d8
 8005890:	4298      	cmp	r0, r3
        nvmData->MacGroup1.Crc32 = crc;
 8005892:	bf18      	it	ne
 8005894:	f8c4 05d8 	strne.w	r0, [r4, #1496]	; 0x5d8
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8005898:	f44f 71be 	mov.w	r1, #380	; 0x17c
 800589c:	4864      	ldr	r0, [pc, #400]	; (8005a30 <LoRaMacProcess+0x340>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800589e:	bf18      	it	ne
 80058a0:	f045 0502 	orrne.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 80058a4:	f7fd fafc 	bl	8002ea0 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 80058a8:	f8d4 3758 	ldr.w	r3, [r4, #1880]	; 0x758
 80058ac:	4298      	cmp	r0, r3
        nvmData->MacGroup2.Crc32 = crc;
 80058ae:	bf18      	it	ne
 80058b0:	f8c4 0758 	strne.w	r0, [r4, #1880]	; 0x758
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 80058b4:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80058b8:	485e      	ldr	r0, [pc, #376]	; (8005a34 <LoRaMacProcess+0x344>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 80058ba:	bf18      	it	ne
 80058bc:	f045 0504 	orrne.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 80058c0:	f7fd faee 	bl	8002ea0 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 80058c4:	f8d4 38f8 	ldr.w	r3, [r4, #2296]	; 0x8f8
 80058c8:	4298      	cmp	r0, r3
        nvmData->SecureElement.Crc32 = crc;
 80058ca:	bf18      	it	ne
 80058cc:	f8c4 08f8 	strne.w	r0, [r4, #2296]	; 0x8f8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 80058d0:	f04f 0100 	mov.w	r1, #0
 80058d4:	4858      	ldr	r0, [pc, #352]	; (8005a38 <LoRaMacProcess+0x348>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 80058d6:	bf18      	it	ne
 80058d8:	f045 0508 	orrne.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 80058dc:	f7fd fae0 	bl	8002ea0 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 80058e0:	f8d4 38fc 	ldr.w	r3, [r4, #2300]	; 0x8fc
 80058e4:	4298      	cmp	r0, r3
        nvmData->RegionGroup1.Crc32 = crc;
 80058e6:	bf18      	it	ne
 80058e8:	f8c4 08fc 	strne.w	r0, [r4, #2300]	; 0x8fc
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 80058ec:	f04f 01c4 	mov.w	r1, #196	; 0xc4
 80058f0:	4852      	ldr	r0, [pc, #328]	; (8005a3c <LoRaMacProcess+0x34c>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 80058f2:	bf18      	it	ne
 80058f4:	f045 0510 	orrne.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 80058f8:	f7fd fad2 	bl	8002ea0 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 80058fc:	f8d4 39c4 	ldr.w	r3, [r4, #2500]	; 0x9c4
 8005900:	4298      	cmp	r0, r3
        nvmData->RegionGroup2.Crc32 = crc;
 8005902:	bf18      	it	ne
 8005904:	f8c4 09c4 	strne.w	r0, [r4, #2500]	; 0x9c4
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8005908:	f04f 0114 	mov.w	r1, #20
 800590c:	484c      	ldr	r0, [pc, #304]	; (8005a40 <LoRaMacProcess+0x350>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800590e:	bf18      	it	ne
 8005910:	f045 0520 	orrne.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8005914:	f7fd fac4 	bl	8002ea0 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 8005918:	f8d4 39dc 	ldr.w	r3, [r4, #2524]	; 0x9dc
 800591c:	4298      	cmp	r0, r3
    if( ( MacCtx.MacCallbacks != NULL ) &&
 800591e:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
        nvmData->ClassB.Crc32 = crc;
 8005922:	bf1c      	itt	ne
 8005924:	f8c4 09dc 	strne.w	r0, [r4, #2524]	; 0x9dc
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8005928:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
    if( ( MacCtx.MacCallbacks != NULL ) &&
 800592c:	2b00      	cmp	r3, #0
 800592e:	f43f af7a 	beq.w	8005826 <LoRaMacProcess+0x136>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8005932:	689b      	ldr	r3, [r3, #8]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8005934:	2b00      	cmp	r3, #0
 8005936:	f43f af76 	beq.w	8005826 <LoRaMacProcess+0x136>
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 800593a:	4628      	mov	r0, r5
 800593c:	4798      	blx	r3
}
 800593e:	e772      	b.n	8005826 <LoRaMacProcess+0x136>
        OpenContinuousRxCWindow( );
 8005940:	f7fe fd90 	bl	8004464 <OpenContinuousRxCWindow>
 8005944:	e76b      	b.n	800581e <LoRaMacProcess+0x12e>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8005946:	200a      	movs	r0, #10
 8005948:	f002 f87c 	bl	8007a44 <LoRaMacConfirmQueueIsCmdActive>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800594c:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8005950:	2800      	cmp	r0, #0
 8005952:	f43f aef3 	beq.w	800573c <LoRaMacProcess+0x4c>
 8005956:	07df      	lsls	r7, r3, #31
 8005958:	f100 814f 	bmi.w	8005bfa <LoRaMacProcess+0x50a>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800595c:	075e      	lsls	r6, r3, #29
 800595e:	f140 8138 	bpl.w	8005bd2 <LoRaMacProcess+0x4e2>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8005962:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8005966:	f023 0302 	bic.w	r3, r3, #2
 800596a:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( MacCtx.MacState == LORAMAC_IDLE )
 800596e:	2b00      	cmp	r3, #0
 8005970:	f47f af2b 	bne.w	80057ca <LoRaMacProcess+0xda>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8005974:	f894 548d 	ldrb.w	r5, [r4, #1165]	; 0x48d
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8005978:	0769      	lsls	r1, r5, #29
 800597a:	f140 812d 	bpl.w	8005bd8 <LoRaMacProcess+0x4e8>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800597e:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
    MacCtx.AllowRequests = requestState;
 8005982:	2201      	movs	r2, #1
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8005984:	f36f 0382 	bfc	r3, #2, #1
 8005988:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    MacCtx.AllowRequests = requestState;
 800598c:	f884 248e 	strb.w	r2, [r4, #1166]	; 0x48e
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8005990:	482c      	ldr	r0, [pc, #176]	; (8005a44 <LoRaMacProcess+0x354>)
 8005992:	f002 f875 	bl	8007a80 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8005996:	f002 f8cb 	bl	8007b30 <LoRaMacConfirmQueueGetCnt>
 800599a:	2800      	cmp	r0, #0
 800599c:	f43f af0d 	beq.w	80057ba <LoRaMacProcess+0xca>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 80059a0:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 80059a4:	f043 0304 	orr.w	r3, r3, #4
 80059a8:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
 80059ac:	e705      	b.n	80057ba <LoRaMacProcess+0xca>
    if( counter >= limit )
 80059ae:	f894 1418 	ldrb.w	r1, [r4, #1048]	; 0x418
 80059b2:	f894 25fc 	ldrb.w	r2, [r4, #1532]	; 0x5fc
 80059b6:	4291      	cmp	r1, r2
 80059b8:	d207      	bcs.n	80059ca <LoRaMacProcess+0x2da>
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80059ba:	0798      	lsls	r0, r3, #30
 80059bc:	f57f aed1 	bpl.w	8005762 <LoRaMacProcess+0x72>
        if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 80059c0:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	f63f aecc 	bhi.w	8005762 <LoRaMacProcess+0x72>
            TimerStop( &MacCtx.TxDelayedTimer );
 80059ca:	481f      	ldr	r0, [pc, #124]	; (8005a48 <LoRaMacProcess+0x358>)
 80059cc:	f006 fe4a 	bl	800c664 <TimerStop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80059d0:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 80059d4:	f023 0320 	bic.w	r3, r3, #32
 80059d8:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 80059dc:	f7fe fb88 	bl	80040f0 <StopRetransmission>
    if( ( Nvm.MacGroup2.Rejoin0UplinksLimit == Nvm.MacGroup1.Rejoin0UplinksCounter ) &&
 80059e0:	f8d4 3740 	ldr.w	r3, [r4, #1856]	; 0x740
 80059e4:	f8d4 25d0 	ldr.w	r2, [r4, #1488]	; 0x5d0
 80059e8:	4293      	cmp	r3, r2
 80059ea:	f47f aec5 	bne.w	8005778 <LoRaMacProcess+0x88>
 80059ee:	f894 273a 	ldrb.w	r2, [r4, #1850]	; 0x73a
 80059f2:	2a00      	cmp	r2, #0
 80059f4:	f43f aec0 	beq.w	8005778 <LoRaMacProcess+0x88>
        ( Nvm.MacGroup2.Version.Fields.Minor >= 1 ) &&
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f43f aebd 	beq.w	8005778 <LoRaMacProcess+0x88>
        Nvm.MacGroup1.Rejoin0UplinksCounter = 0;
 80059fe:	2000      	movs	r0, #0
 8005a00:	f8c4 05d0 	str.w	r0, [r4, #1488]	; 0x5d0
                SendReJoinReq( REJOIN_REQ_0 );
 8005a04:	f7ff f968 	bl	8004cd8 <SendReJoinReq>
 8005a08:	e6b6      	b.n	8005778 <LoRaMacProcess+0x88>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8005a0a:	2106      	movs	r1, #6
 8005a0c:	2005      	movs	r0, #5
 8005a0e:	f7fe fbbb 	bl	8004188 <HandleRadioRxErrorTimeout>
}
 8005a12:	e71a      	b.n	800584a <LoRaMacProcess+0x15a>
 8005a14:	20000560 	.word	0x20000560
 8005a18:	20030a48 	.word	0x20030a48
 8005a1c:	20030e8c 	.word	0x20030e8c
 8005a20:	20030eb4 	.word	0x20030eb4
 8005a24:	20030e68 	.word	0x20030e68
 8005a28:	20030fcc 	.word	0x20030fcc
 8005a2c:	20031004 	.word	0x20031004
 8005a30:	20031024 	.word	0x20031024
 8005a34:	200311a4 	.word	0x200311a4
 8005a38:	20031344 	.word	0x20031344
 8005a3c:	20031348 	.word	0x20031348
 8005a40:	20031410 	.word	0x20031410
 8005a44:	20030ea0 	.word	0x20030ea0
 8005a48:	20030db8 	.word	0x20030db8
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8005a4c:	f894 3724 	ldrb.w	r3, [r4, #1828]	; 0x724
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d002      	beq.n	8005a5a <LoRaMacProcess+0x36a>
        Radio.Sleep( );
 8005a54:	4bc9      	ldr	r3, [pc, #804]	; (8005d7c <LoRaMacProcess+0x68c>)
 8005a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a58:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8005a5a:	f8d4 13b8 	ldr.w	r1, [r4, #952]	; 0x3b8
 8005a5e:	48c8      	ldr	r0, [pc, #800]	; (8005d80 <LoRaMacProcess+0x690>)
 8005a60:	f006 fe3a 	bl	800c6d8 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8005a64:	48c6      	ldr	r0, [pc, #792]	; (8005d80 <LoRaMacProcess+0x690>)
 8005a66:	f006 fd5d 	bl	800c524 <TimerStart>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 8005a6a:	f8d4 13bc 	ldr.w	r1, [r4, #956]	; 0x3bc
 8005a6e:	48c5      	ldr	r0, [pc, #788]	; (8005d84 <LoRaMacProcess+0x694>)
 8005a70:	f006 fe32 	bl	800c6d8 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8005a74:	48c3      	ldr	r0, [pc, #780]	; (8005d84 <LoRaMacProcess+0x694>)
 8005a76:	f006 fd55 	bl	800c524 <TimerStart>
    if( MacCtx.NodeAckRequested == true )
 8005a7a:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f040 80d1 	bne.w	8005c26 <LoRaMacProcess+0x536>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8005a84:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8005a88:	4bbf      	ldr	r3, [pc, #764]	; (8005d88 <LoRaMacProcess+0x698>)
    txDone.Channel = MacCtx.Channel;
 8005a8a:	f894 241b 	ldrb.w	r2, [r4, #1051]	; 0x41b
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f8c4 35c0 	str.w	r3, [r4, #1472]	; 0x5c0
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8005a94:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 8005a98:	4640      	mov	r0, r8
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8005a9a:	931d      	str	r3, [sp, #116]	; 0x74
    txDone.Channel = MacCtx.Channel;
 8005a9c:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8005aa0:	f006 fec8 	bl	800c834 <SysTimeGetMcuTime>
 8005aa4:	f8d4 3734 	ldr.w	r3, [r4, #1844]	; 0x734
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	af04      	add	r7, sp, #16
 8005aac:	e898 0006 	ldmia.w	r8, {r1, r2}
 8005ab0:	4638      	mov	r0, r7
 8005ab2:	f8d4 3730 	ldr.w	r3, [r4, #1840]	; 0x730
 8005ab6:	f006 fe57 	bl	800c768 <SysTimeSub>
 8005aba:	e897 0003 	ldmia.w	r7, {r0, r1}
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8005abe:	f894 373c 	ldrb.w	r3, [r4, #1852]	; 0x73c
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8005ac2:	f8d4 241c 	ldr.w	r2, [r4, #1052]	; 0x41c
 8005ac6:	921e      	str	r2, [sp, #120]	; 0x78
        txDone.Joined  = false;
 8005ac8:	2b00      	cmp	r3, #0
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8005aca:	aa1f      	add	r2, sp, #124	; 0x7c
 8005acc:	e882 0003 	stmia.w	r2, {r0, r1}
        txDone.Joined  = false;
 8005ad0:	bf18      	it	ne
 8005ad2:	2301      	movne	r3, #1
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8005ad4:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
        txDone.Joined  = false;
 8005ad8:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8005adc:	a91c      	add	r1, sp, #112	; 0x70
 8005ade:	f003 f813 	bl	8008b08 <RegionSetBandTxDone>
        if( events.Events.RxDone == 1 )
 8005ae2:	06f7      	lsls	r7, r6, #27
 8005ae4:	f57f aeab 	bpl.w	800583e <LoRaMacProcess+0x14e>
    uint8_t *payload = RxDoneParams.Payload;
 8005ae8:	4fa8      	ldr	r7, [pc, #672]	; (8005d8c <LoRaMacProcess+0x69c>)
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 8005aea:	782a      	ldrb	r2, [r5, #0]
    Radio.Sleep( );
 8005aec:	48a3      	ldr	r0, [pc, #652]	; (8005d7c <LoRaMacProcess+0x68c>)
    int16_t rssi = RxDoneParams.Rssi;
 8005aee:	f9b7 a00a 	ldrsh.w	sl, [r7, #10]
    int8_t snr = RxDoneParams.Snr;
 8005af2:	f997 900c 	ldrsb.w	r9, [r7, #12]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 8005af6:	f894 148c 	ldrb.w	r1, [r4, #1164]	; 0x48c
    MacCtx.McpsIndication.Rssi = rssi;
 8005afa:	f8a4 a42e 	strh.w	sl, [r4, #1070]	; 0x42e
    uint32_t downLinkCounter = 0;
 8005afe:	2300      	movs	r3, #0
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 8005b00:	f363 0200 	bfi	r2, r3, #0, #1
 8005b04:	702a      	strb	r2, [r5, #0]
    uint32_t downLinkCounter = 0;
 8005b06:	930a      	str	r3, [sp, #40]	; 0x28
    uint8_t macCmdPayload[2] = { 0 };
 8005b08:	f8ad 301c 	strh.w	r3, [sp, #28]
    MacCtx.McpsConfirm.AckReceived = false;
 8005b0c:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
    MacCtx.McpsIndication.Multicast = 0;
 8005b10:	f8a4 3422 	strh.w	r3, [r4, #1058]	; 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 8005b14:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 8005b18:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 8005b1c:	f8a4 342c 	strh.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.AckReceived = false;
 8005b20:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8005b24:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8005b28:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 8005b2c:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8005b30:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    MacCtx.McpsIndication.ResponseTimeout = 0;
 8005b34:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    MacCtx.McpsIndication.Snr = snr;
 8005b38:	f884 9430 	strb.w	r9, [r4, #1072]	; 0x430
    Radio.Sleep( );
 8005b3c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 8005b3e:	f884 1431 	strb.w	r1, [r4, #1073]	; 0x431
    uint8_t *payload = RxDoneParams.Payload;
 8005b42:	f8d7 8004 	ldr.w	r8, [r7, #4]
    uint16_t size = RxDoneParams.Size;
 8005b46:	893d      	ldrh	r5, [r7, #8]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8005b48:	f8d4 b660 	ldr.w	fp, [r4, #1632]	; 0x660
    Radio.Sleep( );
 8005b4c:	4798      	blx	r3
    if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 8005b4e:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d07b      	beq.n	8005c4e <LoRaMacProcess+0x55e>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8005b56:	4629      	mov	r1, r5
 8005b58:	4640      	mov	r0, r8
 8005b5a:	f001 fd35 	bl	80075c8 <LoRaMacClassBRxBeacon>
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	d140      	bne.n	8005be4 <LoRaMacProcess+0x4f4>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8005b62:	f894 3724 	ldrb.w	r3, [r4, #1828]	; 0x724
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	f000 81bf 	beq.w	8005eea <LoRaMacProcess+0x7fa>
    macHdr.Value = payload[pktHeaderLen++];
 8005b6c:	f898 a000 	ldrb.w	sl, [r8]
    if( macHdr.Bits.Major != 0 )
 8005b70:	f01a 0f03 	tst.w	sl, #3
 8005b74:	d13b      	bne.n	8005bee <LoRaMacProcess+0x4fe>
    switch( macHdr.Bits.MType )
 8005b76:	ea4f 135a 	mov.w	r3, sl, lsr #5
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	2b06      	cmp	r3, #6
 8005b7e:	d874      	bhi.n	8005c6a <LoRaMacProcess+0x57a>
 8005b80:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005b84:	0073010c 	.word	0x0073010c
 8005b88:	00730090 	.word	0x00730090
 8005b8c:	0073008d 	.word	0x0073008d
 8005b90:	0199      	.short	0x0199
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8005b92:	f894 3724 	ldrb.w	r3, [r4, #1828]	; 0x724
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d022      	beq.n	8005be0 <LoRaMacProcess+0x4f0>
        Radio.Sleep( );
 8005b9a:	4b78      	ldr	r3, [pc, #480]	; (8005d7c <LoRaMacProcess+0x68c>)
 8005b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9e:	4798      	blx	r3
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8005ba0:	f894 3724 	ldrb.w	r3, [r4, #1828]	; 0x724
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d01b      	beq.n	8005be0 <LoRaMacProcess+0x4f0>
        MacCtx.RxSlot = RX_SLOT_NONE;
 8005ba8:	2306      	movs	r3, #6
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8005baa:	2002      	movs	r0, #2
 8005bac:	f884 348c 	strb.w	r3, [r4, #1164]	; 0x48c
 8005bb0:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8005bb4:	f001 ff28 	bl	8007a08 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8005bb8:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 8005bbc:	b113      	cbz	r3, 8005bc4 <LoRaMacProcess+0x4d4>
        MacCtx.RetransmitTimeoutRetry = true;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	f884 3419 	strb.w	r3, [r4, #1049]	; 0x419
    MacCtx.MacFlags.Bits.MacDone = 1;
 8005bc4:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8005bc8:	f043 0310 	orr.w	r3, r3, #16
 8005bcc:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
}
 8005bd0:	e638      	b.n	8005844 <LoRaMacProcess+0x154>
 8005bd2:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8005bd6:	e6ca      	b.n	800596e <LoRaMacProcess+0x27e>
    MacCtx.AllowRequests = requestState;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	f884 348e 	strb.w	r3, [r4, #1166]	; 0x48e
        if( reqEvents.Bits.MlmeReq == 1 )
 8005bde:	e5ec      	b.n	80057ba <LoRaMacProcess+0xca>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8005be0:	2302      	movs	r3, #2
 8005be2:	e7e2      	b.n	8005baa <LoRaMacProcess+0x4ba>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8005be4:	f8a4 a47e 	strh.w	sl, [r4, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8005be8:	f884 9480 	strb.w	r9, [r4, #1152]	; 0x480
        return;
 8005bec:	e627      	b.n	800583e <LoRaMacProcess+0x14e>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8005bf4:	f7fe fa5a 	bl	80040ac <PrepareRxDoneAbort>
                return;
 8005bf8:	e621      	b.n	800583e <LoRaMacProcess+0x14e>
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8005bfa:	075a      	lsls	r2, r3, #29
 8005bfc:	f57f ada6 	bpl.w	800574c <LoRaMacProcess+0x5c>
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8005c00:	2001      	movs	r0, #1
 8005c02:	f001 ff1f 	bl	8007a44 <LoRaMacConfirmQueueIsCmdActive>
 8005c06:	b330      	cbz	r0, 8005c56 <LoRaMacProcess+0x566>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8005c08:	2001      	movs	r0, #1
 8005c0a:	f001 fedf 	bl	80079cc <LoRaMacConfirmQueueGetStatus>
 8005c0e:	b908      	cbnz	r0, 8005c14 <LoRaMacProcess+0x524>
                MacCtx.ChannelsNbTransCounter = 0;
 8005c10:	f884 0418 	strb.w	r0, [r4, #1048]	; 0x418
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8005c14:	f8d4 2340 	ldr.w	r2, [r4, #832]	; 0x340
 8005c18:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8005c1c:	f022 0202 	bic.w	r2, r2, #2
 8005c20:	f8c4 2340 	str.w	r2, [r4, #832]	; 0x340
 8005c24:	e58d      	b.n	8005742 <LoRaMacProcess+0x52>
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 8005c26:	2314      	movs	r3, #20
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8005c28:	a912      	add	r1, sp, #72	; 0x48
 8005c2a:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 8005c2e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8005c32:	f002 ff5f 	bl	8008af4 <RegionGetPhyParam>
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8005c36:	f8d4 13bc 	ldr.w	r1, [r4, #956]	; 0x3bc
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8005c3a:	4603      	mov	r3, r0
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8005c3c:	4419      	add	r1, r3
 8005c3e:	4854      	ldr	r0, [pc, #336]	; (8005d90 <LoRaMacProcess+0x6a0>)
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8005c40:	930f      	str	r3, [sp, #60]	; 0x3c
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8005c42:	f006 fd49 	bl	800c6d8 <TimerSetValue>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 8005c46:	4852      	ldr	r0, [pc, #328]	; (8005d90 <LoRaMacProcess+0x6a0>)
 8005c48:	f006 fc6c 	bl	800c524 <TimerStart>
 8005c4c:	e71c      	b.n	8005a88 <LoRaMacProcess+0x398>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8005c4e:	484d      	ldr	r0, [pc, #308]	; (8005d84 <LoRaMacProcess+0x694>)
 8005c50:	f006 fd08 	bl	800c664 <TimerStop>
 8005c54:	e77f      	b.n	8005b56 <LoRaMacProcess+0x466>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 8005c56:	2005      	movs	r0, #5
 8005c58:	f001 fef4 	bl	8007a44 <LoRaMacConfirmQueueIsCmdActive>
 8005c5c:	2800      	cmp	r0, #0
 8005c5e:	d1d9      	bne.n	8005c14 <LoRaMacProcess+0x524>
 8005c60:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8005c64:	f003 0201 	and.w	r2, r3, #1
 8005c68:	e56d      	b.n	8005746 <LoRaMacProcess+0x56>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
            PrepareRxDoneAbort( );
 8005c70:	f7fe fa1c 	bl	80040ac <PrepareRxDoneAbort>
    if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 8005c74:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	f240 8147 	bls.w	8005f0c <LoRaMacProcess+0x81c>
    if( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_CLASS_C )
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d005      	beq.n	8005c8e <LoRaMacProcess+0x59e>
        MacCtx.MacFlags.Bits.MacDone = 1;
 8005c82:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8005c86:	f043 0310 	orr.w	r3, r3, #16
 8005c8a:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8005c8e:	f894 3724 	ldrb.w	r3, [r4, #1828]	; 0x724
        MacCtx.RxSlot = RX_SLOT_NONE;
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	bf18      	it	ne
 8005c96:	2306      	movne	r3, #6
 8005c98:	f884 348c 	strb.w	r3, [r4, #1164]	; 0x48c
 8005c9c:	e5cf      	b.n	800583e <LoRaMacProcess+0x14e>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8005ca4:	f894 3611 	ldrb.w	r3, [r4, #1553]	; 0x611
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8005ca8:	f894 2424 	ldrb.w	r2, [r4, #1060]	; 0x424
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8005cac:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8005cb0:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8005cb4:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8005cb8:	230d      	movs	r3, #13
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8005cba:	a90b      	add	r1, sp, #44	; 0x2c
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8005cbc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8005cc0:	f002 ff18 	bl	8008af4 <RegionGetPhyParam>
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8005cc4:	f1a5 030d 	sub.w	r3, r5, #13
 8005cc8:	b21b      	sxth	r3, r3
 8005cca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005cce:	b202      	sxth	r2, r0
 8005cd0:	4293      	cmp	r3, r2
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8005cd2:	9009      	str	r0, [sp, #36]	; 0x24
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8005cd4:	dc8b      	bgt.n	8005bee <LoRaMacProcess+0x4fe>
 8005cd6:	2d0b      	cmp	r5, #11
 8005cd8:	d989      	bls.n	8005bee <LoRaMacProcess+0x4fe>
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8005cda:	4a2e      	ldr	r2, [pc, #184]	; (8005d94 <LoRaMacProcess+0x6a4>)
            macMsgData.BufSize = size;
 8005cdc:	f88d 5074 	strb.w	r5, [sp, #116]	; 0x74
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8005ce0:	23ff      	movs	r3, #255	; 0xff
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8005ce2:	a81c      	add	r0, sp, #112	; 0x70
            macMsgData.Buffer = payload;
 8005ce4:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8005ce8:	9225      	str	r2, [sp, #148]	; 0x94
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8005cea:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8005cee:	f002 fd7b 	bl	80087e8 <LoRaMacParserData>
 8005cf2:	4605      	mov	r5, r0
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	f47f af7a 	bne.w	8005bee <LoRaMacProcess+0x4fe>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8005cfa:	f894 3724 	ldrb.w	r3, [r4, #1828]	; 0x724
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	f000 8224 	beq.w	800614c <LoRaMacProcess+0xa5c>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8005d04:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005d06:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8005d0a:	a912      	add	r1, sp, #72	; 0x48
 8005d0c:	a81c      	add	r0, sp, #112	; 0x70
 8005d0e:	f7ff fcc5 	bl	800569c <DetermineFrameType>
 8005d12:	4605      	mov	r5, r0
 8005d14:	2800      	cmp	r0, #0
 8005d16:	f47f af6a 	bne.w	8005bee <LoRaMacProcess+0x4fe>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8005d1a:	981e      	ldr	r0, [sp, #120]	; 0x78
 8005d1c:	4a1e      	ldr	r2, [pc, #120]	; (8005d98 <LoRaMacProcess+0x6a8>)
            downLinkCounter = 0;
 8005d1e:	950a      	str	r5, [sp, #40]	; 0x28
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8005d20:	4629      	mov	r1, r5
 8005d22:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 8005d26:	4283      	cmp	r3, r0
 8005d28:	f000 810f 	beq.w	8005f4a <LoRaMacProcess+0x85a>
 8005d2c:	3101      	adds	r1, #1
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8005d2e:	2904      	cmp	r1, #4
 8005d30:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8005d34:	d1f5      	bne.n	8005d22 <LoRaMacProcess+0x632>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 8005d36:	f894 873a 	ldrb.w	r8, [r4, #1850]	; 0x73a
 8005d3a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
            if( lrWanVersion.Fields.Minor == 1 )
 8005d3e:	f1b8 0f01 	cmp.w	r8, #1
 8005d42:	f000 829b 	beq.w	800627c <LoRaMacProcess+0xb8c>
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8005d46:	465b      	mov	r3, fp
                *fCntID = FCNT_DOWN;
 8005d48:	f04f 0803 	mov.w	r8, #3
 8005d4c:	468b      	mov	fp, r1
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 8005d4e:	f8bd 107e 	ldrh.w	r1, [sp, #126]	; 0x7e
 8005d52:	9303      	str	r3, [sp, #12]
 8005d54:	aa0a      	add	r2, sp, #40	; 0x28
 8005d56:	4640      	mov	r0, r8
 8005d58:	f002 f906 	bl	8007f68 <LoRaMacCryptoGetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8005d5c:	9b03      	ldr	r3, [sp, #12]
 8005d5e:	2800      	cmp	r0, #0
 8005d60:	f000 815d 	beq.w	800601e <LoRaMacProcess+0x92e>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8005d64:	2807      	cmp	r0, #7
 8005d66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d68:	f000 8253 	beq.w	8006212 <LoRaMacProcess+0xb22>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8005d72:	f8c4 2434 	str.w	r2, [r4, #1076]	; 0x434
                PrepareRxDoneAbort( );
 8005d76:	f7fe f999 	bl	80040ac <PrepareRxDoneAbort>
                return;
 8005d7a:	e560      	b.n	800583e <LoRaMacProcess+0x14e>
 8005d7c:	08015848 	.word	0x08015848
 8005d80:	20030dd0 	.word	0x20030dd0
 8005d84:	20030de8 	.word	0x20030de8
 8005d88:	20000a64 	.word	0x20000a64
 8005d8c:	20000a68 	.word	0x20000a68
 8005d90:	20030e48 	.word	0x20030e48
 8005d94:	20030c80 	.word	0x20030c80
 8005d98:	20030fcc 	.word	0x20030fcc
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8005d9c:	2d10      	cmp	r5, #16
 8005d9e:	f67f af26 	bls.w	8005bee <LoRaMacProcess+0x4fe>
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
 8005da2:	f894 373c 	ldrb.w	r3, [r4, #1852]	; 0x73c
            macMsgJoinAccept.Buffer = payload;
 8005da6:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
            macMsgJoinAccept.BufSize = size;
 8005daa:	b2ed      	uxtb	r5, r5
 8005dac:	f88d 504c 	strb.w	r5, [sp, #76]	; 0x4c
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
 8005db0:	b123      	cbz	r3, 8005dbc <LoRaMacProcess+0x6cc>
 8005db2:	f894 3754 	ldrb.w	r3, [r4, #1876]	; 0x754
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f43f af19 	beq.w	8005bee <LoRaMacProcess+0x4fe>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 8005dbc:	f004 fa70 	bl	800a2a0 <SecureElementGetJoinEui>
 8005dc0:	aa12      	add	r2, sp, #72	; 0x48
 8005dc2:	4601      	mov	r1, r0
 8005dc4:	20ff      	movs	r0, #255	; 0xff
 8005dc6:	f002 fbe3 	bl	8008590 <LoRaMacCryptoHandleJoinAccept>
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8005dca:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8005dce:	f894 2611 	ldrb.w	r2, [r4, #1553]	; 0x611
 8005dd2:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 8005dd6:	4607      	mov	r7, r0
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8005dd8:	f3c3 0303 	ubfx	r3, r3, #0, #4
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 8005ddc:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8005de0:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 8005de4:	2207      	movs	r2, #7
 8005de6:	a91c      	add	r1, sp, #112	; 0x70
 8005de8:	f002 fe9a 	bl	8008b20 <RegionVerify>
            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 8005dec:	2f00      	cmp	r7, #0
 8005dee:	f040 8102 	bne.w	8005ff6 <LoRaMacProcess+0x906>
 8005df2:	2800      	cmp	r0, #0
 8005df4:	f000 80ff 	beq.w	8005ff6 <LoRaMacProcess+0x906>
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8005df8:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8005dfc:	f89d 0052 	ldrb.w	r0, [sp, #82]	; 0x52
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8005e00:	f89d 1051 	ldrb.w	r1, [sp, #81]	; 0x51
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8005e04:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8005e08:	041b      	lsls	r3, r3, #16
 8005e0a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005e0e:	430b      	orrs	r3, r1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8005e10:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8005e14:	f8c4 365c 	str.w	r3, [r4, #1628]	; 0x65c
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8005e18:	f3c2 1002 	ubfx	r0, r2, #4, #3
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8005e1c:	f3c2 0303 	ubfx	r3, r2, #0, #4
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8005e20:	9a15      	ldr	r2, [sp, #84]	; 0x54
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8005e22:	f884 05fd 	strb.w	r0, [r4, #1533]	; 0x5fd
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8005e26:	f884 3604 	strb.w	r3, [r4, #1540]	; 0x604
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8005e2a:	f884 360c 	strb.w	r3, [r4, #1548]	; 0x60c
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8005e2e:	f8c4 2660 	str.w	r2, [r4, #1632]	; 0x660
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8005e32:	2900      	cmp	r1, #0
 8005e34:	f000 81a0 	beq.w	8006178 <LoRaMacProcess+0xa88>
 8005e38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e3c:	fb03 f301 	mul.w	r3, r3, r1
 8005e40:	f503 717a 	add.w	r1, r3, #1000	; 0x3e8
                if( macMsgJoinAccept.DLSettings.Bits.OptNeg == 0 )
 8005e44:	f99d 2058 	ldrsb.w	r2, [sp, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8005e48:	f8c4 35ec 	str.w	r3, [r4, #1516]	; 0x5ec
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8005e4c:	2a00      	cmp	r2, #0
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8005e4e:	f10d 005a 	add.w	r0, sp, #90	; 0x5a
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8005e52:	4bcc      	ldr	r3, [pc, #816]	; (8006184 <LoRaMacProcess+0xa94>)
                applyCFList.JoinChannel = MacCtx.Channel;
 8005e54:	f894 241b 	ldrb.w	r2, [r4, #1051]	; 0x41b
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8005e58:	f8c4 15f0 	str.w	r1, [r4, #1520]	; 0x5f0
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8005e5c:	bfb8      	it	lt
 8005e5e:	f04f 7380 	movlt.w	r3, #16777216	; 0x1000000
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8005e62:	9010      	str	r0, [sp, #64]	; 0x40
                applyCFList.Size = size - 17;
 8005e64:	3d11      	subs	r5, #17
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8005e66:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 8005e6a:	f8c4 3738 	str.w	r3, [r4, #1848]	; 0x738
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 8005e6e:	2701      	movs	r7, #1
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8005e70:	a90f      	add	r1, sp, #60	; 0x3c
                applyCFList.JoinChannel = MacCtx.Channel;
 8005e72:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
                applyCFList.Size = size - 17;
 8005e76:	f88d 5044 	strb.w	r5, [sp, #68]	; 0x44
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 8005e7a:	f884 75fc 	strb.w	r7, [r4, #1532]	; 0x5fc
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8005e7e:	f002 fe59 	bl	8008b34 <RegionApplyCFList>
                if( Nvm.MacGroup2.Version.Fields.Minor >= 1 )
 8005e82:	f894 373a 	ldrb.w	r3, [r4, #1850]	; 0x73a
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8005e86:	2202      	movs	r2, #2
 8005e88:	f884 273c 	strb.w	r2, [r4, #1852]	; 0x73c
                if( Nvm.MacGroup2.Version.Fields.Minor >= 1 )
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f040 819f 	bne.w	80061d0 <LoRaMacProcess+0xae0>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8005e92:	2001      	movs	r0, #1
 8005e94:	f001 fdd6 	bl	8007a44 <LoRaMacConfirmQueueIsCmdActive>
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	f040 8194 	bne.w	80061c6 <LoRaMacProcess+0xad6>
                if( Nvm.MacGroup2.IsRejoinAcceptPending == true )
 8005e9e:	f894 3754 	ldrb.w	r3, [r4, #1876]	; 0x754
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f43f aee6 	beq.w	8005c74 <LoRaMacProcess+0x584>
                    Nvm.MacGroup2.IsRejoinAcceptPending = false;
 8005ea8:	2300      	movs	r3, #0
                    TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
 8005eaa:	48b7      	ldr	r0, [pc, #732]	; (8006188 <LoRaMacProcess+0xa98>)
                    Nvm.MacGroup2.IsRejoinAcceptPending = false;
 8005eac:	f884 3754 	strb.w	r3, [r4, #1876]	; 0x754
                    TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
 8005eb0:	f006 fbd8 	bl	800c664 <TimerStop>
 8005eb4:	e6de      	b.n	8005c74 <LoRaMacProcess+0x584>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8005eb6:	4fb5      	ldr	r7, [pc, #724]	; (800618c <LoRaMacProcess+0xa9c>)
 8005eb8:	3d01      	subs	r5, #1
 8005eba:	b2aa      	uxth	r2, r5
 8005ebc:	f108 0101 	add.w	r1, r8, #1
 8005ec0:	4638      	mov	r0, r7
 8005ec2:	f7fc ffc3 	bl	8002e4c <memcpy1>
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8005ec6:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8005eca:	f8c4 7428 	str.w	r7, [r4, #1064]	; 0x428
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8005ece:	f043 0302 	orr.w	r3, r3, #2
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8005ed2:	2203      	movs	r2, #3
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8005ed4:	f884 542c 	strb.w	r5, [r4, #1068]	; 0x42c
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8005ed8:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8005edc:	f8a4 2420 	strh.w	r2, [r4, #1056]	; 0x420
            break;
 8005ee0:	e6c8      	b.n	8005c74 <LoRaMacProcess+0x584>
    MacCtx.AllowRequests = requestState;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	f884 348e 	strb.w	r3, [r4, #1166]	; 0x48e
        if( reqEvents.Bits.McpsReq == 1 )
 8005ee8:	e45f      	b.n	80057aa <LoRaMacProcess+0xba>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8005eea:	9003      	str	r0, [sp, #12]
 8005eec:	f001 fb70 	bl	80075d0 <LoRaMacClassBIsPingExpected>
 8005ef0:	4682      	mov	sl, r0
 8005ef2:	b1d8      	cbz	r0, 8005f2c <LoRaMacProcess+0x83c>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8005ef4:	9a03      	ldr	r2, [sp, #12]
 8005ef6:	4610      	mov	r0, r2
 8005ef8:	f001 fb5a 	bl	80075b0 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8005efc:	9a03      	ldr	r2, [sp, #12]
 8005efe:	4610      	mov	r0, r2
 8005f00:	f001 fb5e 	bl	80075c0 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8005f04:	2304      	movs	r3, #4
 8005f06:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
 8005f0a:	e62f      	b.n	8005b6c <LoRaMacProcess+0x47c>
        if( MacCtx.NodeAckRequested == true )
 8005f0c:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f43f aeb6 	beq.w	8005c82 <LoRaMacProcess+0x592>
            if( MacCtx.McpsConfirm.AckReceived == true )
 8005f16:	f894 3448 	ldrb.w	r3, [r4, #1096]	; 0x448
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f43f aeb1 	beq.w	8005c82 <LoRaMacProcess+0x592>
                OnRetransmitTimeoutTimerEvent( NULL );
 8005f20:	2000      	movs	r0, #0
 8005f22:	f7fe f8ab 	bl	800407c <OnRetransmitTimeoutTimerEvent>
 8005f26:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 8005f2a:	e6a8      	b.n	8005c7e <LoRaMacProcess+0x58e>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8005f2c:	f001 fb52 	bl	80075d4 <LoRaMacClassBIsMulticastExpected>
 8005f30:	2800      	cmp	r0, #0
 8005f32:	f43f ae1b 	beq.w	8005b6c <LoRaMacProcess+0x47c>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8005f36:	4650      	mov	r0, sl
 8005f38:	f001 fb3c 	bl	80075b4 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8005f3c:	4650      	mov	r0, sl
 8005f3e:	f001 fb41 	bl	80075c4 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8005f42:	2305      	movs	r3, #5
 8005f44:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
 8005f48:	e610      	b.n	8005b6c <LoRaMacProcess+0x47c>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8005f4a:	f892 c0e1 	ldrb.w	ip, [r2, #225]	; 0xe1
 8005f4e:	f1bc 0f00 	cmp.w	ip, #0
 8005f52:	f43f aeeb 	beq.w	8005d2c <LoRaMacProcess+0x63c>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8005f56:	f04f 0b30 	mov.w	fp, #48	; 0x30
 8005f5a:	fb0b 4b01 	mla	fp, fp, r1, r4
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8005f5e:	f894 1724 	ldrb.w	r1, [r4, #1828]	; 0x724
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8005f62:	f8db 2688 	ldr.w	r2, [fp, #1672]	; 0x688
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8005f66:	f89b b666 	ldrb.w	fp, [fp, #1638]	; 0x666
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8005f6a:	6812      	ldr	r2, [r2, #0]
 8005f6c:	920a      	str	r2, [sp, #40]	; 0x28
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8005f6e:	2902      	cmp	r1, #2
 8005f70:	d102      	bne.n	8005f78 <LoRaMacProcess+0x888>
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8005f72:	2103      	movs	r1, #3
 8005f74:	f884 1431 	strb.w	r1, [r4, #1073]	; 0x431
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8005f78:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 8005f7c:	f1b8 0f03 	cmp.w	r8, #3
 8005f80:	f47f ae35 	bne.w	8005bee <LoRaMacProcess+0x4fe>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8005f84:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
 8005f88:	f011 0f60 	tst.w	r1, #96	; 0x60
 8005f8c:	f47f ae2f 	bne.w	8005bee <LoRaMacProcess+0x4fe>
    switch( addrID )
 8005f90:	f1bb 0f04 	cmp.w	fp, #4
 8005f94:	f63f aeea 	bhi.w	8005d6c <LoRaMacProcess+0x67c>
 8005f98:	e8df f00b 	tbb	[pc, fp]
 8005f9c:	0b0f0307 	.word	0x0b0f0307
 8005fa0:	13          	.byte	0x13
 8005fa1:	00          	.byte	0x00
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8005fa2:	465d      	mov	r5, fp
            *fCntID = MC_FCNT_DOWN_1;
 8005fa4:	f04f 0805 	mov.w	r8, #5
 8005fa8:	e6d1      	b.n	8005d4e <LoRaMacProcess+0x65e>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8005faa:	2501      	movs	r5, #1
 8005fac:	f04f 0804 	mov.w	r8, #4
 8005fb0:	e6cd      	b.n	8005d4e <LoRaMacProcess+0x65e>
            break;
 8005fb2:	2501      	movs	r5, #1
            *fCntID = MC_FCNT_DOWN_3;
 8005fb4:	f04f 0807 	mov.w	r8, #7
            break;
 8005fb8:	e6c9      	b.n	8005d4e <LoRaMacProcess+0x65e>
            break;
 8005fba:	2501      	movs	r5, #1
            *fCntID = MC_FCNT_DOWN_2;
 8005fbc:	f04f 0806 	mov.w	r8, #6
            break;
 8005fc0:	e6c5      	b.n	8005d4e <LoRaMacProcess+0x65e>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 8005fc2:	f894 573a 	ldrb.w	r5, [r4, #1850]	; 0x73a
            if( lrWanVersion.Fields.Minor == 1 )
 8005fc6:	2d01      	cmp	r5, #1
 8005fc8:	f000 8163 	beq.w	8006292 <LoRaMacProcess+0xba2>
 8005fcc:	2501      	movs	r5, #1
 8005fce:	e6be      	b.n	8005d4e <LoRaMacProcess+0x65e>
            if( MacCtx.RetransmitTimeoutRetry == true )
 8005fd0:	f894 2419 	ldrb.w	r2, [r4, #1049]	; 0x419
 8005fd4:	b1d2      	cbz	r2, 800600c <LoRaMacProcess+0x91c>
    if( counter >= limit )
 8005fd6:	f894 1418 	ldrb.w	r1, [r4, #1048]	; 0x418
 8005fda:	f894 25fc 	ldrb.w	r2, [r4, #1532]	; 0x5fc
 8005fde:	4291      	cmp	r1, r2
 8005fe0:	f4bf acf3 	bcs.w	80059ca <LoRaMacProcess+0x2da>
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8005fe4:	0799      	lsls	r1, r3, #30
 8005fe6:	f57f abbc 	bpl.w	8005762 <LoRaMacProcess+0x72>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8005fea:	f894 3448 	ldrb.w	r3, [r4, #1096]	; 0x448
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f43f abb7 	beq.w	8005762 <LoRaMacProcess+0x72>
 8005ff4:	e4e9      	b.n	80059ca <LoRaMacProcess+0x2da>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8005ff6:	2001      	movs	r0, #1
 8005ff8:	f001 fd24 	bl	8007a44 <LoRaMacConfirmQueueIsCmdActive>
 8005ffc:	2800      	cmp	r0, #0
 8005ffe:	f43f ae39 	beq.w	8005c74 <LoRaMacProcess+0x584>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8006002:	2101      	movs	r1, #1
 8006004:	2007      	movs	r0, #7
 8006006:	f001 fcc3 	bl	8007990 <LoRaMacConfirmQueueSetStatus>
 800600a:	e633      	b.n	8005c74 <LoRaMacProcess+0x584>
    if( MacCtx.MacState == LORAMAC_IDLE )
 800600c:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8006010:	2b00      	cmp	r3, #0
 8006012:	f47f abda 	bne.w	80057ca <LoRaMacProcess+0xda>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8006016:	f894 548d 	ldrb.w	r5, [r4, #1165]	; 0x48d
 800601a:	f7ff bbb5 	b.w	8005788 <LoRaMacProcess+0x98>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800601e:	aa1c      	add	r2, sp, #112	; 0x70
 8006020:	9200      	str	r2, [sp, #0]
 8006022:	4619      	mov	r1, r3
 8006024:	4642      	mov	r2, r8
 8006026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006028:	4658      	mov	r0, fp
 800602a:	f002 f9c3 	bl	80083b4 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800602e:	2800      	cmp	r0, #0
 8006030:	f040 80f1 	bne.w	8006216 <LoRaMacProcess+0xb26>
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8006034:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 8006038:	f894 2431 	ldrb.w	r2, [r4, #1073]	; 0x431
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800603c:	f884 0421 	strb.w	r0, [r4, #1057]	; 0x421
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8006040:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006044:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8006048:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800604c:	2a01      	cmp	r2, #1
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800604e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            MacCtx.McpsIndication.Multicast = multicast;
 8006050:	f884 5422 	strb.w	r5, [r4, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 8006054:	f8c4 0428 	str.w	r0, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 8006058:	f884 042c 	strb.w	r0, [r4, #1068]	; 0x42c
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800605c:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8006060:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 8006064:	d804      	bhi.n	8006070 <LoRaMacProcess+0x980>
                Nvm.MacGroup2.DownlinkReceived = true;
 8006066:	2301      	movs	r3, #1
                Nvm.MacGroup1.AdrAckCounter = 0;
 8006068:	f8c4 05bc 	str.w	r0, [r4, #1468]	; 0x5bc
                Nvm.MacGroup2.DownlinkReceived = true;
 800606c:	f884 372a 	strb.w	r3, [r4, #1834]	; 0x72a
            if( multicast == 1 )
 8006070:	2d01      	cmp	r5, #1
 8006072:	f000 80fb 	beq.w	800626c <LoRaMacProcess+0xb7c>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8006076:	f00a 0ae0 	and.w	sl, sl, #224	; 0xe0
 800607a:	f1ba 0fa0 	cmp.w	sl, #160	; 0xa0
 800607e:	f000 8087 	beq.w	8006190 <LoRaMacProcess+0xaa0>
                    Nvm.MacGroup1.SrvAckRequested = false;
 8006082:	2300      	movs	r3, #0
 8006084:	f884 35ce 	strb.w	r3, [r4, #1486]	; 0x5ce
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8006088:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
 800608c:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 8006090:	06d8      	lsls	r0, r3, #27
 8006092:	f100 8092 	bmi.w	80061ba <LoRaMacProcess+0xaca>
 8006096:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 800609a:	b113      	cbz	r3, 80060a2 <LoRaMacProcess+0x9b2>
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800609c:	2301      	movs	r3, #1
 800609e:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80060a2:	2a01      	cmp	r2, #1
            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 80060a4:	f894 1444 	ldrb.w	r1, [r4, #1092]	; 0x444
 80060a8:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80060ac:	f240 80bd 	bls.w	800622a <LoRaMacProcess+0xb3a>
            switch( fType )
 80060b0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80060b4:	2b03      	cmp	r3, #3
 80060b6:	f200 80ef 	bhi.w	8006298 <LoRaMacProcess+0xba8>
 80060ba:	e8df f003 	tbb	[pc, r3]
 80060be:	3802      	.short	0x3802
 80060c0:	0c2b      	.short	0x0c2b
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 80060c2:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
 80060c6:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 80060ca:	464a      	mov	r2, r9
 80060cc:	f001 010f 	and.w	r1, r1, #15
 80060d0:	a820      	add	r0, sp, #128	; 0x80
 80060d2:	f7fe ff1f 	bl	8004f14 <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80060d6:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80060da:	9925      	ldr	r1, [sp, #148]	; 0x94
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80060dc:	f89d 2098 	ldrb.w	r2, [sp, #152]	; 0x98
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80060e0:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    MacCtx.McpsIndication.RxData = true;
 80060e4:	2301      	movs	r3, #1
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80060e6:	f8c4 1428 	str.w	r1, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80060ea:	f884 242c 	strb.w	r2, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 80060ee:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
            if( Nvm.MacGroup2.IsRejoinAcceptPending == true )
 80060f2:	f894 3754 	ldrb.w	r3, [r4, #1876]	; 0x754
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f040 80ab 	bne.w	8006252 <LoRaMacProcess+0xb62>
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && (Nvm.MacGroup2.IsCertPortOn == false ) )
 80060fc:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
 8006100:	2be0      	cmp	r3, #224	; 0xe0
 8006102:	f000 809a 	beq.w	800623a <LoRaMacProcess+0xb4a>
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8006106:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 800610a:	f043 0302 	orr.w	r3, r3, #2
 800610e:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
            break;
 8006112:	e5af      	b.n	8005c74 <LoRaMacProcess+0x584>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 8006114:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 8006118:	f89d 1098 	ldrb.w	r1, [sp, #152]	; 0x98
 800611c:	9825      	ldr	r0, [sp, #148]	; 0x94
 800611e:	464a      	mov	r2, r9
 8006120:	f7fe fef8 	bl	8004f14 <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8006124:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
 8006128:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    break;
 800612c:	e7e1      	b.n	80060f2 <LoRaMacProcess+0xa02>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800612e:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
 8006132:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 8006136:	464a      	mov	r2, r9
 8006138:	f001 010f 	and.w	r1, r1, #15
 800613c:	a820      	add	r0, sp, #128	; 0x80
 800613e:	f7fe fee9 	bl	8004f14 <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8006142:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
 8006146:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    break;
 800614a:	e7d2      	b.n	80060f2 <LoRaMacProcess+0xa02>
                if( LoRaMacClassBIsPingExpected( ) == true )
 800614c:	f001 fa40 	bl	80075d0 <LoRaMacClassBIsPingExpected>
 8006150:	4680      	mov	r8, r0
 8006152:	2800      	cmp	r0, #0
 8006154:	d047      	beq.n	80061e6 <LoRaMacProcess+0xaf6>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8006156:	4628      	mov	r0, r5
 8006158:	f001 fa2a 	bl	80075b0 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800615c:	4628      	mov	r0, r5
 800615e:	f001 fa2f 	bl	80075c0 <LoRaMacClassBPingSlotTimerEvent>
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8006162:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
 8006166:	981e      	ldr	r0, [sp, #120]	; 0x78
                    MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8006168:	2304      	movs	r3, #4
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800616a:	f3c1 1100 	ubfx	r1, r1, #4, #1
                    MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800616e:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8006172:	f001 fa4d 	bl	8007610 <LoRaMacClassBSetFPendingBit>
 8006176:	e5c5      	b.n	8005d04 <LoRaMacProcess+0x614>
 8006178:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800617c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006180:	e660      	b.n	8005e44 <LoRaMacProcess+0x754>
 8006182:	bf00      	nop
 8006184:	01000400 	.word	0x01000400
 8006188:	20030f20 	.word	0x20030f20
 800618c:	20030c80 	.word	0x20030c80
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8006190:	f894 373a 	ldrb.w	r3, [r4, #1850]	; 0x73a
                    Nvm.MacGroup1.SrvAckRequested = true;
 8006194:	2101      	movs	r1, #1
 8006196:	f884 15ce 	strb.w	r1, [r4, #1486]	; 0x5ce
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800619a:	b913      	cbnz	r3, 80061a2 <LoRaMacProcess+0xab2>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800619c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800619e:	f8c4 35c8 	str.w	r3, [r4, #1480]	; 0x5c8
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80061a2:	2301      	movs	r3, #1
                    if( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 80061a4:	429a      	cmp	r2, r3
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80061a6:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
                    if( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 80061aa:	d906      	bls.n	80061ba <LoRaMacProcess+0xaca>
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
                        MacCtx.McpsIndication.ResponseTimeout = REGION_COMMON_CLASS_B_C_RESP_TIMEOUT;
 80061b2:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80061b6:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
 80061ba:	f894 3724 	ldrb.w	r3, [r4, #1828]	; 0x724
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f43f af6c 	beq.w	800609c <LoRaMacProcess+0x9ac>
 80061c4:	e767      	b.n	8006096 <LoRaMacProcess+0x9a6>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 80061c6:	2101      	movs	r1, #1
 80061c8:	2000      	movs	r0, #0
 80061ca:	f001 fbe1 	bl	8007990 <LoRaMacConfirmQueueSetStatus>
 80061ce:	e666      	b.n	8005e9e <LoRaMacProcess+0x7ae>
                    Nvm.MacGroup1.RekeyIndUplinksCounter = 0;
 80061d0:	2500      	movs	r5, #0
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
 80061d2:	463a      	mov	r2, r7
 80061d4:	a907      	add	r1, sp, #28
 80061d6:	200b      	movs	r0, #11
                    macCmdPayload[0] = Nvm.MacGroup2.Version.Fields.Minor;
 80061d8:	f88d 301c 	strb.w	r3, [sp, #28]
                    Nvm.MacGroup1.RekeyIndUplinksCounter = 0;
 80061dc:	f8a4 55d6 	strh.w	r5, [r4, #1494]	; 0x5d6
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
 80061e0:	f001 fa28 	bl	8007634 <LoRaMacCommandsAddCmd>
 80061e4:	e655      	b.n	8005e92 <LoRaMacProcess+0x7a2>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80061e6:	f001 f9f5 	bl	80075d4 <LoRaMacClassBIsMulticastExpected>
 80061ea:	2800      	cmp	r0, #0
 80061ec:	f43f ad8a 	beq.w	8005d04 <LoRaMacProcess+0x614>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80061f0:	4640      	mov	r0, r8
 80061f2:	f001 f9df 	bl	80075b4 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80061f6:	4640      	mov	r0, r8
 80061f8:	f001 f9e4 	bl	80075c4 <LoRaMacClassBMulticastSlotTimerEvent>
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 80061fc:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
 8006200:	981e      	ldr	r0, [sp, #120]	; 0x78
                    MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8006202:	2305      	movs	r3, #5
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8006204:	f3c1 1100 	ubfx	r1, r1, #4, #1
                    MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8006208:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800620c:	f001 fa00 	bl	8007610 <LoRaMacClassBSetFPendingBit>
 8006210:	e578      	b.n	8005d04 <LoRaMacProcess+0x614>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8006212:	2308      	movs	r3, #8
 8006214:	e5ab      	b.n	8005d6e <LoRaMacProcess+0x67e>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8006216:	2802      	cmp	r0, #2
 8006218:	bf0c      	ite	eq
 800621a:	230a      	moveq	r3, #10
 800621c:	230b      	movne	r3, #11
 800621e:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8006222:	f7fd ff43 	bl	80040ac <PrepareRxDoneAbort>
                return;
 8006226:	f7ff bb0a 	b.w	800583e <LoRaMacProcess+0x14e>
        if( request == MCPS_CONFIRMED )
 800622a:	2901      	cmp	r1, #1
 800622c:	d102      	bne.n	8006234 <LoRaMacProcess+0xb44>
            if( fCtrl.Bits.Ack == 1 )
 800622e:	0699      	lsls	r1, r3, #26
 8006230:	f57f af3e 	bpl.w	80060b0 <LoRaMacProcess+0x9c0>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8006234:	f001 fac6 	bl	80077c4 <LoRaMacCommandsRemoveStickyAnsCmds>
 8006238:	e73a      	b.n	80060b0 <LoRaMacProcess+0x9c0>
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && (Nvm.MacGroup2.IsCertPortOn == false ) )
 800623a:	f894 272b 	ldrb.w	r2, [r4, #1835]	; 0x72b
 800623e:	2a00      	cmp	r2, #0
 8006240:	f47f af61 	bne.w	8006106 <LoRaMacProcess+0xa16>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 8006244:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 8006248:	f8c4 2428 	str.w	r2, [r4, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 800624c:	f8a4 242c 	strh.w	r2, [r4, #1068]	; 0x42c
 8006250:	e759      	b.n	8006106 <LoRaMacProcess+0xa16>
                Nvm.MacGroup2.IsRejoinAcceptPending = false;
 8006252:	2500      	movs	r5, #0
                TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
 8006254:	4813      	ldr	r0, [pc, #76]	; (80062a4 <LoRaMacProcess+0xbb4>)
                Nvm.MacGroup2.IsRejoinAcceptPending = false;
 8006256:	f884 5754 	strb.w	r5, [r4, #1876]	; 0x754
                TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
 800625a:	f006 fa03 	bl	800c664 <TimerStop>
                if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800625e:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8006262:	075a      	lsls	r2, r3, #29
                    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8006264:	bf48      	it	mi
 8006266:	f884 5459 	strbmi.w	r5, [r4, #1113]	; 0x459
 800626a:	e747      	b.n	80060fc <LoRaMacProcess+0xa0c>
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
 800626c:	f894 35ce 	ldrb.w	r3, [r4, #1486]	; 0x5ce
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8006270:	2102      	movs	r1, #2
 8006272:	f884 1420 	strb.w	r1, [r4, #1056]	; 0x420
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
 8006276:	2b00      	cmp	r3, #0
 8006278:	d19f      	bne.n	80061ba <LoRaMacProcess+0xaca>
 800627a:	e707      	b.n	800608c <LoRaMacProcess+0x99c>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800627c:	b133      	cbz	r3, 800628c <LoRaMacProcess+0xb9c>
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800627e:	2b03      	cmp	r3, #3
 8006280:	bf08      	it	eq
 8006282:	f04f 0802 	moveq.w	r8, #2
 8006286:	465b      	mov	r3, fp
 8006288:	468b      	mov	fp, r1
 800628a:	e560      	b.n	8005d4e <LoRaMacProcess+0x65e>
 800628c:	461d      	mov	r5, r3
 800628e:	465b      	mov	r3, fp
 8006290:	468b      	mov	fp, r1
                    *fCntID = A_FCNT_DOWN;
 8006292:	f04f 0802 	mov.w	r8, #2
 8006296:	e55a      	b.n	8005d4e <LoRaMacProcess+0x65e>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 800629e:	f7fd ff05 	bl	80040ac <PrepareRxDoneAbort>
                    break;
 80062a2:	e726      	b.n	80060f2 <LoRaMacProcess+0xa02>
 80062a4:	20030f20 	.word	0x20030f20

080062a8 <LoRaMacInitialization>:
{
 80062a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ac:	b08b      	sub	sp, #44	; 0x2c
    if( ( primitives == NULL ) ||
 80062ae:	2800      	cmp	r0, #0
 80062b0:	f000 81b0 	beq.w	8006614 <LoRaMacInitialization+0x36c>
 80062b4:	460e      	mov	r6, r1
 80062b6:	2900      	cmp	r1, #0
 80062b8:	f000 81ac 	beq.w	8006614 <LoRaMacInitialization+0x36c>
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80062bc:	6803      	ldr	r3, [r0, #0]
 80062be:	4605      	mov	r5, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f000 81a7 	beq.w	8006614 <LoRaMacInitialization+0x36c>
 80062c6:	6843      	ldr	r3, [r0, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 81a3 	beq.w	8006614 <LoRaMacInitialization+0x36c>
        ( primitives->MacMcpsIndication == NULL ) ||
 80062ce:	6883      	ldr	r3, [r0, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f000 819f 	beq.w	8006614 <LoRaMacInitialization+0x36c>
        ( primitives->MacMlmeConfirm == NULL ) ||
 80062d6:	68c3      	ldr	r3, [r0, #12]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 819b 	beq.w	8006614 <LoRaMacInitialization+0x36c>
    if( RegionIsActive( region ) == false )
 80062de:	4610      	mov	r0, r2
 80062e0:	4691      	mov	r9, r2
 80062e2:	f002 fc01 	bl	8008ae8 <RegionIsActive>
 80062e6:	2800      	cmp	r0, #0
 80062e8:	f000 819e 	beq.w	8006628 <LoRaMacInitialization+0x380>
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 80062ec:	4cd2      	ldr	r4, [pc, #840]	; (8006638 <LoRaMacInitialization+0x390>)
    Radio.Init( &MacCtx.RadioEvents );
 80062ee:	f8df b384 	ldr.w	fp, [pc, #900]	; 8006674 <LoRaMacInitialization+0x3cc>
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 80062f2:	f204 5884 	addw	r8, r4, #1412	; 0x584
    LoRaMacConfirmQueueInit( primitives );
 80062f6:	4628      	mov	r0, r5
 80062f8:	f001 fb28 	bl	800794c <LoRaMacConfirmQueueInit>
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 80062fc:	4640      	mov	r0, r8
 80062fe:	f240 425c 	movw	r2, #1116	; 0x45c
 8006302:	2100      	movs	r1, #0
 8006304:	f7fc fdc2 	bl	8002e8c <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8006308:	4620      	mov	r0, r4
 800630a:	f240 5284 	movw	r2, #1412	; 0x584
 800630e:	2100      	movs	r1, #0
 8006310:	f7fc fdbc 	bl	8002e8c <memset1>
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8006314:	2700      	movs	r7, #0
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8006316:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800631a:	f604 0cfc 	addw	ip, r4, #2300	; 0x8fc
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800631e:	f504 6210 	add.w	r2, r4, #2304	; 0x900
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8006322:	4648      	mov	r0, r9
    params.Bands = &RegionBands;
 8006324:	f504 631e 	add.w	r3, r4, #2528	; 0x9e0
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8006328:	a906      	add	r1, sp, #24
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800632a:	e9cd c206 	strd	ip, r2, [sp, #24]
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800632e:	f8c4 e738 	str.w	lr, [r4, #1848]	; 0x738
    Nvm.MacGroup2.Region = region;
 8006332:	f884 95dc 	strb.w	r9, [r4, #1500]	; 0x5dc
    params.Bands = &RegionBands;
 8006336:	9308      	str	r3, [sp, #32]
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8006338:	f884 7724 	strb.w	r7, [r4, #1828]	; 0x724
    params.Type = INIT_TYPE_DEFAULTS;
 800633c:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8006340:	f002 fbe8 	bl	8008b14 <RegionInitDefaults>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8006344:	230e      	movs	r3, #14
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006346:	a904      	add	r1, sp, #16
 8006348:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800634c:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006350:	f002 fbd0 	bl	8008af4 <RegionGetPhyParam>
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8006354:	1bc3      	subs	r3, r0, r7
 8006356:	bf18      	it	ne
 8006358:	2301      	movne	r3, #1
    getPhy.Attribute = PHY_DEF_TX_POWER;
 800635a:	f04f 0a0a 	mov.w	sl, #10
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800635e:	a904      	add	r1, sp, #16
 8006360:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8006364:	f884 3728 	strb.w	r3, [r4, #1832]	; 0x728
    getPhy.Attribute = PHY_DEF_TX_POWER;
 8006368:	f88d a010 	strb.w	sl, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800636c:	f002 fbc2 	bl	8008af4 <RegionGetPhyParam>
    getPhy.Attribute = PHY_DEF_TX_DR;
 8006370:	f04f 0906 	mov.w	r9, #6
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006374:	4603      	mov	r3, r0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006376:	a904      	add	r1, sp, #16
 8006378:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800637c:	f884 3658 	strb.w	r3, [r4, #1624]	; 0x658
    getPhy.Attribute = PHY_DEF_TX_DR;
 8006380:	f88d 9010 	strb.w	r9, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006384:	f002 fbb6 	bl	8008af4 <RegionGetPhyParam>
 8006388:	4603      	mov	r3, r0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800638a:	a904      	add	r1, sp, #16
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800638c:	f884 3659 	strb.w	r3, [r4, #1625]	; 0x659
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006390:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8006394:	230f      	movs	r3, #15
 8006396:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800639a:	f002 fbab 	bl	8008af4 <RegionGetPhyParam>
 800639e:	4603      	mov	r3, r0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80063a0:	a904      	add	r1, sp, #16
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80063a2:	f8c4 3624 	str.w	r3, [r4, #1572]	; 0x624
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80063a6:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 80063aa:	2310      	movs	r3, #16
 80063ac:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80063b0:	f002 fba0 	bl	8008af4 <RegionGetPhyParam>
 80063b4:	4603      	mov	r3, r0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80063b6:	a904      	add	r1, sp, #16
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 80063b8:	f8c4 3628 	str.w	r3, [r4, #1576]	; 0x628
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80063bc:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 80063c0:	2311      	movs	r3, #17
 80063c2:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80063c6:	f002 fb95 	bl	8008af4 <RegionGetPhyParam>
 80063ca:	4603      	mov	r3, r0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80063cc:	a904      	add	r1, sp, #16
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 80063ce:	f8c4 362c 	str.w	r3, [r4, #1580]	; 0x62c
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80063d2:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 80063d6:	2312      	movs	r3, #18
 80063d8:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80063dc:	f002 fb8a 	bl	8008af4 <RegionGetPhyParam>
 80063e0:	4603      	mov	r3, r0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80063e2:	a904      	add	r1, sp, #16
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 80063e4:	f8c4 3630 	str.w	r3, [r4, #1584]	; 0x630
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80063e8:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80063ec:	2313      	movs	r3, #19
 80063ee:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80063f2:	f002 fb7f 	bl	8008af4 <RegionGetPhyParam>
 80063f6:	4603      	mov	r3, r0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80063f8:	a904      	add	r1, sp, #16
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80063fa:	f8c4 3634 	str.w	r3, [r4, #1588]	; 0x634
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80063fe:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8006402:	2315      	movs	r3, #21
 8006404:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006408:	f002 fb74 	bl	8008af4 <RegionGetPhyParam>
 800640c:	4603      	mov	r3, r0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800640e:	a904      	add	r1, sp, #16
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8006410:	f884 3639 	strb.w	r3, [r4, #1593]	; 0x639
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006414:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8006418:	2316      	movs	r3, #22
 800641a:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800641e:	f002 fb69 	bl	8008af4 <RegionGetPhyParam>
 8006422:	4603      	mov	r3, r0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006424:	a904      	add	r1, sp, #16
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8006426:	f8c4 363c 	str.w	r3, [r4, #1596]	; 0x63c
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800642a:	f8c4 3644 	str.w	r3, [r4, #1604]	; 0x644
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800642e:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
    getPhy.Attribute = PHY_DEF_RX2_DR;
 8006432:	2317      	movs	r3, #23
 8006434:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006438:	f002 fb5c 	bl	8008af4 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800643c:	b2c3      	uxtb	r3, r0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800643e:	a904      	add	r1, sp, #16
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8006440:	f884 3640 	strb.w	r3, [r4, #1600]	; 0x640
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8006444:	f884 3648 	strb.w	r3, [r4, #1608]	; 0x648
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006448:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800644c:	231c      	movs	r3, #28
 800644e:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006452:	f002 fb4f 	bl	8008af4 <RegionGetPhyParam>
 8006456:	4603      	mov	r3, r0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006458:	a904      	add	r1, sp, #16
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800645a:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800645e:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8006462:	231d      	movs	r3, #29
 8006464:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006468:	f002 fb44 	bl	8008af4 <RegionGetPhyParam>
 800646c:	4603      	mov	r3, r0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800646e:	a904      	add	r1, sp, #16
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8006470:	f884 364d 	strb.w	r3, [r4, #1613]	; 0x64d
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006474:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8006478:	231e      	movs	r3, #30
 800647a:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800647e:	f002 fb39 	bl	8008af4 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8006482:	4603      	mov	r3, r0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006484:	a904      	add	r1, sp, #16
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8006486:	f8c8 30cc 	str.w	r3, [r8, #204]	; 0xcc
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800648a:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800648e:	231f      	movs	r3, #31
 8006490:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006494:	f002 fb2e 	bl	8008af4 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8006498:	4603      	mov	r3, r0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800649a:	a904      	add	r1, sp, #16
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800649c:	f8c8 30d0 	str.w	r3, [r8, #208]	; 0xd0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80064a0:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80064a4:	230b      	movs	r3, #11
 80064a6:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80064aa:	f002 fb23 	bl	8008af4 <RegionGetPhyParam>
 80064ae:	4603      	mov	r3, r0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80064b0:	a904      	add	r1, sp, #16
    MacCtx.AdrAckLimit = phyParam.Value;
 80064b2:	f8a4 33fc 	strh.w	r3, [r4, #1020]	; 0x3fc
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80064b6:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 80064ba:	230c      	movs	r3, #12
 80064bc:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80064c0:	f002 fb18 	bl	8008af4 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80064c4:	f8d4 3628 	ldr.w	r3, [r4, #1576]	; 0x628
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 80064c8:	f8d4 2624 	ldr.w	r2, [r4, #1572]	; 0x624
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 80064cc:	f8d4 162c 	ldr.w	r1, [r4, #1580]	; 0x62c
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80064d0:	9003      	str	r0, [sp, #12]
    MacCtx.AdrAckDelay = phyParam.Value;
 80064d2:	f8a4 03fe 	strh.w	r0, [r4, #1022]	; 0x3fe
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 80064d6:	f884 9620 	strb.w	r9, [r4, #1568]	; 0x620
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 80064da:	f8d4 0630 	ldr.w	r0, [r4, #1584]	; 0x630
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 80064de:	f884 95e4 	strb.w	r9, [r4, #1508]	; 0x5e4
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80064e2:	f8c4 35ec 	str.w	r3, [r4, #1516]	; 0x5ec
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 80064e6:	f04f 0901 	mov.w	r9, #1
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 80064ea:	f8d4 3634 	ldr.w	r3, [r4, #1588]	; 0x634
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 80064ee:	f8c4 25e8 	str.w	r2, [r4, #1512]	; 0x5e8
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 80064f2:	f8c4 35f8 	str.w	r3, [r4, #1528]	; 0x5f8
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 80064f6:	f8c4 15f0 	str.w	r1, [r4, #1520]	; 0x5f0
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 80064fa:	f8c4 05f4 	str.w	r0, [r4, #1524]	; 0x5f4
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 80064fe:	f884 9638 	strb.w	r9, [r4, #1592]	; 0x638
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8006502:	f884 95fc 	strb.w	r9, [r4, #1532]	; 0x5fc
    Nvm.MacGroup2.IsCertPortOn = true;
 8006506:	f884 972b 	strb.w	r9, [r4, #1835]	; 0x72b
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800650a:	f8c4 a61c 	str.w	sl, [r4, #1564]	; 0x61c
    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800650e:	f8c4 a5e0 	str.w	sl, [r4, #1504]	; 0x5e0
    ResetMacParameters( );
 8006512:	f7fd ff05 	bl	8004320 <ResetMacParameters>
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8006516:	4949      	ldr	r1, [pc, #292]	; (800663c <LoRaMacInitialization+0x394>)
    MacCtx.MacPrimitives = primitives;
 8006518:	f8c4 5344 	str.w	r5, [r4, #836]	; 0x344
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800651c:	f504 705c 	add.w	r0, r4, #880	; 0x370
    Nvm.MacGroup2.PublicNetwork = true;
 8006520:	f884 9725 	strb.w	r9, [r4, #1829]	; 0x725
    MacCtx.MacCallbacks = callbacks;
 8006524:	f8c4 6348 	str.w	r6, [r4, #840]	; 0x348
    MacCtx.MacState = LORAMAC_STOPPED;
 8006528:	f8c4 9340 	str.w	r9, [r4, #832]	; 0x340
    MacCtx.MacFlags.Value = 0;
 800652c:	f884 748d 	strb.w	r7, [r4, #1165]	; 0x48d
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8006530:	f8c4 75c0 	str.w	r7, [r4, #1472]	; 0x5c0
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8006534:	f8c4 75c4 	str.w	r7, [r4, #1476]	; 0x5c4
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8006538:	f005 ffec 	bl	800c514 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800653c:	4940      	ldr	r1, [pc, #256]	; (8006640 <LoRaMacInitialization+0x398>)
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800653e:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8006678 <LoRaMacInitialization+0x3d0>
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8006542:	4e40      	ldr	r6, [pc, #256]	; (8006644 <LoRaMacInitialization+0x39c>)
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8006544:	f504 7062 	add.w	r0, r4, #904	; 0x388
 8006548:	f005 ffe4 	bl	800c514 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800654c:	493e      	ldr	r1, [pc, #248]	; (8006648 <LoRaMacInitialization+0x3a0>)
 800654e:	f504 7068 	add.w	r0, r4, #928	; 0x3a0
 8006552:	f005 ffdf 	bl	800c514 <TimerInit>
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 8006556:	493d      	ldr	r1, [pc, #244]	; (800664c <LoRaMacInitialization+0x3a4>)
 8006558:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 800655c:	f005 ffda 	bl	800c514 <TimerInit>
    TimerInit( &MacCtx.Rejoin0CycleTimer, OnRejoin0CycleTimerEvent );
 8006560:	493b      	ldr	r1, [pc, #236]	; (8006650 <LoRaMacInitialization+0x3a8>)
 8006562:	f504 6092 	add.w	r0, r4, #1168	; 0x490
 8006566:	f005 ffd5 	bl	800c514 <TimerInit>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
 800656a:	493a      	ldr	r1, [pc, #232]	; (8006654 <LoRaMacInitialization+0x3ac>)
 800656c:	f504 6095 	add.w	r0, r4, #1192	; 0x4a8
 8006570:	f005 ffd0 	bl	800c514 <TimerInit>
    TimerInit( &MacCtx.Rejoin2CycleTimer, OnRejoin2CycleTimerEvent );
 8006574:	4938      	ldr	r1, [pc, #224]	; (8006658 <LoRaMacInitialization+0x3b0>)
 8006576:	f504 6098 	add.w	r0, r4, #1216	; 0x4c0
 800657a:	f005 ffcb 	bl	800c514 <TimerInit>
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800657e:	466d      	mov	r5, sp
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
 8006580:	4936      	ldr	r1, [pc, #216]	; (800665c <LoRaMacInitialization+0x3b4>)
 8006582:	f504 609b 	add.w	r0, r4, #1240	; 0x4d8
 8006586:	f005 ffc5 	bl	800c514 <TimerInit>
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800658a:	4628      	mov	r0, r5
 800658c:	f006 f952 	bl	800c834 <SysTimeGetMcuTime>
    LoRaMacRadioEvents.Value = 0;
 8006590:	4a33      	ldr	r2, [pc, #204]	; (8006660 <LoRaMacInitialization+0x3b8>)
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8006592:	4b34      	ldr	r3, [pc, #208]	; (8006664 <LoRaMacInitialization+0x3bc>)
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8006594:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 800667c <LoRaMacInitialization+0x3d4>
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8006598:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006680 <LoRaMacInitialization+0x3d8>
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800659c:	e895 0003 	ldmia.w	r5, {r0, r1}
    LoRaMacRadioEvents.Value = 0;
 80065a0:	6017      	str	r7, [r2, #0]
    MacCtx.RadioEvents.WifiDone = lr1110_modem_wifi_scan_done;
 80065a2:	4d31      	ldr	r5, [pc, #196]	; (8006668 <LoRaMacInitialization+0x3c0>)
    MacCtx.RadioEvents.GnssDone = my_lr1110_gnss_scan_done;
 80065a4:	4a31      	ldr	r2, [pc, #196]	; (800666c <LoRaMacInitialization+0x3c4>)
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80065a6:	f8c4 334c 	str.w	r3, [r4, #844]	; 0x34c
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 80065aa:	f504 63e6 	add.w	r3, r4, #1840	; 0x730
 80065ae:	e883 0003 	stmia.w	r3, {r0, r1}
    MacCtx.RadioEvents.GnssDone = my_lr1110_gnss_scan_done;
 80065b2:	e9c4 25da 	strd	r2, r5, [r4, #872]	; 0x368
    Radio.Init( &MacCtx.RadioEvents );
 80065b6:	f504 7053 	add.w	r0, r4, #844	; 0x34c
 80065ba:	f8db 3000 	ldr.w	r3, [fp]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 80065be:	f8c4 9354 	str.w	r9, [r4, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 80065c2:	f8c4 e35c 	str.w	lr, [r4, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 80065c6:	f8c4 c350 	str.w	ip, [r4, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 80065ca:	f8c4 6358 	str.w	r6, [r4, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 80065ce:	4798      	blx	r3
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 80065d0:	f204 705c 	addw	r0, r4, #1884	; 0x75c
 80065d4:	f003 fcb0 	bl	8009f38 <SecureElementInit>
 80065d8:	bb08      	cbnz	r0, 800661e <LoRaMacInitialization+0x376>
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 80065da:	4640      	mov	r0, r8
 80065dc:	f001 fc92 	bl	8007f04 <LoRaMacCryptoInit>
 80065e0:	b9e8      	cbnz	r0, 800661e <LoRaMacInitialization+0x376>
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 80065e2:	f001 f819 	bl	8007618 <LoRaMacCommandsInit>
 80065e6:	bb20      	cbnz	r0, 8006632 <LoRaMacInitialization+0x38a>
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80065e8:	4821      	ldr	r0, [pc, #132]	; (8006670 <LoRaMacInitialization+0x3c8>)
 80065ea:	f001 fcff 	bl	8007fec <LoRaMacCryptoSetMulticastReference>
 80065ee:	4605      	mov	r5, r0
 80065f0:	b9a8      	cbnz	r0, 800661e <LoRaMacInitialization+0x376>
    srand1( Radio.Random( ) );
 80065f2:	f8db 3014 	ldr.w	r3, [fp, #20]
 80065f6:	4798      	blx	r3
 80065f8:	f7fc fc02 	bl	8002e00 <srand1>
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80065fc:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 8006600:	f894 0725 	ldrb.w	r0, [r4, #1829]	; 0x725
 8006604:	4798      	blx	r3
    Radio.Sleep( );
 8006606:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
 800660a:	4798      	blx	r3
    MacCtx.AllowRequests = requestState;
 800660c:	2301      	movs	r3, #1
 800660e:	f884 348e 	strb.w	r3, [r4, #1166]	; 0x48e
    return LORAMAC_STATUS_OK;
 8006612:	e000      	b.n	8006616 <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8006614:	2503      	movs	r5, #3
}
 8006616:	4628      	mov	r0, r5
 8006618:	b00b      	add	sp, #44	; 0x2c
 800661a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800661e:	2511      	movs	r5, #17
}
 8006620:	4628      	mov	r0, r5
 8006622:	b00b      	add	sp, #44	; 0x2c
 8006624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8006628:	2509      	movs	r5, #9
}
 800662a:	4628      	mov	r0, r5
 800662c:	b00b      	add	sp, #44	; 0x2c
 800662e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8006632:	2513      	movs	r5, #19
 8006634:	e7ef      	b.n	8006616 <LoRaMacInitialization+0x36e>
 8006636:	bf00      	nop
 8006638:	20030a48 	.word	0x20030a48
 800663c:	08004b65 	.word	0x08004b65
 8006640:	080045fd 	.word	0x080045fd
 8006644:	08004059 	.word	0x08004059
 8006648:	0800463d 	.word	0x0800463d
 800664c:	0800407d 	.word	0x0800407d
 8006650:	08004ecd 	.word	0x08004ecd
 8006654:	08004e85 	.word	0x08004e85
 8006658:	08004e3d 	.word	0x08004e3d
 800665c:	08004df9 	.word	0x08004df9
 8006660:	20000560 	.word	0x20000560
 8006664:	080042d1 	.word	0x080042d1
 8006668:	0800be11 	.word	0x0800be11
 800666c:	0800a2d9 	.word	0x0800a2d9
 8006670:	200310ac 	.word	0x200310ac
 8006674:	08015848 	.word	0x08015848
 8006678:	08004281 	.word	0x08004281
 800667c:	08004035 	.word	0x08004035
 8006680:	08004011 	.word	0x08004011

08006684 <LoRaMacStart>:
    MacCtx.MacState = LORAMAC_IDLE;
 8006684:	4b02      	ldr	r3, [pc, #8]	; (8006690 <LoRaMacStart+0xc>)
 8006686:	2000      	movs	r0, #0
 8006688:	f8c3 0340 	str.w	r0, [r3, #832]	; 0x340
}
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	20030a48 	.word	0x20030a48

08006694 <LoRaMacQueryTxPossible>:
{
 8006694:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8006696:	4c35      	ldr	r4, [pc, #212]	; (800676c <LoRaMacQueryTxPossible+0xd8>)
{
 8006698:	b08f      	sub	sp, #60	; 0x3c
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800669a:	f8d4 75bc 	ldr.w	r7, [r4, #1468]	; 0x5bc
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800669e:	f894 5659 	ldrb.w	r5, [r4, #1625]	; 0x659
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80066a2:	f894 3658 	ldrb.w	r3, [r4, #1624]	; 0x658
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 80066a6:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80066aa:	9704      	str	r7, [sp, #16]
    size_t macCmdsSize = 0;
 80066ac:	f04f 0c00 	mov.w	ip, #0
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80066b0:	f88d 500d 	strb.w	r5, [sp, #13]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80066b4:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 80066b8:	f88d 200f 	strb.w	r2, [sp, #15]
    size_t macCmdsSize = 0;
 80066bc:	f8cd c014 	str.w	ip, [sp, #20]
    if( txInfo == NULL )
 80066c0:	2900      	cmp	r1, #0
 80066c2:	d04d      	beq.n	8006760 <LoRaMacQueryTxPossible+0xcc>
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80066c4:	f8b4 35cc 	ldrh.w	r3, [r4, #1484]	; 0x5cc
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80066c8:	f894 e726 	ldrb.w	lr, [r4, #1830]	; 0x726
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80066cc:	970a      	str	r7, [sp, #40]	; 0x28
 80066ce:	460d      	mov	r5, r1
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 80066d0:	a904      	add	r1, sp, #16
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80066d2:	ba5b      	rev16	r3, r3
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 80066d4:	9100      	str	r1, [sp, #0]
 80066d6:	4606      	mov	r6, r0
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80066d8:	f8d4 13fc 	ldr.w	r1, [r4, #1020]	; 0x3fc
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80066dc:	f894 0610 	ldrb.w	r0, [r4, #1552]	; 0x610
    adrNext.Region = Nvm.MacGroup2.Region;
 80066e0:	f894 75dc 	ldrb.w	r7, [r4, #1500]	; 0x5dc
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 80066e4:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80066e8:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 80066ec:	f10d 020e 	add.w	r2, sp, #14
 80066f0:	f10d 030f 	add.w	r3, sp, #15
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80066f4:	910b      	str	r1, [sp, #44]	; 0x2c
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80066f6:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 80066fa:	f10d 010d 	add.w	r1, sp, #13
 80066fe:	a809      	add	r0, sp, #36	; 0x24
    adrNext.UpdateChanMask = false;
 8006700:	f88d c024 	strb.w	ip, [sp, #36]	; 0x24
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8006704:	f88d e025 	strb.w	lr, [sp, #37]	; 0x25
    adrNext.Region = Nvm.MacGroup2.Region;
 8006708:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 800670c:	f000 fed2 	bl	80074b4 <LoRaMacAdrCalcNext>
    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8006710:	f99d 300d 	ldrsb.w	r3, [sp, #13]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8006714:	f894 2610 	ldrb.w	r2, [r4, #1552]	; 0x610
    getPhy.Datarate = datarate;
 8006718:	f88d 301d 	strb.w	r3, [sp, #29]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800671c:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8006720:	f88d 201e 	strb.w	r2, [sp, #30]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8006724:	230d      	movs	r3, #13
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006726:	a907      	add	r1, sp, #28
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8006728:	f88d 301c 	strb.w	r3, [sp, #28]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800672c:	f002 f9e2 	bl	8008af4 <RegionGetPhyParam>
    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8006730:	7068      	strb	r0, [r5, #1]
    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8006732:	a805      	add	r0, sp, #20
 8006734:	f001 f89c 	bl	8007870 <LoRaMacCommandsGetSizeSerializedCmds>
 8006738:	b9a8      	cbnz	r0, 8006766 <LoRaMacQueryTxPossible+0xd2>
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800673a:	9b05      	ldr	r3, [sp, #20]
 800673c:	2b0f      	cmp	r3, #15
 800673e:	d80a      	bhi.n	8006756 <LoRaMacQueryTxPossible+0xc2>
 8006740:	786a      	ldrb	r2, [r5, #1]
 8006742:	4293      	cmp	r3, r2
 8006744:	d807      	bhi.n	8006756 <LoRaMacQueryTxPossible+0xc2>
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8006746:	441e      	add	r6, r3
           return LORAMAC_STATUS_LENGTH_ERROR;
 8006748:	42b2      	cmp	r2, r6
 800674a:	bf38      	it	cc
 800674c:	2008      	movcc	r0, #8
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	702b      	strb	r3, [r5, #0]
}
 8006752:	b00f      	add	sp, #60	; 0x3c
 8006754:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 8006756:	2300      	movs	r3, #0
        return LORAMAC_STATUS_LENGTH_ERROR;
 8006758:	2008      	movs	r0, #8
        txInfo->MaxPossibleApplicationDataSize = 0;
 800675a:	702b      	strb	r3, [r5, #0]
}
 800675c:	b00f      	add	sp, #60	; 0x3c
 800675e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8006760:	2003      	movs	r0, #3
}
 8006762:	b00f      	add	sp, #60	; 0x3c
 8006764:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8006766:	2013      	movs	r0, #19
}
 8006768:	b00f      	add	sp, #60	; 0x3c
 800676a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800676c:	20030a48 	.word	0x20030a48

08006770 <LoRaMacMibGetRequestConfirm>:
    if( mibGet == NULL )
 8006770:	2800      	cmp	r0, #0
 8006772:	d04f      	beq.n	8006814 <LoRaMacMibGetRequestConfirm+0xa4>
{
 8006774:	b510      	push	{r4, lr}
    switch( mibGet->Type )
 8006776:	7803      	ldrb	r3, [r0, #0]
{
 8006778:	b084      	sub	sp, #16
 800677a:	4604      	mov	r4, r0
    switch( mibGet->Type )
 800677c:	2b47      	cmp	r3, #71	; 0x47
 800677e:	d84c      	bhi.n	800681a <LoRaMacMibGetRequestConfirm+0xaa>
 8006780:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006784:	01330139 	.word	0x01330139
 8006788:	0129012e 	.word	0x0129012e
 800678c:	011e0124 	.word	0x011e0124
 8006790:	01120118 	.word	0x01120118
 8006794:	004b004b 	.word	0x004b004b
 8006798:	004b004b 	.word	0x004b004b
 800679c:	004b004b 	.word	0x004b004b
 80067a0:	004b004b 	.word	0x004b004b
 80067a4:	004b004b 	.word	0x004b004b
 80067a8:	004b004b 	.word	0x004b004b
 80067ac:	004b004b 	.word	0x004b004b
 80067b0:	004b004b 	.word	0x004b004b
 80067b4:	004b004b 	.word	0x004b004b
 80067b8:	004b004b 	.word	0x004b004b
 80067bc:	010c004b 	.word	0x010c004b
 80067c0:	01010109 	.word	0x01010109
 80067c4:	00f100f9 	.word	0x00f100f9
 80067c8:	00e600e9 	.word	0x00e600e9
 80067cc:	00d400da 	.word	0x00d400da
 80067d0:	00c800ce 	.word	0x00c800ce
 80067d4:	00bc00c2 	.word	0x00bc00c2
 80067d8:	00a600b6 	.word	0x00a600b6
 80067dc:	009a00a0 	.word	0x009a00a0
 80067e0:	008e0094 	.word	0x008e0094
 80067e4:	00820088 	.word	0x00820088
 80067e8:	0076007c 	.word	0x0076007c
 80067ec:	004b0072 	.word	0x004b0072
 80067f0:	00630069 	.word	0x00630069
 80067f4:	0057005d 	.word	0x0057005d
 80067f8:	004b004b 	.word	0x004b004b
 80067fc:	004b004b 	.word	0x004b004b
 8006800:	004b004b 	.word	0x004b004b
 8006804:	004b004b 	.word	0x004b004b
 8006808:	004b004b 	.word	0x004b004b
 800680c:	004b004b 	.word	0x004b004b
 8006810:	0051004b 	.word	0x0051004b
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8006814:	2303      	movs	r3, #3
}
 8006816:	4618      	mov	r0, r3
 8006818:	4770      	bx	lr
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800681a:	f000 fee7 	bl	80075ec <LoRaMacClassBMibGetRequestConfirm>
 800681e:	4603      	mov	r3, r0
}
 8006820:	4618      	mov	r0, r3
 8006822:	b004      	add	sp, #16
 8006824:	bd10      	pop	{r4, pc}
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8006826:	4b76      	ldr	r3, [pc, #472]	; (8006a00 <LoRaMacMibGetRequestConfirm+0x290>)
 8006828:	f893 372b 	ldrb.w	r3, [r3, #1835]	; 0x72b
 800682c:	7103      	strb	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800682e:	2300      	movs	r3, #0
            break;
 8006830:	e7f6      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.Rejoin2CycleInSec = Nvm.MacGroup2.Rejoin2CycleInSec;
 8006832:	4b73      	ldr	r3, [pc, #460]	; (8006a00 <LoRaMacMibGetRequestConfirm+0x290>)
 8006834:	f8d3 3750 	ldr.w	r3, [r3, #1872]	; 0x750
 8006838:	6043      	str	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800683a:	2300      	movs	r3, #0
            break;
 800683c:	e7f0      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.Rejoin1CycleInSec = Nvm.MacGroup2.Rejoin1CycleInSec;
 800683e:	4b70      	ldr	r3, [pc, #448]	; (8006a00 <LoRaMacMibGetRequestConfirm+0x290>)
 8006840:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 8006844:	6043      	str	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8006846:	2300      	movs	r3, #0
            break;
 8006848:	e7ea      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.Rejoin0CycleInSec = Nvm.MacGroup2.Rejoin0CycleInSec;
 800684a:	4b6d      	ldr	r3, [pc, #436]	; (8006a00 <LoRaMacMibGetRequestConfirm+0x290>)
 800684c:	f8d3 3748 	ldr.w	r3, [r3, #1864]	; 0x748
 8006850:	6043      	str	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8006852:	2300      	movs	r3, #0
            break;
 8006854:	e7e4      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8006856:	4b6a      	ldr	r3, [pc, #424]	; (8006a00 <LoRaMacMibGetRequestConfirm+0x290>)
 8006858:	f8d3 3738 	ldr.w	r3, [r3, #1848]	; 0x738
 800685c:	6043      	str	r3, [r0, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800685e:	f002 f9f9 	bl	8008c54 <RegionGetVersion>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8006862:	2300      	movs	r3, #0
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8006864:	60a0      	str	r0, [r4, #8]
            break;
 8006866:	e7db      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.Contexts = GetNvmData( );
 8006868:	4b66      	ldr	r3, [pc, #408]	; (8006a04 <LoRaMacMibGetRequestConfirm+0x294>)
 800686a:	6043      	str	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800686c:	2300      	movs	r3, #0
            break;
 800686e:	e7d7      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8006870:	4b64      	ldr	r3, [pc, #400]	; (8006a04 <LoRaMacMibGetRequestConfirm+0x294>)
 8006872:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8006876:	6042      	str	r2, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8006878:	2300      	movs	r3, #0
            break;
 800687a:	e7d1      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800687c:	4b61      	ldr	r3, [pc, #388]	; (8006a04 <LoRaMacMibGetRequestConfirm+0x294>)
 800687e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8006882:	6042      	str	r2, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8006884:	2300      	movs	r3, #0
            break;
 8006886:	e7cb      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8006888:	4b5d      	ldr	r3, [pc, #372]	; (8006a00 <LoRaMacMibGetRequestConfirm+0x290>)
 800688a:	f893 35e4 	ldrb.w	r3, [r3, #1508]	; 0x5e4
 800688e:	7103      	strb	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8006890:	2300      	movs	r3, #0
            break;
 8006892:	e7c5      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8006894:	4b5a      	ldr	r3, [pc, #360]	; (8006a00 <LoRaMacMibGetRequestConfirm+0x290>)
 8006896:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 800689a:	6043      	str	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800689c:	2300      	movs	r3, #0
            break;
 800689e:	e7bf      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80068a0:	4b57      	ldr	r3, [pc, #348]	; (8006a00 <LoRaMacMibGetRequestConfirm+0x290>)
 80068a2:	f893 3658 	ldrb.w	r3, [r3, #1624]	; 0x658
 80068a6:	7103      	strb	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80068a8:	2300      	movs	r3, #0
            break;
 80068aa:	e7b9      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80068ac:	4b54      	ldr	r3, [pc, #336]	; (8006a00 <LoRaMacMibGetRequestConfirm+0x290>)
 80068ae:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80068b2:	7103      	strb	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80068b4:	2300      	movs	r3, #0
            break;
 80068b6:	e7b3      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80068b8:	4b51      	ldr	r3, [pc, #324]	; (8006a00 <LoRaMacMibGetRequestConfirm+0x290>)
 80068ba:	f893 35cd 	ldrb.w	r3, [r3, #1485]	; 0x5cd
 80068be:	7103      	strb	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80068c0:	2300      	movs	r3, #0
            break;
 80068c2:	e7ad      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80068c4:	4b4e      	ldr	r3, [pc, #312]	; (8006a00 <LoRaMacMibGetRequestConfirm+0x290>)
 80068c6:	f893 3659 	ldrb.w	r3, [r3, #1625]	; 0x659
 80068ca:	7103      	strb	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80068cc:	2300      	movs	r3, #0
            break;
 80068ce:	e7a7      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80068d0:	4b4b      	ldr	r3, [pc, #300]	; (8006a00 <LoRaMacMibGetRequestConfirm+0x290>)
 80068d2:	f893 1610 	ldrb.w	r1, [r3, #1552]	; 0x610
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80068d6:	f893 05dc 	ldrb.w	r0, [r3, #1500]	; 0x5dc
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80068da:	f88d 100a 	strb.w	r1, [sp, #10]
            getPhy.Attribute = PHY_MIN_TX_DR;
 80068de:	2202      	movs	r2, #2
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80068e0:	a902      	add	r1, sp, #8
            getPhy.Attribute = PHY_MIN_TX_DR;
 80068e2:	f88d 2008 	strb.w	r2, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80068e6:	f002 f905 	bl	8008af4 <RegionGetPhyParam>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80068ea:	2300      	movs	r3, #0
            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 80068ec:	7120      	strb	r0, [r4, #4]
            break;
 80068ee:	e797      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80068f0:	4b43      	ldr	r3, [pc, #268]	; (8006a00 <LoRaMacMibGetRequestConfirm+0x290>)
 80068f2:	f8d3 35f8 	ldr.w	r3, [r3, #1528]	; 0x5f8
 80068f6:	6043      	str	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80068f8:	2300      	movs	r3, #0
            break;
 80068fa:	e791      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80068fc:	4b40      	ldr	r3, [pc, #256]	; (8006a00 <LoRaMacMibGetRequestConfirm+0x290>)
 80068fe:	f8d3 35f4 	ldr.w	r3, [r3, #1524]	; 0x5f4
 8006902:	6043      	str	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8006904:	2300      	movs	r3, #0
            break;
 8006906:	e78b      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8006908:	4b3d      	ldr	r3, [pc, #244]	; (8006a00 <LoRaMacMibGetRequestConfirm+0x290>)
 800690a:	f8d3 35f0 	ldr.w	r3, [r3, #1520]	; 0x5f0
 800690e:	6043      	str	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8006910:	2300      	movs	r3, #0
            break;
 8006912:	e785      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8006914:	4b3a      	ldr	r3, [pc, #232]	; (8006a00 <LoRaMacMibGetRequestConfirm+0x290>)
 8006916:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 800691a:	6043      	str	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800691c:	2300      	movs	r3, #0
            break;
 800691e:	e77f      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8006920:	4b37      	ldr	r3, [pc, #220]	; (8006a00 <LoRaMacMibGetRequestConfirm+0x290>)
 8006922:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8006926:	6043      	str	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8006928:	2300      	movs	r3, #0
            break;
 800692a:	e779      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800692c:	4b34      	ldr	r3, [pc, #208]	; (8006a00 <LoRaMacMibGetRequestConfirm+0x290>)
 800692e:	f893 35fc 	ldrb.w	r3, [r3, #1532]	; 0x5fc
 8006932:	7103      	strb	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8006934:	2300      	movs	r3, #0
            break;
 8006936:	e773      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006938:	4a31      	ldr	r2, [pc, #196]	; (8006a00 <LoRaMacMibGetRequestConfirm+0x290>)
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800693a:	2319      	movs	r3, #25
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800693c:	f892 05dc 	ldrb.w	r0, [r2, #1500]	; 0x5dc
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8006940:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006944:	a902      	add	r1, sp, #8
 8006946:	f002 f8d5 	bl	8008af4 <RegionGetPhyParam>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800694a:	2300      	movs	r3, #0
            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800694c:	6060      	str	r0, [r4, #4]
            break;
 800694e:	e767      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006950:	4a2b      	ldr	r2, [pc, #172]	; (8006a00 <LoRaMacMibGetRequestConfirm+0x290>)
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8006952:	2318      	movs	r3, #24
 8006954:	e7f2      	b.n	800693c <LoRaMacMibGetRequestConfirm+0x1cc>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8006956:	4b2c      	ldr	r3, [pc, #176]	; (8006a08 <LoRaMacMibGetRequestConfirm+0x298>)
 8006958:	e893 0003 	ldmia.w	r3, {r0, r1}
 800695c:	3404      	adds	r4, #4
 800695e:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8006962:	2300      	movs	r3, #0
            break;
 8006964:	e75c      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8006966:	4b29      	ldr	r3, [pc, #164]	; (8006a0c <LoRaMacMibGetRequestConfirm+0x29c>)
 8006968:	e893 0003 	ldmia.w	r3, {r0, r1}
 800696c:	3404      	adds	r4, #4
 800696e:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8006972:	2300      	movs	r3, #0
            break;
 8006974:	e754      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8006976:	4b26      	ldr	r3, [pc, #152]	; (8006a10 <LoRaMacMibGetRequestConfirm+0x2a0>)
 8006978:	e893 0003 	ldmia.w	r3, {r0, r1}
 800697c:	3404      	adds	r4, #4
 800697e:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8006982:	2300      	movs	r3, #0
            break;
 8006984:	e74c      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8006986:	4b23      	ldr	r3, [pc, #140]	; (8006a14 <LoRaMacMibGetRequestConfirm+0x2a4>)
 8006988:	e893 0003 	ldmia.w	r3, {r0, r1}
 800698c:	3404      	adds	r4, #4
 800698e:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8006992:	2300      	movs	r3, #0
            break;
 8006994:	e744      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006996:	4a1a      	ldr	r2, [pc, #104]	; (8006a00 <LoRaMacMibGetRequestConfirm+0x290>)
            getPhy.Attribute = PHY_CHANNELS;
 8006998:	231b      	movs	r3, #27
 800699a:	e7cf      	b.n	800693c <LoRaMacMibGetRequestConfirm+0x1cc>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800699c:	4b18      	ldr	r3, [pc, #96]	; (8006a00 <LoRaMacMibGetRequestConfirm+0x290>)
 800699e:	f893 3725 	ldrb.w	r3, [r3, #1829]	; 0x725
 80069a2:	7103      	strb	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80069a4:	2300      	movs	r3, #0
            break;
 80069a6:	e73b      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 80069a8:	4b15      	ldr	r3, [pc, #84]	; (8006a00 <LoRaMacMibGetRequestConfirm+0x290>)
 80069aa:	f8d3 3660 	ldr.w	r3, [r3, #1632]	; 0x660
 80069ae:	6043      	str	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80069b0:	2300      	movs	r3, #0
            break;
 80069b2:	e735      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80069b4:	4b12      	ldr	r3, [pc, #72]	; (8006a00 <LoRaMacMibGetRequestConfirm+0x290>)
 80069b6:	f8d3 365c 	ldr.w	r3, [r3, #1628]	; 0x65c
 80069ba:	6043      	str	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80069bc:	2300      	movs	r3, #0
            break;
 80069be:	e72f      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80069c0:	4b0f      	ldr	r3, [pc, #60]	; (8006a00 <LoRaMacMibGetRequestConfirm+0x290>)
 80069c2:	f893 3726 	ldrb.w	r3, [r3, #1830]	; 0x726
 80069c6:	7103      	strb	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80069c8:	2300      	movs	r3, #0
            break;
 80069ca:	e729      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.SePin = SecureElementGetPin( );
 80069cc:	f003 fc7e 	bl	800a2cc <SecureElementGetPin>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80069d0:	2300      	movs	r3, #0
            mibGet->Param.SePin = SecureElementGetPin( );
 80069d2:	6060      	str	r0, [r4, #4]
            break;
 80069d4:	e724      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 80069d6:	f003 fc63 	bl	800a2a0 <SecureElementGetJoinEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80069da:	2300      	movs	r3, #0
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 80069dc:	6060      	str	r0, [r4, #4]
            break;
 80069de:	e71f      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 80069e0:	f003 fc48 	bl	800a274 <SecureElementGetDevEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80069e4:	2300      	movs	r3, #0
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 80069e6:	6060      	str	r0, [r4, #4]
            break;
 80069e8:	e71a      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80069ea:	4b05      	ldr	r3, [pc, #20]	; (8006a00 <LoRaMacMibGetRequestConfirm+0x290>)
 80069ec:	f893 373c 	ldrb.w	r3, [r3, #1852]	; 0x73c
 80069f0:	7103      	strb	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80069f2:	2300      	movs	r3, #0
            break;
 80069f4:	e714      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 80069f6:	4a02      	ldr	r2, [pc, #8]	; (8006a00 <LoRaMacMibGetRequestConfirm+0x290>)
 80069f8:	f892 2724 	ldrb.w	r2, [r2, #1828]	; 0x724
 80069fc:	7102      	strb	r2, [r0, #4]
            break;
 80069fe:	e70f      	b.n	8006820 <LoRaMacMibGetRequestConfirm+0xb0>
 8006a00:	20030a48 	.word	0x20030a48
 8006a04:	20030fcc 	.word	0x20030fcc
 8006a08:	2003108c 	.word	0x2003108c
 8006a0c:	20031050 	.word	0x20031050
 8006a10:	20031084 	.word	0x20031084
 8006a14:	20031048 	.word	0x20031048

08006a18 <LoRaMacMibSetRequestConfirm>:
    if( mibSet == NULL )
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	f000 830c 	beq.w	8007036 <LoRaMacMibSetRequestConfirm+0x61e>
{
 8006a1e:	b570      	push	{r4, r5, r6, lr}
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8006a20:	4daf      	ldr	r5, [pc, #700]	; (8006ce0 <LoRaMacMibSetRequestConfirm+0x2c8>)
 8006a22:	f8d5 3340 	ldr.w	r3, [r5, #832]	; 0x340
 8006a26:	079a      	lsls	r2, r3, #30
{
 8006a28:	b084      	sub	sp, #16
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8006a2a:	d44d      	bmi.n	8006ac8 <LoRaMacMibSetRequestConfirm+0xb0>
 8006a2c:	7802      	ldrb	r2, [r0, #0]
 8006a2e:	4604      	mov	r4, r0
    switch( mibSet->Type )
 8006a30:	2a47      	cmp	r2, #71	; 0x47
 8006a32:	d84c      	bhi.n	8006ace <LoRaMacMibSetRequestConfirm+0xb6>
 8006a34:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006a38:	02f402fb 	.word	0x02f402fb
 8006a3c:	02dd02e4 	.word	0x02dd02e4
 8006a40:	02d202d6 	.word	0x02d202d6
 8006a44:	02ca02ce 	.word	0x02ca02ce
 8006a48:	02b402bf 	.word	0x02b402bf
 8006a4c:	029e02a9 	.word	0x029e02a9
 8006a50:	02880293 	.word	0x02880293
 8006a54:	0272027d 	.word	0x0272027d
 8006a58:	025c0267 	.word	0x025c0267
 8006a5c:	02460251 	.word	0x02460251
 8006a60:	0230023b 	.word	0x0230023b
 8006a64:	021a0225 	.word	0x021a0225
 8006a68:	0204020f 	.word	0x0204020f
 8006a6c:	01ee01f9 	.word	0x01ee01f9
 8006a70:	01db01e2 	.word	0x01db01e2
 8006a74:	01c5004b 	.word	0x01c5004b
 8006a78:	016201af 	.word	0x016201af
 8006a7c:	0130013e 	.word	0x0130013e
 8006a80:	011a0122 	.word	0x011a0122
 8006a84:	01120116 	.word	0x01120116
 8006a88:	010a010e 	.word	0x010a010e
 8006a8c:	004b0106 	.word	0x004b0106
 8006a90:	00e200f6 	.word	0x00e200f6
 8006a94:	01870198 	.word	0x01870198
 8006a98:	00dc01a9 	.word	0x00dc01a9
 8006a9c:	0087008c 	.word	0x0087008c
 8006aa0:	00800091 	.word	0x00800091
 8006aa4:	006e004b 	.word	0x006e004b
 8006aa8:	004b005c 	.word	0x004b005c
 8006aac:	004b004b 	.word	0x004b004b
 8006ab0:	004b004b 	.word	0x004b004b
 8006ab4:	004b004b 	.word	0x004b004b
 8006ab8:	004b004b 	.word	0x004b004b
 8006abc:	004b004b 	.word	0x004b004b
 8006ac0:	004b004b 	.word	0x004b004b
 8006ac4:	0058004b 	.word	0x0058004b
        return LORAMAC_STATUS_BUSY;
 8006ac8:	2001      	movs	r0, #1
}
 8006aca:	b004      	add	sp, #16
 8006acc:	bd70      	pop	{r4, r5, r6, pc}
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8006ace:	f000 fd8f 	bl	80075f0 <LoRaMacMibClassBSetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	d1f9      	bne.n	8006aca <LoRaMacMibSetRequestConfirm+0xb2>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8006ad6:	f895 348d 	ldrb.w	r3, [r5, #1165]	; 0x48d
 8006ada:	2000      	movs	r0, #0
 8006adc:	f043 0320 	orr.w	r3, r3, #32
 8006ae0:	f885 348d 	strb.w	r3, [r5, #1165]	; 0x48d
}
 8006ae4:	b004      	add	sp, #16
 8006ae6:	bd70      	pop	{r4, r5, r6, pc}
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8006ae8:	7903      	ldrb	r3, [r0, #4]
 8006aea:	f885 372b 	strb.w	r3, [r5, #1835]	; 0x72b
    if( status == LORAMAC_STATUS_OK )
 8006aee:	e7f2      	b.n	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
           if( ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin1CycleInSec, &MacCtx.Rejoin1CycleTime ) == true )
 8006af0:	f8d5 374c 	ldr.w	r3, [r5, #1868]	; 0x74c
    if( rejoinCycleTime > 4294967 )
 8006af4:	4a7b      	ldr	r2, [pc, #492]	; (8006ce4 <LoRaMacMibSetRequestConfirm+0x2cc>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d922      	bls.n	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
        *timeInMiliSec = rejoinCycleTime * 1000;
 8006afa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006afe:	fb01 f103 	mul.w	r1, r1, r3
                TimerSetValue( &MacCtx.Rejoin1CycleTimer, MacCtx.Rejoin1CycleTime );
 8006b02:	4879      	ldr	r0, [pc, #484]	; (8006ce8 <LoRaMacMibSetRequestConfirm+0x2d0>)
        *timeInMiliSec = rejoinCycleTime * 1000;
 8006b04:	f8c5 14f4 	str.w	r1, [r5, #1268]	; 0x4f4
                TimerSetValue( &MacCtx.Rejoin1CycleTimer, MacCtx.Rejoin1CycleTime );
 8006b08:	f005 fde6 	bl	800c6d8 <TimerSetValue>
                TimerStart( &MacCtx.Rejoin1CycleTimer );
 8006b0c:	4876      	ldr	r0, [pc, #472]	; (8006ce8 <LoRaMacMibSetRequestConfirm+0x2d0>)
 8006b0e:	f005 fd09 	bl	800c524 <TimerStart>
    if( status == LORAMAC_STATUS_OK )
 8006b12:	e7e0      	b.n	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
            if( ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin0CycleInSec, &MacCtx.Rejoin0CycleTime ) == true )
 8006b14:	f8d5 3748 	ldr.w	r3, [r5, #1864]	; 0x748
    if( rejoinCycleTime > 4294967 )
 8006b18:	4a72      	ldr	r2, [pc, #456]	; (8006ce4 <LoRaMacMibSetRequestConfirm+0x2cc>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d910      	bls.n	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
        *timeInMiliSec = rejoinCycleTime * 1000;
 8006b1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006b22:	fb01 f103 	mul.w	r1, r1, r3
                TimerSetValue( &MacCtx.Rejoin0CycleTimer, MacCtx.Rejoin0CycleTime );
 8006b26:	4871      	ldr	r0, [pc, #452]	; (8006cec <LoRaMacMibSetRequestConfirm+0x2d4>)
        *timeInMiliSec = rejoinCycleTime * 1000;
 8006b28:	f8c5 14f0 	str.w	r1, [r5, #1264]	; 0x4f0
                TimerSetValue( &MacCtx.Rejoin0CycleTimer, MacCtx.Rejoin0CycleTime );
 8006b2c:	f005 fdd4 	bl	800c6d8 <TimerSetValue>
                TimerStart( &MacCtx.Rejoin0CycleTimer );
 8006b30:	486e      	ldr	r0, [pc, #440]	; (8006cec <LoRaMacMibSetRequestConfirm+0x2d4>)
 8006b32:	f005 fcf7 	bl	800c524 <TimerStart>
    if( status == LORAMAC_STATUS_OK )
 8006b36:	e7ce      	b.n	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8006b38:	7983      	ldrb	r3, [r0, #6]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	f240 827d 	bls.w	800703a <LoRaMacMibSetRequestConfirm+0x622>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8006b40:	2003      	movs	r0, #3
}
 8006b42:	b004      	add	sp, #16
 8006b44:	bd70      	pop	{r4, r5, r6, pc}
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8006b46:	4b6a      	ldr	r3, [pc, #424]	; (8006cf0 <LoRaMacMibSetRequestConfirm+0x2d8>)
 8006b48:	6842      	ldr	r2, [r0, #4]
 8006b4a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    if( status == LORAMAC_STATUS_OK )
 8006b4e:	e7c2      	b.n	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8006b50:	4b67      	ldr	r3, [pc, #412]	; (8006cf0 <LoRaMacMibSetRequestConfirm+0x2d8>)
 8006b52:	6842      	ldr	r2, [r0, #4]
 8006b54:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    if( status == LORAMAC_STATUS_OK )
 8006b58:	e7bd      	b.n	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
            if( mibSet->Param.Contexts != 0 )
 8006b5a:	6844      	ldr	r4, [r0, #4]
 8006b5c:	2c00      	cmp	r4, #0
 8006b5e:	d0ef      	beq.n	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d1b1      	bne.n	8006ac8 <LoRaMacMibSetRequestConfirm+0xb0>
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 8006b64:	2134      	movs	r1, #52	; 0x34
 8006b66:	4620      	mov	r0, r4
 8006b68:	f7fc f99a 	bl	8002ea0 <Crc32>
    if( crc == nvm->Crypto.Crc32 )
 8006b6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b6e:	4298      	cmp	r0, r3
 8006b70:	f000 8299 	beq.w	80070a6 <LoRaMacMibSetRequestConfirm+0x68e>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 8006b74:	f104 0638 	add.w	r6, r4, #56	; 0x38
 8006b78:	4630      	mov	r0, r6
 8006b7a:	211c      	movs	r1, #28
 8006b7c:	f7fc f990 	bl	8002ea0 <Crc32>
    if( crc == nvm->MacGroup1.Crc32 )
 8006b80:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006b82:	4298      	cmp	r0, r3
 8006b84:	f000 8289 	beq.w	800709a <LoRaMacMibSetRequestConfirm+0x682>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 8006b88:	f104 0658 	add.w	r6, r4, #88	; 0x58
 8006b8c:	4630      	mov	r0, r6
 8006b8e:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8006b92:	f7fc f985 	bl	8002ea0 <Crc32>
    if( crc == nvm->MacGroup2.Crc32 )
 8006b96:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 8006b9a:	4298      	cmp	r0, r3
 8006b9c:	f000 8264 	beq.w	8007068 <LoRaMacMibSetRequestConfirm+0x650>
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 8006ba0:	f504 76ec 	add.w	r6, r4, #472	; 0x1d8
 8006ba4:	4630      	mov	r0, r6
 8006ba6:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8006baa:	f7fc f979 	bl	8002ea0 <Crc32>
    if( crc == nvm->SecureElement.Crc32 )
 8006bae:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 8006bb2:	4298      	cmp	r0, r3
 8006bb4:	f000 8251 	beq.w	800705a <LoRaMacMibSetRequestConfirm+0x642>
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 8006bb8:	f504 765e 	add.w	r6, r4, #888	; 0x378
 8006bbc:	4630      	mov	r0, r6
 8006bbe:	2100      	movs	r1, #0
 8006bc0:	f7fc f96e 	bl	8002ea0 <Crc32>
    if( crc == nvm->RegionGroup1.Crc32 )
 8006bc4:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8006bc8:	4298      	cmp	r0, r3
 8006bca:	f000 8240 	beq.w	800704e <LoRaMacMibSetRequestConfirm+0x636>
    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 8006bce:	f204 4644 	addw	r6, r4, #1092	; 0x444
 8006bd2:	4630      	mov	r0, r6
 8006bd4:	2114      	movs	r1, #20
 8006bd6:	f7fc f963 	bl	8002ea0 <Crc32>
    if( crc == nvm->ClassB.Crc32 )
 8006bda:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
 8006bde:	4298      	cmp	r0, r3
 8006be0:	f47f af79 	bne.w	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 8006be4:	4843      	ldr	r0, [pc, #268]	; (8006cf4 <LoRaMacMibSetRequestConfirm+0x2dc>)
 8006be6:	4631      	mov	r1, r6
 8006be8:	2218      	movs	r2, #24
 8006bea:	f7fc f92f 	bl	8002e4c <memcpy1>
    if( status == LORAMAC_STATUS_OK )
 8006bee:	e772      	b.n	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8006bf0:	7903      	ldrb	r3, [r0, #4]
 8006bf2:	f885 3620 	strb.w	r3, [r5, #1568]	; 0x620
 8006bf6:	f885 35e4 	strb.w	r3, [r5, #1508]	; 0x5e4
    if( status == LORAMAC_STATUS_OK )
 8006bfa:	e76c      	b.n	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8006bfc:	7902      	ldrb	r2, [r0, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8006bfe:	f895 3610 	ldrb.w	r3, [r5, #1552]	; 0x610
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8006c02:	f88d 2004 	strb.w	r2, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8006c06:	f895 05dc 	ldrb.w	r0, [r5, #1500]	; 0x5dc
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8006c0a:	f88d 3006 	strb.w	r3, [sp, #6]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8006c0e:	2205      	movs	r2, #5
 8006c10:	a901      	add	r1, sp, #4
 8006c12:	f001 ff85 	bl	8008b20 <RegionVerify>
 8006c16:	2800      	cmp	r0, #0
 8006c18:	d092      	beq.n	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8006c1a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006c1e:	f885 35cd 	strb.w	r3, [r5, #1485]	; 0x5cd
    if( status == LORAMAC_STATUS_OK )
 8006c22:	e758      	b.n	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8006c24:	7903      	ldrb	r3, [r0, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8006c26:	f895 05dc 	ldrb.w	r0, [r5, #1500]	; 0x5dc
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8006c2a:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8006c2e:	2206      	movs	r2, #6
 8006c30:	a901      	add	r1, sp, #4
 8006c32:	f001 ff75 	bl	8008b20 <RegionVerify>
 8006c36:	2800      	cmp	r0, #0
 8006c38:	d082      	beq.n	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8006c3a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006c3e:	f885 3659 	strb.w	r3, [r5, #1625]	; 0x659
    if( status == LORAMAC_STATUS_OK )
 8006c42:	e748      	b.n	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8006c44:	6843      	ldr	r3, [r0, #4]
 8006c46:	f8c5 35f8 	str.w	r3, [r5, #1528]	; 0x5f8
    if( status == LORAMAC_STATUS_OK )
 8006c4a:	e744      	b.n	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8006c4c:	6843      	ldr	r3, [r0, #4]
 8006c4e:	f8c5 35f4 	str.w	r3, [r5, #1524]	; 0x5f4
    if( status == LORAMAC_STATUS_OK )
 8006c52:	e740      	b.n	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8006c54:	6843      	ldr	r3, [r0, #4]
 8006c56:	f8c5 35f0 	str.w	r3, [r5, #1520]	; 0x5f0
    if( status == LORAMAC_STATUS_OK )
 8006c5a:	e73c      	b.n	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8006c5c:	6843      	ldr	r3, [r0, #4]
 8006c5e:	f8c5 35ec 	str.w	r3, [r5, #1516]	; 0x5ec
    if( status == LORAMAC_STATUS_OK )
 8006c62:	e738      	b.n	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8006c64:	6843      	ldr	r3, [r0, #4]
 8006c66:	f8c5 35e8 	str.w	r3, [r5, #1512]	; 0x5e8
    if( status == LORAMAC_STATUS_OK )
 8006c6a:	e734      	b.n	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8006c6c:	7903      	ldrb	r3, [r0, #4]
 8006c6e:	1e5a      	subs	r2, r3, #1
 8006c70:	2a0e      	cmp	r2, #14
 8006c72:	f63f af65 	bhi.w	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8006c76:	f885 35fc 	strb.w	r3, [r5, #1532]	; 0x5fc
    if( status == LORAMAC_STATUS_OK )
 8006c7a:	e72c      	b.n	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8006c7c:	6843      	ldr	r3, [r0, #4]
 8006c7e:	9302      	str	r3, [sp, #8]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8006c80:	f895 05dc 	ldrb.w	r0, [r5, #1500]	; 0x5dc
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8006c84:	2301      	movs	r3, #1
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8006c86:	a902      	add	r1, sp, #8
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8006c88:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8006c8c:	f001 ff58 	bl	8008b40 <RegionChanMaskSet>
 8006c90:	2800      	cmp	r0, #0
 8006c92:	f47f af20 	bne.w	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
 8006c96:	e753      	b.n	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8006c98:	6843      	ldr	r3, [r0, #4]
 8006c9a:	9302      	str	r3, [sp, #8]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8006c9c:	f895 05dc 	ldrb.w	r0, [r5, #1500]	; 0x5dc
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8006ca0:	2300      	movs	r3, #0
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8006ca2:	a902      	add	r1, sp, #8
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8006ca4:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8006ca8:	f001 ff4a 	bl	8008b40 <RegionChanMaskSet>
 8006cac:	2800      	cmp	r0, #0
 8006cae:	f47f af12 	bne.w	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
 8006cb2:	e745      	b.n	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8006cb4:	7a02      	ldrb	r2, [r0, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8006cb6:	f895 3611 	ldrb.w	r3, [r5, #1553]	; 0x611
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8006cba:	f88d 2004 	strb.w	r2, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8006cbe:	f895 05dc 	ldrb.w	r0, [r5, #1500]	; 0x5dc
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8006cc2:	f88d 3005 	strb.w	r3, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8006cc6:	2207      	movs	r2, #7
 8006cc8:	a901      	add	r1, sp, #4
 8006cca:	f001 ff29 	bl	8008b20 <RegionVerify>
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	f43f af36 	beq.w	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8006cd4:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8006cd8:	4b07      	ldr	r3, [pc, #28]	; (8006cf8 <LoRaMacMibSetRequestConfirm+0x2e0>)
 8006cda:	e883 0003 	stmia.w	r3, {r0, r1}
    if( status == LORAMAC_STATUS_OK )
 8006cde:	e6fa      	b.n	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
 8006ce0:	20030a48 	.word	0x20030a48
 8006ce4:	00418937 	.word	0x00418937
 8006ce8:	20030ef0 	.word	0x20030ef0
 8006cec:	20030ed8 	.word	0x20030ed8
 8006cf0:	20030fcc 	.word	0x20030fcc
 8006cf4:	20031410 	.word	0x20031410
 8006cf8:	2003108c 	.word	0x2003108c
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8006cfc:	7a02      	ldrb	r2, [r0, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8006cfe:	f895 3611 	ldrb.w	r3, [r5, #1553]	; 0x611
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8006d02:	f88d 2004 	strb.w	r2, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8006d06:	f895 05dc 	ldrb.w	r0, [r5, #1500]	; 0x5dc
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8006d0a:	f88d 3005 	strb.w	r3, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8006d0e:	2207      	movs	r2, #7
 8006d10:	a901      	add	r1, sp, #4
 8006d12:	f001 ff05 	bl	8008b20 <RegionVerify>
 8006d16:	2800      	cmp	r0, #0
 8006d18:	f43f af12 	beq.w	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8006d1c:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8006d20:	f895 2724 	ldrb.w	r2, [r5, #1828]	; 0x724
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8006d24:	4bba      	ldr	r3, [pc, #744]	; (8007010 <LoRaMacMibSetRequestConfirm+0x5f8>)
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8006d26:	2a02      	cmp	r2, #2
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8006d28:	e883 0003 	stmia.w	r3, {r0, r1}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8006d2c:	f47f aed3 	bne.w	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
 8006d30:	f895 373c 	ldrb.w	r3, [r5, #1852]	; 0x73c
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f43f aece 	beq.w	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
                    Radio.Sleep( );
 8006d3a:	4bb6      	ldr	r3, [pc, #728]	; (8007014 <LoRaMacMibSetRequestConfirm+0x5fc>)
 8006d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3e:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 8006d40:	f7fd fb90 	bl	8004464 <OpenContinuousRxCWindow>
    if( status == LORAMAC_STATUS_OK )
 8006d44:	e6c7      	b.n	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8006d46:	7903      	ldrb	r3, [r0, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8006d48:	f895 05dc 	ldrb.w	r0, [r5, #1500]	; 0x5dc
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8006d4c:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8006d50:	220a      	movs	r2, #10
 8006d52:	a901      	add	r1, sp, #4
 8006d54:	f001 fee4 	bl	8008b20 <RegionVerify>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	f43f aef1 	beq.w	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8006d5e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006d62:	f885 3658 	strb.w	r3, [r5, #1624]	; 0x658
    if( status == LORAMAC_STATUS_OK )
 8006d66:	e6b6      	b.n	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8006d68:	7903      	ldrb	r3, [r0, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8006d6a:	f895 05dc 	ldrb.w	r0, [r5, #1500]	; 0x5dc
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8006d6e:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8006d72:	2209      	movs	r2, #9
 8006d74:	a901      	add	r1, sp, #4
 8006d76:	f001 fed3 	bl	8008b20 <RegionVerify>
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	f43f aee0 	beq.w	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8006d80:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006d84:	f885 35cc 	strb.w	r3, [r5, #1484]	; 0x5cc
    if( status == LORAMAC_STATUS_OK )
 8006d88:	e6a5      	b.n	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8006d8a:	6843      	ldr	r3, [r0, #4]
 8006d8c:	f8c5 361c 	str.w	r3, [r5, #1564]	; 0x61c
 8006d90:	f8c5 35e0 	str.w	r3, [r5, #1504]	; 0x5e0
    if( status == LORAMAC_STATUS_OK )
 8006d94:	e69f      	b.n	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8006d96:	7a02      	ldrb	r2, [r0, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8006d98:	f895 3611 	ldrb.w	r3, [r5, #1553]	; 0x611
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8006d9c:	f88d 2004 	strb.w	r2, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8006da0:	f895 05dc 	ldrb.w	r0, [r5, #1500]	; 0x5dc
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8006da4:	f88d 3005 	strb.w	r3, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8006da8:	2207      	movs	r2, #7
 8006daa:	a901      	add	r1, sp, #4
 8006dac:	f001 feb8 	bl	8008b20 <RegionVerify>
 8006db0:	2800      	cmp	r0, #0
 8006db2:	f43f aec5 	beq.w	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8006db6:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8006dba:	4b97      	ldr	r3, [pc, #604]	; (8007018 <LoRaMacMibSetRequestConfirm+0x600>)
 8006dbc:	e883 0003 	stmia.w	r3, {r0, r1}
    if( status == LORAMAC_STATUS_OK )
 8006dc0:	e689      	b.n	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8006dc2:	7a02      	ldrb	r2, [r0, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8006dc4:	f895 3611 	ldrb.w	r3, [r5, #1553]	; 0x611
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8006dc8:	f88d 2004 	strb.w	r2, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8006dcc:	f895 05dc 	ldrb.w	r0, [r5, #1500]	; 0x5dc
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8006dd0:	f88d 3005 	strb.w	r3, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8006dd4:	2207      	movs	r2, #7
 8006dd6:	a901      	add	r1, sp, #4
 8006dd8:	f001 fea2 	bl	8008b20 <RegionVerify>
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	f43f aeaf 	beq.w	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
                Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8006de2:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8006de6:	4b8d      	ldr	r3, [pc, #564]	; (800701c <LoRaMacMibSetRequestConfirm+0x604>)
 8006de8:	e883 0003 	stmia.w	r3, {r0, r1}
    if( status == LORAMAC_STATUS_OK )
 8006dec:	e673      	b.n	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8006dee:	4b89      	ldr	r3, [pc, #548]	; (8007014 <LoRaMacMibSetRequestConfirm+0x5fc>)
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8006df0:	7900      	ldrb	r0, [r0, #4]
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8006df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8006df4:	f885 0725 	strb.w	r0, [r5, #1829]	; 0x725
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8006df8:	4798      	blx	r3
    if( status == LORAMAC_STATUS_OK )
 8006dfa:	e66c      	b.n	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
            if( mibSet->Param.McNwkSKey3 != NULL )
 8006dfc:	6841      	ldr	r1, [r0, #4]
 8006dfe:	2900      	cmp	r1, #0
 8006e00:	f43f ae9e 	beq.w	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_3, mibSet->Param.McNwkSKey3 ) )
 8006e04:	208b      	movs	r0, #139	; 0x8b
 8006e06:	f001 fba7 	bl	8008558 <LoRaMacCryptoSetKey>
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	f43f ae63 	beq.w	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8006e10:	2011      	movs	r0, #17
 8006e12:	e65a      	b.n	8006aca <LoRaMacMibSetRequestConfirm+0xb2>
            if( mibSet->Param.McAppSKey3 != NULL )
 8006e14:	6841      	ldr	r1, [r0, #4]
 8006e16:	2900      	cmp	r1, #0
 8006e18:	f43f ae92 	beq.w	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_3, mibSet->Param.McAppSKey3 ) )
 8006e1c:	208a      	movs	r0, #138	; 0x8a
 8006e1e:	f001 fb9b 	bl	8008558 <LoRaMacCryptoSetKey>
 8006e22:	2800      	cmp	r0, #0
 8006e24:	f43f ae57 	beq.w	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
 8006e28:	e7f2      	b.n	8006e10 <LoRaMacMibSetRequestConfirm+0x3f8>
            if( mibSet->Param.McKey3 != NULL )
 8006e2a:	6841      	ldr	r1, [r0, #4]
 8006e2c:	2900      	cmp	r1, #0
 8006e2e:	f43f ae87 	beq.w	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_3, mibSet->Param.McKey3 ) )
 8006e32:	2089      	movs	r0, #137	; 0x89
 8006e34:	f001 fb90 	bl	8008558 <LoRaMacCryptoSetKey>
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	f43f ae4c 	beq.w	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
 8006e3e:	e7e7      	b.n	8006e10 <LoRaMacMibSetRequestConfirm+0x3f8>
            if( mibSet->Param.McNwkSKey2 != NULL )
 8006e40:	6841      	ldr	r1, [r0, #4]
 8006e42:	2900      	cmp	r1, #0
 8006e44:	f43f ae7c 	beq.w	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_2, mibSet->Param.McNwkSKey2 ) )
 8006e48:	2088      	movs	r0, #136	; 0x88
 8006e4a:	f001 fb85 	bl	8008558 <LoRaMacCryptoSetKey>
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	f43f ae41 	beq.w	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
 8006e54:	e7dc      	b.n	8006e10 <LoRaMacMibSetRequestConfirm+0x3f8>
            if( mibSet->Param.McAppSKey2 != NULL )
 8006e56:	6841      	ldr	r1, [r0, #4]
 8006e58:	2900      	cmp	r1, #0
 8006e5a:	f43f ae71 	beq.w	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_2, mibSet->Param.McAppSKey2 ) )
 8006e5e:	2087      	movs	r0, #135	; 0x87
 8006e60:	f001 fb7a 	bl	8008558 <LoRaMacCryptoSetKey>
 8006e64:	2800      	cmp	r0, #0
 8006e66:	f43f ae36 	beq.w	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
 8006e6a:	e7d1      	b.n	8006e10 <LoRaMacMibSetRequestConfirm+0x3f8>
            if( mibSet->Param.McKey2 != NULL )
 8006e6c:	6841      	ldr	r1, [r0, #4]
 8006e6e:	2900      	cmp	r1, #0
 8006e70:	f43f ae66 	beq.w	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_2, mibSet->Param.McKey2 ) )
 8006e74:	2086      	movs	r0, #134	; 0x86
 8006e76:	f001 fb6f 	bl	8008558 <LoRaMacCryptoSetKey>
 8006e7a:	2800      	cmp	r0, #0
 8006e7c:	f43f ae2b 	beq.w	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
 8006e80:	e7c6      	b.n	8006e10 <LoRaMacMibSetRequestConfirm+0x3f8>
            if( mibSet->Param.McNwkSKey1 != NULL )
 8006e82:	6841      	ldr	r1, [r0, #4]
 8006e84:	2900      	cmp	r1, #0
 8006e86:	f43f ae5b 	beq.w	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_1, mibSet->Param.McNwkSKey1 ) )
 8006e8a:	2085      	movs	r0, #133	; 0x85
 8006e8c:	f001 fb64 	bl	8008558 <LoRaMacCryptoSetKey>
 8006e90:	2800      	cmp	r0, #0
 8006e92:	f43f ae20 	beq.w	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
 8006e96:	e7bb      	b.n	8006e10 <LoRaMacMibSetRequestConfirm+0x3f8>
            if( mibSet->Param.McAppSKey1 != NULL )
 8006e98:	6841      	ldr	r1, [r0, #4]
 8006e9a:	2900      	cmp	r1, #0
 8006e9c:	f43f ae50 	beq.w	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_1, mibSet->Param.McAppSKey1 ) )
 8006ea0:	2084      	movs	r0, #132	; 0x84
 8006ea2:	f001 fb59 	bl	8008558 <LoRaMacCryptoSetKey>
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	f43f ae15 	beq.w	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
 8006eac:	e7b0      	b.n	8006e10 <LoRaMacMibSetRequestConfirm+0x3f8>
            if( mibSet->Param.McKey1 != NULL )
 8006eae:	6841      	ldr	r1, [r0, #4]
 8006eb0:	2900      	cmp	r1, #0
 8006eb2:	f43f ae45 	beq.w	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_1, mibSet->Param.McKey1 ) )
 8006eb6:	2083      	movs	r0, #131	; 0x83
 8006eb8:	f001 fb4e 	bl	8008558 <LoRaMacCryptoSetKey>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	f43f ae0a 	beq.w	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
 8006ec2:	e7a5      	b.n	8006e10 <LoRaMacMibSetRequestConfirm+0x3f8>
            if( mibSet->Param.McNwkSKey0 != NULL )
 8006ec4:	6841      	ldr	r1, [r0, #4]
 8006ec6:	2900      	cmp	r1, #0
 8006ec8:	f43f ae3a 	beq.w	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8006ecc:	2082      	movs	r0, #130	; 0x82
 8006ece:	f001 fb43 	bl	8008558 <LoRaMacCryptoSetKey>
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	f43f adff 	beq.w	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
 8006ed8:	e79a      	b.n	8006e10 <LoRaMacMibSetRequestConfirm+0x3f8>
            if( mibSet->Param.McAppSKey0 != NULL )
 8006eda:	6841      	ldr	r1, [r0, #4]
 8006edc:	2900      	cmp	r1, #0
 8006ede:	f43f ae2f 	beq.w	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8006ee2:	2081      	movs	r0, #129	; 0x81
 8006ee4:	f001 fb38 	bl	8008558 <LoRaMacCryptoSetKey>
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	f43f adf4 	beq.w	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
 8006eee:	e78f      	b.n	8006e10 <LoRaMacMibSetRequestConfirm+0x3f8>
            if( mibSet->Param.McKey0 != NULL )
 8006ef0:	6841      	ldr	r1, [r0, #4]
 8006ef2:	2900      	cmp	r1, #0
 8006ef4:	f43f ae24 	beq.w	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8006ef8:	2080      	movs	r0, #128	; 0x80
 8006efa:	f001 fb2d 	bl	8008558 <LoRaMacCryptoSetKey>
 8006efe:	2800      	cmp	r0, #0
 8006f00:	f43f ade9 	beq.w	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
 8006f04:	e784      	b.n	8006e10 <LoRaMacMibSetRequestConfirm+0x3f8>
            if( mibSet->Param.McKEKey != NULL )
 8006f06:	6841      	ldr	r1, [r0, #4]
 8006f08:	2900      	cmp	r1, #0
 8006f0a:	f43f ae19 	beq.w	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8006f0e:	207f      	movs	r0, #127	; 0x7f
 8006f10:	f001 fb22 	bl	8008558 <LoRaMacCryptoSetKey>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	f43f adde 	beq.w	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
 8006f1a:	e779      	b.n	8006e10 <LoRaMacMibSetRequestConfirm+0x3f8>
            if( mibSet->Param.AppSKey != NULL )
 8006f1c:	6841      	ldr	r1, [r0, #4]
 8006f1e:	2900      	cmp	r1, #0
 8006f20:	f43f ae0e 	beq.w	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8006f24:	2007      	movs	r0, #7
 8006f26:	f001 fb17 	bl	8008558 <LoRaMacCryptoSetKey>
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	f43f add3 	beq.w	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
 8006f30:	e76e      	b.n	8006e10 <LoRaMacMibSetRequestConfirm+0x3f8>
            if( mibSet->Param.NwkSEncKey != NULL )
 8006f32:	6841      	ldr	r1, [r0, #4]
 8006f34:	2900      	cmp	r1, #0
 8006f36:	f43f ae03 	beq.w	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_ENC_KEY, mibSet->Param.NwkSEncKey ) )
 8006f3a:	2006      	movs	r0, #6
 8006f3c:	f001 fb0c 	bl	8008558 <LoRaMacCryptoSetKey>
 8006f40:	2800      	cmp	r0, #0
 8006f42:	f43f adc8 	beq.w	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
 8006f46:	e763      	b.n	8006e10 <LoRaMacMibSetRequestConfirm+0x3f8>
            if( mibSet->Param.SNwkSIntKey != NULL )
 8006f48:	6841      	ldr	r1, [r0, #4]
 8006f4a:	2900      	cmp	r1, #0
 8006f4c:	f43f adf8 	beq.w	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( S_NWK_S_INT_KEY, mibSet->Param.SNwkSIntKey ) )
 8006f50:	2005      	movs	r0, #5
 8006f52:	f001 fb01 	bl	8008558 <LoRaMacCryptoSetKey>
 8006f56:	2800      	cmp	r0, #0
 8006f58:	f43f adbd 	beq.w	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
 8006f5c:	e758      	b.n	8006e10 <LoRaMacMibSetRequestConfirm+0x3f8>
            if( mibSet->Param.FNwkSIntKey != NULL )
 8006f5e:	6841      	ldr	r1, [r0, #4]
 8006f60:	2900      	cmp	r1, #0
 8006f62:	f43f aded 	beq.w	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( F_NWK_S_INT_KEY, mibSet->Param.FNwkSIntKey ) )
 8006f66:	2004      	movs	r0, #4
 8006f68:	f001 faf6 	bl	8008558 <LoRaMacCryptoSetKey>
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	f43f adb2 	beq.w	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
 8006f72:	e74d      	b.n	8006e10 <LoRaMacMibSetRequestConfirm+0x3f8>
            if( mibSet->Param.JSEncKey != NULL )
 8006f74:	6841      	ldr	r1, [r0, #4]
 8006f76:	2900      	cmp	r1, #0
 8006f78:	f43f ade2 	beq.w	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_ENC_KEY, mibSet->Param.JSEncKey ) )
 8006f7c:	2003      	movs	r0, #3
 8006f7e:	f001 faeb 	bl	8008558 <LoRaMacCryptoSetKey>
 8006f82:	2800      	cmp	r0, #0
 8006f84:	f43f ada7 	beq.w	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
 8006f88:	e742      	b.n	8006e10 <LoRaMacMibSetRequestConfirm+0x3f8>
            if( mibSet->Param.JSIntKey != NULL )
 8006f8a:	6841      	ldr	r1, [r0, #4]
 8006f8c:	2900      	cmp	r1, #0
 8006f8e:	f43f add7 	beq.w	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_INT_KEY, mibSet->Param.JSIntKey ) )
 8006f92:	2002      	movs	r0, #2
 8006f94:	f001 fae0 	bl	8008558 <LoRaMacCryptoSetKey>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	f43f ad9c 	beq.w	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
 8006f9e:	e737      	b.n	8006e10 <LoRaMacMibSetRequestConfirm+0x3f8>
            if( mibSet->Param.NwkKey != NULL )
 8006fa0:	6841      	ldr	r1, [r0, #4]
 8006fa2:	2900      	cmp	r1, #0
 8006fa4:	f43f adcc 	beq.w	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8006fa8:	2001      	movs	r0, #1
 8006faa:	f001 fad5 	bl	8008558 <LoRaMacCryptoSetKey>
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	f43f ad91 	beq.w	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
 8006fb4:	e72c      	b.n	8006e10 <LoRaMacMibSetRequestConfirm+0x3f8>
            if( mibSet->Param.AppKey != NULL )
 8006fb6:	6841      	ldr	r1, [r0, #4]
 8006fb8:	2900      	cmp	r1, #0
 8006fba:	f43f adc1 	beq.w	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8006fbe:	2000      	movs	r0, #0
 8006fc0:	f001 faca 	bl	8008558 <LoRaMacCryptoSetKey>
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	f43f ad86 	beq.w	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
 8006fca:	e721      	b.n	8006e10 <LoRaMacMibSetRequestConfirm+0x3f8>
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8006fcc:	6843      	ldr	r3, [r0, #4]
 8006fce:	f8c5 3660 	str.w	r3, [r5, #1632]	; 0x660
    if( status == LORAMAC_STATUS_OK )
 8006fd2:	e580      	b.n	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8006fd4:	6843      	ldr	r3, [r0, #4]
 8006fd6:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
    if( status == LORAMAC_STATUS_OK )
 8006fda:	e57c      	b.n	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8006fdc:	7903      	ldrb	r3, [r0, #4]
 8006fde:	f885 3726 	strb.w	r3, [r5, #1830]	; 0x726
    if( status == LORAMAC_STATUS_OK )
 8006fe2:	e578      	b.n	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
            if( SecureElementSetPin( mibSet->Param.SePin ) != SECURE_ELEMENT_SUCCESS )
 8006fe4:	6840      	ldr	r0, [r0, #4]
 8006fe6:	f003 f961 	bl	800a2ac <SecureElementSetPin>
 8006fea:	2800      	cmp	r0, #0
 8006fec:	f43f ad73 	beq.w	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
 8006ff0:	e5a6      	b.n	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8006ff2:	6840      	ldr	r0, [r0, #4]
 8006ff4:	f003 f944 	bl	800a280 <SecureElementSetJoinEui>
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	f43f ad6c 	beq.w	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
 8006ffe:	e59f      	b.n	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8007000:	6840      	ldr	r0, [r0, #4]
 8007002:	f003 f929 	bl	800a258 <SecureElementSetDevEui>
 8007006:	2800      	cmp	r0, #0
 8007008:	f43f ad65 	beq.w	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
 800700c:	e598      	b.n	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
 800700e:	bf00      	nop
 8007010:	20031050 	.word	0x20031050
 8007014:	08015848 	.word	0x08015848
 8007018:	20031084 	.word	0x20031084
 800701c:	20031048 	.word	0x20031048
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8007020:	7903      	ldrb	r3, [r0, #4]
 8007022:	2b02      	cmp	r3, #2
 8007024:	f43f ad8c 	beq.w	8006b40 <LoRaMacMibSetRequestConfirm+0x128>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8007028:	f885 373c 	strb.w	r3, [r5, #1852]	; 0x73c
    if( status == LORAMAC_STATUS_OK )
 800702c:	e553      	b.n	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
            status = SwitchClass( mibSet->Param.Class );
 800702e:	7900      	ldrb	r0, [r0, #4]
 8007030:	f7fd fa48 	bl	80044c4 <SwitchClass>
            break;
 8007034:	e54d      	b.n	8006ad2 <LoRaMacMibSetRequestConfirm+0xba>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007036:	2003      	movs	r0, #3
}
 8007038:	4770      	bx	lr
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800703a:	6843      	ldr	r3, [r0, #4]
 800703c:	f8c5 3738 	str.w	r3, [r5, #1848]	; 0x738
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8007040:	4618      	mov	r0, r3
 8007042:	f000 ff7d 	bl	8007f40 <LoRaMacCryptoSetLrWanVersion>
 8007046:	2800      	cmp	r0, #0
 8007048:	f43f ad45 	beq.w	8006ad6 <LoRaMacMibSetRequestConfirm+0xbe>
 800704c:	e6e0      	b.n	8006e10 <LoRaMacMibSetRequestConfirm+0x3f8>
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 800704e:	4819      	ldr	r0, [pc, #100]	; (80070b4 <LoRaMacMibSetRequestConfirm+0x69c>)
 8007050:	4631      	mov	r1, r6
 8007052:	2204      	movs	r2, #4
 8007054:	f7fb fefa 	bl	8002e4c <memcpy1>
 8007058:	e5b9      	b.n	8006bce <LoRaMacMibSetRequestConfirm+0x1b6>
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 800705a:	4817      	ldr	r0, [pc, #92]	; (80070b8 <LoRaMacMibSetRequestConfirm+0x6a0>)
 800705c:	4631      	mov	r1, r6
 800705e:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8007062:	f7fb fef3 	bl	8002e4c <memcpy1>
 8007066:	e5a7      	b.n	8006bb8 <LoRaMacMibSetRequestConfirm+0x1a0>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 8007068:	4814      	ldr	r0, [pc, #80]	; (80070bc <LoRaMacMibSetRequestConfirm+0x6a4>)
 800706a:	4631      	mov	r1, r6
 800706c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8007070:	f7fb feec 	bl	8002e4c <memcpy1>
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8007074:	f895 341b 	ldrb.w	r3, [r5, #1051]	; 0x41b
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8007078:	f8d5 0608 	ldr.w	r0, [r5, #1544]	; 0x608
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800707c:	f895 1611 	ldrb.w	r1, [r5, #1553]	; 0x611
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8007080:	f885 33e8 	strb.w	r3, [r5, #1000]	; 0x3e8
        MacCtx.RxWindowCConfig.RxContinuous = true;
 8007084:	2201      	movs	r2, #1
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8007086:	2302      	movs	r3, #2
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8007088:	f8c5 03ec 	str.w	r0, [r5, #1004]	; 0x3ec
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800708c:	f885 13f8 	strb.w	r1, [r5, #1016]	; 0x3f8
        MacCtx.RxWindowCConfig.RxContinuous = true;
 8007090:	f885 23f9 	strb.w	r2, [r5, #1017]	; 0x3f9
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8007094:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa
 8007098:	e582      	b.n	8006ba0 <LoRaMacMibSetRequestConfirm+0x188>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 800709a:	4809      	ldr	r0, [pc, #36]	; (80070c0 <LoRaMacMibSetRequestConfirm+0x6a8>)
 800709c:	4631      	mov	r1, r6
 800709e:	2220      	movs	r2, #32
 80070a0:	f7fb fed4 	bl	8002e4c <memcpy1>
 80070a4:	e570      	b.n	8006b88 <LoRaMacMibSetRequestConfirm+0x170>
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 80070a6:	4807      	ldr	r0, [pc, #28]	; (80070c4 <LoRaMacMibSetRequestConfirm+0x6ac>)
 80070a8:	2238      	movs	r2, #56	; 0x38
 80070aa:	4621      	mov	r1, r4
 80070ac:	f7fb fece 	bl	8002e4c <memcpy1>
 80070b0:	e560      	b.n	8006b74 <LoRaMacMibSetRequestConfirm+0x15c>
 80070b2:	bf00      	nop
 80070b4:	20031344 	.word	0x20031344
 80070b8:	200311a4 	.word	0x200311a4
 80070bc:	20031024 	.word	0x20031024
 80070c0:	20031004 	.word	0x20031004
 80070c4:	20030fcc 	.word	0x20030fcc

080070c8 <LoRaMacMlmeRequest>:
{
 80070c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070cc:	b086      	sub	sp, #24
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80070ce:	2300      	movs	r3, #0
 80070d0:	f8ad 3000 	strh.w	r3, [sp]
    if( mlmeRequest == NULL )
 80070d4:	2800      	cmp	r0, #0
 80070d6:	d036      	beq.n	8007146 <LoRaMacMlmeRequest+0x7e>
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 80070d8:	4a8a      	ldr	r2, [pc, #552]	; (8007304 <LoRaMacMlmeRequest+0x23c>)
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 80070da:	6103      	str	r3, [r0, #16]
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 80070dc:	7814      	ldrb	r4, [r2, #0]
 80070de:	f014 0401 	ands.w	r4, r4, #1
 80070e2:	4605      	mov	r5, r0
 80070e4:	d103      	bne.n	80070ee <LoRaMacMlmeRequest+0x26>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80070e6:	4e88      	ldr	r6, [pc, #544]	; (8007308 <LoRaMacMlmeRequest+0x240>)
 80070e8:	f8d6 3340 	ldr.w	r3, [r6, #832]	; 0x340
 80070ec:	b123      	cbz	r3, 80070f8 <LoRaMacMlmeRequest+0x30>
        return LORAMAC_STATUS_BUSY;
 80070ee:	2401      	movs	r4, #1
}
 80070f0:	4620      	mov	r0, r4
 80070f2:	b006      	add	sp, #24
 80070f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 80070f8:	f896 348e 	ldrb.w	r3, [r6, #1166]	; 0x48e
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d1f6      	bne.n	80070ee <LoRaMacMlmeRequest+0x26>
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8007100:	f000 fd1c 	bl	8007b3c <LoRaMacConfirmQueueIsFull>
 8007104:	2800      	cmp	r0, #0
 8007106:	d1f2      	bne.n	80070ee <LoRaMacMlmeRequest+0x26>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8007108:	f000 fd12 	bl	8007b30 <LoRaMacConfirmQueueGetCnt>
 800710c:	b300      	cbz	r0, 8007150 <LoRaMacMlmeRequest+0x88>
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800710e:	f896 348d 	ldrb.w	r3, [r6, #1165]	; 0x48d
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007112:	2101      	movs	r1, #1
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8007114:	f043 0304 	orr.w	r3, r3, #4
 8007118:	f886 348d 	strb.w	r3, [r6, #1165]	; 0x48d
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800711c:	f886 1459 	strb.w	r1, [r6, #1113]	; 0x459
    queueElement.Request = mlmeRequest->Type;
 8007120:	782a      	ldrb	r2, [r5, #0]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007122:	f88d 1005 	strb.w	r1, [sp, #5]
 8007126:	1e53      	subs	r3, r2, #1
    queueElement.ReadyToHandle = false;
 8007128:	2100      	movs	r1, #0
    queueElement.Request = mlmeRequest->Type;
 800712a:	f88d 2004 	strb.w	r2, [sp, #4]
    queueElement.ReadyToHandle = false;
 800712e:	f8ad 1006 	strh.w	r1, [sp, #6]
    switch( mlmeRequest->Type )
 8007132:	2b0b      	cmp	r3, #11
 8007134:	d813      	bhi.n	800715e <LoRaMacMlmeRequest+0x96>
 8007136:	e8df f003 	tbb	[pc, r3]
 800713a:	b223      	.short	0xb223
 800713c:	127a8b6d 	.word	0x127a8b6d
 8007140:	5f129612 	.word	0x5f129612
 8007144:	539e      	.short	0x539e
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007146:	2403      	movs	r4, #3
}
 8007148:	4620      	mov	r0, r4
 800714a:	b006      	add	sp, #24
 800714c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8007150:	2214      	movs	r2, #20
 8007152:	4621      	mov	r1, r4
 8007154:	f506 608b 	add.w	r0, r6, #1112	; 0x458
 8007158:	f7fb fe98 	bl	8002e8c <memset1>
 800715c:	e7d7      	b.n	800710e <LoRaMacMlmeRequest+0x46>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800715e:	f8d6 34fc 	ldr.w	r3, [r6, #1276]	; 0x4fc
 8007162:	612b      	str	r3, [r5, #16]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8007164:	2402      	movs	r4, #2
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8007166:	f000 fce3 	bl	8007b30 <LoRaMacConfirmQueueGetCnt>
 800716a:	2800      	cmp	r0, #0
 800716c:	d1c0      	bne.n	80070f0 <LoRaMacMlmeRequest+0x28>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800716e:	f896 348d 	ldrb.w	r3, [r6, #1165]	; 0x48d
            MacCtx.NodeAckRequested = false;
 8007172:	f886 041a 	strb.w	r0, [r6, #1050]	; 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8007176:	f360 0382 	bfi	r3, r0, #2, #1
 800717a:	f886 348d 	strb.w	r3, [r6, #1165]	; 0x48d
 800717e:	e7b7      	b.n	80070f0 <LoRaMacMlmeRequest+0x28>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8007180:	f8d6 3340 	ldr.w	r3, [r6, #832]	; 0x340
 8007184:	f013 0720 	ands.w	r7, r3, #32
 8007188:	d1b1      	bne.n	80070ee <LoRaMacMlmeRequest+0x26>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 800718a:	f895 8004 	ldrb.w	r8, [r5, #4]
 800718e:	f1b8 0f02 	cmp.w	r8, #2
 8007192:	f000 8094 	beq.w	80072be <LoRaMacMlmeRequest+0x1f6>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8007196:	f1b8 0f01 	cmp.w	r8, #1
 800719a:	d1e0      	bne.n	800715e <LoRaMacMlmeRequest+0x96>
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800719c:	2302      	movs	r3, #2
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800719e:	f896 05dc 	ldrb.w	r0, [r6, #1500]	; 0x5dc
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80071a2:	f88d 3014 	strb.w	r3, [sp, #20]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80071a6:	a902      	add	r1, sp, #8
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 80071a8:	f886 7729 	strb.w	r7, [r6, #1833]	; 0x729
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80071ac:	f001 fcb2 	bl	8008b14 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 80071b0:	792a      	ldrb	r2, [r5, #4]
                MacCtx.MacCallbacks->MacProcessNotify( );
 80071b2:	f8d6 3348 	ldr.w	r3, [r6, #840]	; 0x348
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 80071b6:	f886 273c 	strb.w	r2, [r6, #1852]	; 0x73c
                MacCtx.MacCallbacks->MacProcessNotify( );
 80071ba:	68db      	ldr	r3, [r3, #12]
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80071bc:	f88d 7005 	strb.w	r7, [sp, #5]
                queueElement.ReadyToHandle = true;
 80071c0:	f88d 8006 	strb.w	r8, [sp, #6]
                MacCtx.MacCallbacks->MacProcessNotify( );
 80071c4:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 80071c6:	f896 348d 	ldrb.w	r3, [r6, #1165]	; 0x48d
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80071ca:	f8d6 24fc 	ldr.w	r2, [r6, #1276]	; 0x4fc
                MacCtx.MacFlags.Bits.MacDone = 1;
 80071ce:	f043 0310 	orr.w	r3, r3, #16
 80071d2:	f886 348d 	strb.w	r3, [r6, #1165]	; 0x48d
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80071d6:	612a      	str	r2, [r5, #16]
        LoRaMacConfirmQueueAdd( &queueElement );
 80071d8:	a801      	add	r0, sp, #4
 80071da:	f000 fbcd 	bl	8007978 <LoRaMacConfirmQueueAdd>
 80071de:	e787      	b.n	80070f0 <LoRaMacMlmeRequest+0x28>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80071e0:	2200      	movs	r2, #0
 80071e2:	4669      	mov	r1, sp
 80071e4:	2012      	movs	r0, #18
 80071e6:	f000 fa25 	bl	8007634 <LoRaMacCommandsAddCmd>
 80071ea:	2800      	cmp	r0, #0
 80071ec:	d037      	beq.n	800725e <LoRaMacMlmeRequest+0x196>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80071ee:	f8d6 34fc 	ldr.w	r3, [r6, #1276]	; 0x4fc
 80071f2:	612b      	str	r3, [r5, #16]
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80071f4:	2413      	movs	r4, #19
 80071f6:	e7b6      	b.n	8007166 <LoRaMacMlmeRequest+0x9e>
            queueElement.RestrictCommonReadyToHandle = true;
 80071f8:	f04f 0801 	mov.w	r8, #1
 80071fc:	f88d 8007 	strb.w	r8, [sp, #7]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8007200:	f000 f9da 	bl	80075b8 <LoRaMacClassBIsAcquisitionInProgress>
 8007204:	4607      	mov	r7, r0
 8007206:	2800      	cmp	r0, #0
 8007208:	d050      	beq.n	80072ac <LoRaMacMlmeRequest+0x1e4>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800720a:	f8d6 34fc 	ldr.w	r3, [r6, #1276]	; 0x4fc
 800720e:	612b      	str	r3, [r5, #16]
                status = LORAMAC_STATUS_BUSY;
 8007210:	4644      	mov	r4, r8
 8007212:	e7a8      	b.n	8007166 <LoRaMacMlmeRequest+0x9e>
            MacCtx.MlmeConfirm.MlmeRequest = mlmeRequest->Type;
 8007214:	2303      	movs	r3, #3
            status = SendReJoinReq( REJOIN_REQ_1 );
 8007216:	2001      	movs	r0, #1
            MacCtx.MlmeConfirm.MlmeRequest = mlmeRequest->Type;
 8007218:	f886 3458 	strb.w	r3, [r6, #1112]	; 0x458
            status = SendReJoinReq( REJOIN_REQ_1 );
 800721c:	f7fd fd5c 	bl	8004cd8 <SendReJoinReq>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8007220:	f8d6 34fc 	ldr.w	r3, [r6, #1276]	; 0x4fc
 8007224:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 8007226:	2800      	cmp	r0, #0
 8007228:	d0d6      	beq.n	80071d8 <LoRaMacMlmeRequest+0x110>
 800722a:	4604      	mov	r4, r0
 800722c:	e79b      	b.n	8007166 <LoRaMacMlmeRequest+0x9e>
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800722e:	4b37      	ldr	r3, [pc, #220]	; (800730c <LoRaMacMlmeRequest+0x244>)
 8007230:	88aa      	ldrh	r2, [r5, #4]
 8007232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007234:	f995 100c 	ldrsb.w	r1, [r5, #12]
 8007238:	68a8      	ldr	r0, [r5, #8]
 800723a:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800723c:	f8d6 3340 	ldr.w	r3, [r6, #832]	; 0x340
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8007240:	f8d6 24fc 	ldr.w	r2, [r6, #1276]	; 0x4fc
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8007244:	f043 0302 	orr.w	r3, r3, #2
 8007248:	f8c6 3340 	str.w	r3, [r6, #832]	; 0x340
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800724c:	612a      	str	r2, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800724e:	e7c3      	b.n	80071d8 <LoRaMacMlmeRequest+0x110>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8007250:	2200      	movs	r2, #0
 8007252:	4669      	mov	r1, sp
 8007254:	2002      	movs	r0, #2
 8007256:	f000 f9ed 	bl	8007634 <LoRaMacCommandsAddCmd>
 800725a:	2800      	cmp	r0, #0
 800725c:	d1c7      	bne.n	80071ee <LoRaMacMlmeRequest+0x126>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800725e:	f8d6 34fc 	ldr.w	r3, [r6, #1276]	; 0x4fc
 8007262:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 8007264:	e7b8      	b.n	80071d8 <LoRaMacMlmeRequest+0x110>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8007266:	2200      	movs	r2, #0
 8007268:	4669      	mov	r1, sp
 800726a:	200d      	movs	r0, #13
 800726c:	f000 f9e2 	bl	8007634 <LoRaMacCommandsAddCmd>
 8007270:	2800      	cmp	r0, #0
 8007272:	d1bc      	bne.n	80071ee <LoRaMacMlmeRequest+0x126>
 8007274:	e7f3      	b.n	800725e <LoRaMacMlmeRequest+0x196>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8007276:	f896 3724 	ldrb.w	r3, [r6, #1828]	; 0x724
 800727a:	2b00      	cmp	r3, #0
 800727c:	f47f af6f 	bne.w	800715e <LoRaMacMlmeRequest+0x96>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8007280:	792f      	ldrb	r7, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8007282:	f007 0007 	and.w	r0, r7, #7
 8007286:	f000 f9a9 	bl	80075dc <LoRaMacClassBSetPingSlotInfo>
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800728a:	2201      	movs	r2, #1
 800728c:	4669      	mov	r1, sp
 800728e:	2010      	movs	r0, #16
                macCmdPayload[0] = value;
 8007290:	f88d 7000 	strb.w	r7, [sp]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8007294:	f000 f9ce 	bl	8007634 <LoRaMacCommandsAddCmd>
 8007298:	2800      	cmp	r0, #0
 800729a:	d1a8      	bne.n	80071ee <LoRaMacMlmeRequest+0x126>
 800729c:	e7df      	b.n	800725e <LoRaMacMlmeRequest+0x196>
            MacCtx.MlmeConfirm.MlmeRequest = mlmeRequest->Type;
 800729e:	2302      	movs	r3, #2
            status = SendReJoinReq( REJOIN_REQ_0 );
 80072a0:	2000      	movs	r0, #0
            MacCtx.MlmeConfirm.MlmeRequest = mlmeRequest->Type;
 80072a2:	f886 3458 	strb.w	r3, [r6, #1112]	; 0x458
            status = SendReJoinReq( REJOIN_REQ_0 );
 80072a6:	f7fd fd17 	bl	8004cd8 <SendReJoinReq>
            break;
 80072aa:	e7b9      	b.n	8007220 <LoRaMacMlmeRequest+0x158>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 80072ac:	f000 f97e 	bl	80075ac <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 80072b0:	4638      	mov	r0, r7
 80072b2:	f000 f983 	bl	80075bc <LoRaMacClassBBeaconTimerEvent>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80072b6:	f8d6 34fc 	ldr.w	r3, [r6, #1276]	; 0x4fc
 80072ba:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 80072bc:	e78c      	b.n	80071d8 <LoRaMacMlmeRequest+0x110>
                ResetMacParameters( );
 80072be:	f7fd f82f 	bl	8004320 <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80072c2:	463a      	mov	r2, r7
 80072c4:	f995 1005 	ldrsb.w	r1, [r5, #5]
 80072c8:	f896 05dc 	ldrb.w	r0, [r6, #1500]	; 0x5dc
 80072cc:	f001 fc98 	bl	8008c00 <RegionAlternateDr>
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 80072d0:	2307      	movs	r3, #7
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80072d2:	4602      	mov	r2, r0
                status = SendReJoinReq( JOIN_REQ );
 80072d4:	20ff      	movs	r0, #255	; 0xff
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80072d6:	f886 25cd 	strb.w	r2, [r6, #1485]	; 0x5cd
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 80072da:	f88d 3005 	strb.w	r3, [sp, #5]
                status = SendReJoinReq( JOIN_REQ );
 80072de:	f7fd fcfb 	bl	8004cd8 <SendReJoinReq>
                if( status != LORAMAC_STATUS_OK )
 80072e2:	4607      	mov	r7, r0
 80072e4:	2800      	cmp	r0, #0
 80072e6:	d0ba      	beq.n	800725e <LoRaMacMlmeRequest+0x196>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 80072e8:	f995 1005 	ldrsb.w	r1, [r5, #5]
 80072ec:	f896 05dc 	ldrb.w	r0, [r6, #1500]	; 0x5dc
 80072f0:	2201      	movs	r2, #1
 80072f2:	f001 fc85 	bl	8008c00 <RegionAlternateDr>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80072f6:	f8d6 34fc 	ldr.w	r3, [r6, #1276]	; 0x4fc
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 80072fa:	f886 05cd 	strb.w	r0, [r6, #1485]	; 0x5cd
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80072fe:	463c      	mov	r4, r7
 8007300:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 8007302:	e730      	b.n	8007166 <LoRaMacMlmeRequest+0x9e>
 8007304:	20000560 	.word	0x20000560
 8007308:	20030a48 	.word	0x20030a48
 800730c:	08015848 	.word	0x08015848

08007310 <LoRaMacMcpsRequest>:
{
 8007310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007314:	b08a      	sub	sp, #40	; 0x28
    if( mcpsRequest == NULL )
 8007316:	2800      	cmp	r0, #0
 8007318:	d044      	beq.n	80073a4 <LoRaMacMcpsRequest+0x94>
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800731a:	4b64      	ldr	r3, [pc, #400]	; (80074ac <LoRaMacMcpsRequest+0x19c>)
 800731c:	781c      	ldrb	r4, [r3, #0]
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 800731e:	2300      	movs	r3, #0
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 8007320:	f014 0401 	ands.w	r4, r4, #1
 8007324:	4605      	mov	r5, r0
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 8007326:	6103      	str	r3, [r0, #16]
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 8007328:	d104      	bne.n	8007334 <LoRaMacMcpsRequest+0x24>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800732a:	4e61      	ldr	r6, [pc, #388]	; (80074b0 <LoRaMacMcpsRequest+0x1a0>)
 800732c:	f8d6 3340 	ldr.w	r3, [r6, #832]	; 0x340
 8007330:	b123      	cbz	r3, 800733c <LoRaMacMcpsRequest+0x2c>
        return LORAMAC_STATUS_BUSY;
 8007332:	2401      	movs	r4, #1
}
 8007334:	4620      	mov	r0, r4
 8007336:	b00a      	add	sp, #40	; 0x28
 8007338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800733c:	f896 848e 	ldrb.w	r8, [r6, #1166]	; 0x48e
 8007340:	f1b8 0f01 	cmp.w	r8, #1
 8007344:	d1f5      	bne.n	8007332 <LoRaMacMcpsRequest+0x22>
    McpsReq_t request = *mcpsRequest;
 8007346:	4607      	mov	r7, r0
 8007348:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800734a:	af05      	add	r7, sp, #20
 800734c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800734e:	2214      	movs	r2, #20
 8007350:	4621      	mov	r1, r4
 8007352:	f206 4044 	addw	r0, r6, #1092	; 0x444
    McpsReq_t request = *mcpsRequest;
 8007356:	782f      	ldrb	r7, [r5, #0]
 8007358:	f8b5 900c 	ldrh.w	r9, [r5, #12]
 800735c:	f995 a00e 	ldrsb.w	sl, [r5, #14]
    macHdr.Value = 0;
 8007360:	f88d 4000 	strb.w	r4, [sp]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8007364:	f7fb fd92 	bl	8002e8c <memset1>
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8007368:	f896 373c 	ldrb.w	r3, [r6, #1852]	; 0x73c
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800736c:	f886 8445 	strb.w	r8, [r6, #1093]	; 0x445
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8007370:	2b02      	cmp	r3, #2
 8007372:	d01c      	beq.n	80073ae <LoRaMacMcpsRequest+0x9e>
    switch( request.Type )
 8007374:	2f01      	cmp	r7, #1
 8007376:	d06a      	beq.n	800744e <LoRaMacMcpsRequest+0x13e>
 8007378:	2f03      	cmp	r7, #3
 800737a:	d05b      	beq.n	8007434 <LoRaMacMcpsRequest+0x124>
 800737c:	b31f      	cbz	r7, 80073c6 <LoRaMacMcpsRequest+0xb6>
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800737e:	f896 3610 	ldrb.w	r3, [r6, #1552]	; 0x610
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007382:	f896 05dc 	ldrb.w	r0, [r6, #1500]	; 0x5dc
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007386:	f88d 300e 	strb.w	r3, [sp, #14]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800738a:	2402      	movs	r4, #2
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800738c:	a903      	add	r1, sp, #12
    getPhy.Attribute = PHY_MIN_TX_DR;
 800738e:	f88d 400c 	strb.w	r4, [sp, #12]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007392:	f001 fbaf 	bl	8008af4 <RegionGetPhyParam>
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8007396:	f8d6 34fc 	ldr.w	r3, [r6, #1276]	; 0x4fc
 800739a:	612b      	str	r3, [r5, #16]
}
 800739c:	4620      	mov	r0, r4
 800739e:	b00a      	add	sp, #40	; 0x28
 80073a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80073a4:	2403      	movs	r4, #3
}
 80073a6:	4620      	mov	r0, r4
 80073a8:	b00a      	add	sp, #40	; 0x28
 80073aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 80073ae:	f896 3724 	ldrb.w	r3, [r6, #1828]	; 0x724
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d1de      	bne.n	8007374 <LoRaMacMcpsRequest+0x64>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 80073b6:	f896 372a 	ldrb.w	r3, [r6, #1834]	; 0x72a
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1da      	bne.n	8007374 <LoRaMacMcpsRequest+0x64>
 80073be:	2f01      	cmp	r7, #1
 80073c0:	bf38      	it	cc
 80073c2:	2701      	movcc	r7, #1
 80073c4:	e7d6      	b.n	8007374 <LoRaMacMcpsRequest+0x64>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80073c6:	f89d 3000 	ldrb.w	r3, [sp]
            fPort = request.Req.Unconfirmed.fPort;
 80073ca:	f89d 4018 	ldrb.w	r4, [sp, #24]
            fBuffer = request.Req.Unconfirmed.fBuffer;
 80073ce:	f8dd 801c 	ldr.w	r8, [sp, #28]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80073d2:	2202      	movs	r2, #2
 80073d4:	f362 1347 	bfi	r3, r2, #5, #3
 80073d8:	f88d 3000 	strb.w	r3, [sp]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80073dc:	f896 3610 	ldrb.w	r3, [r6, #1552]	; 0x610
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80073e0:	f896 05dc 	ldrb.w	r0, [r6, #1500]	; 0x5dc
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80073e4:	f88d 300e 	strb.w	r3, [sp, #14]
    getPhy.Attribute = PHY_MIN_TX_DR;
 80073e8:	2202      	movs	r2, #2
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80073ea:	a903      	add	r1, sp, #12
    getPhy.Attribute = PHY_MIN_TX_DR;
 80073ec:	f88d 200c 	strb.w	r2, [sp, #12]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80073f0:	f001 fb80 	bl	8008af4 <RegionGetPhyParam>
    if( ( adr == true ) &&
 80073f4:	f896 2726 	ldrb.w	r2, [r6, #1830]	; 0x726
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80073f8:	b243      	sxtb	r3, r0
    if( ( adr == true ) &&
 80073fa:	b3c2      	cbz	r2, 800746e <LoRaMacMcpsRequest+0x15e>
 80073fc:	f896 273c 	ldrb.w	r2, [r6, #1852]	; 0x73c
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8007400:	f896 1729 	ldrb.w	r1, [r6, #1833]	; 0x729
    if( ( adr == true ) &&
 8007404:	2a01      	cmp	r2, #1
 8007406:	d100      	bne.n	800740a <LoRaMacMcpsRequest+0xfa>
        ( activation == ACTIVATION_TYPE_ABP ) &&
 8007408:	b3a1      	cbz	r1, 8007474 <LoRaMacMcpsRequest+0x164>
        LoRaMacHandleResponseTimeout( REGION_COMMON_CLASS_B_C_RESP_TIMEOUT,
 800740a:	f8d6 0500 	ldr.w	r0, [r6, #1280]	; 0x500
    if( startTimeInMs != 0 )
 800740e:	2800      	cmp	r0, #0
 8007410:	d143      	bne.n	800749a <LoRaMacMcpsRequest+0x18a>
        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
 8007412:	4621      	mov	r1, r4
 8007414:	464b      	mov	r3, r9
 8007416:	4642      	mov	r2, r8
 8007418:	4668      	mov	r0, sp
 800741a:	f7fd fbd5 	bl	8004bc8 <Send>
        if( status == LORAMAC_STATUS_OK )
 800741e:	4604      	mov	r4, r0
 8007420:	bb08      	cbnz	r0, 8007466 <LoRaMacMcpsRequest+0x156>
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8007422:	f896 348d 	ldrb.w	r3, [r6, #1165]	; 0x48d
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 8007426:	f886 7444 	strb.w	r7, [r6, #1092]	; 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800742a:	f043 0301 	orr.w	r3, r3, #1
 800742e:	f886 348d 	strb.w	r3, [r6, #1165]	; 0x48d
 8007432:	e7b0      	b.n	8007396 <LoRaMacMcpsRequest+0x86>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8007434:	f89d 3000 	ldrb.w	r3, [sp]
            fBuffer = request.Req.Proprietary.fBuffer;
 8007438:	f8dd 8018 	ldr.w	r8, [sp, #24]
            fBufferSize = request.Req.Proprietary.fBufferSize;
 800743c:	f8bd 901c 	ldrh.w	r9, [sp, #28]
            datarate = request.Req.Proprietary.Datarate;
 8007440:	f99d a01e 	ldrsb.w	sl, [sp, #30]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8007444:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8007448:	f88d 3000 	strb.w	r3, [sp]
            break;
 800744c:	e7c6      	b.n	80073dc <LoRaMacMcpsRequest+0xcc>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800744e:	f89d 3000 	ldrb.w	r3, [sp]
            fPort = request.Req.Confirmed.fPort;
 8007452:	f89d 4018 	ldrb.w	r4, [sp, #24]
            fBuffer = request.Req.Confirmed.fBuffer;
 8007456:	f8dd 801c 	ldr.w	r8, [sp, #28]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800745a:	2204      	movs	r2, #4
 800745c:	f362 1347 	bfi	r3, r2, #5, #3
 8007460:	f88d 3000 	strb.w	r3, [sp]
            break;
 8007464:	e7ba      	b.n	80073dc <LoRaMacMcpsRequest+0xcc>
            MacCtx.NodeAckRequested = false;
 8007466:	2300      	movs	r3, #0
 8007468:	f886 341a 	strb.w	r3, [r6, #1050]	; 0x41a
 800746c:	e793      	b.n	8007396 <LoRaMacMcpsRequest+0x86>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800746e:	4553      	cmp	r3, sl
 8007470:	bfb8      	it	lt
 8007472:	4653      	movlt	r3, sl
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007474:	f896 c610 	ldrb.w	ip, [r6, #1552]	; 0x610
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8007478:	f896 05dc 	ldrb.w	r0, [r6, #1500]	; 0x5dc
            verify.DatarateParams.Datarate = datarate;
 800747c:	f88d 3008 	strb.w	r3, [sp, #8]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8007480:	2205      	movs	r2, #5
 8007482:	a902      	add	r1, sp, #8
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007484:	f88d c00a 	strb.w	ip, [sp, #10]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8007488:	f001 fb4a 	bl	8008b20 <RegionVerify>
 800748c:	2800      	cmp	r0, #0
 800748e:	d089      	beq.n	80073a4 <LoRaMacMcpsRequest+0x94>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8007490:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8007494:	f886 35cd 	strb.w	r3, [r6, #1485]	; 0x5cd
 8007498:	e7b7      	b.n	800740a <LoRaMacMcpsRequest+0xfa>
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800749a:	f005 f937 	bl	800c70c <TimerGetElapsedTime>
        if( elapsedTime > timeoutInMs )
 800749e:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
            Nvm.MacGroup1.SrvAckRequested = false;
 80074a2:	bf84      	itt	hi
 80074a4:	2300      	movhi	r3, #0
 80074a6:	f886 35ce 	strbhi.w	r3, [r6, #1486]	; 0x5ce
            return true;
 80074aa:	e7b2      	b.n	8007412 <LoRaMacMcpsRequest+0x102>
 80074ac:	20000560 	.word	0x20000560
 80074b0:	20030a48 	.word	0x20030a48

080074b4 <LoRaMacAdrCalcNext>:
#include "region/Region.h"
#include "LoRaMacAdr.h"

bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 80074b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b8:	b08b      	sub	sp, #44	; 0x2c
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;

    if( adrNext->AdrEnabled == true )
 80074ba:	7846      	ldrb	r6, [r0, #1]
{
 80074bc:	9d14      	ldr	r5, [sp, #80]	; 0x50
    int8_t datarate = adrNext->Datarate;
 80074be:	f990 700c 	ldrsb.w	r7, [r0, #12]
    int8_t txPower = adrNext->TxPower;
 80074c2:	f990 800d 	ldrsb.w	r8, [r0, #13]
    uint8_t nbTrans = adrNext->NbTrans;
 80074c6:	f890 900e 	ldrb.w	r9, [r0, #14]
{
 80074ca:	4604      	mov	r4, r0
    *adrAckCounter = adrNext->AdrAckCounter;
 80074cc:	6840      	ldr	r0, [r0, #4]
 80074ce:	6028      	str	r0, [r5, #0]
{
 80074d0:	468b      	mov	fp, r1
 80074d2:	4692      	mov	sl, r2
 80074d4:	461d      	mov	r5, r3
    if( adrNext->AdrEnabled == true )
 80074d6:	b94e      	cbnz	r6, 80074ec <LoRaMacAdrCalcNext+0x38>

    *drOut = datarate;
    *txPowOut = txPower;
    *nbTransOut = nbTrans;
    return adrAckReq;
}
 80074d8:	4630      	mov	r0, r6
    *drOut = datarate;
 80074da:	f88b 7000 	strb.w	r7, [fp]
    *txPowOut = txPower;
 80074de:	f88a 8000 	strb.w	r8, [sl]
    *nbTransOut = nbTrans;
 80074e2:	f885 9000 	strb.w	r9, [r5]
}
 80074e6:	b00b      	add	sp, #44	; 0x2c
 80074e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80074ec:	7be3      	ldrb	r3, [r4, #15]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80074ee:	7c20      	ldrb	r0, [r4, #16]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80074f0:	f88d 3012 	strb.w	r3, [sp, #18]
        getPhy.Attribute = PHY_MIN_TX_DR;
 80074f4:	2202      	movs	r2, #2
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80074f6:	a904      	add	r1, sp, #16
        getPhy.Attribute = PHY_MIN_TX_DR;
 80074f8:	f88d 2010 	strb.w	r2, [sp, #16]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80074fc:	f001 fafa 	bl	8008af4 <RegionGetPhyParam>
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8007500:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8007504:	6861      	ldr	r1, [r4, #4]
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8007506:	f8b4 e00a 	ldrh.w	lr, [r4, #10]
        minTxDatarate = phyParam.Value;
 800750a:	b243      	sxtb	r3, r0
        datarate = MAX( datarate, minTxDatarate );
 800750c:	429f      	cmp	r7, r3
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800750e:	eb0c 000e 	add.w	r0, ip, lr
        datarate = MAX( datarate, minTxDatarate );
 8007512:	463a      	mov	r2, r7
 8007514:	bfb8      	it	lt
 8007516:	461a      	movlt	r2, r3
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8007518:	4561      	cmp	r1, ip
 800751a:	bf34      	ite	cc
 800751c:	2600      	movcc	r6, #0
 800751e:	2601      	movcs	r6, #1
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8007520:	4281      	cmp	r1, r0
 8007522:	d220      	bcs.n	8007566 <LoRaMacAdrCalcNext+0xb2>
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8007524:	eb0c 004e 	add.w	r0, ip, lr, lsl #1
 8007528:	4288      	cmp	r0, r1
 800752a:	d81a      	bhi.n	8007562 <LoRaMacAdrCalcNext+0xae>
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 800752c:	eba1 010c 	sub.w	r1, r1, ip
 8007530:	fbb1 f0fe 	udiv	r0, r1, lr
 8007534:	fb0e 1110 	mls	r1, lr, r0, r1
 8007538:	b999      	cbnz	r1, 8007562 <LoRaMacAdrCalcNext+0xae>
                if( datarate == minTxDatarate )
 800753a:	429f      	cmp	r7, r3
 800753c:	dc03      	bgt.n	8007546 <LoRaMacAdrCalcNext+0x92>
                    if( adrNext->UpdateChanMask == true )
 800753e:	7823      	ldrb	r3, [r4, #0]
 8007540:	bb2b      	cbnz	r3, 800758e <LoRaMacAdrCalcNext+0xda>
                    nbTrans = 1;
 8007542:	f04f 0901 	mov.w	r9, #1
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8007546:	7be3      	ldrb	r3, [r4, #15]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8007548:	7c20      	ldrb	r0, [r4, #16]
                getPhy.Datarate = datarate;
 800754a:	f88d 2011 	strb.w	r2, [sp, #17]
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800754e:	2720      	movs	r7, #32
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8007550:	a904      	add	r1, sp, #16
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8007552:	f88d 7010 	strb.w	r7, [sp, #16]
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8007556:	f88d 3012 	strb.w	r3, [sp, #18]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800755a:	f001 facb 	bl	8008af4 <RegionGetPhyParam>
                datarate = phyParam.Value;
 800755e:	b247      	sxtb	r7, r0
 8007560:	e7ba      	b.n	80074d8 <LoRaMacAdrCalcNext+0x24>
        datarate = MAX( datarate, minTxDatarate );
 8007562:	4617      	mov	r7, r2
 8007564:	e7b8      	b.n	80074d8 <LoRaMacAdrCalcNext+0x24>
            getPhy.Attribute = PHY_DEF_TX_POWER;
 8007566:	f04f 0c0a 	mov.w	ip, #10
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800756a:	a904      	add	r1, sp, #16
 800756c:	7c20      	ldrb	r0, [r4, #16]
            getPhy.Attribute = PHY_DEF_TX_POWER;
 800756e:	f88d c010 	strb.w	ip, [sp, #16]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8007572:	e9cd 3200 	strd	r3, r2, [sp]
 8007576:	f001 fabd 	bl	8008af4 <RegionGetPhyParam>
            txPower = phyParam.Value;
 800757a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800757e:	6861      	ldr	r1, [r4, #4]
 8007580:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8007584:	f8b4 e00a 	ldrh.w	lr, [r4, #10]
 8007588:	fa4f f880 	sxtb.w	r8, r0
 800758c:	e7ca      	b.n	8007524 <LoRaMacAdrCalcNext+0x70>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800758e:	2302      	movs	r3, #2
                        RegionInitDefaults( adrNext->Region, &params );
 8007590:	7c20      	ldrb	r0, [r4, #16]
 8007592:	9200      	str	r2, [sp, #0]
 8007594:	a906      	add	r1, sp, #24
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8007596:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                    nbTrans = 1;
 800759a:	f04f 0901 	mov.w	r9, #1
                        RegionInitDefaults( adrNext->Region, &params );
 800759e:	f001 fab9 	bl	8008b14 <RegionInitDefaults>
 80075a2:	9a00      	ldr	r2, [sp, #0]
 80075a4:	e7cf      	b.n	8007546 <LoRaMacAdrCalcNext+0x92>
 80075a6:	bf00      	nop

080075a8 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
 80075a8:	4770      	bx	lr
 80075aa:	bf00      	nop

080075ac <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop

080075b0 <LoRaMacClassBSetPingSlotState>:
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop

080075b4 <LoRaMacClassBSetMulticastSlotState>:
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop

080075b8 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 80075b8:	2000      	movs	r0, #0
 80075ba:	4770      	bx	lr

080075bc <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop

080075c0 <LoRaMacClassBPingSlotTimerEvent>:
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop

080075c4 <LoRaMacClassBMulticastSlotTimerEvent>:
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop

080075c8 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 80075c8:	2000      	movs	r0, #0
 80075ca:	4770      	bx	lr

080075cc <LoRaMacClassBIsBeaconExpected>:
 80075cc:	2000      	movs	r0, #0
 80075ce:	4770      	bx	lr

080075d0 <LoRaMacClassBIsPingExpected>:
 80075d0:	2000      	movs	r0, #0
 80075d2:	4770      	bx	lr

080075d4 <LoRaMacClassBIsMulticastExpected>:
 80075d4:	2000      	movs	r0, #0
 80075d6:	4770      	bx	lr

080075d8 <LoRaMacClassBIsBeaconModeActive>:
 80075d8:	2000      	movs	r0, #0
 80075da:	4770      	bx	lr

080075dc <LoRaMacClassBSetPingSlotInfo>:
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop

080075e0 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop

080075e4 <LoRaMacClassBResumeBeaconing>:
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop

080075e8 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 80075e8:	2002      	movs	r0, #2
 80075ea:	4770      	bx	lr

080075ec <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 80075ec:	2002      	movs	r0, #2
 80075ee:	4770      	bx	lr

080075f0 <LoRaMacMibClassBSetRequestConfirm>:
 80075f0:	2002      	movs	r0, #2
 80075f2:	4770      	bx	lr

080075f4 <LoRaMacClassBPingSlotInfoAns>:
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop

080075f8 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 80075f8:	2000      	movs	r0, #0
 80075fa:	4770      	bx	lr

080075fc <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop

08007600 <LoRaMacClassBDeviceTimeAns>:
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop

08007604 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 8007604:	2000      	movs	r0, #0
 8007606:	4770      	bx	lr

08007608 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 8007608:	2000      	movs	r0, #0
 800760a:	4770      	bx	lr

0800760c <LoRaMacClassBStopRxSlots>:
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop

08007610 <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif
}
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop

08007614 <LoRaMacClassBProcess>:
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop

08007618 <LoRaMacCommandsInit>:
            return false;
    }
}

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8007618:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800761a:	4c05      	ldr	r4, [pc, #20]	; (8007630 <LoRaMacCommandsInit+0x18>)
 800761c:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8007620:	4620      	mov	r0, r4
 8007622:	2100      	movs	r1, #0
 8007624:	f7fb fc32 	bl	8002e8c <memset1>
    list->First = NULL;
 8007628:	2000      	movs	r0, #0
    list->Last = NULL;
 800762a:	e9c4 0000 	strd	r0, r0, [r4]

    LinkedListInit( &CommandsCtx.MacCommandList );

    return LORAMAC_COMMANDS_SUCCESS;
}
 800762e:	bd10      	pop	{r4, pc}
 8007630:	20031440 	.word	0x20031440

08007634 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8007634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if( payload == NULL )
 8007638:	2900      	cmp	r1, #0
 800763a:	d05a      	beq.n	80076f2 <LoRaMacCommandsAddCmd+0xbe>
 800763c:	4d2f      	ldr	r5, [pc, #188]	; (80076fc <LoRaMacCommandsAddCmd+0xc8>)
 800763e:	4681      	mov	r9, r0
 8007640:	4690      	mov	r8, r2
 8007642:	2600      	movs	r6, #0
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8007644:	0137      	lsls	r7, r6, #4
 8007646:	f1a5 0c0f 	sub.w	ip, r5, #15
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800764a:	f1a5 0310 	sub.w	r3, r5, #16
        if( mem[size] != 0x00 )
 800764e:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8007652:	2c00      	cmp	r4, #0
 8007654:	d13f      	bne.n	80076d6 <LoRaMacCommandsAddCmd+0xa2>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8007656:	429d      	cmp	r5, r3
 8007658:	d1f9      	bne.n	800764e <LoRaMacCommandsAddCmd+0x1a>
    if( list->First == NULL )
 800765a:	4d29      	ldr	r5, [pc, #164]	; (8007700 <LoRaMacCommandsAddCmd+0xcc>)
 800765c:	682b      	ldr	r3, [r5, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d044      	beq.n	80076ec <LoRaMacCommandsAddCmd+0xb8>
    if( list->Last )
 8007662:	686b      	ldr	r3, [r5, #4]
 8007664:	b10b      	cbz	r3, 800766a <LoRaMacCommandsAddCmd+0x36>
        list->Last->Next = element;
 8007666:	f8c3 c000 	str.w	ip, [r3]
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
    newCmd->PayloadSize = payloadSize;
 800766a:	3601      	adds	r6, #1
    element->Next = NULL;
 800766c:	19eb      	adds	r3, r5, r7
    newCmd->PayloadSize = payloadSize;
 800766e:	0132      	lsls	r2, r6, #4
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8007670:	f107 000d 	add.w	r0, r7, #13
    element->Next = NULL;
 8007674:	2700      	movs	r7, #0
    newCmd->PayloadSize = payloadSize;
 8007676:	f845 8002 	str.w	r8, [r5, r2]
    newCmd->CID = cid;
 800767a:	f883 900c 	strb.w	r9, [r3, #12]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800767e:	4428      	add	r0, r5
 8007680:	fa1f f288 	uxth.w	r2, r8
    element->Next = NULL;
 8007684:	609f      	str	r7, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8007686:	f109 39ff 	add.w	r9, r9, #4294967295
    list->Last = element;
 800768a:	f8c5 c004 	str.w	ip, [r5, #4]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800768e:	f7fb fbdd 	bl	8002e4c <memcpy1>
    switch( cid )
 8007692:	f1b9 0f1f 	cmp.w	r9, #31
 8007696:	d811      	bhi.n	80076bc <LoRaMacCommandsAddCmd+0x88>
 8007698:	e8df f009 	tbb	[pc, r9]
 800769c:	10101026 	.word	0x10101026
 80076a0:	26101026 	.word	0x26101026
 80076a4:	10262626 	.word	0x10262626
 80076a8:	10101010 	.word	0x10101010
 80076ac:	10101026 	.word	0x10101026
 80076b0:	10101010 	.word	0x10101010
 80076b4:	10101010 	.word	0x10101010
 80076b8:	26101010 	.word	0x26101010
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80076bc:	2200      	movs	r2, #0
    newCmd->IsSticky = IsSticky( cid );

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80076be:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
    newCmd->IsSticky = IsSticky( cid );
 80076c2:	eb05 1606 	add.w	r6, r5, r6, lsl #4
    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80076c6:	3301      	adds	r3, #1
 80076c8:	4443      	add	r3, r8
    newCmd->IsSticky = IsSticky( cid );
 80076ca:	7132      	strb	r2, [r6, #4]
    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80076cc:	f8c5 3208 	str.w	r3, [r5, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
}
 80076d0:	4620      	mov	r0, r4
 80076d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if( itr == NUM_OF_MAC_COMMANDS )
 80076d6:	3601      	adds	r6, #1
 80076d8:	2e20      	cmp	r6, #32
 80076da:	f105 0510 	add.w	r5, r5, #16
 80076de:	d1b1      	bne.n	8007644 <LoRaMacCommandsAddCmd+0x10>
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 80076e0:	2402      	movs	r4, #2
}
 80076e2:	4620      	mov	r0, r4
 80076e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            return true;
 80076e8:	2201      	movs	r2, #1
 80076ea:	e7e8      	b.n	80076be <LoRaMacCommandsAddCmd+0x8a>
        list->First = element;
 80076ec:	f8c5 c000 	str.w	ip, [r5]
 80076f0:	e7b7      	b.n	8007662 <LoRaMacCommandsAddCmd+0x2e>
        return LORAMAC_COMMANDS_ERROR_NPE;
 80076f2:	2401      	movs	r4, #1
}
 80076f4:	4620      	mov	r0, r4
 80076f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076fa:	bf00      	nop
 80076fc:	20031457 	.word	0x20031457
 8007700:	20031440 	.word	0x20031440

08007704 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 8007704:	b1f0      	cbz	r0, 8007744 <LoRaMacCommandsRemoveCmd+0x40>
{
 8007706:	b538      	push	{r3, r4, r5, lr}
    curElement = list->First;
 8007708:	4d17      	ldr	r5, [pc, #92]	; (8007768 <LoRaMacCommandsRemoveCmd+0x64>)
 800770a:	682b      	ldr	r3, [r5, #0]
    if( element != curElement )
 800770c:	4298      	cmp	r0, r3
 800770e:	d021      	beq.n	8007754 <LoRaMacCommandsRemoveCmd+0x50>
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8007710:	b12b      	cbz	r3, 800771e <LoRaMacCommandsRemoveCmd+0x1a>
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	4290      	cmp	r0, r2
 8007716:	d017      	beq.n	8007748 <LoRaMacCommandsRemoveCmd+0x44>
 8007718:	4613      	mov	r3, r2
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1f9      	bne.n	8007712 <LoRaMacCommandsRemoveCmd+0xe>
    if( list->Last == element )
 800771e:	686a      	ldr	r2, [r5, #4]
 8007720:	4290      	cmp	r0, r2
        list->Last = PrevElement;
 8007722:	bf08      	it	eq
 8007724:	606b      	streq	r3, [r5, #4]
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8007726:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
 800772a:	6882      	ldr	r2, [r0, #8]
    element->Next = NULL;
 800772c:	2400      	movs	r4, #0
    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800772e:	3b01      	subs	r3, #1
 8007730:	1a9b      	subs	r3, r3, r2
    element->Next = NULL;
 8007732:	6004      	str	r4, [r0, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8007734:	4621      	mov	r1, r4
 8007736:	2210      	movs	r2, #16
    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8007738:	f8c5 3208 	str.w	r3, [r5, #520]	; 0x208
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800773c:	f7fb fba6 	bl	8002e8c <memset1>
 8007740:	4620      	mov	r0, r4
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 8007742:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 8007744:	2001      	movs	r0, #1
}
 8007746:	4770      	bx	lr
    if( list->Last == element )
 8007748:	686a      	ldr	r2, [r5, #4]
 800774a:	4290      	cmp	r0, r2
 800774c:	d00a      	beq.n	8007764 <LoRaMacCommandsRemoveCmd+0x60>
        PrevElement->Next = element->Next;
 800774e:	6802      	ldr	r2, [r0, #0]
 8007750:	601a      	str	r2, [r3, #0]
 8007752:	e7e8      	b.n	8007726 <LoRaMacCommandsRemoveCmd+0x22>
    if( list->Last == element )
 8007754:	686b      	ldr	r3, [r5, #4]
        list->First = element->Next;
 8007756:	6802      	ldr	r2, [r0, #0]
 8007758:	602a      	str	r2, [r5, #0]
    if( list->Last == element )
 800775a:	4298      	cmp	r0, r3
 800775c:	d1e3      	bne.n	8007726 <LoRaMacCommandsRemoveCmd+0x22>
        list->Last = PrevElement;
 800775e:	2300      	movs	r3, #0
 8007760:	606b      	str	r3, [r5, #4]
    if( PrevElement != NULL )
 8007762:	e7e0      	b.n	8007726 <LoRaMacCommandsRemoveCmd+0x22>
        list->Last = PrevElement;
 8007764:	606b      	str	r3, [r5, #4]
    if( PrevElement != NULL )
 8007766:	e7f2      	b.n	800774e <LoRaMacCommandsRemoveCmd+0x4a>
 8007768:	20031440 	.word	0x20031440

0800776c <LoRaMacCommandsGetCmd>:
LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800776c:	4b07      	ldr	r3, [pc, #28]	; (800778c <LoRaMacCommandsGetCmd+0x20>)
 800776e:	681b      	ldr	r3, [r3, #0]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8007770:	b913      	cbnz	r3, 8007778 <LoRaMacCommandsGetCmd+0xc>
 8007772:	e007      	b.n	8007784 <LoRaMacCommandsGetCmd+0x18>
    {
        curElement = curElement->Next;
 8007774:	681b      	ldr	r3, [r3, #0]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8007776:	b12b      	cbz	r3, 8007784 <LoRaMacCommandsGetCmd+0x18>
 8007778:	791a      	ldrb	r2, [r3, #4]
 800777a:	4282      	cmp	r2, r0
 800777c:	d1fa      	bne.n	8007774 <LoRaMacCommandsGetCmd+0x8>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 800777e:	600b      	str	r3, [r1, #0]
    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }
    return LORAMAC_COMMANDS_SUCCESS;
 8007780:	2000      	movs	r0, #0
 8007782:	4770      	bx	lr
    *macCmd = curElement;
 8007784:	2300      	movs	r3, #0
 8007786:	600b      	str	r3, [r1, #0]
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8007788:	2003      	movs	r0, #3
}
 800778a:	4770      	bx	lr
 800778c:	20031440 	.word	0x20031440

08007790 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8007790:	4b0b      	ldr	r3, [pc, #44]	; (80077c0 <LoRaMacCommandsRemoveNoneStickyCmds+0x30>)
 8007792:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8007794:	b120      	cbz	r0, 80077a0 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 8007796:	7b03      	ldrb	r3, [r0, #12]
 8007798:	b123      	cbz	r3, 80077a4 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800779a:	6800      	ldr	r0, [r0, #0]
    while( curElement != NULL )
 800779c:	2800      	cmp	r0, #0
 800779e:	d1fa      	bne.n	8007796 <LoRaMacCommandsRemoveNoneStickyCmds+0x6>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 80077a0:	2000      	movs	r0, #0
 80077a2:	4770      	bx	lr
{
 80077a4:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 80077a6:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 80077a8:	f7ff ffac 	bl	8007704 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 80077ac:	4620      	mov	r0, r4
    while( curElement != NULL )
 80077ae:	b128      	cbz	r0, 80077bc <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>
        if( curElement->IsSticky == false )
 80077b0:	7b03      	ldrb	r3, [r0, #12]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d0f7      	beq.n	80077a6 <LoRaMacCommandsRemoveNoneStickyCmds+0x16>
            curElement = curElement->Next;
 80077b6:	6800      	ldr	r0, [r0, #0]
    while( curElement != NULL )
 80077b8:	2800      	cmp	r0, #0
 80077ba:	d1f9      	bne.n	80077b0 <LoRaMacCommandsRemoveNoneStickyCmds+0x20>
}
 80077bc:	2000      	movs	r0, #0
 80077be:	bd10      	pop	{r4, pc}
 80077c0:	20031440 	.word	0x20031440

080077c4 <LoRaMacCommandsRemoveStickyAnsCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80077c4:	4b29      	ldr	r3, [pc, #164]	; (800786c <LoRaMacCommandsRemoveStickyAnsCmds+0xa8>)
{
 80077c6:	b510      	push	{r4, lr}
    curElement = CommandsCtx.MacCommandList.First;
 80077c8:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 80077ca:	2c00      	cmp	r4, #0
 80077cc:	d04c      	beq.n	8007868 <LoRaMacCommandsRemoveStickyAnsCmds+0xa4>
    {
        nexElement = curElement->Next;
 80077ce:	4620      	mov	r0, r4
 80077d0:	6824      	ldr	r4, [r4, #0]
    switch( cid )
 80077d2:	7903      	ldrb	r3, [r0, #4]
 80077d4:	3b01      	subs	r3, #1
 80077d6:	2b1f      	cmp	r3, #31
 80077d8:	d8f7      	bhi.n	80077ca <LoRaMacCommandsRemoveStickyAnsCmds+0x6>
 80077da:	a201      	add	r2, pc, #4	; (adr r2, 80077e0 <LoRaMacCommandsRemoveStickyAnsCmds+0x1c>)
 80077dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e0:	08007861 	.word	0x08007861
 80077e4:	080077cb 	.word	0x080077cb
 80077e8:	080077cb 	.word	0x080077cb
 80077ec:	080077cb 	.word	0x080077cb
 80077f0:	08007861 	.word	0x08007861
 80077f4:	080077cb 	.word	0x080077cb
 80077f8:	080077cb 	.word	0x080077cb
 80077fc:	08007861 	.word	0x08007861
 8007800:	08007861 	.word	0x08007861
 8007804:	08007861 	.word	0x08007861
 8007808:	08007861 	.word	0x08007861
 800780c:	080077cb 	.word	0x080077cb
 8007810:	080077cb 	.word	0x080077cb
 8007814:	080077cb 	.word	0x080077cb
 8007818:	080077cb 	.word	0x080077cb
 800781c:	080077cb 	.word	0x080077cb
 8007820:	08007861 	.word	0x08007861
 8007824:	080077cb 	.word	0x080077cb
 8007828:	080077cb 	.word	0x080077cb
 800782c:	080077cb 	.word	0x080077cb
 8007830:	080077cb 	.word	0x080077cb
 8007834:	080077cb 	.word	0x080077cb
 8007838:	080077cb 	.word	0x080077cb
 800783c:	080077cb 	.word	0x080077cb
 8007840:	080077cb 	.word	0x080077cb
 8007844:	080077cb 	.word	0x080077cb
 8007848:	080077cb 	.word	0x080077cb
 800784c:	080077cb 	.word	0x080077cb
 8007850:	080077cb 	.word	0x080077cb
 8007854:	080077cb 	.word	0x080077cb
 8007858:	080077cb 	.word	0x080077cb
 800785c:	08007861 	.word	0x08007861
        if( IsSticky( curElement->CID ) == true )
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8007860:	f7ff ff50 	bl	8007704 <LoRaMacCommandsRemoveCmd>
    while( curElement != NULL )
 8007864:	2c00      	cmp	r4, #0
 8007866:	d1b2      	bne.n	80077ce <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 8007868:	2000      	movs	r0, #0
 800786a:	bd10      	pop	{r4, pc}
 800786c:	20031440 	.word	0x20031440

08007870 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 8007870:	b128      	cbz	r0, 800787e <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8007872:	4b04      	ldr	r3, [pc, #16]	; (8007884 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 8007874:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007878:	6003      	str	r3, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800787a:	2000      	movs	r0, #0
 800787c:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800787e:	2001      	movs	r0, #1
}
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	20031440 	.word	0x20031440

08007888 <LoRaMacCommandsSerializeCmds>:
{
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8007888:	b37a      	cbz	r2, 80078ea <LoRaMacCommandsSerializeCmds+0x62>
{
 800788a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800788e:	460f      	mov	r7, r1
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8007890:	b369      	cbz	r1, 80078ee <LoRaMacCommandsSerializeCmds+0x66>
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8007892:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80078f4 <LoRaMacCommandsSerializeCmds+0x6c>
 8007896:	f8d8 4000 	ldr.w	r4, [r8]
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800789a:	b304      	cbz	r4, 80078de <LoRaMacCommandsSerializeCmds+0x56>
 800789c:	4691      	mov	r9, r2
 800789e:	4606      	mov	r6, r0
    uint8_t itr = 0;
 80078a0:	2200      	movs	r2, #0
 80078a2:	e00a      	b.n	80078ba <LoRaMacCommandsSerializeCmds+0x32>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
        {
            buffer[itr++] = curElement->CID;
 80078a4:	7923      	ldrb	r3, [r4, #4]
 80078a6:	f809 3002 	strb.w	r3, [r9, r2]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80078aa:	8922      	ldrh	r2, [r4, #8]
 80078ac:	f7fb face 	bl	8002e4c <memcpy1>
            itr += curElement->PayloadSize;
 80078b0:	68a3      	ldr	r3, [r4, #8]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 80078b2:	6824      	ldr	r4, [r4, #0]
            itr += curElement->PayloadSize;
 80078b4:	441d      	add	r5, r3
 80078b6:	b2ea      	uxtb	r2, r5
    while( curElement != NULL )
 80078b8:	b18c      	cbz	r4, 80078de <LoRaMacCommandsSerializeCmds+0x56>
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80078ba:	68a3      	ldr	r3, [r4, #8]
            buffer[itr++] = curElement->CID;
 80078bc:	1c55      	adds	r5, r2, #1
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80078be:	3301      	adds	r3, #1
 80078c0:	eba6 0c02 	sub.w	ip, r6, r2
            buffer[itr++] = curElement->CID;
 80078c4:	b2ed      	uxtb	r5, r5
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80078c6:	459c      	cmp	ip, r3
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80078c8:	f104 0105 	add.w	r1, r4, #5
 80078cc:	eb09 0005 	add.w	r0, r9, r5
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80078d0:	d2e8      	bcs.n	80078a4 <LoRaMacCommandsSerializeCmds+0x1c>

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 80078d2:	4620      	mov	r0, r4
 80078d4:	6824      	ldr	r4, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 80078d6:	f7ff ff15 	bl	8007704 <LoRaMacCommandsRemoveCmd>
    while( curElement != NULL )
 80078da:	2c00      	cmp	r4, #0
 80078dc:	d1f9      	bne.n	80078d2 <LoRaMacCommandsSerializeCmds+0x4a>
    *size = CommandsCtx.SerializedCmdsSize;
 80078de:	f8d8 3208 	ldr.w	r3, [r8, #520]	; 0x208
 80078e2:	603b      	str	r3, [r7, #0]
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );

    return LORAMAC_COMMANDS_SUCCESS;
 80078e4:	2000      	movs	r0, #0
}
 80078e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 80078ea:	2001      	movs	r0, #1
}
 80078ec:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 80078ee:	2001      	movs	r0, #1
}
 80078f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078f4:	20031440 	.word	0x20031440

080078f8 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 80078f8:	3801      	subs	r0, #1
 80078fa:	b2c0      	uxtb	r0, r0
 80078fc:	281f      	cmp	r0, #31
 80078fe:	bf9a      	itte	ls
 8007900:	4b01      	ldrls	r3, [pc, #4]	; (8007908 <LoRaMacCommandsGetCmdSize+0x10>)
 8007902:	5c18      	ldrbls	r0, [r3, r0]
{
 8007904:	2000      	movhi	r0, #0
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 8007906:	4770      	bx	lr
 8007908:	0801563c 	.word	0x0801563c

0800790c <LoRaMacConfirmQueueAdd.part.0>:

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
}

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
 800790c:	b410      	push	{r4}
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800790e:	4a0e      	ldr	r2, [pc, #56]	; (8007948 <LoRaMacConfirmQueueAdd.part.0+0x3c>)
 8007910:	7801      	ldrb	r1, [r0, #0]
 8007912:	6893      	ldr	r3, [r2, #8]
 8007914:	7019      	strb	r1, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8007916:	7841      	ldrb	r1, [r0, #1]
 8007918:	7059      	strb	r1, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800791a:	78c4      	ldrb	r4, [r0, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 800791c:	7881      	ldrb	r1, [r0, #2]
 800791e:	7099      	strb	r1, [r3, #2]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8007920:	70dc      	strb	r4, [r3, #3]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8007922:	f892 1020 	ldrb.w	r1, [r2, #32]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8007926:	f102 001c 	add.w	r0, r2, #28
 800792a:	4283      	cmp	r3, r0
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800792c:	f101 0101 	add.w	r1, r1, #1
 8007930:	f882 1020 	strb.w	r1, [r2, #32]
        bufferPointer++;
 8007934:	bf14      	ite	ne
 8007936:	3304      	addne	r3, #4
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8007938:	f102 030c 	addeq.w	r3, r2, #12
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );

    return true;
}
 800793c:	2001      	movs	r0, #1
 800793e:	f85d 4b04 	ldr.w	r4, [sp], #4
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8007942:	6093      	str	r3, [r2, #8]
}
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	20000564 	.word	0x20000564

0800794c <LoRaMacConfirmQueueInit>:
{
 800794c:	b538      	push	{r3, r4, r5, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800794e:	4c09      	ldr	r4, [pc, #36]	; (8007974 <LoRaMacConfirmQueueInit+0x28>)
{
 8007950:	4601      	mov	r1, r0
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8007952:	f104 030c 	add.w	r3, r4, #12
    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8007956:	4618      	mov	r0, r3
    ConfirmQueueCtx.Primitives = primitives;
 8007958:	6021      	str	r1, [r4, #0]
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800795a:	2500      	movs	r5, #0
    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800795c:	2214      	movs	r2, #20
 800795e:	21ff      	movs	r1, #255	; 0xff
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8007960:	e9c4 3301 	strd	r3, r3, [r4, #4]
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8007964:	f884 5020 	strb.w	r5, [r4, #32]
    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8007968:	f7fb fa90 	bl	8002e8c <memset1>
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8007972:	bd38      	pop	{r3, r4, r5, pc}
 8007974:	20000564 	.word	0x20000564

08007978 <LoRaMacConfirmQueueAdd>:
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8007978:	4b04      	ldr	r3, [pc, #16]	; (800798c <LoRaMacConfirmQueueAdd+0x14>)
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800797a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800797e:	2b04      	cmp	r3, #4
 8007980:	d801      	bhi.n	8007986 <LoRaMacConfirmQueueAdd+0xe>
 8007982:	f7ff bfc3 	b.w	800790c <LoRaMacConfirmQueueAdd.part.0>
}
 8007986:	2000      	movs	r0, #0
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	20000564 	.word	0x20000564

08007990 <LoRaMacConfirmQueueSetStatus>:

    return true;
}

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8007990:	b470      	push	{r4, r5, r6}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8007992:	4d0c      	ldr	r5, [pc, #48]	; (80079c4 <LoRaMacConfirmQueueSetStatus+0x34>)
 8007994:	f895 6020 	ldrb.w	r6, [r5, #32]
    if( count == 0 )
 8007998:	b18e      	cbz	r6, 80079be <LoRaMacConfirmQueueSetStatus+0x2e>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800799a:	686b      	ldr	r3, [r5, #4]
 800799c:	2200      	movs	r2, #0
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800799e:	351c      	adds	r5, #28
 80079a0:	e007      	b.n	80079b2 <LoRaMacConfirmQueueSetStatus+0x22>
 80079a2:	3201      	adds	r2, #1
 80079a4:	42ab      	cmp	r3, r5
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80079a6:	b2d4      	uxtb	r4, r2
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80079a8:	bf0c      	ite	eq
 80079aa:	4b07      	ldreq	r3, [pc, #28]	; (80079c8 <LoRaMacConfirmQueueSetStatus+0x38>)
        bufferPointer++;
 80079ac:	3304      	addne	r3, #4
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80079ae:	42a6      	cmp	r6, r4
 80079b0:	d905      	bls.n	80079be <LoRaMacConfirmQueueSetStatus+0x2e>
        if( element->Request == request )
 80079b2:	781c      	ldrb	r4, [r3, #0]
 80079b4:	428c      	cmp	r4, r1
 80079b6:	d1f4      	bne.n	80079a2 <LoRaMacConfirmQueueSetStatus+0x12>
        if( element != NULL )
        {
            element->Status = status;
            element->ReadyToHandle = true;
 80079b8:	2201      	movs	r2, #1
            element->Status = status;
 80079ba:	7058      	strb	r0, [r3, #1]
            element->ReadyToHandle = true;
 80079bc:	709a      	strb	r2, [r3, #2]
        }
    }
}
 80079be:	bc70      	pop	{r4, r5, r6}
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	20000564 	.word	0x20000564
 80079c8:	20000570 	.word	0x20000570

080079cc <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80079cc:	b430      	push	{r4, r5}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80079ce:	4c0c      	ldr	r4, [pc, #48]	; (8007a00 <LoRaMacConfirmQueueGetStatus+0x34>)
 80079d0:	f894 5020 	ldrb.w	r5, [r4, #32]
    if( count == 0 )
 80079d4:	b18d      	cbz	r5, 80079fa <LoRaMacConfirmQueueGetStatus+0x2e>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80079d6:	6863      	ldr	r3, [r4, #4]
 80079d8:	2200      	movs	r2, #0
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80079da:	341c      	adds	r4, #28
 80079dc:	e007      	b.n	80079ee <LoRaMacConfirmQueueGetStatus+0x22>
 80079de:	3201      	adds	r2, #1
 80079e0:	42a3      	cmp	r3, r4
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80079e2:	b2d1      	uxtb	r1, r2
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80079e4:	bf0c      	ite	eq
 80079e6:	4b07      	ldreq	r3, [pc, #28]	; (8007a04 <LoRaMacConfirmQueueGetStatus+0x38>)
        bufferPointer++;
 80079e8:	3304      	addne	r3, #4
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80079ea:	428d      	cmp	r5, r1
 80079ec:	d905      	bls.n	80079fa <LoRaMacConfirmQueueGetStatus+0x2e>
        if( element->Request == request )
 80079ee:	7819      	ldrb	r1, [r3, #0]
 80079f0:	4281      	cmp	r1, r0
 80079f2:	d1f4      	bne.n	80079de <LoRaMacConfirmQueueGetStatus+0x12>
        if( element != NULL )
        {
            return element->Status;
 80079f4:	7858      	ldrb	r0, [r3, #1]
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
}
 80079f6:	bc30      	pop	{r4, r5}
 80079f8:	4770      	bx	lr
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 80079fa:	2001      	movs	r0, #1
}
 80079fc:	bc30      	pop	{r4, r5}
 80079fe:	4770      	bx	lr
 8007a00:	20000564 	.word	0x20000564
 8007a04:	20000570 	.word	0x20000570

08007a08 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8007a08:	490c      	ldr	r1, [pc, #48]	; (8007a3c <LoRaMacConfirmQueueSetStatusCmn+0x34>)
    if( count == 0 )
 8007a0a:	f891 2020 	ldrb.w	r2, [r1, #32]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8007a0e:	684b      	ldr	r3, [r1, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8007a10:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
    if( count == 0 )
 8007a14:	b182      	cbz	r2, 8007a38 <LoRaMacConfirmQueueSetStatusCmn+0x30>
{
 8007a16:	b430      	push	{r4, r5}
 8007a18:	311c      	adds	r1, #28
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
 8007a1a:	f851 4c14 	ldr.w	r4, [r1, #-20]
                element->ReadyToHandle = true;
 8007a1e:	2501      	movs	r5, #1
            if( element->RestrictCommonReadyToHandle == false )
 8007a20:	78da      	ldrb	r2, [r3, #3]
            element->Status = status;
 8007a22:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
 8007a24:	b902      	cbnz	r2, 8007a28 <LoRaMacConfirmQueueSetStatusCmn+0x20>
                element->ReadyToHandle = true;
 8007a26:	709d      	strb	r5, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8007a28:	428b      	cmp	r3, r1
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8007a2a:	bf0c      	ite	eq
 8007a2c:	4b04      	ldreq	r3, [pc, #16]	; (8007a40 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
        bufferPointer++;
 8007a2e:	3304      	addne	r3, #4
        }while( element != ConfirmQueueCtx.BufferEnd );
 8007a30:	429c      	cmp	r4, r3
 8007a32:	d1f5      	bne.n	8007a20 <LoRaMacConfirmQueueSetStatusCmn+0x18>
    }
}
 8007a34:	bc30      	pop	{r4, r5}
 8007a36:	4770      	bx	lr
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	20000564 	.word	0x20000564
 8007a40:	20000570 	.word	0x20000570

08007a44 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8007a44:	b430      	push	{r4, r5}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8007a46:	4d0c      	ldr	r5, [pc, #48]	; (8007a78 <LoRaMacConfirmQueueIsCmdActive+0x34>)
 8007a48:	f895 4020 	ldrb.w	r4, [r5, #32]
    if( count == 0 )
 8007a4c:	b18c      	cbz	r4, 8007a72 <LoRaMacConfirmQueueIsCmdActive+0x2e>
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8007a4e:	686b      	ldr	r3, [r5, #4]
 8007a50:	2200      	movs	r2, #0
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8007a52:	351c      	adds	r5, #28
 8007a54:	e007      	b.n	8007a66 <LoRaMacConfirmQueueIsCmdActive+0x22>
 8007a56:	3201      	adds	r2, #1
 8007a58:	42ab      	cmp	r3, r5
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8007a5a:	b2d1      	uxtb	r1, r2
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8007a5c:	bf0c      	ite	eq
 8007a5e:	4b07      	ldreq	r3, [pc, #28]	; (8007a7c <LoRaMacConfirmQueueIsCmdActive+0x38>)
        bufferPointer++;
 8007a60:	3304      	addne	r3, #4
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8007a62:	428c      	cmp	r4, r1
 8007a64:	d905      	bls.n	8007a72 <LoRaMacConfirmQueueIsCmdActive+0x2e>
        if( element->Request == request )
 8007a66:	7819      	ldrb	r1, [r3, #0]
 8007a68:	4281      	cmp	r1, r0
 8007a6a:	d1f4      	bne.n	8007a56 <LoRaMacConfirmQueueIsCmdActive+0x12>
    {
        return true;
 8007a6c:	2001      	movs	r0, #1
    }
    return false;
}
 8007a6e:	bc30      	pop	{r4, r5}
 8007a70:	4770      	bx	lr
    return false;
 8007a72:	2000      	movs	r0, #0
}
 8007a74:	bc30      	pop	{r4, r5}
 8007a76:	4770      	bx	lr
 8007a78:	20000564 	.word	0x20000564
 8007a7c:	20000570 	.word	0x20000570

08007a80 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8007a80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8007a84:	4c29      	ldr	r4, [pc, #164]	; (8007b2c <LoRaMacConfirmQueueHandleCb+0xac>)
 8007a86:	f894 5020 	ldrb.w	r5, [r4, #32]
{
 8007a8a:	b083      	sub	sp, #12
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8007a8c:	2d00      	cmp	r5, #0
 8007a8e:	d046      	beq.n	8007b1e <LoRaMacConfirmQueueHandleCb+0x9e>
 8007a90:	4681      	mov	r9, r0
 8007a92:	f04f 0800 	mov.w	r8, #0
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8007a96:	f104 061c 	add.w	r6, r4, #28
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8007a9a:	f104 070c 	add.w	r7, r4, #12
 8007a9e:	e014      	b.n	8007aca <LoRaMacConfirmQueueHandleCb+0x4a>
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;

        if( readyToHandle == true )
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8007aa0:	6823      	ldr	r3, [r4, #0]
 8007aa2:	4648      	mov	r0, r9
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	4798      	blx	r3
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8007aa8:	f894 3020 	ldrb.w	r3, [r4, #32]
    if( count == 0 )
 8007aac:	b13b      	cbz	r3, 8007abe <LoRaMacConfirmQueueHandleCb+0x3e>
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8007aae:	6862      	ldr	r2, [r4, #4]
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8007ab0:	3b01      	subs	r3, #1
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8007ab2:	42b2      	cmp	r2, r6
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8007ab4:	f884 3020 	strb.w	r3, [r4, #32]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8007ab8:	d036      	beq.n	8007b28 <LoRaMacConfirmQueueHandleCb+0xa8>
        bufferPointer++;
 8007aba:	3204      	adds	r2, #4
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8007abc:	6062      	str	r2, [r4, #4]
    for( uint8_t i = 0; i < nbElements; i++ )
 8007abe:	f108 0801 	add.w	r8, r8, #1
 8007ac2:	fa5f f388 	uxtb.w	r3, r8
 8007ac6:	429d      	cmp	r5, r3
 8007ac8:	d929      	bls.n	8007b1e <LoRaMacConfirmQueueHandleCb+0x9e>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8007aca:	6863      	ldr	r3, [r4, #4]
 8007acc:	7818      	ldrb	r0, [r3, #0]
 8007ace:	f889 0000 	strb.w	r0, [r9]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8007ad2:	7859      	ldrb	r1, [r3, #1]
 8007ad4:	f889 1001 	strb.w	r1, [r9, #1]
        if( readyToHandle == true )
 8007ad8:	789a      	ldrb	r2, [r3, #2]
 8007ada:	2a00      	cmp	r2, #0
 8007adc:	d1e0      	bne.n	8007aa0 <LoRaMacConfirmQueueHandleCb+0x20>
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8007ade:	f894 2020 	ldrb.w	r2, [r4, #32]
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8007ae2:	f893 c003 	ldrb.w	ip, [r3, #3]
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8007ae6:	f88d 0004 	strb.w	r0, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8007aea:	f88d 1005 	strb.w	r1, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8007aee:	f88d c007 	strb.w	ip, [sp, #7]
    if( count == 0 )
 8007af2:	b15a      	cbz	r2, 8007b0c <LoRaMacConfirmQueueHandleCb+0x8c>
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8007af4:	3a01      	subs	r2, #1
 8007af6:	b2d2      	uxtb	r2, r2
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8007af8:	42b3      	cmp	r3, r6
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8007afa:	f884 2020 	strb.w	r2, [r4, #32]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8007afe:	d011      	beq.n	8007b24 <LoRaMacConfirmQueueHandleCb+0xa4>
        bufferPointer++;
 8007b00:	3304      	adds	r3, #4
 8007b02:	f894 2020 	ldrb.w	r2, [r4, #32]
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8007b06:	6063      	str	r3, [r4, #4]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8007b08:	2a04      	cmp	r2, #4
 8007b0a:	d8d8      	bhi.n	8007abe <LoRaMacConfirmQueueHandleCb+0x3e>
 8007b0c:	a801      	add	r0, sp, #4
 8007b0e:	f108 0801 	add.w	r8, r8, #1
 8007b12:	f7ff fefb 	bl	800790c <LoRaMacConfirmQueueAdd.part.0>
    for( uint8_t i = 0; i < nbElements; i++ )
 8007b16:	fa5f f388 	uxtb.w	r3, r8
 8007b1a:	429d      	cmp	r5, r3
 8007b1c:	d8d5      	bhi.n	8007aca <LoRaMacConfirmQueueHandleCb+0x4a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
        }
    }
}
 8007b1e:	b003      	add	sp, #12
 8007b20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8007b24:	6067      	str	r7, [r4, #4]
        if( readyToHandle == false )
 8007b26:	e7ef      	b.n	8007b08 <LoRaMacConfirmQueueHandleCb+0x88>
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8007b28:	6067      	str	r7, [r4, #4]
        if( readyToHandle == false )
 8007b2a:	e7c8      	b.n	8007abe <LoRaMacConfirmQueueHandleCb+0x3e>
 8007b2c:	20000564 	.word	0x20000564

08007b30 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8007b30:	4b01      	ldr	r3, [pc, #4]	; (8007b38 <LoRaMacConfirmQueueGetCnt+0x8>)
}
 8007b32:	f893 0020 	ldrb.w	r0, [r3, #32]
 8007b36:	4770      	bx	lr
 8007b38:	20000564 	.word	0x20000564

08007b3c <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8007b3c:	4b03      	ldr	r3, [pc, #12]	; (8007b4c <LoRaMacConfirmQueueIsFull+0x10>)
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8007b3e:	f893 0020 	ldrb.w	r0, [r3, #32]
    }
    else
    {
        return false;
    }
}
 8007b42:	2804      	cmp	r0, #4
 8007b44:	bf94      	ite	ls
 8007b46:	2000      	movls	r0, #0
 8007b48:	2001      	movhi	r0, #1
 8007b4a:	4770      	bx	lr
 8007b4c:	20000564 	.word	0x20000564

08007b50 <GetLastFcntDown>:
{
    if( lastDown == NULL )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 8007b50:	3801      	subs	r0, #1
 8007b52:	2806      	cmp	r0, #6
 8007b54:	d835      	bhi.n	8007bc2 <GetLastFcntDown+0x72>
 8007b56:	e8df f000 	tbb	[pc, r0]
 8007b5a:	120a      	.short	0x120a
 8007b5c:	2e28221a 	.word	0x2e28221a
 8007b60:	04          	.byte	0x04
 8007b61:	00          	.byte	0x00
            *lastDown = CryptoNvm->FCntList.McFCntDown[2];
            break;
#endif
#if ( LORAMAC_MAX_MC_CTX > 3 )
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
 8007b62:	4b19      	ldr	r3, [pc, #100]	; (8007bc8 <GetLastFcntDown+0x78>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b68:	600b      	str	r3, [r1, #0]
            break;
#endif
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8007b6a:	2000      	movs	r0, #0
            break;
 8007b6c:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8007b6e:	4b16      	ldr	r3, [pc, #88]	; (8007bc8 <GetLastFcntDown+0x78>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	691a      	ldr	r2, [r3, #16]
 8007b74:	600a      	str	r2, [r1, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8007b76:	691a      	ldr	r2, [r3, #16]
 8007b78:	631a      	str	r2, [r3, #48]	; 0x30
    return LORAMAC_CRYPTO_SUCCESS;
 8007b7a:	2000      	movs	r0, #0
            break;
 8007b7c:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8007b7e:	4b12      	ldr	r3, [pc, #72]	; (8007bc8 <GetLastFcntDown+0x78>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	695a      	ldr	r2, [r3, #20]
 8007b84:	600a      	str	r2, [r1, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8007b86:	695a      	ldr	r2, [r3, #20]
 8007b88:	631a      	str	r2, [r3, #48]	; 0x30
    return LORAMAC_CRYPTO_SUCCESS;
 8007b8a:	2000      	movs	r0, #0
            break;
 8007b8c:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8007b8e:	4b0e      	ldr	r3, [pc, #56]	; (8007bc8 <GetLastFcntDown+0x78>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	699a      	ldr	r2, [r3, #24]
 8007b94:	600a      	str	r2, [r1, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8007b96:	699a      	ldr	r2, [r3, #24]
 8007b98:	631a      	str	r2, [r3, #48]	; 0x30
    return LORAMAC_CRYPTO_SUCCESS;
 8007b9a:	2000      	movs	r0, #0
            break;
 8007b9c:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8007b9e:	4b0a      	ldr	r3, [pc, #40]	; (8007bc8 <GetLastFcntDown+0x78>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	69db      	ldr	r3, [r3, #28]
 8007ba4:	600b      	str	r3, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8007ba6:	2000      	movs	r0, #0
            break;
 8007ba8:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[1];
 8007baa:	4b07      	ldr	r3, [pc, #28]	; (8007bc8 <GetLastFcntDown+0x78>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	6a1b      	ldr	r3, [r3, #32]
 8007bb0:	600b      	str	r3, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8007bb2:	2000      	movs	r0, #0
            break;
 8007bb4:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[2];
 8007bb6:	4b04      	ldr	r3, [pc, #16]	; (8007bc8 <GetLastFcntDown+0x78>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbc:	600b      	str	r3, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8007bbe:	2000      	movs	r0, #0
            break;
 8007bc0:	4770      	bx	lr
    return LORAMAC_CRYPTO_SUCCESS;
 8007bc2:	2005      	movs	r0, #5
}
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop
 8007bc8:	20000588 	.word	0x20000588

08007bcc <DeriveSessionKey11x>:
    if( joinEUI == 0 )
 8007bcc:	b3d2      	cbz	r2, 8007c44 <DeriveSessionKey11x+0x78>
{
 8007bce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bd0:	b085      	sub	sp, #20
    uint8_t compBase[16] = { 0 };
 8007bd2:	2500      	movs	r5, #0
    switch( keyID )
 8007bd4:	2806      	cmp	r0, #6
 8007bd6:	460e      	mov	r6, r1
    uint8_t compBase[16] = { 0 };
 8007bd8:	e9cd 5501 	strd	r5, r5, [sp, #4]
 8007bdc:	4604      	mov	r4, r0
 8007bde:	461f      	mov	r7, r3
 8007be0:	4611      	mov	r1, r2
 8007be2:	9503      	str	r5, [sp, #12]
    switch( keyID )
 8007be4:	d020      	beq.n	8007c28 <DeriveSessionKey11x+0x5c>
 8007be6:	2807      	cmp	r0, #7
 8007be8:	d023      	beq.n	8007c32 <DeriveSessionKey11x+0x66>
 8007bea:	2805      	cmp	r0, #5
 8007bec:	d025      	beq.n	8007c3a <DeriveSessionKey11x+0x6e>
            compBase[0] = 0x01;
 8007bee:	2001      	movs	r0, #1
 8007bf0:	f88d 0000 	strb.w	r0, [sp]
    KeyIdentifier_t rootKeyId = NWK_KEY;
 8007bf4:	4605      	mov	r5, r0
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8007bf6:	ea4f 2c16 	mov.w	ip, r6, lsr #8
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8007bfa:	0c33      	lsrs	r3, r6, #16
    memcpyr( compBase + 4, joinEUI, 8 );
 8007bfc:	a801      	add	r0, sp, #4
 8007bfe:	2208      	movs	r2, #8
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8007c00:	f88d c002 	strb.w	ip, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8007c04:	f88d 3003 	strb.w	r3, [sp, #3]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8007c08:	f88d 6001 	strb.w	r6, [sp, #1]
    memcpyr( compBase + 4, joinEUI, 8 );
 8007c0c:	f7fb f92c 	bl	8002e68 <memcpyr>
    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8007c10:	4622      	mov	r2, r4
 8007c12:	4629      	mov	r1, r5
 8007c14:	4668      	mov	r0, sp
    compBase[12] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8007c16:	f8ad 700c 	strh.w	r7, [sp, #12]
    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8007c1a:	f002 fa7b 	bl	800a114 <SecureElementDeriveAndStoreKey>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	bf18      	it	ne
 8007c22:	200e      	movne	r0, #14
}
 8007c24:	b005      	add	sp, #20
 8007c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
            compBase[0] = 0x04;
 8007c28:	2304      	movs	r3, #4
 8007c2a:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = NWK_KEY;
 8007c2e:	2501      	movs	r5, #1
            break;
 8007c30:	e7e1      	b.n	8007bf6 <DeriveSessionKey11x+0x2a>
            compBase[0] = 0x02;
 8007c32:	2302      	movs	r3, #2
 8007c34:	f88d 3000 	strb.w	r3, [sp]
            break;
 8007c38:	e7dd      	b.n	8007bf6 <DeriveSessionKey11x+0x2a>
            compBase[0] = 0x03;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = NWK_KEY;
 8007c40:	2501      	movs	r5, #1
            break;
 8007c42:	e7d8      	b.n	8007bf6 <DeriveSessionKey11x+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8007c44:	2009      	movs	r0, #9
}
 8007c46:	4770      	bx	lr

08007c48 <DeriveSessionKey10x>:
{
 8007c48:	b570      	push	{r4, r5, r6, lr}
 8007c4a:	4614      	mov	r4, r2
 8007c4c:	b084      	sub	sp, #16
    switch( keyID )
 8007c4e:	2807      	cmp	r0, #7
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8007c50:	4602      	mov	r2, r0
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8007c52:	ea4f 4014 	mov.w	r0, r4, lsr #16
 8007c56:	f88d 0006 	strb.w	r0, [sp, #6]
    uint8_t compBase[16] = { 0 };
 8007c5a:	f04f 0000 	mov.w	r0, #0
 8007c5e:	e9cd 0002 	strd	r0, r0, [sp, #8]
            compBase[0] = 0x01;
 8007c62:	bf0c      	ite	eq
 8007c64:	2502      	moveq	r5, #2
 8007c66:	2501      	movne	r5, #1
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8007c68:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8007c6c:	f8ad 4004 	strh.w	r4, [sp, #4]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8007c70:	0a1e      	lsrs	r6, r3, #8
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8007c72:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8007c76:	0a0c      	lsrs	r4, r1, #8
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8007c78:	0c0b      	lsrs	r3, r1, #16
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8007c7a:	4668      	mov	r0, sp
 8007c7c:	2101      	movs	r1, #1
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8007c7e:	f88d 6008 	strb.w	r6, [sp, #8]
 8007c82:	f88d 5000 	strb.w	r5, [sp]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8007c86:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8007c8a:	f88d 3003 	strb.w	r3, [sp, #3]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8007c8e:	f002 fa41 	bl	800a114 <SecureElementDeriveAndStoreKey>
 8007c92:	2800      	cmp	r0, #0
}
 8007c94:	bf18      	it	ne
 8007c96:	200e      	movne	r0, #14
 8007c98:	b004      	add	sp, #16
 8007c9a:	bd70      	pop	{r4, r5, r6, pc}

08007c9c <PayloadEncrypt>:
{
 8007c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca0:	b088      	sub	sp, #32
 8007ca2:	460e      	mov	r6, r1
 8007ca4:	4690      	mov	r8, r2
 8007ca6:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8007caa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d04c      	beq.n	8007d4a <PayloadEncrypt+0xae>
    uint8_t sBlock[16] = { 0 };
 8007cb0:	2700      	movs	r7, #0
    uint8_t aBlock[16] = { 0 };
 8007cb2:	e9cd 7704 	strd	r7, r7, [sp, #16]
 8007cb6:	4604      	mov	r4, r0
    aBlock[10] = frameCounter & 0xFF;
 8007cb8:	f8ad 201a 	strh.w	r2, [sp, #26]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8007cbc:	0c18      	lsrs	r0, r3, #16
    aBlock[0] = 0x01;
 8007cbe:	2501      	movs	r5, #1
    aBlock[5] = dir;
 8007cc0:	f88d 1015 	strb.w	r1, [sp, #21]
    aBlock[6] = address & 0xFF;
 8007cc4:	f8ad 3016 	strh.w	r3, [sp, #22]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8007cc8:	0c11      	lsrs	r1, r2, #16
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8007cca:	0e1b      	lsrs	r3, r3, #24
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8007ccc:	0e12      	lsrs	r2, r2, #24
    uint8_t aBlock[16] = { 0 };
 8007cce:	9707      	str	r7, [sp, #28]
    uint8_t sBlock[16] = { 0 };
 8007cd0:	e9cd 7700 	strd	r7, r7, [sp]
 8007cd4:	e9cd 7702 	strd	r7, r7, [sp, #8]
    aBlock[0] = 0x01;
 8007cd8:	f88d 5010 	strb.w	r5, [sp, #16]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8007cdc:	f88d 0018 	strb.w	r0, [sp, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8007ce0:	f88d 3019 	strb.w	r3, [sp, #25]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8007ce4:	f88d 101c 	strb.w	r1, [sp, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8007ce8:	f88d 201d 	strb.w	r2, [sp, #29]
    while( size > 0 )
 8007cec:	b32e      	cbz	r6, 8007d3a <PayloadEncrypt+0x9e>
 8007cee:	b2fb      	uxtb	r3, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8007cf0:	2110      	movs	r1, #16
 8007cf2:	011d      	lsls	r5, r3, #4
        aBlock[15] = ctr & 0xFF;
 8007cf4:	f103 0c01 	add.w	ip, r3, #1
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8007cf8:	4642      	mov	r2, r8
 8007cfa:	466b      	mov	r3, sp
 8007cfc:	eb0d 0001 	add.w	r0, sp, r1
 8007d00:	b2ed      	uxtb	r5, r5
        aBlock[15] = ctr & 0xFF;
 8007d02:	f88d c01f 	strb.w	ip, [sp, #31]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8007d06:	f002 f9e3 	bl	800a0d0 <SecureElementAesEncrypt>
 8007d0a:	b9d0      	cbnz	r0, 8007d42 <PayloadEncrypt+0xa6>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8007d0c:	2e10      	cmp	r6, #16
 8007d0e:	46b4      	mov	ip, r6
 8007d10:	bfa8      	it	ge
 8007d12:	f04f 0c10 	movge.w	ip, #16
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8007d16:	ab08      	add	r3, sp, #32
 8007d18:	182a      	adds	r2, r5, r0
 8007d1a:	1819      	adds	r1, r3, r0
 8007d1c:	5ca3      	ldrb	r3, [r4, r2]
 8007d1e:	f811 1c20 	ldrb.w	r1, [r1, #-32]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8007d22:	3001      	adds	r0, #1
 8007d24:	b2c0      	uxtb	r0, r0
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8007d26:	404b      	eors	r3, r1
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8007d28:	4560      	cmp	r0, ip
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8007d2a:	54a3      	strb	r3, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8007d2c:	dbf3      	blt.n	8007d16 <PayloadEncrypt+0x7a>
        size -= 16;
 8007d2e:	3e10      	subs	r6, #16
 8007d30:	b236      	sxth	r6, r6
    while( size > 0 )
 8007d32:	2e00      	cmp	r6, #0
 8007d34:	f107 0701 	add.w	r7, r7, #1
 8007d38:	dcd9      	bgt.n	8007cee <PayloadEncrypt+0x52>
    return LORAMAC_CRYPTO_SUCCESS;
 8007d3a:	2000      	movs	r0, #0
}
 8007d3c:	b008      	add	sp, #32
 8007d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8007d42:	200e      	movs	r0, #14
}
 8007d44:	b008      	add	sp, #32
 8007d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8007d4a:	2009      	movs	r0, #9
}
 8007d4c:	b008      	add	sp, #32
 8007d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d52:	bf00      	nop

08007d54 <FOptsEncrypt>:
{
 8007d54:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( CryptoNvm->LrWanVersion.Value > 0x01010000 )
 8007d56:	4c2e      	ldr	r4, [pc, #184]	; (8007e10 <FOptsEncrypt+0xbc>)
 8007d58:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8007e14 <FOptsEncrypt+0xc0>
 8007d5c:	6827      	ldr	r7, [r4, #0]
{
 8007d5e:	b089      	sub	sp, #36	; 0x24
    uint8_t sBlock[16] = { 0 };
 8007d60:	2400      	movs	r4, #0
 8007d62:	e9cd 4400 	strd	r4, r4, [sp]
 8007d66:	e9cd 4402 	strd	r4, r4, [sp, #8]
    uint8_t aBlock[16] = { 0 };
 8007d6a:	e9cd 4406 	strd	r4, r4, [sp, #24]
    aBlock[0] = 0x01;
 8007d6e:	f04f 0e01 	mov.w	lr, #1
    uint8_t aBlock[16] = { 0 };
 8007d72:	9404      	str	r4, [sp, #16]
 8007d74:	9405      	str	r4, [sp, #20]
    aBlock[0] = 0x01;
 8007d76:	f88d e010 	strb.w	lr, [sp, #16]
    if( CryptoNvm->LrWanVersion.Value > 0x01010000 )
 8007d7a:	683f      	ldr	r7, [r7, #0]
 8007d7c:	4567      	cmp	r7, ip
{
 8007d7e:	e9dd 650e 	ldrd	r6, r5, [sp, #56]	; 0x38
 8007d82:	4604      	mov	r4, r0
    if( CryptoNvm->LrWanVersion.Value > 0x01010000 )
 8007d84:	d903      	bls.n	8007d8e <FOptsEncrypt+0x3a>
        switch( fCntID )
 8007d86:	4573      	cmp	r3, lr
 8007d88:	d822      	bhi.n	8007dd0 <FOptsEncrypt+0x7c>
                aBlock[4] = 0x01;
 8007d8a:	f88d e014 	strb.w	lr, [sp, #20]
    if( CryptoNvm->LrWanVersion.Value > 0x01010000 )
 8007d8e:	4b21      	ldr	r3, [pc, #132]	; (8007e14 <FOptsEncrypt+0xc0>)
    aBlock[5] = dir;
 8007d90:	f88d 2015 	strb.w	r2, [sp, #21]
    if( CryptoNvm->LrWanVersion.Value > 0x01010000 )
 8007d94:	429f      	cmp	r7, r3
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8007d96:	ea4f 4211 	mov.w	r2, r1, lsr #16
    aBlock[6] = address & 0xFF;
 8007d9a:	f8ad 1016 	strh.w	r1, [sp, #22]
    aBlock[10] = frameCounter & 0xFF;
 8007d9e:	f8ad 601a 	strh.w	r6, [sp, #26]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8007da2:	ea4f 6111 	mov.w	r1, r1, lsr #24
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8007da6:	f88d 2018 	strb.w	r2, [sp, #24]
        aBlock[15] = 0x01;
 8007daa:	bf88      	it	hi
 8007dac:	2301      	movhi	r3, #1
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8007dae:	ea4f 4216 	mov.w	r2, r6, lsr #16
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8007db2:	ea4f 6616 	mov.w	r6, r6, lsr #24
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8007db6:	f88d 1019 	strb.w	r1, [sp, #25]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8007dba:	f88d 201c 	strb.w	r2, [sp, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8007dbe:	f88d 601d 	strb.w	r6, [sp, #29]
        aBlock[15] = 0x01;
 8007dc2:	bf88      	it	hi
 8007dc4:	f88d 301f 	strbhi.w	r3, [sp, #31]
    if( size > 0 )
 8007dc8:	b93c      	cbnz	r4, 8007dda <FOptsEncrypt+0x86>
    return LORAMAC_CRYPTO_SUCCESS;
 8007dca:	2000      	movs	r0, #0
}
 8007dcc:	b009      	add	sp, #36	; 0x24
 8007dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        switch( fCntID )
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	d118      	bne.n	8007e06 <FOptsEncrypt+0xb2>
                aBlock[4] = 0x02;
 8007dd4:	f88d 3014 	strb.w	r3, [sp, #20]
                break;
 8007dd8:	e7d9      	b.n	8007d8e <FOptsEncrypt+0x3a>
        if( SecureElementAesEncrypt( aBlock, 16, NWK_S_ENC_KEY, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8007dda:	2110      	movs	r1, #16
 8007ddc:	466b      	mov	r3, sp
 8007dde:	2206      	movs	r2, #6
 8007de0:	eb0d 0001 	add.w	r0, sp, r1
 8007de4:	f002 f974 	bl	800a0d0 <SecureElementAesEncrypt>
 8007de8:	4603      	mov	r3, r0
 8007dea:	b978      	cbnz	r0, 8007e0c <FOptsEncrypt+0xb8>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8007dec:	aa08      	add	r2, sp, #32
 8007dee:	18d1      	adds	r1, r2, r3
 8007df0:	5cea      	ldrb	r2, [r5, r3]
 8007df2:	f811 0c20 	ldrb.w	r0, [r1, #-32]
        for( uint8_t i = 0; i < size; i++ )
 8007df6:	1c59      	adds	r1, r3, #1
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8007df8:	4042      	eors	r2, r0
        for( uint8_t i = 0; i < size; i++ )
 8007dfa:	b2c8      	uxtb	r0, r1
 8007dfc:	42a0      	cmp	r0, r4
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8007dfe:	54ea      	strb	r2, [r5, r3]
        for( uint8_t i = 0; i < size; i++ )
 8007e00:	4603      	mov	r3, r0
 8007e02:	d3f3      	bcc.n	8007dec <FOptsEncrypt+0x98>
 8007e04:	e7e1      	b.n	8007dca <FOptsEncrypt+0x76>
        switch( fCntID )
 8007e06:	2008      	movs	r0, #8
}
 8007e08:	b009      	add	sp, #36	; 0x24
 8007e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8007e0c:	200e      	movs	r0, #14
 8007e0e:	e7dd      	b.n	8007dcc <FOptsEncrypt+0x78>
 8007e10:	20000588 	.word	0x20000588
 8007e14:	01010000 	.word	0x01010000

08007e18 <LoRaMacCryptoDeriveMcKEKey.part.0>:
    }

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
 8007e18:	b500      	push	{lr}
 8007e1a:	b085      	sub	sp, #20
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 8007e1c:	2300      	movs	r3, #0

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8007e1e:	227f      	movs	r2, #127	; 0x7f
 8007e20:	2108      	movs	r1, #8
 8007e22:	4668      	mov	r0, sp
    uint8_t compBase[16] = { 0 };
 8007e24:	e9cd 3300 	strd	r3, r3, [sp]
 8007e28:	9302      	str	r3, [sp, #8]
 8007e2a:	9303      	str	r3, [sp, #12]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8007e2c:	f002 f972 	bl	800a114 <SecureElementDeriveAndStoreKey>
 8007e30:	2800      	cmp	r0, #0
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 8007e32:	bf18      	it	ne
 8007e34:	200e      	movne	r0, #14
 8007e36:	b005      	add	sp, #20
 8007e38:	f85d fb04 	ldr.w	pc, [sp], #4

08007e3c <VerifyCmacB0.constprop.0>:
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 8007e3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e40:	b0c5      	sub	sp, #276	; 0x114
 8007e42:	e9dd 984c 	ldrd	r9, r8, [sp, #304]	; 0x130
    if( msg == 0 )
 8007e46:	2800      	cmp	r0, #0
 8007e48:	d055      	beq.n	8007ef6 <VerifyCmacB0.constprop.0+0xba>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8007e4a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8007e4e:	460c      	mov	r4, r1
 8007e50:	d84d      	bhi.n	8007eee <VerifyCmacB0.constprop.0+0xb2>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8007e52:	4617      	mov	r7, r2
 8007e54:	4605      	mov	r5, r0
 8007e56:	f44f 7288 	mov.w	r2, #272	; 0x110
 8007e5a:	4668      	mov	r0, sp
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	461e      	mov	r6, r3
 8007e60:	f7fb f814 	bl	8002e8c <memset1>
    b0[0] = 0x49;
 8007e64:	2349      	movs	r3, #73	; 0x49
 8007e66:	f88d 3000 	strb.w	r3, [sp]
    if( ( isAck == true ) && ( dir == DOWNLINK ) )
 8007e6a:	bbb6      	cbnz	r6, 8007eda <VerifyCmacB0.constprop.0+0x9e>
        b0[1] = 0x00;
 8007e6c:	f88d 6001 	strb.w	r6, [sp, #1]
        b0[2] = 0x00;
 8007e70:	f88d 6002 	strb.w	r6, [sp, #2]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8007e74:	4629      	mov	r1, r5
    b0[3] = 0x00;
 8007e76:	2300      	movs	r3, #0
    b0[4] = 0x00;
 8007e78:	f44f 7580 	mov.w	r5, #256	; 0x100
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8007e7c:	ea4f 4219 	mov.w	r2, r9, lsr #16
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8007e80:	ea4f 6019 	mov.w	r0, r9, lsr #24
    b0[3] = 0x00;
 8007e84:	f88d 3003 	strb.w	r3, [sp, #3]
    b0[14] = 0x00;
 8007e88:	f88d 300e 	strb.w	r3, [sp, #14]
    b0[4] = 0x00;
 8007e8c:	f8ad 5004 	strh.w	r5, [sp, #4]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8007e90:	ea4f 6318 	mov.w	r3, r8, lsr #24
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8007e94:	f88d 2008 	strb.w	r2, [sp, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8007e98:	f88d 0009 	strb.w	r0, [sp, #9]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8007e9c:	4622      	mov	r2, r4
 8007e9e:	a804      	add	r0, sp, #16
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8007ea0:	ea4f 4518 	mov.w	r5, r8, lsr #16
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8007ea4:	f88d 300d 	strb.w	r3, [sp, #13]
    b0[6] = devAddr & 0xFF;
 8007ea8:	f8ad 9006 	strh.w	r9, [sp, #6]
    b0[10] = fCnt & 0xFF;
 8007eac:	f8ad 800a 	strh.w	r8, [sp, #10]
    b0[15] = msgLen & 0xFF;
 8007eb0:	f88d 400f 	strb.w	r4, [sp, #15]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8007eb4:	f88d 500c 	strb.w	r5, [sp, #12]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8007eb8:	f7fa ffc8 	bl	8002e4c <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8007ebc:	f104 0110 	add.w	r1, r4, #16
 8007ec0:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 8007ec2:	b289      	uxth	r1, r1
 8007ec4:	463b      	mov	r3, r7
 8007ec6:	4668      	mov	r0, sp
 8007ec8:	f002 f8e0 	bl	800a08c <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 8007ecc:	b110      	cbz	r0, 8007ed4 <VerifyCmacB0.constprop.0+0x98>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8007ece:	2801      	cmp	r0, #1
 8007ed0:	bf18      	it	ne
 8007ed2:	200e      	movne	r0, #14
}
 8007ed4:	b045      	add	sp, #276	; 0x114
 8007ed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        confFCnt = ( uint16_t )( CryptoNvm->FCntList.FCntUp % 65536 );
 8007eda:	4b09      	ldr	r3, [pc, #36]	; (8007f00 <VerifyCmacB0.constprop.0+0xc4>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68db      	ldr	r3, [r3, #12]
        b0[1] = confFCnt & 0xFF;
 8007ee0:	f88d 3001 	strb.w	r3, [sp, #1]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
 8007ee4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8007ee8:	f88d 3002 	strb.w	r3, [sp, #2]
    {
 8007eec:	e7c2      	b.n	8007e74 <VerifyCmacB0.constprop.0+0x38>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8007eee:	200d      	movs	r0, #13
}
 8007ef0:	b045      	add	sp, #276	; 0x114
 8007ef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8007ef6:	2009      	movs	r0, #9
}
 8007ef8:	b045      	add	sp, #276	; 0x114
 8007efa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007efe:	bf00      	nop
 8007f00:	20000588 	.word	0x20000588

08007f04 <LoRaMacCryptoInit>:
    if( nvm == NULL )
 8007f04:	b1b0      	cbz	r0, 8007f34 <LoRaMacCryptoInit+0x30>
{
 8007f06:	b510      	push	{r4, lr}
    CryptoNvm = nvm;
 8007f08:	4c0b      	ldr	r4, [pc, #44]	; (8007f38 <LoRaMacCryptoInit+0x34>)
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8007f0a:	2238      	movs	r2, #56	; 0x38
 8007f0c:	2100      	movs	r1, #0
    CryptoNvm = nvm;
 8007f0e:	6020      	str	r0, [r4, #0]
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8007f10:	f7fa ffbc 	bl	8002e8c <memset1>
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8007f14:	6823      	ldr	r3, [r4, #0]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8007f16:	4a09      	ldr	r2, [pc, #36]	; (8007f3c <LoRaMacCryptoInit+0x38>)
 8007f18:	601a      	str	r2, [r3, #0]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8007f1a:	2000      	movs	r0, #0
 8007f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f20:	e9c3 0203 	strd	r0, r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8007f24:	e9c3 2205 	strd	r2, r2, [r3, #20]
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8007f28:	e9c3 2207 	strd	r2, r2, [r3, #28]
 8007f2c:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8007f30:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007f32:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8007f34:	2008      	movs	r0, #8
}
 8007f36:	4770      	bx	lr
 8007f38:	20000588 	.word	0x20000588
 8007f3c:	01010100 	.word	0x01010100

08007f40 <LoRaMacCryptoSetLrWanVersion>:
    CryptoNvm->LrWanVersion = version;
 8007f40:	4b02      	ldr	r3, [pc, #8]	; (8007f4c <LoRaMacCryptoSetLrWanVersion+0xc>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	6018      	str	r0, [r3, #0]
}
 8007f46:	2000      	movs	r0, #0
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	20000588 	.word	0x20000588

08007f50 <LoRaMacCryptoGetFCntUp>:
    if( currentUp == NULL )
 8007f50:	b130      	cbz	r0, 8007f60 <LoRaMacCryptoGetFCntUp+0x10>
    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8007f52:	4b04      	ldr	r3, [pc, #16]	; (8007f64 <LoRaMacCryptoGetFCntUp+0x14>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	6003      	str	r3, [r0, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8007f5c:	2000      	movs	r0, #0
 8007f5e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 8007f60:	2009      	movs	r0, #9
}
 8007f62:	4770      	bx	lr
 8007f64:	20000588 	.word	0x20000588

08007f68 <LoRaMacCryptoGetFCntDown>:
{
 8007f68:	b570      	push	{r4, r5, r6, lr}
 8007f6a:	b082      	sub	sp, #8
    uint32_t lastDown = 0;
 8007f6c:	2500      	movs	r5, #0
 8007f6e:	9501      	str	r5, [sp, #4]
    if( currentDown == NULL )
 8007f70:	b19a      	cbz	r2, 8007f9a <LoRaMacCryptoGetFCntDown+0x32>
    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8007f72:	460e      	mov	r6, r1
 8007f74:	a901      	add	r1, sp, #4
 8007f76:	4614      	mov	r4, r2
 8007f78:	f7ff fdea 	bl	8007b50 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8007f7c:	b940      	cbnz	r0, 8007f90 <LoRaMacCryptoGetFCntDown+0x28>
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8007f7e:	9b01      	ldr	r3, [sp, #4]
 8007f80:	1c5a      	adds	r2, r3, #1
 8007f82:	d007      	beq.n	8007f94 <LoRaMacCryptoGetFCntDown+0x2c>
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8007f84:	b29a      	uxth	r2, r3
 8007f86:	1ab2      	subs	r2, r6, r2
        if( fCntDiff > 0 )
 8007f88:	2a00      	cmp	r2, #0
 8007f8a:	dd09      	ble.n	8007fa0 <LoRaMacCryptoGetFCntDown+0x38>
            *currentDown = lastDown + fCntDiff;
 8007f8c:	4413      	add	r3, r2
 8007f8e:	6023      	str	r3, [r4, #0]
}
 8007f90:	b002      	add	sp, #8
 8007f92:	bd70      	pop	{r4, r5, r6, pc}
        *currentDown = frameFcnt;
 8007f94:	6026      	str	r6, [r4, #0]
}
 8007f96:	b002      	add	sp, #8
 8007f98:	bd70      	pop	{r4, r5, r6, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8007f9a:	2009      	movs	r0, #9
}
 8007f9c:	b002      	add	sp, #8
 8007f9e:	bd70      	pop	{r4, r5, r6, pc}
        else if( fCntDiff == 0 )
 8007fa0:	d007      	beq.n	8007fb2 <LoRaMacCryptoGetFCntDown+0x4a>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8007fa2:	0c1b      	lsrs	r3, r3, #16
 8007fa4:	041b      	lsls	r3, r3, #16
 8007fa6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007faa:	4432      	add	r2, r6
 8007fac:	6022      	str	r2, [r4, #0]
}
 8007fae:	b002      	add	sp, #8
 8007fb0:	bd70      	pop	{r4, r5, r6, pc}
            *currentDown = lastDown;
 8007fb2:	6023      	str	r3, [r4, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8007fb4:	2007      	movs	r0, #7
 8007fb6:	e7eb      	b.n	8007f90 <LoRaMacCryptoGetFCntDown+0x28>

08007fb8 <LoRaMacCryptoGetRJcount>:
    if( rJcount == 0 )
 8007fb8:	b191      	cbz	r1, 8007fe0 <LoRaMacCryptoGetRJcount+0x28>
    switch( fCntID )
 8007fba:	2808      	cmp	r0, #8
 8007fbc:	d00a      	beq.n	8007fd4 <LoRaMacCryptoGetRJcount+0x1c>
 8007fbe:	2809      	cmp	r0, #9
 8007fc0:	d001      	beq.n	8007fc6 <LoRaMacCryptoGetRJcount+0xe>
 8007fc2:	2005      	movs	r0, #5
 8007fc4:	4770      	bx	lr
            *rJcount = CryptoNvm->FCntList.RJcount1 + 1;
 8007fc6:	4b07      	ldr	r3, [pc, #28]	; (8007fe4 <LoRaMacCryptoGetRJcount+0x2c>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007fcc:	3301      	adds	r3, #1
 8007fce:	800b      	strh	r3, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8007fd0:	2000      	movs	r0, #0
            break;
 8007fd2:	4770      	bx	lr
            *rJcount = RJcount0 + 1;
 8007fd4:	4b04      	ldr	r3, [pc, #16]	; (8007fe8 <LoRaMacCryptoGetRJcount+0x30>)
 8007fd6:	881b      	ldrh	r3, [r3, #0]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	800b      	strh	r3, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8007fdc:	2000      	movs	r0, #0
            break;
 8007fde:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 8007fe0:	2009      	movs	r0, #9
}
 8007fe2:	4770      	bx	lr
 8007fe4:	20000588 	.word	0x20000588
 8007fe8:	2000058c 	.word	0x2000058c

08007fec <LoRaMacCryptoSetMulticastReference>:
    if( multicastList == NULL )
 8007fec:	b198      	cbz	r0, 8008016 <LoRaMacCryptoSetMulticastReference+0x2a>
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8007fee:	4b0b      	ldr	r3, [pc, #44]	; (800801c <LoRaMacCryptoSetMulticastReference+0x30>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
{
 8007ff2:	b410      	push	{r4}
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8007ff4:	f103 0120 	add.w	r1, r3, #32
 8007ff8:	f103 041c 	add.w	r4, r3, #28
 8007ffc:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8008000:	3328      	adds	r3, #40	; 0x28
 8008002:	6244      	str	r4, [r0, #36]	; 0x24
 8008004:	6541      	str	r1, [r0, #84]	; 0x54
 8008006:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 800800a:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
}
 800800e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return LORAMAC_CRYPTO_SUCCESS;
 8008012:	2000      	movs	r0, #0
}
 8008014:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 8008016:	2009      	movs	r0, #9
}
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop
 800801c:	20000588 	.word	0x20000588

08008020 <LoRaMacCryptoPrepareJoinRequest>:
    if( macMsg == 0 )
 8008020:	2800      	cmp	r0, #0
 8008022:	d04c      	beq.n	80080be <LoRaMacCryptoPrepareJoinRequest+0x9e>
    CryptoNvm->DevNonce++;
 8008024:	4b27      	ldr	r3, [pc, #156]	; (80080c4 <LoRaMacCryptoPrepareJoinRequest+0xa4>)
{
 8008026:	b570      	push	{r4, r5, r6, lr}
    CryptoNvm->DevNonce++;
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	8893      	ldrh	r3, [r2, #4]
 800802c:	3301      	adds	r3, #1
{
 800802e:	b086      	sub	sp, #24
    CryptoNvm->DevNonce++;
 8008030:	b29b      	uxth	r3, r3
    if( DeriveLifeTimeSessionKey( J_S_INT_KEY, macMsg->DevEUI ) != LORAMAC_CRYPTO_SUCCESS )
 8008032:	f100 060e 	add.w	r6, r0, #14
    CryptoNvm->DevNonce++;
 8008036:	8093      	strh	r3, [r2, #4]
    uint8_t compBase[16] = { 0 };
 8008038:	2500      	movs	r5, #0
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800803a:	82c3      	strh	r3, [r0, #22]
    memcpyr( compBase + 1, devEUI, 8 );
 800803c:	4631      	mov	r1, r6
            compBase[0] = 0x06;
 800803e:	2306      	movs	r3, #6
    memcpyr( compBase + 1, devEUI, 8 );
 8008040:	2208      	movs	r2, #8
 8008042:	4604      	mov	r4, r0
 8008044:	f10d 0009 	add.w	r0, sp, #9
    uint8_t compBase[16] = { 0 };
 8008048:	e9cd 5502 	strd	r5, r5, [sp, #8]
 800804c:	e9cd 5504 	strd	r5, r5, [sp, #16]
            compBase[0] = 0x06;
 8008050:	f88d 3008 	strb.w	r3, [sp, #8]
    memcpyr( compBase + 1, devEUI, 8 );
 8008054:	f7fa ff08 	bl	8002e68 <memcpyr>
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8008058:	a802      	add	r0, sp, #8
 800805a:	2202      	movs	r2, #2
 800805c:	2101      	movs	r1, #1
 800805e:	f002 f859 	bl	800a114 <SecureElementDeriveAndStoreKey>
 8008062:	4603      	mov	r3, r0
 8008064:	bb30      	cbnz	r0, 80080b4 <LoRaMacCryptoPrepareJoinRequest+0x94>
    memcpyr( compBase + 1, devEUI, 8 );
 8008066:	4631      	mov	r1, r6
 8008068:	f10d 0009 	add.w	r0, sp, #9
 800806c:	2208      	movs	r2, #8
            compBase[0] = 0x05;
 800806e:	2505      	movs	r5, #5
    uint8_t compBase[16] = { 0 };
 8008070:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008074:	e9cd 3304 	strd	r3, r3, [sp, #16]
            compBase[0] = 0x05;
 8008078:	f88d 5008 	strb.w	r5, [sp, #8]
    memcpyr( compBase + 1, devEUI, 8 );
 800807c:	f7fa fef4 	bl	8002e68 <memcpyr>
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8008080:	a802      	add	r0, sp, #8
 8008082:	2203      	movs	r2, #3
 8008084:	2101      	movs	r1, #1
 8008086:	f002 f845 	bl	800a114 <SecureElementDeriveAndStoreKey>
 800808a:	b998      	cbnz	r0, 80080b4 <LoRaMacCryptoPrepareJoinRequest+0x94>
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800808c:	4620      	mov	r0, r4
 800808e:	f000 fc0b 	bl	80088a8 <LoRaMacSerializerJoinRequest>
 8008092:	b960      	cbnz	r0, 80080ae <LoRaMacCryptoPrepareJoinRequest+0x8e>
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8008094:	4622      	mov	r2, r4
 8008096:	2301      	movs	r3, #1
 8008098:	f852 1b18 	ldr.w	r1, [r2], #24
 800809c:	9200      	str	r2, [sp, #0]
 800809e:	2213      	movs	r2, #19
 80080a0:	f001 ffba 	bl	800a018 <SecureElementComputeAesCmac>
 80080a4:	b948      	cbnz	r0, 80080ba <LoRaMacCryptoPrepareJoinRequest+0x9a>
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80080a6:	4620      	mov	r0, r4
 80080a8:	f000 fbfe 	bl	80088a8 <LoRaMacSerializerJoinRequest>
 80080ac:	b118      	cbz	r0, 80080b6 <LoRaMacCryptoPrepareJoinRequest+0x96>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80080ae:	2010      	movs	r0, #16
}
 80080b0:	b006      	add	sp, #24
 80080b2:	bd70      	pop	{r4, r5, r6, pc}
        return LORAMAC_CRYPTO_ERROR;
 80080b4:	2012      	movs	r0, #18
}
 80080b6:	b006      	add	sp, #24
 80080b8:	bd70      	pop	{r4, r5, r6, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80080ba:	200e      	movs	r0, #14
 80080bc:	e7fb      	b.n	80080b6 <LoRaMacCryptoPrepareJoinRequest+0x96>
        return LORAMAC_CRYPTO_ERROR_NPE;
 80080be:	2009      	movs	r0, #9
}
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	20000588 	.word	0x20000588

080080c8 <LoRaMacCryptoPrepareReJoinType1>:
    if( macMsg == 0 )
 80080c8:	b340      	cbz	r0, 800811c <LoRaMacCryptoPrepareReJoinType1+0x54>
{
 80080ca:	b530      	push	{r4, r5, lr}
    if( CryptoNvm->FCntList.RJcount1 == 65535 )
 80080cc:	4d14      	ldr	r5, [pc, #80]	; (8008120 <LoRaMacCryptoPrepareReJoinType1+0x58>)
 80080ce:	682b      	ldr	r3, [r5, #0]
 80080d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80080d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80080d6:	429a      	cmp	r2, r3
{
 80080d8:	b083      	sub	sp, #12
    if( CryptoNvm->FCntList.RJcount1 == 65535 )
 80080da:	d019      	beq.n	8008110 <LoRaMacCryptoPrepareReJoinType1+0x48>
    if( LoRaMacSerializerReJoinType1( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80080dc:	4604      	mov	r4, r0
 80080de:	f000 fc19 	bl	8008914 <LoRaMacSerializerReJoinType1>
 80080e2:	b990      	cbnz	r0, 800810a <LoRaMacCryptoPrepareReJoinType1+0x42>
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_RE_JOIN_1_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), J_S_INT_KEY, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80080e4:	4622      	mov	r2, r4
 80080e6:	2302      	movs	r3, #2
 80080e8:	f852 1b1c 	ldr.w	r1, [r2], #28
 80080ec:	9200      	str	r2, [sp, #0]
 80080ee:	2214      	movs	r2, #20
 80080f0:	f001 ff92 	bl	800a018 <SecureElementComputeAesCmac>
 80080f4:	b978      	cbnz	r0, 8008116 <LoRaMacCryptoPrepareReJoinType1+0x4e>
    if( LoRaMacSerializerReJoinType1( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80080f6:	4620      	mov	r0, r4
 80080f8:	f000 fc0c 	bl	8008914 <LoRaMacSerializerReJoinType1>
 80080fc:	b928      	cbnz	r0, 800810a <LoRaMacCryptoPrepareReJoinType1+0x42>
    CryptoNvm->FCntList.RJcount1++;
 80080fe:	682a      	ldr	r2, [r5, #0]
 8008100:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 8008102:	3301      	adds	r3, #1
 8008104:	8593      	strh	r3, [r2, #44]	; 0x2c
}
 8008106:	b003      	add	sp, #12
 8008108:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800810a:	2010      	movs	r0, #16
}
 800810c:	b003      	add	sp, #12
 800810e:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_RJCOUNT1_OVERFLOW;
 8008110:	2011      	movs	r0, #17
}
 8008112:	b003      	add	sp, #12
 8008114:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8008116:	200e      	movs	r0, #14
}
 8008118:	b003      	add	sp, #12
 800811a:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800811c:	2009      	movs	r0, #9
}
 800811e:	4770      	bx	lr
 8008120:	20000588 	.word	0x20000588

08008124 <LoRaMacCryptoPrepareReJoinType0or2>:
    if( macMsg == 0 )
 8008124:	b330      	cbz	r0, 8008174 <LoRaMacCryptoPrepareReJoinType0or2+0x50>
{
 8008126:	b530      	push	{r4, r5, lr}
    if( RJcount0 == 65535 )
 8008128:	4d13      	ldr	r5, [pc, #76]	; (8008178 <LoRaMacCryptoPrepareReJoinType0or2+0x54>)
 800812a:	882a      	ldrh	r2, [r5, #0]
 800812c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008130:	429a      	cmp	r2, r3
{
 8008132:	b083      	sub	sp, #12
    if( RJcount0 == 65535 )
 8008134:	d018      	beq.n	8008168 <LoRaMacCryptoPrepareReJoinType0or2+0x44>
    if( LoRaMacSerializerReJoinType0or2( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8008136:	4604      	mov	r4, r0
 8008138:	f000 fc28 	bl	800898c <LoRaMacSerializerReJoinType0or2>
 800813c:	b988      	cbnz	r0, 8008162 <LoRaMacCryptoPrepareReJoinType0or2+0x3e>
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_RE_JOIN_0_2_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800813e:	4622      	mov	r2, r4
 8008140:	2305      	movs	r3, #5
 8008142:	f852 1b14 	ldr.w	r1, [r2], #20
 8008146:	9200      	str	r2, [sp, #0]
 8008148:	220f      	movs	r2, #15
 800814a:	f001 ff65 	bl	800a018 <SecureElementComputeAesCmac>
 800814e:	b970      	cbnz	r0, 800816e <LoRaMacCryptoPrepareReJoinType0or2+0x4a>
    if( LoRaMacSerializerReJoinType0or2( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8008150:	4620      	mov	r0, r4
 8008152:	f000 fc1b 	bl	800898c <LoRaMacSerializerReJoinType0or2>
 8008156:	b920      	cbnz	r0, 8008162 <LoRaMacCryptoPrepareReJoinType0or2+0x3e>
    RJcount0++;
 8008158:	882b      	ldrh	r3, [r5, #0]
 800815a:	3301      	adds	r3, #1
 800815c:	802b      	strh	r3, [r5, #0]
}
 800815e:	b003      	add	sp, #12
 8008160:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8008162:	2010      	movs	r0, #16
}
 8008164:	b003      	add	sp, #12
 8008166:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_FAIL_RJCOUNT0_OVERFLOW;
 8008168:	2004      	movs	r0, #4
}
 800816a:	b003      	add	sp, #12
 800816c:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800816e:	200e      	movs	r0, #14
}
 8008170:	b003      	add	sp, #12
 8008172:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8008174:	2009      	movs	r0, #9
}
 8008176:	4770      	bx	lr
 8008178:	2000058c 	.word	0x2000058c

0800817c <LoRaMacCryptoSecureMessage>:
    if( macMsg == NULL )
 800817c:	2b00      	cmp	r3, #0
 800817e:	f000 8113 	beq.w	80083a8 <LoRaMacCryptoSecureMessage+0x22c>
{
 8008182:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8008186:	4f8a      	ldr	r7, [pc, #552]	; (80083b0 <LoRaMacCryptoSecureMessage+0x234>)
 8008188:	461c      	mov	r4, r3
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	4283      	cmp	r3, r0
{
 8008190:	b089      	sub	sp, #36	; 0x24
 8008192:	4605      	mov	r5, r0
    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8008194:	d861      	bhi.n	800825a <LoRaMacCryptoSecureMessage+0xde>
 8008196:	4616      	mov	r6, r2
    if( macMsg->FPort == 0 )
 8008198:	f894 2020 	ldrb.w	r2, [r4, #32]
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 800819c:	2a00      	cmp	r2, #0
 800819e:	bf14      	ite	ne
 80081a0:	2207      	movne	r2, #7
 80081a2:	2206      	moveq	r2, #6
    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 80081a4:	4283      	cmp	r3, r0
 80081a6:	4688      	mov	r8, r1
 80081a8:	d210      	bcs.n	80081cc <LoRaMacCryptoSecureMessage+0x50>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 80081aa:	2300      	movs	r3, #0
 80081ac:	e9cd 3000 	strd	r3, r0, [sp]
 80081b0:	68a3      	ldr	r3, [r4, #8]
 80081b2:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 80081b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80081b8:	f7ff fd70 	bl	8007c9c <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80081bc:	4603      	mov	r3, r0
 80081be:	2800      	cmp	r0, #0
 80081c0:	d140      	bne.n	8008244 <LoRaMacCryptoSecureMessage+0xc8>
        if( CryptoNvm->LrWanVersion.Fields.Minor == 1 )
 80081c2:	683a      	ldr	r2, [r7, #0]
 80081c4:	7892      	ldrb	r2, [r2, #2]
 80081c6:	2a01      	cmp	r2, #1
 80081c8:	f000 80d6 	beq.w	8008378 <LoRaMacCryptoSecureMessage+0x1fc>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80081cc:	4620      	mov	r0, r4
 80081ce:	f000 fc19 	bl	8008a04 <LoRaMacSerializerData>
 80081d2:	2800      	cmp	r0, #0
 80081d4:	d13a      	bne.n	800824c <LoRaMacCryptoSecureMessage+0xd0>
    if( CryptoNvm->LrWanVersion.Fields.Minor == 1 )
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	789a      	ldrb	r2, [r3, #2]
 80081da:	2a01      	cmp	r2, #1
 80081dc:	d04c      	beq.n	8008278 <LoRaMacCryptoSecureMessage+0xfc>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80081de:	7923      	ldrb	r3, [r4, #4]
 80081e0:	6821      	ldr	r1, [r4, #0]
 80081e2:	3b04      	subs	r3, #4
 80081e4:	b29a      	uxth	r2, r3
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80081e6:	2900      	cmp	r1, #0
 80081e8:	d041      	beq.n	800826e <LoRaMacCryptoSecureMessage+0xf2>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80081ea:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80081ee:	d839      	bhi.n	8008264 <LoRaMacCryptoSecureMessage+0xe8>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80081f0:	68a6      	ldr	r6, [r4, #8]
    b0[4] = 0x00;
 80081f2:	f8ad 0014 	strh.w	r0, [sp, #20]
    b0[14] = 0x00;
 80081f6:	f88d 001e 	strb.w	r0, [sp, #30]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80081fa:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80081fe:	9000      	str	r0, [sp, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8008200:	0c30      	lsrs	r0, r6, #16
    b0[15] = msgLen & 0xFF;
 8008202:	f88d 301f 	strb.w	r3, [sp, #31]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8008206:	0e36      	lsrs	r6, r6, #24
    b0[0] = 0x49;
 8008208:	2349      	movs	r3, #73	; 0x49
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800820a:	f88d 0018 	strb.w	r0, [sp, #24]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800820e:	0c28      	lsrs	r0, r5, #16
 8008210:	f8b4 c008 	ldrh.w	ip, [r4, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8008214:	f88d 6019 	strb.w	r6, [sp, #25]
    b0[0] = 0x49;
 8008218:	9304      	str	r3, [sp, #16]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800821a:	0e2e      	lsrs	r6, r5, #24
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800821c:	f88d 001c 	strb.w	r0, [sp, #28]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8008220:	2306      	movs	r3, #6
 8008222:	a804      	add	r0, sp, #16
    b0[10] = fCnt & 0xFF;
 8008224:	f8ad 501a 	strh.w	r5, [sp, #26]
    b0[6] = devAddr & 0xFF;
 8008228:	f8ad c016 	strh.w	ip, [sp, #22]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800822c:	f88d 601d 	strb.w	r6, [sp, #29]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8008230:	f001 fef2 	bl	800a018 <SecureElementComputeAesCmac>
 8008234:	b978      	cbnz	r0, 8008256 <LoRaMacCryptoSecureMessage+0xda>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8008236:	4620      	mov	r0, r4
 8008238:	f000 fbe4 	bl	8008a04 <LoRaMacSerializerData>
 800823c:	4603      	mov	r3, r0
 800823e:	b928      	cbnz	r0, 800824c <LoRaMacCryptoSecureMessage+0xd0>
    CryptoNvm->FCntList.FCntUp = fCntUp;
 8008240:	683a      	ldr	r2, [r7, #0]
 8008242:	60d5      	str	r5, [r2, #12]
}
 8008244:	4618      	mov	r0, r3
 8008246:	b009      	add	sp, #36	; 0x24
 8008248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800824c:	2310      	movs	r3, #16
}
 800824e:	4618      	mov	r0, r3
 8008250:	b009      	add	sp, #36	; 0x24
 8008252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8008256:	230e      	movs	r3, #14
 8008258:	e7f4      	b.n	8008244 <LoRaMacCryptoSecureMessage+0xc8>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800825a:	2306      	movs	r3, #6
}
 800825c:	4618      	mov	r0, r3
 800825e:	b009      	add	sp, #36	; 0x24
 8008260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8008264:	230d      	movs	r3, #13
}
 8008266:	4618      	mov	r0, r3
 8008268:	b009      	add	sp, #36	; 0x24
 800826a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800826e:	2309      	movs	r3, #9
}
 8008270:	4618      	mov	r0, r3
 8008272:	b009      	add	sp, #36	; 0x24
 8008274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, fCntUp, &cmacS );
 8008278:	f894 c004 	ldrb.w	ip, [r4, #4]
 800827c:	6821      	ldr	r1, [r4, #0]
        uint32_t cmacS = 0;
 800827e:	9002      	str	r0, [sp, #8]
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, fCntUp, &cmacS );
 8008280:	f1ac 0c04 	sub.w	ip, ip, #4
        uint32_t cmacF = 0;
 8008284:	9003      	str	r0, [sp, #12]
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, fCntUp, &cmacS );
 8008286:	fa1f f28c 	uxth.w	r2, ip
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800828a:	2900      	cmp	r1, #0
 800828c:	d0ef      	beq.n	800826e <LoRaMacCryptoSecureMessage+0xf2>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800828e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8008292:	d8e7      	bhi.n	8008264 <LoRaMacCryptoSecureMessage+0xe8>
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, fCntUp, &cmacS );
 8008294:	7b20      	ldrb	r0, [r4, #12]
 8008296:	f8b4 9008 	ldrh.w	r9, [r4, #8]
 800829a:	f8d4 e008 	ldr.w	lr, [r4, #8]
    b1[0] = 0x49;
 800829e:	f04f 0b49 	mov.w	fp, #73	; 0x49
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, fCntUp, &cmacS );
 80082a2:	f3c0 1a40 	ubfx	sl, r0, #5, #1
    if( isAck == true )
 80082a6:	0680      	lsls	r0, r0, #26
    b1[0] = 0x49;
 80082a8:	f88d b010 	strb.w	fp, [sp, #16]
    if( isAck == true )
 80082ac:	d474      	bmi.n	8008398 <LoRaMacCryptoSecureMessage+0x21c>
        b1[1] = 0x00;
 80082ae:	f88d a011 	strb.w	sl, [sp, #17]
        b1[2] = 0x00;
 80082b2:	f88d a012 	strb.w	sl, [sp, #18]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80082b6:	ab02      	add	r3, sp, #8
 80082b8:	9300      	str	r3, [sp, #0]
    b1[5] = UPLINK;  // dir = Uplink
 80082ba:	2300      	movs	r3, #0
    b1[3] = txDr;
 80082bc:	f88d 8013 	strb.w	r8, [sp, #19]
    b1[4] = txCh;
 80082c0:	f88d 6014 	strb.w	r6, [sp, #20]
    b1[6] = devAddr & 0xFF;
 80082c4:	f8ad 9016 	strh.w	r9, [sp, #22]
    b1[8] = ( devAddr >> 16 ) & 0xFF;
 80082c8:	ea4f 461e 	mov.w	r6, lr, lsr #16
    b1[5] = UPLINK;  // dir = Uplink
 80082cc:	f88d 3015 	strb.w	r3, [sp, #21]
    b1[9] = ( devAddr >> 24 ) & 0xFF;
 80082d0:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    b1[14] = 0x00;
 80082d4:	f88d 301e 	strb.w	r3, [sp, #30]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80082d8:	a804      	add	r0, sp, #16
 80082da:	2305      	movs	r3, #5
    b1[12] = ( fCntUp >> 16 ) & 0xFF;
 80082dc:	f3c5 4807 	ubfx	r8, r5, #16, #8
    b1[13] = ( fCntUp >> 24 ) & 0xFF;
 80082e0:	ea4f 6915 	mov.w	r9, r5, lsr #24
    b1[10] = fCntUp & 0xFF;
 80082e4:	f8ad 501a 	strh.w	r5, [sp, #26]
    b1[15] = msgLen & 0xFF;
 80082e8:	f88d c01f 	strb.w	ip, [sp, #31]
    b1[8] = ( devAddr >> 16 ) & 0xFF;
 80082ec:	f88d 6018 	strb.w	r6, [sp, #24]
    b1[9] = ( devAddr >> 24 ) & 0xFF;
 80082f0:	f88d e019 	strb.w	lr, [sp, #25]
    b1[12] = ( fCntUp >> 16 ) & 0xFF;
 80082f4:	f88d 801c 	strb.w	r8, [sp, #28]
    b1[13] = ( fCntUp >> 24 ) & 0xFF;
 80082f8:	f88d 901d 	strb.w	r9, [sp, #29]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80082fc:	f001 fe8c 	bl	800a018 <SecureElementComputeAesCmac>
 8008300:	4603      	mov	r3, r0
 8008302:	2800      	cmp	r0, #0
 8008304:	d1a7      	bne.n	8008256 <LoRaMacCryptoSecureMessage+0xda>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), F_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &cmacF );
 8008306:	7926      	ldrb	r6, [r4, #4]
 8008308:	6821      	ldr	r1, [r4, #0]
 800830a:	3e04      	subs	r6, #4
 800830c:	b2b2      	uxth	r2, r6
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800830e:	2900      	cmp	r1, #0
 8008310:	d0ad      	beq.n	800826e <LoRaMacCryptoSecureMessage+0xf2>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8008312:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8008316:	d8a5      	bhi.n	8008264 <LoRaMacCryptoSecureMessage+0xe8>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), F_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &cmacF );
 8008318:	f8d4 c008 	ldr.w	ip, [r4, #8]
    b0[4] = 0x00;
 800831c:	f8ad 0014 	strh.w	r0, [sp, #20]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8008320:	f10d 0e0c 	add.w	lr, sp, #12
 8008324:	f8cd e000 	str.w	lr, [sp]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8008328:	f88d 801c 	strb.w	r8, [sp, #28]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800832c:	f88d 901d 	strb.w	r9, [sp, #29]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8008330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008334:	f8b4 9008 	ldrh.w	r9, [r4, #8]
    b0[14] = 0x00;
 8008338:	f88d 301e 	strb.w	r3, [sp, #30]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800833c:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
    b0[0] = 0x49;
 8008340:	f04f 0e49 	mov.w	lr, #73	; 0x49
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8008344:	a804      	add	r0, sp, #16
 8008346:	2304      	movs	r3, #4
    b0[10] = fCnt & 0xFF;
 8008348:	f8ad 501a 	strh.w	r5, [sp, #26]
    b0[15] = msgLen & 0xFF;
 800834c:	f88d 601f 	strb.w	r6, [sp, #31]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8008350:	f88d 8018 	strb.w	r8, [sp, #24]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8008354:	f88d c019 	strb.w	ip, [sp, #25]
    b0[6] = devAddr & 0xFF;
 8008358:	f8ad 9016 	strh.w	r9, [sp, #22]
    b0[0] = 0x49;
 800835c:	f8cd e010 	str.w	lr, [sp, #16]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8008360:	f001 fe5a 	bl	800a018 <SecureElementComputeAesCmac>
 8008364:	2800      	cmp	r0, #0
 8008366:	f47f af76 	bne.w	8008256 <LoRaMacCryptoSecureMessage+0xda>
        macMsg->MIC = ( ( cmacF << 16 ) & 0xFFFF0000 ) | ( cmacS & 0x0000FFFF );
 800836a:	9a03      	ldr	r2, [sp, #12]
 800836c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8008370:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008374:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008376:	e75e      	b.n	8008236 <LoRaMacCryptoSecureMessage+0xba>
            retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, macMsg->FHDR.DevAddr, UPLINK, FCNT_UP, fCntUp, macMsg->FHDR.FOpts );
 8008378:	7b20      	ldrb	r0, [r4, #12]
 800837a:	9500      	str	r5, [sp, #0]
 800837c:	f104 0210 	add.w	r2, r4, #16
 8008380:	9201      	str	r2, [sp, #4]
 8008382:	68a1      	ldr	r1, [r4, #8]
 8008384:	461a      	mov	r2, r3
 8008386:	f000 000f 	and.w	r0, r0, #15
 800838a:	f7ff fce3 	bl	8007d54 <FOptsEncrypt>
            if( retval != LORAMAC_CRYPTO_SUCCESS )
 800838e:	4603      	mov	r3, r0
 8008390:	2800      	cmp	r0, #0
 8008392:	f43f af1b 	beq.w	80081cc <LoRaMacCryptoSecureMessage+0x50>
 8008396:	e755      	b.n	8008244 <LoRaMacCryptoSecureMessage+0xc8>
        uint16_t confFCnt = ( uint16_t )( CryptoNvm->LastDownFCnt % 65536 );
 8008398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        b1[1] = confFCnt & 0xFF;
 800839a:	f88d 3011 	strb.w	r3, [sp, #17]
        b1[2] = ( confFCnt >> 8 ) & 0xFF;
 800839e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80083a2:	f88d 3012 	strb.w	r3, [sp, #18]
 80083a6:	e786      	b.n	80082b6 <LoRaMacCryptoSecureMessage+0x13a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 80083a8:	2309      	movs	r3, #9
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	20000588 	.word	0x20000588

080083b4 <LoRaMacCryptoUnsecureMessage>:
{
 80083b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b8:	b087      	sub	sp, #28
 80083ba:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    if( macMsg == 0 )
 80083be:	f1b9 0f00 	cmp.w	r9, #0
 80083c2:	d02b      	beq.n	800841c <LoRaMacCryptoUnsecureMessage+0x68>
    if( CheckFCntDown( fCntID, fCntDown ) == false )
 80083c4:	4605      	mov	r5, r0
 80083c6:	4688      	mov	r8, r1
 80083c8:	461f      	mov	r7, r3
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80083ca:	a905      	add	r1, sp, #20
    uint32_t lastDown = 0;
 80083cc:	2300      	movs	r3, #0
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80083ce:	4610      	mov	r0, r2
 80083d0:	4616      	mov	r6, r2
    uint32_t lastDown = 0;
 80083d2:	9305      	str	r3, [sp, #20]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80083d4:	f7ff fbbc 	bl	8007b50 <GetLastFcntDown>
 80083d8:	b920      	cbnz	r0, 80083e4 <LoRaMacCryptoUnsecureMessage+0x30>
    if( ( currentDown > lastDown ) ||
 80083da:	9b05      	ldr	r3, [sp, #20]
 80083dc:	429f      	cmp	r7, r3
 80083de:	d806      	bhi.n	80083ee <LoRaMacCryptoUnsecureMessage+0x3a>
 80083e0:	3301      	adds	r3, #1
 80083e2:	d004      	beq.n	80083ee <LoRaMacCryptoUnsecureMessage+0x3a>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80083e4:	2406      	movs	r4, #6
}
 80083e6:	4620      	mov	r0, r4
 80083e8:	b007      	add	sp, #28
 80083ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80083ee:	4648      	mov	r0, r9
 80083f0:	f000 f9fa 	bl	80087e8 <LoRaMacParserData>
 80083f4:	4604      	mov	r4, r0
 80083f6:	b960      	cbnz	r0, 8008412 <LoRaMacCryptoUnsecureMessage+0x5e>
 80083f8:	4a47      	ldr	r2, [pc, #284]	; (8008518 <LoRaMacCryptoUnsecureMessage+0x164>)
        if( KeyAddrList[i].AddrID == addrID )
 80083fa:	f812 3024 	ldrb.w	r3, [r2, r4, lsl #2]
 80083fe:	42ab      	cmp	r3, r5
 8008400:	d011      	beq.n	8008426 <LoRaMacCryptoUnsecureMessage+0x72>
 8008402:	3401      	adds	r4, #1
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8008404:	2c05      	cmp	r4, #5
 8008406:	d1f8      	bne.n	80083fa <LoRaMacCryptoUnsecureMessage+0x46>
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8008408:	240b      	movs	r4, #11
}
 800840a:	4620      	mov	r0, r4
 800840c:	b007      	add	sp, #28
 800840e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8008412:	240f      	movs	r4, #15
}
 8008414:	4620      	mov	r0, r4
 8008416:	b007      	add	sp, #28
 8008418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800841c:	2409      	movs	r4, #9
}
 800841e:	4620      	mov	r0, r4
 8008420:	b007      	add	sp, #28
 8008422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( address != macMsg->FHDR.DevAddr )
 8008426:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800842a:	4543      	cmp	r3, r8
 800842c:	d162      	bne.n	80084f4 <LoRaMacCryptoUnsecureMessage+0x140>
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800842e:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 800851c <LoRaMacCryptoUnsecureMessage+0x168>
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8008432:	f899 300c 	ldrb.w	r3, [r9, #12]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8008436:	f8da 0000 	ldr.w	r0, [sl]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800843a:	f899 1004 	ldrb.w	r1, [r9, #4]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800843e:	7880      	ldrb	r0, [r0, #2]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8008440:	9701      	str	r7, [sp, #4]
    payloadDecryptionKeyID = curItem->AppSkey;
 8008442:	eb02 0484 	add.w	r4, r2, r4, lsl #2
        isAck = false;
 8008446:	2800      	cmp	r0, #0
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8008448:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 800844c:	f8cd 8000 	str.w	r8, [sp]
 8008450:	78a2      	ldrb	r2, [r4, #2]
 8008452:	9002      	str	r0, [sp, #8]
 8008454:	f1a1 0104 	sub.w	r1, r1, #4
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8008458:	f3c3 1340 	ubfx	r3, r3, #5, #1
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800845c:	f8d9 0000 	ldr.w	r0, [r9]
    payloadDecryptionKeyID = curItem->AppSkey;
 8008460:	f894 b001 	ldrb.w	fp, [r4, #1]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8008464:	bf08      	it	eq
 8008466:	2300      	moveq	r3, #0
 8008468:	b289      	uxth	r1, r1
 800846a:	f7ff fce7 	bl	8007e3c <VerifyCmacB0.constprop.0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800846e:	4604      	mov	r4, r0
 8008470:	2800      	cmp	r0, #0
 8008472:	d1b8      	bne.n	80083e6 <LoRaMacCryptoUnsecureMessage+0x32>
    if( macMsg->FPort == 0 )
 8008474:	f899 3020 	ldrb.w	r3, [r9, #32]
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8008478:	9701      	str	r7, [sp, #4]
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 800847a:	2b00      	cmp	r3, #0
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800847c:	f04f 0301 	mov.w	r3, #1
 8008480:	9300      	str	r3, [sp, #0]
 8008482:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
 8008486:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
 800848a:	bf14      	ite	ne
 800848c:	465a      	movne	r2, fp
 800848e:	2206      	moveq	r2, #6
 8008490:	4643      	mov	r3, r8
 8008492:	f7ff fc03 	bl	8007c9c <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8008496:	4604      	mov	r4, r0
 8008498:	2800      	cmp	r0, #0
 800849a:	d1a4      	bne.n	80083e6 <LoRaMacCryptoUnsecureMessage+0x32>
    if( CryptoNvm->LrWanVersion.Fields.Minor == 1 )
 800849c:	f8da 3000 	ldr.w	r3, [sl]
 80084a0:	789a      	ldrb	r2, [r3, #2]
 80084a2:	2a01      	cmp	r2, #1
 80084a4:	d101      	bne.n	80084aa <LoRaMacCryptoUnsecureMessage+0xf6>
        if( addrID == UNICAST_DEV_ADDR )
 80084a6:	2d04      	cmp	r5, #4
 80084a8:	d026      	beq.n	80084f8 <LoRaMacCryptoUnsecureMessage+0x144>
    switch( fCntID )
 80084aa:	3e01      	subs	r6, #1
 80084ac:	2e06      	cmp	r6, #6
 80084ae:	d89a      	bhi.n	80083e6 <LoRaMacCryptoUnsecureMessage+0x32>
 80084b0:	e8df f006 	tbb	[pc, r6]
 80084b4:	1014181c 	.word	0x1014181c
 80084b8:	080c      	.short	0x080c
 80084ba:	04          	.byte	0x04
 80084bb:	00          	.byte	0x00
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
 80084bc:	f8da 3000 	ldr.w	r3, [sl]
 80084c0:	629f      	str	r7, [r3, #40]	; 0x28
            break;
 80084c2:	e790      	b.n	80083e6 <LoRaMacCryptoUnsecureMessage+0x32>
            CryptoNvm->FCntList.McFCntDown[2] = currentDown;
 80084c4:	f8da 3000 	ldr.w	r3, [sl]
 80084c8:	625f      	str	r7, [r3, #36]	; 0x24
            break;
 80084ca:	e78c      	b.n	80083e6 <LoRaMacCryptoUnsecureMessage+0x32>
            CryptoNvm->FCntList.McFCntDown[1] = currentDown;
 80084cc:	f8da 3000 	ldr.w	r3, [sl]
 80084d0:	621f      	str	r7, [r3, #32]
            break;
 80084d2:	e788      	b.n	80083e6 <LoRaMacCryptoUnsecureMessage+0x32>
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 80084d4:	f8da 3000 	ldr.w	r3, [sl]
 80084d8:	61df      	str	r7, [r3, #28]
            break;
 80084da:	e784      	b.n	80083e6 <LoRaMacCryptoUnsecureMessage+0x32>
            CryptoNvm->FCntList.FCntDown = currentDown;
 80084dc:	f8da 3000 	ldr.w	r3, [sl]
 80084e0:	619f      	str	r7, [r3, #24]
            break;
 80084e2:	e780      	b.n	80083e6 <LoRaMacCryptoUnsecureMessage+0x32>
            CryptoNvm->FCntList.AFCntDown = currentDown;
 80084e4:	f8da 3000 	ldr.w	r3, [sl]
 80084e8:	615f      	str	r7, [r3, #20]
            break;
 80084ea:	e77c      	b.n	80083e6 <LoRaMacCryptoUnsecureMessage+0x32>
            CryptoNvm->FCntList.NFCntDown = currentDown;
 80084ec:	f8da 3000 	ldr.w	r3, [sl]
 80084f0:	611f      	str	r7, [r3, #16]
            break;
 80084f2:	e778      	b.n	80083e6 <LoRaMacCryptoUnsecureMessage+0x32>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80084f4:	2402      	movs	r4, #2
 80084f6:	e776      	b.n	80083e6 <LoRaMacCryptoUnsecureMessage+0x32>
            retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, address, DOWNLINK, fCntID, fCntDown, macMsg->FHDR.FOpts );
 80084f8:	f899 000c 	ldrb.w	r0, [r9, #12]
 80084fc:	9700      	str	r7, [sp, #0]
 80084fe:	f109 0310 	add.w	r3, r9, #16
 8008502:	9301      	str	r3, [sp, #4]
 8008504:	4641      	mov	r1, r8
 8008506:	f000 000f 	and.w	r0, r0, #15
 800850a:	4633      	mov	r3, r6
 800850c:	f7ff fc22 	bl	8007d54 <FOptsEncrypt>
            if( retval != LORAMAC_CRYPTO_SUCCESS )
 8008510:	2800      	cmp	r0, #0
 8008512:	d0ca      	beq.n	80084aa <LoRaMacCryptoUnsecureMessage+0xf6>
 8008514:	4604      	mov	r4, r0
 8008516:	e766      	b.n	80083e6 <LoRaMacCryptoUnsecureMessage+0x32>
 8008518:	200000dc 	.word	0x200000dc
 800851c:	20000588 	.word	0x20000588

08008520 <LoRaMacCryptoDeriveMcRootKey>:
    if( keyID != APP_KEY )
 8008520:	b9c1      	cbnz	r1, 8008554 <LoRaMacCryptoDeriveMcRootKey+0x34>
{
 8008522:	b500      	push	{lr}
    if( versionMinor == 1 )
 8008524:	2801      	cmp	r0, #1
{
 8008526:	b085      	sub	sp, #20
    uint8_t compBase[16] = { 0 };
 8008528:	e9cd 1100 	strd	r1, r1, [sp]
        compBase[0] = 0x20;
 800852c:	bf08      	it	eq
 800852e:	2320      	moveq	r3, #32
    uint8_t compBase[16] = { 0 };
 8008530:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8008534:	f04f 0208 	mov.w	r2, #8
 8008538:	f04f 0100 	mov.w	r1, #0
 800853c:	4668      	mov	r0, sp
        compBase[0] = 0x20;
 800853e:	bf08      	it	eq
 8008540:	f88d 3000 	strbeq.w	r3, [sp]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8008544:	f001 fde6 	bl	800a114 <SecureElementDeriveAndStoreKey>
 8008548:	2800      	cmp	r0, #0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800854a:	bf18      	it	ne
 800854c:	200e      	movne	r0, #14
}
 800854e:	b005      	add	sp, #20
 8008550:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8008554:	200a      	movs	r0, #10
}
 8008556:	4770      	bx	lr

08008558 <LoRaMacCryptoSetKey>:
{
 8008558:	b538      	push	{r3, r4, r5, lr}
 800855a:	4605      	mov	r5, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800855c:	f001 fd1c 	bl	8009f98 <SecureElementSetKey>
 8008560:	b950      	cbnz	r0, 8008578 <LoRaMacCryptoSetKey+0x20>
    if( keyID == APP_KEY )
 8008562:	4604      	mov	r4, r0
 8008564:	b10d      	cbz	r5, 800856a <LoRaMacCryptoSetKey+0x12>
}
 8008566:	4620      	mov	r0, r4
 8008568:	bd38      	pop	{r3, r4, r5, pc}
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800856a:	4b08      	ldr	r3, [pc, #32]	; (800858c <LoRaMacCryptoSetKey+0x34>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4601      	mov	r1, r0
 8008570:	7898      	ldrb	r0, [r3, #2]
 8008572:	f7ff ffd5 	bl	8008520 <LoRaMacCryptoDeriveMcRootKey>
 8008576:	b110      	cbz	r0, 800857e <LoRaMacCryptoSetKey+0x26>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8008578:	240e      	movs	r4, #14
}
 800857a:	4620      	mov	r0, r4
 800857c:	bd38      	pop	{r3, r4, r5, pc}
    if( keyID != MC_ROOT_KEY )
 800857e:	f7ff fc4b 	bl	8007e18 <LoRaMacCryptoDeriveMcKEKey.part.0>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8008582:	2800      	cmp	r0, #0
 8008584:	d1f8      	bne.n	8008578 <LoRaMacCryptoSetKey+0x20>
}
 8008586:	4620      	mov	r0, r4
 8008588:	bd38      	pop	{r3, r4, r5, pc}
 800858a:	bf00      	nop
 800858c:	20000588 	.word	0x20000588

08008590 <LoRaMacCryptoHandleJoinAccept>:
{
 8008590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008594:	b08f      	sub	sp, #60	; 0x3c
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8008596:	2a00      	cmp	r2, #0
 8008598:	d058      	beq.n	800864c <LoRaMacCryptoHandleJoinAccept+0xbc>
 800859a:	460e      	mov	r6, r1
 800859c:	2900      	cmp	r1, #0
 800859e:	d055      	beq.n	800864c <LoRaMacCryptoHandleJoinAccept+0xbc>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 80085a0:	2700      	movs	r7, #0
    uint16_t nonce               = CryptoNvm->DevNonce;
 80085a2:	f8df 8198 	ldr.w	r8, [pc, #408]	; 800873c <LoRaMacCryptoHandleJoinAccept+0x1ac>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 80085a6:	9705      	str	r7, [sp, #20]
 80085a8:	4605      	mov	r5, r0
 80085aa:	4614      	mov	r4, r2
 80085ac:	4639      	mov	r1, r7
 80085ae:	221d      	movs	r2, #29
 80085b0:	a806      	add	r0, sp, #24
 80085b2:	f00a fce7 	bl	8012f84 <memset>
    uint16_t nonce               = CryptoNvm->DevNonce;
 80085b6:	f8d8 3000 	ldr.w	r3, [r8]
    uint8_t versionMinor         = 0;
 80085ba:	f88d 7013 	strb.w	r7, [sp, #19]
    if( joinReqType == JOIN_REQ )
 80085be:	2dff      	cmp	r5, #255	; 0xff
    uint16_t nonce               = CryptoNvm->DevNonce;
 80085c0:	f8b3 9004 	ldrh.w	r9, [r3, #4]
    if( joinReqType == JOIN_REQ )
 80085c4:	d007      	beq.n	80085d6 <LoRaMacCryptoHandleJoinAccept+0x46>
        if( ( joinReqType == REJOIN_REQ_0 ) || ( joinReqType == REJOIN_REQ_2 ) )
 80085c6:	f015 0ffd 	tst.w	r5, #253	; 0xfd
            nonce = RJcount0;
 80085ca:	bf0a      	itet	eq
 80085cc:	4b5a      	ldreq	r3, [pc, #360]	; (8008738 <LoRaMacCryptoHandleJoinAccept+0x1a8>)
            nonce = CryptoNvm->FCntList.RJcount1;
 80085ce:	f8b3 902c 	ldrhne.w	r9, [r3, #44]	; 0x2c
            nonce = RJcount0;
 80085d2:	f8b3 9000 	ldrheq.w	r9, [r3]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80085d6:	7923      	ldrb	r3, [r4, #4]
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	af05      	add	r7, sp, #20
 80085dc:	f10d 0313 	add.w	r3, sp, #19
 80085e0:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80085e4:	4628      	mov	r0, r5
 80085e6:	6823      	ldr	r3, [r4, #0]
 80085e8:	464a      	mov	r2, r9
 80085ea:	4631      	mov	r1, r6
 80085ec:	f001 fdbc 	bl	800a168 <SecureElementProcessJoinAccept>
 80085f0:	bb38      	cbnz	r0, 8008642 <LoRaMacCryptoHandleJoinAccept+0xb2>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80085f2:	6820      	ldr	r0, [r4, #0]
 80085f4:	7922      	ldrb	r2, [r4, #4]
 80085f6:	4639      	mov	r1, r7
 80085f8:	f7fa fc28 	bl	8002e4c <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80085fc:	4620      	mov	r0, r4
 80085fe:	f000 f89f 	bl	8008740 <LoRaMacParserJoinAccept>
 8008602:	2800      	cmp	r0, #0
 8008604:	d140      	bne.n	8008688 <LoRaMacCryptoHandleJoinAccept+0xf8>
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8008606:	7a25      	ldrb	r5, [r4, #8]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8008608:	79e2      	ldrb	r2, [r4, #7]
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800860a:	79a3      	ldrb	r3, [r4, #6]
    if( versionMinor == 1 )
 800860c:	f89d 0013 	ldrb.w	r0, [sp, #19]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8008610:	042d      	lsls	r5, r5, #16
 8008612:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8008616:	431d      	orrs	r5, r3
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8008618:	f8d8 3000 	ldr.w	r3, [r8]
    if( versionMinor == 1 )
 800861c:	2801      	cmp	r0, #1
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 800861e:	689b      	ldr	r3, [r3, #8]
    if( versionMinor == 1 )
 8008620:	d03c      	beq.n	800869c <LoRaMacCryptoHandleJoinAccept+0x10c>
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
 8008622:	1b5b      	subs	r3, r3, r5
 8008624:	bf18      	it	ne
 8008626:	2301      	movne	r3, #1
    if( isJoinNonceOk == true )
 8008628:	b39b      	cbz	r3, 8008692 <LoRaMacCryptoHandleJoinAccept+0x102>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800862a:	f8d8 3000 	ldr.w	r3, [r8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800862e:	2100      	movs	r1, #0
        CryptoNvm->JoinNonce = currentJoinNonce;
 8008630:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8008632:	f7ff ff75 	bl	8008520 <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8008636:	4607      	mov	r7, r0
 8008638:	b168      	cbz	r0, 8008656 <LoRaMacCryptoHandleJoinAccept+0xc6>
}
 800863a:	4638      	mov	r0, r7
 800863c:	b00f      	add	sp, #60	; 0x3c
 800863e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8008642:	270e      	movs	r7, #14
}
 8008644:	4638      	mov	r0, r7
 8008646:	b00f      	add	sp, #60	; 0x3c
 8008648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800864c:	2709      	movs	r7, #9
}
 800864e:	4638      	mov	r0, r7
 8008650:	b00f      	add	sp, #60	; 0x3c
 8008652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( keyID != MC_ROOT_KEY )
 8008656:	f7ff fbdf 	bl	8007e18 <LoRaMacCryptoDeriveMcKEKey.part.0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800865a:	4607      	mov	r7, r0
 800865c:	2800      	cmp	r0, #0
 800865e:	d1ec      	bne.n	800863a <LoRaMacCryptoHandleJoinAccept+0xaa>
    if( versionMinor == 1 )
 8008660:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8008664:	2b01      	cmp	r3, #1
 8008666:	d045      	beq.n	80086f4 <LoRaMacCryptoHandleJoinAccept+0x164>
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8008668:	7ae3      	ldrb	r3, [r4, #11]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800866a:	7aa1      	ldrb	r1, [r4, #10]
        netID = ( uint32_t )macMsg->NetID[0];
 800866c:	7a62      	ldrb	r2, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800866e:	041c      	lsls	r4, r3, #16
 8008670:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
 8008674:	4314      	orrs	r4, r2
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8008676:	4622      	mov	r2, r4
 8008678:	464b      	mov	r3, r9
 800867a:	4629      	mov	r1, r5
 800867c:	2007      	movs	r0, #7
 800867e:	f7ff fae3 	bl	8007c48 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8008682:	b180      	cbz	r0, 80086a6 <LoRaMacCryptoHandleJoinAccept+0x116>
 8008684:	4607      	mov	r7, r0
 8008686:	e7d8      	b.n	800863a <LoRaMacCryptoHandleJoinAccept+0xaa>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8008688:	270f      	movs	r7, #15
}
 800868a:	4638      	mov	r0, r7
 800868c:	b00f      	add	sp, #60	; 0x3c
 800868e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8008692:	2703      	movs	r7, #3
}
 8008694:	4638      	mov	r0, r7
 8008696:	b00f      	add	sp, #60	; 0x3c
 8008698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 800869c:	429d      	cmp	r5, r3
 800869e:	bf94      	ite	ls
 80086a0:	2300      	movls	r3, #0
 80086a2:	2301      	movhi	r3, #1
 80086a4:	e7c0      	b.n	8008628 <LoRaMacCryptoHandleJoinAccept+0x98>
        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, currentJoinNonce, netID, nonce );
 80086a6:	464b      	mov	r3, r9
 80086a8:	4622      	mov	r2, r4
 80086aa:	4629      	mov	r1, r5
 80086ac:	2006      	movs	r0, #6
 80086ae:	f7ff facb 	bl	8007c48 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80086b2:	2800      	cmp	r0, #0
 80086b4:	d1e6      	bne.n	8008684 <LoRaMacCryptoHandleJoinAccept+0xf4>
        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
 80086b6:	464b      	mov	r3, r9
 80086b8:	4622      	mov	r2, r4
 80086ba:	4629      	mov	r1, r5
 80086bc:	2004      	movs	r0, #4
 80086be:	f7ff fac3 	bl	8007c48 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80086c2:	2800      	cmp	r0, #0
 80086c4:	d1de      	bne.n	8008684 <LoRaMacCryptoHandleJoinAccept+0xf4>
        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
 80086c6:	464b      	mov	r3, r9
 80086c8:	4622      	mov	r2, r4
 80086ca:	4629      	mov	r1, r5
 80086cc:	2005      	movs	r0, #5
 80086ce:	f7ff fabb 	bl	8007c48 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80086d2:	2800      	cmp	r0, #0
 80086d4:	d1d6      	bne.n	8008684 <LoRaMacCryptoHandleJoinAccept+0xf4>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 80086d6:	f8d8 3000 	ldr.w	r3, [r8]
 80086da:	f89d 2013 	ldrb.w	r2, [sp, #19]
    RJcount0 = 0;
 80086de:	4816      	ldr	r0, [pc, #88]	; (8008738 <LoRaMacCryptoHandleJoinAccept+0x1a8>)
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 80086e0:	709a      	strb	r2, [r3, #2]
    RJcount0 = 0;
 80086e2:	2100      	movs	r1, #0
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80086e4:	f04f 32ff 	mov.w	r2, #4294967295
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80086e8:	e9c3 2204 	strd	r2, r2, [r3, #16]
    CryptoNvm->FCntList.FCntUp = 0;
 80086ec:	60d9      	str	r1, [r3, #12]
    RJcount0 = 0;
 80086ee:	8001      	strh	r1, [r0, #0]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80086f0:	619a      	str	r2, [r3, #24]
    return LORAMAC_CRYPTO_SUCCESS;
 80086f2:	e7a2      	b.n	800863a <LoRaMacCryptoHandleJoinAccept+0xaa>
        retval = DeriveSessionKey11x( F_NWK_S_INT_KEY, currentJoinNonce, joinEUI, nonce );
 80086f4:	464b      	mov	r3, r9
 80086f6:	4632      	mov	r2, r6
 80086f8:	4629      	mov	r1, r5
 80086fa:	2004      	movs	r0, #4
 80086fc:	f7ff fa66 	bl	8007bcc <DeriveSessionKey11x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8008700:	2800      	cmp	r0, #0
 8008702:	d1bf      	bne.n	8008684 <LoRaMacCryptoHandleJoinAccept+0xf4>
        retval = DeriveSessionKey11x( S_NWK_S_INT_KEY, currentJoinNonce, joinEUI, nonce );
 8008704:	464b      	mov	r3, r9
 8008706:	4632      	mov	r2, r6
 8008708:	4629      	mov	r1, r5
 800870a:	2005      	movs	r0, #5
 800870c:	f7ff fa5e 	bl	8007bcc <DeriveSessionKey11x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8008710:	2800      	cmp	r0, #0
 8008712:	d1b7      	bne.n	8008684 <LoRaMacCryptoHandleJoinAccept+0xf4>
        retval = DeriveSessionKey11x( NWK_S_ENC_KEY, currentJoinNonce, joinEUI, nonce );
 8008714:	464b      	mov	r3, r9
 8008716:	4632      	mov	r2, r6
 8008718:	4629      	mov	r1, r5
 800871a:	2006      	movs	r0, #6
 800871c:	f7ff fa56 	bl	8007bcc <DeriveSessionKey11x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8008720:	2800      	cmp	r0, #0
 8008722:	d1af      	bne.n	8008684 <LoRaMacCryptoHandleJoinAccept+0xf4>
        retval = DeriveSessionKey11x( APP_S_KEY, currentJoinNonce, joinEUI, nonce );
 8008724:	464b      	mov	r3, r9
 8008726:	4632      	mov	r2, r6
 8008728:	4629      	mov	r1, r5
 800872a:	2007      	movs	r0, #7
 800872c:	f7ff fa4e 	bl	8007bcc <DeriveSessionKey11x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8008730:	2800      	cmp	r0, #0
 8008732:	d0d0      	beq.n	80086d6 <LoRaMacCryptoHandleJoinAccept+0x146>
 8008734:	4607      	mov	r7, r0
 8008736:	e780      	b.n	800863a <LoRaMacCryptoHandleJoinAccept+0xaa>
 8008738:	2000058c 	.word	0x2000058c
 800873c:	20000588 	.word	0x20000588

08008740 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8008740:	2800      	cmp	r0, #0
 8008742:	d04e      	beq.n	80087e2 <LoRaMacParserJoinAccept+0xa2>
 8008744:	6801      	ldr	r1, [r0, #0]
{
 8008746:	b538      	push	{r3, r4, r5, lr}
 8008748:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800874a:	2900      	cmp	r1, #0
 800874c:	d03b      	beq.n	80087c6 <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800874e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008752:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8008754:	2203      	movs	r2, #3
 8008756:	3006      	adds	r0, #6
 8008758:	f7fa fb78 	bl	8002e4c <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800875c:	4620      	mov	r0, r4
 800875e:	2203      	movs	r2, #3
 8008760:	f850 1b09 	ldr.w	r1, [r0], #9
 8008764:	3104      	adds	r1, #4
 8008766:	f7fa fb71 	bl	8002e4c <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800876a:	6821      	ldr	r1, [r4, #0]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];

    macMsg->RxDelay = macMsg->Buffer[bufItr++];

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800876c:	7922      	ldrb	r2, [r4, #4]
    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800876e:	79cb      	ldrb	r3, [r1, #7]
 8008770:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8008772:	7a08      	ldrb	r0, [r1, #8]
 8008774:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8008778:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800877a:	7a48      	ldrb	r0, [r1, #9]
 800877c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008780:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8008782:	7a88      	ldrb	r0, [r1, #10]
 8008784:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8008788:	60e3      	str	r3, [r4, #12]
    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800878a:	7acb      	ldrb	r3, [r1, #11]
 800878c:	7423      	strb	r3, [r4, #16]
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800878e:	7b0b      	ldrb	r3, [r1, #12]
 8008790:	7463      	strb	r3, [r4, #17]
    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8008792:	2a21      	cmp	r2, #33	; 0x21
 8008794:	d019      	beq.n	80087ca <LoRaMacParserJoinAccept+0x8a>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8008796:	2a11      	cmp	r2, #17
 8008798:	dc13      	bgt.n	80087c2 <LoRaMacParserJoinAccept+0x82>
 800879a:	2210      	movs	r2, #16
 800879c:	200f      	movs	r0, #15
 800879e:	250e      	movs	r5, #14
 80087a0:	230d      	movs	r3, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80087a2:	5ccb      	ldrb	r3, [r1, r3]
 80087a4:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80087a6:	5d4d      	ldrb	r5, [r1, r5]
 80087a8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80087ac:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80087ae:	5c08      	ldrb	r0, [r1, r0]
 80087b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80087b4:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80087b6:	5c8a      	ldrb	r2, [r1, r2]
 80087b8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80087bc:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 80087be:	2000      	movs	r0, #0
}
 80087c0:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_PARSER_FAIL;
 80087c2:	2001      	movs	r0, #1
}
 80087c4:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_PARSER_ERROR_NPE;
 80087c6:	2002      	movs	r0, #2
}
 80087c8:	bd38      	pop	{r3, r4, r5, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 80087ca:	310d      	adds	r1, #13
 80087cc:	2210      	movs	r2, #16
 80087ce:	f104 0012 	add.w	r0, r4, #18
 80087d2:	f7fa fb3b 	bl	8002e4c <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80087d6:	251e      	movs	r5, #30
 80087d8:	6821      	ldr	r1, [r4, #0]
 80087da:	2220      	movs	r2, #32
 80087dc:	201f      	movs	r0, #31
 80087de:	231d      	movs	r3, #29
 80087e0:	e7df      	b.n	80087a2 <LoRaMacParserJoinAccept+0x62>
        return LORAMAC_PARSER_ERROR_NPE;
 80087e2:	2002      	movs	r0, #2
}
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop

080087e8 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80087e8:	2800      	cmp	r0, #0
 80087ea:	d05a      	beq.n	80088a2 <LoRaMacParserData+0xba>
 80087ec:	6801      	ldr	r1, [r0, #0]
{
 80087ee:	b538      	push	{r3, r4, r5, lr}
 80087f0:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80087f2:	2900      	cmp	r1, #0
 80087f4:	d053      	beq.n	800889e <LoRaMacParserData+0xb6>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80087f6:	780b      	ldrb	r3, [r1, #0]
 80087f8:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 80087fa:	784b      	ldrb	r3, [r1, #1]
 80087fc:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80087fe:	788a      	ldrb	r2, [r1, #2]
 8008800:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008804:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8008806:	78ca      	ldrb	r2, [r1, #3]
 8008808:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800880c:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800880e:	790a      	ldrb	r2, [r1, #4]
 8008810:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008814:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8008816:	794b      	ldrb	r3, [r1, #5]
 8008818:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800881a:	798b      	ldrb	r3, [r1, #6]
 800881c:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800881e:	79c8      	ldrb	r0, [r1, #7]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8008820:	7b22      	ldrb	r2, [r4, #12]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8008822:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8008826:	81e3      	strh	r3, [r4, #14]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8008828:	3108      	adds	r1, #8
 800882a:	f002 020f 	and.w	r2, r2, #15
 800882e:	f104 0010 	add.w	r0, r4, #16
 8008832:	f7fa fb0b 	bl	8002e4c <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8008836:	7b21      	ldrb	r1, [r4, #12]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
    macMsg->FRMPayloadSize = 0;

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8008838:	7923      	ldrb	r3, [r4, #4]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800883a:	f001 010f 	and.w	r1, r1, #15
 800883e:	f101 0508 	add.w	r5, r1, #8
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8008842:	1b58      	subs	r0, r3, r5
    macMsg->FPort = 0;
 8008844:	2200      	movs	r2, #0
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8008846:	2804      	cmp	r0, #4
    macMsg->FPort = 0;
 8008848:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800884c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8008850:	dc15      	bgt.n	800887e <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8008852:	6822      	ldr	r2, [r4, #0]
 8008854:	441a      	add	r2, r3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );

    return LORAMAC_PARSER_SUCCESS;
 8008856:	2000      	movs	r0, #0
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8008858:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800885c:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800885e:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8008862:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008866:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8008868:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800886c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008870:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8008872:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8008876:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800887a:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800887c:	bd38      	pop	{r3, r4, r5, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800887e:	3109      	adds	r1, #9
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8008880:	1f1a      	subs	r2, r3, #4
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8008882:	6823      	ldr	r3, [r4, #0]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8008884:	6a60      	ldr	r0, [r4, #36]	; 0x24
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8008886:	5d5d      	ldrb	r5, [r3, r5]
 8008888:	f884 5020 	strb.w	r5, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800888c:	1a52      	subs	r2, r2, r1
 800888e:	b2d2      	uxtb	r2, r2
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8008890:	4419      	add	r1, r3
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8008892:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8008896:	f7fa fad9 	bl	8002e4c <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800889a:	7923      	ldrb	r3, [r4, #4]
 800889c:	e7d9      	b.n	8008852 <LoRaMacParserData+0x6a>
        return LORAMAC_PARSER_ERROR_NPE;
 800889e:	2002      	movs	r0, #2
}
 80088a0:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_PARSER_ERROR_NPE;
 80088a2:	2002      	movs	r0, #2
}
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop

080088a8 <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80088a8:	b380      	cbz	r0, 800890c <LoRaMacSerializerJoinRequest+0x64>
 80088aa:	6803      	ldr	r3, [r0, #0]
{
 80088ac:	b510      	push	{r4, lr}
 80088ae:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80088b0:	b373      	cbz	r3, 8008910 <LoRaMacSerializerJoinRequest+0x68>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80088b2:	7902      	ldrb	r2, [r0, #4]
 80088b4:	2a16      	cmp	r2, #22
 80088b6:	d927      	bls.n	8008908 <LoRaMacSerializerJoinRequest+0x60>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80088b8:	7942      	ldrb	r2, [r0, #5]
 80088ba:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 80088bc:	4601      	mov	r1, r0
 80088be:	2208      	movs	r2, #8
 80088c0:	f851 0b06 	ldr.w	r0, [r1], #6
 80088c4:	3001      	adds	r0, #1
 80088c6:	f7fa facf 	bl	8002e68 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80088ca:	4621      	mov	r1, r4
 80088cc:	2208      	movs	r2, #8
 80088ce:	f851 0b0e 	ldr.w	r0, [r1], #14
 80088d2:	3009      	adds	r0, #9
 80088d4:	f7fa fac8 	bl	8002e68 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 80088d8:	6823      	ldr	r3, [r4, #0]
 80088da:	8ae2      	ldrh	r2, [r4, #22]
 80088dc:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80088de:	8ae3      	ldrh	r3, [r4, #22]
 80088e0:	6822      	ldr	r2, [r4, #0]
 80088e2:	0a1b      	lsrs	r3, r3, #8
 80088e4:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80088e6:	6823      	ldr	r3, [r4, #0]
 80088e8:	69a2      	ldr	r2, [r4, #24]
 80088ea:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80088ec:	69a3      	ldr	r3, [r4, #24]
 80088ee:	6822      	ldr	r2, [r4, #0]
 80088f0:	0a1b      	lsrs	r3, r3, #8
 80088f2:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80088f4:	6823      	ldr	r3, [r4, #0]
 80088f6:	8b62      	ldrh	r2, [r4, #26]
 80088f8:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80088fa:	6823      	ldr	r3, [r4, #0]
 80088fc:	7ee2      	ldrb	r2, [r4, #27]
 80088fe:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 8008900:	2317      	movs	r3, #23
 8008902:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8008904:	2000      	movs	r0, #0
}
 8008906:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8008908:	2002      	movs	r0, #2
}
 800890a:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800890c:	2001      	movs	r0, #1
}
 800890e:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8008910:	2001      	movs	r0, #1
}
 8008912:	bd10      	pop	{r4, pc}

08008914 <LoRaMacSerializerReJoinType1>:

LoRaMacSerializerStatus_t LoRaMacSerializerReJoinType1( LoRaMacMessageReJoinType1_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8008914:	2800      	cmp	r0, #0
 8008916:	d034      	beq.n	8008982 <LoRaMacSerializerReJoinType1+0x6e>
 8008918:	6803      	ldr	r3, [r0, #0]
{
 800891a:	b510      	push	{r4, lr}
 800891c:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800891e:	2b00      	cmp	r3, #0
 8008920:	d031      	beq.n	8008986 <LoRaMacSerializerReJoinType1+0x72>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_RE_JOIN_1_MSG_SIZE )
 8008922:	7902      	ldrb	r2, [r0, #4]
 8008924:	2a17      	cmp	r2, #23
 8008926:	d92a      	bls.n	800897e <LoRaMacSerializerReJoinType1+0x6a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8008928:	7942      	ldrb	r2, [r0, #5]
 800892a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = macMsg->ReJoinType;
 800892c:	6803      	ldr	r3, [r0, #0]
 800892e:	7982      	ldrb	r2, [r0, #6]
 8008930:	705a      	strb	r2, [r3, #1]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8008932:	4601      	mov	r1, r0
 8008934:	2208      	movs	r2, #8
 8008936:	f851 0b07 	ldr.w	r0, [r1], #7
 800893a:	3002      	adds	r0, #2
 800893c:	f7fa fa94 	bl	8002e68 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8008940:	4621      	mov	r1, r4
 8008942:	2208      	movs	r2, #8
 8008944:	f851 0b0f 	ldr.w	r0, [r1], #15
 8008948:	300a      	adds	r0, #10
 800894a:	f7fa fa8d 	bl	8002e68 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->RJcount1 & 0xFF;
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	8b22      	ldrh	r2, [r4, #24]
 8008952:	749a      	strb	r2, [r3, #18]
    macMsg->Buffer[bufItr++] = ( macMsg->RJcount1 >> 8 ) & 0xFF;
 8008954:	8b23      	ldrh	r3, [r4, #24]
 8008956:	6822      	ldr	r2, [r4, #0]
 8008958:	0a1b      	lsrs	r3, r3, #8
 800895a:	74d3      	strb	r3, [r2, #19]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800895c:	6823      	ldr	r3, [r4, #0]
 800895e:	69e2      	ldr	r2, [r4, #28]
 8008960:	751a      	strb	r2, [r3, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8008962:	69e3      	ldr	r3, [r4, #28]
 8008964:	6822      	ldr	r2, [r4, #0]
 8008966:	0a1b      	lsrs	r3, r3, #8
 8008968:	7553      	strb	r3, [r2, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800896a:	6823      	ldr	r3, [r4, #0]
 800896c:	8be2      	ldrh	r2, [r4, #30]
 800896e:	759a      	strb	r2, [r3, #22]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8008970:	6823      	ldr	r3, [r4, #0]
 8008972:	7fe2      	ldrb	r2, [r4, #31]
 8008974:	75da      	strb	r2, [r3, #23]

    macMsg->BufSize = bufItr;
 8008976:	2318      	movs	r3, #24
 8008978:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800897a:	2000      	movs	r0, #0
}
 800897c:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800897e:	2002      	movs	r0, #2
}
 8008980:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8008982:	2001      	movs	r0, #1
}
 8008984:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8008986:	2001      	movs	r0, #1
}
 8008988:	bd10      	pop	{r4, pc}
 800898a:	bf00      	nop

0800898c <LoRaMacSerializerReJoinType0or2>:

LoRaMacSerializerStatus_t LoRaMacSerializerReJoinType0or2( LoRaMacMessageReJoinType0or2_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800898c:	2800      	cmp	r0, #0
 800898e:	d034      	beq.n	80089fa <LoRaMacSerializerReJoinType0or2+0x6e>
 8008990:	6803      	ldr	r3, [r0, #0]
{
 8008992:	b510      	push	{r4, lr}
 8008994:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8008996:	2b00      	cmp	r3, #0
 8008998:	d031      	beq.n	80089fe <LoRaMacSerializerReJoinType0or2+0x72>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_RE_JOIN_0_2_MSG_SIZE )
 800899a:	7902      	ldrb	r2, [r0, #4]
 800899c:	2a12      	cmp	r2, #18
 800899e:	d92a      	bls.n	80089f6 <LoRaMacSerializerReJoinType0or2+0x6a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80089a0:	7942      	ldrb	r2, [r0, #5]
 80089a2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = macMsg->ReJoinType;
 80089a4:	6803      	ldr	r3, [r0, #0]
 80089a6:	7982      	ldrb	r2, [r0, #6]
 80089a8:	705a      	strb	r2, [r3, #1]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->NetID, LORAMAC_NET_ID_FIELD_SIZE );
 80089aa:	4601      	mov	r1, r0
 80089ac:	2203      	movs	r2, #3
 80089ae:	f851 0b07 	ldr.w	r0, [r1], #7
 80089b2:	3002      	adds	r0, #2
 80089b4:	f7fa fa4a 	bl	8002e4c <memcpy1>
    bufItr += LORAMAC_NET_ID_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80089b8:	4621      	mov	r1, r4
 80089ba:	2208      	movs	r2, #8
 80089bc:	f851 0b0a 	ldr.w	r0, [r1], #10
 80089c0:	3005      	adds	r0, #5
 80089c2:	f7fa fa51 	bl	8002e68 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->RJcount0 & 0xFF;
 80089c6:	6823      	ldr	r3, [r4, #0]
 80089c8:	8a62      	ldrh	r2, [r4, #18]
 80089ca:	735a      	strb	r2, [r3, #13]
    macMsg->Buffer[bufItr++] = ( macMsg->RJcount0 >> 8 ) & 0xFF;
 80089cc:	8a63      	ldrh	r3, [r4, #18]
 80089ce:	6822      	ldr	r2, [r4, #0]
 80089d0:	0a1b      	lsrs	r3, r3, #8
 80089d2:	7393      	strb	r3, [r2, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80089d4:	6823      	ldr	r3, [r4, #0]
 80089d6:	6962      	ldr	r2, [r4, #20]
 80089d8:	73da      	strb	r2, [r3, #15]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80089da:	6963      	ldr	r3, [r4, #20]
 80089dc:	6822      	ldr	r2, [r4, #0]
 80089de:	0a1b      	lsrs	r3, r3, #8
 80089e0:	7413      	strb	r3, [r2, #16]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80089e2:	6823      	ldr	r3, [r4, #0]
 80089e4:	8ae2      	ldrh	r2, [r4, #22]
 80089e6:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80089e8:	6823      	ldr	r3, [r4, #0]
 80089ea:	7de2      	ldrb	r2, [r4, #23]
 80089ec:	749a      	strb	r2, [r3, #18]

    macMsg->BufSize = bufItr;
 80089ee:	2313      	movs	r3, #19
 80089f0:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80089f2:	2000      	movs	r0, #0
}
 80089f4:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80089f6:	2002      	movs	r0, #2
}
 80089f8:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80089fa:	2001      	movs	r0, #1
}
 80089fc:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80089fe:	2001      	movs	r0, #1
}
 8008a00:	bd10      	pop	{r4, pc}
 8008a02:	bf00      	nop

08008a04 <LoRaMacSerializerData>:

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8008a04:	2800      	cmp	r0, #0
 8008a06:	d06b      	beq.n	8008ae0 <LoRaMacSerializerData+0xdc>
 8008a08:	6801      	ldr	r1, [r0, #0]
{
 8008a0a:	b538      	push	{r3, r4, r5, lr}
 8008a0c:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8008a0e:	2900      	cmp	r1, #0
 8008a10:	d068      	beq.n	8008ae4 <LoRaMacSerializerData+0xe0>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8008a12:	7b03      	ldrb	r3, [r0, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8008a14:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8008a18:	f003 030f 	and.w	r3, r3, #15
    if( macMsg->FRMPayloadSize > 0 )
 8008a1c:	2a00      	cmp	r2, #0
 8008a1e:	d157      	bne.n	8008ad0 <LoRaMacSerializerData+0xcc>
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;

    if( macMsg->BufSize < computedBufSize )
 8008a20:	7920      	ldrb	r0, [r4, #4]
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8008a22:	3308      	adds	r3, #8
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8008a24:	3204      	adds	r2, #4
    if( macMsg->BufSize < computedBufSize )
 8008a26:	4413      	add	r3, r2
 8008a28:	4298      	cmp	r0, r3
 8008a2a:	d357      	bcc.n	8008adc <LoRaMacSerializerData+0xd8>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8008a2c:	7963      	ldrb	r3, [r4, #5]
 8008a2e:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8008a30:	6823      	ldr	r3, [r4, #0]
 8008a32:	68a2      	ldr	r2, [r4, #8]
 8008a34:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8008a36:	68a3      	ldr	r3, [r4, #8]
 8008a38:	6822      	ldr	r2, [r4, #0]
 8008a3a:	0a1b      	lsrs	r3, r3, #8
 8008a3c:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8008a3e:	6823      	ldr	r3, [r4, #0]
 8008a40:	8962      	ldrh	r2, [r4, #10]
 8008a42:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8008a44:	6823      	ldr	r3, [r4, #0]
 8008a46:	7ae2      	ldrb	r2, [r4, #11]
 8008a48:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8008a4a:	6823      	ldr	r3, [r4, #0]
 8008a4c:	7b22      	ldrb	r2, [r4, #12]
 8008a4e:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8008a50:	6823      	ldr	r3, [r4, #0]
 8008a52:	89e2      	ldrh	r2, [r4, #14]
 8008a54:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8008a56:	89e3      	ldrh	r3, [r4, #14]
 8008a58:	6822      	ldr	r2, [r4, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8008a5a:	4621      	mov	r1, r4
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8008a5c:	0a1b      	lsrs	r3, r3, #8
 8008a5e:	71d3      	strb	r3, [r2, #7]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8008a60:	f851 0b10 	ldr.w	r0, [r1], #16
 8008a64:	7b22      	ldrb	r2, [r4, #12]
 8008a66:	3008      	adds	r0, #8
 8008a68:	f002 020f 	and.w	r2, r2, #15
 8008a6c:	f7fa f9ee 	bl	8002e4c <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8008a70:	7b21      	ldrb	r1, [r4, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8008a72:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8008a76:	f001 010f 	and.w	r1, r1, #15
 8008a7a:	f101 0508 	add.w	r5, r1, #8
    if( macMsg->FRMPayloadSize > 0 )
 8008a7e:	b13a      	cbz	r2, 8008a90 <LoRaMacSerializerData+0x8c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8008a80:	6823      	ldr	r3, [r4, #0]
 8008a82:	f894 2020 	ldrb.w	r2, [r4, #32]
 8008a86:	555a      	strb	r2, [r3, r5]
 8008a88:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8008a8c:	f101 0509 	add.w	r5, r1, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8008a90:	6820      	ldr	r0, [r4, #0]
 8008a92:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008a94:	4428      	add	r0, r5
 8008a96:	f7fa f9d9 	bl	8002e4c <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8008a9a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8008a9e:	6821      	ldr	r1, [r4, #0]
 8008aa0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8008aa2:	442b      	add	r3, r5
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8008aa4:	1c5a      	adds	r2, r3, #1
 8008aa6:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8008aa8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008aaa:	6820      	ldr	r0, [r4, #0]
 8008aac:	b292      	uxth	r2, r2
 8008aae:	0a09      	lsrs	r1, r1, #8
 8008ab0:	5481      	strb	r1, [r0, r2]
 8008ab2:	1c99      	adds	r1, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8008ab4:	6820      	ldr	r0, [r4, #0]
 8008ab6:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 8008ab8:	b289      	uxth	r1, r1
 8008aba:	1cda      	adds	r2, r3, #3
 8008abc:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8008abe:	b292      	uxth	r2, r2
 8008ac0:	6821      	ldr	r1, [r4, #0]
 8008ac2:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 8008ac6:	5488      	strb	r0, [r1, r2]
 8008ac8:	3304      	adds	r3, #4

    macMsg->BufSize = bufItr;
 8008aca:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8008acc:	2000      	movs	r0, #0
}
 8008ace:	bd38      	pop	{r3, r4, r5, pc}
    if( macMsg->BufSize < computedBufSize )
 8008ad0:	7920      	ldrb	r0, [r4, #4]
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8008ad2:	3309      	adds	r3, #9
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8008ad4:	3204      	adds	r2, #4
    if( macMsg->BufSize < computedBufSize )
 8008ad6:	4413      	add	r3, r2
 8008ad8:	4298      	cmp	r0, r3
 8008ada:	d2a7      	bcs.n	8008a2c <LoRaMacSerializerData+0x28>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8008adc:	2002      	movs	r0, #2
}
 8008ade:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8008ae0:	2001      	movs	r0, #1
}
 8008ae2:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8008ae4:	2001      	movs	r0, #1
}
 8008ae6:	bd38      	pop	{r3, r4, r5, pc}

08008ae8 <RegionIsActive>:
        default:
        {
            return false;
        }
    }
}
 8008ae8:	f1a0 0007 	sub.w	r0, r0, #7
 8008aec:	fab0 f080 	clz	r0, r0
 8008af0:	0940      	lsrs	r0, r0, #5
 8008af2:	4770      	bx	lr

08008af4 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
    PhyParam_t phyParam = { 0 };
    switch( region )
 8008af4:	2807      	cmp	r0, #7
{
 8008af6:	b082      	sub	sp, #8
    switch( region )
 8008af8:	d002      	beq.n	8008b00 <RegionGetPhyParam+0xc>
        default:
        {
            return phyParam;
        }
    }
}
 8008afa:	2000      	movs	r0, #0
 8008afc:	b002      	add	sp, #8
 8008afe:	4770      	bx	lr
        IN865_GET_PHY_PARAM( );
 8008b00:	4608      	mov	r0, r1
}
 8008b02:	b002      	add	sp, #8
        IN865_GET_PHY_PARAM( );
 8008b04:	f000 bc8a 	b.w	800941c <RegionIN865GetPhyParam>

08008b08 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
    switch( region )
 8008b08:	2807      	cmp	r0, #7
 8008b0a:	d000      	beq.n	8008b0e <RegionSetBandTxDone+0x6>
        default:
        {
            return;
        }
    }
}
 8008b0c:	4770      	bx	lr
        IN865_SET_BAND_TX_DONE( );
 8008b0e:	4608      	mov	r0, r1
 8008b10:	f000 bd2c 	b.w	800956c <RegionIN865SetBandTxDone>

08008b14 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
    switch( region )
 8008b14:	2807      	cmp	r0, #7
 8008b16:	d000      	beq.n	8008b1a <RegionInitDefaults+0x6>
        default:
        {
            break;
        }
    }
}
 8008b18:	4770      	bx	lr
        IN865_INIT_DEFAULTS( );
 8008b1a:	4608      	mov	r0, r1
 8008b1c:	f000 bd44 	b.w	80095a8 <RegionIN865InitDefaults>

08008b20 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
    switch( region )
 8008b20:	2807      	cmp	r0, #7
{
 8008b22:	460b      	mov	r3, r1
    switch( region )
 8008b24:	d001      	beq.n	8008b2a <RegionVerify+0xa>
        default:
        {
            return false;
        }
    }
}
 8008b26:	2000      	movs	r0, #0
 8008b28:	4770      	bx	lr
        IN865_VERIFY( );
 8008b2a:	4611      	mov	r1, r2
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f000 bd9f 	b.w	8009670 <RegionIN865Verify>
 8008b32:	bf00      	nop

08008b34 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
    switch( region )
 8008b34:	2807      	cmp	r0, #7
 8008b36:	d000      	beq.n	8008b3a <RegionApplyCFList+0x6>
        default:
        {
            break;
        }
    }
}
 8008b38:	4770      	bx	lr
        IN865_APPLY_CF_LIST( );
 8008b3a:	4608      	mov	r0, r1
 8008b3c:	f001 b984 	b.w	8009e48 <RegionIN865ApplyCFList>

08008b40 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
    switch( region )
 8008b40:	2807      	cmp	r0, #7
 8008b42:	d001      	beq.n	8008b48 <RegionChanMaskSet+0x8>
        default:
        {
            return false;
        }
    }
}
 8008b44:	2000      	movs	r0, #0
 8008b46:	4770      	bx	lr
        IN865_CHAN_MASK_SET( );
 8008b48:	4608      	mov	r0, r1
 8008b4a:	f000 bdd3 	b.w	80096f4 <RegionIN865ChanMaskSet>
 8008b4e:	bf00      	nop

08008b50 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8008b50:	b410      	push	{r4}
    switch( region )
 8008b52:	2807      	cmp	r0, #7
{
 8008b54:	460c      	mov	r4, r1
 8008b56:	4611      	mov	r1, r2
 8008b58:	461a      	mov	r2, r3
 8008b5a:	9b01      	ldr	r3, [sp, #4]
    switch( region )
 8008b5c:	d002      	beq.n	8008b64 <RegionComputeRxWindowParameters+0x14>
        default:
        {
            break;
        }
    }
}
 8008b5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b62:	4770      	bx	lr
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
 8008b64:	4620      	mov	r0, r4
}
 8008b66:	f85d 4b04 	ldr.w	r4, [sp], #4
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
 8008b6a:	f000 bddf 	b.w	800972c <RegionIN865ComputeRxWindowParameters>
 8008b6e:	bf00      	nop

08008b70 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
    switch( region )
 8008b70:	2807      	cmp	r0, #7
{
 8008b72:	460b      	mov	r3, r1
    switch( region )
 8008b74:	d001      	beq.n	8008b7a <RegionRxConfig+0xa>
        default:
        {
            return false;
        }
    }
}
 8008b76:	2000      	movs	r0, #0
 8008b78:	4770      	bx	lr
        IN865_RX_CONFIG( );
 8008b7a:	4611      	mov	r1, r2
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f000 be09 	b.w	8009794 <RegionIN865RxConfig>
 8008b82:	bf00      	nop

08008b84 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
    switch( region )
 8008b84:	2807      	cmp	r0, #7
 8008b86:	d001      	beq.n	8008b8c <RegionTxConfig+0x8>
        default:
        {
            return false;
        }
    }
}
 8008b88:	2000      	movs	r0, #0
 8008b8a:	4770      	bx	lr
{
 8008b8c:	b410      	push	{r4}
 8008b8e:	460c      	mov	r4, r1
        IN865_TX_CONFIG( );
 8008b90:	4620      	mov	r0, r4
 8008b92:	4611      	mov	r1, r2
}
 8008b94:	f85d 4b04 	ldr.w	r4, [sp], #4
        IN865_TX_CONFIG( );
 8008b98:	461a      	mov	r2, r3
 8008b9a:	f000 be73 	b.w	8009884 <RegionIN865TxConfig>
 8008b9e:	bf00      	nop

08008ba0 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8008ba0:	b430      	push	{r4, r5}
    switch( region )
 8008ba2:	2807      	cmp	r0, #7
{
 8008ba4:	460c      	mov	r4, r1
 8008ba6:	4611      	mov	r1, r2
 8008ba8:	461a      	mov	r2, r3
 8008baa:	e9dd 3502 	ldrd	r3, r5, [sp, #8]
    switch( region )
 8008bae:	d002      	beq.n	8008bb6 <RegionLinkAdrReq+0x16>
        default:
        {
            return 0;
        }
    }
}
 8008bb0:	2000      	movs	r0, #0
 8008bb2:	bc30      	pop	{r4, r5}
 8008bb4:	4770      	bx	lr
        IN865_LINK_ADR_REQ( );
 8008bb6:	9502      	str	r5, [sp, #8]
 8008bb8:	4620      	mov	r0, r4
}
 8008bba:	bc30      	pop	{r4, r5}
        IN865_LINK_ADR_REQ( );
 8008bbc:	f000 beec 	b.w	8009998 <RegionIN865LinkAdrReq>

08008bc0 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
    switch( region )
 8008bc0:	2807      	cmp	r0, #7
 8008bc2:	d001      	beq.n	8008bc8 <RegionRxParamSetupReq+0x8>
        default:
        {
            return 0;
        }
    }
}
 8008bc4:	2000      	movs	r0, #0
 8008bc6:	4770      	bx	lr
        IN865_RX_PARAM_SETUP_REQ( );
 8008bc8:	4608      	mov	r0, r1
 8008bca:	f000 bfb7 	b.w	8009b3c <RegionIN865RxParamSetupReq>
 8008bce:	bf00      	nop

08008bd0 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
    switch( region )
 8008bd0:	2807      	cmp	r0, #7
 8008bd2:	d001      	beq.n	8008bd8 <RegionNewChannelReq+0x8>
        default:
        {
            return 0;
        }
    }
}
 8008bd4:	2000      	movs	r0, #0
 8008bd6:	4770      	bx	lr
        IN865_NEW_CHANNEL_REQ( );
 8008bd8:	4608      	mov	r0, r1
 8008bda:	f001 b97b 	b.w	8009ed4 <RegionIN865NewChannelReq>
 8008bde:	bf00      	nop

08008be0 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
    switch( region )
 8008be0:	2807      	cmp	r0, #7
 8008be2:	d001      	beq.n	8008be8 <RegionTxParamSetupReq+0x8>
        default:
        {
            return 0;
        }
    }
}
 8008be4:	2000      	movs	r0, #0
 8008be6:	4770      	bx	lr
        IN865_TX_PARAM_SETUP_REQ( );
 8008be8:	4608      	mov	r0, r1
 8008bea:	f000 bfd7 	b.w	8009b9c <RegionIN865TxParamSetupReq>
 8008bee:	bf00      	nop

08008bf0 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
    switch( region )
 8008bf0:	2807      	cmp	r0, #7
 8008bf2:	d001      	beq.n	8008bf8 <RegionDlChannelReq+0x8>
        default:
        {
            return 0;
        }
    }
}
 8008bf4:	2000      	movs	r0, #0
 8008bf6:	4770      	bx	lr
        IN865_DL_CHANNEL_REQ( );
 8008bf8:	4608      	mov	r0, r1
 8008bfa:	f000 bfd3 	b.w	8009ba4 <RegionIN865DlChannelReq>
 8008bfe:	bf00      	nop

08008c00 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
    switch( region )
 8008c00:	2807      	cmp	r0, #7
{
 8008c02:	460b      	mov	r3, r1
    switch( region )
 8008c04:	d001      	beq.n	8008c0a <RegionAlternateDr+0xa>
        default:
        {
            return 0;
        }
    }
}
 8008c06:	2000      	movs	r0, #0
 8008c08:	4770      	bx	lr
        IN865_ALTERNATE_DR( );
 8008c0a:	4611      	mov	r1, r2
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f001 b80b 	b.w	8009c28 <RegionIN865AlternateDr>
 8008c12:	bf00      	nop

08008c14 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8008c14:	b410      	push	{r4}
    switch( region )
 8008c16:	2807      	cmp	r0, #7
{
 8008c18:	460c      	mov	r4, r1
 8008c1a:	4611      	mov	r1, r2
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	9b01      	ldr	r3, [sp, #4]
    switch( region )
 8008c20:	d003      	beq.n	8008c2a <RegionNextChannel+0x16>
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 8008c22:	2009      	movs	r0, #9
 8008c24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c28:	4770      	bx	lr
        IN865_NEXT_CHANNEL( );
 8008c2a:	4620      	mov	r0, r4
}
 8008c2c:	f85d 4b04 	ldr.w	r4, [sp], #4
        IN865_NEXT_CHANNEL( );
 8008c30:	f000 bffc 	b.w	8009c2c <RegionIN865NextChannel>

08008c34 <RegionApplyDrOffset>:
    }
}

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
    switch( region )
 8008c34:	2807      	cmp	r0, #7
{
 8008c36:	b420      	push	{r5}
 8008c38:	460d      	mov	r5, r1
 8008c3a:	4611      	mov	r1, r2
    switch( region )
 8008c3c:	d003      	beq.n	8008c46 <RegionApplyDrOffset+0x12>
        default:
        {
            return dr;
        }
    }
}
 8008c3e:	b2d0      	uxtb	r0, r2
 8008c40:	f85d 5b04 	ldr.w	r5, [sp], #4
 8008c44:	4770      	bx	lr
        IN865_APPLY_DR_OFFSET( );
 8008c46:	4628      	mov	r0, r5
 8008c48:	461a      	mov	r2, r3
}
 8008c4a:	f85d 5b04 	ldr.w	r5, [sp], #4
        IN865_APPLY_DR_OFFSET( );
 8008c4e:	f001 b965 	b.w	8009f1c <RegionIN865ApplyDrOffset>
 8008c52:	bf00      	nop

08008c54 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 8008c54:	4800      	ldr	r0, [pc, #0]	; (8008c58 <RegionGetVersion+0x4>)
 8008c56:	4770      	bx	lr
 8008c58:	02010001 	.word	0x02010001

08008c5c <RegionCommonChanVerifyDr.part.0>:
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
    {
        return false;
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8008c5c:	b3a0      	cbz	r0, 8008cc8 <RegionCommonChanVerifyDr.part.0+0x6c>
bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
 8008c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8008c62:	f04f 0e00 	mov.w	lr, #0
 8008c66:	4677      	mov	r7, lr
 8008c68:	f04f 080c 	mov.w	r8, #12
    {
        for( uint8_t j = 0; j < 16; j++ )
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8008c6c:	fa5f f48e 	uxtb.w	r4, lr
 8008c70:	b2ff      	uxtb	r7, r7
 8008c72:	f831 c014 	ldrh.w	ip, [r1, r4, lsl #1]
 8008c76:	fb18 3707 	smlabb	r7, r8, r7, r3
 8008c7a:	2400      	movs	r4, #0
 8008c7c:	e001      	b.n	8008c82 <RegionCommonChanVerifyDr.part.0+0x26>
        for( uint8_t j = 0; j < 16; j++ )
 8008c7e:	2c10      	cmp	r4, #16
 8008c80:	d019      	beq.n	8008cb6 <RegionCommonChanVerifyDr.part.0+0x5a>
 8008c82:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8008c86:	eb07 0685 	add.w	r6, r7, r5, lsl #2
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8008c8a:	fa4c f504 	asr.w	r5, ip, r4
 8008c8e:	f015 0f01 	tst.w	r5, #1
 8008c92:	f104 0401 	add.w	r4, r4, #1
 8008c96:	d0f2      	beq.n	8008c7e <RegionCommonChanVerifyDr.part.0+0x22>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8008c98:	7a36      	ldrb	r6, [r6, #8]
 8008c9a:	f346 1503 	sbfx	r5, r6, #4, #4
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 8008c9e:	f006 060f 	and.w	r6, r6, #15
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8008ca2:	b26d      	sxtb	r5, r5
    if( ( value >= min ) && ( value <= max ) )
 8008ca4:	4296      	cmp	r6, r2
 8008ca6:	f005 050f 	and.w	r5, r5, #15
 8008caa:	dce8      	bgt.n	8008c7e <RegionCommonChanVerifyDr.part.0+0x22>
 8008cac:	4295      	cmp	r5, r2
 8008cae:	dbe6      	blt.n	8008c7e <RegionCommonChanVerifyDr.part.0+0x22>
                    return true;
 8008cb0:	2001      	movs	r0, #1
}
 8008cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8008cb6:	f10e 0e01 	add.w	lr, lr, #1
 8008cba:	ea4f 170e 	mov.w	r7, lr, lsl #4
 8008cbe:	b2fc      	uxtb	r4, r7
 8008cc0:	42a0      	cmp	r0, r4
 8008cc2:	d8d3      	bhi.n	8008c6c <RegionCommonChanVerifyDr.part.0+0x10>
    return false;
 8008cc4:	2000      	movs	r0, #0
 8008cc6:	e7f4      	b.n	8008cb2 <RegionCommonChanVerifyDr.part.0+0x56>
}
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop

08008ccc <RegionCommonValueInRange>:
    if( ( value >= min ) && ( value <= max ) )
 8008ccc:	4288      	cmp	r0, r1
 8008cce:	db04      	blt.n	8008cda <RegionCommonValueInRange+0xe>
    {
        return 1;
 8008cd0:	4290      	cmp	r0, r2
 8008cd2:	bfcc      	ite	gt
 8008cd4:	2000      	movgt	r0, #0
 8008cd6:	2001      	movle	r0, #1
 8008cd8:	4770      	bx	lr
    }
    return 0;
 8008cda:	2000      	movs	r0, #0
}
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop

08008ce0 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8008ce0:	b410      	push	{r4}
    uint8_t index = id / 16;

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8008ce2:	0914      	lsrs	r4, r2, #4
 8008ce4:	ebb4 1f11 	cmp.w	r4, r1, lsr #4
 8008ce8:	d312      	bcc.n	8008d10 <RegionCommonChanDisable+0x30>
 8008cea:	4291      	cmp	r1, r2
 8008cec:	d210      	bcs.n	8008d10 <RegionCommonChanDisable+0x30>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8008cee:	090b      	lsrs	r3, r1, #4
 8008cf0:	b21a      	sxth	r2, r3
 8008cf2:	f001 010f 	and.w	r1, r1, #15
 8008cf6:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	fa03 f101 	lsl.w	r1, r3, r1
 8008d00:	ea24 0101 	bic.w	r1, r4, r1
 8008d04:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]

    return true;
}
 8008d08:	f85d 4b04 	ldr.w	r4, [sp], #4
    return true;
 8008d0c:	4618      	mov	r0, r3
}
 8008d0e:	4770      	bx	lr
        return false;
 8008d10:	2000      	movs	r0, #0
}
 8008d12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 8008d18:	b310      	cbz	r0, 8008d60 <RegionCommonCountChannels+0x48>
    {
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8008d1a:	4291      	cmp	r1, r2
 8008d1c:	d221      	bcs.n	8008d62 <RegionCommonCountChannels+0x4a>
 8008d1e:	1e53      	subs	r3, r2, #1
 8008d20:	1a5b      	subs	r3, r3, r1
{
 8008d22:	b4f0      	push	{r4, r5, r6, r7}
 8008d24:	fa51 f383 	uxtab	r3, r1, r3
 8008d28:	1c87      	adds	r7, r0, #2
 8008d2a:	eb00 0641 	add.w	r6, r0, r1, lsl #1
 8008d2e:	eb07 0743 	add.w	r7, r7, r3, lsl #1
    uint8_t nbChannels = 0;
 8008d32:	2000      	movs	r0, #0
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8008d34:	2501      	movs	r5, #1
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8008d36:	2300      	movs	r3, #0
 8008d38:	f836 4b02 	ldrh.w	r4, [r6], #2
    uint8_t nbActiveBits = 0;
 8008d3c:	4619      	mov	r1, r3
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8008d3e:	fa05 f203 	lsl.w	r2, r5, r3
 8008d42:	43a2      	bics	r2, r4
            nbActiveBits++;
 8008d44:	bf08      	it	eq
 8008d46:	3101      	addeq	r1, #1
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8008d48:	f103 0301 	add.w	r3, r3, #1
            nbActiveBits++;
 8008d4c:	bf08      	it	eq
 8008d4e:	b2c9      	uxtbeq	r1, r1
    for( uint8_t j = 0; j < nbBits; j++ )
 8008d50:	2b10      	cmp	r3, #16
 8008d52:	d1f4      	bne.n	8008d3e <RegionCommonCountChannels+0x26>
        nbChannels += CountChannels( channelsMask[i], 16 );
 8008d54:	4408      	add	r0, r1
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8008d56:	42be      	cmp	r6, r7
        nbChannels += CountChannels( channelsMask[i], 16 );
 8008d58:	b2c0      	uxtb	r0, r0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8008d5a:	d1ec      	bne.n	8008d36 <RegionCommonCountChannels+0x1e>
    }

    return nbChannels;
}
 8008d5c:	bcf0      	pop	{r4, r5, r6, r7}
 8008d5e:	4770      	bx	lr
 8008d60:	4770      	bx	lr
        return 0;
 8008d62:	2000      	movs	r0, #0
 8008d64:	4770      	bx	lr
 8008d66:	bf00      	nop

08008d68 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8008d68:	b168      	cbz	r0, 8008d86 <RegionCommonChanMaskCopy+0x1e>
 8008d6a:	b161      	cbz	r1, 8008d86 <RegionCommonChanMaskCopy+0x1e>
    {
        for( uint8_t i = 0; i < len; i++ )
 8008d6c:	b15a      	cbz	r2, 8008d86 <RegionCommonChanMaskCopy+0x1e>
 8008d6e:	3a01      	subs	r2, #1
 8008d70:	b2d3      	uxtb	r3, r2
 8008d72:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8008d76:	3802      	subs	r0, #2
 8008d78:	3902      	subs	r1, #2
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8008d7a:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 8008d7e:	f820 2f02 	strh.w	r2, [r0, #2]!
        for( uint8_t i = 0; i < len; i++ )
 8008d82:	4299      	cmp	r1, r3
 8008d84:	d1f9      	bne.n	8008d7a <RegionCommonChanMaskCopy+0x12>
        }
    }
}
 8008d86:	4770      	bx	lr

08008d88 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8008d88:	b082      	sub	sp, #8
 8008d8a:	b430      	push	{r4, r5}
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8008d8c:	8804      	ldrh	r4, [r0, #0]
{
 8008d8e:	9303      	str	r3, [sp, #12]
    if( joined == false )
 8008d90:	b972      	cbnz	r2, 8008db0 <RegionCommonSetBandTxDone+0x28>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8008d92:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8008d96:	d319      	bcc.n	8008dcc <RegionCommonSetBandTxDone+0x44>
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8008d98:	f649 25af 	movw	r5, #39599	; 0x9aaf
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8008d9c:	f242 7210 	movw	r2, #10000	; 0x2710
 8008da0:	42ab      	cmp	r3, r5
 8008da2:	bf8c      	ite	hi
 8008da4:	4613      	movhi	r3, r2
 8008da6:	f44f 737a 	movls.w	r3, #1000	; 0x3e8
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8008daa:	429c      	cmp	r4, r3
 8008dac:	bf38      	it	cc
 8008dae:	461c      	movcc	r4, r3

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8008db0:	2c01      	cmp	r4, #1
 8008db2:	bf38      	it	cc
 8008db4:	2401      	movcc	r4, #1
 8008db6:	fb01 f104 	mul.w	r1, r1, r4
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8008dba:	bc30      	pop	{r4, r5}
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8008dbc:	68c3      	ldr	r3, [r0, #12]
 8008dbe:	428b      	cmp	r3, r1
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8008dc0:	bf8c      	ite	hi
 8008dc2:	1a59      	subhi	r1, r3, r1
        band->TimeCredits = 0;
 8008dc4:	2100      	movls	r1, #0
 8008dc6:	60c1      	str	r1, [r0, #12]
}
 8008dc8:	b002      	add	sp, #8
 8008dca:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8008dcc:	2364      	movs	r3, #100	; 0x64
 8008dce:	e7ec      	b.n	8008daa <RegionCommonSetBandTxDone+0x22>

08008dd0 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8008dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd4:	b091      	sub	sp, #68	; 0x44
 8008dd6:	4683      	mov	fp, r0
 8008dd8:	9302      	str	r3, [sp, #8]
 8008dda:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8008dde:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
 8008de2:	9307      	str	r3, [sp, #28]
 8008de4:	460c      	mov	r4, r1
 8008de6:	4615      	mov	r5, r2
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8008de8:	f003 fc88 	bl	800c6fc <TimerGetCurrentTime>
 8008dec:	9003      	str	r0, [sp, #12]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 8008dee:	2d00      	cmp	r5, #0
 8008df0:	f000 810e 	beq.w	8009010 <RegionCommonUpdateBandTimeOff+0x240>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8008df4:	498a      	ldr	r1, [pc, #552]	; (8009020 <RegionCommonUpdateBandTimeOff+0x250>)
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8008df6:	4a8b      	ldr	r2, [pc, #556]	; (8009024 <RegionCommonUpdateBandTimeOff+0x254>)
 8008df8:	f9bd 0070 	ldrsh.w	r0, [sp, #112]	; 0x70
 8008dfc:	9004      	str	r0, [sp, #16]
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8008dfe:	f5a8 33f6 	sub.w	r3, r8, #125952	; 0x1ec00
 8008e02:	3b30      	subs	r3, #48	; 0x30
 8008e04:	fba1 1303 	umull	r1, r3, r1, r3
 8008e08:	0c1b      	lsrs	r3, r3, #16
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8008e0a:	fb02 f303 	mul.w	r3, r2, r3
 8008e0e:	3d01      	subs	r5, #1
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8008e10:	f503 30f6 	add.w	r0, r3, #125952	; 0x1ec00
 8008e14:	b2ed      	uxtb	r5, r5
 8008e16:	f104 0218 	add.w	r2, r4, #24
 8008e1a:	2118      	movs	r1, #24
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8008e1c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8008e20:	fb11 2205 	smlabb	r2, r1, r5, r2
 8008e24:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008e28:	9205      	str	r2, [sp, #20]
 8008e2a:	9309      	str	r3, [sp, #36]	; 0x24
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8008e2c:	f100 0230 	add.w	r2, r0, #48	; 0x30
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8008e30:	f04f 33ff 	mov.w	r3, #4294967295
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8008e34:	9208      	str	r2, [sp, #32]
    uint8_t validBands = 0;
 8008e36:	f04f 0900 	mov.w	r9, #0
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8008e3a:	9306      	str	r3, [sp, #24]
 8008e3c:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8008e40:	9b04      	ldr	r3, [sp, #16]
 8008e42:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8008e46:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8008e4a:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8008e4e:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
 8008e52:	f003 fd03 	bl	800c85c <SysTimeToMs>
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8008e56:	8827      	ldrh	r7, [r4, #0]
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8008e58:	4601      	mov	r1, r0
    if( joined == false )
 8008e5a:	f1bb 0f00 	cmp.w	fp, #0
 8008e5e:	d167      	bne.n	8008f30 <RegionCommonUpdateBandTimeOff+0x160>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8008e60:	f5b8 6f61 	cmp.w	r8, #3600	; 0xe10
 8008e64:	d37e      	bcc.n	8008f64 <RegionCommonUpdateBandTimeOff+0x194>
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8008e66:	f649 23af 	movw	r3, #39599	; 0x9aaf
 8008e6a:	4598      	cmp	r8, r3
 8008e6c:	f200 80b1 	bhi.w	8008fd2 <RegionCommonUpdateBandTimeOff+0x202>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8008e70:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
 8008e74:	bf38      	it	cc
 8008e76:	f44f 777a 	movcc.w	r7, #1000	; 0x3e8
 8008e7a:	b2bf      	uxth	r7, r7
 8008e7c:	463e      	mov	r6, r7
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8008e7e:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
 8008e82:	f040 80ad 	bne.w	8008fe0 <RegionCommonUpdateBandTimeOff+0x210>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8008e86:	4d68      	ldr	r5, [pc, #416]	; (8009028 <RegionCommonUpdateBandTimeOff+0x258>)
            band->LastMaxCreditAssignTime = elapsedTime;
 8008e88:	60a1      	str	r1, [r4, #8]
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8008e8a:	a80e      	add	r0, sp, #56	; 0x38
 8008e8c:	f003 fd06 	bl	800c89c <SysTimeFromMs>
 8008e90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e92:	9300      	str	r3, [sp, #0]
 8008e94:	a80c      	add	r0, sp, #48	; 0x30
 8008e96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e98:	e89a 0006 	ldmia.w	sl, {r1, r2}
 8008e9c:	f003 fc64 	bl	800c768 <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8008ea0:	9b02      	ldr	r3, [sp, #8]
 8008ea2:	a80c      	add	r0, sp, #48	; 0x30
 8008ea4:	b90b      	cbnz	r3, 8008eaa <RegionCommonUpdateBandTimeOff+0xda>
 8008ea6:	9b07      	ldr	r3, [sp, #28]
 8008ea8:	b11b      	cbz	r3, 8008eb2 <RegionCommonUpdateBandTimeOff+0xe2>
 8008eaa:	6923      	ldr	r3, [r4, #16]
 8008eac:	42ab      	cmp	r3, r5
 8008eae:	f000 80a4 	beq.w	8008ffa <RegionCommonUpdateBandTimeOff+0x22a>
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8008eb2:	4b5e      	ldr	r3, [pc, #376]	; (800902c <RegionCommonUpdateBandTimeOff+0x25c>)
            band->TimeCredits = maxCredits;
 8008eb4:	60e5      	str	r5, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8008eb6:	4598      	cmp	r8, r3
 8008eb8:	f200 8095 	bhi.w	8008fe6 <RegionCommonUpdateBandTimeOff+0x216>
    if( band->LastBandUpdateTime == 0 )
 8008ebc:	6863      	ldr	r3, [r4, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d04c      	beq.n	8008f5c <RegionCommonUpdateBandTimeOff+0x18c>
    band->MaxTimeCredits = maxCredits;
 8008ec2:	6125      	str	r5, [r4, #16]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8008ec4:	462b      	mov	r3, r5
 8008ec6:	68e5      	ldr	r5, [r4, #12]
    if( band->TimeCredits > band->MaxTimeCredits )
 8008ec8:	429d      	cmp	r5, r3
        band->TimeCredits = band->MaxTimeCredits;
 8008eca:	bf84      	itt	hi
 8008ecc:	60e3      	strhi	r3, [r4, #12]
 8008ece:	461d      	movhi	r5, r3
        creditCosts = expectedTimeOnAir * dutyCycle;
 8008ed0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008ed2:	fb02 f606 	mul.w	r6, r2, r6
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8008ed6:	42ae      	cmp	r6, r5
    band->LastBandUpdateTime = currentTime;
 8008ed8:	9a03      	ldr	r2, [sp, #12]
 8008eda:	6062      	str	r2, [r4, #4]
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8008edc:	d321      	bcc.n	8008f22 <RegionCommonUpdateBandTimeOff+0x152>
 8008ede:	9a02      	ldr	r2, [sp, #8]
 8008ee0:	2a00      	cmp	r2, #0
 8008ee2:	d14a      	bne.n	8008f7a <RegionCommonUpdateBandTimeOff+0x1aa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8008ee4:	f1bb 0f00 	cmp.w	fp, #0
 8008ee8:	d11b      	bne.n	8008f22 <RegionCommonUpdateBandTimeOff+0x152>
            if( bands[i].MaxTimeCredits > creditCosts )
 8008eea:	429e      	cmp	r6, r3
            bands[i].ReadyForTransmission = false;
 8008eec:	f884 b014 	strb.w	fp, [r4, #20]
            if( bands[i].MaxTimeCredits > creditCosts )
 8008ef0:	d24a      	bcs.n	8008f88 <RegionCommonUpdateBandTimeOff+0x1b8>
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8008ef2:	9b06      	ldr	r3, [sp, #24]
 8008ef4:	1b76      	subs	r6, r6, r5
 8008ef6:	42b3      	cmp	r3, r6
                validBands++;
 8008ef8:	f109 0901 	add.w	r9, r9, #1
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8008efc:	bf28      	it	cs
 8008efe:	4633      	movcs	r3, r6
 8008f00:	9306      	str	r3, [sp, #24]
                validBands++;
 8008f02:	fa5f f989 	uxtb.w	r9, r9
            if( joined == false )
 8008f06:	f1bb 0f00 	cmp.w	fp, #0
 8008f0a:	d03d      	beq.n	8008f88 <RegionCommonUpdateBandTimeOff+0x1b8>
    for( uint8_t i = 0; i < nbBands; i++ )
 8008f0c:	9b05      	ldr	r3, [sp, #20]
 8008f0e:	3418      	adds	r4, #24
 8008f10:	429c      	cmp	r4, r3
 8008f12:	d195      	bne.n	8008e40 <RegionCommonUpdateBandTimeOff+0x70>
            }
        }
    }


    if( validBands == 0 )
 8008f14:	f1b9 0f00 	cmp.w	r9, #0
 8008f18:	d07a      	beq.n	8009010 <RegionCommonUpdateBandTimeOff+0x240>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 8008f1a:	9806      	ldr	r0, [sp, #24]
 8008f1c:	b011      	add	sp, #68	; 0x44
 8008f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            validBands++;
 8008f22:	f109 0901 	add.w	r9, r9, #1
            bands[i].ReadyForTransmission = true;
 8008f26:	2301      	movs	r3, #1
            validBands++;
 8008f28:	fa5f f989 	uxtb.w	r9, r9
            bands[i].ReadyForTransmission = true;
 8008f2c:	7523      	strb	r3, [r4, #20]
            validBands++;
 8008f2e:	e7ed      	b.n	8008f0c <RegionCommonUpdateBandTimeOff+0x13c>
    if( dutyCycle == 0 )
 8008f30:	2f01      	cmp	r7, #1
        if( dutyCycleEnabled == false )
 8008f32:	9b02      	ldr	r3, [sp, #8]
 8008f34:	463e      	mov	r6, r7
 8008f36:	bf38      	it	cc
 8008f38:	2601      	movcc	r6, #1
 8008f3a:	b2b6      	uxth	r6, r6
 8008f3c:	b90b      	cbnz	r3, 8008f42 <RegionCommonUpdateBandTimeOff+0x172>
            band->TimeCredits = maxCredits;
 8008f3e:	4b3c      	ldr	r3, [pc, #240]	; (8009030 <RegionCommonUpdateBandTimeOff+0x260>)
 8008f40:	60e3      	str	r3, [r4, #12]
    if( band->LastBandUpdateTime == 0 )
 8008f42:	6860      	ldr	r0, [r4, #4]
 8008f44:	2800      	cmp	r0, #0
 8008f46:	d141      	bne.n	8008fcc <RegionCommonUpdateBandTimeOff+0x1fc>
        band->TimeCredits = maxCredits;
 8008f48:	4b39      	ldr	r3, [pc, #228]	; (8009030 <RegionCommonUpdateBandTimeOff+0x260>)
    band->MaxTimeCredits = maxCredits;
 8008f4a:	e9c4 3303 	strd	r3, r3, [r4, #12]
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8008f4e:	f003 fbdd 	bl	800c70c <TimerGetElapsedTime>
 8008f52:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
 8008f56:	4405      	add	r5, r0
 8008f58:	60e5      	str	r5, [r4, #12]
 8008f5a:	e7b5      	b.n	8008ec8 <RegionCommonUpdateBandTimeOff+0xf8>
    band->MaxTimeCredits = maxCredits;
 8008f5c:	e9c4 5503 	strd	r5, r5, [r4, #12]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8008f60:	462b      	mov	r3, r5
 8008f62:	e7b5      	b.n	8008ed0 <RegionCommonUpdateBandTimeOff+0x100>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8008f64:	2f64      	cmp	r7, #100	; 0x64
 8008f66:	463e      	mov	r6, r7
 8008f68:	bf38      	it	cc
 8008f6a:	2664      	movcc	r6, #100	; 0x64
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8008f6c:	2f64      	cmp	r7, #100	; 0x64
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8008f6e:	b2b6      	uxth	r6, r6
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8008f70:	d849      	bhi.n	8009006 <RegionCommonUpdateBandTimeOff+0x236>
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8008f72:	4d2f      	ldr	r5, [pc, #188]	; (8009030 <RegionCommonUpdateBandTimeOff+0x260>)
            band->LastMaxCreditAssignTime = elapsedTime;
 8008f74:	60a0      	str	r0, [r4, #8]
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8008f76:	4637      	mov	r7, r6
 8008f78:	e787      	b.n	8008e8a <RegionCommonUpdateBandTimeOff+0xba>
            bands[i].ReadyForTransmission = false;
 8008f7a:	2200      	movs	r2, #0
            if( bands[i].MaxTimeCredits > creditCosts )
 8008f7c:	429e      	cmp	r6, r3
            bands[i].ReadyForTransmission = false;
 8008f7e:	7522      	strb	r2, [r4, #20]
            if( bands[i].MaxTimeCredits > creditCosts )
 8008f80:	d3b7      	bcc.n	8008ef2 <RegionCommonUpdateBandTimeOff+0x122>
            if( joined == false )
 8008f82:	f1bb 0f00 	cmp.w	fp, #0
 8008f86:	d1c1      	bne.n	8008f0c <RegionCommonUpdateBandTimeOff+0x13c>
                SysTime_t backoffTimeRange = {
 8008f88:	2300      	movs	r3, #0
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8008f8a:	2f64      	cmp	r7, #100	; 0x64
                SysTime_t backoffTimeRange = {
 8008f8c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8008f90:	d03b      	beq.n	800900a <RegionCommonUpdateBandTimeOff+0x23a>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8008f92:	4a28      	ldr	r2, [pc, #160]	; (8009034 <RegionCommonUpdateBandTimeOff+0x264>)
 8008f94:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8008f98:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
 8008f9c:	bf0c      	ite	eq
 8008f9e:	461f      	moveq	r7, r3
 8008fa0:	4617      	movne	r7, r2
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8008fa2:	4b24      	ldr	r3, [pc, #144]	; (8009034 <RegionCommonUpdateBandTimeOff+0x264>)
 8008fa4:	4598      	cmp	r8, r3
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8008fa6:	bf84      	itt	hi
 8008fa8:	9b09      	ldrhi	r3, [sp, #36]	; 0x24
 8008faa:	18ff      	addhi	r7, r7, r3
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8008fac:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008fae:	9300      	str	r3, [sp, #0]
 8008fb0:	ad0c      	add	r5, sp, #48	; 0x30
 8008fb2:	970c      	str	r7, [sp, #48]	; 0x30
 8008fb4:	e895 0006 	ldmia.w	r5, {r1, r2}
 8008fb8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008fba:	4628      	mov	r0, r5
 8008fbc:	f003 fbd4 	bl	800c768 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8008fc0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008fc4:	f003 fc4a 	bl	800c85c <SysTimeToMs>
 8008fc8:	9006      	str	r0, [sp, #24]
 8008fca:	e79f      	b.n	8008f0c <RegionCommonUpdateBandTimeOff+0x13c>
    band->MaxTimeCredits = maxCredits;
 8008fcc:	4b18      	ldr	r3, [pc, #96]	; (8009030 <RegionCommonUpdateBandTimeOff+0x260>)
 8008fce:	6123      	str	r3, [r4, #16]
    if( joined == true )
 8008fd0:	e7bd      	b.n	8008f4e <RegionCommonUpdateBandTimeOff+0x17e>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8008fd2:	f242 7310 	movw	r3, #10000	; 0x2710
 8008fd6:	429f      	cmp	r7, r3
 8008fd8:	bf38      	it	cc
 8008fda:	461f      	movcc	r7, r3
 8008fdc:	b2bf      	uxth	r7, r7
 8008fde:	463e      	mov	r6, r7
 8008fe0:	68a1      	ldr	r1, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8008fe2:	4d15      	ldr	r5, [pc, #84]	; (8009038 <RegionCommonUpdateBandTimeOff+0x268>)
 8008fe4:	e751      	b.n	8008e8a <RegionCommonUpdateBandTimeOff+0xba>
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8008fe6:	9a08      	ldr	r2, [sp, #32]
 8008fe8:	920c      	str	r2, [sp, #48]	; 0x30
                timeDiff.SubSeconds = 0;
 8008fea:	2300      	movs	r3, #0
 8008fec:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8008ff0:	c803      	ldmia	r0, {r0, r1}
 8008ff2:	f003 fc33 	bl	800c85c <SysTimeToMs>
 8008ff6:	60a0      	str	r0, [r4, #8]
 8008ff8:	e760      	b.n	8008ebc <RegionCommonUpdateBandTimeOff+0xec>
            ( band->MaxTimeCredits != maxCredits ) ||
 8008ffa:	4b10      	ldr	r3, [pc, #64]	; (800903c <RegionCommonUpdateBandTimeOff+0x26c>)
 8008ffc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ffe:	429a      	cmp	r2, r3
 8009000:	f67f af5c 	bls.w	8008ebc <RegionCommonUpdateBandTimeOff+0xec>
 8009004:	e755      	b.n	8008eb2 <RegionCommonUpdateBandTimeOff+0xe2>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8009006:	4637      	mov	r7, r6
 8009008:	e739      	b.n	8008e7e <RegionCommonUpdateBandTimeOff+0xae>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800900a:	f44f 6761 	mov.w	r7, #3600	; 0xe10
 800900e:	e7c8      	b.n	8008fa2 <RegionCommonUpdateBandTimeOff+0x1d2>
        return TIMERTIME_T_MAX;
 8009010:	f04f 33ff 	mov.w	r3, #4294967295
 8009014:	9306      	str	r3, [sp, #24]
}
 8009016:	9806      	ldr	r0, [sp, #24]
 8009018:	b011      	add	sp, #68	; 0x44
 800901a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800901e:	bf00      	nop
 8009020:	c22e4507 	.word	0xc22e4507
 8009024:	00015180 	.word	0x00015180
 8009028:	0112a880 	.word	0x0112a880
 800902c:	0001ec2f 	.word	0x0001ec2f
 8009030:	001b7740 	.word	0x001b7740
 8009034:	0001ec30 	.word	0x0001ec30
 8009038:	02932e00 	.word	0x02932e00
 800903c:	0001517f 	.word	0x0001517f

08009040 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8009040:	7803      	ldrb	r3, [r0, #0]
 8009042:	2b03      	cmp	r3, #3
 8009044:	d001      	beq.n	800904a <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 8009046:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 8009048:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800904a:	7843      	ldrb	r3, [r0, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800904c:	f003 020f 	and.w	r2, r3, #15
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8009050:	091b      	lsrs	r3, r3, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8009052:	708a      	strb	r2, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8009054:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8009056:	7883      	ldrb	r3, [r0, #2]
 8009058:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800905a:	78c2      	ldrb	r2, [r0, #3]
 800905c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009060:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 8009062:	7903      	ldrb	r3, [r0, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8009064:	f3c3 1202 	ubfx	r2, r3, #4, #3
        linkAdrParams->NbRep &= 0x0F;
 8009068:	f003 030f 	and.w	r3, r3, #15
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800906c:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800906e:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 8009070:	2005      	movs	r0, #5
 8009072:	4770      	bx	lr

08009074 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8009074:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009078:	4604      	mov	r4, r0
    int8_t datarate = verifyParams->Datarate;
    int8_t txPower = verifyParams->TxPower;
    int8_t nbRepetitions = verifyParams->NbRep;

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800907a:	7940      	ldrb	r0, [r0, #5]
    uint8_t status = verifyParams->Status;
 800907c:	7926      	ldrb	r6, [r4, #4]
    int8_t datarate = verifyParams->Datarate;
 800907e:	f994 b006 	ldrsb.w	fp, [r4, #6]
    int8_t txPower = verifyParams->TxPower;
 8009082:	f994 a007 	ldrsb.w	sl, [r4, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 8009086:	7a25      	ldrb	r5, [r4, #8]
{
 8009088:	4689      	mov	r9, r1
 800908a:	4690      	mov	r8, r2
 800908c:	461f      	mov	r7, r3
    if( verifyParams->AdrEnabled == false )
 800908e:	b368      	cbz	r0, 80090ec <RegionCommonLinkAdrReqVerifyParams+0x78>
    int8_t nbRepetitions = verifyParams->NbRep;
 8009090:	b26d      	sxtb	r5, r5
        nbRepetitions = verifyParams->CurrentNbRep;
        datarate =  verifyParams->CurrentDatarate;
        txPower =  verifyParams->CurrentTxPower;
    }

    if( status != 0 )
 8009092:	b316      	cbz	r6, 80090da <RegionCommonLinkAdrReqVerifyParams+0x66>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8009094:	f1bb 0f0f 	cmp.w	fp, #15
 8009098:	d02f      	beq.n	80090fa <RegionCommonLinkAdrReqVerifyParams+0x86>
    if( ( value >= min ) && ( value <= max ) )
 800909a:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800909e:	455b      	cmp	r3, fp
 80090a0:	dd33      	ble.n	800910a <RegionCommonLinkAdrReqVerifyParams+0x96>
            datarate =  verifyParams->CurrentDatarate;
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
        {
            status &= 0xFD; // Datarate KO
 80090a2:	f006 06fd 	and.w	r6, r6, #253	; 0xfd
        }

        // Verify tx power
        if( txPower == 0x0F )
 80090a6:	f1ba 0f0f 	cmp.w	sl, #15
 80090aa:	d02b      	beq.n	8009104 <RegionCommonLinkAdrReqVerifyParams+0x90>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80090ac:	f994 301d 	ldrsb.w	r3, [r4, #29]
 80090b0:	f994 201c 	ldrsb.w	r2, [r4, #28]
    if( ( value >= min ) && ( value <= max ) )
 80090b4:	4553      	cmp	r3, sl
 80090b6:	dd0c      	ble.n	80090d2 <RegionCommonLinkAdrReqVerifyParams+0x5e>
 80090b8:	469a      	mov	sl, r3
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 80090ba:	2e07      	cmp	r6, #7
 80090bc:	d10d      	bne.n	80090da <RegionCommonLinkAdrReqVerifyParams+0x66>
    {
        if( nbRepetitions == 0 )
 80090be:	b965      	cbnz	r5, 80090da <RegionCommonLinkAdrReqVerifyParams+0x66>
 80090c0:	2501      	movs	r5, #1
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 80090c2:	f889 b000 	strb.w	fp, [r9]
    *txPow = txPower;
 80090c6:	f888 a000 	strb.w	sl, [r8]
    *nbRep = nbRepetitions;
 80090ca:	703d      	strb	r5, [r7, #0]

    return status;
}
 80090cc:	4630      	mov	r0, r6
 80090ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ( value >= min ) && ( value <= max ) )
 80090d2:	4552      	cmp	r2, sl
 80090d4:	daf1      	bge.n	80090ba <RegionCommonLinkAdrReqVerifyParams+0x46>
                status &= 0xFB; // TxPower KO
 80090d6:	f006 06fb 	and.w	r6, r6, #251	; 0xfb
 80090da:	b2ed      	uxtb	r5, r5
    *dr = datarate;
 80090dc:	f889 b000 	strb.w	fp, [r9]
    *txPow = txPower;
 80090e0:	f888 a000 	strb.w	sl, [r8]
    *nbRep = nbRepetitions;
 80090e4:	703d      	strb	r5, [r7, #0]
}
 80090e6:	4630      	mov	r0, r6
 80090e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        nbRepetitions = verifyParams->CurrentNbRep;
 80090ec:	f994 500b 	ldrsb.w	r5, [r4, #11]
        datarate =  verifyParams->CurrentDatarate;
 80090f0:	f994 b009 	ldrsb.w	fp, [r4, #9]
        txPower =  verifyParams->CurrentTxPower;
 80090f4:	f994 a00a 	ldrsb.w	sl, [r4, #10]
 80090f8:	e7cb      	b.n	8009092 <RegionCommonLinkAdrReqVerifyParams+0x1e>
        if( txPower == 0x0F )
 80090fa:	f1ba 0f0f 	cmp.w	sl, #15
            datarate =  verifyParams->CurrentDatarate;
 80090fe:	f994 b009 	ldrsb.w	fp, [r4, #9]
        if( txPower == 0x0F )
 8009102:	d1d3      	bne.n	80090ac <RegionCommonLinkAdrReqVerifyParams+0x38>
            txPower =  verifyParams->CurrentTxPower;
 8009104:	f994 a00a 	ldrsb.w	sl, [r4, #10]
 8009108:	e7d7      	b.n	80090ba <RegionCommonLinkAdrReqVerifyParams+0x46>
    if( ( value >= min ) && ( value <= max ) )
 800910a:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800910e:	455b      	cmp	r3, fp
 8009110:	dbc7      	blt.n	80090a2 <RegionCommonLinkAdrReqVerifyParams+0x2e>
 8009112:	69a3      	ldr	r3, [r4, #24]
 8009114:	6921      	ldr	r1, [r4, #16]
 8009116:	7b20      	ldrb	r0, [r4, #12]
 8009118:	465a      	mov	r2, fp
 800911a:	f7ff fd9f 	bl	8008c5c <RegionCommonChanVerifyDr.part.0>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800911e:	2800      	cmp	r0, #0
 8009120:	d1c1      	bne.n	80090a6 <RegionCommonLinkAdrReqVerifyParams+0x32>
 8009122:	e7be      	b.n	80090a2 <RegionCommonLinkAdrReqVerifyParams+0x2e>

08009124 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8009124:	4b02      	ldr	r3, [pc, #8]	; (8009130 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 8009126:	fa03 f000 	lsl.w	r0, r3, r0
}
 800912a:	fbb0 f0f1 	udiv	r0, r0, r1
 800912e:	4770      	bx	lr
 8009130:	000f4240 	.word	0x000f4240

08009134 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8009134:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
}
 8009138:	fbb3 f0f0 	udiv	r0, r3, r0
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop

08009140 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8009140:	b470      	push	{r4, r5, r6}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8009142:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8009146:	fb04 f202 	mul.w	r2, r4, r2
 800914a:	1f0c      	subs	r4, r1, #4
 800914c:	fb00 2204 	mla	r2, r0, r4, r2
 8009150:	0052      	lsls	r2, r2, #1
{
 8009152:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8009156:	d006      	beq.n	8009166 <RegionCommonComputeRxWindowParameters+0x26>
 8009158:	1e46      	subs	r6, r0, #1
 800915a:	4432      	add	r2, r6
 800915c:	fbb2 f2f0 	udiv	r2, r2, r0
 8009160:	4291      	cmp	r1, r2
 8009162:	bf38      	it	cc
 8009164:	4611      	movcc	r1, r2
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8009166:	fb01 f200 	mul.w	r2, r1, r0
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800916a:	6029      	str	r1, [r5, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800916c:	0080      	lsls	r0, r0, #2
 800916e:	b112      	cbz	r2, 8009176 <RegionCommonComputeRxWindowParameters+0x36>
 8009170:	3201      	adds	r2, #1
 8009172:	eba0 0052 	sub.w	r0, r0, r2, lsr #1
 8009176:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800917a:	fb02 0313 	mls	r3, r2, r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	dd08      	ble.n	8009194 <RegionCommonComputeRxWindowParameters+0x54>
 8009182:	4a09      	ldr	r2, [pc, #36]	; (80091a8 <RegionCommonComputeRxWindowParameters+0x68>)
 8009184:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8009188:	fba2 2303 	umull	r2, r3, r2, r3
 800918c:	099b      	lsrs	r3, r3, #6
 800918e:	6023      	str	r3, [r4, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8009190:	bc70      	pop	{r4, r5, r6}
 8009192:	4770      	bx	lr
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8009194:	4904      	ldr	r1, [pc, #16]	; (80091a8 <RegionCommonComputeRxWindowParameters+0x68>)
 8009196:	17da      	asrs	r2, r3, #31
 8009198:	fb81 1303 	smull	r1, r3, r1, r3
 800919c:	ebc2 13a3 	rsb	r3, r2, r3, asr #6
 80091a0:	6023      	str	r3, [r4, #0]
}
 80091a2:	bc70      	pop	{r4, r5, r6}
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	10624dd3 	.word	0x10624dd3

080091ac <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 80091ac:	0040      	lsls	r0, r0, #1
 80091ae:	ee07 0a90 	vmov	s15, r0
 80091b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
{
 80091b6:	b508      	push	{r3, lr}
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 80091b8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80091bc:	ee70 7a60 	vsub.f32	s15, s0, s1
 80091c0:	ee17 0a90 	vmov	r0, s15
 80091c4:	f7f7 f990 	bl	80004e8 <__aeabi_f2d>
 80091c8:	ec41 0b10 	vmov	d0, r0, r1
 80091cc:	f00b f884 	bl	80142d8 <floor>
 80091d0:	ec51 0b10 	vmov	r0, r1, d0
 80091d4:	f7f7 fa68 	bl	80006a8 <__aeabi_d2iz>

    return phyTxPower;
}
 80091d8:	b240      	sxtb	r0, r0
 80091da:	bd08      	pop	{r3, pc}

080091dc <RegionCommonCountNbOfEnabledChannels>:
    Radio.Rx( rxBeaconSetupParams->RxTime );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 80091dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80091e0:	8a04      	ldrh	r4, [r0, #16]
{
 80091e2:	b083      	sub	sp, #12
 80091e4:	469b      	mov	fp, r3
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80091e6:	2c00      	cmp	r4, #0
 80091e8:	d057      	beq.n	800929a <RegionCommonCountNbOfEnabledChannels+0xbe>
 80091ea:	f04f 0e00 	mov.w	lr, #0
 80091ee:	46f4      	mov	ip, lr
    uint8_t nbRestrictedChannelsCount = 0;
 80091f0:	46f1      	mov	r9, lr
    uint8_t nbChannelCount = 0;
 80091f2:	46f0      	mov	r8, lr
 80091f4:	9201      	str	r2, [sp, #4]
    {
        for( uint8_t j = 0; j < 16; j++ )
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 80091f6:	fa5f f58e 	uxtb.w	r5, lr
 80091fa:	006d      	lsls	r5, r5, #1
 80091fc:	2300      	movs	r3, #0
 80091fe:	6842      	ldr	r2, [r0, #4]
 8009200:	5b52      	ldrh	r2, [r2, r5]
 8009202:	411a      	asrs	r2, r3
 8009204:	07d7      	lsls	r7, r2, #31
 8009206:	d51f      	bpl.n	8009248 <RegionCommonCountNbOfEnabledChannels+0x6c>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8009208:	eb0c 0403 	add.w	r4, ip, r3
 800920c:	6882      	ldr	r2, [r0, #8]
 800920e:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8009212:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8009216:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800921a:	b1af      	cbz	r7, 8009248 <RegionCommonCountNbOfEnabledChannels+0x6c>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800921c:	7806      	ldrb	r6, [r0, #0]
 800921e:	b92e      	cbnz	r6, 800922c <RegionCommonCountNbOfEnabledChannels+0x50>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8009220:	6946      	ldr	r6, [r0, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8009222:	b11e      	cbz	r6, 800922c <RegionCommonCountNbOfEnabledChannels+0x50>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8009224:	5b76      	ldrh	r6, [r6, r5]
 8009226:	411e      	asrs	r6, r3
 8009228:	07f6      	lsls	r6, r6, #31
 800922a:	d50d      	bpl.n	8009248 <RegionCommonCountNbOfEnabledChannels+0x6c>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800922c:	7a16      	ldrb	r6, [r2, #8]
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800922e:	f990 7001 	ldrsb.w	r7, [r0, #1]
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8009232:	f346 0a03 	sbfx	sl, r6, #0, #4
    if( ( value >= min ) && ( value <= max ) )
 8009236:	fa4f fa8a 	sxtb.w	sl, sl
 800923a:	45ba      	cmp	sl, r7
 800923c:	dc04      	bgt.n	8009248 <RegionCommonCountNbOfEnabledChannels+0x6c>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800923e:	f346 1603 	sbfx	r6, r6, #4, #4
    if( ( value >= min ) && ( value <= max ) )
 8009242:	b276      	sxtb	r6, r6
 8009244:	42be      	cmp	r6, r7
 8009246:	da14      	bge.n	8009272 <RegionCommonCountNbOfEnabledChannels+0x96>
        for( uint8_t j = 0; j < 16; j++ )
 8009248:	3301      	adds	r3, #1
 800924a:	2b10      	cmp	r3, #16
 800924c:	d1d7      	bne.n	80091fe <RegionCommonCountNbOfEnabledChannels+0x22>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800924e:	f10c 0c10 	add.w	ip, ip, #16
 8009252:	8a04      	ldrh	r4, [r0, #16]
 8009254:	fa5f f38c 	uxtb.w	r3, ip
 8009258:	429c      	cmp	r4, r3
 800925a:	f10e 0e01 	add.w	lr, lr, #1
 800925e:	469c      	mov	ip, r3
 8009260:	d8c9      	bhi.n	80091f6 <RegionCommonCountNbOfEnabledChannels+0x1a>
 8009262:	9a01      	ldr	r2, [sp, #4]
                }
                enabledChannels[nbChannelCount++] = i + j;
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8009264:	f882 8000 	strb.w	r8, [r2]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8009268:	f88b 9000 	strb.w	r9, [fp]
}
 800926c:	b003      	add	sp, #12
 800926e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8009272:	7a56      	ldrb	r6, [r2, #9]
 8009274:	68c2      	ldr	r2, [r0, #12]
 8009276:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800927a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800927e:	7d32      	ldrb	r2, [r6, #20]
 8009280:	b132      	cbz	r2, 8009290 <RegionCommonCountNbOfEnabledChannels+0xb4>
                enabledChannels[nbChannelCount++] = i + j;
 8009282:	f108 0201 	add.w	r2, r8, #1
 8009286:	f801 4008 	strb.w	r4, [r1, r8]
 800928a:	fa5f f882 	uxtb.w	r8, r2
 800928e:	e7db      	b.n	8009248 <RegionCommonCountNbOfEnabledChannels+0x6c>
                    nbRestrictedChannelsCount++;
 8009290:	f109 0901 	add.w	r9, r9, #1
 8009294:	fa5f f989 	uxtb.w	r9, r9
                    continue;
 8009298:	e7d6      	b.n	8009248 <RegionCommonCountNbOfEnabledChannels+0x6c>
    uint8_t nbRestrictedChannelsCount = 0;
 800929a:	46a1      	mov	r9, r4
    uint8_t nbChannelCount = 0;
 800929c:	46a0      	mov	r8, r4
    *nbEnabledChannels = nbChannelCount;
 800929e:	f882 8000 	strb.w	r8, [r2]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 80092a2:	f88b 9000 	strb.w	r9, [fp]
}
 80092a6:	b003      	add	sp, #12
 80092a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080092ac <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 80092ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092b0:	4604      	mov	r4, r0
 80092b2:	b084      	sub	sp, #16
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 80092b4:	6840      	ldr	r0, [r0, #4]
{
 80092b6:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
 80092ba:	461d      	mov	r5, r3
 80092bc:	4616      	mov	r6, r2
 80092be:	460f      	mov	r7, r1
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 80092c0:	f003 fa24 	bl	800c70c <TimerGetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 80092c4:	6823      	ldr	r3, [r4, #0]
 80092c6:	1a1b      	subs	r3, r3, r0
 80092c8:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 80092cc:	2201      	movs	r2, #1
    *nbEnabledChannels = 0;
 80092ce:	2300      	movs	r3, #0
    *nbRestrictedChannels = 1;
 80092d0:	f888 2000 	strb.w	r2, [r8]
    *nbEnabledChannels = 0;
 80092d4:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80092d6:	6863      	ldr	r3, [r4, #4]
 80092d8:	b15b      	cbz	r3, 80092f2 <RegionCommonIdentifyChannels+0x46>
 80092da:	6823      	ldr	r3, [r4, #0]
 80092dc:	4283      	cmp	r3, r0
 80092de:	d908      	bls.n	80092f2 <RegionCommonIdentifyChannels+0x46>
    if( *nbEnabledChannels > 0 )
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 80092e0:	f898 3000 	ldrb.w	r3, [r8]
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	bf14      	ite	ne
 80092e8:	200b      	movne	r0, #11
 80092ea:	200c      	moveq	r0, #12
    }
}
 80092ec:	b004      	add	sp, #16
 80092ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        *aggregatedTimeOff = 0;
 80092f2:	f04f 0a00 	mov.w	sl, #0
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80092f6:	69e3      	ldr	r3, [r4, #28]
        *aggregatedTimeOff = 0;
 80092f8:	f8c7 a000 	str.w	sl, [r7]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80092fc:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8009300:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8009304:	781f      	ldrb	r7, [r3, #0]
 8009306:	69a3      	ldr	r3, [r4, #24]
 8009308:	f894 e014 	ldrb.w	lr, [r4, #20]
 800930c:	9303      	str	r3, [sp, #12]
 800930e:	ab01      	add	r3, sp, #4
 8009310:	e883 0003 	stmia.w	r3, {r0, r1}
 8009314:	7a62      	ldrb	r2, [r4, #9]
 8009316:	f8cd e000 	str.w	lr, [sp]
 800931a:	4661      	mov	r1, ip
 800931c:	7a23      	ldrb	r3, [r4, #8]
 800931e:	4638      	mov	r0, r7
 8009320:	f7ff fd56 	bl	8008dd0 <RegionCommonUpdateBandTimeOff>
        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8009324:	4643      	mov	r3, r8
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8009326:	f8c9 0000 	str.w	r0, [r9]
        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800932a:	4631      	mov	r1, r6
 800932c:	69e0      	ldr	r0, [r4, #28]
 800932e:	462a      	mov	r2, r5
 8009330:	f7ff ff54 	bl	80091dc <RegionCommonCountNbOfEnabledChannels>
    if( *nbEnabledChannels > 0 )
 8009334:	782b      	ldrb	r3, [r5, #0]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d0d2      	beq.n	80092e0 <RegionCommonIdentifyChannels+0x34>
        return LORAMAC_STATUS_OK;
 800933a:	4650      	mov	r0, sl
        *nextTxDelay = 0;
 800933c:	f8c9 a000 	str.w	sl, [r9]
}
 8009340:	b004      	add	sp, #16
 8009342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009346:	bf00      	nop

08009348 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8009348:	b570      	push	{r4, r5, r6, lr}
    int8_t drLocal = params->CurrentDr;
 800934a:	f990 2000 	ldrsb.w	r2, [r0]

    if( params->CurrentDr == params->MinDr )
 800934e:	f990 4002 	ldrsb.w	r4, [r0, #2]
 8009352:	4294      	cmp	r4, r2
 8009354:	d016      	beq.n	8009384 <RegionCommonGetNextLowerTxDr+0x3c>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8009356:	3a01      	subs	r2, #1
 8009358:	b252      	sxtb	r2, r2
        } while( ( drLocal != params->MinDr ) &&
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800935a:	4294      	cmp	r4, r2
 800935c:	d012      	beq.n	8009384 <RegionCommonGetNextLowerTxDr+0x3c>
 800935e:	78c6      	ldrb	r6, [r0, #3]
 8009360:	6841      	ldr	r1, [r0, #4]
 8009362:	f990 5001 	ldrsb.w	r5, [r0, #1]
 8009366:	6883      	ldr	r3, [r0, #8]
 8009368:	e003      	b.n	8009372 <RegionCommonGetNextLowerTxDr+0x2a>
            drLocal = ( drLocal - 1 );
 800936a:	3a01      	subs	r2, #1
 800936c:	b252      	sxtb	r2, r2
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800936e:	4294      	cmp	r4, r2
 8009370:	d008      	beq.n	8009384 <RegionCommonGetNextLowerTxDr+0x3c>
    if( ( value >= min ) && ( value <= max ) )
 8009372:	4294      	cmp	r4, r2
 8009374:	dcf9      	bgt.n	800936a <RegionCommonGetNextLowerTxDr+0x22>
 8009376:	4295      	cmp	r5, r2
 8009378:	dbf7      	blt.n	800936a <RegionCommonGetNextLowerTxDr+0x22>
 800937a:	4630      	mov	r0, r6
 800937c:	f7ff fc6e 	bl	8008c5c <RegionCommonChanVerifyDr.part.0>
        } while( ( drLocal != params->MinDr ) &&
 8009380:	2800      	cmp	r0, #0
 8009382:	d0f2      	beq.n	800936a <RegionCommonGetNextLowerTxDr+0x22>

        return drLocal;
    }
}
 8009384:	4610      	mov	r0, r2
 8009386:	bd70      	pop	{r4, r5, r6, pc}

08009388 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 8009388:	4288      	cmp	r0, r1
 800938a:	bfb8      	it	lt
 800938c:	4608      	movlt	r0, r1
 800938e:	4770      	bx	lr

08009390 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 8009390:	4b06      	ldr	r3, [pc, #24]	; (80093ac <RegionCommonGetBandwidth+0x1c>)
 8009392:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8009396:	4298      	cmp	r0, r3
 8009398:	d005      	beq.n	80093a6 <RegionCommonGetBandwidth+0x16>
 800939a:	4b05      	ldr	r3, [pc, #20]	; (80093b0 <RegionCommonGetBandwidth+0x20>)
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800939c:	4298      	cmp	r0, r3
 800939e:	bf0c      	ite	eq
 80093a0:	2002      	moveq	r0, #2
 80093a2:	2000      	movne	r0, #0
 80093a4:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 80093a6:	2001      	movs	r0, #1
    }
}
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	0003d090 	.word	0x0003d090
 80093b0:	0007a120 	.word	0x0007a120

080093b4 <GetTimeOnAir>:
    }
    return true;
}

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80093b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    int8_t phyDr = DataratesIN865[datarate];
 80093b6:	4b16      	ldr	r3, [pc, #88]	; (8009410 <GetTimeOnAir+0x5c>)
{
 80093b8:	b085      	sub	sp, #20
 80093ba:	460c      	mov	r4, r1
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsIN865 );
 80093bc:	4915      	ldr	r1, [pc, #84]	; (8009414 <GetTimeOnAir+0x60>)
    int8_t phyDr = DataratesIN865[datarate];
 80093be:	561e      	ldrsb	r6, [r3, r0]
{
 80093c0:	4605      	mov	r5, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsIN865 );
 80093c2:	f7ff ffe5 	bl	8009390 <RegionCommonGetBandwidth>
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 80093c6:	2d07      	cmp	r5, #7
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsIN865 );
 80093c8:	4601      	mov	r1, r0
    if( datarate == DR_7 )
 80093ca:	d00e      	beq.n	80093ea <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80093cc:	4812      	ldr	r0, [pc, #72]	; (8009418 <GetTimeOnAir+0x64>)
 80093ce:	2301      	movs	r3, #1
 80093d0:	b2e4      	uxtb	r4, r4
 80093d2:	2700      	movs	r7, #0
 80093d4:	2508      	movs	r5, #8
 80093d6:	9402      	str	r4, [sp, #8]
 80093d8:	e9cd 5700 	strd	r5, r7, [sp]
 80093dc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80093de:	9303      	str	r3, [sp, #12]
 80093e0:	4632      	mov	r2, r6
 80093e2:	4618      	mov	r0, r3
 80093e4:	47a0      	blx	r4
    }
    return timeOnAir;
}
 80093e6:	b005      	add	sp, #20
 80093e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80093ea:	4f0b      	ldr	r7, [pc, #44]	; (8009418 <GetTimeOnAir+0x64>)
 80093ec:	2300      	movs	r3, #0
 80093ee:	b2e4      	uxtb	r4, r4
 80093f0:	2001      	movs	r0, #1
 80093f2:	2505      	movs	r5, #5
 80093f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80093f8:	9402      	str	r4, [sp, #8]
 80093fa:	9003      	str	r0, [sp, #12]
 80093fc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80093fe:	9301      	str	r3, [sp, #4]
 8009400:	fb02 f206 	mul.w	r2, r2, r6
 8009404:	4618      	mov	r0, r3
 8009406:	9500      	str	r5, [sp, #0]
 8009408:	47a0      	blx	r4
}
 800940a:	b005      	add	sp, #20
 800940c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800940e:	bf00      	nop
 8009410:	08015684 	.word	0x08015684
 8009414:	0801565c 	.word	0x0801565c
 8009418:	08015848 	.word	0x08015848

0800941c <RegionIN865GetPhyParam>:

PhyParam_t RegionIN865GetPhyParam( GetPhyParams_t* getPhy )
{
 800941c:	b510      	push	{r4, lr}
 800941e:	7803      	ldrb	r3, [r0, #0]
 8009420:	b084      	sub	sp, #16
    PhyParam_t phyParam = { 0 };
 8009422:	2200      	movs	r2, #0
 8009424:	3b0b      	subs	r3, #11
 8009426:	9200      	str	r2, [sp, #0]

    switch( getPhy->Attribute )
 8009428:	2b2c      	cmp	r3, #44	; 0x2c
 800942a:	d81b      	bhi.n	8009464 <RegionIN865GetPhyParam+0x48>
 800942c:	e8df f003 	tbb	[pc, r3]
 8009430:	1a343a3d 	.word	0x1a343a3d
 8009434:	767a5b30 	.word	0x767a5b30
 8009438:	1d1a5f7e 	.word	0x1d1a5f7e
 800943c:	85882582 	.word	0x85882582
 8009440:	581a1a17 	.word	0x581a1a17
 8009444:	1a1a4055 	.word	0x1a1a4055
 8009448:	1a1a1a1a 	.word	0x1a1a1a1a
 800944c:	1a1a1a1a 	.word	0x1a1a1a1a
 8009450:	1d1a1a1a 	.word	0x1d1a1a1a
 8009454:	1a1a2268 	.word	0x1a1a2268
 8009458:	2a1a221d 	.word	0x2a1a221d
 800945c:	6f          	.byte	0x6f
 800945d:	00          	.byte	0x00
            phyParam.Value = IN865_MAX_NB_CHANNELS;
            break;
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 800945e:	4b3b      	ldr	r3, [pc, #236]	; (800954c <RegionIN865GetPhyParam+0x130>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	9300      	str	r3, [sp, #0]
            break;
        }
    }

    return phyParam;
}
 8009464:	9800      	ldr	r0, [sp, #0]
 8009466:	b004      	add	sp, #16
 8009468:	bd10      	pop	{r4, pc}
            phyParam.Value = IN865_RX_WND_2_FREQ;
 800946a:	4b39      	ldr	r3, [pc, #228]	; (8009550 <RegionIN865GetPhyParam+0x134>)
 800946c:	9300      	str	r3, [sp, #0]
}
 800946e:	9800      	ldr	r0, [sp, #0]
 8009470:	b004      	add	sp, #16
 8009472:	bd10      	pop	{r4, pc}
            phyParam.Value = IN865_BEACON_CHANNEL_DR;
 8009474:	2304      	movs	r3, #4
 8009476:	9300      	str	r3, [sp, #0]
            break;
 8009478:	e7f4      	b.n	8009464 <RegionIN865GetPhyParam+0x48>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800947a:	4b34      	ldr	r3, [pc, #208]	; (800954c <RegionIN865GetPhyParam+0x130>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	33c0      	adds	r3, #192	; 0xc0
 8009480:	9300      	str	r3, [sp, #0]
            break;
 8009482:	e7ef      	b.n	8009464 <RegionIN865GetPhyParam+0x48>
            phyParam.Value = DataratesIN865[getPhy->Datarate];
 8009484:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8009488:	4a32      	ldr	r2, [pc, #200]	; (8009554 <RegionIN865GetPhyParam+0x138>)
 800948a:	5cd3      	ldrb	r3, [r2, r3]
 800948c:	9300      	str	r3, [sp, #0]
            break;
 800948e:	e7e9      	b.n	8009464 <RegionIN865GetPhyParam+0x48>
            phyParam.Value = IN865_MAX_RX_WINDOW;
 8009490:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8009494:	9300      	str	r3, [sp, #0]
            break;
 8009496:	e7e5      	b.n	8009464 <RegionIN865GetPhyParam+0x48>
            phyParam.Value = MaxPayloadOfDatarateIN865[getPhy->Datarate];
 8009498:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800949c:	4a2e      	ldr	r2, [pc, #184]	; (8009558 <RegionIN865GetPhyParam+0x13c>)
 800949e:	5cd3      	ldrb	r3, [r2, r3]
 80094a0:	9300      	str	r3, [sp, #0]
            break;
 80094a2:	e7df      	b.n	8009464 <RegionIN865GetPhyParam+0x48>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80094a4:	2320      	movs	r3, #32
 80094a6:	9300      	str	r3, [sp, #0]
            break;
 80094a8:	e7dc      	b.n	8009464 <RegionIN865GetPhyParam+0x48>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80094aa:	2340      	movs	r3, #64	; 0x40
 80094ac:	9300      	str	r3, [sp, #0]
            break;
 80094ae:	e7d9      	b.n	8009464 <RegionIN865GetPhyParam+0x48>
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80094b0:	4b26      	ldr	r3, [pc, #152]	; (800954c <RegionIN865GetPhyParam+0x130>)
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80094b2:	7842      	ldrb	r2, [r0, #1]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80094b4:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80094b6:	f88d 2004 	strb.w	r2, [sp, #4]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80094ba:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80094be:	2107      	movs	r1, #7
 80094c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80094c4:	a801      	add	r0, sp, #4
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80094c6:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80094ca:	f88d 1005 	strb.w	r1, [sp, #5]
 80094ce:	f8ad 2006 	strh.w	r2, [sp, #6]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80094d2:	f7ff ff39 	bl	8009348 <RegionCommonGetNextLowerTxDr>
 80094d6:	9000      	str	r0, [sp, #0]
            break;
 80094d8:	e7c4      	b.n	8009464 <RegionIN865GetPhyParam+0x48>
            phyParam.fValue = IN865_DEFAULT_ANTENNA_GAIN;
 80094da:	4b20      	ldr	r3, [pc, #128]	; (800955c <RegionIN865GetPhyParam+0x140>)
 80094dc:	9300      	str	r3, [sp, #0]
            break;
 80094de:	e7c1      	b.n	8009464 <RegionIN865GetPhyParam+0x48>
            phyParam.fValue = IN865_DEFAULT_MAX_EIRP;
 80094e0:	4b1f      	ldr	r3, [pc, #124]	; (8009560 <RegionIN865GetPhyParam+0x144>)
 80094e2:	9300      	str	r3, [sp, #0]
            break;
 80094e4:	e7be      	b.n	8009464 <RegionIN865GetPhyParam+0x48>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 80094e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80094ea:	9300      	str	r3, [sp, #0]
            break;
 80094ec:	e7ba      	b.n	8009464 <RegionIN865GetPhyParam+0x48>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 80094ee:	481d      	ldr	r0, [pc, #116]	; (8009564 <RegionIN865GetPhyParam+0x148>)
 80094f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80094f4:	f7f9 fc8a 	bl	8002e0c <randr>
 80094f8:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 80094fc:	9000      	str	r0, [sp, #0]
            break;
 80094fe:	e7b1      	b.n	8009464 <RegionIN865GetPhyParam+0x48>
            phyParam.BeaconFormat.BeaconSize = IN865_BEACON_SIZE;
 8009500:	2213      	movs	r2, #19
            phyParam.BeaconFormat.Rfu2Size = IN865_RFU2_SIZE;
 8009502:	2303      	movs	r3, #3
            phyParam.BeaconFormat.BeaconSize = IN865_BEACON_SIZE;
 8009504:	f8ad 2000 	strh.w	r2, [sp]
            phyParam.BeaconFormat.Rfu2Size = IN865_RFU2_SIZE;
 8009508:	f88d 3002 	strb.w	r3, [sp, #2]
            break;
 800950c:	e7aa      	b.n	8009464 <RegionIN865GetPhyParam+0x48>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsIN865 );
 800950e:	f990 0001 	ldrsb.w	r0, [r0, #1]
 8009512:	4915      	ldr	r1, [pc, #84]	; (8009568 <RegionIN865GetPhyParam+0x14c>)
 8009514:	f7ff ff3c 	bl	8009390 <RegionCommonGetBandwidth>
 8009518:	9000      	str	r0, [sp, #0]
            break;
 800951a:	e7a3      	b.n	8009464 <RegionIN865GetPhyParam+0x48>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800951c:	f241 3388 	movw	r3, #5000	; 0x1388
 8009520:	9300      	str	r3, [sp, #0]
            break;
 8009522:	e79f      	b.n	8009464 <RegionIN865GetPhyParam+0x48>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8009524:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009528:	9300      	str	r3, [sp, #0]
            break;
 800952a:	e79b      	b.n	8009464 <RegionIN865GetPhyParam+0x48>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800952c:	f241 7370 	movw	r3, #6000	; 0x1770
 8009530:	9300      	str	r3, [sp, #0]
            break;
 8009532:	e797      	b.n	8009464 <RegionIN865GetPhyParam+0x48>
            phyParam.Value = IN865_RX_WND_2_DR;
 8009534:	2302      	movs	r3, #2
 8009536:	9300      	str	r3, [sp, #0]
            break;
 8009538:	e794      	b.n	8009464 <RegionIN865GetPhyParam+0x48>
            phyParam.Value = IN865_MAX_NB_CHANNELS;
 800953a:	2310      	movs	r3, #16
 800953c:	9300      	str	r3, [sp, #0]
            break;
 800953e:	e791      	b.n	8009464 <RegionIN865GetPhyParam+0x48>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8009540:	4b02      	ldr	r3, [pc, #8]	; (800954c <RegionIN865GetPhyParam+0x130>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	33c2      	adds	r3, #194	; 0xc2
 8009546:	9300      	str	r3, [sp, #0]
            break;
 8009548:	e78c      	b.n	8009464 <RegionIN865GetPhyParam+0x48>
 800954a:	bf00      	nop
 800954c:	20000594 	.word	0x20000594
 8009550:	33a680f0 	.word	0x33a680f0
 8009554:	08015684 	.word	0x08015684
 8009558:	080156cc 	.word	0x080156cc
 800955c:	4009999a 	.word	0x4009999a
 8009560:	41f00000 	.word	0x41f00000
 8009564:	fffffc18 	.word	0xfffffc18
 8009568:	0801565c 	.word	0x0801565c

0800956c <RegionIN865SetBandTxDone>:

void RegionIN865SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800956c:	b570      	push	{r4, r5, r6, lr}
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800956e:	4b0c      	ldr	r3, [pc, #48]	; (80095a0 <RegionIN865SetBandTxDone+0x34>)
 8009570:	7802      	ldrb	r2, [r0, #0]
 8009572:	6819      	ldr	r1, [r3, #0]
 8009574:	4b0b      	ldr	r3, [pc, #44]	; (80095a4 <RegionIN865SetBandTxDone+0x38>)
 8009576:	6906      	ldr	r6, [r0, #16]
 8009578:	681d      	ldr	r5, [r3, #0]
 800957a:	68c3      	ldr	r3, [r0, #12]
 800957c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009580:	eb01 0182 	add.w	r1, r1, r2, lsl #2
{
 8009584:	b082      	sub	sp, #8
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8009586:	7a4c      	ldrb	r4, [r1, #9]
 8009588:	7842      	ldrb	r2, [r0, #1]
 800958a:	6881      	ldr	r1, [r0, #8]
 800958c:	9600      	str	r6, [sp, #0]
 800958e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8009592:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 8009596:	f7ff fbf7 	bl	8008d88 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
}
 800959a:	b002      	add	sp, #8
 800959c:	bd70      	pop	{r4, r5, r6, pc}
 800959e:	bf00      	nop
 80095a0:	20000594 	.word	0x20000594
 80095a4:	20000590 	.word	0x20000590

080095a8 <RegionIN865InitDefaults>:

void RegionIN865InitDefaults( InitDefaultsParams_t* params )
{
 80095a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    Band_t bands[IN865_MAX_NB_BANDS] =
    {
        IN865_BAND0
    };

    switch( params->Type )
 80095aa:	7b02      	ldrb	r2, [r0, #12]
{
 80095ac:	b087      	sub	sp, #28
    Band_t bands[IN865_MAX_NB_BANDS] =
 80095ae:	2401      	movs	r4, #1
 80095b0:	2300      	movs	r3, #0
    switch( params->Type )
 80095b2:	42a2      	cmp	r2, r4
    Band_t bands[IN865_MAX_NB_BANDS] =
 80095b4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80095b8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80095bc:	f8ad 4000 	strh.w	r4, [sp]
 80095c0:	f88d 3002 	strb.w	r3, [sp, #2]
 80095c4:	f88d 3014 	strb.w	r3, [sp, #20]
    switch( params->Type )
 80095c8:	d004      	beq.n	80095d4 <RegionIN865InitDefaults+0x2c>
 80095ca:	2a02      	cmp	r2, #2
 80095cc:	d03e      	beq.n	800964c <RegionIN865InitDefaults+0xa4>
 80095ce:	b16a      	cbz	r2, 80095ec <RegionIN865InitDefaults+0x44>
        default:
        {
            break;
        }
    }
}
 80095d0:	b007      	add	sp, #28
 80095d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 80095d4:	4923      	ldr	r1, [pc, #140]	; (8009664 <RegionIN865InitDefaults+0xbc>)
 80095d6:	6808      	ldr	r0, [r1, #0]
 80095d8:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 80095da:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 80095dc:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80095de:	f100 01c2 	add.w	r1, r0, #194	; 0xc2
 80095e2:	30c0      	adds	r0, #192	; 0xc0
 80095e4:	f7ff fbc0 	bl	8008d68 <RegionCommonChanMaskCopy>
}
 80095e8:	b007      	add	sp, #28
 80095ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80095ec:	6803      	ldr	r3, [r0, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d0ee      	beq.n	80095d0 <RegionIN865InitDefaults+0x28>
 80095f2:	6843      	ldr	r3, [r0, #4]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d0eb      	beq.n	80095d0 <RegionIN865InitDefaults+0x28>
            RegionBands = (Band_t*) params->Bands;
 80095f8:	4a1b      	ldr	r2, [pc, #108]	; (8009668 <RegionIN865InitDefaults+0xc0>)
 80095fa:	6880      	ldr	r0, [r0, #8]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80095fc:	4d19      	ldr	r5, [pc, #100]	; (8009664 <RegionIN865InitDefaults+0xbc>)
            RegionBands = (Band_t*) params->Bands;
 80095fe:	6010      	str	r0, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * IN865_MAX_NB_BANDS );
 8009600:	4669      	mov	r1, sp
 8009602:	2218      	movs	r2, #24
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8009604:	602b      	str	r3, [r5, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * IN865_MAX_NB_BANDS );
 8009606:	f7f9 fc21 	bl	8002e4c <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) IN865_LC1;
 800960a:	4b18      	ldr	r3, [pc, #96]	; (800966c <RegionIN865InitDefaults+0xc4>)
 800960c:	682d      	ldr	r5, [r5, #0]
 800960e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) IN865_LC2;
 8009612:	f103 060c 	add.w	r6, r3, #12
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) IN865_LC1;
 8009616:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) IN865_LC2;
 800961a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) IN865_LC3;
 800961e:	3318      	adds	r3, #24
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) IN865_LC2;
 8009620:	f105 060c 	add.w	r6, r5, #12
 8009624:	e886 0007 	stmia.w	r6, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) IN865_LC3;
 8009628:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800962c:	462b      	mov	r3, r5
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) IN865_LC3;
 800962e:	f105 0618 	add.w	r6, r5, #24
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8009632:	2707      	movs	r7, #7
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) IN865_LC3;
 8009634:	e886 0007 	stmia.w	r6, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8009638:	f823 7fc2 	strh.w	r7, [r3, #194]!
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800963c:	4622      	mov	r2, r4
 800963e:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
 8009642:	4619      	mov	r1, r3
 8009644:	f7ff fb90 	bl	8008d68 <RegionCommonChanMaskCopy>
}
 8009648:	b007      	add	sp, #28
 800964a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800964c:	4b05      	ldr	r3, [pc, #20]	; (8009664 <RegionIN865InitDefaults+0xbc>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 8009654:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
 8009658:	430a      	orrs	r2, r1
 800965a:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
}
 800965e:	b007      	add	sp, #28
 8009660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009662:	bf00      	nop
 8009664:	20000594 	.word	0x20000594
 8009668:	20000590 	.word	0x20000590
 800966c:	08014438 	.word	0x08014438

08009670 <RegionIN865Verify>:

bool RegionIN865Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8009670:	b510      	push	{r4, lr}
 8009672:	290a      	cmp	r1, #10
 8009674:	d80b      	bhi.n	800968e <RegionIN865Verify+0x1e>
 8009676:	e8df f001 	tbb	[pc, r1]
 800967a:	0a1e      	.short	0x0a1e
 800967c:	060a0a0a 	.word	0x060a0a0a
 8009680:	0c0a062d 	.word	0x0c0a062d
 8009684:	0c          	.byte	0x0c
 8009685:	00          	.byte	0x00
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.Datarate == DR_6 )
 8009686:	f990 0000 	ldrsb.w	r0, [r0]
 800968a:	2806      	cmp	r0, #6
 800968c:	d10b      	bne.n	80096a6 <RegionIN865Verify+0x36>
        return false;
 800968e:	2000      	movs	r0, #0
            return IN865_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
    }
}
 8009690:	bd10      	pop	{r4, pc}
            return RegionCommonValueInRange( verify->TxPower, IN865_MAX_TX_POWER, IN865_MIN_TX_POWER );
 8009692:	220a      	movs	r2, #10
 8009694:	2100      	movs	r1, #0
 8009696:	f990 0000 	ldrsb.w	r0, [r0]
 800969a:	f7ff fb17 	bl	8008ccc <RegionCommonValueInRange>
 800969e:	3800      	subs	r0, #0
 80096a0:	bf18      	it	ne
 80096a2:	2001      	movne	r0, #1
}
 80096a4:	bd10      	pop	{r4, pc}
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, IN865_RX_MIN_DATARATE, IN865_RX_MAX_DATARATE );
 80096a6:	2207      	movs	r2, #7
 80096a8:	2100      	movs	r1, #0
 80096aa:	f7ff fb0f 	bl	8008ccc <RegionCommonValueInRange>
 80096ae:	3800      	subs	r0, #0
 80096b0:	bf18      	it	ne
 80096b2:	2001      	movne	r0, #1
}
 80096b4:	bd10      	pop	{r4, pc}
            return VerifyRfFreq( verify->Frequency );
 80096b6:	6804      	ldr	r4, [r0, #0]
    if( Radio.CheckRfFrequency( freq ) == false )
 80096b8:	4b0b      	ldr	r3, [pc, #44]	; (80096e8 <RegionIN865Verify+0x78>)
 80096ba:	4620      	mov	r0, r4
 80096bc:	6a1b      	ldr	r3, [r3, #32]
 80096be:	4798      	blx	r3
 80096c0:	2800      	cmp	r0, #0
 80096c2:	d0e4      	beq.n	800968e <RegionIN865Verify+0x1e>
    if( ( freq < 865000000 ) || ( freq > 867000000 ) )
 80096c4:	4809      	ldr	r0, [pc, #36]	; (80096ec <RegionIN865Verify+0x7c>)
 80096c6:	4b0a      	ldr	r3, [pc, #40]	; (80096f0 <RegionIN865Verify+0x80>)
 80096c8:	4420      	add	r0, r4
 80096ca:	4298      	cmp	r0, r3
 80096cc:	bf8c      	ite	hi
 80096ce:	2000      	movhi	r0, #0
 80096d0:	2001      	movls	r0, #1
}
 80096d2:	bd10      	pop	{r4, pc}
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80096d4:	2205      	movs	r2, #5
 80096d6:	2100      	movs	r1, #0
 80096d8:	f990 0000 	ldrsb.w	r0, [r0]
 80096dc:	f7ff faf6 	bl	8008ccc <RegionCommonValueInRange>
 80096e0:	3800      	subs	r0, #0
 80096e2:	bf18      	it	ne
 80096e4:	2001      	movne	r0, #1
}
 80096e6:	bd10      	pop	{r4, pc}
 80096e8:	08015848 	.word	0x08015848
 80096ec:	cc7125c0 	.word	0xcc7125c0
 80096f0:	001e8480 	.word	0x001e8480

080096f4 <RegionIN865ChanMaskSet>:
        }
    }
}

bool RegionIN865ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80096f4:	b510      	push	{r4, lr}
    switch( chanMaskSet->ChannelsMaskType )
 80096f6:	7904      	ldrb	r4, [r0, #4]
 80096f8:	b164      	cbz	r4, 8009714 <RegionIN865ChanMaskSet+0x20>
 80096fa:	2c01      	cmp	r4, #1
 80096fc:	d108      	bne.n	8009710 <RegionIN865ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
            break;
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 80096fe:	4b0a      	ldr	r3, [pc, #40]	; (8009728 <RegionIN865ChanMaskSet+0x34>)
 8009700:	6801      	ldr	r1, [r0, #0]
 8009702:	6818      	ldr	r0, [r3, #0]
 8009704:	4622      	mov	r2, r4
 8009706:	30c2      	adds	r0, #194	; 0xc2
 8009708:	f7ff fb2e 	bl	8008d68 <RegionCommonChanMaskCopy>
            break;
        }
        default:
            return false;
    }
    return true;
 800970c:	4620      	mov	r0, r4
}
 800970e:	bd10      	pop	{r4, pc}
    switch( chanMaskSet->ChannelsMaskType )
 8009710:	2000      	movs	r0, #0
}
 8009712:	bd10      	pop	{r4, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 8009714:	4b04      	ldr	r3, [pc, #16]	; (8009728 <RegionIN865ChanMaskSet+0x34>)
 8009716:	6801      	ldr	r1, [r0, #0]
 8009718:	6818      	ldr	r0, [r3, #0]
 800971a:	2201      	movs	r2, #1
 800971c:	30c0      	adds	r0, #192	; 0xc0
 800971e:	f7ff fb23 	bl	8008d68 <RegionCommonChanMaskCopy>
    return true;
 8009722:	2001      	movs	r0, #1
}
 8009724:	bd10      	pop	{r4, pc}
 8009726:	bf00      	nop
 8009728:	20000594 	.word	0x20000594

0800972c <RegionIN865ComputeRxWindowParameters>:

void RegionIN865ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800972c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, IN865_RX_MAX_DATARATE );
 800972e:	2807      	cmp	r0, #7
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsIN865 );
 8009730:	4d15      	ldr	r5, [pc, #84]	; (8009788 <RegionIN865ComputeRxWindowParameters+0x5c>)
{
 8009732:	461c      	mov	r4, r3
    rxConfigParams->Datarate = MIN( datarate, IN865_RX_MAX_DATARATE );
 8009734:	bfa8      	it	ge
 8009736:	2007      	movge	r0, #7
 8009738:	7058      	strb	r0, [r3, #1]
{
 800973a:	b083      	sub	sp, #12
 800973c:	460e      	mov	r6, r1
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsIN865 );
 800973e:	4629      	mov	r1, r5
{
 8009740:	4617      	mov	r7, r2
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsIN865 );
 8009742:	f7ff fe25 	bl	8009390 <RegionCommonGetBandwidth>

    if( rxConfigParams->Datarate == DR_7 )
 8009746:	f994 3001 	ldrsb.w	r3, [r4, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsIN865 );
 800974a:	70a0      	strb	r0, [r4, #2]
    if( rxConfigParams->Datarate == DR_7 )
 800974c:	2b07      	cmp	r3, #7
 800974e:	d016      	beq.n	800977e <RegionIN865ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesIN865[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesIN865[rxConfigParams->Datarate], BandwidthsIN865[rxConfigParams->Datarate] );
 8009750:	4a0e      	ldr	r2, [pc, #56]	; (800978c <RegionIN865ComputeRxWindowParameters+0x60>)
 8009752:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8009756:	5cd0      	ldrb	r0, [r2, r3]
 8009758:	f7ff fce4 	bl	8009124 <RegionCommonComputeSymbolTimeLoRa>
 800975c:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800975e:	4b0c      	ldr	r3, [pc, #48]	; (8009790 <RegionIN865ComputeRxWindowParameters+0x64>)
 8009760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009762:	4798      	blx	r3
 8009764:	f104 0c0c 	add.w	ip, r4, #12
 8009768:	3408      	adds	r4, #8
 800976a:	4603      	mov	r3, r0
 800976c:	e9cd 4c00 	strd	r4, ip, [sp]
 8009770:	463a      	mov	r2, r7
 8009772:	4631      	mov	r1, r6
 8009774:	4628      	mov	r0, r5
 8009776:	f7ff fce3 	bl	8009140 <RegionCommonComputeRxWindowParameters>
}
 800977a:	b003      	add	sp, #12
 800977c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesIN865[rxConfigParams->Datarate] );
 800977e:	2032      	movs	r0, #50	; 0x32
 8009780:	f7ff fcd8 	bl	8009134 <RegionCommonComputeSymbolTimeFsk>
 8009784:	4605      	mov	r5, r0
 8009786:	e7ea      	b.n	800975e <RegionIN865ComputeRxWindowParameters+0x32>
 8009788:	0801565c 	.word	0x0801565c
 800978c:	08015684 	.word	0x08015684
 8009790:	08015848 	.word	0x08015848

08009794 <RegionIN865RxConfig>:

bool RegionIN865RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8009794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;

    if( Radio.GetStatus( ) != RF_IDLE )
 8009798:	4e35      	ldr	r6, [pc, #212]	; (8009870 <RegionIN865RxConfig+0xdc>)
    int8_t dr = rxConfig->Datarate;
 800979a:	f990 8001 	ldrsb.w	r8, [r0, #1]
    if( Radio.GetStatus( ) != RF_IDLE )
 800979e:	6873      	ldr	r3, [r6, #4]
    uint32_t frequency = rxConfig->Frequency;
 80097a0:	f8d0 9004 	ldr.w	r9, [r0, #4]
{
 80097a4:	b08a      	sub	sp, #40	; 0x28
 80097a6:	4604      	mov	r4, r0
 80097a8:	460f      	mov	r7, r1
    if( Radio.GetStatus( ) != RF_IDLE )
 80097aa:	4798      	blx	r3
 80097ac:	2800      	cmp	r0, #0
 80097ae:	d15b      	bne.n	8009868 <RegionIN865RxConfig+0xd4>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80097b0:	7ca3      	ldrb	r3, [r4, #18]
 80097b2:	4605      	mov	r5, r0
 80097b4:	b963      	cbnz	r3, 80097d0 <RegionIN865RxConfig+0x3c>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 80097b6:	4a2f      	ldr	r2, [pc, #188]	; (8009874 <RegionIN865RxConfig+0xe0>)
 80097b8:	7823      	ldrb	r3, [r4, #0]
 80097ba:	6812      	ldr	r2, [r2, #0]
 80097bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80097c0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80097c4:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80097c8:	684b      	ldr	r3, [r1, #4]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	bf18      	it	ne
 80097ce:	4699      	movne	r9, r3
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesIN865[dr];
 80097d0:	4a29      	ldr	r2, [pc, #164]	; (8009878 <RegionIN865RxConfig+0xe4>)

    Radio.SetChannel( frequency );
 80097d2:	68f3      	ldr	r3, [r6, #12]
    phyDr = DataratesIN865[dr];
 80097d4:	f912 a008 	ldrsb.w	sl, [r2, r8]
    Radio.SetChannel( frequency );
 80097d8:	4648      	mov	r0, r9
 80097da:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 80097dc:	f1b8 0f07 	cmp.w	r8, #7
 80097e0:	d026      	beq.n	8009830 <RegionIN865RxConfig+0x9c>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80097e2:	2100      	movs	r1, #0
 80097e4:	7c63      	ldrb	r3, [r4, #17]
 80097e6:	f8b4 e008 	ldrh.w	lr, [r4, #8]
 80097ea:	f8cd e008 	str.w	lr, [sp, #8]
 80097ee:	e9cd 1106 	strd	r1, r1, [sp, #24]
 80097f2:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80097f6:	2501      	movs	r5, #1
 80097f8:	9309      	str	r3, [sp, #36]	; 0x24
 80097fa:	9508      	str	r5, [sp, #32]
 80097fc:	9103      	str	r1, [sp, #12]
 80097fe:	9100      	str	r1, [sp, #0]
 8009800:	f04f 0c08 	mov.w	ip, #8
 8009804:	78a1      	ldrb	r1, [r4, #2]
 8009806:	69b4      	ldr	r4, [r6, #24]
 8009808:	f8cd c004 	str.w	ip, [sp, #4]
 800980c:	4652      	mov	r2, sl
 800980e:	462b      	mov	r3, r5
 8009810:	4628      	mov	r0, r5
 8009812:	47a0      	blx	r4
    }

    Radio.SetMaxPayloadLength( modem, MaxPayloadOfDatarateIN865[dr] + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8009814:	4a19      	ldr	r2, [pc, #100]	; (800987c <RegionIN865RxConfig+0xe8>)
 8009816:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8009818:	f812 1008 	ldrb.w	r1, [r2, r8]
 800981c:	310d      	adds	r1, #13
 800981e:	4628      	mov	r0, r5
 8009820:	b2c9      	uxtb	r1, r1
 8009822:	4798      	blx	r3

    *datarate = (uint8_t) dr;
    return true;
 8009824:	2001      	movs	r0, #1
    *datarate = (uint8_t) dr;
 8009826:	f887 8000 	strb.w	r8, [r7]
}
 800982a:	b00a      	add	sp, #40	; 0x28
 800982c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8009830:	7c63      	ldrb	r3, [r4, #17]
 8009832:	4913      	ldr	r1, [pc, #76]	; (8009880 <RegionIN865RxConfig+0xec>)
 8009834:	8920      	ldrh	r0, [r4, #8]
 8009836:	9309      	str	r3, [sp, #36]	; 0x24
 8009838:	f04f 0c01 	mov.w	ip, #1
 800983c:	2300      	movs	r3, #0
 800983e:	2405      	movs	r4, #5
 8009840:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009844:	e9cd 1400 	strd	r1, r4, [sp]
 8009848:	9002      	str	r0, [sp, #8]
 800984a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800984e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8009852:	69b4      	ldr	r4, [r6, #24]
 8009854:	9306      	str	r3, [sp, #24]
 8009856:	fb02 f20a 	mul.w	r2, r2, sl
 800985a:	4618      	mov	r0, r3
 800985c:	f8cd c014 	str.w	ip, [sp, #20]
 8009860:	f24c 3150 	movw	r1, #50000	; 0xc350
 8009864:	47a0      	blx	r4
 8009866:	e7d5      	b.n	8009814 <RegionIN865RxConfig+0x80>
        return false;
 8009868:	2000      	movs	r0, #0
}
 800986a:	b00a      	add	sp, #40	; 0x28
 800986c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009870:	08015848 	.word	0x08015848
 8009874:	20000594 	.word	0x20000594
 8009878:	08015684 	.word	0x08015684
 800987c:	080156cc 	.word	0x080156cc
 8009880:	00014585 	.word	0x00014585

08009884 <RegionIN865TxConfig>:

bool RegionIN865TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8009884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009888:	4604      	mov	r4, r0
    RadioModems_t modem;
    int8_t phyDr = DataratesIN865[txConfig->Datarate];
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800988a:	4d3e      	ldr	r5, [pc, #248]	; (8009984 <RegionIN865TxConfig+0x100>)
    int8_t phyDr = DataratesIN865[txConfig->Datarate];
 800988c:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8009890:	4f3d      	ldr	r7, [pc, #244]	; (8009988 <RegionIN865TxConfig+0x104>)
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8009892:	f890 c000 	ldrb.w	ip, [r0]
    int8_t phyDr = DataratesIN865[txConfig->Datarate];
 8009896:	56ff      	ldrsb	r7, [r7, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8009898:	682b      	ldr	r3, [r5, #0]
 800989a:	483c      	ldr	r0, [pc, #240]	; (800998c <RegionIN865TxConfig+0x108>)

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800989c:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8009994 <RegionIN865TxConfig+0x110>
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 80098a0:	6806      	ldr	r6, [r0, #0]
 80098a2:	f994 0002 	ldrsb.w	r0, [r4, #2]
 80098a6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80098aa:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
{
 80098ae:	b08c      	sub	sp, #48	; 0x30
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 80098b0:	f89c 3009 	ldrb.w	r3, [ip, #9]
 80098b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80098b8:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
{
 80098bc:	4688      	mov	r8, r1
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 80098be:	f993 1002 	ldrsb.w	r1, [r3, #2]
{
 80098c2:	4692      	mov	sl, r2
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 80098c4:	f7ff fd60 	bl	8009388 <RegionCommonLimitTxPower>
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsIN865 );
 80098c8:	4931      	ldr	r1, [pc, #196]	; (8009990 <RegionIN865TxConfig+0x10c>)
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 80098ca:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsIN865 );
 80098cc:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80098d0:	f7ff fd5e 	bl	8009390 <RegionCommonGetBandwidth>
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80098d4:	edd4 0a02 	vldr	s1, [r4, #8]
 80098d8:	ed94 0a01 	vldr	s0, [r4, #4]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsIN865 );
 80098dc:	4603      	mov	r3, r0
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80098de:	4630      	mov	r0, r6
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsIN865 );
 80098e0:	930b      	str	r3, [sp, #44]	; 0x2c
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80098e2:	f7ff fc63 	bl	80091ac <RegionCommonComputeTxPower>
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80098e6:	7822      	ldrb	r2, [r4, #0]
 80098e8:	682d      	ldr	r5, [r5, #0]
 80098ea:	f8d9 300c 	ldr.w	r3, [r9, #12]
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80098ee:	900a      	str	r0, [sp, #40]	; 0x28
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80098f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80098f4:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 80098f8:	4798      	blx	r3

    if( txConfig->Datarate == DR_7 )
 80098fa:	f994 2001 	ldrsb.w	r2, [r4, #1]
 80098fe:	2a07      	cmp	r2, #7
 8009900:	e9dd 130a 	ldrd	r1, r3, [sp, #40]	; 0x28
 8009904:	d025      	beq.n	8009952 <RegionIN865TxConfig+0xce>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8009906:	2200      	movs	r2, #0
 8009908:	2501      	movs	r5, #1
 800990a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800990e:	f04f 0c08 	mov.w	ip, #8
 8009912:	e9cd 2007 	strd	r2, r0, [sp, #28]
 8009916:	9700      	str	r7, [sp, #0]
 8009918:	e9cd 2205 	strd	r2, r2, [sp, #20]
 800991c:	e9cd 2503 	strd	r2, r5, [sp, #12]
 8009920:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8009924:	9501      	str	r5, [sp, #4]
 8009926:	4628      	mov	r0, r5
 8009928:	f8cd c008 	str.w	ip, [sp, #8]
 800992c:	47b8      	blx	r7
    }

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800992e:	89a1      	ldrh	r1, [r4, #12]
 8009930:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8009934:	f7ff fd3e 	bl	80093b4 <GetTimeOnAir>

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8009938:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800993c:	f8ca 0000 	str.w	r0, [sl]
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8009940:	7b21      	ldrb	r1, [r4, #12]
 8009942:	4628      	mov	r0, r5
 8009944:	4798      	blx	r3

    *txPower = txPowerLimited;
    return true;
}
 8009946:	2001      	movs	r0, #1
    *txPower = txPowerLimited;
 8009948:	f888 6000 	strb.w	r6, [r8]
}
 800994c:	b00c      	add	sp, #48	; 0x30
 800994e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8009952:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009956:	2000      	movs	r0, #0
 8009958:	fb02 f707 	mul.w	r7, r2, r7
 800995c:	f44f 6c7a 	mov.w	ip, #4000	; 0xfa0
 8009960:	2501      	movs	r5, #1
 8009962:	2205      	movs	r2, #5
 8009964:	9700      	str	r7, [sp, #0]
 8009966:	9504      	str	r5, [sp, #16]
 8009968:	9202      	str	r2, [sp, #8]
 800996a:	e9cd 0c07 	strd	r0, ip, [sp, #28]
 800996e:	e9cd 0005 	strd	r0, r0, [sp, #20]
 8009972:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8009976:	9003      	str	r0, [sp, #12]
 8009978:	9001      	str	r0, [sp, #4]
 800997a:	f246 12a8 	movw	r2, #25000	; 0x61a8
        modem = MODEM_FSK;
 800997e:	4605      	mov	r5, r0
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8009980:	47b8      	blx	r7
 8009982:	e7d4      	b.n	800992e <RegionIN865TxConfig+0xaa>
 8009984:	20000594 	.word	0x20000594
 8009988:	08015684 	.word	0x08015684
 800998c:	20000590 	.word	0x20000590
 8009990:	0801565c 	.word	0x0801565c
 8009994:	08015848 	.word	0x08015848

08009998 <RegionIN865LinkAdrReq>:

uint8_t RegionIN865LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8009998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800999c:	b08d      	sub	sp, #52	; 0x34
    uint16_t chMask = 0;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800999e:	7a04      	ldrb	r4, [r0, #8]
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80099a0:	2500      	movs	r5, #0
{
 80099a2:	4606      	mov	r6, r0
 80099a4:	468a      	mov	sl, r1
 80099a6:	4691      	mov	r9, r2
 80099a8:	4698      	mov	r8, r3
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80099aa:	f8ad 500c 	strh.w	r5, [sp, #12]
 80099ae:	9502      	str	r5, [sp, #8]
    uint16_t chMask = 0;
 80099b0:	f8ad 5006 	strh.w	r5, [sp, #6]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80099b4:	2c00      	cmp	r4, #0
 80099b6:	f000 80b9 	beq.w	8009b2c <RegionIN865LinkAdrReq+0x194>
    uint8_t status = 0x07;
 80099ba:	f04f 0b07 	mov.w	fp, #7
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
                    {
                        chMask |= 1 << i;
 80099be:	2701      	movs	r7, #1
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80099c0:	6870      	ldr	r0, [r6, #4]
 80099c2:	a902      	add	r1, sp, #8
 80099c4:	4428      	add	r0, r5
 80099c6:	f7ff fb3b 	bl	8009040 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 80099ca:	2800      	cmp	r0, #0
 80099cc:	d039      	beq.n	8009a42 <RegionIN865LinkAdrReq+0xaa>
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80099ce:	f89d 200b 	ldrb.w	r2, [sp, #11]
        chMask = linkAdrParams.ChMask;
 80099d2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80099d6:	f8ad 3006 	strh.w	r3, [sp, #6]
        bytesProcessed += nextIndex;
 80099da:	4405      	add	r5, r0
 80099dc:	b2ed      	uxtb	r5, r5
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80099de:	2a00      	cmp	r2, #0
 80099e0:	d145      	bne.n	8009a6e <RegionIN865LinkAdrReq+0xd6>
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d048      	beq.n	8009a78 <RegionIN865LinkAdrReq+0xe0>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 80099e6:	4954      	ldr	r1, [pc, #336]	; (8009b38 <RegionIN865LinkAdrReq+0x1a0>)
 80099e8:	2400      	movs	r4, #0
 80099ea:	6808      	ldr	r0, [r1, #0]
 80099ec:	46a6      	mov	lr, r4
 80099ee:	f04f 0b07 	mov.w	fp, #7
 80099f2:	e00a      	b.n	8009a0a <RegionIN865LinkAdrReq+0x72>
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80099f4:	07c9      	lsls	r1, r1, #31
 80099f6:	d505      	bpl.n	8009a04 <RegionIN865LinkAdrReq+0x6c>
 80099f8:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80099fc:	2900      	cmp	r1, #0
 80099fe:	bf08      	it	eq
 8009a00:	f04f 0b06 	moveq.w	fp, #6
            for( uint8_t i = 0; i < IN865_MAX_NB_CHANNELS; i++ )
 8009a04:	3401      	adds	r4, #1
 8009a06:	2c10      	cmp	r4, #16
 8009a08:	d013      	beq.n	8009a32 <RegionIN865LinkAdrReq+0x9a>
                if( linkAdrParams.ChMaskCtrl == 6 )
 8009a0a:	2a06      	cmp	r2, #6
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8009a0c:	fa43 f104 	asr.w	r1, r3, r4
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8009a10:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
                if( linkAdrParams.ChMaskCtrl == 6 )
 8009a14:	d1ee      	bne.n	80099f4 <RegionIN865LinkAdrReq+0x5c>
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8009a16:	f850 c02c 	ldr.w	ip, [r0, ip, lsl #2]
                        chMask |= 1 << i;
 8009a1a:	fa07 f104 	lsl.w	r1, r7, r4
 8009a1e:	4319      	orrs	r1, r3
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8009a20:	f1bc 0f00 	cmp.w	ip, #0
 8009a24:	d0ee      	beq.n	8009a04 <RegionIN865LinkAdrReq+0x6c>
 8009a26:	3401      	adds	r4, #1
            for( uint8_t i = 0; i < IN865_MAX_NB_CHANNELS; i++ )
 8009a28:	2c10      	cmp	r4, #16
                        chMask |= 1 << i;
 8009a2a:	b28b      	uxth	r3, r1
 8009a2c:	f04f 0e01 	mov.w	lr, #1
            for( uint8_t i = 0; i < IN865_MAX_NB_CHANNELS; i++ )
 8009a30:	d1eb      	bne.n	8009a0a <RegionIN865LinkAdrReq+0x72>
 8009a32:	f1be 0f00 	cmp.w	lr, #0
 8009a36:	d021      	beq.n	8009a7c <RegionIN865LinkAdrReq+0xe4>
 8009a38:	f8ad 3006 	strh.w	r3, [sp, #6]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8009a3c:	7a33      	ldrb	r3, [r6, #8]
 8009a3e:	42ab      	cmp	r3, r5
 8009a40:	d8be      	bhi.n	80099c0 <RegionIN865LinkAdrReq+0x28>
 8009a42:	f99d 2009 	ldrsb.w	r2, [sp, #9]
 8009a46:	f99d c00a 	ldrsb.w	ip, [sp, #10]
 8009a4a:	f89d 4008 	ldrb.w	r4, [sp, #8]
                }
            }
        }
    }

    if( linkAdrParams.Datarate != DR_6 )
 8009a4e:	2a06      	cmp	r2, #6
 8009a50:	d11f      	bne.n	8009a92 <RegionIN865LinkAdrReq+0xfa>
        // Verify the parameters and update, if necessary
        status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
    }
    else
    {// DR_6 is not supported by this region
        status &= 0xFD; // Datarate KO
 8009a52:	f00b 0bfd 	and.w	fp, fp, #253	; 0xfd

    // Update status variables
    *drOut = linkAdrParams.Datarate;
    *txPowOut = linkAdrParams.TxPower;
    *nbRepOut = linkAdrParams.NbRep;
    *nbBytesParsed = bytesProcessed;
 8009a56:	9b16      	ldr	r3, [sp, #88]	; 0x58
    *drOut = linkAdrParams.Datarate;
 8009a58:	f88a 2000 	strb.w	r2, [sl]

    return status;
}
 8009a5c:	4658      	mov	r0, fp
    *txPowOut = linkAdrParams.TxPower;
 8009a5e:	f889 c000 	strb.w	ip, [r9]
    *nbRepOut = linkAdrParams.NbRep;
 8009a62:	f888 4000 	strb.w	r4, [r8]
    *nbBytesParsed = bytesProcessed;
 8009a66:	701d      	strb	r5, [r3, #0]
}
 8009a68:	b00d      	add	sp, #52	; 0x34
 8009a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8009a6e:	1e51      	subs	r1, r2, #1
 8009a70:	2904      	cmp	r1, #4
 8009a72:	d901      	bls.n	8009a78 <RegionIN865LinkAdrReq+0xe0>
 8009a74:	2a06      	cmp	r2, #6
 8009a76:	d0b6      	beq.n	80099e6 <RegionIN865LinkAdrReq+0x4e>
            status &= 0xFE; // Channel mask KO
 8009a78:	f04f 0b06 	mov.w	fp, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8009a7c:	7a33      	ldrb	r3, [r6, #8]
 8009a7e:	42ab      	cmp	r3, r5
 8009a80:	d89e      	bhi.n	80099c0 <RegionIN865LinkAdrReq+0x28>
 8009a82:	f99d 2009 	ldrsb.w	r2, [sp, #9]
 8009a86:	f99d c00a 	ldrsb.w	ip, [sp, #10]
 8009a8a:	f89d 4008 	ldrb.w	r4, [sp, #8]
    if( linkAdrParams.Datarate != DR_6 )
 8009a8e:	2a06      	cmp	r2, #6
 8009a90:	d0df      	beq.n	8009a52 <RegionIN865LinkAdrReq+0xba>
        linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8009a92:	4f29      	ldr	r7, [pc, #164]	; (8009b38 <RegionIN865LinkAdrReq+0x1a0>)
        linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8009a94:	7ab0      	ldrb	r0, [r6, #10]
        linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8009a96:	6839      	ldr	r1, [r7, #0]
        linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8009a98:	f88d c017 	strb.w	ip, [sp, #23]
        linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8009a9c:	f896 c00b 	ldrb.w	ip, [r6, #11]
        linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8009aa0:	f88d 2016 	strb.w	r2, [sp, #22]
        linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8009aa4:	f88d 4018 	strb.w	r4, [sp, #24]
        linkAdrVerifyParams.Version = linkAdrReq->Version;
 8009aa8:	6832      	ldr	r2, [r6, #0]
        linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8009aaa:	7b34      	ldrb	r4, [r6, #12]
        linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8009aac:	910a      	str	r1, [sp, #40]	; 0x28
        linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8009aae:	f88d 0015 	strb.w	r0, [sp, #21]
        linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8009ab2:	7b71      	ldrb	r1, [r6, #13]
        linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8009ab4:	f88d c019 	strb.w	ip, [sp, #25]
        linkAdrVerifyParams.NbChannels = IN865_MAX_NB_CHANNELS;
 8009ab8:	2610      	movs	r6, #16
        linkAdrVerifyParams.MinTxPower = IN865_MIN_TX_POWER;
 8009aba:	f04f 0c0a 	mov.w	ip, #10
        linkAdrVerifyParams.ChannelsMask = &chMask;
 8009abe:	f10d 0006 	add.w	r0, sp, #6
        linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8009ac2:	f88d 401a 	strb.w	r4, [sp, #26]
        linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8009ac6:	f88d 101b 	strb.w	r1, [sp, #27]
        linkAdrVerifyParams.Version = linkAdrReq->Version;
 8009aca:	9204      	str	r2, [sp, #16]
        linkAdrVerifyParams.ChannelsMask = &chMask;
 8009acc:	9008      	str	r0, [sp, #32]
        status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8009ace:	ab02      	add	r3, sp, #8
        linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8009ad0:	f44f 64e0 	mov.w	r4, #1792	; 0x700
        status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8009ad4:	eb0d 020c 	add.w	r2, sp, ip
 8009ad8:	f10d 0109 	add.w	r1, sp, #9
 8009adc:	eb0d 0006 	add.w	r0, sp, r6
        linkAdrVerifyParams.Status = status;
 8009ae0:	f88d b014 	strb.w	fp, [sp, #20]
        linkAdrVerifyParams.NbChannels = IN865_MAX_NB_CHANNELS;
 8009ae4:	f88d 601c 	strb.w	r6, [sp, #28]
        linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8009ae8:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
        linkAdrVerifyParams.MinTxPower = IN865_MIN_TX_POWER;
 8009aec:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
        status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8009af0:	f7ff fac0 	bl	8009074 <RegionCommonLinkAdrReqVerifyParams>
    if( status == 0x07 )
 8009af4:	2807      	cmp	r0, #7
        status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8009af6:	4683      	mov	fp, r0
    if( status == 0x07 )
 8009af8:	d006      	beq.n	8009b08 <RegionIN865LinkAdrReq+0x170>
 8009afa:	f99d 2009 	ldrsb.w	r2, [sp, #9]
 8009afe:	f99d c00a 	ldrsb.w	ip, [sp, #10]
 8009b02:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8009b06:	e7a6      	b.n	8009a56 <RegionIN865LinkAdrReq+0xbe>
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8009b08:	6838      	ldr	r0, [r7, #0]
 8009b0a:	2202      	movs	r2, #2
 8009b0c:	2100      	movs	r1, #0
 8009b0e:	30c0      	adds	r0, #192	; 0xc0
 8009b10:	f7f9 f9bc 	bl	8002e8c <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8009b1a:	f99d 2009 	ldrsb.w	r2, [sp, #9]
 8009b1e:	f99d c00a 	ldrsb.w	ip, [sp, #10]
 8009b22:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8009b26:	f8a3 10c0 	strh.w	r1, [r3, #192]	; 0xc0
 8009b2a:	e794      	b.n	8009a56 <RegionIN865LinkAdrReq+0xbe>
    uint8_t bytesProcessed = 0;
 8009b2c:	4625      	mov	r5, r4
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8009b2e:	4622      	mov	r2, r4
    uint8_t status = 0x07;
 8009b30:	f04f 0b07 	mov.w	fp, #7
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8009b34:	46a4      	mov	ip, r4
 8009b36:	e7ac      	b.n	8009a92 <RegionIN865LinkAdrReq+0xfa>
 8009b38:	20000594 	.word	0x20000594

08009b3c <RegionIN865RxParamSetupReq>:

uint8_t RegionIN865RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8009b3c:	b570      	push	{r4, r5, r6, lr}
    if( Radio.CheckRfFrequency( freq ) == false )
 8009b3e:	4b14      	ldr	r3, [pc, #80]	; (8009b90 <RegionIN865RxParamSetupReq+0x54>)
    uint8_t status = 0x07;

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8009b40:	6846      	ldr	r6, [r0, #4]
    if( Radio.CheckRfFrequency( freq ) == false )
 8009b42:	6a1b      	ldr	r3, [r3, #32]
{
 8009b44:	4605      	mov	r5, r0
    if( Radio.CheckRfFrequency( freq ) == false )
 8009b46:	4630      	mov	r0, r6
 8009b48:	4798      	blx	r3
 8009b4a:	b1f8      	cbz	r0, 8009b8c <RegionIN865RxParamSetupReq+0x50>
    if( ( freq < 865000000 ) || ( freq > 867000000 ) )
 8009b4c:	4c11      	ldr	r4, [pc, #68]	; (8009b94 <RegionIN865RxParamSetupReq+0x58>)
 8009b4e:	4b12      	ldr	r3, [pc, #72]	; (8009b98 <RegionIN865RxParamSetupReq+0x5c>)
 8009b50:	4434      	add	r4, r6
    uint8_t status = 0x07;
 8009b52:	429c      	cmp	r4, r3
 8009b54:	bf8c      	ite	hi
 8009b56:	2406      	movhi	r4, #6
 8009b58:	2407      	movls	r4, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, IN865_RX_MIN_DATARATE, IN865_RX_MAX_DATARATE ) == false ) ||
 8009b5a:	f995 0000 	ldrsb.w	r0, [r5]
 8009b5e:	2207      	movs	r2, #7
 8009b60:	2100      	movs	r1, #0
 8009b62:	f7ff f8b3 	bl	8008ccc <RegionCommonValueInRange>
 8009b66:	b170      	cbz	r0, 8009b86 <RegionIN865RxParamSetupReq+0x4a>
 8009b68:	f995 3000 	ldrsb.w	r3, [r5]
 8009b6c:	2b06      	cmp	r3, #6
 8009b6e:	d00a      	beq.n	8009b86 <RegionIN865RxParamSetupReq+0x4a>
    {
        status &= 0xFD; // Datarate KO
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, IN865_MIN_RX1_DR_OFFSET, IN865_MAX_RX1_DR_OFFSET ) == false )
 8009b70:	f995 0001 	ldrsb.w	r0, [r5, #1]
 8009b74:	2207      	movs	r2, #7
 8009b76:	2100      	movs	r1, #0
 8009b78:	f7ff f8a8 	bl	8008ccc <RegionCommonValueInRange>
 8009b7c:	b908      	cbnz	r0, 8009b82 <RegionIN865RxParamSetupReq+0x46>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8009b7e:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
    }

    return status;
}
 8009b82:	4620      	mov	r0, r4
 8009b84:	bd70      	pop	{r4, r5, r6, pc}
        status &= 0xFD; // Datarate KO
 8009b86:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
 8009b8a:	e7f1      	b.n	8009b70 <RegionIN865RxParamSetupReq+0x34>
        status &= 0xFE; // Channel frequency KO
 8009b8c:	2406      	movs	r4, #6
 8009b8e:	e7e4      	b.n	8009b5a <RegionIN865RxParamSetupReq+0x1e>
 8009b90:	08015848 	.word	0x08015848
 8009b94:	cc7125c0 	.word	0xcc7125c0
 8009b98:	001e8480 	.word	0x001e8480

08009b9c <RegionIN865TxParamSetupReq>:

int8_t RegionIN865TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 8009b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop

08009ba4 <RegionIN865DlChannelReq>:

int8_t RegionIN865DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8009ba4:	b538      	push	{r3, r4, r5, lr}
    uint8_t status = 0x03;

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 8009ba6:	7803      	ldrb	r3, [r0, #0]
 8009ba8:	2b0f      	cmp	r3, #15
 8009baa:	d827      	bhi.n	8009bfc <RegionIN865DlChannelReq+0x58>
    {
        return 0;
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 8009bac:	6845      	ldr	r5, [r0, #4]
    if( Radio.CheckRfFrequency( freq ) == false )
 8009bae:	4b1a      	ldr	r3, [pc, #104]	; (8009c18 <RegionIN865DlChannelReq+0x74>)
 8009bb0:	4604      	mov	r4, r0
 8009bb2:	6a1b      	ldr	r3, [r3, #32]
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	4798      	blx	r3
 8009bb8:	b180      	cbz	r0, 8009bdc <RegionIN865DlChannelReq+0x38>
    if( ( freq < 865000000 ) || ( freq > 867000000 ) )
 8009bba:	4b18      	ldr	r3, [pc, #96]	; (8009c1c <RegionIN865DlChannelReq+0x78>)
 8009bbc:	4a18      	ldr	r2, [pc, #96]	; (8009c20 <RegionIN865DlChannelReq+0x7c>)
 8009bbe:	442b      	add	r3, r5
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d81d      	bhi.n	8009c00 <RegionIN865DlChannelReq+0x5c>
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8009bc4:	4a17      	ldr	r2, [pc, #92]	; (8009c24 <RegionIN865DlChannelReq+0x80>)
 8009bc6:	7823      	ldrb	r3, [r4, #0]
 8009bc8:	6812      	ldr	r2, [r2, #0]
 8009bca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009bce:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8009bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bd6:	b96b      	cbnz	r3, 8009bf4 <RegionIN865DlChannelReq+0x50>
 8009bd8:	2001      	movs	r0, #1
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

    return status;
}
 8009bda:	bd38      	pop	{r3, r4, r5, pc}
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8009bdc:	7823      	ldrb	r3, [r4, #0]
 8009bde:	4a11      	ldr	r2, [pc, #68]	; (8009c24 <RegionIN865DlChannelReq+0x80>)
 8009be0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009be4:	6812      	ldr	r2, [r2, #0]
 8009be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	bf14      	ite	ne
 8009bee:	2002      	movne	r0, #2
 8009bf0:	2000      	moveq	r0, #0
}
 8009bf2:	bd38      	pop	{r3, r4, r5, pc}
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8009bf4:	6863      	ldr	r3, [r4, #4]
 8009bf6:	604b      	str	r3, [r1, #4]
 8009bf8:	2003      	movs	r0, #3
}
 8009bfa:	bd38      	pop	{r3, r4, r5, pc}
        return 0;
 8009bfc:	2000      	movs	r0, #0
}
 8009bfe:	bd38      	pop	{r3, r4, r5, pc}
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8009c00:	7823      	ldrb	r3, [r4, #0]
 8009c02:	4a08      	ldr	r2, [pc, #32]	; (8009c24 <RegionIN865DlChannelReq+0x80>)
 8009c04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009c08:	6812      	ldr	r2, [r2, #0]
 8009c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	bf0c      	ite	eq
 8009c12:	2000      	moveq	r0, #0
 8009c14:	2002      	movne	r0, #2
}
 8009c16:	bd38      	pop	{r3, r4, r5, pc}
 8009c18:	08015848 	.word	0x08015848
 8009c1c:	cc7125c0 	.word	0xcc7125c0
 8009c20:	001e8480 	.word	0x001e8480
 8009c24:	20000594 	.word	0x20000594

08009c28 <RegionIN865AlternateDr>:

int8_t RegionIN865AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
    return currentDr;
}
 8009c28:	4770      	bx	lr
 8009c2a:	bf00      	nop

08009c2c <RegionIN865NextChannel>:

LoRaMacStatus_t RegionIN865NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8009c2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = IN865_JOIN_CHANNELS;

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8009c30:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8009d34 <RegionIN865NextChannel+0x108>
 8009c34:	f8d9 6000 	ldr.w	r6, [r9]
{
 8009c38:	b097      	sub	sp, #92	; 0x5c
    uint8_t nbEnabledChannels = 0;
 8009c3a:	2500      	movs	r5, #0
    uint16_t joinChannels = IN865_JOIN_CHANNELS;
 8009c3c:	f04f 0c07 	mov.w	ip, #7
{
 8009c40:	4604      	mov	r4, r0
 8009c42:	4688      	mov	r8, r1
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8009c44:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
 8009c48:	4629      	mov	r1, r5
{
 8009c4a:	4617      	mov	r7, r2
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8009c4c:	2201      	movs	r2, #1
    uint8_t enabledChannels[IN865_MAX_NB_CHANNELS] = { 0 };
 8009c4e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009c52:	e9cd 5506 	strd	r5, r5, [sp, #24]
    uint8_t nbEnabledChannels = 0;
 8009c56:	f88d 500c 	strb.w	r5, [sp, #12]
    uint8_t nbRestrictedChannels = 0;
 8009c5a:	f88d 500d 	strb.w	r5, [sp, #13]
{
 8009c5e:	461e      	mov	r6, r3
    uint16_t joinChannels = IN865_JOIN_CHANNELS;
 8009c60:	f8ad c00e 	strh.w	ip, [sp, #14]
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8009c64:	f7ff f858 	bl	8008d18 <RegionCommonCountChannels>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8009c68:	f8d9 5000 	ldr.w	r5, [r9]
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8009c6c:	b928      	cbnz	r0, 8009c7a <RegionIN865NextChannel+0x4e>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8009c6e:	f8b5 30c0 	ldrh.w	r3, [r5, #192]	; 0xc0
 8009c72:	f043 0307 	orr.w	r3, r3, #7
 8009c76:	f8a5 30c0 	strh.w	r3, [r5, #192]	; 0xc0
    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
    countChannelsParams.Datarate = nextChanParams->Datarate;
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
    countChannelsParams.Bands = RegionBands;
 8009c7a:	4b2d      	ldr	r3, [pc, #180]	; (8009d30 <RegionIN865NextChannel+0x104>)
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8009c7c:	f994 c008 	ldrsb.w	ip, [r4, #8]
    countChannelsParams.Bands = RegionBands;
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	930b      	str	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
    identifyChannelsParam.MaxBands = IN865_MAX_NB_BANDS;

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8009c84:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8009c88:	ab11      	add	r3, sp, #68	; 0x44
 8009c8a:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8009c8e:	e9d4 2300 	ldrd	r2, r3, [r4]
    countChannelsParams.Joined = nextChanParams->Joined;
 8009c92:	7a61      	ldrb	r1, [r4, #9]
 8009c94:	f88d 1020 	strb.w	r1, [sp, #32]
    countChannelsParams.MaxNbChannels = IN865_MAX_NB_CHANNELS;
 8009c98:	2110      	movs	r1, #16
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8009c9a:	950a      	str	r5, [sp, #40]	; 0x28
    countChannelsParams.MaxNbChannels = IN865_MAX_NB_CHANNELS;
 8009c9c:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8009ca0:	35c0      	adds	r5, #192	; 0xc0
    countChannelsParams.JoinChannels = &joinChannels;
 8009ca2:	f10d 010e 	add.w	r1, sp, #14
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8009ca6:	9509      	str	r5, [sp, #36]	; 0x24
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8009ca8:	4660      	mov	r0, ip
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8009caa:	7aa5      	ldrb	r5, [r4, #10]
    countChannelsParams.JoinChannels = &joinChannels;
 8009cac:	910d      	str	r1, [sp, #52]	; 0x34
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8009cae:	920e      	str	r2, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8009cb0:	8ae1      	ldrh	r1, [r4, #22]
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8009cb2:	930f      	str	r3, [sp, #60]	; 0x3c
    identifyChannelsParam.MaxBands = IN865_MAX_NB_BANDS;
 8009cb4:	2201      	movs	r2, #1
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8009cb6:	7d23      	ldrb	r3, [r4, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8009cb8:	f88d c021 	strb.w	ip, [sp, #33]	; 0x21
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8009cbc:	f88d 5040 	strb.w	r5, [sp, #64]	; 0x40
    identifyChannelsParam.MaxBands = IN865_MAX_NB_BANDS;
 8009cc0:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8009cc4:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8009cc8:	f7ff fb74 	bl	80093b4 <GetTimeOnAir>

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8009ccc:	f10d 030d 	add.w	r3, sp, #13
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8009cd0:	4605      	mov	r5, r0
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8009cd2:	9300      	str	r3, [sp, #0]
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8009cd4:	ac08      	add	r4, sp, #32
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8009cd6:	9701      	str	r7, [sp, #4]
 8009cd8:	4631      	mov	r1, r6
 8009cda:	ab03      	add	r3, sp, #12
 8009cdc:	aa04      	add	r2, sp, #16
 8009cde:	a80e      	add	r0, sp, #56	; 0x38
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8009ce0:	e9cd 5414 	strd	r5, r4, [sp, #80]	; 0x50
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8009ce4:	f7ff fae2 	bl	80092ac <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8009ce8:	4604      	mov	r4, r0
 8009cea:	b188      	cbz	r0, 8009d10 <RegionIN865NextChannel+0xe4>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8009cec:	280c      	cmp	r0, #12
 8009cee:	d003      	beq.n	8009cf8 <RegionIN865NextChannel+0xcc>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
    }
    return status;
}
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	b017      	add	sp, #92	; 0x5c
 8009cf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8009cf8:	f8d9 2000 	ldr.w	r2, [r9]
 8009cfc:	f8b2 30c0 	ldrh.w	r3, [r2, #192]	; 0xc0
}
 8009d00:	4620      	mov	r0, r4
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8009d02:	f043 0307 	orr.w	r3, r3, #7
 8009d06:	f8a2 30c0 	strh.w	r3, [r2, #192]	; 0xc0
}
 8009d0a:	b017      	add	sp, #92	; 0x5c
 8009d0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8009d10:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8009d14:	3901      	subs	r1, #1
 8009d16:	f7f9 f879 	bl	8002e0c <randr>
 8009d1a:	ab16      	add	r3, sp, #88	; 0x58
 8009d1c:	4418      	add	r0, r3
 8009d1e:	f810 3c48 	ldrb.w	r3, [r0, #-72]
 8009d22:	f888 3000 	strb.w	r3, [r8]
}
 8009d26:	4620      	mov	r0, r4
 8009d28:	b017      	add	sp, #92	; 0x5c
 8009d2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d2e:	bf00      	nop
 8009d30:	20000590 	.word	0x20000590
 8009d34:	20000594 	.word	0x20000594

08009d38 <RegionIN865ChannelAdd>:

LoRaMacStatus_t RegionIN865ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8009d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 8009d3a:	7906      	ldrb	r6, [r0, #4]

    if( id < IN865_NUMB_DEFAULT_CHANNELS )
 8009d3c:	2e02      	cmp	r6, #2
 8009d3e:	d952      	bls.n	8009de6 <RegionIN865ChannelAdd+0xae>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= IN865_MAX_NB_CHANNELS )
 8009d40:	2e0f      	cmp	r6, #15
 8009d42:	d852      	bhi.n	8009dea <RegionIN865ChannelAdd+0xb2>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE ) == false )
 8009d44:	6803      	ldr	r3, [r0, #0]
 8009d46:	4604      	mov	r4, r0
 8009d48:	7a18      	ldrb	r0, [r3, #8]
 8009d4a:	f340 0003 	sbfx	r0, r0, #0, #4
 8009d4e:	2207      	movs	r2, #7
 8009d50:	2100      	movs	r1, #0
 8009d52:	b240      	sxtb	r0, r0
 8009d54:	f7fe ffba 	bl	8008ccc <RegionCommonValueInRange>
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE ) == false )
 8009d58:	6823      	ldr	r3, [r4, #0]
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE ) == false )
 8009d5a:	4605      	mov	r5, r0
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE ) == false )
 8009d5c:	7a18      	ldrb	r0, [r3, #8]
 8009d5e:	f340 1003 	sbfx	r0, r0, #4, #4
 8009d62:	b240      	sxtb	r0, r0
 8009d64:	2207      	movs	r2, #7
 8009d66:	2100      	movs	r1, #0
 8009d68:	f7fe ffb0 	bl	8008ccc <RegionCommonValueInRange>
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	d032      	beq.n	8009dd6 <RegionIN865ChannelAdd+0x9e>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE ) == false )
 8009d70:	fab5 f585 	clz	r5, r5
 8009d74:	096d      	lsrs	r5, r5, #5
    {
        drInvalid = true;
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8009d76:	6821      	ldr	r1, [r4, #0]
 8009d78:	7a0b      	ldrb	r3, [r1, #8]
 8009d7a:	f343 0203 	sbfx	r2, r3, #0, #4
 8009d7e:	f343 1303 	sbfx	r3, r3, #4, #4
 8009d82:	b252      	sxtb	r2, r2
 8009d84:	b25b      	sxtb	r3, r3
 8009d86:	429a      	cmp	r2, r3
 8009d88:	dc27      	bgt.n	8009dda <RegionIN865ChannelAdd+0xa2>
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 8009d8a:	680f      	ldr	r7, [r1, #0]
    if( Radio.CheckRfFrequency( freq ) == false )
 8009d8c:	4b1d      	ldr	r3, [pc, #116]	; (8009e04 <RegionIN865ChannelAdd+0xcc>)
 8009d8e:	4638      	mov	r0, r7
 8009d90:	6a1b      	ldr	r3, [r3, #32]
 8009d92:	4798      	blx	r3
 8009d94:	b390      	cbz	r0, 8009dfc <RegionIN865ChannelAdd+0xc4>
    if( ( freq < 865000000 ) || ( freq > 867000000 ) )
 8009d96:	4b1c      	ldr	r3, [pc, #112]	; (8009e08 <RegionIN865ChannelAdd+0xd0>)
 8009d98:	4a1c      	ldr	r2, [pc, #112]	; (8009e0c <RegionIN865ChannelAdd+0xd4>)
 8009d9a:	443b      	add	r3, r7
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d82d      	bhi.n	8009dfc <RegionIN865ChannelAdd+0xc4>
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8009da0:	bb55      	cbnz	r5, 8009df8 <RegionIN865ChannelAdd+0xc0>
    if( freqInvalid == true )
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8009da2:	4f1b      	ldr	r7, [pc, #108]	; (8009e10 <RegionIN865ChannelAdd+0xd8>)
 8009da4:	6821      	ldr	r1, [r4, #0]
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8009dac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009db0:	220c      	movs	r2, #12
 8009db2:	f7f9 f84b 	bl	8002e4c <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 8009db6:	683a      	ldr	r2, [r7, #0]
 8009db8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8009dbc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8009dc0:	2301      	movs	r3, #1
    RegionNvmGroup2->Channels[id].Band = 0;
 8009dc2:	724d      	strb	r5, [r1, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8009dc4:	f8b2 10c0 	ldrh.w	r1, [r2, #192]	; 0xc0
 8009dc8:	fa03 f606 	lsl.w	r6, r3, r6
 8009dcc:	430e      	orrs	r6, r1
    return LORAMAC_STATUS_OK;
 8009dce:	4628      	mov	r0, r5
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8009dd0:	f8a2 60c0 	strh.w	r6, [r2, #192]	; 0xc0
}
 8009dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        drInvalid = true;
 8009dd6:	2501      	movs	r5, #1
 8009dd8:	e7cd      	b.n	8009d76 <RegionIN865ChannelAdd+0x3e>
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 8009dda:	680c      	ldr	r4, [r1, #0]
    if( Radio.CheckRfFrequency( freq ) == false )
 8009ddc:	4b09      	ldr	r3, [pc, #36]	; (8009e04 <RegionIN865ChannelAdd+0xcc>)
 8009dde:	4620      	mov	r0, r4
 8009de0:	6a1b      	ldr	r3, [r3, #32]
 8009de2:	4798      	blx	r3
 8009de4:	b918      	cbnz	r0, 8009dee <RegionIN865ChannelAdd+0xb6>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8009de6:	2006      	movs	r0, #6
}
 8009de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009dea:	2003      	movs	r0, #3
}
 8009dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( ( freq < 865000000 ) || ( freq > 867000000 ) )
 8009dee:	4b06      	ldr	r3, [pc, #24]	; (8009e08 <RegionIN865ChannelAdd+0xd0>)
 8009df0:	4a06      	ldr	r2, [pc, #24]	; (8009e0c <RegionIN865ChannelAdd+0xd4>)
 8009df2:	4423      	add	r3, r4
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d8f6      	bhi.n	8009de6 <RegionIN865ChannelAdd+0xae>
        return LORAMAC_STATUS_DATARATE_INVALID;
 8009df8:	2005      	movs	r0, #5
}
 8009dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8009dfc:	2d00      	cmp	r5, #0
 8009dfe:	d1f2      	bne.n	8009de6 <RegionIN865ChannelAdd+0xae>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8009e00:	2004      	movs	r0, #4
}
 8009e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e04:	08015848 	.word	0x08015848
 8009e08:	cc7125c0 	.word	0xcc7125c0
 8009e0c:	001e8480 	.word	0x001e8480
 8009e10:	20000594 	.word	0x20000594

08009e14 <RegionIN865ChannelsRemove>:

bool RegionIN865ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
    uint8_t id = channelRemove->ChannelId;
 8009e14:	7801      	ldrb	r1, [r0, #0]

    if( id < IN865_NUMB_DEFAULT_CHANNELS )
 8009e16:	2902      	cmp	r1, #2
 8009e18:	d801      	bhi.n	8009e1e <RegionIN865ChannelsRemove+0xa>

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, IN865_MAX_NB_CHANNELS );
}
 8009e1a:	2000      	movs	r0, #0
 8009e1c:	4770      	bx	lr
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8009e1e:	4b09      	ldr	r3, [pc, #36]	; (8009e44 <RegionIN865ChannelsRemove+0x30>)
 8009e20:	6818      	ldr	r0, [r3, #0]
 8009e22:	eb01 0341 	add.w	r3, r1, r1, lsl #1
{
 8009e26:	b410      	push	{r4}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8009e28:	009c      	lsls	r4, r3, #2
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009e30:	5102      	str	r2, [r0, r4]
 8009e32:	e9c3 2201 	strd	r2, r2, [r3, #4]
}
 8009e36:	f85d 4b04 	ldr.w	r4, [sp], #4
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, IN865_MAX_NB_CHANNELS );
 8009e3a:	30c0      	adds	r0, #192	; 0xc0
 8009e3c:	2210      	movs	r2, #16
 8009e3e:	f7fe bf4f 	b.w	8008ce0 <RegionCommonChanDisable>
 8009e42:	bf00      	nop
 8009e44:	20000594 	.word	0x20000594

08009e48 <RegionIN865ApplyCFList>:
{
 8009e48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( applyCFList->Size != 16 )
 8009e4c:	7a03      	ldrb	r3, [r0, #8]
{
 8009e4e:	b087      	sub	sp, #28
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8009e50:	2250      	movs	r2, #80	; 0x50
    if( applyCFList->Size != 16 )
 8009e52:	2b10      	cmp	r3, #16
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8009e54:	f88d 2014 	strb.w	r2, [sp, #20]
    if( applyCFList->Size != 16 )
 8009e58:	d11b      	bne.n	8009e92 <RegionIN865ApplyCFList+0x4a>
    if( applyCFList->Payload[15] != 0 )
 8009e5a:	6843      	ldr	r3, [r0, #4]
 8009e5c:	7bdb      	ldrb	r3, [r3, #15]
 8009e5e:	4605      	mov	r5, r0
 8009e60:	b9bb      	cbnz	r3, 8009e92 <RegionIN865ApplyCFList+0x4a>
 8009e62:	4698      	mov	r8, r3
            newChannel.Frequency = 0;
 8009e64:	4699      	mov	r9, r3
    for( uint8_t i = 0, chanIdx = IN865_NUMB_DEFAULT_CHANNELS; chanIdx < IN865_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8009e66:	2403      	movs	r4, #3
            newChannel.Frequency *= 100;
 8009e68:	2764      	movs	r7, #100	; 0x64
            channelAdd.NewChannel = &newChannel;
 8009e6a:	ae03      	add	r6, sp, #12
        if( chanIdx < ( IN865_NUMB_CHANNELS_CF_LIST + IN865_NUMB_DEFAULT_CHANNELS ) )
 8009e6c:	2c07      	cmp	r4, #7
 8009e6e:	d913      	bls.n	8009e98 <RegionIN865ApplyCFList+0x50>
            newChannel.Frequency = 0;
 8009e70:	f8cd 900c 	str.w	r9, [sp, #12]
            newChannel.DrRange.Value = 0;
 8009e74:	f88d 9014 	strb.w	r9, [sp, #20]
            newChannel.Rx1Frequency = 0;
 8009e78:	f8cd 9010 	str.w	r9, [sp, #16]
            channelRemove.ChannelId = chanIdx;
 8009e7c:	f88d 4000 	strb.w	r4, [sp]
    for( uint8_t i = 0, chanIdx = IN865_NUMB_DEFAULT_CHANNELS; chanIdx < IN865_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8009e80:	3401      	adds	r4, #1
            RegionIN865ChannelsRemove( &channelRemove );
 8009e82:	4668      	mov	r0, sp
    for( uint8_t i = 0, chanIdx = IN865_NUMB_DEFAULT_CHANNELS; chanIdx < IN865_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8009e84:	b2e4      	uxtb	r4, r4
            RegionIN865ChannelsRemove( &channelRemove );
 8009e86:	f7ff ffc5 	bl	8009e14 <RegionIN865ChannelsRemove>
    for( uint8_t i = 0, chanIdx = IN865_NUMB_DEFAULT_CHANNELS; chanIdx < IN865_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8009e8a:	2c10      	cmp	r4, #16
 8009e8c:	f108 0803 	add.w	r8, r8, #3
 8009e90:	d1ec      	bne.n	8009e6c <RegionIN865ApplyCFList+0x24>
}
 8009e92:	b007      	add	sp, #28
 8009e94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8009e98:	686a      	ldr	r2, [r5, #4]
 8009e9a:	f812 3008 	ldrb.w	r3, [r2, r8]
 8009e9e:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8009ea0:	4442      	add	r2, r8
            RegionIN865ChannelAdd( &channelAdd );
 8009ea2:	a801      	add	r0, sp, #4
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8009ea4:	7851      	ldrb	r1, [r2, #1]
 8009ea6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009eaa:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8009eac:	7892      	ldrb	r2, [r2, #2]
            newChannel.Rx1Frequency = 0;
 8009eae:	f8cd 9010 	str.w	r9, [sp, #16]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8009eb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            newChannel.Frequency *= 100;
 8009eb6:	fb07 f303 	mul.w	r3, r7, r3
 8009eba:	9303      	str	r3, [sp, #12]
        if( newChannel.Frequency != 0 )
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d0dd      	beq.n	8009e7c <RegionIN865ApplyCFList+0x34>
            channelAdd.ChannelId = chanIdx;
 8009ec0:	f88d 4008 	strb.w	r4, [sp, #8]
    for( uint8_t i = 0, chanIdx = IN865_NUMB_DEFAULT_CHANNELS; chanIdx < IN865_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8009ec4:	3401      	adds	r4, #1
            channelAdd.NewChannel = &newChannel;
 8009ec6:	9601      	str	r6, [sp, #4]
    for( uint8_t i = 0, chanIdx = IN865_NUMB_DEFAULT_CHANNELS; chanIdx < IN865_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8009ec8:	b2e4      	uxtb	r4, r4
            RegionIN865ChannelAdd( &channelAdd );
 8009eca:	f7ff ff35 	bl	8009d38 <RegionIN865ChannelAdd>
    for( uint8_t i = 0, chanIdx = IN865_NUMB_DEFAULT_CHANNELS; chanIdx < IN865_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8009ece:	f108 0803 	add.w	r8, r8, #3
 8009ed2:	e7cb      	b.n	8009e6c <RegionIN865ApplyCFList+0x24>

08009ed4 <RegionIN865NewChannelReq>:
{
 8009ed4:	b500      	push	{lr}
    if( newChannelReq->NewChannel->Frequency == 0 )
 8009ed6:	6803      	ldr	r3, [r0, #0]
 8009ed8:	681a      	ldr	r2, [r3, #0]
{
 8009eda:	b083      	sub	sp, #12
    if( newChannelReq->NewChannel->Frequency == 0 )
 8009edc:	b952      	cbnz	r2, 8009ef4 <RegionIN865NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8009ede:	7903      	ldrb	r3, [r0, #4]
 8009ee0:	f88d 3000 	strb.w	r3, [sp]
        if( RegionIN865ChannelsRemove( &channelRemove ) == false )
 8009ee4:	4668      	mov	r0, sp
 8009ee6:	f7ff ff95 	bl	8009e14 <RegionIN865ChannelsRemove>
 8009eea:	b988      	cbnz	r0, 8009f10 <RegionIN865NewChannelReq+0x3c>
{
 8009eec:	2000      	movs	r0, #0
}
 8009eee:	b003      	add	sp, #12
 8009ef0:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8009ef4:	7902      	ldrb	r2, [r0, #4]
 8009ef6:	f88d 2004 	strb.w	r2, [sp, #4]
        switch( RegionIN865ChannelAdd( &channelAdd ) )
 8009efa:	4668      	mov	r0, sp
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8009efc:	9300      	str	r3, [sp, #0]
        switch( RegionIN865ChannelAdd( &channelAdd ) )
 8009efe:	f7ff ff1b 	bl	8009d38 <RegionIN865ChannelAdd>
 8009f02:	2806      	cmp	r0, #6
 8009f04:	d8f2      	bhi.n	8009eec <RegionIN865NewChannelReq+0x18>
 8009f06:	4b04      	ldr	r3, [pc, #16]	; (8009f18 <RegionIN865NewChannelReq+0x44>)
 8009f08:	5618      	ldrsb	r0, [r3, r0]
}
 8009f0a:	b003      	add	sp, #12
 8009f0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009f10:	2003      	movs	r0, #3
 8009f12:	b003      	add	sp, #12
 8009f14:	f85d fb04 	ldr.w	pc, [sp], #4
 8009f18:	0801567c 	.word	0x0801567c

08009f1c <RegionIN865ApplyDrOffset>:

uint8_t RegionIN865ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
    int8_t datarate = EffectiveRx1DrOffsetIN865[dr][drOffset];
 8009f1c:	4b05      	ldr	r3, [pc, #20]	; (8009f34 <RegionIN865ApplyDrOffset+0x18>)
 8009f1e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8009f22:	5698      	ldrsb	r0, [r3, r2]

    if( ( datarate < 0 ) || ( dr == DR_6 ) )
 8009f24:	2800      	cmp	r0, #0
 8009f26:	db03      	blt.n	8009f30 <RegionIN865ApplyDrOffset+0x14>
 8009f28:	2906      	cmp	r1, #6
 8009f2a:	d001      	beq.n	8009f30 <RegionIN865ApplyDrOffset+0x14>
 8009f2c:	b2c0      	uxtb	r0, r0
 8009f2e:	4770      	bx	lr
 8009f30:	2000      	movs	r0, #0
    {
        datarate = DR_0;
    }
    return datarate;
}
 8009f32:	4770      	bx	lr
 8009f34:	0801568c 	.word	0x0801568c

08009f38 <SecureElementInit>:
 * \retval key_id Converted LR1110 key id
 */
static lr1110_crypto_keys_idx_t convert_key_id_from_se_to_lr1110( KeyIdentifier_t key_id );

SecureElementStatus_t SecureElementInit( SecureElementNvmData_t* nvm )
{
 8009f38:	b570      	push	{r4, r5, r6, lr}
 8009f3a:	b0ea      	sub	sp, #424	; 0x1a8
    lr1110_crypto_status_t status = LR1110_CRYPTO_STATUS_ERROR;
    SecureElementNvmData_t seNvmInit =
 8009f3c:	ab02      	add	r3, sp, #8
{
 8009f3e:	4604      	mov	r4, r0
    SecureElementNvmData_t seNvmInit =
 8009f40:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    lr1110_crypto_status_t status = LR1110_CRYPTO_STATUS_ERROR;
 8009f44:	2506      	movs	r5, #6
    SecureElementNvmData_t seNvmInit =
 8009f46:	4618      	mov	r0, r3
 8009f48:	2100      	movs	r1, #0
    lr1110_crypto_status_t status = LR1110_CRYPTO_STATUS_ERROR;
 8009f4a:	f88d 5007 	strb.w	r5, [sp, #7]
    SecureElementNvmData_t seNvmInit =
 8009f4e:	f009 f819 	bl	8012f84 <memset>
 8009f52:	4d0e      	ldr	r5, [pc, #56]	; (8009f8c <SecureElementInit+0x54>)
        */
        .Pin = SECURE_ELEMENT_PIN,
    };

    // Initialize nvm pointer
    SeNvm = nvm;
 8009f54:	4e0e      	ldr	r6, [pc, #56]	; (8009f90 <SecureElementInit+0x58>)
    SecureElementNvmData_t seNvmInit =
 8009f56:	4603      	mov	r3, r0
 8009f58:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009f5c:	e883 0003 	stmia.w	r3, {r0, r1}
 8009f60:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 8009f64:	ad04      	add	r5, sp, #16
 8009f66:	e885 0003 	stmia.w	r5, {r0, r1}

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 8009f6a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8009f6e:	4619      	mov	r1, r3
 8009f70:	4620      	mov	r0, r4
    SeNvm = nvm;
 8009f72:	6034      	str	r4, [r6, #0]
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 8009f74:	f7f8 ff6a 	bl	8002e4c <memcpy1>

    lr1110_crypto_restore_from_flash( &LR1110, &status );
 8009f78:	4806      	ldr	r0, [pc, #24]	; (8009f94 <SecureElementInit+0x5c>)
 8009f7a:	f10d 0107 	add.w	r1, sp, #7
 8009f7e:	f000 fb65 	bl	800a64c <lr1110_crypto_restore_from_flash>
    LR1110SeHalGetUniqueId( SeNvm->DevEui );
#endif
#endif

    return ( SecureElementStatus_t ) status;
}
 8009f82:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8009f86:	b06a      	add	sp, #424	; 0x1a8
 8009f88:	bd70      	pop	{r4, r5, r6, pc}
 8009f8a:	bf00      	nop
 8009f8c:	0801445c 	.word	0x0801445c
 8009f90:	20000598 	.word	0x20000598
 8009f94:	20000a7c 	.word	0x20000a7c

08009f98 <SecureElementSetKey>:

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
    if( key == NULL )
 8009f98:	2900      	cmp	r1, #0
 8009f9a:	d037      	beq.n	800a00c <SecureElementSetKey+0x74>
{
 8009f9c:	b500      	push	{lr}
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t status = SECURE_ELEMENT_ERROR;

    if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
 8009f9e:	f080 0380 	eor.w	r3, r0, #128	; 0x80
{
 8009fa2:	b085      	sub	sp, #20
    SecureElementStatus_t status = SECURE_ELEMENT_ERROR;
 8009fa4:	2206      	movs	r2, #6
    if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
 8009fa6:	2b09      	cmp	r3, #9
    SecureElementStatus_t status = SECURE_ELEMENT_ERROR;
 8009fa8:	f88d 200f 	strb.w	r2, [sp, #15]
    if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
 8009fac:	d90e      	bls.n	8009fcc <SecureElementSetKey+0x34>

static lr1110_crypto_keys_idx_t convert_key_id_from_se_to_lr1110( KeyIdentifier_t key_id )
{
    lr1110_crypto_keys_idx_t id = LR1110_CRYPTO_KEYS_IDX_GP0;

    switch( key_id )
 8009fae:	288c      	cmp	r0, #140	; 0x8c
 8009fb0:	d912      	bls.n	8009fd8 <SecureElementSetKey+0x40>
    if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
 8009fb2:	221b      	movs	r2, #27
        lr1110_crypto_set_key( &LR1110, ( lr1110_crypto_status_t* ) &status, convert_key_id_from_se_to_lr1110( keyID ),
 8009fb4:	4816      	ldr	r0, [pc, #88]	; (800a010 <SecureElementSetKey+0x78>)
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	f10d 010f 	add.w	r1, sp, #15
 8009fbc:	f000 f992 	bl	800a2e4 <lr1110_crypto_set_key>
        if( status == SECURE_ELEMENT_SUCCESS )
 8009fc0:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8009fc4:	b1c0      	cbz	r0, 8009ff8 <SecureElementSetKey+0x60>
}
 8009fc6:	b005      	add	sp, #20
 8009fc8:	f85d fb04 	ldr.w	pc, [sp], #4
    if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
 8009fcc:	f240 2249 	movw	r2, #585	; 0x249
 8009fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8009fd4:	07db      	lsls	r3, r3, #31
 8009fd6:	d402      	bmi.n	8009fde <SecureElementSetKey+0x46>
 8009fd8:	4b0e      	ldr	r3, [pc, #56]	; (800a014 <SecureElementSetKey+0x7c>)
 8009fda:	5c1a      	ldrb	r2, [r3, r0]
 8009fdc:	e7ea      	b.n	8009fb4 <SecureElementSetKey+0x1c>
        lr1110_crypto_derive_and_store_key( &LR1110, ( lr1110_crypto_status_t* ) &status,
 8009fde:	4b0d      	ldr	r3, [pc, #52]	; (800a014 <SecureElementSetKey+0x7c>)
 8009fe0:	9100      	str	r1, [sp, #0]
 8009fe2:	5c1b      	ldrb	r3, [r3, r0]
 8009fe4:	480a      	ldr	r0, [pc, #40]	; (800a010 <SecureElementSetKey+0x78>)
 8009fe6:	f10d 010f 	add.w	r1, sp, #15
 8009fea:	220a      	movs	r2, #10
 8009fec:	f000 f9a4 	bl	800a338 <lr1110_crypto_derive_and_store_key>
        if( status == SECURE_ELEMENT_SUCCESS )
 8009ff0:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	d1e6      	bne.n	8009fc6 <SecureElementSetKey+0x2e>
            lr1110_crypto_store_to_flash( &LR1110, ( lr1110_crypto_status_t* ) &status );
 8009ff8:	4805      	ldr	r0, [pc, #20]	; (800a010 <SecureElementSetKey+0x78>)
 8009ffa:	f10d 010f 	add.w	r1, sp, #15
 8009ffe:	f000 fb0f 	bl	800a620 <lr1110_crypto_store_to_flash>
 800a002:	f89d 000f 	ldrb.w	r0, [sp, #15]
}
 800a006:	b005      	add	sp, #20
 800a008:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_NPE;
 800a00c:	2002      	movs	r0, #2
}
 800a00e:	4770      	bx	lr
 800a010:	20000a7c 	.word	0x20000a7c
 800a014:	080156d4 	.word	0x080156d4

0800a018 <SecureElementComputeAesCmac>:
{
 800a018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a01c:	b0c8      	sub	sp, #288	; 0x120
    SecureElementStatus_t status      = SECURE_ELEMENT_ERROR;
 800a01e:	2706      	movs	r7, #6
 800a020:	f88d 700f 	strb.w	r7, [sp, #15]
{
 800a024:	460d      	mov	r5, r1
 800a026:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 800a028:	4614      	mov	r4, r2
 800a02a:	4698      	mov	r8, r3
    if( micBxBuffer != NULL )
 800a02c:	b198      	cbz	r0, 800a056 <SecureElementComputeAesCmac+0x3e>
        memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800a02e:	4606      	mov	r6, r0
 800a030:	f44f 7288 	mov.w	r2, #272	; 0x110
 800a034:	a804      	add	r0, sp, #16
 800a036:	2100      	movs	r1, #0
 800a038:	f7f8 ff28 	bl	8002e8c <memset1>
        memcpy1( micBuff, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800a03c:	4631      	mov	r1, r6
 800a03e:	a804      	add	r0, sp, #16
 800a040:	2210      	movs	r2, #16
 800a042:	f7f8 ff03 	bl	8002e4c <memcpy1>
        memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), buffer, size );
 800a046:	4622      	mov	r2, r4
 800a048:	4629      	mov	r1, r5
 800a04a:	a808      	add	r0, sp, #32
 800a04c:	f7f8 fefe 	bl	8002e4c <memcpy1>
        localSize += MIC_BLOCK_BX_SIZE;
 800a050:	3410      	adds	r4, #16
        localbuffer = micBuff;
 800a052:	ad04      	add	r5, sp, #16
        localSize += MIC_BLOCK_BX_SIZE;
 800a054:	b2a4      	uxth	r4, r4
    switch( key_id )
 800a056:	f1b8 0f8c 	cmp.w	r8, #140	; 0x8c
 800a05a:	bf98      	it	ls
 800a05c:	4b09      	ldrls	r3, [pc, #36]	; (800a084 <SecureElementComputeAesCmac+0x6c>)
    lr1110_crypto_compute_aes_cmac( &LR1110, ( lr1110_crypto_status_t* ) &status,
 800a05e:	480a      	ldr	r0, [pc, #40]	; (800a088 <SecureElementComputeAesCmac+0x70>)
 800a060:	bf98      	it	ls
 800a062:	f813 2008 	ldrbls.w	r2, [r3, r8]
 800a066:	e9cd 4700 	strd	r4, r7, [sp]
        localbuffer = micBuff;
 800a06a:	bf88      	it	hi
 800a06c:	221b      	movhi	r2, #27
    lr1110_crypto_compute_aes_cmac( &LR1110, ( lr1110_crypto_status_t* ) &status,
 800a06e:	462b      	mov	r3, r5
 800a070:	f10d 010f 	add.w	r1, sp, #15
 800a074:	f000 f9f4 	bl	800a460 <lr1110_crypto_compute_aes_cmac>
}
 800a078:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800a07c:	b048      	add	sp, #288	; 0x120
 800a07e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a082:	bf00      	nop
 800a084:	080156d4 	.word	0x080156d4
 800a088:	20000a7c 	.word	0x20000a7c

0800a08c <SecureElementVerifyAesCmac>:
{
 800a08c:	b510      	push	{r4, lr}
 800a08e:	b086      	sub	sp, #24
    SecureElementStatus_t status = SECURE_ELEMENT_ERROR;
 800a090:	2406      	movs	r4, #6
{
 800a092:	9203      	str	r2, [sp, #12]
    SecureElementStatus_t status = SECURE_ELEMENT_ERROR;
 800a094:	f88d 4017 	strb.w	r4, [sp, #23]
    if( buffer == NULL )
 800a098:	b198      	cbz	r0, 800a0c2 <SecureElementVerifyAesCmac+0x36>
    switch( key_id )
 800a09a:	2b8c      	cmp	r3, #140	; 0x8c
 800a09c:	bf98      	it	ls
 800a09e:	4a0a      	ldrls	r2, [pc, #40]	; (800a0c8 <SecureElementVerifyAesCmac+0x3c>)
    lr1110_crypto_verify_aes_cmac( &LR1110, ( lr1110_crypto_status_t* ) &status,
 800a0a0:	9100      	str	r1, [sp, #0]
 800a0a2:	ac03      	add	r4, sp, #12
 800a0a4:	bf98      	it	ls
 800a0a6:	5cd2      	ldrbls	r2, [r2, r3]
 800a0a8:	9401      	str	r4, [sp, #4]
 800a0aa:	4603      	mov	r3, r0
    if( buffer == NULL )
 800a0ac:	bf88      	it	hi
 800a0ae:	221b      	movhi	r2, #27
    lr1110_crypto_verify_aes_cmac( &LR1110, ( lr1110_crypto_status_t* ) &status,
 800a0b0:	4806      	ldr	r0, [pc, #24]	; (800a0cc <SecureElementVerifyAesCmac+0x40>)
 800a0b2:	f10d 0117 	add.w	r1, sp, #23
 800a0b6:	f000 fa1b 	bl	800a4f0 <lr1110_crypto_verify_aes_cmac>
    return status;
 800a0ba:	f89d 0017 	ldrb.w	r0, [sp, #23]
}
 800a0be:	b006      	add	sp, #24
 800a0c0:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800a0c2:	2002      	movs	r0, #2
}
 800a0c4:	b006      	add	sp, #24
 800a0c6:	bd10      	pop	{r4, pc}
 800a0c8:	080156d4 	.word	0x080156d4
 800a0cc:	20000a7c 	.word	0x20000a7c

0800a0d0 <SecureElementAesEncrypt>:
{
 800a0d0:	b510      	push	{r4, lr}
 800a0d2:	b084      	sub	sp, #16
    SecureElementStatus_t status = SECURE_ELEMENT_ERROR;
 800a0d4:	2406      	movs	r4, #6
 800a0d6:	f88d 400f 	strb.w	r4, [sp, #15]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800a0da:	b198      	cbz	r0, 800a104 <SecureElementAesEncrypt+0x34>
 800a0dc:	b193      	cbz	r3, 800a104 <SecureElementAesEncrypt+0x34>
    switch( key_id )
 800a0de:	2a8c      	cmp	r2, #140	; 0x8c
 800a0e0:	bf98      	it	ls
 800a0e2:	4c0a      	ldrls	r4, [pc, #40]	; (800a10c <SecureElementAesEncrypt+0x3c>)
    lr1110_crypto_aes_encrypt_01( &LR1110, ( lr1110_crypto_status_t* ) &status,
 800a0e4:	e9cd 1300 	strd	r1, r3, [sp]
 800a0e8:	bf98      	it	ls
 800a0ea:	5ca2      	ldrbls	r2, [r4, r2]
 800a0ec:	4603      	mov	r3, r0
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800a0ee:	bf88      	it	hi
 800a0f0:	221b      	movhi	r2, #27
    lr1110_crypto_aes_encrypt_01( &LR1110, ( lr1110_crypto_status_t* ) &status,
 800a0f2:	4807      	ldr	r0, [pc, #28]	; (800a110 <SecureElementAesEncrypt+0x40>)
 800a0f4:	f10d 010f 	add.w	r1, sp, #15
 800a0f8:	f000 fa3c 	bl	800a574 <lr1110_crypto_aes_encrypt_01>
    return status;
 800a0fc:	f89d 000f 	ldrb.w	r0, [sp, #15]
}
 800a100:	b004      	add	sp, #16
 800a102:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800a104:	2002      	movs	r0, #2
}
 800a106:	b004      	add	sp, #16
 800a108:	bd10      	pop	{r4, pc}
 800a10a:	bf00      	nop
 800a10c:	080156d4 	.word	0x080156d4
 800a110:	20000a7c 	.word	0x20000a7c

0800a114 <SecureElementDeriveAndStoreKey>:
{
 800a114:	b510      	push	{r4, lr}
 800a116:	b084      	sub	sp, #16
    SecureElementStatus_t status = SECURE_ELEMENT_ERROR;
 800a118:	2406      	movs	r4, #6
 800a11a:	f88d 400f 	strb.w	r4, [sp, #15]
    if( input == NULL )
 800a11e:	b1d8      	cbz	r0, 800a158 <SecureElementDeriveAndStoreKey+0x44>
 800a120:	298c      	cmp	r1, #140	; 0x8c
 800a122:	4613      	mov	r3, r2
    switch( key_id )
 800a124:	bf98      	it	ls
 800a126:	4a0e      	ldrls	r2, [pc, #56]	; (800a160 <SecureElementDeriveAndStoreKey+0x4c>)
    lr1110_crypto_derive_and_store_key( &LR1110, ( lr1110_crypto_status_t* ) &status,
 800a128:	9000      	str	r0, [sp, #0]
 800a12a:	bf98      	it	ls
 800a12c:	5c52      	ldrbls	r2, [r2, r1]
 800a12e:	480d      	ldr	r0, [pc, #52]	; (800a164 <SecureElementDeriveAndStoreKey+0x50>)
    if( input == NULL )
 800a130:	bf88      	it	hi
 800a132:	221b      	movhi	r2, #27
    switch( key_id )
 800a134:	2b8c      	cmp	r3, #140	; 0x8c
 800a136:	bf96      	itet	ls
 800a138:	4909      	ldrls	r1, [pc, #36]	; (800a160 <SecureElementDeriveAndStoreKey+0x4c>)
    if( input == NULL )
 800a13a:	231b      	movhi	r3, #27
 800a13c:	5ccb      	ldrbls	r3, [r1, r3]
    lr1110_crypto_derive_and_store_key( &LR1110, ( lr1110_crypto_status_t* ) &status,
 800a13e:	f10d 010f 	add.w	r1, sp, #15
 800a142:	f000 f8f9 	bl	800a338 <lr1110_crypto_derive_and_store_key>
    lr1110_crypto_store_to_flash( &LR1110, ( lr1110_crypto_status_t* ) &status );
 800a146:	4807      	ldr	r0, [pc, #28]	; (800a164 <SecureElementDeriveAndStoreKey+0x50>)
 800a148:	f10d 010f 	add.w	r1, sp, #15
 800a14c:	f000 fa68 	bl	800a620 <lr1110_crypto_store_to_flash>
    return status;
 800a150:	f89d 000f 	ldrb.w	r0, [sp, #15]
}
 800a154:	b004      	add	sp, #16
 800a156:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800a158:	2002      	movs	r0, #2
}
 800a15a:	b004      	add	sp, #16
 800a15c:	bd10      	pop	{r4, pc}
 800a15e:	bf00      	nop
 800a160:	080156d4 	.word	0x080156d4
 800a164:	20000a7c 	.word	0x20000a7c

0800a168 <SecureElementProcessJoinAccept>:
{
 800a168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a16c:	b08b      	sub	sp, #44	; 0x2c
    SecureElementStatus_t status = SECURE_ELEMENT_ERROR;
 800a16e:	2406      	movs	r4, #6
{
 800a170:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800a174:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
    SecureElementStatus_t status = SECURE_ELEMENT_ERROR;
 800a178:	f88d 401b 	strb.w	r4, [sp, #27]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d060      	beq.n	800a242 <SecureElementProcessJoinAccept+0xda>
 800a180:	f1b9 0f00 	cmp.w	r9, #0
 800a184:	d05d      	beq.n	800a242 <SecureElementProcessJoinAccept+0xda>
 800a186:	4617      	mov	r7, r2
 800a188:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a18a:	2a00      	cmp	r2, #0
 800a18c:	d059      	beq.n	800a242 <SecureElementProcessJoinAccept+0xda>
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800a18e:	2d21      	cmp	r5, #33	; 0x21
 800a190:	d85b      	bhi.n	800a24a <SecureElementProcessJoinAccept+0xe2>
    if( joinReqType != JOIN_REQ )
 800a192:	28ff      	cmp	r0, #255	; 0xff
    lr1110_crypto_process_join_accept(
 800a194:	f105 35ff 	add.w	r5, r5, #4294967295
        encJoinAccept + 1, encJoinAcceptSize - 1, decJoinAccept + 1 );
 800a198:	f103 0401 	add.w	r4, r3, #1
    if( joinReqType != JOIN_REQ )
 800a19c:	bf0c      	ite	eq
 800a19e:	f04f 0b02 	moveq.w	fp, #2
 800a1a2:	f04f 0b04 	movne.w	fp, #4
    lr1110_crypto_process_join_accept(
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	4606      	mov	r6, r0
 800a1aa:	b2ed      	uxtb	r5, r5
 800a1ac:	a806      	add	r0, sp, #24
 800a1ae:	f109 0a01 	add.w	sl, r9, #1
 800a1b2:	e9cd 3000 	strd	r3, r0, [sp]
    uint8_t micHeader10[1] = { 0x20 };
 800a1b6:	f04f 0c20 	mov.w	ip, #32
    lr1110_crypto_process_join_accept(
 800a1ba:	2302      	movs	r3, #2
 800a1bc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a1c0:	4824      	ldr	r0, [pc, #144]	; (800a254 <SecureElementProcessJoinAccept+0xec>)
 800a1c2:	f8cd a010 	str.w	sl, [sp, #16]
 800a1c6:	4688      	mov	r8, r1
 800a1c8:	465a      	mov	r2, fp
 800a1ca:	f10d 011b 	add.w	r1, sp, #27
    uint8_t micHeader10[1] = { 0x20 };
 800a1ce:	f88d c018 	strb.w	ip, [sp, #24]
    lr1110_crypto_process_join_accept(
 800a1d2:	f000 f8d9 	bl	800a388 <lr1110_crypto_process_join_accept>
    if( status == SECURE_ELEMENT_SUCCESS )
 800a1d6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800a1da:	b92b      	cbnz	r3, 800a1e8 <SecureElementProcessJoinAccept+0x80>
        *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800a1dc:	f899 000b 	ldrb.w	r0, [r9, #11]
 800a1e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a1e2:	09c0      	lsrs	r0, r0, #7
 800a1e4:	7018      	strb	r0, [r3, #0]
        if( *versionMinor == 0 )
 800a1e6:	b348      	cbz	r0, 800a23c <SecureElementProcessJoinAccept+0xd4>
    uint8_t  micHeader11[JOIN_ACCEPT_MIC_COMPUTATION_OFFSET] = { 0 };
 800a1e8:	2300      	movs	r3, #0
    memcpyr( micHeader11 + bufItr, joinEui, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800a1ea:	4641      	mov	r1, r8
 800a1ec:	2208      	movs	r2, #8
 800a1ee:	f10d 001d 	add.w	r0, sp, #29
    uint8_t  micHeader11[JOIN_ACCEPT_MIC_COMPUTATION_OFFSET] = { 0 };
 800a1f2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a1f6:	9309      	str	r3, [sp, #36]	; 0x24
    micHeader11[bufItr++] = ( uint8_t ) joinReqType;
 800a1f8:	f88d 601c 	strb.w	r6, [sp, #28]
    memcpyr( micHeader11 + bufItr, joinEui, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800a1fc:	f7f8 fe34 	bl	8002e68 <memcpyr>
 800a200:	a807      	add	r0, sp, #28
    lr1110_crypto_process_join_accept(
 800a202:	2301      	movs	r3, #1
 800a204:	e9cd 3000 	strd	r3, r0, [sp]
 800a208:	e9cd 5a03 	strd	r5, sl, [sp, #12]
 800a20c:	4811      	ldr	r0, [pc, #68]	; (800a254 <SecureElementProcessJoinAccept+0xec>)
 800a20e:	9402      	str	r4, [sp, #8]
 800a210:	465a      	mov	r2, fp
 800a212:	f10d 011b 	add.w	r1, sp, #27
    micHeader11[bufItr++] = ( devNonce >> 8 ) & 0xFF;
 800a216:	0a3d      	lsrs	r5, r7, #8
    micHeader11[bufItr++] = 0x20;
 800a218:	2420      	movs	r4, #32
    lr1110_crypto_process_join_accept(
 800a21a:	2305      	movs	r3, #5
    micHeader11[bufItr++] = devNonce & 0xFF;
 800a21c:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
    micHeader11[bufItr++] = ( devNonce >> 8 ) & 0xFF;
 800a220:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
    micHeader11[bufItr++] = 0x20;
 800a224:	f88d 4027 	strb.w	r4, [sp, #39]	; 0x27
    lr1110_crypto_process_join_accept(
 800a228:	f000 f8ae 	bl	800a388 <lr1110_crypto_process_join_accept>
    if( status == SECURE_ELEMENT_SUCCESS )
 800a22c:	f89d 001b 	ldrb.w	r0, [sp, #27]
 800a230:	b920      	cbnz	r0, 800a23c <SecureElementProcessJoinAccept+0xd4>
        *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800a232:	f899 300b 	ldrb.w	r3, [r9, #11]
 800a236:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a238:	09db      	lsrs	r3, r3, #7
 800a23a:	7013      	strb	r3, [r2, #0]
}
 800a23c:	b00b      	add	sp, #44	; 0x2c
 800a23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800a242:	2002      	movs	r0, #2
}
 800a244:	b00b      	add	sp, #44	; 0x2c
 800a246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800a24a:	2005      	movs	r0, #5
}
 800a24c:	b00b      	add	sp, #44	; 0x2c
 800a24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a252:	bf00      	nop
 800a254:	20000a7c 	.word	0x20000a7c

0800a258 <SecureElementSetDevEui>:
    if( devEui == NULL )
 800a258:	b140      	cbz	r0, 800a26c <SecureElementSetDevEui+0x14>
{
 800a25a:	b508      	push	{r3, lr}
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800a25c:	4b04      	ldr	r3, [pc, #16]	; (800a270 <SecureElementSetDevEui+0x18>)
 800a25e:	4601      	mov	r1, r0
 800a260:	2208      	movs	r2, #8
 800a262:	6818      	ldr	r0, [r3, #0]
 800a264:	f7f8 fdf2 	bl	8002e4c <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800a268:	2000      	movs	r0, #0
}
 800a26a:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800a26c:	2002      	movs	r0, #2
}
 800a26e:	4770      	bx	lr
 800a270:	20000598 	.word	0x20000598

0800a274 <SecureElementGetDevEui>:
    return SeNvm->DevEui;
 800a274:	4b01      	ldr	r3, [pc, #4]	; (800a27c <SecureElementGetDevEui+0x8>)
}
 800a276:	6818      	ldr	r0, [r3, #0]
 800a278:	4770      	bx	lr
 800a27a:	bf00      	nop
 800a27c:	20000598 	.word	0x20000598

0800a280 <SecureElementSetJoinEui>:
    if( joinEui == NULL )
 800a280:	b150      	cbz	r0, 800a298 <SecureElementSetJoinEui+0x18>
{
 800a282:	b508      	push	{r3, lr}
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800a284:	4b05      	ldr	r3, [pc, #20]	; (800a29c <SecureElementSetJoinEui+0x1c>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4601      	mov	r1, r0
 800a28a:	2208      	movs	r2, #8
 800a28c:	f103 0008 	add.w	r0, r3, #8
 800a290:	f7f8 fddc 	bl	8002e4c <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800a294:	2000      	movs	r0, #0
}
 800a296:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800a298:	2002      	movs	r0, #2
}
 800a29a:	4770      	bx	lr
 800a29c:	20000598 	.word	0x20000598

0800a2a0 <SecureElementGetJoinEui>:
    return SeNvm->JoinEui;
 800a2a0:	4b01      	ldr	r3, [pc, #4]	; (800a2a8 <SecureElementGetJoinEui+0x8>)
 800a2a2:	6818      	ldr	r0, [r3, #0]
}
 800a2a4:	3008      	adds	r0, #8
 800a2a6:	4770      	bx	lr
 800a2a8:	20000598 	.word	0x20000598

0800a2ac <SecureElementSetPin>:
    if( pin == NULL )
 800a2ac:	b150      	cbz	r0, 800a2c4 <SecureElementSetPin+0x18>
{
 800a2ae:	b508      	push	{r3, lr}
    memcpy1( SeNvm->Pin, pin, SE_PIN_SIZE );
 800a2b0:	4b05      	ldr	r3, [pc, #20]	; (800a2c8 <SecureElementSetPin+0x1c>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4601      	mov	r1, r0
 800a2b6:	2204      	movs	r2, #4
 800a2b8:	f103 0010 	add.w	r0, r3, #16
 800a2bc:	f7f8 fdc6 	bl	8002e4c <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800a2c0:	2000      	movs	r0, #0
}
 800a2c2:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800a2c4:	2002      	movs	r0, #2
}
 800a2c6:	4770      	bx	lr
 800a2c8:	20000598 	.word	0x20000598

0800a2cc <SecureElementGetPin>:
    return SeNvm->Pin;
 800a2cc:	4b01      	ldr	r3, [pc, #4]	; (800a2d4 <SecureElementGetPin+0x8>)
 800a2ce:	6818      	ldr	r0, [r3, #0]
}
 800a2d0:	3010      	adds	r0, #16
 800a2d2:	4770      	bx	lr
 800a2d4:	20000598 	.word	0x20000598

0800a2d8 <my_lr1110_gnss_scan_done>:

#else

void my_lr1110_gnss_scan_done( void )
{
	gnss_state                   = GNSS_GET_RESULTS;
 800a2d8:	4b01      	ldr	r3, [pc, #4]	; (800a2e0 <my_lr1110_gnss_scan_done+0x8>)
 800a2da:	2201      	movs	r2, #1
 800a2dc:	701a      	strb	r2, [r3, #0]
}
 800a2de:	4770      	bx	lr
 800a2e0:	2000059c 	.word	0x2000059c

0800a2e4 <lr1110_crypto_set_key>:
    lr1110_hal_write( radio, cbuffer, LR1110_CRYPTO_SELECT_CMD_LENGTH, 0, 0 );
}

void lr1110_crypto_set_key( const void* radio, lr1110_crypto_status_t* status, const uint8_t key_id,
                            const lr1110_crypto_key_t key )
{
 800a2e4:	b570      	push	{r4, r5, r6, lr}
 800a2e6:	b088      	sub	sp, #32
    uint8_t cbuffer[LR1110_CRYPTO_SET_KEY_CMD_LENGTH] = { 0x00 };
 800a2e8:	2400      	movs	r4, #0
 800a2ea:	e9cd 4403 	strd	r4, r4, [sp, #12]
    uint8_t rbuffer[LR1110_CRYPTO_STATUS_LENGTH]      = { 0x00 };

    cbuffer[0] = ( uint8_t )( LR1110_CRYPTO_SET_KEY_OC >> 8 );
    cbuffer[1] = ( uint8_t )( LR1110_CRYPTO_SET_KEY_OC >> 0 );

    cbuffer[2] = key_id;
 800a2ee:	f88d 200e 	strb.w	r2, [sp, #14]
    cbuffer[0] = ( uint8_t )( LR1110_CRYPTO_SET_KEY_OC >> 8 );
 800a2f2:	f240 2205 	movw	r2, #517	; 0x205
    uint8_t cbuffer[LR1110_CRYPTO_SET_KEY_CMD_LENGTH] = { 0x00 };
 800a2f6:	e9cd 4405 	strd	r4, r4, [sp, #20]
    cbuffer[0] = ( uint8_t )( LR1110_CRYPTO_SET_KEY_OC >> 8 );
 800a2fa:	f8ad 200c 	strh.w	r2, [sp, #12]
{
 800a2fe:	460e      	mov	r6, r1
 800a300:	3b01      	subs	r3, #1
    uint8_t rbuffer[LR1110_CRYPTO_STATUS_LENGTH]      = { 0x00 };
 800a302:	f88d 4008 	strb.w	r4, [sp, #8]
    uint8_t cbuffer[LR1110_CRYPTO_SET_KEY_CMD_LENGTH] = { 0x00 };
 800a306:	f8cd 401b 	str.w	r4, [sp, #27]

    for( uint8_t index = 0; index < sizeof( lr1110_crypto_key_t ); index++ )
 800a30a:	f10d 020f 	add.w	r2, sp, #15
 800a30e:	f10d 051f 	add.w	r5, sp, #31
    {
        cbuffer[3 + index] = key[index];
 800a312:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800a316:	f802 4b01 	strb.w	r4, [r2], #1
    for( uint8_t index = 0; index < sizeof( lr1110_crypto_key_t ); index++ )
 800a31a:	42aa      	cmp	r2, r5
 800a31c:	d1f9      	bne.n	800a312 <lr1110_crypto_set_key+0x2e>
    }

    lr1110_hal_read( radio, cbuffer, LR1110_CRYPTO_SET_KEY_CMD_LENGTH, rbuffer, LR1110_CRYPTO_STATUS_LENGTH );
 800a31e:	2301      	movs	r3, #1
 800a320:	9300      	str	r3, [sp, #0]
 800a322:	2213      	movs	r2, #19
 800a324:	ab02      	add	r3, sp, #8
 800a326:	a903      	add	r1, sp, #12
 800a328:	f7f8 fa92 	bl	8002850 <lr1110_hal_read>

    *status = ( lr1110_crypto_status_t ) rbuffer[0];
 800a32c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a330:	7033      	strb	r3, [r6, #0]
}
 800a332:	b008      	add	sp, #32
 800a334:	bd70      	pop	{r4, r5, r6, pc}
 800a336:	bf00      	nop

0800a338 <lr1110_crypto_derive_and_store_key>:

void lr1110_crypto_derive_and_store_key( const void* radio, lr1110_crypto_status_t* status, const uint8_t src_key_id,
                                         const uint8_t dest_key_id, const lr1110_crypto_nonce_t nonce )
{
 800a338:	b570      	push	{r4, r5, r6, lr}
 800a33a:	b088      	sub	sp, #32
    uint8_t cbuffer[LR1110_CRYPTO_DERIVE_AND_STORE_KEY_CMD_LENGTH] = { 0x00 };
 800a33c:	2500      	movs	r5, #0
{
 800a33e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    uint8_t rbuffer[LR1110_CRYPTO_STATUS_LENGTH]                   = { 0x00 };

    cbuffer[0] = ( uint8_t )( LR1110_CRYPTO_DERIVE_AND_STORE_KEY_OC >> 8 );
    cbuffer[1] = ( uint8_t )( LR1110_CRYPTO_DERIVE_AND_STORE_KEY_OC >> 0 );

    cbuffer[2] = src_key_id;
 800a340:	f88d 200e 	strb.w	r2, [sp, #14]
{
 800a344:	460e      	mov	r6, r1
    cbuffer[0] = ( uint8_t )( LR1110_CRYPTO_DERIVE_AND_STORE_KEY_OC >> 8 );
 800a346:	f240 3105 	movw	r1, #773	; 0x305
    uint8_t cbuffer[LR1110_CRYPTO_DERIVE_AND_STORE_KEY_CMD_LENGTH] = { 0x00 };
 800a34a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a34e:	e9cd 5506 	strd	r5, r5, [sp, #24]
    cbuffer[3] = dest_key_id;
 800a352:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8_t rbuffer[LR1110_CRYPTO_STATUS_LENGTH]                   = { 0x00 };
 800a356:	f88d 5008 	strb.w	r5, [sp, #8]
    cbuffer[1] = ( uint8_t )( LR1110_CRYPTO_DERIVE_AND_STORE_KEY_OC >> 0 );
 800a35a:	1e62      	subs	r2, r4, #1
 800a35c:	ab04      	add	r3, sp, #16
    cbuffer[0] = ( uint8_t )( LR1110_CRYPTO_DERIVE_AND_STORE_KEY_OC >> 8 );
 800a35e:	f8ad 100c 	strh.w	r1, [sp, #12]

    for( uint8_t index = 0; index < LR1110_CRYPTO_NONCE_LENGTH; index++ )
 800a362:	ad08      	add	r5, sp, #32
    {
        cbuffer[4 + index] = nonce[index];
 800a364:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 800a368:	f803 4b01 	strb.w	r4, [r3], #1
    for( uint8_t index = 0; index < LR1110_CRYPTO_NONCE_LENGTH; index++ )
 800a36c:	42ab      	cmp	r3, r5
 800a36e:	d1f9      	bne.n	800a364 <lr1110_crypto_derive_and_store_key+0x2c>
    }

    lr1110_hal_read( radio, cbuffer, LR1110_CRYPTO_DERIVE_AND_STORE_KEY_CMD_LENGTH, rbuffer,
 800a370:	2301      	movs	r3, #1
 800a372:	9300      	str	r3, [sp, #0]
 800a374:	2214      	movs	r2, #20
 800a376:	ab02      	add	r3, sp, #8
 800a378:	a903      	add	r1, sp, #12
 800a37a:	f7f8 fa69 	bl	8002850 <lr1110_hal_read>
                     LR1110_CRYPTO_STATUS_LENGTH );

    *status = ( lr1110_crypto_status_t ) rbuffer[0];
 800a37e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a382:	7033      	strb	r3, [r6, #0]
}
 800a384:	b008      	add	sp, #32
 800a386:	bd70      	pop	{r4, r5, r6, pc}

0800a388 <lr1110_crypto_process_join_accept>:

void lr1110_crypto_process_join_accept( const void* radio, lr1110_crypto_status_t* status, const uint8_t dec_key_id,
                                        const uint8_t ver_key_id, const lr1110_crypto_lorawan_version_t lorawan_version,
                                        const uint8_t* header, const uint8_t* data_in, const uint8_t length,
                                        uint8_t* data_out )
{
 800a388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a38c:	b099      	sub	sp, #100	; 0x64
    uint8_t cbuffer[LR1110_CRYPTO_PROCESS_JOIN_ACCEPT_CMD_LENGTH] = { 0x00 };
 800a38e:	2400      	movs	r4, #0
{
 800a390:	f89d b088 	ldrb.w	fp, [sp, #136]	; 0x88
 800a394:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800a396:	f89d 7094 	ldrb.w	r7, [sp, #148]	; 0x94
 800a39a:	4682      	mov	sl, r0
 800a39c:	4689      	mov	r9, r1
 800a39e:	4615      	mov	r5, r2
    uint8_t cbuffer[LR1110_CRYPTO_PROCESS_JOIN_ACCEPT_CMD_LENGTH] = { 0x00 };
 800a3a0:	4621      	mov	r1, r4
 800a3a2:	222d      	movs	r2, #45	; 0x2d
 800a3a4:	a80c      	add	r0, sp, #48	; 0x30
{
 800a3a6:	4698      	mov	r8, r3
    uint8_t cbuffer[LR1110_CRYPTO_PROCESS_JOIN_ACCEPT_CMD_LENGTH] = { 0x00 };
 800a3a8:	f008 fdec 	bl	8012f84 <memset>
    uint8_t rbuffer[LR1110_CRYPTO_STATUS_LENGTH + 32]             = { 0x00 };
 800a3ac:	4621      	mov	r1, r4
 800a3ae:	221d      	movs	r2, #29
 800a3b0:	a803      	add	r0, sp, #12
 800a3b2:	9402      	str	r4, [sp, #8]
 800a3b4:	f008 fde6 	bl	8012f84 <memset>
    uint8_t header_length                                         = ( lorawan_version == 0 ) ? 1 : 12;
 800a3b8:	f1bb 0f00 	cmp.w	fp, #0
 800a3bc:	d03e      	beq.n	800a43c <lr1110_crypto_process_join_accept+0xb4>
 800a3be:	220c      	movs	r2, #12
 800a3c0:	4611      	mov	r1, r2

    cbuffer[0] = ( uint8_t )( LR1110_CRYPTO_PROCESS_JOIN_ACCEPT_OC >> 8 );
    cbuffer[1] = ( uint8_t )( LR1110_CRYPTO_PROCESS_JOIN_ACCEPT_OC >> 0 );
 800a3c2:	9c23      	ldr	r4, [sp, #140]	; 0x8c

    cbuffer[2] = dec_key_id;
 800a3c4:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
    cbuffer[0] = ( uint8_t )( LR1110_CRYPTO_PROCESS_JOIN_ACCEPT_OC >> 8 );
 800a3c8:	f240 4005 	movw	r0, #1029	; 0x405
    cbuffer[3] = ver_key_id;
 800a3cc:	f88d 802f 	strb.w	r8, [sp, #47]	; 0x2f
    cbuffer[4] = ( uint8_t ) lorawan_version;
 800a3d0:	f88d b030 	strb.w	fp, [sp, #48]	; 0x30
 800a3d4:	ab0c      	add	r3, sp, #48	; 0x30
    cbuffer[0] = ( uint8_t )( LR1110_CRYPTO_PROCESS_JOIN_ACCEPT_OC >> 8 );
 800a3d6:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c

    for( uint8_t index = 0; index < header_length; index++ )
 800a3da:	eb04 0c01 	add.w	ip, r4, r1
    {
        cbuffer[5 + index] = header[index];
 800a3de:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a3e2:	f803 0f01 	strb.w	r0, [r3, #1]!
    for( uint8_t index = 0; index < header_length; index++ )
 800a3e6:	4564      	cmp	r4, ip
 800a3e8:	d1f9      	bne.n	800a3de <lr1110_crypto_process_join_accept+0x56>
    }

    for( uint8_t index = 0; index < length; index++ )
 800a3ea:	b357      	cbz	r7, 800a442 <lr1110_crypto_process_join_accept+0xba>
 800a3ec:	1e7c      	subs	r4, r7, #1
 800a3ee:	3104      	adds	r1, #4
 800a3f0:	b2e4      	uxtb	r4, r4
 800a3f2:	a80b      	add	r0, sp, #44	; 0x2c
 800a3f4:	eb06 0c04 	add.w	ip, r6, r4
 800a3f8:	1e73      	subs	r3, r6, #1
 800a3fa:	4401      	add	r1, r0
    {
        cbuffer[5 + header_length + index] = data_in[index];
 800a3fc:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800a400:	f801 0f01 	strb.w	r0, [r1, #1]!
    for( uint8_t index = 0; index < length; index++ )
 800a404:	4563      	cmp	r3, ip
 800a406:	d1f9      	bne.n	800a3fc <lr1110_crypto_process_join_accept+0x74>
    }

    lr1110_hal_read( radio, cbuffer, 2 + 3 + header_length + length, rbuffer, 1 + length );
 800a408:	1d7e      	adds	r6, r7, #5
 800a40a:	3701      	adds	r7, #1
 800a40c:	ab02      	add	r3, sp, #8
 800a40e:	4432      	add	r2, r6
 800a410:	a90b      	add	r1, sp, #44	; 0x2c
 800a412:	4650      	mov	r0, sl
 800a414:	9700      	str	r7, [sp, #0]
 800a416:	f7f8 fa1b 	bl	8002850 <lr1110_hal_read>

    *status = ( lr1110_crypto_status_t ) rbuffer[0];
 800a41a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a41e:	f889 3000 	strb.w	r3, [r9]

    for( uint8_t index = 0; index < length; index++ )
 800a422:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a424:	aa02      	add	r2, sp, #8
 800a426:	441c      	add	r4, r3
 800a428:	3b01      	subs	r3, #1
    {
        data_out[index] = rbuffer[1 + index];
 800a42a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800a42e:	f803 1f01 	strb.w	r1, [r3, #1]!
    for( uint8_t index = 0; index < length; index++ )
 800a432:	42a3      	cmp	r3, r4
 800a434:	d1f9      	bne.n	800a42a <lr1110_crypto_process_join_accept+0xa2>
    }
}
 800a436:	b019      	add	sp, #100	; 0x64
 800a438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a43c:	2201      	movs	r2, #1
    uint8_t header_length                                         = ( lorawan_version == 0 ) ? 1 : 12;
 800a43e:	4611      	mov	r1, r2
 800a440:	e7bf      	b.n	800a3c2 <lr1110_crypto_process_join_accept+0x3a>
    lr1110_hal_read( radio, cbuffer, 2 + 3 + header_length + length, rbuffer, 1 + length );
 800a442:	2301      	movs	r3, #1
 800a444:	9300      	str	r3, [sp, #0]
 800a446:	3205      	adds	r2, #5
 800a448:	ab02      	add	r3, sp, #8
 800a44a:	4650      	mov	r0, sl
 800a44c:	a90b      	add	r1, sp, #44	; 0x2c
 800a44e:	f7f8 f9ff 	bl	8002850 <lr1110_hal_read>
    *status = ( lr1110_crypto_status_t ) rbuffer[0];
 800a452:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a456:	f889 3000 	strb.w	r3, [r9]
}
 800a45a:	b019      	add	sp, #100	; 0x64
 800a45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a460 <lr1110_crypto_compute_aes_cmac>:

void lr1110_crypto_compute_aes_cmac( const void* radio, lr1110_crypto_status_t* status, const uint8_t key_id,
                                     const uint8_t* data, const uint16_t length, lr1110_crypto_mic_t mic )
{
 800a460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a464:	b0c6      	sub	sp, #280	; 0x118
    uint8_t cbuffer[LR1110_CRYPTO_COMPUTE_AES_CMAC_CMD_LENGTH]              = { 0x00 };
 800a466:	2500      	movs	r5, #0
{
 800a468:	4692      	mov	sl, r2
 800a46a:	f8bd 6138 	ldrh.w	r6, [sp, #312]	; 0x138
 800a46e:	f8dd 813c 	ldr.w	r8, [sp, #316]	; 0x13c
    uint8_t cbuffer[LR1110_CRYPTO_COMPUTE_AES_CMAC_CMD_LENGTH]              = { 0x00 };
 800a472:	9505      	str	r5, [sp, #20]
{
 800a474:	4681      	mov	r9, r0
 800a476:	460f      	mov	r7, r1
    uint8_t cbuffer[LR1110_CRYPTO_COMPUTE_AES_CMAC_CMD_LENGTH]              = { 0x00 };
 800a478:	22ff      	movs	r2, #255	; 0xff
 800a47a:	4629      	mov	r1, r5
 800a47c:	a806      	add	r0, sp, #24
{
 800a47e:	461c      	mov	r4, r3
    uint8_t cbuffer[LR1110_CRYPTO_COMPUTE_AES_CMAC_CMD_LENGTH]              = { 0x00 };
 800a480:	f008 fd80 	bl	8012f84 <memset>
    uint8_t rbuffer[LR1110_CRYPTO_STATUS_LENGTH + LR1110_CRYPTO_MIC_LENGTH] = { 0x00 };

    cbuffer[0] = ( uint8_t )( LR1110_CRYPTO_COMPUTE_AES_CMAC_OC >> 8 );
 800a484:	f240 5305 	movw	r3, #1285	; 0x505
    cbuffer[1] = ( uint8_t )( LR1110_CRYPTO_COMPUTE_AES_CMAC_OC >> 0 );

    cbuffer[2] = key_id;
 800a488:	f88d a016 	strb.w	sl, [sp, #22]
    cbuffer[0] = ( uint8_t )( LR1110_CRYPTO_COMPUTE_AES_CMAC_OC >> 8 );
 800a48c:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8_t rbuffer[LR1110_CRYPTO_STATUS_LENGTH + LR1110_CRYPTO_MIC_LENGTH] = { 0x00 };
 800a490:	9503      	str	r5, [sp, #12]
 800a492:	f88d 5010 	strb.w	r5, [sp, #16]

    for( uint16_t index = 0; index < length; index++ )
 800a496:	b15e      	cbz	r6, 800a4b0 <lr1110_crypto_compute_aes_cmac+0x50>
 800a498:	1e75      	subs	r5, r6, #1
 800a49a:	fa14 f585 	uxtah	r5, r4, r5
 800a49e:	1e63      	subs	r3, r4, #1
 800a4a0:	f10d 0216 	add.w	r2, sp, #22
    {
        cbuffer[3 + index] = data[index];
 800a4a4:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800a4a8:	f802 4f01 	strb.w	r4, [r2, #1]!
    for( uint16_t index = 0; index < length; index++ )
 800a4ac:	42ab      	cmp	r3, r5
 800a4ae:	d1f9      	bne.n	800a4a4 <lr1110_crypto_compute_aes_cmac+0x44>
    }

    lr1110_hal_read( radio, cbuffer, 3 + length, rbuffer, LR1110_CRYPTO_STATUS_LENGTH + LR1110_CRYPTO_MIC_LENGTH );
 800a4b0:	2305      	movs	r3, #5
 800a4b2:	1cf2      	adds	r2, r6, #3
 800a4b4:	9300      	str	r3, [sp, #0]
 800a4b6:	b292      	uxth	r2, r2
 800a4b8:	ab03      	add	r3, sp, #12
 800a4ba:	a905      	add	r1, sp, #20
 800a4bc:	4648      	mov	r0, r9
 800a4be:	f7f8 f9c7 	bl	8002850 <lr1110_hal_read>

    *status = ( lr1110_crypto_status_t ) rbuffer[0];
 800a4c2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800a4c6:	703b      	strb	r3, [r7, #0]

    if( *status == LR1110_CRYPTO_STATUS_SUCCESS )
 800a4c8:	b97b      	cbnz	r3, 800a4ea <lr1110_crypto_compute_aes_cmac+0x8a>
    {
        for( uint8_t index = 0; index < LR1110_CRYPTO_MIC_LENGTH; index++ )
        {
            mic[index] = rbuffer[1 + index];
 800a4ca:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800a4ce:	f89d 100e 	ldrb.w	r1, [sp, #14]
 800a4d2:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800a4d6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800a4da:	f888 0000 	strb.w	r0, [r8]
 800a4de:	f888 1001 	strb.w	r1, [r8, #1]
 800a4e2:	f888 2002 	strb.w	r2, [r8, #2]
 800a4e6:	f888 3003 	strb.w	r3, [r8, #3]
        }
    }
}
 800a4ea:	b046      	add	sp, #280	; 0x118
 800a4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a4f0 <lr1110_crypto_verify_aes_cmac>:

void lr1110_crypto_verify_aes_cmac( const void* radio, lr1110_crypto_status_t* status, const uint8_t key_id,
                                    const uint8_t* data, const uint16_t length, const lr1110_crypto_mic_t mic )
{
 800a4f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4f4:	b0c6      	sub	sp, #280	; 0x118
    uint8_t cbuffer[LR1110_CRYPTO_VERIFY_AES_CMAC_CMD_LENGTH] = { 0x00 };
 800a4f6:	f04f 0a00 	mov.w	sl, #0
{
 800a4fa:	9d4f      	ldr	r5, [sp, #316]	; 0x13c
 800a4fc:	f8bd 6138 	ldrh.w	r6, [sp, #312]	; 0x138
 800a500:	4691      	mov	r9, r2
 800a502:	4680      	mov	r8, r0
    uint8_t cbuffer[LR1110_CRYPTO_VERIFY_AES_CMAC_CMD_LENGTH] = { 0x00 };
 800a504:	f240 1203 	movw	r2, #259	; 0x103
{
 800a508:	460f      	mov	r7, r1
    uint8_t cbuffer[LR1110_CRYPTO_VERIFY_AES_CMAC_CMD_LENGTH] = { 0x00 };
 800a50a:	a805      	add	r0, sp, #20
 800a50c:	4651      	mov	r1, sl
{
 800a50e:	461c      	mov	r4, r3
    uint8_t cbuffer[LR1110_CRYPTO_VERIFY_AES_CMAC_CMD_LENGTH] = { 0x00 };
 800a510:	f008 fd38 	bl	8012f84 <memset>

    cbuffer[2] = key_id;

    for( uint8_t index = 0; index < LR1110_CRYPTO_MIC_LENGTH; index++ )
    {
        cbuffer[3 + index] = mic[index];
 800a514:	7828      	ldrb	r0, [r5, #0]
 800a516:	7869      	ldrb	r1, [r5, #1]
 800a518:	78aa      	ldrb	r2, [r5, #2]
 800a51a:	78eb      	ldrb	r3, [r5, #3]
    cbuffer[2] = key_id;
 800a51c:	f88d 9012 	strb.w	r9, [sp, #18]
    cbuffer[0] = ( uint8_t )( LR1110_CRYPTO_VERIFY_AES_CMAC_OC >> 8 );
 800a520:	f240 6c05 	movw	ip, #1541	; 0x605
    uint8_t rbuffer[LR1110_CRYPTO_STATUS_LENGTH]              = { 0x00 };
 800a524:	f88d a00c 	strb.w	sl, [sp, #12]
    cbuffer[0] = ( uint8_t )( LR1110_CRYPTO_VERIFY_AES_CMAC_OC >> 8 );
 800a528:	f8ad c010 	strh.w	ip, [sp, #16]
        cbuffer[3 + index] = mic[index];
 800a52c:	f88d 0013 	strb.w	r0, [sp, #19]
 800a530:	f88d 1014 	strb.w	r1, [sp, #20]
 800a534:	f88d 2015 	strb.w	r2, [sp, #21]
 800a538:	f88d 3016 	strb.w	r3, [sp, #22]
    }

    for( uint16_t index = 0; index < length; index++ )
 800a53c:	b15e      	cbz	r6, 800a556 <lr1110_crypto_verify_aes_cmac+0x66>
 800a53e:	1e75      	subs	r5, r6, #1
 800a540:	fa14 f585 	uxtah	r5, r4, r5
 800a544:	1e63      	subs	r3, r4, #1
 800a546:	f10d 0216 	add.w	r2, sp, #22
    {
        cbuffer[3 + LR1110_CRYPTO_MIC_LENGTH + index] = data[index];
 800a54a:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800a54e:	f802 4f01 	strb.w	r4, [r2, #1]!
    for( uint16_t index = 0; index < length; index++ )
 800a552:	42ab      	cmp	r3, r5
 800a554:	d1f9      	bne.n	800a54a <lr1110_crypto_verify_aes_cmac+0x5a>
    }

    lr1110_hal_read( radio, cbuffer, 3 + LR1110_CRYPTO_MIC_LENGTH + length, rbuffer, LR1110_CRYPTO_STATUS_LENGTH );
 800a556:	1df2      	adds	r2, r6, #7
 800a558:	2301      	movs	r3, #1
 800a55a:	9300      	str	r3, [sp, #0]
 800a55c:	b292      	uxth	r2, r2
 800a55e:	ab03      	add	r3, sp, #12
 800a560:	a904      	add	r1, sp, #16
 800a562:	4640      	mov	r0, r8
 800a564:	f7f8 f974 	bl	8002850 <lr1110_hal_read>

    *status = ( lr1110_crypto_status_t ) rbuffer[0];
 800a568:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800a56c:	703b      	strb	r3, [r7, #0]
}
 800a56e:	b046      	add	sp, #280	; 0x118
 800a570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a574 <lr1110_crypto_aes_encrypt_01>:

void lr1110_crypto_aes_encrypt_01( const void* radio, lr1110_crypto_status_t* status, const uint8_t key_id,
                                   const uint8_t* data, const uint16_t length, uint8_t* result )
{
 800a574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint8_t cbuffer[LR1110_CRYPTO_AES_ENCRYPT_CMD_LENGTH]                        = { 0x00 };
 800a578:	2600      	movs	r6, #0
{
 800a57a:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800a57e:	4692      	mov	sl, r2
 800a580:	4681      	mov	r9, r0
    uint8_t cbuffer[LR1110_CRYPTO_AES_ENCRYPT_CMD_LENGTH]                        = { 0x00 };
 800a582:	22ff      	movs	r2, #255	; 0xff
{
 800a584:	4688      	mov	r8, r1
    uint8_t cbuffer[LR1110_CRYPTO_AES_ENCRYPT_CMD_LENGTH]                        = { 0x00 };
 800a586:	a844      	add	r0, sp, #272	; 0x110
 800a588:	4631      	mov	r1, r6
{
 800a58a:	461c      	mov	r4, r3
 800a58c:	f8bd 7230 	ldrh.w	r7, [sp, #560]	; 0x230
 800a590:	9d8d      	ldr	r5, [sp, #564]	; 0x234
    uint8_t cbuffer[LR1110_CRYPTO_AES_ENCRYPT_CMD_LENGTH]                        = { 0x00 };
 800a592:	9643      	str	r6, [sp, #268]	; 0x10c
 800a594:	f008 fcf6 	bl	8012f84 <memset>
    uint8_t rbuffer[LR1110_CRYPTO_STATUS_LENGTH + LR1110_CRYPTO_DATA_MAX_LENGTH] = { 0x00 };
 800a598:	4631      	mov	r1, r6
 800a59a:	22fd      	movs	r2, #253	; 0xfd
 800a59c:	a803      	add	r0, sp, #12
 800a59e:	9602      	str	r6, [sp, #8]
 800a5a0:	f008 fcf0 	bl	8012f84 <memset>

    cbuffer[0] = ( uint8_t )( LR1110_CRYPTO_ENCRYPT_AES_01_OC >> 8 );
 800a5a4:	f240 7305 	movw	r3, #1797	; 0x705
    cbuffer[1] = ( uint8_t )( LR1110_CRYPTO_ENCRYPT_AES_01_OC >> 0 );

    cbuffer[2] = key_id;
 800a5a8:	f88d a10e 	strb.w	sl, [sp, #270]	; 0x10e
    cbuffer[0] = ( uint8_t )( LR1110_CRYPTO_ENCRYPT_AES_01_OC >> 8 );
 800a5ac:	f8ad 310c 	strh.w	r3, [sp, #268]	; 0x10c

    for( uint16_t index = 0; index < length; index++ )
 800a5b0:	b337      	cbz	r7, 800a600 <lr1110_crypto_aes_encrypt_01+0x8c>
 800a5b2:	1e78      	subs	r0, r7, #1
 800a5b4:	b286      	uxth	r6, r0
 800a5b6:	19a1      	adds	r1, r4, r6
 800a5b8:	1e63      	subs	r3, r4, #1
 800a5ba:	f50d 7287 	add.w	r2, sp, #270	; 0x10e
    {
        cbuffer[3 + index] = data[index];
 800a5be:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800a5c2:	f802 4f01 	strb.w	r4, [r2, #1]!
    for( uint16_t index = 0; index < length; index++ )
 800a5c6:	428b      	cmp	r3, r1
 800a5c8:	d1f9      	bne.n	800a5be <lr1110_crypto_aes_encrypt_01+0x4a>
    }

    lr1110_hal_read( radio, cbuffer, 3 + length, rbuffer, LR1110_CRYPTO_STATUS_LENGTH + length );
 800a5ca:	1c7b      	adds	r3, r7, #1
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	1cfa      	adds	r2, r7, #3
 800a5d0:	9300      	str	r3, [sp, #0]
 800a5d2:	b292      	uxth	r2, r2
 800a5d4:	ab02      	add	r3, sp, #8
 800a5d6:	a943      	add	r1, sp, #268	; 0x10c
 800a5d8:	4648      	mov	r0, r9
 800a5da:	f7f8 f939 	bl	8002850 <lr1110_hal_read>

    *status = ( lr1110_crypto_status_t ) rbuffer[0];
 800a5de:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a5e2:	f888 3000 	strb.w	r3, [r8]

    for( uint16_t index = 0; index < length; index++ )
 800a5e6:	19a8      	adds	r0, r5, r6
 800a5e8:	1e6b      	subs	r3, r5, #1
 800a5ea:	aa02      	add	r2, sp, #8
    {
        result[index] = rbuffer[1 + index];
 800a5ec:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800a5f0:	f803 1f01 	strb.w	r1, [r3, #1]!
    for( uint16_t index = 0; index < length; index++ )
 800a5f4:	4298      	cmp	r0, r3
 800a5f6:	d1f9      	bne.n	800a5ec <lr1110_crypto_aes_encrypt_01+0x78>
    }
}
 800a5f8:	f50d 7d04 	add.w	sp, sp, #528	; 0x210
 800a5fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lr1110_hal_read( radio, cbuffer, 3 + length, rbuffer, LR1110_CRYPTO_STATUS_LENGTH + length );
 800a600:	2301      	movs	r3, #1
 800a602:	9300      	str	r3, [sp, #0]
 800a604:	a943      	add	r1, sp, #268	; 0x10c
 800a606:	ab02      	add	r3, sp, #8
 800a608:	4648      	mov	r0, r9
 800a60a:	2203      	movs	r2, #3
 800a60c:	f7f8 f920 	bl	8002850 <lr1110_hal_read>
    *status = ( lr1110_crypto_status_t ) rbuffer[0];
 800a610:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a614:	f888 3000 	strb.w	r3, [r8]
}
 800a618:	f50d 7d04 	add.w	sp, sp, #528	; 0x210
 800a61c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a620 <lr1110_crypto_store_to_flash>:
        result[index] = rbuffer[1 + index];
    }
}

void lr1110_crypto_store_to_flash( const void* radio, lr1110_crypto_status_t* status )
{
 800a620:	b530      	push	{r4, r5, lr}
 800a622:	b085      	sub	sp, #20
 800a624:	460c      	mov	r4, r1
    uint8_t rbuffer[LR1110_CRYPTO_STATUS_LENGTH]             = { 0x00 };

    cbuffer[0] = ( uint8_t )( LR1110_CRYPTO_STORE_TO_FLASH_OC >> 8 );
    cbuffer[1] = ( uint8_t )( LR1110_CRYPTO_STORE_TO_FLASH_OC >> 0 );

    lr1110_hal_read( radio, cbuffer, LR1110_CRYPTO_STORE_TO_FLASH_CMD_LENGTH, rbuffer, LR1110_CRYPTO_STATUS_LENGTH );
 800a626:	2301      	movs	r3, #1
    uint8_t rbuffer[LR1110_CRYPTO_STATUS_LENGTH]             = { 0x00 };
 800a628:	2100      	movs	r1, #0
    lr1110_hal_read( radio, cbuffer, LR1110_CRYPTO_STORE_TO_FLASH_CMD_LENGTH, rbuffer, LR1110_CRYPTO_STATUS_LENGTH );
 800a62a:	9300      	str	r3, [sp, #0]
    uint8_t rbuffer[LR1110_CRYPTO_STATUS_LENGTH]             = { 0x00 };
 800a62c:	f88d 1008 	strb.w	r1, [sp, #8]
    lr1110_hal_read( radio, cbuffer, LR1110_CRYPTO_STORE_TO_FLASH_CMD_LENGTH, rbuffer, LR1110_CRYPTO_STATUS_LENGTH );
 800a630:	ab02      	add	r3, sp, #8
    cbuffer[0] = ( uint8_t )( LR1110_CRYPTO_STORE_TO_FLASH_OC >> 8 );
 800a632:	f640 2505 	movw	r5, #2565	; 0xa05
    lr1110_hal_read( radio, cbuffer, LR1110_CRYPTO_STORE_TO_FLASH_CMD_LENGTH, rbuffer, LR1110_CRYPTO_STATUS_LENGTH );
 800a636:	2202      	movs	r2, #2
 800a638:	a903      	add	r1, sp, #12
    cbuffer[0] = ( uint8_t )( LR1110_CRYPTO_STORE_TO_FLASH_OC >> 8 );
 800a63a:	f8ad 500c 	strh.w	r5, [sp, #12]
    lr1110_hal_read( radio, cbuffer, LR1110_CRYPTO_STORE_TO_FLASH_CMD_LENGTH, rbuffer, LR1110_CRYPTO_STATUS_LENGTH );
 800a63e:	f7f8 f907 	bl	8002850 <lr1110_hal_read>

    *status = ( lr1110_crypto_status_t ) rbuffer[0];
 800a642:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a646:	7023      	strb	r3, [r4, #0]
}
 800a648:	b005      	add	sp, #20
 800a64a:	bd30      	pop	{r4, r5, pc}

0800a64c <lr1110_crypto_restore_from_flash>:

void lr1110_crypto_restore_from_flash( const void* radio, lr1110_crypto_status_t* status )
{
 800a64c:	b530      	push	{r4, r5, lr}
 800a64e:	b085      	sub	sp, #20
 800a650:	460c      	mov	r4, r1
    uint8_t rbuffer[LR1110_CRYPTO_STATUS_LENGTH]                 = { 0x00 };

    cbuffer[0] = ( uint8_t )( LR1110_CRYPTO_RESTORE_FROM_FLASH_OC >> 8 );
    cbuffer[1] = ( uint8_t )( LR1110_CRYPTO_RESTORE_FROM_FLASH_OC >> 0 );

    lr1110_hal_read( radio, cbuffer, LR1110_CRYPTO_RESTORE_FROM_FLASH_CMD_LENGTH, rbuffer,
 800a652:	2301      	movs	r3, #1
    uint8_t rbuffer[LR1110_CRYPTO_STATUS_LENGTH]                 = { 0x00 };
 800a654:	2100      	movs	r1, #0
    lr1110_hal_read( radio, cbuffer, LR1110_CRYPTO_RESTORE_FROM_FLASH_CMD_LENGTH, rbuffer,
 800a656:	9300      	str	r3, [sp, #0]
    uint8_t rbuffer[LR1110_CRYPTO_STATUS_LENGTH]                 = { 0x00 };
 800a658:	f88d 1008 	strb.w	r1, [sp, #8]
    lr1110_hal_read( radio, cbuffer, LR1110_CRYPTO_RESTORE_FROM_FLASH_CMD_LENGTH, rbuffer,
 800a65c:	ab02      	add	r3, sp, #8
    cbuffer[0] = ( uint8_t )( LR1110_CRYPTO_RESTORE_FROM_FLASH_OC >> 8 );
 800a65e:	f640 3505 	movw	r5, #2821	; 0xb05
    lr1110_hal_read( radio, cbuffer, LR1110_CRYPTO_RESTORE_FROM_FLASH_CMD_LENGTH, rbuffer,
 800a662:	2202      	movs	r2, #2
 800a664:	a903      	add	r1, sp, #12
    cbuffer[0] = ( uint8_t )( LR1110_CRYPTO_RESTORE_FROM_FLASH_OC >> 8 );
 800a666:	f8ad 500c 	strh.w	r5, [sp, #12]
    lr1110_hal_read( radio, cbuffer, LR1110_CRYPTO_RESTORE_FROM_FLASH_CMD_LENGTH, rbuffer,
 800a66a:	f7f8 f8f1 	bl	8002850 <lr1110_hal_read>
                     LR1110_CRYPTO_STATUS_LENGTH );

    *status = ( lr1110_crypto_status_t ) rbuffer[0];
 800a66e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a672:	7023      	strb	r3, [r4, #0]
}
 800a674:	b005      	add	sp, #20
 800a676:	bd30      	pop	{r4, r5, pc}

0800a678 <lr1110_radio_get_packet_type>:
    radio_stats->nb_packet_error_header = ( ( uint16_t ) rbuffer[4] << 8 ) + ( uint16_t ) rbuffer[5];
    radio_stats->nb_packet_falsesync    = ( ( uint16_t ) rbuffer[6] << 8 ) + ( uint16_t ) rbuffer[7];
}

void lr1110_radio_get_packet_type( const void* radio, lr1110_radio_packet_types_t* packet_type )
{
 800a678:	b510      	push	{r4, lr}
 800a67a:	b084      	sub	sp, #16
    uint8_t cbuffer[LR1110_RADIO_GET_PACKET_TYPE_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_GET_PACKETTYPE_OC >> 8 );
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_GET_PACKETTYPE_OC >> 0 );

    lr1110_hal_read( radio, cbuffer, LR1110_RADIO_GET_PACKET_TYPE_CMD_LENGTH, ( uint8_t* ) packet_type,
 800a67c:	2201      	movs	r2, #1
{
 800a67e:	460b      	mov	r3, r1
    lr1110_hal_read( radio, cbuffer, LR1110_RADIO_GET_PACKET_TYPE_CMD_LENGTH, ( uint8_t* ) packet_type,
 800a680:	9200      	str	r2, [sp, #0]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_GET_PACKETTYPE_OC >> 8 );
 800a682:	f240 2402 	movw	r4, #514	; 0x202
    lr1110_hal_read( radio, cbuffer, LR1110_RADIO_GET_PACKET_TYPE_CMD_LENGTH, ( uint8_t* ) packet_type,
 800a686:	2202      	movs	r2, #2
 800a688:	a903      	add	r1, sp, #12
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_GET_PACKETTYPE_OC >> 8 );
 800a68a:	f8ad 400c 	strh.w	r4, [sp, #12]
    lr1110_hal_read( radio, cbuffer, LR1110_RADIO_GET_PACKET_TYPE_CMD_LENGTH, ( uint8_t* ) packet_type,
 800a68e:	f7f8 f8df 	bl	8002850 <lr1110_hal_read>
                     sizeof( uint8_t ) );
}
 800a692:	b004      	add	sp, #16
 800a694:	bd10      	pop	{r4, pc}
 800a696:	bf00      	nop

0800a698 <lr1110_radio_get_rxbuffer_status>:

void lr1110_radio_get_rxbuffer_status( const void* radio, lr1110_radio_rxbuffer_status_t* rxbuffer_status )
{
 800a698:	b530      	push	{r4, r5, lr}
 800a69a:	b085      	sub	sp, #20
 800a69c:	460c      	mov	r4, r1
    uint8_t rbuffer[sizeof( *rxbuffer_status )] = { 0x00 };

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_GET_RXBUFFER_STATUS_OC >> 8 );
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_GET_RXBUFFER_STATUS_OC >> 0 );

    lr1110_hal_read( radio, cbuffer, LR1110_RADIO_GET_RXBUFFER_STATUS_CMD_LENGTH, rbuffer, sizeof( *rxbuffer_status ) );
 800a69e:	2202      	movs	r2, #2
    uint8_t rbuffer[sizeof( *rxbuffer_status )] = { 0x00 };
 800a6a0:	2100      	movs	r1, #0
    lr1110_hal_read( radio, cbuffer, LR1110_RADIO_GET_RXBUFFER_STATUS_CMD_LENGTH, rbuffer, sizeof( *rxbuffer_status ) );
 800a6a2:	9200      	str	r2, [sp, #0]
 800a6a4:	ab03      	add	r3, sp, #12
    uint8_t rbuffer[sizeof( *rxbuffer_status )] = { 0x00 };
 800a6a6:	f8ad 100c 	strh.w	r1, [sp, #12]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_GET_RXBUFFER_STATUS_OC >> 8 );
 800a6aa:	f240 3502 	movw	r5, #770	; 0x302
    lr1110_hal_read( radio, cbuffer, LR1110_RADIO_GET_RXBUFFER_STATUS_CMD_LENGTH, rbuffer, sizeof( *rxbuffer_status ) );
 800a6ae:	a902      	add	r1, sp, #8
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_GET_RXBUFFER_STATUS_OC >> 8 );
 800a6b0:	f8ad 5008 	strh.w	r5, [sp, #8]
    lr1110_hal_read( radio, cbuffer, LR1110_RADIO_GET_RXBUFFER_STATUS_CMD_LENGTH, rbuffer, sizeof( *rxbuffer_status ) );
 800a6b4:	f7f8 f8cc 	bl	8002850 <lr1110_hal_read>

    rxbuffer_status->rx_payload_length       = rbuffer[0];
 800a6b8:	f89d 200c 	ldrb.w	r2, [sp, #12]
    rxbuffer_status->rx_start_buffer_pointer = rbuffer[1];
 800a6bc:	f89d 300d 	ldrb.w	r3, [sp, #13]
    rxbuffer_status->rx_payload_length       = rbuffer[0];
 800a6c0:	7022      	strb	r2, [r4, #0]
    rxbuffer_status->rx_start_buffer_pointer = rbuffer[1];
 800a6c2:	7063      	strb	r3, [r4, #1]
}
 800a6c4:	b005      	add	sp, #20
 800a6c6:	bd30      	pop	{r4, r5, pc}

0800a6c8 <lr1110_radio_get_packet_status_gfsk>:

void lr1110_radio_get_packet_status_gfsk( const void* radio, lr1110_radio_packet_status_gfsk_t* packet_status )
{
 800a6c8:	b570      	push	{r4, r5, r6, lr}
 800a6ca:	b084      	sub	sp, #16
    uint8_t rbuffer[4] = { 0x00 };

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_GET_PACKET_STATUS_OC >> 8 );
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_GET_PACKET_STATUS_OC >> 0 );

    lr1110_hal_read( radio, cbuffer, LR1110_RADIO_GET_PACKET_STATUS_CMD_LENGTH, rbuffer, 4 );
 800a6cc:	2304      	movs	r3, #4
{
 800a6ce:	460c      	mov	r4, r1
    lr1110_hal_read( radio, cbuffer, LR1110_RADIO_GET_PACKET_STATUS_CMD_LENGTH, rbuffer, 4 );
 800a6d0:	9300      	str	r3, [sp, #0]
 800a6d2:	a902      	add	r1, sp, #8
 800a6d4:	ab03      	add	r3, sp, #12
    uint8_t rbuffer[4] = { 0x00 };
 800a6d6:	2600      	movs	r6, #0
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_GET_PACKET_STATUS_OC >> 8 );
 800a6d8:	f240 4502 	movw	r5, #1026	; 0x402
    lr1110_hal_read( radio, cbuffer, LR1110_RADIO_GET_PACKET_STATUS_CMD_LENGTH, rbuffer, 4 );
 800a6dc:	2202      	movs	r2, #2
    uint8_t rbuffer[4] = { 0x00 };
 800a6de:	9603      	str	r6, [sp, #12]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_GET_PACKET_STATUS_OC >> 8 );
 800a6e0:	f8ad 5008 	strh.w	r5, [sp, #8]
    lr1110_hal_read( radio, cbuffer, LR1110_RADIO_GET_PACKET_STATUS_CMD_LENGTH, rbuffer, 4 );
 800a6e4:	f7f8 f8b4 	bl	8002850 <lr1110_hal_read>

    packet_status->rssi_sync_in_dbm   = -( int8_t )( rbuffer[0] >> 1 );
 800a6e8:	f89d 100c 	ldrb.w	r1, [sp, #12]
    packet_status->rssi_avg_in_dbm    = -( int8_t )( rbuffer[1] >> 1 );
 800a6ec:	f89d 200d 	ldrb.w	r2, [sp, #13]
    packet_status->rx_length_in_bytes = rbuffer[2];
    packet_status->is_addr_err        = ( ( rbuffer[3] & 0x20 ) != 0 ) ? true : false;
 800a6f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    packet_status->rx_length_in_bytes = rbuffer[2];
 800a6f4:	f89d 000e 	ldrb.w	r0, [sp, #14]
 800a6f8:	70a0      	strb	r0, [r4, #2]
    packet_status->rssi_sync_in_dbm   = -( int8_t )( rbuffer[0] >> 1 );
 800a6fa:	0849      	lsrs	r1, r1, #1
    packet_status->rssi_avg_in_dbm    = -( int8_t )( rbuffer[1] >> 1 );
 800a6fc:	0852      	lsrs	r2, r2, #1
    packet_status->rssi_sync_in_dbm   = -( int8_t )( rbuffer[0] >> 1 );
 800a6fe:	4249      	negs	r1, r1
    packet_status->rssi_avg_in_dbm    = -( int8_t )( rbuffer[1] >> 1 );
 800a700:	4252      	negs	r2, r2
    packet_status->is_addr_err        = ( ( rbuffer[3] & 0x20 ) != 0 ) ? true : false;
 800a702:	f3c3 1640 	ubfx	r6, r3, #5, #1
    packet_status->is_crc_err         = ( ( rbuffer[3] & 0x10 ) != 0 ) ? true : false;
 800a706:	f3c3 1500 	ubfx	r5, r3, #4, #1
    packet_status->is_len_err         = ( ( rbuffer[3] & 0x08 ) != 0 ) ? true : false;
 800a70a:	f3c3 00c0 	ubfx	r0, r3, #3, #1
    packet_status->rssi_sync_in_dbm   = -( int8_t )( rbuffer[0] >> 1 );
 800a70e:	7021      	strb	r1, [r4, #0]
    packet_status->rssi_avg_in_dbm    = -( int8_t )( rbuffer[1] >> 1 );
 800a710:	7062      	strb	r2, [r4, #1]
    packet_status->is_abort_err       = ( ( rbuffer[3] & 0x04 ) != 0 ) ? true : false;
 800a712:	f3c3 0180 	ubfx	r1, r3, #2, #1
    packet_status->is_received        = ( ( rbuffer[3] & 0x02 ) != 0 ) ? true : false;
 800a716:	f3c3 0240 	ubfx	r2, r3, #1, #1
    packet_status->is_sent            = ( ( rbuffer[3] & 0x01 ) != 0 ) ? true : false;
 800a71a:	f003 0301 	and.w	r3, r3, #1
    packet_status->is_addr_err        = ( ( rbuffer[3] & 0x20 ) != 0 ) ? true : false;
 800a71e:	70e6      	strb	r6, [r4, #3]
    packet_status->is_crc_err         = ( ( rbuffer[3] & 0x10 ) != 0 ) ? true : false;
 800a720:	7125      	strb	r5, [r4, #4]
    packet_status->is_len_err         = ( ( rbuffer[3] & 0x08 ) != 0 ) ? true : false;
 800a722:	7160      	strb	r0, [r4, #5]
    packet_status->is_abort_err       = ( ( rbuffer[3] & 0x04 ) != 0 ) ? true : false;
 800a724:	71a1      	strb	r1, [r4, #6]
    packet_status->is_received        = ( ( rbuffer[3] & 0x02 ) != 0 ) ? true : false;
 800a726:	71e2      	strb	r2, [r4, #7]
    packet_status->is_sent            = ( ( rbuffer[3] & 0x01 ) != 0 ) ? true : false;
 800a728:	7223      	strb	r3, [r4, #8]
}
 800a72a:	b004      	add	sp, #16
 800a72c:	bd70      	pop	{r4, r5, r6, pc}
 800a72e:	bf00      	nop

0800a730 <lr1110_radio_get_packet_status_lora>:

void lr1110_radio_get_packet_status_lora( const void* radio, lr1110_radio_packet_status_lora_t* packet_status )
{
 800a730:	b570      	push	{r4, r5, r6, lr}
    uint8_t cbuffer[LR1110_RADIO_GET_PACKET_STATUS_CMD_LENGTH];
    uint8_t rbuffer[3] = { 0x00 };
 800a732:	4a12      	ldr	r2, [pc, #72]	; (800a77c <lr1110_radio_get_packet_status_lora+0x4c>)
{
 800a734:	b084      	sub	sp, #16
    uint8_t rbuffer[3] = { 0x00 };
 800a736:	8812      	ldrh	r2, [r2, #0]
 800a738:	f8ad 200c 	strh.w	r2, [sp, #12]

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_GET_PACKET_STATUS_OC >> 8 );
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_GET_PACKET_STATUS_OC >> 0 );

    lr1110_hal_read( radio, cbuffer, LR1110_RADIO_GET_PACKET_STATUS_CMD_LENGTH, rbuffer, 3 );
 800a73c:	2303      	movs	r3, #3
{
 800a73e:	460c      	mov	r4, r1
    lr1110_hal_read( radio, cbuffer, LR1110_RADIO_GET_PACKET_STATUS_CMD_LENGTH, rbuffer, 3 );
 800a740:	9300      	str	r3, [sp, #0]
 800a742:	a902      	add	r1, sp, #8
 800a744:	ab03      	add	r3, sp, #12
    uint8_t rbuffer[3] = { 0x00 };
 800a746:	2600      	movs	r6, #0
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_GET_PACKET_STATUS_OC >> 8 );
 800a748:	f240 4502 	movw	r5, #1026	; 0x402
    lr1110_hal_read( radio, cbuffer, LR1110_RADIO_GET_PACKET_STATUS_CMD_LENGTH, rbuffer, 3 );
 800a74c:	2202      	movs	r2, #2
    uint8_t rbuffer[3] = { 0x00 };
 800a74e:	f88d 600e 	strb.w	r6, [sp, #14]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_GET_PACKET_STATUS_OC >> 8 );
 800a752:	f8ad 5008 	strh.w	r5, [sp, #8]
    lr1110_hal_read( radio, cbuffer, LR1110_RADIO_GET_PACKET_STATUS_CMD_LENGTH, rbuffer, 3 );
 800a756:	f7f8 f87b 	bl	8002850 <lr1110_hal_read>

    packet_status->rssi_packet_in_dbm        = -( int8_t )( rbuffer[0] >> 1 );
 800a75a:	f89d 100c 	ldrb.w	r1, [sp, #12]
    packet_status->snr_packet_in_db          = ( ( ( int8_t ) rbuffer[1] ) + 2 ) >> 2;
 800a75e:	f99d 200d 	ldrsb.w	r2, [sp, #13]
    packet_status->signal_rssi_packet_in_dbm = -( int8_t )( rbuffer[2] >> 1 );
 800a762:	f89d 300e 	ldrb.w	r3, [sp, #14]
    packet_status->rssi_packet_in_dbm        = -( int8_t )( rbuffer[0] >> 1 );
 800a766:	0849      	lsrs	r1, r1, #1
    packet_status->snr_packet_in_db          = ( ( ( int8_t ) rbuffer[1] ) + 2 ) >> 2;
 800a768:	3202      	adds	r2, #2
    packet_status->signal_rssi_packet_in_dbm = -( int8_t )( rbuffer[2] >> 1 );
 800a76a:	085b      	lsrs	r3, r3, #1
    packet_status->rssi_packet_in_dbm        = -( int8_t )( rbuffer[0] >> 1 );
 800a76c:	4249      	negs	r1, r1
    packet_status->snr_packet_in_db          = ( ( ( int8_t ) rbuffer[1] ) + 2 ) >> 2;
 800a76e:	1092      	asrs	r2, r2, #2
    packet_status->signal_rssi_packet_in_dbm = -( int8_t )( rbuffer[2] >> 1 );
 800a770:	425b      	negs	r3, r3
    packet_status->rssi_packet_in_dbm        = -( int8_t )( rbuffer[0] >> 1 );
 800a772:	7021      	strb	r1, [r4, #0]
    packet_status->snr_packet_in_db          = ( ( ( int8_t ) rbuffer[1] ) + 2 ) >> 2;
 800a774:	7062      	strb	r2, [r4, #1]
    packet_status->signal_rssi_packet_in_dbm = -( int8_t )( rbuffer[2] >> 1 );
 800a776:	70a3      	strb	r3, [r4, #2]
}
 800a778:	b004      	add	sp, #16
 800a77a:	bd70      	pop	{r4, r5, r6, pc}
 800a77c:	0801446c 	.word	0x0801446c

0800a780 <lr1110_radio_get_rssi_inst>:

void lr1110_radio_get_rssi_inst( const void* radio, int8_t* rssi_in_dbm )
{
 800a780:	b570      	push	{r4, r5, r6, lr}
 800a782:	b084      	sub	sp, #16
    uint8_t rssi = 0;

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_GET_RSSI_INST_OC >> 8 );
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_GET_RSSI_INST_OC >> 0 );

    lr1110_hal_read( radio, cbuffer, LR1110_RADIO_GET_RSSI_INST_CMD_LENGTH, &rssi, sizeof( rssi ) );
 800a784:	2301      	movs	r3, #1
 800a786:	9300      	str	r3, [sp, #0]
{
 800a788:	460c      	mov	r4, r1
    lr1110_hal_read( radio, cbuffer, LR1110_RADIO_GET_RSSI_INST_CMD_LENGTH, &rssi, sizeof( rssi ) );
 800a78a:	f10d 030b 	add.w	r3, sp, #11
    uint8_t rssi = 0;
 800a78e:	2600      	movs	r6, #0
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_GET_RSSI_INST_OC >> 8 );
 800a790:	f240 5502 	movw	r5, #1282	; 0x502
    lr1110_hal_read( radio, cbuffer, LR1110_RADIO_GET_RSSI_INST_CMD_LENGTH, &rssi, sizeof( rssi ) );
 800a794:	2202      	movs	r2, #2
 800a796:	a903      	add	r1, sp, #12
    uint8_t rssi = 0;
 800a798:	f88d 600b 	strb.w	r6, [sp, #11]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_GET_RSSI_INST_OC >> 8 );
 800a79c:	f8ad 500c 	strh.w	r5, [sp, #12]
    lr1110_hal_read( radio, cbuffer, LR1110_RADIO_GET_RSSI_INST_CMD_LENGTH, &rssi, sizeof( rssi ) );
 800a7a0:	f7f8 f856 	bl	8002850 <lr1110_hal_read>
    *rssi_in_dbm = -( int8_t )( rssi >> 1 );
 800a7a4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800a7a8:	085b      	lsrs	r3, r3, #1
 800a7aa:	425b      	negs	r3, r3
 800a7ac:	7023      	strb	r3, [r4, #0]
}
 800a7ae:	b004      	add	sp, #16
 800a7b0:	bd70      	pop	{r4, r5, r6, pc}
 800a7b2:	bf00      	nop

0800a7b4 <lr1110_radio_set_gfsk_sync_word>:

void lr1110_radio_set_gfsk_sync_word( const void* radio, const uint8_t* gfsk_sync_word )
{
 800a7b4:	b510      	push	{r4, lr}
 800a7b6:	b086      	sub	sp, #24
    uint8_t cbuffer[LR1110_RADIO_SET_GFSK_SYNC_WORD_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_GFSK_SYNC_WORD_OC >> 8 );
 800a7b8:	f240 6202 	movw	r2, #1538	; 0x602
 800a7bc:	f8ad 200c 	strh.w	r2, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_GFSK_SYNC_WORD_OC >> 0 );

    for( uint8_t index = 0; index < 8; index++ )
 800a7c0:	1e4b      	subs	r3, r1, #1
 800a7c2:	1dcc      	adds	r4, r1, #7
 800a7c4:	f10d 020e 	add.w	r2, sp, #14
    {
        cbuffer[2 + index] = gfsk_sync_word[index];
 800a7c8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800a7cc:	f802 1b01 	strb.w	r1, [r2], #1
    for( uint8_t index = 0; index < 8; index++ )
 800a7d0:	42a3      	cmp	r3, r4
 800a7d2:	d1f9      	bne.n	800a7c8 <lr1110_radio_set_gfsk_sync_word+0x14>
    }

    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_GFSK_SYNC_WORD_CMD_LENGTH, 0, 0 );
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	9300      	str	r3, [sp, #0]
 800a7d8:	220a      	movs	r2, #10
 800a7da:	a903      	add	r1, sp, #12
 800a7dc:	f7f7 ffea 	bl	80027b4 <lr1110_hal_write>
}
 800a7e0:	b006      	add	sp, #24
 800a7e2:	bd10      	pop	{r4, pc}

0800a7e4 <lr1110_radio_set_lora_sync_word>:

void lr1110_radio_set_lora_sync_word( const void* radio, const lr1110_radio_lora_network_type_t network_type )
{
 800a7e4:	b530      	push	{r4, r5, lr}
 800a7e6:	b085      	sub	sp, #20
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_LORA_SYNC_WORD_OC >> 8 );
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_LORA_SYNC_WORD_OC >> 0 );

    cbuffer[2] = ( uint8_t ) network_type;

    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_LORA_SYNC_WORD_CMD_LENGTH, 0, 0 );
 800a7e8:	2300      	movs	r3, #0
{
 800a7ea:	460d      	mov	r5, r1
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_LORA_SYNC_WORD_CMD_LENGTH, 0, 0 );
 800a7ec:	9300      	str	r3, [sp, #0]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_LORA_SYNC_WORD_OC >> 8 );
 800a7ee:	f640 0402 	movw	r4, #2050	; 0x802
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_LORA_SYNC_WORD_CMD_LENGTH, 0, 0 );
 800a7f2:	2203      	movs	r2, #3
 800a7f4:	a903      	add	r1, sp, #12
    cbuffer[2] = ( uint8_t ) network_type;
 800a7f6:	f88d 500e 	strb.w	r5, [sp, #14]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_LORA_SYNC_WORD_OC >> 8 );
 800a7fa:	f8ad 400c 	strh.w	r4, [sp, #12]
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_LORA_SYNC_WORD_CMD_LENGTH, 0, 0 );
 800a7fe:	f7f7 ffd9 	bl	80027b4 <lr1110_hal_write>
}
 800a802:	b005      	add	sp, #20
 800a804:	bd30      	pop	{r4, r5, pc}
 800a806:	bf00      	nop

0800a808 <lr1110_radio_set_rx>:

void lr1110_radio_set_rx( const void* radio, const uint32_t timeout )
{
 800a808:	b570      	push	{r4, r5, r6, lr}
 800a80a:	b084      	sub	sp, #16

    cbuffer[2] = ( uint8_t )( timeout >> 16 );
    cbuffer[3] = ( uint8_t )( timeout >> 8 );
    cbuffer[4] = ( uint8_t )( timeout >> 0 );

    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_RX_CMD_LENGTH, 0, 0 );
 800a80c:	2300      	movs	r3, #0
    cbuffer[2] = ( uint8_t )( timeout >> 16 );
 800a80e:	0c0e      	lsrs	r6, r1, #16
    cbuffer[3] = ( uint8_t )( timeout >> 8 );
 800a810:	0a0d      	lsrs	r5, r1, #8
    cbuffer[4] = ( uint8_t )( timeout >> 0 );
 800a812:	f88d 100c 	strb.w	r1, [sp, #12]
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_RX_CMD_LENGTH, 0, 0 );
 800a816:	9300      	str	r3, [sp, #0]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_RX_OC >> 8 );
 800a818:	f640 1402 	movw	r4, #2306	; 0x902
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_RX_CMD_LENGTH, 0, 0 );
 800a81c:	2205      	movs	r2, #5
 800a81e:	a902      	add	r1, sp, #8
    cbuffer[2] = ( uint8_t )( timeout >> 16 );
 800a820:	f88d 600a 	strb.w	r6, [sp, #10]
    cbuffer[3] = ( uint8_t )( timeout >> 8 );
 800a824:	f88d 500b 	strb.w	r5, [sp, #11]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_RX_OC >> 8 );
 800a828:	f8ad 4008 	strh.w	r4, [sp, #8]
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_RX_CMD_LENGTH, 0, 0 );
 800a82c:	f7f7 ffc2 	bl	80027b4 <lr1110_hal_write>
}
 800a830:	b004      	add	sp, #16
 800a832:	bd70      	pop	{r4, r5, r6, pc}

0800a834 <lr1110_radio_set_tx>:

void lr1110_radio_set_tx( const void* radio, const uint32_t timeout )
{
 800a834:	b570      	push	{r4, r5, r6, lr}
 800a836:	b084      	sub	sp, #16

    cbuffer[2] = ( uint8_t )( timeout >> 16 );
    cbuffer[3] = ( uint8_t )( timeout >> 8 );
    cbuffer[4] = ( uint8_t )( timeout >> 0 );

    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_TX_CMD_LENGTH, 0, 0 );
 800a838:	2300      	movs	r3, #0
    cbuffer[2] = ( uint8_t )( timeout >> 16 );
 800a83a:	0c0e      	lsrs	r6, r1, #16
    cbuffer[3] = ( uint8_t )( timeout >> 8 );
 800a83c:	0a0d      	lsrs	r5, r1, #8
    cbuffer[4] = ( uint8_t )( timeout >> 0 );
 800a83e:	f88d 100c 	strb.w	r1, [sp, #12]
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_TX_CMD_LENGTH, 0, 0 );
 800a842:	9300      	str	r3, [sp, #0]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_TX_OC >> 8 );
 800a844:	f640 2402 	movw	r4, #2562	; 0xa02
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_TX_CMD_LENGTH, 0, 0 );
 800a848:	2205      	movs	r2, #5
 800a84a:	a902      	add	r1, sp, #8
    cbuffer[2] = ( uint8_t )( timeout >> 16 );
 800a84c:	f88d 600a 	strb.w	r6, [sp, #10]
    cbuffer[3] = ( uint8_t )( timeout >> 8 );
 800a850:	f88d 500b 	strb.w	r5, [sp, #11]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_TX_OC >> 8 );
 800a854:	f8ad 4008 	strh.w	r4, [sp, #8]
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_TX_CMD_LENGTH, 0, 0 );
 800a858:	f7f7 ffac 	bl	80027b4 <lr1110_hal_write>
}
 800a85c:	b004      	add	sp, #16
 800a85e:	bd70      	pop	{r4, r5, r6, pc}

0800a860 <lr1110_radio_set_rf_frequency>:

void lr1110_radio_set_rf_frequency( const void* radio, const uint32_t frequency_in_hz )
{
 800a860:	b570      	push	{r4, r5, r6, lr}
 800a862:	b084      	sub	sp, #16
    cbuffer[2] = ( uint8_t )( frequency_in_hz >> 24 );
    cbuffer[3] = ( uint8_t )( frequency_in_hz >> 16 );
    cbuffer[4] = ( uint8_t )( frequency_in_hz >> 8 );
    cbuffer[5] = ( uint8_t )( frequency_in_hz >> 0 );

    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_RF_FREQUENCY_CMD_LENGTH, 0, 0 );
 800a864:	2300      	movs	r3, #0
    cbuffer[2] = ( uint8_t )( frequency_in_hz >> 24 );
 800a866:	0e0a      	lsrs	r2, r1, #24
    cbuffer[3] = ( uint8_t )( frequency_in_hz >> 16 );
 800a868:	0c0e      	lsrs	r6, r1, #16
    cbuffer[4] = ( uint8_t )( frequency_in_hz >> 8 );
 800a86a:	ba4c      	rev16	r4, r1
    cbuffer[2] = ( uint8_t )( frequency_in_hz >> 24 );
 800a86c:	f88d 200a 	strb.w	r2, [sp, #10]
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_RF_FREQUENCY_CMD_LENGTH, 0, 0 );
 800a870:	9300      	str	r3, [sp, #0]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_RF_FREQUENCY_OC >> 8 );
 800a872:	f640 3502 	movw	r5, #2818	; 0xb02
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_RF_FREQUENCY_CMD_LENGTH, 0, 0 );
 800a876:	2206      	movs	r2, #6
 800a878:	a902      	add	r1, sp, #8
    cbuffer[3] = ( uint8_t )( frequency_in_hz >> 16 );
 800a87a:	f88d 600b 	strb.w	r6, [sp, #11]
    cbuffer[4] = ( uint8_t )( frequency_in_hz >> 8 );
 800a87e:	f8ad 400c 	strh.w	r4, [sp, #12]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_RF_FREQUENCY_OC >> 8 );
 800a882:	f8ad 5008 	strh.w	r5, [sp, #8]
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_RF_FREQUENCY_CMD_LENGTH, 0, 0 );
 800a886:	f7f7 ff95 	bl	80027b4 <lr1110_hal_write>
}
 800a88a:	b004      	add	sp, #16
 800a88c:	bd70      	pop	{r4, r5, r6, pc}
 800a88e:	bf00      	nop

0800a890 <lr1110_radio_set_packet_type>:

    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_CAD_PARAMS_CMD_LENGTH, 0, 0 );
}

void lr1110_radio_set_packet_type( const void* radio, const lr1110_radio_packet_types_t packet_type )
{
 800a890:	b530      	push	{r4, r5, lr}
 800a892:	b085      	sub	sp, #20
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_PACKET_TYPE_OC >> 8 );
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_PACKET_TYPE_OC >> 0 );

    cbuffer[2] = ( uint8_t ) packet_type;

    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_PACKET_TYPE_CMD_LENGTH, 0, 0 );
 800a894:	2300      	movs	r3, #0
{
 800a896:	460d      	mov	r5, r1
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_PACKET_TYPE_CMD_LENGTH, 0, 0 );
 800a898:	9300      	str	r3, [sp, #0]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_PACKET_TYPE_OC >> 8 );
 800a89a:	f640 6402 	movw	r4, #3586	; 0xe02
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_PACKET_TYPE_CMD_LENGTH, 0, 0 );
 800a89e:	2203      	movs	r2, #3
 800a8a0:	a903      	add	r1, sp, #12
    cbuffer[2] = ( uint8_t ) packet_type;
 800a8a2:	f88d 500e 	strb.w	r5, [sp, #14]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_PACKET_TYPE_OC >> 8 );
 800a8a6:	f8ad 400c 	strh.w	r4, [sp, #12]
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_PACKET_TYPE_CMD_LENGTH, 0, 0 );
 800a8aa:	f7f7 ff83 	bl	80027b4 <lr1110_hal_write>
}
 800a8ae:	b005      	add	sp, #20
 800a8b0:	bd30      	pop	{r4, r5, pc}
 800a8b2:	bf00      	nop

0800a8b4 <lr1110_radio_set_modulation_param_gfsk>:

void lr1110_radio_set_modulation_param_gfsk( const void*                                 radio,
                                             const lr1110_radio_modulation_param_gfsk_t* modulation_params )
{
 800a8b4:	b570      	push	{r4, r5, r6, lr}
    uint8_t cbuffer[LR1110_RADIO_SET_MODULATION_PARAMS_GFSK_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_MODULATION_PARAM_OC >> 8 );
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_MODULATION_PARAM_OC >> 0 );

    cbuffer[2] = ( uint8_t )( modulation_params->bitrate >> 24 );
 800a8b6:	680a      	ldr	r2, [r1, #0]
 800a8b8:	688c      	ldr	r4, [r1, #8]
    cbuffer[3] = ( uint8_t )( modulation_params->bitrate >> 16 );
    cbuffer[4] = ( uint8_t )( modulation_params->bitrate >> 8 );
    cbuffer[5] = ( uint8_t )( modulation_params->bitrate >> 0 );

    cbuffer[6] = ( uint8_t ) modulation_params->pulse_shape;
 800a8ba:	888e      	ldrh	r6, [r1, #4]
 800a8bc:	880d      	ldrh	r5, [r1, #0]
{
 800a8be:	b086      	sub	sp, #24
 800a8c0:	ba21      	rev	r1, r4
    cbuffer[2] = ( uint8_t )( modulation_params->bitrate >> 24 );
 800a8c2:	0e14      	lsrs	r4, r2, #24
    cbuffer[3] = ( uint8_t )( modulation_params->bitrate >> 16 );
 800a8c4:	0c12      	lsrs	r2, r2, #16
    cbuffer[8]  = ( uint8_t )( modulation_params->fdev >> 24 );
    cbuffer[9]  = ( uint8_t )( modulation_params->fdev >> 16 );
    cbuffer[10] = ( uint8_t )( modulation_params->fdev >> 8 );
    cbuffer[11] = ( uint8_t )( modulation_params->fdev >> 0 );

    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_MODULATION_PARAMS_GFSK_CMD_LENGTH, 0, 0 );
 800a8c6:	2300      	movs	r3, #0
    cbuffer[3] = ( uint8_t )( modulation_params->bitrate >> 16 );
 800a8c8:	f88d 200f 	strb.w	r2, [sp, #15]
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_MODULATION_PARAMS_GFSK_CMD_LENGTH, 0, 0 );
 800a8cc:	220c      	movs	r2, #12
    cbuffer[2] = ( uint8_t )( modulation_params->bitrate >> 24 );
 800a8ce:	f88d 400e 	strb.w	r4, [sp, #14]
    cbuffer[8]  = ( uint8_t )( modulation_params->fdev >> 24 );
 800a8d2:	9105      	str	r1, [sp, #20]
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_MODULATION_PARAMS_GFSK_CMD_LENGTH, 0, 0 );
 800a8d4:	9300      	str	r3, [sp, #0]
 800a8d6:	ba6d      	rev16	r5, r5
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_MODULATION_PARAM_OC >> 8 );
 800a8d8:	f640 7402 	movw	r4, #3842	; 0xf02
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_MODULATION_PARAMS_GFSK_CMD_LENGTH, 0, 0 );
 800a8dc:	eb0d 0102 	add.w	r1, sp, r2
    cbuffer[4] = ( uint8_t )( modulation_params->bitrate >> 8 );
 800a8e0:	f8ad 5010 	strh.w	r5, [sp, #16]
    cbuffer[6] = ( uint8_t ) modulation_params->pulse_shape;
 800a8e4:	f8ad 6012 	strh.w	r6, [sp, #18]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_MODULATION_PARAM_OC >> 8 );
 800a8e8:	f8ad 400c 	strh.w	r4, [sp, #12]
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_MODULATION_PARAMS_GFSK_CMD_LENGTH, 0, 0 );
 800a8ec:	f7f7 ff62 	bl	80027b4 <lr1110_hal_write>
}
 800a8f0:	b006      	add	sp, #24
 800a8f2:	bd70      	pop	{r4, r5, r6, pc}

0800a8f4 <lr1110_radio_set_modulation_param_lora>:

void lr1110_radio_set_modulation_param_lora( const void*                                 radio,
                                             const lr1110_radio_modulation_param_lora_t* modulation_params )
{
 800a8f4:	b570      	push	{r4, r5, r6, lr}
 800a8f6:	b084      	sub	sp, #16
    cbuffer[2] = ( uint8_t ) modulation_params->spreading_factor;
    cbuffer[3] = ( uint8_t ) modulation_params->bandwidth;
    cbuffer[4] = ( uint8_t ) modulation_params->coding_rate;
    cbuffer[5] = ( uint8_t ) modulation_params->ppm_offset;

    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_MODULATION_PARAMS_LORA_CMD_LENGTH, 0, 0 );
 800a8f8:	2300      	movs	r3, #0
    cbuffer[2] = ( uint8_t ) modulation_params->spreading_factor;
 800a8fa:	780c      	ldrb	r4, [r1, #0]
    cbuffer[3] = ( uint8_t ) modulation_params->bandwidth;
 800a8fc:	784a      	ldrb	r2, [r1, #1]
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_MODULATION_PARAMS_LORA_CMD_LENGTH, 0, 0 );
 800a8fe:	9300      	str	r3, [sp, #0]
    cbuffer[4] = ( uint8_t ) modulation_params->coding_rate;
 800a900:	788e      	ldrb	r6, [r1, #2]
    cbuffer[5] = ( uint8_t ) modulation_params->ppm_offset;
 800a902:	78cd      	ldrb	r5, [r1, #3]
    cbuffer[2] = ( uint8_t ) modulation_params->spreading_factor;
 800a904:	f88d 400a 	strb.w	r4, [sp, #10]
    cbuffer[3] = ( uint8_t ) modulation_params->bandwidth;
 800a908:	f88d 200b 	strb.w	r2, [sp, #11]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_MODULATION_PARAM_OC >> 8 );
 800a90c:	f640 7402 	movw	r4, #3842	; 0xf02
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_MODULATION_PARAMS_LORA_CMD_LENGTH, 0, 0 );
 800a910:	2206      	movs	r2, #6
 800a912:	a902      	add	r1, sp, #8
    cbuffer[4] = ( uint8_t ) modulation_params->coding_rate;
 800a914:	f88d 600c 	strb.w	r6, [sp, #12]
    cbuffer[5] = ( uint8_t ) modulation_params->ppm_offset;
 800a918:	f88d 500d 	strb.w	r5, [sp, #13]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_MODULATION_PARAM_OC >> 8 );
 800a91c:	f8ad 4008 	strh.w	r4, [sp, #8]
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_MODULATION_PARAMS_LORA_CMD_LENGTH, 0, 0 );
 800a920:	f7f7 ff48 	bl	80027b4 <lr1110_hal_write>
}
 800a924:	b004      	add	sp, #16
 800a926:	bd70      	pop	{r4, r5, r6, pc}

0800a928 <lr1110_radio_set_packet_param_gfsk>:

void lr1110_radio_set_packet_param_gfsk( const void* radio, const lr1110_radio_packet_param_gfsk_t* packet_params )
{
 800a928:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t cbuffer[LR1110_RADIO_SET_PACKET_PARAM_GFSK_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_PACKET_PARAM_OC >> 8 );
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_PACKET_PARAM_OC >> 0 );

    cbuffer[2] = ( uint8_t )( packet_params->preamble_length_tx_in_bit >> 8 );
 800a92a:	880a      	ldrh	r2, [r1, #0]

    cbuffer[8] = packet_params->payload_length_in_byte;

    cbuffer[9] = ( uint8_t )( packet_params->crc_type );

    cbuffer[10] = ( uint8_t )( packet_params->dc_free );
 800a92c:	7a0c      	ldrb	r4, [r1, #8]
{
 800a92e:	b087      	sub	sp, #28

    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_PACKET_PARAM_GFSK_CMD_LENGTH, 0, 0 );
 800a930:	2300      	movs	r3, #0
 800a932:	9300      	str	r3, [sp, #0]
    cbuffer[2] = ( uint8_t )( packet_params->preamble_length_tx_in_bit >> 8 );
 800a934:	ba52      	rev16	r2, r2
    cbuffer[4] = ( uint8_t )( packet_params->preamble_detect );
 800a936:	884f      	ldrh	r7, [r1, #2]
    cbuffer[6] = ( uint8_t )( packet_params->address_filtering );
 800a938:	888e      	ldrh	r6, [r1, #4]
    cbuffer[8] = packet_params->payload_length_in_byte;
 800a93a:	88cd      	ldrh	r5, [r1, #6]
    cbuffer[2] = ( uint8_t )( packet_params->preamble_length_tx_in_bit >> 8 );
 800a93c:	f8ad 200e 	strh.w	r2, [sp, #14]
    cbuffer[10] = ( uint8_t )( packet_params->dc_free );
 800a940:	f88d 4016 	strb.w	r4, [sp, #22]
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_PACKET_PARAM_GFSK_CMD_LENGTH, 0, 0 );
 800a944:	220b      	movs	r2, #11
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_PACKET_PARAM_OC >> 8 );
 800a946:	f241 0402 	movw	r4, #4098	; 0x1002
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_PACKET_PARAM_GFSK_CMD_LENGTH, 0, 0 );
 800a94a:	a903      	add	r1, sp, #12
    cbuffer[4] = ( uint8_t )( packet_params->preamble_detect );
 800a94c:	f8ad 7010 	strh.w	r7, [sp, #16]
    cbuffer[6] = ( uint8_t )( packet_params->address_filtering );
 800a950:	f8ad 6012 	strh.w	r6, [sp, #18]
    cbuffer[8] = packet_params->payload_length_in_byte;
 800a954:	f8ad 5014 	strh.w	r5, [sp, #20]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_PACKET_PARAM_OC >> 8 );
 800a958:	f8ad 400c 	strh.w	r4, [sp, #12]
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_PACKET_PARAM_GFSK_CMD_LENGTH, 0, 0 );
 800a95c:	f7f7 ff2a 	bl	80027b4 <lr1110_hal_write>
}
 800a960:	b007      	add	sp, #28
 800a962:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a964 <lr1110_radio_set_packet_param_lora>:

void lr1110_radio_set_packet_param_lora( const void* radio, const lr1110_radio_packet_param_lora_t* packet_params )
{
 800a964:	b570      	push	{r4, r5, r6, lr}
    uint8_t cbuffer[LR1110_RADIO_SET_PACKET_PARAM_LORA_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_PACKET_PARAM_OC >> 8 );
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_PACKET_PARAM_OC >> 0 );

    cbuffer[2] = ( uint8_t )( packet_params->preamble_length_in_symb >> 8 );
 800a966:	880a      	ldrh	r2, [r1, #0]
    cbuffer[3] = ( uint8_t )( packet_params->preamble_length_in_symb >> 0 );

    cbuffer[4] = ( uint8_t )( packet_params->header_type );
 800a968:	884e      	ldrh	r6, [r1, #2]

    cbuffer[5] = packet_params->payload_length_in_byte;

    cbuffer[6] = ( uint8_t )( packet_params->crc );
 800a96a:	888d      	ldrh	r5, [r1, #4]
{
 800a96c:	b084      	sub	sp, #16
    cbuffer[2] = ( uint8_t )( packet_params->preamble_length_in_symb >> 8 );
 800a96e:	ba52      	rev16	r2, r2

    cbuffer[7] = ( uint8_t )( packet_params->iq );

    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_PACKET_PARAM_LORA_CMD_LENGTH, 0, 0 );
 800a970:	2300      	movs	r3, #0
    cbuffer[2] = ( uint8_t )( packet_params->preamble_length_in_symb >> 8 );
 800a972:	f8ad 200a 	strh.w	r2, [sp, #10]
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_PACKET_PARAM_LORA_CMD_LENGTH, 0, 0 );
 800a976:	2208      	movs	r2, #8
 800a978:	9300      	str	r3, [sp, #0]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_PACKET_PARAM_OC >> 8 );
 800a97a:	f241 0402 	movw	r4, #4098	; 0x1002
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_PACKET_PARAM_LORA_CMD_LENGTH, 0, 0 );
 800a97e:	eb0d 0102 	add.w	r1, sp, r2
    cbuffer[4] = ( uint8_t )( packet_params->header_type );
 800a982:	f8ad 600c 	strh.w	r6, [sp, #12]
    cbuffer[6] = ( uint8_t )( packet_params->crc );
 800a986:	f8ad 500e 	strh.w	r5, [sp, #14]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_PACKET_PARAM_OC >> 8 );
 800a98a:	f8ad 4008 	strh.w	r4, [sp, #8]
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_PACKET_PARAM_LORA_CMD_LENGTH, 0, 0 );
 800a98e:	f7f7 ff11 	bl	80027b4 <lr1110_hal_write>
}
 800a992:	b004      	add	sp, #16
 800a994:	bd70      	pop	{r4, r5, r6, pc}
 800a996:	bf00      	nop

0800a998 <lr1110_radio_set_tx_params>:

void lr1110_radio_set_tx_params( const void* radio, const int8_t power, const lr1110_radio_ramp_time_t ramp_time )
{
 800a998:	b530      	push	{r4, r5, lr}
 800a99a:	b085      	sub	sp, #20
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_TX_PARAMS_OC >> 0 );

    cbuffer[2] = ( uint8_t ) power;
    cbuffer[3] = ( uint8_t ) ramp_time;

    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_TX_PARAMS_CMD_LENGTH, 0, 0 );
 800a99c:	2300      	movs	r3, #0
{
 800a99e:	4615      	mov	r5, r2
    cbuffer[2] = ( uint8_t ) power;
 800a9a0:	f88d 100e 	strb.w	r1, [sp, #14]
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_TX_PARAMS_CMD_LENGTH, 0, 0 );
 800a9a4:	9300      	str	r3, [sp, #0]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_TX_PARAMS_OC >> 8 );
 800a9a6:	f241 1402 	movw	r4, #4354	; 0x1102
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_TX_PARAMS_CMD_LENGTH, 0, 0 );
 800a9aa:	2204      	movs	r2, #4
 800a9ac:	a903      	add	r1, sp, #12
    cbuffer[3] = ( uint8_t ) ramp_time;
 800a9ae:	f88d 500f 	strb.w	r5, [sp, #15]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_TX_PARAMS_OC >> 8 );
 800a9b2:	f8ad 400c 	strh.w	r4, [sp, #12]
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_TX_PARAMS_CMD_LENGTH, 0, 0 );
 800a9b6:	f7f7 fefd 	bl	80027b4 <lr1110_hal_write>
}
 800a9ba:	b005      	add	sp, #20
 800a9bc:	bd30      	pop	{r4, r5, pc}
 800a9be:	bf00      	nop

0800a9c0 <lr1110_radio_set_rx_dutycycle>:
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_RX_TX_FALLBACK_MODE_CMD_LENGTH, 0, 0 );
}

void lr1110_radio_set_rx_dutycycle( const void* radio, const uint32_t rx_period, const uint32_t sleep_period,
                                    const lr1110_radio_rx_duty_cycle_mode_t mode )
{
 800a9c0:	b570      	push	{r4, r5, r6, lr}
 800a9c2:	b086      	sub	sp, #24
    cbuffer[6] = ( uint8_t )( sleep_period >> 8 );
    cbuffer[7] = ( uint8_t )( sleep_period >> 0 );

    cbuffer[8] = mode;

    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_RX_DUTYCYCLE_MODE_CMD_LENGTH, 0, 0 );
 800a9c4:	2400      	movs	r4, #0
{
 800a9c6:	461e      	mov	r6, r3
    cbuffer[2] = ( uint8_t )( rx_period >> 16 );
 800a9c8:	0c0d      	lsrs	r5, r1, #16
    cbuffer[4] = ( uint8_t )( rx_period >> 0 );
 800a9ca:	f88d 1010 	strb.w	r1, [sp, #16]
    cbuffer[3] = ( uint8_t )( rx_period >> 8 );
 800a9ce:	0a09      	lsrs	r1, r1, #8
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_RX_DUTYCYCLE_MODE_CMD_LENGTH, 0, 0 );
 800a9d0:	9400      	str	r4, [sp, #0]
 800a9d2:	4623      	mov	r3, r4
    cbuffer[8] = mode;
 800a9d4:	f88d 6014 	strb.w	r6, [sp, #20]
    cbuffer[6] = ( uint8_t )( sleep_period >> 8 );
 800a9d8:	ba54      	rev16	r4, r2
    cbuffer[5] = ( uint8_t )( sleep_period >> 16 );
 800a9da:	0c16      	lsrs	r6, r2, #16
    cbuffer[2] = ( uint8_t )( rx_period >> 16 );
 800a9dc:	f88d 500e 	strb.w	r5, [sp, #14]
    cbuffer[3] = ( uint8_t )( rx_period >> 8 );
 800a9e0:	f88d 100f 	strb.w	r1, [sp, #15]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_RX_DUTYCYCLE_OC >> 8 );
 800a9e4:	f241 4502 	movw	r5, #5122	; 0x1402
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_RX_DUTYCYCLE_MODE_CMD_LENGTH, 0, 0 );
 800a9e8:	2209      	movs	r2, #9
 800a9ea:	a903      	add	r1, sp, #12
    cbuffer[5] = ( uint8_t )( sleep_period >> 16 );
 800a9ec:	f88d 6011 	strb.w	r6, [sp, #17]
    cbuffer[6] = ( uint8_t )( sleep_period >> 8 );
 800a9f0:	f8ad 4012 	strh.w	r4, [sp, #18]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_RX_DUTYCYCLE_OC >> 8 );
 800a9f4:	f8ad 500c 	strh.w	r5, [sp, #12]
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_RX_DUTYCYCLE_MODE_CMD_LENGTH, 0, 0 );
 800a9f8:	f7f7 fedc 	bl	80027b4 <lr1110_hal_write>
}
 800a9fc:	b006      	add	sp, #24
 800a9fe:	bd70      	pop	{r4, r5, r6, pc}

0800aa00 <lr1110_radio_set_pa_config>:

void lr1110_radio_set_pa_config( const void* radio, const lr1110_radio_pa_config_t* pa_config )
{
 800aa00:	b570      	push	{r4, r5, r6, lr}
 800aa02:	b084      	sub	sp, #16
    cbuffer[3] = ( uint8_t ) pa_config->pa_reg_supply;

    cbuffer[4] = pa_config->pa_dutycycle;
    cbuffer[5] = pa_config->pa_hp_sel;

    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_PA_CONFIG_CMD_LENGTH, 0, 0 );
 800aa04:	2300      	movs	r3, #0
    cbuffer[2] = ( uint8_t ) pa_config->pa_sel;
 800aa06:	780c      	ldrb	r4, [r1, #0]
    cbuffer[3] = ( uint8_t ) pa_config->pa_reg_supply;
 800aa08:	784a      	ldrb	r2, [r1, #1]
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_PA_CONFIG_CMD_LENGTH, 0, 0 );
 800aa0a:	9300      	str	r3, [sp, #0]
    cbuffer[4] = pa_config->pa_dutycycle;
 800aa0c:	788e      	ldrb	r6, [r1, #2]
    cbuffer[5] = pa_config->pa_hp_sel;
 800aa0e:	78cd      	ldrb	r5, [r1, #3]
    cbuffer[2] = ( uint8_t ) pa_config->pa_sel;
 800aa10:	f88d 400a 	strb.w	r4, [sp, #10]
    cbuffer[3] = ( uint8_t ) pa_config->pa_reg_supply;
 800aa14:	f88d 200b 	strb.w	r2, [sp, #11]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_PACONFIG_OC >> 8 );
 800aa18:	f241 5402 	movw	r4, #5378	; 0x1502
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_PA_CONFIG_CMD_LENGTH, 0, 0 );
 800aa1c:	2206      	movs	r2, #6
 800aa1e:	a902      	add	r1, sp, #8
    cbuffer[4] = pa_config->pa_dutycycle;
 800aa20:	f88d 600c 	strb.w	r6, [sp, #12]
    cbuffer[5] = pa_config->pa_hp_sel;
 800aa24:	f88d 500d 	strb.w	r5, [sp, #13]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_PACONFIG_OC >> 8 );
 800aa28:	f8ad 4008 	strh.w	r4, [sp, #8]
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_PA_CONFIG_CMD_LENGTH, 0, 0 );
 800aa2c:	f7f7 fec2 	bl	80027b4 <lr1110_hal_write>
}
 800aa30:	b004      	add	sp, #16
 800aa32:	bd70      	pop	{r4, r5, r6, pc}

0800aa34 <lr1110_radio_stop_timeout_on_preamble>:

void lr1110_radio_stop_timeout_on_preamble( const void* radio, const bool stop_timeout_on_preamble )
{
 800aa34:	b530      	push	{r4, r5, lr}
 800aa36:	b085      	sub	sp, #20
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_STOP_TIMEOUT_ON_PREAMBLE_OC >> 8 );
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_STOP_TIMEOUT_ON_PREAMBLE_OC >> 0 );

    cbuffer[2] = ( uint8_t ) stop_timeout_on_preamble;

    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_STOP_TIMEOUT_ON_PREAMBLE_CMD_LENGTH, 0, 0 );
 800aa38:	2300      	movs	r3, #0
{
 800aa3a:	460d      	mov	r5, r1
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_STOP_TIMEOUT_ON_PREAMBLE_CMD_LENGTH, 0, 0 );
 800aa3c:	9300      	str	r3, [sp, #0]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_STOP_TIMEOUT_ON_PREAMBLE_OC >> 8 );
 800aa3e:	f241 7402 	movw	r4, #5890	; 0x1702
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_STOP_TIMEOUT_ON_PREAMBLE_CMD_LENGTH, 0, 0 );
 800aa42:	2203      	movs	r2, #3
 800aa44:	a903      	add	r1, sp, #12
    cbuffer[2] = ( uint8_t ) stop_timeout_on_preamble;
 800aa46:	f88d 500e 	strb.w	r5, [sp, #14]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_STOP_TIMEOUT_ON_PREAMBLE_OC >> 8 );
 800aa4a:	f8ad 400c 	strh.w	r4, [sp, #12]
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_STOP_TIMEOUT_ON_PREAMBLE_CMD_LENGTH, 0, 0 );
 800aa4e:	f7f7 feb1 	bl	80027b4 <lr1110_hal_write>
}
 800aa52:	b005      	add	sp, #20
 800aa54:	bd30      	pop	{r4, r5, pc}
 800aa56:	bf00      	nop

0800aa58 <lr1110_radio_set_cad>:

void lr1110_radio_set_cad( const void* radio )
{
 800aa58:	b510      	push	{r4, lr}
 800aa5a:	b084      	sub	sp, #16
    uint8_t cbuffer[LR1110_RADIO_SET_CAD_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_CAD_OC >> 8 );
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_CAD_OC >> 0 );

    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_CAD_CMD_LENGTH, 0, 0 );
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	9300      	str	r3, [sp, #0]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_CAD_OC >> 8 );
 800aa60:	f641 0402 	movw	r4, #6146	; 0x1802
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_CAD_CMD_LENGTH, 0, 0 );
 800aa64:	2202      	movs	r2, #2
 800aa66:	a903      	add	r1, sp, #12
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_CAD_OC >> 8 );
 800aa68:	f8ad 400c 	strh.w	r4, [sp, #12]
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_CAD_CMD_LENGTH, 0, 0 );
 800aa6c:	f7f7 fea2 	bl	80027b4 <lr1110_hal_write>
}
 800aa70:	b004      	add	sp, #16
 800aa72:	bd10      	pop	{r4, pc}

0800aa74 <lr1110_radio_set_tx_cw>:

void lr1110_radio_set_tx_cw( const void* radio )
{
 800aa74:	b510      	push	{r4, lr}
 800aa76:	b084      	sub	sp, #16
    uint8_t cbuffer[LR1110_RADIO_SET_TX_CW_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_TX_CW_OC >> 8 );
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_TX_CW_OC >> 0 );

    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_TX_CW_CMD_LENGTH, 0, 0 );
 800aa78:	2300      	movs	r3, #0
 800aa7a:	9300      	str	r3, [sp, #0]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_TX_CW_OC >> 8 );
 800aa7c:	f641 1402 	movw	r4, #6402	; 0x1902
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_TX_CW_CMD_LENGTH, 0, 0 );
 800aa80:	2202      	movs	r2, #2
 800aa82:	a903      	add	r1, sp, #12
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_TX_CW_OC >> 8 );
 800aa84:	f8ad 400c 	strh.w	r4, [sp, #12]
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_TX_CW_CMD_LENGTH, 0, 0 );
 800aa88:	f7f7 fe94 	bl	80027b4 <lr1110_hal_write>
}
 800aa8c:	b004      	add	sp, #16
 800aa8e:	bd10      	pop	{r4, pc}

0800aa90 <lr1110_radio_set_lora_sync_timeout>:

    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_TX_INFINITE_PREAMBLE_CMD_LENGTH, 0, 0 );
}

void lr1110_radio_set_lora_sync_timeout( const void* radio, const uint8_t nb_symbol )
{
 800aa90:	b530      	push	{r4, r5, lr}
 800aa92:	b085      	sub	sp, #20
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_LORA_SYNC_TIMEOUT_OC >> 8 );
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_LORA_SYNC_TIMEOUT_OC >> 0 );

    cbuffer[2] = nb_symbol;

    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_LORA_SYNC_TIMEOUT_CMD_LENGTH, 0, 0 );
 800aa94:	2300      	movs	r3, #0
{
 800aa96:	460d      	mov	r5, r1
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_LORA_SYNC_TIMEOUT_CMD_LENGTH, 0, 0 );
 800aa98:	9300      	str	r3, [sp, #0]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_LORA_SYNC_TIMEOUT_OC >> 8 );
 800aa9a:	f641 3402 	movw	r4, #6914	; 0x1b02
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_LORA_SYNC_TIMEOUT_CMD_LENGTH, 0, 0 );
 800aa9e:	2203      	movs	r2, #3
 800aaa0:	a903      	add	r1, sp, #12
    cbuffer[2] = nb_symbol;
 800aaa2:	f88d 500e 	strb.w	r5, [sp, #14]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_LORA_SYNC_TIMEOUT_OC >> 8 );
 800aaa6:	f8ad 400c 	strh.w	r4, [sp, #12]
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_LORA_SYNC_TIMEOUT_CMD_LENGTH, 0, 0 );
 800aaaa:	f7f7 fe83 	bl	80027b4 <lr1110_hal_write>
}
 800aaae:	b005      	add	sp, #20
 800aab0:	bd30      	pop	{r4, r5, pc}
 800aab2:	bf00      	nop

0800aab4 <lr1110_radio_set_gfsk_crc_params>:

void lr1110_radio_set_gfsk_crc_params( const void* radio, const uint32_t seed, const uint32_t polynomial )
{
 800aab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aab6:	b087      	sub	sp, #28
    cbuffer[6] = ( uint8_t )( polynomial >> 24 );
    cbuffer[7] = ( uint8_t )( polynomial >> 16 );
    cbuffer[8] = ( uint8_t )( polynomial >> 8 );
    cbuffer[9] = ( uint8_t )( polynomial >> 0 );

    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_GFSK_CRC_PARAMS_CMD_LENGTH, 0, 0 );
 800aab8:	2300      	movs	r3, #0
    cbuffer[2] = ( uint8_t )( seed >> 24 );
 800aaba:	0e0d      	lsrs	r5, r1, #24
    cbuffer[3] = ( uint8_t )( seed >> 16 );
 800aabc:	0c0c      	lsrs	r4, r1, #16
    cbuffer[4] = ( uint8_t )( seed >> 8 );
 800aabe:	ba49      	rev16	r1, r1
    cbuffer[2] = ( uint8_t )( seed >> 24 );
 800aac0:	f88d 500e 	strb.w	r5, [sp, #14]
    cbuffer[6] = ( uint8_t )( polynomial >> 24 );
 800aac4:	0e17      	lsrs	r7, r2, #24
    cbuffer[3] = ( uint8_t )( seed >> 16 );
 800aac6:	f88d 400f 	strb.w	r4, [sp, #15]
    cbuffer[7] = ( uint8_t )( polynomial >> 16 );
 800aaca:	0c16      	lsrs	r6, r2, #16
    cbuffer[8] = ( uint8_t )( polynomial >> 8 );
 800aacc:	ba54      	rev16	r4, r2
    cbuffer[4] = ( uint8_t )( seed >> 8 );
 800aace:	f8ad 1010 	strh.w	r1, [sp, #16]
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_GFSK_CRC_PARAMS_CMD_LENGTH, 0, 0 );
 800aad2:	9300      	str	r3, [sp, #0]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_GFSK_CRC_PARAMS_OC >> 8 );
 800aad4:	f242 4502 	movw	r5, #9218	; 0x2402
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_GFSK_CRC_PARAMS_CMD_LENGTH, 0, 0 );
 800aad8:	220a      	movs	r2, #10
 800aada:	a903      	add	r1, sp, #12
    cbuffer[6] = ( uint8_t )( polynomial >> 24 );
 800aadc:	f88d 7012 	strb.w	r7, [sp, #18]
    cbuffer[7] = ( uint8_t )( polynomial >> 16 );
 800aae0:	f88d 6013 	strb.w	r6, [sp, #19]
    cbuffer[8] = ( uint8_t )( polynomial >> 8 );
 800aae4:	f8ad 4014 	strh.w	r4, [sp, #20]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_GFSK_CRC_PARAMS_OC >> 8 );
 800aae8:	f8ad 500c 	strh.w	r5, [sp, #12]
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_GFSK_CRC_PARAMS_CMD_LENGTH, 0, 0 );
 800aaec:	f7f7 fe62 	bl	80027b4 <lr1110_hal_write>
}
 800aaf0:	b007      	add	sp, #28
 800aaf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aaf4 <lr1110_radio_set_gfsk_whitening_params>:

void lr1110_radio_set_gfsk_whitening_params( const void* radio, const uint16_t whitening )
{
 800aaf4:	b530      	push	{r4, r5, lr}
 800aaf6:	b085      	sub	sp, #20
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_GFSK_WHITENING_PARAMS_OC >> 0 );

    cbuffer[2] = ( uint8_t )( whitening >> 8 );
    cbuffer[3] = ( uint8_t )( whitening >> 0 );

    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_GFSK_WHITENING_CMD_LENGTH, 0, 0 );
 800aaf8:	2300      	movs	r3, #0
    cbuffer[2] = ( uint8_t )( whitening >> 8 );
 800aafa:	ba4c      	rev16	r4, r1
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_GFSK_WHITENING_CMD_LENGTH, 0, 0 );
 800aafc:	9300      	str	r3, [sp, #0]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_GFSK_WHITENING_PARAMS_OC >> 8 );
 800aafe:	f242 5502 	movw	r5, #9474	; 0x2502
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_GFSK_WHITENING_CMD_LENGTH, 0, 0 );
 800ab02:	2204      	movs	r2, #4
 800ab04:	a903      	add	r1, sp, #12
    cbuffer[2] = ( uint8_t )( whitening >> 8 );
 800ab06:	f8ad 400e 	strh.w	r4, [sp, #14]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_GFSK_WHITENING_PARAMS_OC >> 8 );
 800ab0a:	f8ad 500c 	strh.w	r5, [sp, #12]
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_GFSK_WHITENING_CMD_LENGTH, 0, 0 );
 800ab0e:	f7f7 fe51 	bl	80027b4 <lr1110_hal_write>
}
 800ab12:	b005      	add	sp, #20
 800ab14:	bd30      	pop	{r4, r5, pc}
 800ab16:	bf00      	nop

0800ab18 <lr1110_radio_set_rx_boosted>:

void lr1110_radio_set_rx_boosted( const void* radio, const bool enable_boost_mode )
{
 800ab18:	b530      	push	{r4, r5, lr}
 800ab1a:	b085      	sub	sp, #20
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_RX_BOOSTED_OC >> 8 );
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_RX_BOOSTED_OC >> 0 );

    cbuffer[2] = ( enable_boost_mode == true ) ? 0x01 : 0x00;

    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_RX_BOOSTED_LENGTH, 0, 0 );
 800ab1c:	2300      	movs	r3, #0
{
 800ab1e:	460d      	mov	r5, r1
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_RX_BOOSTED_LENGTH, 0, 0 );
 800ab20:	9300      	str	r3, [sp, #0]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_RX_BOOSTED_OC >> 8 );
 800ab22:	f242 7402 	movw	r4, #9986	; 0x2702
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_RX_BOOSTED_LENGTH, 0, 0 );
 800ab26:	2203      	movs	r2, #3
 800ab28:	a903      	add	r1, sp, #12
    cbuffer[2] = ( enable_boost_mode == true ) ? 0x01 : 0x00;
 800ab2a:	f88d 500e 	strb.w	r5, [sp, #14]
    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_RX_BOOSTED_OC >> 8 );
 800ab2e:	f8ad 400c 	strh.w	r4, [sp, #12]
    lr1110_hal_write( radio, cbuffer, LR1110_RADIO_SET_RX_BOOSTED_LENGTH, 0, 0 );
 800ab32:	f7f7 fe3f 	bl	80027b4 <lr1110_hal_write>
}
 800ab36:	b005      	add	sp, #20
 800ab38:	bd30      	pop	{r4, r5, pc}
 800ab3a:	bf00      	nop

0800ab3c <lr1110_regmem_write_mem8>:
                        ( ( uint32_t ) buffer_local[2] << 8 ) + ( ( uint32_t ) buffer_local[3] << 0 );
    }
}

void lr1110_regmem_write_mem8( const void* radio, const uint32_t address, const uint8_t* buffer, const uint8_t length )
{
 800ab3c:	b570      	push	{r4, r5, r6, lr}
 800ab3e:	b084      	sub	sp, #16

    cbuffer[0] = ( uint8_t )( LR1110_REGMEM_WRITE_MEM8_OC >> 8 );
    cbuffer[1] = ( uint8_t )( LR1110_REGMEM_WRITE_MEM8_OC >> 0 );

    cbuffer[2] = ( uint8_t )( address >> 24 );
    cbuffer[3] = ( uint8_t )( address >> 16 );
 800ab40:	0c0e      	lsrs	r6, r1, #16
    cbuffer[4] = ( uint8_t )( address >> 8 );
    cbuffer[5] = ( uint8_t )( address >> 0 );

    lr1110_hal_write( radio, cbuffer, LR1110_REGMEM_WRITE_MEM8_CMD_LENGTH, buffer, length );
 800ab42:	9300      	str	r3, [sp, #0]
 800ab44:	4613      	mov	r3, r2
    cbuffer[2] = ( uint8_t )( address >> 24 );
 800ab46:	0e0a      	lsrs	r2, r1, #24
    cbuffer[4] = ( uint8_t )( address >> 8 );
 800ab48:	ba4c      	rev16	r4, r1
    cbuffer[2] = ( uint8_t )( address >> 24 );
 800ab4a:	f88d 200a 	strb.w	r2, [sp, #10]
    cbuffer[0] = ( uint8_t )( LR1110_REGMEM_WRITE_MEM8_OC >> 8 );
 800ab4e:	f240 7501 	movw	r5, #1793	; 0x701
    lr1110_hal_write( radio, cbuffer, LR1110_REGMEM_WRITE_MEM8_CMD_LENGTH, buffer, length );
 800ab52:	2206      	movs	r2, #6
 800ab54:	a902      	add	r1, sp, #8
    cbuffer[3] = ( uint8_t )( address >> 16 );
 800ab56:	f88d 600b 	strb.w	r6, [sp, #11]
    cbuffer[4] = ( uint8_t )( address >> 8 );
 800ab5a:	f8ad 400c 	strh.w	r4, [sp, #12]
    cbuffer[0] = ( uint8_t )( LR1110_REGMEM_WRITE_MEM8_OC >> 8 );
 800ab5e:	f8ad 5008 	strh.w	r5, [sp, #8]
    lr1110_hal_write( radio, cbuffer, LR1110_REGMEM_WRITE_MEM8_CMD_LENGTH, buffer, length );
 800ab62:	f7f7 fe27 	bl	80027b4 <lr1110_hal_write>
}
 800ab66:	b004      	add	sp, #16
 800ab68:	bd70      	pop	{r4, r5, r6, pc}
 800ab6a:	bf00      	nop

0800ab6c <lr1110_regmem_read_mem8>:

void lr1110_regmem_read_mem8( const void* radio, const uint32_t address, uint8_t* buffer, const uint8_t length )
{
 800ab6c:	b570      	push	{r4, r5, r6, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	461d      	mov	r5, r3
 800ab72:	4613      	mov	r3, r2
    uint8_t cbuffer[LR1110_REGMEM_READ_MEM8_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_REGMEM_READ_MEM8_OC >> 8 );
    cbuffer[1] = ( uint8_t )( LR1110_REGMEM_READ_MEM8_OC >> 0 );

    cbuffer[2] = ( uint8_t )( address >> 24 );
 800ab74:	0e0a      	lsrs	r2, r1, #24
    cbuffer[4] = ( uint8_t )( address >> 8 );
    cbuffer[5] = ( uint8_t )( address >> 0 );

    cbuffer[6] = length;

    lr1110_hal_read( radio, cbuffer, LR1110_REGMEM_READ_MEM8_CMD_LENGTH, buffer, length );
 800ab76:	9500      	str	r5, [sp, #0]
    cbuffer[3] = ( uint8_t )( address >> 16 );
 800ab78:	0c0e      	lsrs	r6, r1, #16
    cbuffer[4] = ( uint8_t )( address >> 8 );
 800ab7a:	ba4c      	rev16	r4, r1
    cbuffer[6] = length;
 800ab7c:	f88d 500e 	strb.w	r5, [sp, #14]
    cbuffer[2] = ( uint8_t )( address >> 24 );
 800ab80:	f88d 200a 	strb.w	r2, [sp, #10]
    cbuffer[0] = ( uint8_t )( LR1110_REGMEM_READ_MEM8_OC >> 8 );
 800ab84:	f640 0501 	movw	r5, #2049	; 0x801
    lr1110_hal_read( radio, cbuffer, LR1110_REGMEM_READ_MEM8_CMD_LENGTH, buffer, length );
 800ab88:	2207      	movs	r2, #7
 800ab8a:	a902      	add	r1, sp, #8
    cbuffer[3] = ( uint8_t )( address >> 16 );
 800ab8c:	f88d 600b 	strb.w	r6, [sp, #11]
    cbuffer[4] = ( uint8_t )( address >> 8 );
 800ab90:	f8ad 400c 	strh.w	r4, [sp, #12]
    cbuffer[0] = ( uint8_t )( LR1110_REGMEM_READ_MEM8_OC >> 8 );
 800ab94:	f8ad 5008 	strh.w	r5, [sp, #8]
    lr1110_hal_read( radio, cbuffer, LR1110_REGMEM_READ_MEM8_CMD_LENGTH, buffer, length );
 800ab98:	f7f7 fe5a 	bl	8002850 <lr1110_hal_read>
}
 800ab9c:	b004      	add	sp, #16
 800ab9e:	bd70      	pop	{r4, r5, r6, pc}

0800aba0 <lr1110_regmem_write_buffer8>:

void lr1110_regmem_write_buffer8( const void* radio, const uint8_t* buffer, const uint8_t length )
{
 800aba0:	b510      	push	{r4, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	460b      	mov	r3, r1
    uint8_t cbuffer[LR1110_REGMEM_WRITE_BUFFER8_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_REGMEM_WRITE_BUFFER8_OC >> 8 );
    cbuffer[1] = ( uint8_t )( LR1110_REGMEM_WRITE_BUFFER8_OC >> 0 );

    lr1110_hal_write( radio, cbuffer, LR1110_REGMEM_WRITE_BUFFER8_CMD_LENGTH, buffer, length );
 800aba6:	9200      	str	r2, [sp, #0]
    cbuffer[0] = ( uint8_t )( LR1110_REGMEM_WRITE_BUFFER8_OC >> 8 );
 800aba8:	f640 1401 	movw	r4, #2305	; 0x901
    lr1110_hal_write( radio, cbuffer, LR1110_REGMEM_WRITE_BUFFER8_CMD_LENGTH, buffer, length );
 800abac:	2202      	movs	r2, #2
 800abae:	a903      	add	r1, sp, #12
    cbuffer[0] = ( uint8_t )( LR1110_REGMEM_WRITE_BUFFER8_OC >> 8 );
 800abb0:	f8ad 400c 	strh.w	r4, [sp, #12]
    lr1110_hal_write( radio, cbuffer, LR1110_REGMEM_WRITE_BUFFER8_CMD_LENGTH, buffer, length );
 800abb4:	f7f7 fdfe 	bl	80027b4 <lr1110_hal_write>
}
 800abb8:	b004      	add	sp, #16
 800abba:	bd10      	pop	{r4, pc}

0800abbc <lr1110_regmem_read_buffer8>:

void lr1110_regmem_read_buffer8( const void* radio, uint8_t* buffer, const uint8_t offset, const uint8_t length )
{
 800abbc:	b570      	push	{r4, r5, r6, lr}
 800abbe:	b084      	sub	sp, #16
 800abc0:	461c      	mov	r4, r3
 800abc2:	4616      	mov	r6, r2
 800abc4:	460b      	mov	r3, r1
    cbuffer[1] = ( uint8_t )( LR1110_REGMEM_READ_BUFFER8_OC >> 0 );

    cbuffer[2] = offset;
    cbuffer[3] = length;

    lr1110_hal_read( radio, cbuffer, LR1110_REGMEM_READ_BUFFER8_CMD_LENGTH, buffer, length );
 800abc6:	9400      	str	r4, [sp, #0]
    cbuffer[0] = ( uint8_t )( LR1110_REGMEM_READ_BUFFER8_OC >> 8 );
 800abc8:	f640 2501 	movw	r5, #2561	; 0xa01
    lr1110_hal_read( radio, cbuffer, LR1110_REGMEM_READ_BUFFER8_CMD_LENGTH, buffer, length );
 800abcc:	2204      	movs	r2, #4
 800abce:	a903      	add	r1, sp, #12
    cbuffer[3] = length;
 800abd0:	f88d 400f 	strb.w	r4, [sp, #15]
    cbuffer[2] = offset;
 800abd4:	f88d 600e 	strb.w	r6, [sp, #14]
    cbuffer[0] = ( uint8_t )( LR1110_REGMEM_READ_BUFFER8_OC >> 8 );
 800abd8:	f8ad 500c 	strh.w	r5, [sp, #12]
    lr1110_hal_read( radio, cbuffer, LR1110_REGMEM_READ_BUFFER8_CMD_LENGTH, buffer, length );
 800abdc:	f7f7 fe38 	bl	8002850 <lr1110_hal_read>
}
 800abe0:	b004      	add	sp, #16
 800abe2:	bd70      	pop	{r4, r5, r6, pc}

0800abe4 <lr1110_system_reset>:
 * --- PUBLIC FUNCTIONS DEFINITION ---------------------------------------------
 */

void lr1110_system_reset( const void* radio )
{
    lr1110_hal_reset( radio );
 800abe4:	f7f7 bdac 	b.w	8002740 <lr1110_hal_reset>

0800abe8 <lr1110_system_get_status>:
}

void lr1110_system_get_status( const void* radio, lr1110_system_stat1_t* stat1, lr1110_system_stat2_t* stat2,
                               uint32_t* irq_status )
{
 800abe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abea:	b083      	sub	sp, #12
 800abec:	4614      	mov	r4, r2
    uint8_t cbuffer[LR1110_SYSTEM_GET_STATUS_CMD_LENGTH] = { 0x00 };

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_GET_STATUS_OC >> 8 );
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_GET_STATUS_OC >> 0 );

    lr1110_hal_write_read( radio, cbuffer, cbuffer, LR1110_SYSTEM_GET_STATUS_CMD_LENGTH );
 800abee:	466a      	mov	r2, sp
{
 800abf0:	460d      	mov	r5, r1
    uint8_t cbuffer[LR1110_SYSTEM_GET_STATUS_CMD_LENGTH] = { 0x00 };
 800abf2:	2700      	movs	r7, #0
    lr1110_hal_write_read( radio, cbuffer, cbuffer, LR1110_SYSTEM_GET_STATUS_CMD_LENGTH );
 800abf4:	4611      	mov	r1, r2
    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_GET_STATUS_OC >> 8 );
 800abf6:	f04f 0c01 	mov.w	ip, #1
{
 800abfa:	461e      	mov	r6, r3
    lr1110_hal_write_read( radio, cbuffer, cbuffer, LR1110_SYSTEM_GET_STATUS_CMD_LENGTH );
 800abfc:	2306      	movs	r3, #6
    uint8_t cbuffer[LR1110_SYSTEM_GET_STATUS_CMD_LENGTH] = { 0x00 };
 800abfe:	9700      	str	r7, [sp, #0]
 800ac00:	f8ad 7004 	strh.w	r7, [sp, #4]
    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_GET_STATUS_OC >> 8 );
 800ac04:	f8ad c000 	strh.w	ip, [sp]
    lr1110_hal_write_read( radio, cbuffer, cbuffer, LR1110_SYSTEM_GET_STATUS_CMD_LENGTH );
 800ac08:	f7f7 fe84 	bl	8002914 <lr1110_hal_write_read>
    stat1->command_status      = ( lr1110_system_command_status_t )( cbuffer[0] >> 1 );

    stat2->is_running_from_flash = ( ( cbuffer[1] & 0x01 ) != 0 ) ? true : false;
    stat2->chip_mode             = ( lr1110_system_chip_mode_t )( cbuffer[1] >> 1 );

    *irq_status = ( ( uint32_t ) cbuffer[2] << 24 ) + ( ( uint32_t ) cbuffer[3] << 16 ) +
 800ac0c:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800ac10:	f89d 3002 	ldrb.w	r3, [sp, #2]
                  ( ( uint32_t ) cbuffer[4] << 8 ) + ( ( uint32_t ) cbuffer[5] << 0 );
 800ac14:	f89d 7005 	ldrb.w	r7, [sp, #5]
    stat1->is_interrupt_active = ( ( cbuffer[0] & 0x01 ) != 0 ) ? true : false;
 800ac18:	f89d 2000 	ldrb.w	r2, [sp]
                  ( ( uint32_t ) cbuffer[4] << 8 ) + ( ( uint32_t ) cbuffer[5] << 0 );
 800ac1c:	f89d 1004 	ldrb.w	r1, [sp, #4]
    *irq_status = ( ( uint32_t ) cbuffer[2] << 24 ) + ( ( uint32_t ) cbuffer[3] << 16 ) +
 800ac20:	0400      	lsls	r0, r0, #16
 800ac22:	eb00 6003 	add.w	r0, r0, r3, lsl #24
    stat2->is_running_from_flash = ( ( cbuffer[1] & 0x01 ) != 0 ) ? true : false;
 800ac26:	f89d 3001 	ldrb.w	r3, [sp, #1]
                  ( ( uint32_t ) cbuffer[4] << 8 ) + ( ( uint32_t ) cbuffer[5] << 0 );
 800ac2a:	4438      	add	r0, r7
 800ac2c:	eb00 2001 	add.w	r0, r0, r1, lsl #8
    stat1->is_interrupt_active = ( ( cbuffer[0] & 0x01 ) != 0 ) ? true : false;
 800ac30:	f002 0701 	and.w	r7, r2, #1
    stat2->is_running_from_flash = ( ( cbuffer[1] & 0x01 ) != 0 ) ? true : false;
 800ac34:	f003 0101 	and.w	r1, r3, #1
    stat1->command_status      = ( lr1110_system_command_status_t )( cbuffer[0] >> 1 );
 800ac38:	0852      	lsrs	r2, r2, #1
    stat2->chip_mode             = ( lr1110_system_chip_mode_t )( cbuffer[1] >> 1 );
 800ac3a:	085b      	lsrs	r3, r3, #1
    stat1->is_interrupt_active = ( ( cbuffer[0] & 0x01 ) != 0 ) ? true : false;
 800ac3c:	706f      	strb	r7, [r5, #1]
    stat1->command_status      = ( lr1110_system_command_status_t )( cbuffer[0] >> 1 );
 800ac3e:	702a      	strb	r2, [r5, #0]
    stat2->is_running_from_flash = ( ( cbuffer[1] & 0x01 ) != 0 ) ? true : false;
 800ac40:	7061      	strb	r1, [r4, #1]
    stat2->chip_mode             = ( lr1110_system_chip_mode_t )( cbuffer[1] >> 1 );
 800ac42:	7023      	strb	r3, [r4, #0]
    *irq_status = ( ( uint32_t ) cbuffer[2] << 24 ) + ( ( uint32_t ) cbuffer[3] << 16 ) +
 800ac44:	6030      	str	r0, [r6, #0]
}
 800ac46:	b003      	add	sp, #12
 800ac48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac4a:	bf00      	nop

0800ac4c <lr1110_system_get_version>:

void lr1110_system_get_version( const void* radio, lr1110_system_version_t* version )
{
 800ac4c:	b570      	push	{r4, r5, r6, lr}
 800ac4e:	b084      	sub	sp, #16
    uint8_t rbuffer[sizeof( lr1110_system_version_t )] = { 0x00 };

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_GET_VERSION_OC >> 8 );
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_GET_VERSION_OC >> 0 );

    lr1110_hal_read( radio, cbuffer, LR1110_SYSTEM_GET_VERSION_CMD_LENGTH, rbuffer, sizeof( lr1110_system_version_t ) );
 800ac50:	2304      	movs	r3, #4
{
 800ac52:	460c      	mov	r4, r1
    lr1110_hal_read( radio, cbuffer, LR1110_SYSTEM_GET_VERSION_CMD_LENGTH, rbuffer, sizeof( lr1110_system_version_t ) );
 800ac54:	9300      	str	r3, [sp, #0]
 800ac56:	a902      	add	r1, sp, #8
 800ac58:	ab03      	add	r3, sp, #12
    uint8_t rbuffer[sizeof( lr1110_system_version_t )] = { 0x00 };
 800ac5a:	2600      	movs	r6, #0
    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_GET_VERSION_OC >> 8 );
 800ac5c:	f240 1501 	movw	r5, #257	; 0x101
    lr1110_hal_read( radio, cbuffer, LR1110_SYSTEM_GET_VERSION_CMD_LENGTH, rbuffer, sizeof( lr1110_system_version_t ) );
 800ac60:	2202      	movs	r2, #2
    uint8_t rbuffer[sizeof( lr1110_system_version_t )] = { 0x00 };
 800ac62:	9603      	str	r6, [sp, #12]
    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_GET_VERSION_OC >> 8 );
 800ac64:	f8ad 5008 	strh.w	r5, [sp, #8]
    lr1110_hal_read( radio, cbuffer, LR1110_SYSTEM_GET_VERSION_CMD_LENGTH, rbuffer, sizeof( lr1110_system_version_t ) );
 800ac68:	f7f7 fdf2 	bl	8002850 <lr1110_hal_read>

    version->hw   = rbuffer[0];
    version->type = rbuffer[1];
    version->fw   = ( ( uint16_t ) rbuffer[2] << 8 ) + ( uint16_t ) rbuffer[3];
 800ac6c:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800ac70:	f89d 300f 	ldrb.w	r3, [sp, #15]
    version->hw   = rbuffer[0];
 800ac74:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800ac78:	8021      	strh	r1, [r4, #0]
    version->fw   = ( ( uint16_t ) rbuffer[2] << 8 ) + ( uint16_t ) rbuffer[3];
 800ac7a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ac7e:	8063      	strh	r3, [r4, #2]
}
 800ac80:	b004      	add	sp, #16
 800ac82:	bd70      	pop	{r4, r5, r6, pc}

0800ac84 <lr1110_system_get_errors>:

void lr1110_system_get_errors( const void* radio, lr1110_system_errors_t* errors )
{
 800ac84:	b570      	push	{r4, r5, r6, lr}
 800ac86:	b084      	sub	sp, #16
    uint8_t rbuffer[sizeof( errors )] = { 0x00 };

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_GET_ERRORS_OC >> 8 );
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_GET_ERRORS_OC >> 0 );

    lr1110_hal_read( radio, cbuffer, LR1110_SYSTEM_GET_ERRORS_CMD_LENGTH, rbuffer, sizeof( *errors ) );
 800ac88:	2202      	movs	r2, #2
 800ac8a:	9200      	str	r2, [sp, #0]
 800ac8c:	ab03      	add	r3, sp, #12
{
 800ac8e:	460c      	mov	r4, r1
    uint8_t rbuffer[sizeof( errors )] = { 0x00 };
 800ac90:	2600      	movs	r6, #0
    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_GET_ERRORS_OC >> 8 );
 800ac92:	f640 5501 	movw	r5, #3329	; 0xd01
    lr1110_hal_read( radio, cbuffer, LR1110_SYSTEM_GET_ERRORS_CMD_LENGTH, rbuffer, sizeof( *errors ) );
 800ac96:	a902      	add	r1, sp, #8
    uint8_t rbuffer[sizeof( errors )] = { 0x00 };
 800ac98:	9603      	str	r6, [sp, #12]
    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_GET_ERRORS_OC >> 8 );
 800ac9a:	f8ad 5008 	strh.w	r5, [sp, #8]
    lr1110_hal_read( radio, cbuffer, LR1110_SYSTEM_GET_ERRORS_CMD_LENGTH, rbuffer, sizeof( *errors ) );
 800ac9e:	f7f7 fdd7 	bl	8002850 <lr1110_hal_read>

    *errors = ( ( uint16_t ) rbuffer[0] << 8 ) + ( uint16_t ) rbuffer[1];
 800aca2:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800aca6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800acaa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800acae:	8023      	strh	r3, [r4, #0]
}
 800acb0:	b004      	add	sp, #16
 800acb2:	bd70      	pop	{r4, r5, r6, pc}

0800acb4 <lr1110_system_clear_errors>:

void lr1110_system_clear_errors( const void* radio )
{
 800acb4:	b510      	push	{r4, lr}
 800acb6:	b084      	sub	sp, #16
    uint8_t cbuffer[LR1110_SYSTEM_CLEAR_ERRORS_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_CLEAR_ERRORS_OC >> 8 );
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_CLEAR_ERRORS_OC >> 0 );

    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_CLEAR_ERRORS_CMD_LENGTH, 0, 0 );
 800acb8:	2300      	movs	r3, #0
 800acba:	9300      	str	r3, [sp, #0]
    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_CLEAR_ERRORS_OC >> 8 );
 800acbc:	f640 6401 	movw	r4, #3585	; 0xe01
    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_CLEAR_ERRORS_CMD_LENGTH, 0, 0 );
 800acc0:	2202      	movs	r2, #2
 800acc2:	a903      	add	r1, sp, #12
    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_CLEAR_ERRORS_OC >> 8 );
 800acc4:	f8ad 400c 	strh.w	r4, [sp, #12]
    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_CLEAR_ERRORS_CMD_LENGTH, 0, 0 );
 800acc8:	f7f7 fd74 	bl	80027b4 <lr1110_hal_write>
}
 800accc:	b004      	add	sp, #16
 800acce:	bd10      	pop	{r4, pc}

0800acd0 <lr1110_system_calibrate>:

void lr1110_system_calibrate( const void* radio, const uint8_t calib_params )
{
 800acd0:	b530      	push	{r4, r5, lr}
 800acd2:	b085      	sub	sp, #20
    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_CALIBRATE_OC >> 8 );
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_CALIBRATE_OC >> 0 );

    cbuffer[2] = calib_params;

    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_CALIBRATE_CMD_LENGTH, 0, 0 );
 800acd4:	2300      	movs	r3, #0
{
 800acd6:	460d      	mov	r5, r1
    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_CALIBRATE_CMD_LENGTH, 0, 0 );
 800acd8:	9300      	str	r3, [sp, #0]
    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_CALIBRATE_OC >> 8 );
 800acda:	f640 7401 	movw	r4, #3841	; 0xf01
    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_CALIBRATE_CMD_LENGTH, 0, 0 );
 800acde:	2203      	movs	r2, #3
 800ace0:	a903      	add	r1, sp, #12
    cbuffer[2] = calib_params;
 800ace2:	f88d 500e 	strb.w	r5, [sp, #14]
    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_CALIBRATE_OC >> 8 );
 800ace6:	f8ad 400c 	strh.w	r4, [sp, #12]
    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_CALIBRATE_CMD_LENGTH, 0, 0 );
 800acea:	f7f7 fd63 	bl	80027b4 <lr1110_hal_write>
}
 800acee:	b005      	add	sp, #20
 800acf0:	bd30      	pop	{r4, r5, pc}
 800acf2:	bf00      	nop

0800acf4 <lr1110_system_set_regmode>:

void lr1110_system_set_regmode( const void* radio, const lr1110_regmodes_t reg_mode )
{
 800acf4:	b530      	push	{r4, r5, lr}
 800acf6:	b085      	sub	sp, #20
    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_SET_REGMODE_OC >> 8 );
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_SET_REGMODE_OC >> 0 );

    cbuffer[2] = ( uint8_t ) reg_mode;

    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_SET_REGMODE_CMD_LENGTH, 0, 0 );
 800acf8:	2300      	movs	r3, #0
{
 800acfa:	460d      	mov	r5, r1
    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_SET_REGMODE_CMD_LENGTH, 0, 0 );
 800acfc:	9300      	str	r3, [sp, #0]
    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_SET_REGMODE_OC >> 8 );
 800acfe:	f241 0401 	movw	r4, #4097	; 0x1001
    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_SET_REGMODE_CMD_LENGTH, 0, 0 );
 800ad02:	2203      	movs	r2, #3
 800ad04:	a903      	add	r1, sp, #12
    cbuffer[2] = ( uint8_t ) reg_mode;
 800ad06:	f88d 500e 	strb.w	r5, [sp, #14]
    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_SET_REGMODE_OC >> 8 );
 800ad0a:	f8ad 400c 	strh.w	r4, [sp, #12]
    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_SET_REGMODE_CMD_LENGTH, 0, 0 );
 800ad0e:	f7f7 fd51 	bl	80027b4 <lr1110_hal_write>
}
 800ad12:	b005      	add	sp, #20
 800ad14:	bd30      	pop	{r4, r5, pc}
 800ad16:	bf00      	nop

0800ad18 <lr1110_system_set_dio_as_rf_switch>:
    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_CALIBRATE_IMAGE_CMD_LENGTH, 0, 0 );
}

void lr1110_system_set_dio_as_rf_switch( const void*                            radio,
                                         const lr1110_system_rfswitch_config_t* rf_switch_configuration )
{
 800ad18:	b570      	push	{r4, r5, r6, lr}
 800ad1a:	b086      	sub	sp, #24
    cbuffer[6] = rf_switch_configuration->tx_hp;
    cbuffer[7] = rf_switch_configuration->tx_hf;
    cbuffer[8] = rf_switch_configuration->gnss;
    cbuffer[9] = rf_switch_configuration->wifi;

    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_SET_DIO_AS_RF_SWITCH_CMD_LENGTH, 0, 0 );
 800ad1c:	2300      	movs	r3, #0
    cbuffer[2] = rf_switch_configuration->enable;
 800ad1e:	780d      	ldrb	r5, [r1, #0]
    cbuffer[3] = rf_switch_configuration->standby;
 800ad20:	784c      	ldrb	r4, [r1, #1]
    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_SET_DIO_AS_RF_SWITCH_CMD_LENGTH, 0, 0 );
 800ad22:	9300      	str	r3, [sp, #0]
    cbuffer[4] = rf_switch_configuration->rx;
 800ad24:	788a      	ldrb	r2, [r1, #2]
    cbuffer[2] = rf_switch_configuration->enable;
 800ad26:	f88d 500e 	strb.w	r5, [sp, #14]
    cbuffer[3] = rf_switch_configuration->standby;
 800ad2a:	f88d 400f 	strb.w	r4, [sp, #15]
    cbuffer[5] = rf_switch_configuration->tx;
 800ad2e:	78cd      	ldrb	r5, [r1, #3]
    cbuffer[6] = rf_switch_configuration->tx_hp;
 800ad30:	790c      	ldrb	r4, [r1, #4]
    cbuffer[4] = rf_switch_configuration->rx;
 800ad32:	f88d 2010 	strb.w	r2, [sp, #16]
    cbuffer[7] = rf_switch_configuration->tx_hf;
 800ad36:	794a      	ldrb	r2, [r1, #5]
    cbuffer[8] = rf_switch_configuration->gnss;
 800ad38:	798e      	ldrb	r6, [r1, #6]
    cbuffer[5] = rf_switch_configuration->tx;
 800ad3a:	f88d 5011 	strb.w	r5, [sp, #17]
    cbuffer[6] = rf_switch_configuration->tx_hp;
 800ad3e:	f88d 4012 	strb.w	r4, [sp, #18]
    cbuffer[9] = rf_switch_configuration->wifi;
 800ad42:	79cd      	ldrb	r5, [r1, #7]
    cbuffer[7] = rf_switch_configuration->tx_hf;
 800ad44:	f88d 2013 	strb.w	r2, [sp, #19]
    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_SET_DIO_AS_RF_SWITCH_OC >> 8 );
 800ad48:	f241 2401 	movw	r4, #4609	; 0x1201
    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_SET_DIO_AS_RF_SWITCH_CMD_LENGTH, 0, 0 );
 800ad4c:	220a      	movs	r2, #10
 800ad4e:	a903      	add	r1, sp, #12
    cbuffer[8] = rf_switch_configuration->gnss;
 800ad50:	f88d 6014 	strb.w	r6, [sp, #20]
    cbuffer[9] = rf_switch_configuration->wifi;
 800ad54:	f88d 5015 	strb.w	r5, [sp, #21]
    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_SET_DIO_AS_RF_SWITCH_OC >> 8 );
 800ad58:	f8ad 400c 	strh.w	r4, [sp, #12]
    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_SET_DIO_AS_RF_SWITCH_CMD_LENGTH, 0, 0 );
 800ad5c:	f7f7 fd2a 	bl	80027b4 <lr1110_hal_write>
}
 800ad60:	b006      	add	sp, #24
 800ad62:	bd70      	pop	{r4, r5, r6, pc}

0800ad64 <lr1110_system_set_dio_irq_params>:

void lr1110_system_set_dio_irq_params( const void* radio, const uint32_t irqs_to_enable_dio1,
                                       const uint32_t irqs_to_enable_dio2 )
{
 800ad64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad66:	b087      	sub	sp, #28
    cbuffer[6] = ( uint8_t )( irqs_to_enable_dio2 >> 24 );
    cbuffer[7] = ( uint8_t )( irqs_to_enable_dio2 >> 16 );
    cbuffer[8] = ( uint8_t )( irqs_to_enable_dio2 >> 8 );
    cbuffer[9] = ( uint8_t )( irqs_to_enable_dio2 >> 0 );

    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_SET_DIO_IRQ_PARAMS_CMD_LENGTH, 0, 0 );
 800ad68:	2300      	movs	r3, #0
    cbuffer[2] = ( uint8_t )( irqs_to_enable_dio1 >> 24 );
 800ad6a:	0e0d      	lsrs	r5, r1, #24
    cbuffer[3] = ( uint8_t )( irqs_to_enable_dio1 >> 16 );
 800ad6c:	0c0c      	lsrs	r4, r1, #16
    cbuffer[4] = ( uint8_t )( irqs_to_enable_dio1 >> 8 );
 800ad6e:	ba49      	rev16	r1, r1
    cbuffer[2] = ( uint8_t )( irqs_to_enable_dio1 >> 24 );
 800ad70:	f88d 500e 	strb.w	r5, [sp, #14]
    cbuffer[6] = ( uint8_t )( irqs_to_enable_dio2 >> 24 );
 800ad74:	0e17      	lsrs	r7, r2, #24
    cbuffer[3] = ( uint8_t )( irqs_to_enable_dio1 >> 16 );
 800ad76:	f88d 400f 	strb.w	r4, [sp, #15]
    cbuffer[7] = ( uint8_t )( irqs_to_enable_dio2 >> 16 );
 800ad7a:	0c16      	lsrs	r6, r2, #16
    cbuffer[8] = ( uint8_t )( irqs_to_enable_dio2 >> 8 );
 800ad7c:	ba54      	rev16	r4, r2
    cbuffer[4] = ( uint8_t )( irqs_to_enable_dio1 >> 8 );
 800ad7e:	f8ad 1010 	strh.w	r1, [sp, #16]
    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_SET_DIO_IRQ_PARAMS_CMD_LENGTH, 0, 0 );
 800ad82:	9300      	str	r3, [sp, #0]
    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_SET_DIOIRQPARAMS_OC >> 8 );
 800ad84:	f241 3501 	movw	r5, #4865	; 0x1301
    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_SET_DIO_IRQ_PARAMS_CMD_LENGTH, 0, 0 );
 800ad88:	220a      	movs	r2, #10
 800ad8a:	a903      	add	r1, sp, #12
    cbuffer[6] = ( uint8_t )( irqs_to_enable_dio2 >> 24 );
 800ad8c:	f88d 7012 	strb.w	r7, [sp, #18]
    cbuffer[7] = ( uint8_t )( irqs_to_enable_dio2 >> 16 );
 800ad90:	f88d 6013 	strb.w	r6, [sp, #19]
    cbuffer[8] = ( uint8_t )( irqs_to_enable_dio2 >> 8 );
 800ad94:	f8ad 4014 	strh.w	r4, [sp, #20]
    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_SET_DIOIRQPARAMS_OC >> 8 );
 800ad98:	f8ad 500c 	strh.w	r5, [sp, #12]
    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_SET_DIO_IRQ_PARAMS_CMD_LENGTH, 0, 0 );
 800ad9c:	f7f7 fd0a 	bl	80027b4 <lr1110_hal_write>
}
 800ada0:	b007      	add	sp, #28
 800ada2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ada4 <lr1110_system_clear_irq>:

void lr1110_system_clear_irq( const void* radio, const uint32_t irqs_to_clear )
{
 800ada4:	b570      	push	{r4, r5, r6, lr}
 800ada6:	b084      	sub	sp, #16
    cbuffer[2] = ( uint8_t )( irqs_to_clear >> 24 );
    cbuffer[3] = ( uint8_t )( irqs_to_clear >> 16 );
    cbuffer[4] = ( uint8_t )( irqs_to_clear >> 8 );
    cbuffer[5] = ( uint8_t )( irqs_to_clear >> 0 );

    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_CLEAR_IRQ_CMD_LENGTH, 0, 0 );
 800ada8:	2300      	movs	r3, #0
    cbuffer[2] = ( uint8_t )( irqs_to_clear >> 24 );
 800adaa:	0e0a      	lsrs	r2, r1, #24
    cbuffer[3] = ( uint8_t )( irqs_to_clear >> 16 );
 800adac:	0c0e      	lsrs	r6, r1, #16
    cbuffer[4] = ( uint8_t )( irqs_to_clear >> 8 );
 800adae:	ba4c      	rev16	r4, r1
    cbuffer[2] = ( uint8_t )( irqs_to_clear >> 24 );
 800adb0:	f88d 200a 	strb.w	r2, [sp, #10]
    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_CLEAR_IRQ_CMD_LENGTH, 0, 0 );
 800adb4:	9300      	str	r3, [sp, #0]
    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_CLEAR_IRQ_OC >> 8 );
 800adb6:	f241 4501 	movw	r5, #5121	; 0x1401
    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_CLEAR_IRQ_CMD_LENGTH, 0, 0 );
 800adba:	2206      	movs	r2, #6
 800adbc:	a902      	add	r1, sp, #8
    cbuffer[3] = ( uint8_t )( irqs_to_clear >> 16 );
 800adbe:	f88d 600b 	strb.w	r6, [sp, #11]
    cbuffer[4] = ( uint8_t )( irqs_to_clear >> 8 );
 800adc2:	f8ad 400c 	strh.w	r4, [sp, #12]
    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_CLEAR_IRQ_OC >> 8 );
 800adc6:	f8ad 5008 	strh.w	r5, [sp, #8]
    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_CLEAR_IRQ_CMD_LENGTH, 0, 0 );
 800adca:	f7f7 fcf3 	bl	80027b4 <lr1110_hal_write>
}
 800adce:	b004      	add	sp, #16
 800add0:	bd70      	pop	{r4, r5, r6, pc}
 800add2:	bf00      	nop

0800add4 <lr1110_system_set_tcxo_mode>:
    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_CONFIG_LFCLK_CMD_LENGTH, 0, 0 );
}

void lr1110_system_set_tcxo_mode( const void* radio, const lr1110_system_tcxo_supply_voltage_t tune,
                                  const uint32_t timeout )
{
 800add4:	b570      	push	{r4, r5, r6, lr}
 800add6:	b084      	sub	sp, #16

    cbuffer[3] = ( uint8_t )( timeout >> 16 );
    cbuffer[4] = ( uint8_t )( timeout >> 8 );
    cbuffer[5] = ( uint8_t )( timeout >> 0 );

    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_SET_TCXO_MODE_CMD_LENGTH, 0, 0 );
 800add8:	2300      	movs	r3, #0
    cbuffer[3] = ( uint8_t )( timeout >> 16 );
 800adda:	0c16      	lsrs	r6, r2, #16
    cbuffer[4] = ( uint8_t )( timeout >> 8 );
 800addc:	ba54      	rev16	r4, r2
    cbuffer[2] = ( uint8_t ) tune;
 800adde:	f88d 100a 	strb.w	r1, [sp, #10]
    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_SET_TCXO_MODE_CMD_LENGTH, 0, 0 );
 800ade2:	9300      	str	r3, [sp, #0]
    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_SET_TCXO_MODE_OC >> 8 );
 800ade4:	f241 7501 	movw	r5, #5889	; 0x1701
    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_SET_TCXO_MODE_CMD_LENGTH, 0, 0 );
 800ade8:	2206      	movs	r2, #6
 800adea:	a902      	add	r1, sp, #8
    cbuffer[3] = ( uint8_t )( timeout >> 16 );
 800adec:	f88d 600b 	strb.w	r6, [sp, #11]
    cbuffer[4] = ( uint8_t )( timeout >> 8 );
 800adf0:	f8ad 400c 	strh.w	r4, [sp, #12]
    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_SET_TCXO_MODE_OC >> 8 );
 800adf4:	f8ad 5008 	strh.w	r5, [sp, #8]
    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_SET_TCXO_MODE_CMD_LENGTH, 0, 0 );
 800adf8:	f7f7 fcdc 	bl	80027b4 <lr1110_hal_write>
}
 800adfc:	b004      	add	sp, #16
 800adfe:	bd70      	pop	{r4, r5, r6, pc}

0800ae00 <lr1110_system_set_sleep>:
    *temp = ( ( uint16_t ) rbuffer[0] << 8 ) + ( uint16_t ) rbuffer[1];
}

void lr1110_system_set_sleep( const void* radio, const lr1110_system_sleep_config_t sleep_config,
                              const uint32_t sleep_time )
{
 800ae00:	b570      	push	{r4, r5, r6, lr}
 800ae02:	b086      	sub	sp, #24
    uint8_t cbuffer[LR1110_SYSTEM_SET_SLEEP_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_SET_SLEEP_OC >> 8 );
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_SET_SLEEP_OC >> 0 );

    cbuffer[2] = ( sleep_config.is_rtc_timeout << 1 ) + sleep_config.is_warm_start;
 800ae04:	f3c1 2507 	ubfx	r5, r1, #8, #8
    cbuffer[3] = ( uint8_t )( sleep_time >> 24 );
    cbuffer[4] = ( uint8_t )( sleep_time >> 16 );
    cbuffer[5] = ( uint8_t )( sleep_time >> 8 );
    cbuffer[6] = ( uint8_t )( sleep_time >> 0 );

    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_SET_SLEEP_CMD_LENGTH, 0, 0 );
 800ae08:	2300      	movs	r3, #0
{
 800ae0a:	f8ad 100c 	strh.w	r1, [sp, #12]
    cbuffer[3] = ( uint8_t )( sleep_time >> 24 );
 800ae0e:	0e16      	lsrs	r6, r2, #24
    cbuffer[2] = ( sleep_config.is_rtc_timeout << 1 ) + sleep_config.is_warm_start;
 800ae10:	eb01 0545 	add.w	r5, r1, r5, lsl #1
    cbuffer[4] = ( uint8_t )( sleep_time >> 16 );
 800ae14:	0c11      	lsrs	r1, r2, #16
    cbuffer[6] = ( uint8_t )( sleep_time >> 0 );
 800ae16:	f88d 2016 	strb.w	r2, [sp, #22]
    cbuffer[5] = ( uint8_t )( sleep_time >> 8 );
 800ae1a:	0a14      	lsrs	r4, r2, #8
    cbuffer[3] = ( uint8_t )( sleep_time >> 24 );
 800ae1c:	f88d 6013 	strb.w	r6, [sp, #19]
    cbuffer[4] = ( uint8_t )( sleep_time >> 16 );
 800ae20:	f88d 1014 	strb.w	r1, [sp, #20]
    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_SET_SLEEP_CMD_LENGTH, 0, 0 );
 800ae24:	9300      	str	r3, [sp, #0]
    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_SET_SLEEP_OC >> 8 );
 800ae26:	f641 3601 	movw	r6, #6913	; 0x1b01
    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_SET_SLEEP_CMD_LENGTH, 0, 0 );
 800ae2a:	2207      	movs	r2, #7
 800ae2c:	a904      	add	r1, sp, #16
    cbuffer[5] = ( uint8_t )( sleep_time >> 8 );
 800ae2e:	f88d 4015 	strb.w	r4, [sp, #21]
    cbuffer[2] = ( sleep_config.is_rtc_timeout << 1 ) + sleep_config.is_warm_start;
 800ae32:	f88d 5012 	strb.w	r5, [sp, #18]
    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_SET_SLEEP_OC >> 8 );
 800ae36:	f8ad 6010 	strh.w	r6, [sp, #16]
    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_SET_SLEEP_CMD_LENGTH, 0, 0 );
 800ae3a:	f7f7 fcbb 	bl	80027b4 <lr1110_hal_write>
}
 800ae3e:	b006      	add	sp, #24
 800ae40:	bd70      	pop	{r4, r5, r6, pc}
 800ae42:	bf00      	nop

0800ae44 <lr1110_system_set_standby>:

void lr1110_system_set_standby( const void* radio, const lr1110_system_standby_config_t standby_config )
{
 800ae44:	b530      	push	{r4, r5, lr}
 800ae46:	b085      	sub	sp, #20
    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_SET_STANDBY_OC >> 8 );
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_SET_STANDBY_OC >> 0 );

    cbuffer[2] = ( uint8_t ) standby_config;

    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_SET_STANDBY_CMD_LENGTH, 0, 0 );
 800ae48:	2300      	movs	r3, #0
{
 800ae4a:	460d      	mov	r5, r1
    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_SET_STANDBY_CMD_LENGTH, 0, 0 );
 800ae4c:	9300      	str	r3, [sp, #0]
    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_SET_STANDBY_OC >> 8 );
 800ae4e:	f641 4401 	movw	r4, #7169	; 0x1c01
    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_SET_STANDBY_CMD_LENGTH, 0, 0 );
 800ae52:	2203      	movs	r2, #3
 800ae54:	a903      	add	r1, sp, #12
    cbuffer[2] = ( uint8_t ) standby_config;
 800ae56:	f88d 500e 	strb.w	r5, [sp, #14]
    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_SET_STANDBY_OC >> 8 );
 800ae5a:	f8ad 400c 	strh.w	r4, [sp, #12]
    lr1110_hal_write( radio, cbuffer, LR1110_SYSTEM_SET_STANDBY_CMD_LENGTH, 0, 0 );
 800ae5e:	f7f7 fca9 	bl	80027b4 <lr1110_hal_write>
}
 800ae62:	b005      	add	sp, #20
 800ae64:	bd30      	pop	{r4, r5, pc}
 800ae66:	bf00      	nop

0800ae68 <lr1110_system_get_random_number>:

    lr1110_hal_read( radio, cbuffer, LR1110_SYSTEM_READ_PIN_CMD_LENGTH, pin, LR1110_SYSTEM_PIN_LENGTH );
}

void lr1110_system_get_random_number( const void* radio, uint32_t* random_number )
{
 800ae68:	b510      	push	{r4, lr}
 800ae6a:	b084      	sub	sp, #16
    uint8_t cbuffer[LR1110_SYSTEM_GET_RANDOM_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_GET_RANDOM_OC >> 8 );
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_GET_RANDOM_OC >> 0 );

    lr1110_hal_read( radio, cbuffer, LR1110_SYSTEM_GET_RANDOM_CMD_LENGTH, ( uint8_t* ) random_number,
 800ae6c:	2204      	movs	r2, #4
{
 800ae6e:	460b      	mov	r3, r1
    lr1110_hal_read( radio, cbuffer, LR1110_SYSTEM_GET_RANDOM_CMD_LENGTH, ( uint8_t* ) random_number,
 800ae70:	9200      	str	r2, [sp, #0]
    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_GET_RANDOM_OC >> 8 );
 800ae72:	f242 0401 	movw	r4, #8193	; 0x2001
    lr1110_hal_read( radio, cbuffer, LR1110_SYSTEM_GET_RANDOM_CMD_LENGTH, ( uint8_t* ) random_number,
 800ae76:	2202      	movs	r2, #2
 800ae78:	a903      	add	r1, sp, #12
    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_GET_RANDOM_OC >> 8 );
 800ae7a:	f8ad 400c 	strh.w	r4, [sp, #12]
    lr1110_hal_read( radio, cbuffer, LR1110_SYSTEM_GET_RANDOM_CMD_LENGTH, ( uint8_t* ) random_number,
 800ae7e:	f7f7 fce7 	bl	8002850 <lr1110_hal_read>
                     sizeof( uint32_t ) );
}
 800ae82:	b004      	add	sp, #16
 800ae84:	bd10      	pop	{r4, pc}
 800ae86:	bf00      	nop

0800ae88 <lr1110_wifi_scan>:

void lr1110_wifi_scan( const void* radio, const lr1110_wifi_signal_type_scan_t signal_type,
                       const lr1110_wifi_channel_mask_t channels, const lr1110_wifi_mode_t scan_mode,
                       const uint8_t max_results, const uint8_t nb_scan_per_channel, const uint16_t timeout_in_ms,
                       const bool abort_on_timeout )
{
 800ae88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae8a:	b087      	sub	sp, #28
 800ae8c:	469c      	mov	ip, r3
 800ae8e:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 800ae92:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
    const uint8_t cbuffer[LR1110_WIFI_SCAN_CMD_LENGTH] = {
 800ae96:	f88d 5012 	strb.w	r5, [sp, #18]
        ( uint8_t )( LR1110_WIFI_SCAN_OC >> 8 ),
        ( uint8_t ) LR1110_WIFI_SCAN_OC,
        ( uint8_t ) signal_type,
        ( uint8_t )( channels >> 8 ),
        ( uint8_t ) channels,
 800ae9a:	f88d 2010 	strb.w	r2, [sp, #16]
        ( uint8_t ) nb_scan_per_channel,
        ( uint8_t )( timeout_in_ms >> 8 ),
        ( uint8_t ) timeout_in_ms,
        ( uint8_t ) abort_on_timeout,
    };
    lr1110_hal_write( radio, cbuffer, LR1110_WIFI_SCAN_CMD_LENGTH, 0, 0 );
 800ae9e:	2500      	movs	r5, #0
        ( uint8_t )( channels >> 8 ),
 800aea0:	0a12      	lsrs	r2, r2, #8
{
 800aea2:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 800aea6:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
    lr1110_hal_write( radio, cbuffer, LR1110_WIFI_SCAN_CMD_LENGTH, 0, 0 );
 800aeaa:	9500      	str	r5, [sp, #0]
 800aeac:	462b      	mov	r3, r5
        ( uint8_t )( channels >> 8 ),
 800aeae:	f88d 200f 	strb.w	r2, [sp, #15]
    const uint8_t cbuffer[LR1110_WIFI_SCAN_CMD_LENGTH] = {
 800aeb2:	f88d 100e 	strb.w	r1, [sp, #14]
 800aeb6:	ba64      	rev16	r4, r4
 800aeb8:	2503      	movs	r5, #3
    lr1110_hal_write( radio, cbuffer, LR1110_WIFI_SCAN_CMD_LENGTH, 0, 0 );
 800aeba:	220b      	movs	r2, #11
 800aebc:	a903      	add	r1, sp, #12
    const uint8_t cbuffer[LR1110_WIFI_SCAN_CMD_LENGTH] = {
 800aebe:	f88d c011 	strb.w	ip, [sp, #17]
 800aec2:	f8ad 4014 	strh.w	r4, [sp, #20]
 800aec6:	f88d 7013 	strb.w	r7, [sp, #19]
 800aeca:	f88d 6016 	strb.w	r6, [sp, #22]
 800aece:	f8ad 500c 	strh.w	r5, [sp, #12]
    lr1110_hal_write( radio, cbuffer, LR1110_WIFI_SCAN_CMD_LENGTH, 0, 0 );
 800aed2:	f7f7 fc6f 	bl	80027b4 <lr1110_hal_write>
}
 800aed6:	b007      	add	sp, #28
 800aed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aeda:	bf00      	nop

0800aedc <lr1110_wifi_get_nb_results>:
    };
    lr1110_hal_write( radio, cbuffer, LR1110_WIFI_CONFIGURE_HARDWARE_DEBARKER_CMD_LENGTH, 0, 0 );
}

void lr1110_wifi_get_nb_results( const void* radio, uint8_t* nb_results )
{
 800aedc:	b510      	push	{r4, lr}
 800aede:	b084      	sub	sp, #16
    const uint8_t cbuffer[LR1110_WIFI_GET_RESULT_SIZE_CMD_LENGTH] = {
        ( uint8_t )( LR1110_WIFI_GET_RESULT_SIZE_OC >> 8 ),
        ( uint8_t )( LR1110_WIFI_GET_RESULT_SIZE_OC & 0x00FF ),
    };

    lr1110_hal_read( radio, cbuffer, LR1110_WIFI_GET_RESULT_SIZE_CMD_LENGTH, nb_results, sizeof( *nb_results ) );
 800aee0:	2201      	movs	r2, #1
{
 800aee2:	460b      	mov	r3, r1
    lr1110_hal_read( radio, cbuffer, LR1110_WIFI_GET_RESULT_SIZE_CMD_LENGTH, nb_results, sizeof( *nb_results ) );
 800aee4:	9200      	str	r2, [sp, #0]
    const uint8_t cbuffer[LR1110_WIFI_GET_RESULT_SIZE_CMD_LENGTH] = {
 800aee6:	f240 5403 	movw	r4, #1283	; 0x503
    lr1110_hal_read( radio, cbuffer, LR1110_WIFI_GET_RESULT_SIZE_CMD_LENGTH, nb_results, sizeof( *nb_results ) );
 800aeea:	2202      	movs	r2, #2
 800aeec:	a903      	add	r1, sp, #12
    const uint8_t cbuffer[LR1110_WIFI_GET_RESULT_SIZE_CMD_LENGTH] = {
 800aeee:	f8ad 400c 	strh.w	r4, [sp, #12]
    lr1110_hal_read( radio, cbuffer, LR1110_WIFI_GET_RESULT_SIZE_CMD_LENGTH, nb_results, sizeof( *nb_results ) );
 800aef2:	f7f7 fcad 	bl	8002850 <lr1110_hal_read>
}
 800aef6:	b004      	add	sp, #16
 800aef8:	bd10      	pop	{r4, pc}
 800aefa:	bf00      	nop

0800aefc <lr1110_wifi_read_basic_complete_results>:

void lr1110_wifi_read_basic_complete_results( const void* radio, const uint8_t start_result_index,
                                              const uint8_t nb_results, lr1110_wifi_basic_complete_result_t* results )
{
 800aefc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af00:	ed2d 8b02 	vpush	{d8}
    uint8_t       result_buffer[LR1110_WIFI_MAX_SIZE_PER_SPI( LR1110_WIFI_BASIC_COMPLETE_RESULT_SIZE )] = { 0 };
 800af04:	2600      	movs	r6, #0
{
 800af06:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
 800af0a:	460c      	mov	r4, r1
 800af0c:	4615      	mov	r5, r2
 800af0e:	4607      	mov	r7, r0
    uint8_t       result_buffer[LR1110_WIFI_MAX_SIZE_PER_SPI( LR1110_WIFI_BASIC_COMPLETE_RESULT_SIZE )] = { 0 };
 800af10:	4631      	mov	r1, r6
 800af12:	a807      	add	r0, sp, #28
 800af14:	f44f 722f 	mov.w	r2, #700	; 0x2bc
{
 800af18:	9402      	str	r4, [sp, #8]
    uint8_t       result_buffer[LR1110_WIFI_MAX_SIZE_PER_SPI( LR1110_WIFI_BASIC_COMPLETE_RESULT_SIZE )] = { 0 };
 800af1a:	9606      	str	r6, [sp, #24]
{
 800af1c:	461c      	mov	r4, r3
    uint8_t       result_buffer[LR1110_WIFI_MAX_SIZE_PER_SPI( LR1110_WIFI_BASIC_COMPLETE_RESULT_SIZE )] = { 0 };
 800af1e:	f008 f831 	bl	8012f84 <memset>
                                             uint8_t* result_buffer, lr1110_wifi_result_interface_t result_structures )
{
    uint8_t index_to_read     = index_result_start;
    uint8_t remaining_results = nb_results;

    while( remaining_results > 0 )
 800af22:	2d00      	cmp	r5, #0
 800af24:	f000 8098 	beq.w	800b058 <lr1110_wifi_read_basic_complete_results+0x15c>
 800af28:	1d23      	adds	r3, r4, #4
 800af2a:	ee08 7a10 	vmov	s16, r7
 800af2e:	9303      	str	r3, [sp, #12]
    {
        uint8_t results_to_read = MIN( remaining_results, nb_results_per_chunk_max );
 800af30:	2d20      	cmp	r5, #32
 800af32:	462c      	mov	r4, r5
 800af34:	bf28      	it	cs
 800af36:	2420      	movcs	r4, #32
    const uint16_t size_total                                  = n_elem * size_single_elem;
 800af38:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    const uint8_t  cbuffer[LR1110_WIFI_READ_RESULT_CMD_LENGTH] = { ( uint8_t )( LR1110_WIFI_READ_RESULT_OC >> 8 ),
 800af3c:	f240 6603 	movw	r6, #1539	; 0x603
    const uint16_t size_total                                  = n_elem * size_single_elem;
 800af40:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    lr1110_hal_read( radio, cbuffer, LR1110_WIFI_READ_RESULT_CMD_LENGTH, buffer, size_total );
 800af44:	005b      	lsls	r3, r3, #1
    const uint8_t  cbuffer[LR1110_WIFI_READ_RESULT_CMD_LENGTH] = { ( uint8_t )( LR1110_WIFI_READ_RESULT_OC >> 8 ),
 800af46:	f8ad 6010 	strh.w	r6, [sp, #16]
 800af4a:	9e02      	ldr	r6, [sp, #8]
    lr1110_hal_read( radio, cbuffer, LR1110_WIFI_READ_RESULT_CMD_LENGTH, buffer, size_total );
 800af4c:	9300      	str	r3, [sp, #0]
 800af4e:	2205      	movs	r2, #5
 800af50:	ab06      	add	r3, sp, #24
    const uint8_t  cbuffer[LR1110_WIFI_READ_RESULT_CMD_LENGTH] = { ( uint8_t )( LR1110_WIFI_READ_RESULT_OC >> 8 ),
 800af52:	f88d 6012 	strb.w	r6, [sp, #18]
    lr1110_hal_read( radio, cbuffer, LR1110_WIFI_READ_RESULT_CMD_LENGTH, buffer, size_total );
 800af56:	ee18 0a10 	vmov	r0, s16
 800af5a:	a904      	add	r1, sp, #16
    const uint8_t  cbuffer[LR1110_WIFI_READ_RESULT_CMD_LENGTH] = { ( uint8_t )( LR1110_WIFI_READ_RESULT_OC >> 8 ),
 800af5c:	f04f 0601 	mov.w	r6, #1
 800af60:	f88d 6014 	strb.w	r6, [sp, #20]
 800af64:	f88d 4013 	strb.w	r4, [sp, #19]
    lr1110_hal_read( radio, cbuffer, LR1110_WIFI_READ_RESULT_CMD_LENGTH, buffer, size_total );
 800af68:	f7f7 fc72 	bl	8002850 <lr1110_hal_read>
}

static void interpret_basic_complete_result_from_buffer( const uint8_t nb_results, const uint8_t* buffer,
                                                         lr1110_wifi_basic_complete_result_t* result )
{
    for( uint8_t result_index = 0; result_index < nb_results; result_index++ )
 800af6c:	9a03      	ldr	r2, [sp, #12]
 800af6e:	ab07      	add	r3, sp, #28
 800af70:	eb02 1c44 	add.w	ip, r2, r4, lsl #5
    {
        const uint16_t                       local_index_start = LR1110_WIFI_BASIC_COMPLETE_RESULT_SIZE * result_index;
        lr1110_wifi_basic_complete_result_t* local_wifi_result = &result[result_index];
        local_wifi_result->data_rate_info_byte                 = buffer[local_index_start + 0];
 800af74:	f813 0c04 	ldrb.w	r0, [r3, #-4]
        local_wifi_result->channel_info_byte                   = buffer[local_index_start + 1];
        local_wifi_result->rssi                                = buffer[local_index_start + 2];
 800af78:	f813 6c02 	ldrb.w	r6, [r3, #-2]
        local_wifi_result->data_rate_info_byte                 = buffer[local_index_start + 0];
 800af7c:	f802 0c04 	strb.w	r0, [r2, #-4]
        local_wifi_result->frame_type_info_byte                = buffer[local_index_start + 3];
 800af80:	4611      	mov	r1, r2
 800af82:	f813 0c01 	ldrb.w	r0, [r3, #-1]
        local_wifi_result->channel_info_byte                   = buffer[local_index_start + 1];
 800af86:	f813 7c03 	ldrb.w	r7, [r3, #-3]
        local_wifi_result->rssi                                = buffer[local_index_start + 2];
 800af8a:	f802 6c02 	strb.w	r6, [r2, #-2]
        local_wifi_result->channel_info_byte                   = buffer[local_index_start + 1];
 800af8e:	f802 7c03 	strb.w	r7, [r2, #-3]
        local_wifi_result->frame_type_info_byte                = buffer[local_index_start + 3];
 800af92:	1d56      	adds	r6, r2, #5
 800af94:	f801 0d01 	strb.w	r0, [r1, #-1]!
 800af98:	4618      	mov	r0, r3
        mac_address[field_mac_index] = buffer[index_in_buffer + field_mac_index];
 800af9a:	f810 7b01 	ldrb.w	r7, [r0], #1
 800af9e:	f801 7f01 	strb.w	r7, [r1, #1]!
    for( uint8_t field_mac_index = 0; field_mac_index < LR1110_WIFI_MAC_ADDRESS_LENGTH; field_mac_index++ )
 800afa2:	428e      	cmp	r6, r1
 800afa4:	d1f9      	bne.n	800af9a <lr1110_wifi_read_basic_complete_results+0x9e>
    return ( ( uint64_t )( array[index] ) << 56 ) + ( ( uint64_t )( array[index + 1] ) << 48 ) +
 800afa6:	7a18      	ldrb	r0, [r3, #8]
 800afa8:	7a5e      	ldrb	r6, [r3, #9]
           ( ( uint64_t )( array[index + 6] ) << 8 ) + ( uint64_t )( array[index + 7] );
 800afaa:	f893 a00f 	ldrb.w	sl, [r3, #15]
           ( ( uint64_t )( array[index + 2] ) << 40 ) + ( ( uint64_t )( array[index + 3] ) << 32 ) +
 800afae:	f893 800a 	ldrb.w	r8, [r3, #10]
    return ( ( uint64_t )( array[index] ) << 56 ) + ( ( uint64_t )( array[index + 1] ) << 48 ) +
 800afb2:	2100      	movs	r1, #0
 800afb4:	4689      	mov	r9, r1
           ( ( uint64_t )( array[index + 6] ) << 8 ) + ( uint64_t )( array[index + 7] );
 800afb6:	eb19 0e09 	adds.w	lr, r9, r9
    return ( ( uint64_t )( array[index] ) << 56 ) + ( ( uint64_t )( array[index + 1] ) << 48 ) +
 800afba:	ea4f 6000 	mov.w	r0, r0, lsl #24
 800afbe:	ea4f 4606 	mov.w	r6, r6, lsl #16
           ( ( uint64_t )( array[index + 2] ) << 40 ) + ( ( uint64_t )( array[index + 3] ) << 32 ) +
 800afc2:	4649      	mov	r1, r9
           ( ( uint64_t )( array[index + 6] ) << 8 ) + ( uint64_t )( array[index + 7] );
 800afc4:	eb40 0606 	adc.w	r6, r0, r6
 800afc8:	f04f 0b00 	mov.w	fp, #0
 800afcc:	eb1e 0e0a 	adds.w	lr, lr, sl
 800afd0:	eb46 060b 	adc.w	r6, r6, fp
           ( ( uint64_t )( array[index + 2] ) << 40 ) + ( ( uint64_t )( array[index + 3] ) << 32 ) +
 800afd4:	ea4f 2808 	mov.w	r8, r8, lsl #8
           ( ( uint64_t )( array[index + 6] ) << 8 ) + ( uint64_t )( array[index + 7] );
 800afd8:	eb1e 0701 	adds.w	r7, lr, r1
 800afdc:	eb46 0608 	adc.w	r6, r6, r8
           ( ( uint64_t )( array[index + 4] ) << 24 ) + ( ( uint64_t )( array[index + 5] ) << 16 ) +
 800afe0:	f893 800c 	ldrb.w	r8, [r3, #12]
           ( ( uint64_t )( array[index + 2] ) << 40 ) + ( ( uint64_t )( array[index + 3] ) << 32 ) +
 800afe4:	7ad8      	ldrb	r0, [r3, #11]
           ( ( uint64_t )( array[index + 4] ) << 24 ) + ( ( uint64_t )( array[index + 5] ) << 16 ) +
 800afe6:	f893 900d 	ldrb.w	r9, [r3, #13]
    return ( uint16_t )( array[index] << 8 ) + ( ( uint16_t )( array[index + 1] ) );
 800afea:	f893 e006 	ldrb.w	lr, [r3, #6]
           ( ( uint64_t )( array[index + 6] ) << 8 ) + ( uint64_t )( array[index + 7] );
 800afee:	187f      	adds	r7, r7, r1
           ( ( uint64_t )( array[index + 4] ) << 24 ) + ( ( uint64_t )( array[index + 5] ) << 16 ) +
 800aff0:	ea4f 6808 	mov.w	r8, r8, lsl #24
           ( ( uint64_t )( array[index + 6] ) << 8 ) + ( uint64_t )( array[index + 7] );
 800aff4:	eb40 0606 	adc.w	r6, r0, r6
 800aff8:	eb17 0108 	adds.w	r1, r7, r8
           ( ( uint64_t )( array[index + 4] ) << 24 ) + ( ( uint64_t )( array[index + 5] ) << 16 ) +
 800affc:	f04f 0800 	mov.w	r8, #0
           ( ( uint64_t )( array[index + 6] ) << 8 ) + ( uint64_t )( array[index + 7] );
 800b000:	eb46 0808 	adc.w	r8, r6, r8
 800b004:	7b9e      	ldrb	r6, [r3, #14]
    return ( uint16_t )( array[index] << 8 ) + ( ( uint16_t )( array[index + 1] ) );
 800b006:	79df      	ldrb	r7, [r3, #7]
           ( ( uint64_t )( array[index + 4] ) << 24 ) + ( ( uint64_t )( array[index + 5] ) << 16 ) +
 800b008:	ea4f 4009 	mov.w	r0, r9, lsl #16
           ( ( uint64_t )( array[index + 6] ) << 8 ) + ( uint64_t )( array[index + 7] );
 800b00c:	1809      	adds	r1, r1, r0
 800b00e:	ea4f 2606 	mov.w	r6, r6, lsl #8
           ( ( uint64_t )( array[index + 4] ) << 24 ) + ( ( uint64_t )( array[index + 5] ) << 16 ) +
 800b012:	f04f 0000 	mov.w	r0, #0
           ( ( uint64_t )( array[index + 6] ) << 8 ) + ( uint64_t )( array[index + 7] );
 800b016:	eb48 0000 	adc.w	r0, r8, r0
    return ( uint16_t )( array[index] << 8 ) + ( ( uint16_t )( array[index + 1] ) );
 800b01a:	f893 9010 	ldrb.w	r9, [r3, #16]
           ( ( uint64_t )( array[index + 6] ) << 8 ) + ( uint64_t )( array[index + 7] );
 800b01e:	1989      	adds	r1, r1, r6
    return ( uint16_t )( array[index] << 8 ) + ( ( uint16_t )( array[index + 1] ) );
 800b020:	7c5e      	ldrb	r6, [r3, #17]
        lr1110_wifi_read_mac_address_from_buffer( buffer, local_index_start + 4, local_wifi_result->mac_address );
        local_wifi_result->phi_offset       = uint16_from_array( buffer, local_index_start + 10 );
        local_wifi_result->timestamp_us     = uint64_from_array( buffer, local_index_start + 12 );
 800b022:	60d1      	str	r1, [r2, #12]
           ( ( uint64_t )( array[index + 6] ) << 8 ) + ( uint64_t )( array[index + 7] );
 800b024:	f04f 0100 	mov.w	r1, #0
 800b028:	eb40 0101 	adc.w	r1, r0, r1
    return ( uint16_t )( array[index] << 8 ) + ( ( uint16_t )( array[index + 1] ) );
 800b02c:	eb07 2e0e 	add.w	lr, r7, lr, lsl #8
 800b030:	eb06 2009 	add.w	r0, r6, r9, lsl #8
        local_wifi_result->timestamp_us     = uint64_from_array( buffer, local_index_start + 12 );
 800b034:	6111      	str	r1, [r2, #16]
        local_wifi_result->phi_offset       = uint16_from_array( buffer, local_index_start + 10 );
 800b036:	f8a2 e006 	strh.w	lr, [r2, #6]
        local_wifi_result->beacon_period_tu = uint16_from_array( buffer, local_index_start + 20 );
 800b03a:	8290      	strh	r0, [r2, #20]
    for( uint8_t result_index = 0; result_index < nb_results; result_index++ )
 800b03c:	3220      	adds	r2, #32
 800b03e:	4594      	cmp	ip, r2
 800b040:	f103 0316 	add.w	r3, r3, #22
 800b044:	d196      	bne.n	800af74 <lr1110_wifi_read_basic_complete_results+0x78>
        index_to_read += results_to_read;
 800b046:	9b02      	ldr	r3, [sp, #8]
        remaining_results -= results_to_read;
 800b048:	1b2d      	subs	r5, r5, r4
        index_to_read += results_to_read;
 800b04a:	4423      	add	r3, r4
 800b04c:	b2db      	uxtb	r3, r3
    while( remaining_results > 0 )
 800b04e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
        index_to_read += results_to_read;
 800b052:	9302      	str	r3, [sp, #8]
    while( remaining_results > 0 )
 800b054:	f47f af6c 	bne.w	800af30 <lr1110_wifi_read_basic_complete_results+0x34>
}
 800b058:	f50d 7d37 	add.w	sp, sp, #732	; 0x2dc
 800b05c:	ecbd 8b02 	vpop	{d8}
 800b060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b064 <lr1110_wifi_read_basic_mac_type_channel_results>:
{
 800b064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint8_t       result_buffer[LR1110_WIFI_MAX_SIZE_PER_SPI( LR1110_WIFI_BASIC_MAC_TYPE_CHANNEL_RESULT_SIZE )] = { 0 };
 800b068:	2400      	movs	r4, #0
{
 800b06a:	b0cc      	sub	sp, #304	; 0x130
 800b06c:	4692      	mov	sl, r2
 800b06e:	4607      	mov	r7, r0
 800b070:	460d      	mov	r5, r1
    uint8_t       result_buffer[LR1110_WIFI_MAX_SIZE_PER_SPI( LR1110_WIFI_BASIC_MAC_TYPE_CHANNEL_RESULT_SIZE )] = { 0 };
 800b072:	f44f 728e 	mov.w	r2, #284	; 0x11c
 800b076:	4621      	mov	r1, r4
 800b078:	a805      	add	r0, sp, #20
{
 800b07a:	461e      	mov	r6, r3
    uint8_t       result_buffer[LR1110_WIFI_MAX_SIZE_PER_SPI( LR1110_WIFI_BASIC_MAC_TYPE_CHANNEL_RESULT_SIZE )] = { 0 };
 800b07c:	9404      	str	r4, [sp, #16]
 800b07e:	f007 ff81 	bl	8012f84 <memset>
    while( remaining_results > 0 )
 800b082:	f1ba 0f00 	cmp.w	sl, #0
 800b086:	d03f      	beq.n	800b108 <lr1110_wifi_read_basic_mac_type_channel_results+0xa4>
 800b088:	3608      	adds	r6, #8
    const uint8_t  cbuffer[LR1110_WIFI_READ_RESULT_CMD_LENGTH] = { ( uint8_t )( LR1110_WIFI_READ_RESULT_OC >> 8 ),
 800b08a:	f240 6903 	movw	r9, #1539	; 0x603
 800b08e:	f04f 0804 	mov.w	r8, #4
        uint8_t results_to_read = MIN( remaining_results, nb_results_per_chunk_max );
 800b092:	4654      	mov	r4, sl
 800b094:	2c20      	cmp	r4, #32
 800b096:	bf28      	it	cs
 800b098:	2420      	movcs	r4, #32
    lr1110_hal_read( radio, cbuffer, LR1110_WIFI_READ_RESULT_CMD_LENGTH, buffer, size_total );
 800b09a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800b09e:	9300      	str	r3, [sp, #0]
 800b0a0:	a902      	add	r1, sp, #8
 800b0a2:	ab04      	add	r3, sp, #16
 800b0a4:	2205      	movs	r2, #5
 800b0a6:	4638      	mov	r0, r7
    const uint8_t  cbuffer[LR1110_WIFI_READ_RESULT_CMD_LENGTH] = { ( uint8_t )( LR1110_WIFI_READ_RESULT_OC >> 8 ),
 800b0a8:	f8ad 9008 	strh.w	r9, [sp, #8]
 800b0ac:	f88d 500a 	strb.w	r5, [sp, #10]
 800b0b0:	f88d 800c 	strb.w	r8, [sp, #12]
 800b0b4:	f88d 400b 	strb.w	r4, [sp, #11]
    lr1110_hal_read( radio, cbuffer, LR1110_WIFI_READ_RESULT_CMD_LENGTH, buffer, size_total );
 800b0b8:	f7f7 fbca 	bl	8002850 <lr1110_hal_read>
}

static void interpret_basic_mac_type_channel_result_from_buffer( const uint8_t nb_results, const uint8_t* buffer,
                                                                 lr1110_wifi_basic_mac_type_channel_result_t* result )
{
    for( uint8_t result_index = 0; result_index < nb_results; result_index++ )
 800b0bc:	2009      	movs	r0, #9
 800b0be:	fb10 6004 	smlabb	r0, r0, r4, r6
 800b0c2:	f10d 0313 	add.w	r3, sp, #19
 800b0c6:	4631      	mov	r1, r6
    {
        const uint16_t local_index_start = LR1110_WIFI_BASIC_MAC_TYPE_CHANNEL_RESULT_SIZE * result_index;
        lr1110_wifi_basic_mac_type_channel_result_t* local_wifi_result = &result[result_index];
        local_wifi_result->data_rate_info_byte                         = buffer[local_index_start + 0];
 800b0c8:	f813 cc03 	ldrb.w	ip, [r3, #-3]
 800b0cc:	f801 cc08 	strb.w	ip, [r1, #-8]
        local_wifi_result->channel_info_byte                           = buffer[local_index_start + 1];
        local_wifi_result->rssi                                        = buffer[local_index_start + 2];
 800b0d0:	460a      	mov	r2, r1
 800b0d2:	f813 cc01 	ldrb.w	ip, [r3, #-1]
        local_wifi_result->channel_info_byte                           = buffer[local_index_start + 1];
 800b0d6:	f813 ec02 	ldrb.w	lr, [r3, #-2]
 800b0da:	f801 ec07 	strb.w	lr, [r1, #-7]
        local_wifi_result->rssi                                        = buffer[local_index_start + 2];
 800b0de:	f802 cd06 	strb.w	ip, [r2, #-6]!
 800b0e2:	469c      	mov	ip, r3
        mac_address[field_mac_index] = buffer[index_in_buffer + field_mac_index];
 800b0e4:	f81c eb01 	ldrb.w	lr, [ip], #1
 800b0e8:	f802 ef01 	strb.w	lr, [r2, #1]!
    for( uint8_t field_mac_index = 0; field_mac_index < LR1110_WIFI_MAC_ADDRESS_LENGTH; field_mac_index++ )
 800b0ec:	4291      	cmp	r1, r2
 800b0ee:	d1f9      	bne.n	800b0e4 <lr1110_wifi_read_basic_mac_type_channel_results+0x80>
    for( uint8_t result_index = 0; result_index < nb_results; result_index++ )
 800b0f0:	3109      	adds	r1, #9
 800b0f2:	4281      	cmp	r1, r0
 800b0f4:	f103 0309 	add.w	r3, r3, #9
 800b0f8:	d1e6      	bne.n	800b0c8 <lr1110_wifi_read_basic_mac_type_channel_results+0x64>
        remaining_results -= results_to_read;
 800b0fa:	ebaa 0204 	sub.w	r2, sl, r4
        index_to_read += results_to_read;
 800b0fe:	4425      	add	r5, r4
    while( remaining_results > 0 )
 800b100:	f012 0aff 	ands.w	sl, r2, #255	; 0xff
        index_to_read += results_to_read;
 800b104:	b2ed      	uxtb	r5, r5
    while( remaining_results > 0 )
 800b106:	d1c4      	bne.n	800b092 <lr1110_wifi_read_basic_mac_type_channel_results+0x2e>
}
 800b108:	b04c      	add	sp, #304	; 0x130
 800b10a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b10e:	bf00      	nop

0800b110 <lr1110_wifi_reset_cumulative_timing>:
{
 800b110:	b510      	push	{r4, lr}
 800b112:	b084      	sub	sp, #16
    lr1110_hal_write( radio, cbuffer, LR1110_WIFI_RESET_CUMUL_TIMING_CMD_LENGTH, 0, 0 );
 800b114:	2300      	movs	r3, #0
 800b116:	9300      	str	r3, [sp, #0]
    const uint8_t cbuffer[LR1110_WIFI_RESET_CUMUL_TIMING_CMD_LENGTH] = {
 800b118:	f240 7403 	movw	r4, #1795	; 0x703
    lr1110_hal_write( radio, cbuffer, LR1110_WIFI_RESET_CUMUL_TIMING_CMD_LENGTH, 0, 0 );
 800b11c:	2202      	movs	r2, #2
 800b11e:	a903      	add	r1, sp, #12
    const uint8_t cbuffer[LR1110_WIFI_RESET_CUMUL_TIMING_CMD_LENGTH] = {
 800b120:	f8ad 400c 	strh.w	r4, [sp, #12]
    lr1110_hal_write( radio, cbuffer, LR1110_WIFI_RESET_CUMUL_TIMING_CMD_LENGTH, 0, 0 );
 800b124:	f7f7 fb46 	bl	80027b4 <lr1110_hal_write>
}
 800b128:	b004      	add	sp, #16
 800b12a:	bd10      	pop	{r4, pc}

0800b12c <lr1110_wifi_read_cumulative_timing>:
{
 800b12c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b12e:	b089      	sub	sp, #36	; 0x24
    uint8_t buffer_out[LR1110_WIFI_ALL_CUMULATIVE_TIMING_SIZE] = { 0 };
 800b130:	2200      	movs	r2, #0
    lr1110_hal_read( radio, cbuffer, LR1110_WIFI_READ_CUMUL_TIMING_CMD_LENGTH, buffer_out,
 800b132:	2310      	movs	r3, #16
{
 800b134:	460c      	mov	r4, r1
    uint8_t buffer_out[LR1110_WIFI_ALL_CUMULATIVE_TIMING_SIZE] = { 0 };
 800b136:	e9cd 2204 	strd	r2, r2, [sp, #16]
    lr1110_hal_read( radio, cbuffer, LR1110_WIFI_READ_CUMUL_TIMING_CMD_LENGTH, buffer_out,
 800b13a:	9300      	str	r3, [sp, #0]
    uint8_t buffer_out[LR1110_WIFI_ALL_CUMULATIVE_TIMING_SIZE] = { 0 };
 800b13c:	9206      	str	r2, [sp, #24]
    lr1110_hal_read( radio, cbuffer, LR1110_WIFI_READ_CUMUL_TIMING_CMD_LENGTH, buffer_out,
 800b13e:	446b      	add	r3, sp
    uint8_t buffer_out[LR1110_WIFI_ALL_CUMULATIVE_TIMING_SIZE] = { 0 };
 800b140:	9207      	str	r2, [sp, #28]
    lr1110_hal_read( radio, cbuffer, LR1110_WIFI_READ_CUMUL_TIMING_CMD_LENGTH, buffer_out,
 800b142:	a903      	add	r1, sp, #12
    const uint8_t cbuffer[LR1110_WIFI_READ_CUMUL_TIMING_CMD_LENGTH] = {
 800b144:	f640 0503 	movw	r5, #2051	; 0x803
    lr1110_hal_read( radio, cbuffer, LR1110_WIFI_READ_CUMUL_TIMING_CMD_LENGTH, buffer_out,
 800b148:	2202      	movs	r2, #2
    const uint8_t cbuffer[LR1110_WIFI_READ_CUMUL_TIMING_CMD_LENGTH] = {
 800b14a:	f8ad 500c 	strh.w	r5, [sp, #12]
    lr1110_hal_read( radio, cbuffer, LR1110_WIFI_READ_CUMUL_TIMING_CMD_LENGTH, buffer_out,
 800b14e:	f7f7 fb7f 	bl	8002850 <lr1110_hal_read>
        ( buffer_out[8] << 24 ) + ( buffer_out[9] << 16 ) + ( buffer_out[10] << 8 ) + buffer_out[11];
 800b152:	f89d 2019 	ldrb.w	r2, [sp, #25]
 800b156:	f89d 6018 	ldrb.w	r6, [sp, #24]
        ( buffer_out[0] << 24 ) + ( buffer_out[1] << 16 ) + ( buffer_out[2] << 8 ) + buffer_out[3];
 800b15a:	f89d 0011 	ldrb.w	r0, [sp, #17]
 800b15e:	f89d 5010 	ldrb.w	r5, [sp, #16]
        ( buffer_out[12] << 24 ) + ( buffer_out[13] << 16 ) + ( buffer_out[14] << 8 ) + buffer_out[15];
 800b162:	f89d 301d 	ldrb.w	r3, [sp, #29]
        ( buffer_out[4] << 24 ) + ( buffer_out[5] << 16 ) + ( buffer_out[6] << 8 ) + buffer_out[7];
 800b166:	f89d 1015 	ldrb.w	r1, [sp, #21]
 800b16a:	f89d 7014 	ldrb.w	r7, [sp, #20]
        ( buffer_out[8] << 24 ) + ( buffer_out[9] << 16 ) + ( buffer_out[10] << 8 ) + buffer_out[11];
 800b16e:	0412      	lsls	r2, r2, #16
 800b170:	eb02 6206 	add.w	r2, r2, r6, lsl #24
        ( buffer_out[0] << 24 ) + ( buffer_out[1] << 16 ) + ( buffer_out[2] << 8 ) + buffer_out[3];
 800b174:	0400      	lsls	r0, r0, #16
        ( buffer_out[12] << 24 ) + ( buffer_out[13] << 16 ) + ( buffer_out[14] << 8 ) + buffer_out[15];
 800b176:	f89d 601c 	ldrb.w	r6, [sp, #28]
        ( buffer_out[0] << 24 ) + ( buffer_out[1] << 16 ) + ( buffer_out[2] << 8 ) + buffer_out[3];
 800b17a:	eb00 6005 	add.w	r0, r0, r5, lsl #24
        ( buffer_out[12] << 24 ) + ( buffer_out[13] << 16 ) + ( buffer_out[14] << 8 ) + buffer_out[15];
 800b17e:	041b      	lsls	r3, r3, #16
        ( buffer_out[0] << 24 ) + ( buffer_out[1] << 16 ) + ( buffer_out[2] << 8 ) + buffer_out[3];
 800b180:	f89d 5012 	ldrb.w	r5, [sp, #18]
        ( buffer_out[12] << 24 ) + ( buffer_out[13] << 16 ) + ( buffer_out[14] << 8 ) + buffer_out[15];
 800b184:	eb03 6306 	add.w	r3, r3, r6, lsl #24
        ( buffer_out[8] << 24 ) + ( buffer_out[9] << 16 ) + ( buffer_out[10] << 8 ) + buffer_out[11];
 800b188:	f89d 601a 	ldrb.w	r6, [sp, #26]
        ( buffer_out[0] << 24 ) + ( buffer_out[1] << 16 ) + ( buffer_out[2] << 8 ) + buffer_out[3];
 800b18c:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 800b190:	f89d 5013 	ldrb.w	r5, [sp, #19]
        ( buffer_out[8] << 24 ) + ( buffer_out[9] << 16 ) + ( buffer_out[10] << 8 ) + buffer_out[11];
 800b194:	eb02 2206 	add.w	r2, r2, r6, lsl #8
        ( buffer_out[4] << 24 ) + ( buffer_out[5] << 16 ) + ( buffer_out[6] << 8 ) + buffer_out[7];
 800b198:	0409      	lsls	r1, r1, #16
        ( buffer_out[12] << 24 ) + ( buffer_out[13] << 16 ) + ( buffer_out[14] << 8 ) + buffer_out[15];
 800b19a:	f89d 601e 	ldrb.w	r6, [sp, #30]
        ( buffer_out[0] << 24 ) + ( buffer_out[1] << 16 ) + ( buffer_out[2] << 8 ) + buffer_out[3];
 800b19e:	4428      	add	r0, r5
        ( buffer_out[4] << 24 ) + ( buffer_out[5] << 16 ) + ( buffer_out[6] << 8 ) + buffer_out[7];
 800b1a0:	eb01 6107 	add.w	r1, r1, r7, lsl #24
 800b1a4:	f89d 7016 	ldrb.w	r7, [sp, #22]
        ( buffer_out[8] << 24 ) + ( buffer_out[9] << 16 ) + ( buffer_out[10] << 8 ) + buffer_out[11];
 800b1a8:	f89d 501b 	ldrb.w	r5, [sp, #27]
    timing->rx_detection_us =
 800b1ac:	6020      	str	r0, [r4, #0]
        ( buffer_out[12] << 24 ) + ( buffer_out[13] << 16 ) + ( buffer_out[14] << 8 ) + buffer_out[15];
 800b1ae:	eb03 2306 	add.w	r3, r3, r6, lsl #8
 800b1b2:	f89d 001f 	ldrb.w	r0, [sp, #31]
        ( buffer_out[4] << 24 ) + ( buffer_out[5] << 16 ) + ( buffer_out[6] << 8 ) + buffer_out[7];
 800b1b6:	f89d 6017 	ldrb.w	r6, [sp, #23]
 800b1ba:	eb01 2107 	add.w	r1, r1, r7, lsl #8
 800b1be:	4431      	add	r1, r6
        ( buffer_out[8] << 24 ) + ( buffer_out[9] << 16 ) + ( buffer_out[10] << 8 ) + buffer_out[11];
 800b1c0:	442a      	add	r2, r5
        ( buffer_out[12] << 24 ) + ( buffer_out[13] << 16 ) + ( buffer_out[14] << 8 ) + buffer_out[15];
 800b1c2:	4403      	add	r3, r0
    timing->demodulation_us =
 800b1c4:	e9c4 2302 	strd	r2, r3, [r4, #8]
    timing->rx_correlation_us =
 800b1c8:	6061      	str	r1, [r4, #4]
}
 800b1ca:	b009      	add	sp, #36	; 0x24
 800b1cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1ce:	bf00      	nop

0800b1d0 <lr1110_extract_channel_from_info_byte>:
}
 800b1d0:	f000 000f 	and.w	r0, r0, #15
 800b1d4:	4770      	bx	lr
 800b1d6:	bf00      	nop

0800b1d8 <lr1110_extract_signal_type_from_data_rate_info>:
}
 800b1d8:	f000 0003 	and.w	r0, r0, #3
 800b1dc:	4770      	bx	lr
 800b1de:	bf00      	nop

0800b1e0 <RadioCheckRfFrequency>:
}

bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 800b1e0:	2001      	movs	r0, #1
 800b1e2:	4770      	bx	lr

0800b1e4 <RadioTimeOnAir>:

uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 800b1e4:	b4f0      	push	{r4, r5, r6, r7}
 800b1e6:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800b1ea:	f89d 6014 	ldrb.w	r6, [sp, #20]
 800b1ee:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800b1f2:	f89d 701c 	ldrb.w	r7, [sp, #28]
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 800b1f6:	2800      	cmp	r0, #0
 800b1f8:	d03f      	beq.n	800b27a <RadioTimeOnAir+0x96>
 800b1fa:	2801      	cmp	r0, #1
 800b1fc:	d13a      	bne.n	800b274 <RadioTimeOnAir+0x90>
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800b1fe:	1f50      	subs	r0, r2, #5
 800b200:	2801      	cmp	r0, #1
    int32_t crDenom           = coderate + 4;
 800b202:	f103 0304 	add.w	r3, r3, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800b206:	d954      	bls.n	800b2b2 <RadioTimeOnAir+0xce>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800b208:	2900      	cmp	r1, #0
 800b20a:	d048      	beq.n	800b29e <RadioTimeOnAir+0xba>
 800b20c:	2901      	cmp	r1, #1
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800b20e:	bf03      	ittte	eq
 800b210:	f1a2 0c0c 	subeq.w	ip, r2, #12
 800b214:	fabc fc8c 	clzeq	ip, ip
 800b218:	ea4f 1c5c 	moveq.w	ip, ip, lsr #5
    bool    lowDatareOptimize = false;
 800b21c:	f04f 0c00 	movne.w	ip, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800b220:	00e4      	lsls	r4, r4, #3
                            ( crcOn ? 16 : 0 ) -
 800b222:	b107      	cbz	r7, 800b226 <RadioTimeOnAir+0x42>
 800b224:	3410      	adds	r4, #16
 800b226:	eba4 0482 	sub.w	r4, r4, r2, lsl #2
                            ( 4 * datarate ) +
 800b22a:	0090      	lsls	r0, r2, #2
                            ( fixLen ? 0 : 20 );
 800b22c:	b906      	cbnz	r6, 800b230 <RadioTimeOnAir+0x4c>
 800b22e:	3414      	adds	r4, #20
    if( datarate <= 6 )
 800b230:	2a06      	cmp	r2, #6
 800b232:	d844      	bhi.n	800b2be <RadioTimeOnAir+0xda>
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800b234:	2c00      	cmp	r4, #0
 800b236:	bfac      	ite	ge
 800b238:	1904      	addge	r4, r0, r4
 800b23a:	1c04      	addlt	r4, r0, #0
 800b23c:	3c01      	subs	r4, #1
 800b23e:	fb94 f4f0 	sdiv	r4, r4, r0
 800b242:	fb03 5304 	mla	r3, r3, r4, r5
        intermediate += 2;
 800b246:	330e      	adds	r3, #14
 800b248:	3a02      	subs	r2, #2
    case MODEM_LORA:
        {
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
                                                                  coderate, preambleLen,
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800b24a:	4826      	ldr	r0, [pc, #152]	; (800b2e4 <RadioTimeOnAir+0x100>)
 800b24c:	5c41      	ldrb	r1, [r0, r1]
 800b24e:	3901      	subs	r1, #1
 800b250:	b2c9      	uxtb	r1, r1
 800b252:	2909      	cmp	r1, #9
 800b254:	d844      	bhi.n	800b2e0 <RadioTimeOnAir+0xfc>
 800b256:	4c24      	ldr	r4, [pc, #144]	; (800b2e8 <RadioTimeOnAir+0x104>)
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800b258:	0098      	lsls	r0, r3, #2
 800b25a:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 800b25e:	3001      	adds	r0, #1
 800b260:	4090      	lsls	r0, r2
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800b262:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b266:	1e5a      	subs	r2, r3, #1
 800b268:	fb01 2000 	mla	r0, r1, r0, r2
        }
        break;
    }
    // Perform integral ceil()
    return ( numerator + denominator - 1 ) / denominator;
}
 800b26c:	bcf0      	pop	{r4, r5, r6, r7}
 800b26e:	fbb0 f0f3 	udiv	r0, r0, r3
 800b272:	4770      	bx	lr
    switch( modem )
 800b274:	2000      	movs	r0, #0
}
 800b276:	bcf0      	pop	{r4, r5, r6, r7}
 800b278:	4770      	bx	lr
    return ( preambleLen << 3 ) +
 800b27a:	00eb      	lsls	r3, r5, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 800b27c:	b906      	cbnz	r6, 800b280 <RadioTimeOnAir+0x9c>
 800b27e:	3308      	adds	r3, #8
 800b280:	f103 0118 	add.w	r1, r3, #24
               ( ( crcOn == true ) ? 2 : 0 ) 
 800b284:	b107      	cbz	r7, 800b288 <RadioTimeOnAir+0xa4>
 800b286:	3402      	adds	r4, #2
             ( syncWordLength << 3 ) +
 800b288:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800b28c:	1e50      	subs	r0, r2, #1
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800b28e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b292:	fb01 0303 	mla	r3, r1, r3, r0
}
 800b296:	bcf0      	pop	{r4, r5, r6, r7}
 800b298:	fbb3 f0f2 	udiv	r0, r3, r2
 800b29c:	4770      	bx	lr
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800b29e:	f1a2 0c0b 	sub.w	ip, r2, #11
 800b2a2:	f1bc 0f01 	cmp.w	ip, #1
 800b2a6:	bf8c      	ite	hi
 800b2a8:	f04f 0c00 	movhi.w	ip, #0
 800b2ac:	f04f 0c01 	movls.w	ip, #1
 800b2b0:	e7b6      	b.n	800b220 <RadioTimeOnAir+0x3c>
        if( preambleLen < 12 )
 800b2b2:	2d0c      	cmp	r5, #12
 800b2b4:	bf38      	it	cc
 800b2b6:	250c      	movcc	r5, #12
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800b2b8:	2900      	cmp	r1, #0
 800b2ba:	d1a7      	bne.n	800b20c <RadioTimeOnAir+0x28>
 800b2bc:	e7ef      	b.n	800b29e <RadioTimeOnAir+0xba>
        ceilNumerator += 8;
 800b2be:	3408      	adds	r4, #8
            ceilDenominator = 4 * ( datarate - 2 );
 800b2c0:	3a02      	subs	r2, #2
        if( lowDatareOptimize == true )
 800b2c2:	f1bc 0f00 	cmp.w	ip, #0
 800b2c6:	d000      	beq.n	800b2ca <RadioTimeOnAir+0xe6>
            ceilDenominator = 4 * ( datarate - 2 );
 800b2c8:	0090      	lsls	r0, r2, #2
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800b2ca:	2c00      	cmp	r4, #0
 800b2cc:	bfac      	ite	ge
 800b2ce:	1904      	addge	r4, r0, r4
 800b2d0:	1c04      	addlt	r4, r0, #0
 800b2d2:	3c01      	subs	r4, #1
 800b2d4:	fb94 f4f0 	sdiv	r4, r4, r0
 800b2d8:	fb03 5304 	mla	r3, r3, r4, r5
    int32_t intermediate =
 800b2dc:	330c      	adds	r3, #12
    if( datarate <= 6 )
 800b2de:	e7b4      	b.n	800b24a <RadioTimeOnAir+0x66>
    return ( numerator + denominator - 1 ) / denominator;
 800b2e0:	deff      	udf	#255	; 0xff
 800b2e2:	bf00      	nop
 800b2e4:	08015764 	.word	0x08015764
 800b2e8:	08015768 	.word	0x08015768

0800b2ec <RadioOnTxTimeoutIrq>:
    return lr1110_board_get_tcxo_wakeup_time( &LR1110 ) + 3;
}

void RadioOnTxTimeoutIrq( void* context )
{
    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800b2ec:	4b03      	ldr	r3, [pc, #12]	; (800b2fc <RadioOnTxTimeoutIrq+0x10>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	b113      	cbz	r3, 800b2f8 <RadioOnTxTimeoutIrq+0xc>
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	b103      	cbz	r3, 800b2f8 <RadioOnTxTimeoutIrq+0xc>
    {
        RadioEvents->TxTimeout( );
 800b2f6:	4718      	bx	r3
    }
}
 800b2f8:	4770      	bx	lr
 800b2fa:	bf00      	nop
 800b2fc:	200005a0 	.word	0x200005a0

0800b300 <RadioOnRxTimeoutIrq>:

void RadioOnRxTimeoutIrq( void* context )
{
    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800b300:	4b03      	ldr	r3, [pc, #12]	; (800b310 <RadioOnRxTimeoutIrq+0x10>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	b113      	cbz	r3, 800b30c <RadioOnRxTimeoutIrq+0xc>
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	b103      	cbz	r3, 800b30c <RadioOnRxTimeoutIrq+0xc>
    {
        RadioEvents->RxTimeout( );
 800b30a:	4718      	bx	r3
    }
}
 800b30c:	4770      	bx	lr
 800b30e:	bf00      	nop
 800b310:	200005a0 	.word	0x200005a0

0800b314 <RadioOnDioIrq>:

void RadioOnDioIrq( void* context )
{
    IrqFired = true;
 800b314:	4b01      	ldr	r3, [pc, #4]	; (800b31c <RadioOnDioIrq+0x8>)
 800b316:	2201      	movs	r2, #1
 800b318:	701a      	strb	r2, [r3, #0]
}
 800b31a:	4770      	bx	lr
 800b31c:	2000059d 	.word	0x2000059d

0800b320 <RadioStandby>:
{
 800b320:	b508      	push	{r3, lr}
    lr1110_system_set_standby( &LR1110, LR1110_SYSTEM_STDBY_CONFIG_RC );
 800b322:	4805      	ldr	r0, [pc, #20]	; (800b338 <RadioStandby+0x18>)
 800b324:	2100      	movs	r1, #0
 800b326:	f7ff fd8d 	bl	800ae44 <lr1110_system_set_standby>
}
 800b32a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_STDBY_RC );
 800b32e:	4802      	ldr	r0, [pc, #8]	; (800b338 <RadioStandby+0x18>)
 800b330:	2101      	movs	r1, #1
 800b332:	f7f7 bb31 	b.w	8002998 <lr1110_hal_set_operating_mode>
 800b336:	bf00      	nop
 800b338:	20000a7c 	.word	0x20000a7c

0800b33c <RadioInit>:
{
 800b33c:	b510      	push	{r4, lr}
    lr1110_board_init( &LR1110, RadioOnDioIrq );
 800b33e:	4c17      	ldr	r4, [pc, #92]	; (800b39c <RadioInit+0x60>)
    RadioEvents = events;
 800b340:	4b17      	ldr	r3, [pc, #92]	; (800b3a0 <RadioInit+0x64>)
    lr1110_board_init( &LR1110, RadioOnDioIrq );
 800b342:	4918      	ldr	r1, [pc, #96]	; (800b3a4 <RadioInit+0x68>)
{
 800b344:	4602      	mov	r2, r0
    lr1110_board_init( &LR1110, RadioOnDioIrq );
 800b346:	4620      	mov	r0, r4
    RadioEvents = events;
 800b348:	601a      	str	r2, [r3, #0]
    lr1110_board_init( &LR1110, RadioOnDioIrq );
 800b34a:	f7f7 f9b1 	bl	80026b0 <lr1110_board_init>
    lr1110_system_set_standby( &LR1110, LR1110_SYSTEM_STDBY_CONFIG_RC );
 800b34e:	4620      	mov	r0, r4
 800b350:	2100      	movs	r1, #0
 800b352:	f7ff fd77 	bl	800ae44 <lr1110_system_set_standby>
    lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_STDBY_RC );
 800b356:	4620      	mov	r0, r4
 800b358:	2101      	movs	r1, #1
 800b35a:	f7f7 fb1d 	bl	8002998 <lr1110_hal_set_operating_mode>
    lr1110_system_set_regmode( &LR1110, LR1110_SYSTEM_REGMODE_DCDC_CONVERTER );
 800b35e:	4620      	mov	r0, r4
 800b360:	2101      	movs	r1, #1
 800b362:	f7ff fcc7 	bl	800acf4 <lr1110_system_set_regmode>
    lr1110_radio_set_tx_params( &LR1110, 0, LR1110_RADIO_RAMP_TIME_200U );
 800b366:	4620      	mov	r0, r4
 800b368:	2204      	movs	r2, #4
 800b36a:	2100      	movs	r1, #0
 800b36c:	f7ff fb14 	bl	800a998 <lr1110_radio_set_tx_params>
    lr1110_system_set_dio_irq_params( &LR1110, LR1110_SYSTEM_IRQ_ALL_MASK, LR1110_SYSTEM_IRQ_NONE_MASK );
 800b370:	2200      	movs	r2, #0
 800b372:	490d      	ldr	r1, [pc, #52]	; (800b3a8 <RadioInit+0x6c>)
 800b374:	4620      	mov	r0, r4
 800b376:	f7ff fcf5 	bl	800ad64 <lr1110_system_set_dio_irq_params>
    lr1110_board_set_rf_tx_power(&LR1110, 22);
 800b37a:	4620      	mov	r0, r4
 800b37c:	2116      	movs	r1, #22
 800b37e:	f7f7 f981 	bl	8002684 <lr1110_board_set_rf_tx_power>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800b382:	490a      	ldr	r1, [pc, #40]	; (800b3ac <RadioInit+0x70>)
 800b384:	480a      	ldr	r0, [pc, #40]	; (800b3b0 <RadioInit+0x74>)
 800b386:	f001 f8c5 	bl	800c514 <TimerInit>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800b38a:	490a      	ldr	r1, [pc, #40]	; (800b3b4 <RadioInit+0x78>)
 800b38c:	480a      	ldr	r0, [pc, #40]	; (800b3b8 <RadioInit+0x7c>)
 800b38e:	f001 f8c1 	bl	800c514 <TimerInit>
    IrqFired = false;
 800b392:	4b0a      	ldr	r3, [pc, #40]	; (800b3bc <RadioInit+0x80>)
 800b394:	2200      	movs	r2, #0
 800b396:	701a      	strb	r2, [r3, #0]
}
 800b398:	bd10      	pop	{r4, pc}
 800b39a:	bf00      	nop
 800b39c:	20000a7c 	.word	0x20000a7c
 800b3a0:	200005a0 	.word	0x200005a0
 800b3a4:	0800b315 	.word	0x0800b315
 800b3a8:	03fffffc 	.word	0x03fffffc
 800b3ac:	0800b2ed 	.word	0x0800b2ed
 800b3b0:	20000b38 	.word	0x20000b38
 800b3b4:	0800b301 	.word	0x0800b301
 800b3b8:	20000c5c 	.word	0x20000c5c
 800b3bc:	2000059d 	.word	0x2000059d

0800b3c0 <RadioGetStatus>:
{
 800b3c0:	b508      	push	{r3, lr}
    switch( lr1110_hal_get_operating_mode( &LR1110 ) )
 800b3c2:	4805      	ldr	r0, [pc, #20]	; (800b3d8 <RadioGetStatus+0x18>)
 800b3c4:	f7f7 fae4 	bl	8002990 <lr1110_hal_get_operating_mode>
 800b3c8:	3804      	subs	r0, #4
 800b3ca:	b2c0      	uxtb	r0, r0
 800b3cc:	2804      	cmp	r0, #4
 800b3ce:	bf96      	itet	ls
 800b3d0:	4b02      	ldrls	r3, [pc, #8]	; (800b3dc <RadioGetStatus+0x1c>)
 800b3d2:	2000      	movhi	r0, #0
 800b3d4:	5c18      	ldrbls	r0, [r3, r0]
}
 800b3d6:	bd08      	pop	{r3, pc}
 800b3d8:	20000a7c 	.word	0x20000a7c
 800b3dc:	08015790 	.word	0x08015790

0800b3e0 <RadioSetChannel>:
{
 800b3e0:	4601      	mov	r1, r0
    lr1110_radio_set_rf_frequency( &LR1110, freq );
 800b3e2:	4801      	ldr	r0, [pc, #4]	; (800b3e8 <RadioSetChannel+0x8>)
 800b3e4:	f7ff ba3c 	b.w	800a860 <lr1110_radio_set_rf_frequency>
 800b3e8:	20000a7c 	.word	0x20000a7c

0800b3ec <RadioRandom>:
{
 800b3ec:	b500      	push	{lr}
 800b3ee:	b083      	sub	sp, #12
    uint32_t rnd  = 0;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	9301      	str	r3, [sp, #4]
    RadioStandby( );
 800b3f4:	f7ff ff94 	bl	800b320 <RadioStandby>
    lr1110_system_get_random_number( &LR1110, &rnd );
 800b3f8:	4803      	ldr	r0, [pc, #12]	; (800b408 <RadioRandom+0x1c>)
 800b3fa:	a901      	add	r1, sp, #4
 800b3fc:	f7ff fd34 	bl	800ae68 <lr1110_system_get_random_number>
}
 800b400:	9801      	ldr	r0, [sp, #4]
 800b402:	b003      	add	sp, #12
 800b404:	f85d fb04 	ldr.w	pc, [sp], #4
 800b408:	20000a7c 	.word	0x20000a7c

0800b40c <RadioWriteBuffer>:
    lr1110_regmem_write_buffer8( &LR1110, buffer, size );
 800b40c:	4801      	ldr	r0, [pc, #4]	; (800b414 <RadioWriteBuffer+0x8>)
 800b40e:	f7ff bbc7 	b.w	800aba0 <lr1110_regmem_write_buffer8>
 800b412:	bf00      	nop
 800b414:	20000a7c 	.word	0x20000a7c

0800b418 <RadioSend>:
{
 800b418:	b570      	push	{r4, r5, r6, lr}
    lr1110_system_set_dio_irq_params( &LR1110, LR1110_SYSTEM_IRQ_TXDONE_MASK | LR1110_SYSTEM_IRQ_TIMEOUT_MASK,
 800b41a:	4c1c      	ldr	r4, [pc, #112]	; (800b48c <RadioSend+0x74>)
{
 800b41c:	b082      	sub	sp, #8
    lr1110_system_set_dio_irq_params( &LR1110, LR1110_SYSTEM_IRQ_TXDONE_MASK | LR1110_SYSTEM_IRQ_TIMEOUT_MASK,
 800b41e:	2200      	movs	r2, #0
{
 800b420:	4606      	mov	r6, r0
 800b422:	460d      	mov	r5, r1
    lr1110_system_set_dio_irq_params( &LR1110, LR1110_SYSTEM_IRQ_TXDONE_MASK | LR1110_SYSTEM_IRQ_TIMEOUT_MASK,
 800b424:	4620      	mov	r0, r4
 800b426:	f240 4104 	movw	r1, #1028	; 0x404
 800b42a:	f7ff fc9b 	bl	800ad64 <lr1110_system_set_dio_irq_params>
    lr1110_radio_get_packet_type( &LR1110, &packet_type );
 800b42e:	4620      	mov	r0, r4
 800b430:	f10d 0107 	add.w	r1, sp, #7
 800b434:	f7ff f920 	bl	800a678 <lr1110_radio_get_packet_type>
    if( packet_type == LR1110_RADIO_PACKET_LORA )
 800b438:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b43c:	2b02      	cmp	r3, #2
 800b43e:	d01d      	beq.n	800b47c <RadioSend+0x64>
        lr1110_radio_set_packet_param_gfsk( &LR1110, &LR1110.packet_params.packet.gfsk );
 800b440:	f104 01aa 	add.w	r1, r4, #170	; 0xaa
 800b444:	4620      	mov	r0, r4
        LR1110.packet_params.packet.gfsk.payload_length_in_byte = size;
 800b446:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
        lr1110_radio_set_packet_param_gfsk( &LR1110, &LR1110.packet_params.packet.gfsk );
 800b44a:	f7ff fa6d 	bl	800a928 <lr1110_radio_set_packet_param_gfsk>
    lr1110_regmem_write_buffer8( &LR1110, buffer, size );
 800b44e:	462a      	mov	r2, r5
 800b450:	4631      	mov	r1, r6
 800b452:	480e      	ldr	r0, [pc, #56]	; (800b48c <RadioSend+0x74>)
 800b454:	f7ff fba4 	bl	800aba0 <lr1110_regmem_write_buffer8>
    lr1110_radio_set_tx( &LR1110, 0 );
 800b458:	480c      	ldr	r0, [pc, #48]	; (800b48c <RadioSend+0x74>)
 800b45a:	2100      	movs	r1, #0
 800b45c:	f7ff f9ea 	bl	800a834 <lr1110_radio_set_tx>
    lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_TX );
 800b460:	480a      	ldr	r0, [pc, #40]	; (800b48c <RadioSend+0x74>)
 800b462:	2104      	movs	r1, #4
 800b464:	f7f7 fa98 	bl	8002998 <lr1110_hal_set_operating_mode>
    TimerSetValue( &TxTimeoutTimer, TxTimeout );
 800b468:	4b09      	ldr	r3, [pc, #36]	; (800b490 <RadioSend+0x78>)
 800b46a:	480a      	ldr	r0, [pc, #40]	; (800b494 <RadioSend+0x7c>)
 800b46c:	6819      	ldr	r1, [r3, #0]
 800b46e:	f001 f933 	bl	800c6d8 <TimerSetValue>
    TimerStart( &TxTimeoutTimer );
 800b472:	4808      	ldr	r0, [pc, #32]	; (800b494 <RadioSend+0x7c>)
 800b474:	f001 f856 	bl	800c524 <TimerStart>
}
 800b478:	b002      	add	sp, #8
 800b47a:	bd70      	pop	{r4, r5, r6, pc}
        lr1110_radio_set_packet_param_lora( &LR1110, &LR1110.packet_params.packet.lora );
 800b47c:	f104 01b4 	add.w	r1, r4, #180	; 0xb4
 800b480:	4620      	mov	r0, r4
        LR1110.packet_params.packet.lora.payload_length_in_byte = size;
 800b482:	f884 50b7 	strb.w	r5, [r4, #183]	; 0xb7
        lr1110_radio_set_packet_param_lora( &LR1110, &LR1110.packet_params.packet.lora );
 800b486:	f7ff fa6d 	bl	800a964 <lr1110_radio_set_packet_param_lora>
 800b48a:	e7e0      	b.n	800b44e <RadioSend+0x36>
 800b48c:	20000a7c 	.word	0x20000a7c
 800b490:	200005ac 	.word	0x200005ac
 800b494:	20000b38 	.word	0x20000b38

0800b498 <RadioSleep>:
{
 800b498:	b500      	push	{lr}
 800b49a:	b083      	sub	sp, #12
    sleep_config.is_warm_start  = 1;
 800b49c:	2301      	movs	r3, #1
 800b49e:	f8ad 3004 	strh.w	r3, [sp, #4]
    lr1110_system_set_sleep( &LR1110, sleep_config, 0 );
 800b4a2:	9901      	ldr	r1, [sp, #4]
 800b4a4:	4806      	ldr	r0, [pc, #24]	; (800b4c0 <RadioSleep+0x28>)
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	f7ff fcaa 	bl	800ae00 <lr1110_system_set_sleep>
    lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_SLEEP );
 800b4ac:	4804      	ldr	r0, [pc, #16]	; (800b4c0 <RadioSleep+0x28>)
 800b4ae:	2100      	movs	r1, #0
 800b4b0:	f7f7 fa72 	bl	8002998 <lr1110_hal_set_operating_mode>
    DelayMs( 2 );
 800b4b4:	2002      	movs	r0, #2
}
 800b4b6:	b003      	add	sp, #12
 800b4b8:	f85d eb04 	ldr.w	lr, [sp], #4
    DelayMs( 2 );
 800b4bc:	f000 bfee 	b.w	800c49c <DelayMs>
 800b4c0:	20000a7c 	.word	0x20000a7c

0800b4c4 <RadioSetRxDutyCycle>:
{
 800b4c4:	b510      	push	{r4, lr}
    lr1110_radio_set_rx_dutycycle( &LR1110, rxTime, sleepTime, 0 );
 800b4c6:	4c06      	ldr	r4, [pc, #24]	; (800b4e0 <RadioSetRxDutyCycle+0x1c>)
{
 800b4c8:	460a      	mov	r2, r1
    lr1110_radio_set_rx_dutycycle( &LR1110, rxTime, sleepTime, 0 );
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	4601      	mov	r1, r0
 800b4ce:	4620      	mov	r0, r4
 800b4d0:	f7ff fa76 	bl	800a9c0 <lr1110_radio_set_rx_dutycycle>
    lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_RX_DC );
 800b4d4:	4620      	mov	r0, r4
 800b4d6:	2107      	movs	r1, #7
}
 800b4d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_RX_DC );
 800b4dc:	f7f7 ba5c 	b.w	8002998 <lr1110_hal_set_operating_mode>
 800b4e0:	20000a7c 	.word	0x20000a7c

0800b4e4 <RadioStartCad>:
{
 800b4e4:	b508      	push	{r3, lr}
    lr1110_radio_set_cad( &LR1110 );
 800b4e6:	4804      	ldr	r0, [pc, #16]	; (800b4f8 <RadioStartCad+0x14>)
 800b4e8:	f7ff fab6 	bl	800aa58 <lr1110_radio_set_cad>
}
 800b4ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_CAD );
 800b4f0:	4801      	ldr	r0, [pc, #4]	; (800b4f8 <RadioStartCad+0x14>)
 800b4f2:	2108      	movs	r1, #8
 800b4f4:	f7f7 ba50 	b.w	8002998 <lr1110_hal_set_operating_mode>
 800b4f8:	20000a7c 	.word	0x20000a7c

0800b4fc <RadioSetTxContinuousWave>:
{
 800b4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lr1110_radio_set_rf_frequency( &LR1110, freq );
 800b4fe:	4c0f      	ldr	r4, [pc, #60]	; (800b53c <RadioSetTxContinuousWave+0x40>)
    TimerSetValue( &TxTimeoutTimer, timeout );
 800b500:	4f0f      	ldr	r7, [pc, #60]	; (800b540 <RadioSetTxContinuousWave+0x44>)
{
 800b502:	460e      	mov	r6, r1
    lr1110_radio_set_rf_frequency( &LR1110, freq );
 800b504:	4601      	mov	r1, r0
 800b506:	4620      	mov	r0, r4
{
 800b508:	4615      	mov	r5, r2
    lr1110_radio_set_rf_frequency( &LR1110, freq );
 800b50a:	f7ff f9a9 	bl	800a860 <lr1110_radio_set_rf_frequency>
    lr1110_board_set_rf_tx_power( &LR1110, power );
 800b50e:	4631      	mov	r1, r6
 800b510:	4620      	mov	r0, r4
 800b512:	f7f7 f8b7 	bl	8002684 <lr1110_board_set_rf_tx_power>
    lr1110_radio_set_tx_cw( &LR1110 );
 800b516:	4620      	mov	r0, r4
 800b518:	f7ff faac 	bl	800aa74 <lr1110_radio_set_tx_cw>
    lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_TX );
 800b51c:	4620      	mov	r0, r4
 800b51e:	2104      	movs	r1, #4
 800b520:	f7f7 fa3a 	bl	8002998 <lr1110_hal_set_operating_mode>
    uint32_t timeout = ( uint32_t )time * 1000;
 800b524:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    TimerSetValue( &TxTimeoutTimer, timeout );
 800b528:	4638      	mov	r0, r7
 800b52a:	fb01 f105 	mul.w	r1, r1, r5
 800b52e:	f001 f8d3 	bl	800c6d8 <TimerSetValue>
    TimerStart( &TxTimeoutTimer );
 800b532:	4638      	mov	r0, r7
}
 800b534:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    TimerStart( &TxTimeoutTimer );
 800b538:	f000 bff4 	b.w	800c524 <TimerStart>
 800b53c:	20000a7c 	.word	0x20000a7c
 800b540:	20000b38 	.word	0x20000b38

0800b544 <RadioRssi>:
{
 800b544:	b500      	push	{lr}
 800b546:	b083      	sub	sp, #12
    int8_t rssi = 0;
 800b548:	2300      	movs	r3, #0
    lr1110_radio_get_rssi_inst( &LR1110, &rssi );
 800b54a:	4806      	ldr	r0, [pc, #24]	; (800b564 <RadioRssi+0x20>)
    int8_t rssi = 0;
 800b54c:	f88d 3007 	strb.w	r3, [sp, #7]
    lr1110_radio_get_rssi_inst( &LR1110, &rssi );
 800b550:	f10d 0107 	add.w	r1, sp, #7
 800b554:	f7ff f914 	bl	800a780 <lr1110_radio_get_rssi_inst>
}
 800b558:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800b55c:	b003      	add	sp, #12
 800b55e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b562:	bf00      	nop
 800b564:	20000a7c 	.word	0x20000a7c

0800b568 <RadioWrite>:
{
 800b568:	b510      	push	{r4, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	460c      	mov	r4, r1
    lr1110_regmem_write_mem8( &LR1110, addr, &data, 1 );
 800b56e:	2301      	movs	r3, #1
 800b570:	4601      	mov	r1, r0
 800b572:	f10d 0207 	add.w	r2, sp, #7
 800b576:	4803      	ldr	r0, [pc, #12]	; (800b584 <RadioWrite+0x1c>)
{
 800b578:	f88d 4007 	strb.w	r4, [sp, #7]
    lr1110_regmem_write_mem8( &LR1110, addr, &data, 1 );
 800b57c:	f7ff fade 	bl	800ab3c <lr1110_regmem_write_mem8>
}
 800b580:	b002      	add	sp, #8
 800b582:	bd10      	pop	{r4, pc}
 800b584:	20000a7c 	.word	0x20000a7c

0800b588 <RadioRead>:
{
 800b588:	b510      	push	{r4, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	4601      	mov	r1, r0
    uint8_t data = 0;
 800b58e:	2400      	movs	r4, #0
    lr1110_regmem_read_mem8( &LR1110, addr, &data, 1 );
 800b590:	4805      	ldr	r0, [pc, #20]	; (800b5a8 <RadioRead+0x20>)
    uint8_t data = 0;
 800b592:	f88d 4007 	strb.w	r4, [sp, #7]
    lr1110_regmem_read_mem8( &LR1110, addr, &data, 1 );
 800b596:	2301      	movs	r3, #1
 800b598:	f10d 0207 	add.w	r2, sp, #7
 800b59c:	f7ff fae6 	bl	800ab6c <lr1110_regmem_read_mem8>
}
 800b5a0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800b5a4:	b002      	add	sp, #8
 800b5a6:	bd10      	pop	{r4, pc}
 800b5a8:	20000a7c 	.word	0x20000a7c

0800b5ac <RadioReadBuffer>:
{
 800b5ac:	4613      	mov	r3, r2
    lr1110_regmem_read_buffer8( &LR1110, buffer, addr, size );
 800b5ae:	b2c2      	uxtb	r2, r0
 800b5b0:	4801      	ldr	r0, [pc, #4]	; (800b5b8 <RadioReadBuffer+0xc>)
 800b5b2:	f7ff bb03 	b.w	800abbc <lr1110_regmem_read_buffer8>
 800b5b6:	bf00      	nop
 800b5b8:	20000a7c 	.word	0x20000a7c

0800b5bc <RadioGetWakeupTime>:
{
 800b5bc:	b508      	push	{r3, lr}
    return lr1110_board_get_tcxo_wakeup_time( &LR1110 ) + 3;
 800b5be:	4802      	ldr	r0, [pc, #8]	; (800b5c8 <RadioGetWakeupTime+0xc>)
 800b5c0:	f7f7 f870 	bl	80026a4 <lr1110_board_get_tcxo_wakeup_time>
}
 800b5c4:	3003      	adds	r0, #3
 800b5c6:	bd08      	pop	{r3, pc}
 800b5c8:	20000a7c 	.word	0x20000a7c

0800b5cc <RadioGetFskBandwidthRegValue.part.0>:
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800b5cc:	4a0a      	ldr	r2, [pc, #40]	; (800b5f8 <RadioGetFskBandwidthRegValue.part.0+0x2c>)
static uint8_t RadioGetFskBandwidthRegValue( uint32_t bandwidth )
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	f44f 5196 	mov.w	r1, #4800	; 0x12c0
 800b5d4:	e002      	b.n	800b5dc <RadioGetFskBandwidthRegValue.part.0+0x10>
 800b5d6:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800b5da:	3301      	adds	r3, #1
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 800b5dc:	4288      	cmp	r0, r1
 800b5de:	d303      	bcc.n	800b5e8 <RadioGetFskBandwidthRegValue.part.0+0x1c>
 800b5e0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800b5e4:	4288      	cmp	r0, r1
 800b5e6:	d302      	bcc.n	800b5ee <RadioGetFskBandwidthRegValue.part.0+0x22>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800b5e8:	2b15      	cmp	r3, #21
 800b5ea:	d1f4      	bne.n	800b5d6 <RadioGetFskBandwidthRegValue.part.0+0xa>
    while( 1 )
 800b5ec:	e7fe      	b.n	800b5ec <RadioGetFskBandwidthRegValue.part.0+0x20>
            return FskBandwidths[i + 1].RegValue;
 800b5ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b5f2:	7918      	ldrb	r0, [r3, #4]
}
 800b5f4:	4770      	bx	lr
 800b5f6:	bf00      	nop
 800b5f8:	08015798 	.word	0x08015798

0800b5fc <RadioSetMaxPayloadLength>:
    if( modem == MODEM_LORA )
 800b5fc:	2801      	cmp	r0, #1
{
 800b5fe:	460b      	mov	r3, r1
        LR1110.packet_params.packet.lora.payload_length_in_byte = MaxPayloadLength = max;
 800b600:	480b      	ldr	r0, [pc, #44]	; (800b630 <RadioSetMaxPayloadLength+0x34>)
    if( modem == MODEM_LORA )
 800b602:	d004      	beq.n	800b60e <RadioSetMaxPayloadLength+0x12>
        if( LR1110.packet_params.packet.gfsk.header_type == LR1110_RADIO_GFSK_HEADER_TYPE_EXPLICIT )
 800b604:	f890 20af 	ldrb.w	r2, [r0, #175]	; 0xaf
 800b608:	2a01      	cmp	r2, #1
 800b60a:	d008      	beq.n	800b61e <RadioSetMaxPayloadLength+0x22>
}
 800b60c:	4770      	bx	lr
        LR1110.packet_params.packet.lora.payload_length_in_byte = MaxPayloadLength = max;
 800b60e:	4a09      	ldr	r2, [pc, #36]	; (800b634 <RadioSetMaxPayloadLength+0x38>)
 800b610:	f880 10b7 	strb.w	r1, [r0, #183]	; 0xb7
        lr1110_radio_set_packet_param_lora( &LR1110, &LR1110.packet_params.packet.lora );
 800b614:	f100 01b4 	add.w	r1, r0, #180	; 0xb4
        LR1110.packet_params.packet.lora.payload_length_in_byte = MaxPayloadLength = max;
 800b618:	7013      	strb	r3, [r2, #0]
        lr1110_radio_set_packet_param_lora( &LR1110, &LR1110.packet_params.packet.lora );
 800b61a:	f7ff b9a3 	b.w	800a964 <lr1110_radio_set_packet_param_lora>
            LR1110.packet_params.packet.gfsk.payload_length_in_byte = MaxPayloadLength = max;
 800b61e:	4a05      	ldr	r2, [pc, #20]	; (800b634 <RadioSetMaxPayloadLength+0x38>)
 800b620:	f880 10b0 	strb.w	r1, [r0, #176]	; 0xb0
            lr1110_radio_set_packet_param_gfsk( &LR1110, &LR1110.packet_params.packet.gfsk );
 800b624:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
            LR1110.packet_params.packet.gfsk.payload_length_in_byte = MaxPayloadLength = max;
 800b628:	7013      	strb	r3, [r2, #0]
            lr1110_radio_set_packet_param_gfsk( &LR1110, &LR1110.packet_params.packet.gfsk );
 800b62a:	f7ff b97d 	b.w	800a928 <lr1110_radio_set_packet_param_gfsk>
 800b62e:	bf00      	nop
 800b630:	20000a7c 	.word	0x20000a7c
 800b634:	200000f0 	.word	0x200000f0

0800b638 <RadioRx.part.0>:
void RadioRx( uint32_t timeout )
 800b638:	b508      	push	{r3, lr}
        lr1110_radio_set_rx( &LR1110, ( RxTimeout * 32768 ) );
 800b63a:	4b06      	ldr	r3, [pc, #24]	; (800b654 <RadioRx.part.0+0x1c>)
 800b63c:	4806      	ldr	r0, [pc, #24]	; (800b658 <RadioRx.part.0+0x20>)
 800b63e:	6819      	ldr	r1, [r3, #0]
 800b640:	03c9      	lsls	r1, r1, #15
 800b642:	f7ff f8e1 	bl	800a808 <lr1110_radio_set_rx>
}
 800b646:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_RX );
 800b64a:	4803      	ldr	r0, [pc, #12]	; (800b658 <RadioRx.part.0+0x20>)
 800b64c:	2105      	movs	r1, #5
 800b64e:	f7f7 b9a3 	b.w	8002998 <lr1110_hal_set_operating_mode>
 800b652:	bf00      	nop
 800b654:	200005a8 	.word	0x200005a8
 800b658:	20000a7c 	.word	0x20000a7c

0800b65c <RadioRx>:
{
 800b65c:	b510      	push	{r4, lr}
    lr1110_system_set_dio_irq_params(
 800b65e:	4912      	ldr	r1, [pc, #72]	; (800b6a8 <RadioRx+0x4c>)
{
 800b660:	4604      	mov	r4, r0
    lr1110_system_set_dio_irq_params(
 800b662:	2200      	movs	r2, #0
 800b664:	4811      	ldr	r0, [pc, #68]	; (800b6ac <RadioRx+0x50>)
 800b666:	f7ff fb7d 	bl	800ad64 <lr1110_system_set_dio_irq_params>
    lr1110_radio_set_rx_boosted( &LR1110, false );
 800b66a:	4810      	ldr	r0, [pc, #64]	; (800b6ac <RadioRx+0x50>)
 800b66c:	2100      	movs	r1, #0
 800b66e:	f7ff fa53 	bl	800ab18 <lr1110_radio_set_rx_boosted>
    if( timeout != 0 )
 800b672:	b98c      	cbnz	r4, 800b698 <RadioRx+0x3c>
    if( RxContinuous == true )
 800b674:	4b0e      	ldr	r3, [pc, #56]	; (800b6b0 <RadioRx+0x54>)
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	b153      	cbz	r3, 800b690 <RadioRx+0x34>
        lr1110_radio_set_rx( &LR1110, 0xFFFFFF );  // Rx Continuous
 800b67a:	480c      	ldr	r0, [pc, #48]	; (800b6ac <RadioRx+0x50>)
 800b67c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b680:	f7ff f8c2 	bl	800a808 <lr1110_radio_set_rx>
}
 800b684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_RX_C );
 800b688:	4808      	ldr	r0, [pc, #32]	; (800b6ac <RadioRx+0x50>)
 800b68a:	2106      	movs	r1, #6
 800b68c:	f7f7 b984 	b.w	8002998 <lr1110_hal_set_operating_mode>
}
 800b690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b694:	f7ff bfd0 	b.w	800b638 <RadioRx.part.0>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800b698:	4806      	ldr	r0, [pc, #24]	; (800b6b4 <RadioRx+0x58>)
 800b69a:	4621      	mov	r1, r4
 800b69c:	f001 f81c 	bl	800c6d8 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 800b6a0:	4804      	ldr	r0, [pc, #16]	; (800b6b4 <RadioRx+0x58>)
 800b6a2:	f000 ff3f 	bl	800c524 <TimerStart>
 800b6a6:	e7e5      	b.n	800b674 <RadioRx+0x18>
 800b6a8:	03fffffc 	.word	0x03fffffc
 800b6ac:	20000a7c 	.word	0x20000a7c
 800b6b0:	200005a6 	.word	0x200005a6
 800b6b4:	20000c5c 	.word	0x20000c5c

0800b6b8 <RadioRxBoosted>:
{
 800b6b8:	b510      	push	{r4, lr}
    lr1110_system_set_dio_irq_params(
 800b6ba:	4912      	ldr	r1, [pc, #72]	; (800b704 <RadioRxBoosted+0x4c>)
{
 800b6bc:	4604      	mov	r4, r0
    lr1110_system_set_dio_irq_params(
 800b6be:	2200      	movs	r2, #0
 800b6c0:	4811      	ldr	r0, [pc, #68]	; (800b708 <RadioRxBoosted+0x50>)
 800b6c2:	f7ff fb4f 	bl	800ad64 <lr1110_system_set_dio_irq_params>
    if( timeout != 0 )
 800b6c6:	b9ac      	cbnz	r4, 800b6f4 <RadioRxBoosted+0x3c>
    lr1110_radio_set_rx_boosted( &LR1110, true );
 800b6c8:	480f      	ldr	r0, [pc, #60]	; (800b708 <RadioRxBoosted+0x50>)
 800b6ca:	2101      	movs	r1, #1
 800b6cc:	f7ff fa24 	bl	800ab18 <lr1110_radio_set_rx_boosted>
    if( RxContinuous == true )
 800b6d0:	4b0e      	ldr	r3, [pc, #56]	; (800b70c <RadioRxBoosted+0x54>)
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	b153      	cbz	r3, 800b6ec <RadioRxBoosted+0x34>
        lr1110_radio_set_rx( &LR1110, 0xFFFFFF );  // Rx Continuous
 800b6d6:	480c      	ldr	r0, [pc, #48]	; (800b708 <RadioRxBoosted+0x50>)
 800b6d8:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b6dc:	f7ff f894 	bl	800a808 <lr1110_radio_set_rx>
}
 800b6e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_RX_C );
 800b6e4:	4808      	ldr	r0, [pc, #32]	; (800b708 <RadioRxBoosted+0x50>)
 800b6e6:	2106      	movs	r1, #6
 800b6e8:	f7f7 b956 	b.w	8002998 <lr1110_hal_set_operating_mode>
}
 800b6ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6f0:	f7ff bfa2 	b.w	800b638 <RadioRx.part.0>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800b6f4:	4806      	ldr	r0, [pc, #24]	; (800b710 <RadioRxBoosted+0x58>)
 800b6f6:	4621      	mov	r1, r4
 800b6f8:	f000 ffee 	bl	800c6d8 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 800b6fc:	4804      	ldr	r0, [pc, #16]	; (800b710 <RadioRxBoosted+0x58>)
 800b6fe:	f000 ff11 	bl	800c524 <TimerStart>
 800b702:	e7e1      	b.n	800b6c8 <RadioRxBoosted+0x10>
 800b704:	03fffffc 	.word	0x03fffffc
 800b708:	20000a7c 	.word	0x20000a7c
 800b70c:	200005a6 	.word	0x200005a6
 800b710:	20000c5c 	.word	0x20000c5c

0800b714 <RadioIrqProcess>:
        }
    }
}

void RadioIrqProcess( void )
{
 800b714:	b530      	push	{r4, r5, lr}
    if( IrqFired == true )
 800b716:	4c7a      	ldr	r4, [pc, #488]	; (800b900 <RadioIrqProcess+0x1ec>)
 800b718:	7823      	ldrb	r3, [r4, #0]
{
 800b71a:	b087      	sub	sp, #28
    if( IrqFired == true )
 800b71c:	b90b      	cbnz	r3, 800b722 <RadioIrqProcess+0xe>
            {
                RadioEvents->WifiDone( );
            }
        }
    }
}
 800b71e:	b007      	add	sp, #28
 800b720:	bd30      	pop	{r4, r5, pc}
        CRITICAL_SECTION_BEGIN( );
 800b722:	a803      	add	r0, sp, #12
 800b724:	f7f6 fdb4 	bl	8002290 <BoardCriticalSectionBegin>
        IrqFired = false;
 800b728:	2300      	movs	r3, #0
        CRITICAL_SECTION_END( );
 800b72a:	a803      	add	r0, sp, #12
        IrqFired = false;
 800b72c:	7023      	strb	r3, [r4, #0]
        CRITICAL_SECTION_END( );
 800b72e:	f7f6 fdb5 	bl	800229c <BoardCriticalSectionEnd>
    lr1110_hal_operating_mode_t op_mode = lr1110_hal_get_operating_mode( radio );
 800b732:	4874      	ldr	r0, [pc, #464]	; (800b904 <RadioIrqProcess+0x1f0>)
 800b734:	f7f7 f92c 	bl	8002990 <lr1110_hal_get_operating_mode>
    lr1110_system_get_status( radio, &stat1, &stat2, irq );
 800b738:	aa02      	add	r2, sp, #8
 800b73a:	ab04      	add	r3, sp, #16
 800b73c:	a901      	add	r1, sp, #4
    lr1110_hal_operating_mode_t op_mode = lr1110_hal_get_operating_mode( radio );
 800b73e:	4605      	mov	r5, r0
    lr1110_system_get_status( radio, &stat1, &stat2, irq );
 800b740:	4870      	ldr	r0, [pc, #448]	; (800b904 <RadioIrqProcess+0x1f0>)
 800b742:	f7ff fa51 	bl	800abe8 <lr1110_system_get_status>
    lr1110_system_clear_irq( radio, *irq );
 800b746:	9904      	ldr	r1, [sp, #16]
 800b748:	486e      	ldr	r0, [pc, #440]	; (800b904 <RadioIrqProcess+0x1f0>)
 800b74a:	f7ff fb2b 	bl	800ada4 <lr1110_system_clear_irq>
    CRITICAL_SECTION_BEGIN( );
 800b74e:	a805      	add	r0, sp, #20
 800b750:	f7f6 fd9e 	bl	8002290 <BoardCriticalSectionBegin>
    if( lr1110_get_dio_1_pin_state( radio ) == 1 )
 800b754:	486b      	ldr	r0, [pc, #428]	; (800b904 <RadioIrqProcess+0x1f0>)
 800b756:	f7f6 ffa7 	bl	80026a8 <lr1110_get_dio_1_pin_state>
 800b75a:	2801      	cmp	r0, #1
        IrqFired = true;
 800b75c:	bf08      	it	eq
 800b75e:	7020      	strbeq	r0, [r4, #0]
    CRITICAL_SECTION_END( );
 800b760:	a805      	add	r0, sp, #20
 800b762:	f7f6 fd9b 	bl	800229c <BoardCriticalSectionEnd>
    if( ( ( *irq & LR1110_SYSTEM_IRQ_TXDONE_MASK ) != 0 ) || ( ( *irq & LR1110_SYSTEM_IRQ_CADDONE_MASK ) != 0 ) ||
 800b766:	9b04      	ldr	r3, [sp, #16]
 800b768:	f240 5104 	movw	r1, #1284	; 0x504
 800b76c:	420b      	tst	r3, r1
 800b76e:	461a      	mov	r2, r3
 800b770:	d143      	bne.n	800b7fa <RadioIrqProcess+0xe6>
    if( ( ( *irq & LR1110_SYSTEM_IRQ_HEADERERR_MASK ) != 0 ) || ( ( *irq & LR1110_SYSTEM_IRQ_RXDONE_MASK ) != 0 ) ||
 800b772:	f013 0fc8 	tst.w	r3, #200	; 0xc8
 800b776:	d137      	bne.n	800b7e8 <RadioIrqProcess+0xd4>
        if( ( irqRegs & LR1110_SYSTEM_IRQ_TXDONE_MASK ) == LR1110_SYSTEM_IRQ_TXDONE_MASK )
 800b778:	075d      	lsls	r5, r3, #29
 800b77a:	f100 808a 	bmi.w	800b892 <RadioIrqProcess+0x17e>
        if( ( irqRegs & LR1110_SYSTEM_IRQ_RXDONE_MASK ) == LR1110_SYSTEM_IRQ_RXDONE_MASK )
 800b77e:	071c      	lsls	r4, r3, #28
 800b780:	d45c      	bmi.n	800b83c <RadioIrqProcess+0x128>
        if( ( irqRegs & LR1110_SYSTEM_IRQ_CRCERR_MASK ) == LR1110_SYSTEM_IRQ_CRCERR_MASK )
 800b782:	0618      	lsls	r0, r3, #24
 800b784:	d509      	bpl.n	800b79a <RadioIrqProcess+0x86>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800b786:	4960      	ldr	r1, [pc, #384]	; (800b908 <RadioIrqProcess+0x1f4>)
 800b788:	6809      	ldr	r1, [r1, #0]
 800b78a:	b191      	cbz	r1, 800b7b2 <RadioIrqProcess+0x9e>
 800b78c:	6908      	ldr	r0, [r1, #16]
 800b78e:	2800      	cmp	r0, #0
 800b790:	f000 80a5 	beq.w	800b8de <RadioIrqProcess+0x1ca>
                RadioEvents->RxError( );
 800b794:	4780      	blx	r0
 800b796:	9b04      	ldr	r3, [sp, #16]
 800b798:	461a      	mov	r2, r3
        if( ( irqRegs & LR1110_SYSTEM_IRQ_CADDONE_MASK ) == LR1110_SYSTEM_IRQ_CADDONE_MASK )
 800b79a:	05d9      	lsls	r1, r3, #23
 800b79c:	d509      	bpl.n	800b7b2 <RadioIrqProcess+0x9e>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800b79e:	495a      	ldr	r1, [pc, #360]	; (800b908 <RadioIrqProcess+0x1f4>)
 800b7a0:	6809      	ldr	r1, [r1, #0]
 800b7a2:	b131      	cbz	r1, 800b7b2 <RadioIrqProcess+0x9e>
 800b7a4:	698a      	ldr	r2, [r1, #24]
 800b7a6:	b11a      	cbz	r2, 800b7b0 <RadioIrqProcess+0x9c>
                RadioEvents->CadDone(
 800b7a8:	f3c3 2040 	ubfx	r0, r3, #9, #1
 800b7ac:	4790      	blx	r2
 800b7ae:	9b04      	ldr	r3, [sp, #16]
 800b7b0:	461a      	mov	r2, r3
        if( ( irqRegs & LR1110_SYSTEM_IRQ_TIMEOUT_MASK ) == LR1110_SYSTEM_IRQ_TIMEOUT_MASK )
 800b7b2:	055d      	lsls	r5, r3, #21
 800b7b4:	d436      	bmi.n	800b824 <RadioIrqProcess+0x110>
        if( ( irqRegs & LR1110_SYSTEM_IRQ_HEADERERR_MASK ) == LR1110_SYSTEM_IRQ_HEADERERR_MASK )
 800b7b6:	065c      	lsls	r4, r3, #25
 800b7b8:	d426      	bmi.n	800b808 <RadioIrqProcess+0xf4>
        if( ( irqRegs & LR1110_SYSTEM_IRQ_GNSSSCANDONE_MASK ) == LR1110_SYSTEM_IRQ_GNSSSCANDONE_MASK )
 800b7ba:	0319      	lsls	r1, r3, #12
 800b7bc:	d509      	bpl.n	800b7d2 <RadioIrqProcess+0xbe>
            if( ( RadioEvents != NULL ) && ( RadioEvents->GnssDone != NULL ) )
 800b7be:	4952      	ldr	r1, [pc, #328]	; (800b908 <RadioIrqProcess+0x1f4>)
 800b7c0:	680a      	ldr	r2, [r1, #0]
 800b7c2:	2a00      	cmp	r2, #0
 800b7c4:	d0ab      	beq.n	800b71e <RadioIrqProcess+0xa>
 800b7c6:	69d2      	ldr	r2, [r2, #28]
 800b7c8:	2a00      	cmp	r2, #0
 800b7ca:	f000 8083 	beq.w	800b8d4 <RadioIrqProcess+0x1c0>
                RadioEvents->GnssDone( );
 800b7ce:	4790      	blx	r2
 800b7d0:	9a04      	ldr	r2, [sp, #16]
        if( ( irqRegs & LR1110_SYSTEM_IRQ_WIFISCANDONE_MASK ) == LR1110_SYSTEM_IRQ_WIFISCANDONE_MASK )
 800b7d2:	02d3      	lsls	r3, r2, #11
 800b7d4:	d5a3      	bpl.n	800b71e <RadioIrqProcess+0xa>
            if( ( RadioEvents != NULL ) && ( RadioEvents->WifiDone != NULL ) )
 800b7d6:	4b4c      	ldr	r3, [pc, #304]	; (800b908 <RadioIrqProcess+0x1f4>)
 800b7d8:	681a      	ldr	r2, [r3, #0]
 800b7da:	2a00      	cmp	r2, #0
 800b7dc:	d09f      	beq.n	800b71e <RadioIrqProcess+0xa>
 800b7de:	6a13      	ldr	r3, [r2, #32]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d09c      	beq.n	800b71e <RadioIrqProcess+0xa>
                RadioEvents->WifiDone( );
 800b7e4:	4798      	blx	r3
}
 800b7e6:	e79a      	b.n	800b71e <RadioIrqProcess+0xa>
        if( op_mode != LR1110_HAL_OP_MODE_RX_C )
 800b7e8:	2d06      	cmp	r5, #6
 800b7ea:	d0c5      	beq.n	800b778 <RadioIrqProcess+0x64>
            lr1110_hal_set_operating_mode( radio, LR1110_HAL_OP_MODE_STDBY_RC );
 800b7ec:	4845      	ldr	r0, [pc, #276]	; (800b904 <RadioIrqProcess+0x1f0>)
 800b7ee:	2101      	movs	r1, #1
 800b7f0:	f7f7 f8d2 	bl	8002998 <lr1110_hal_set_operating_mode>
 800b7f4:	9b04      	ldr	r3, [sp, #16]
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	e7be      	b.n	800b778 <RadioIrqProcess+0x64>
        lr1110_hal_set_operating_mode( radio, LR1110_HAL_OP_MODE_STDBY_RC );
 800b7fa:	4842      	ldr	r0, [pc, #264]	; (800b904 <RadioIrqProcess+0x1f0>)
 800b7fc:	2101      	movs	r1, #1
 800b7fe:	f7f7 f8cb 	bl	8002998 <lr1110_hal_set_operating_mode>
 800b802:	9b04      	ldr	r3, [sp, #16]
 800b804:	461a      	mov	r2, r3
 800b806:	e7b4      	b.n	800b772 <RadioIrqProcess+0x5e>
            TimerStop( &RxTimeoutTimer );
 800b808:	4840      	ldr	r0, [pc, #256]	; (800b90c <RadioIrqProcess+0x1f8>)
 800b80a:	f000 ff2b 	bl	800c664 <TimerStop>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800b80e:	493e      	ldr	r1, [pc, #248]	; (800b908 <RadioIrqProcess+0x1f4>)
 800b810:	680a      	ldr	r2, [r1, #0]
 800b812:	2a00      	cmp	r2, #0
 800b814:	d067      	beq.n	800b8e6 <RadioIrqProcess+0x1d2>
 800b816:	68d3      	ldr	r3, [r2, #12]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d069      	beq.n	800b8f0 <RadioIrqProcess+0x1dc>
                RadioEvents->RxTimeout( );
 800b81c:	4798      	blx	r3
 800b81e:	9b04      	ldr	r3, [sp, #16]
 800b820:	461a      	mov	r2, r3
 800b822:	e7ca      	b.n	800b7ba <RadioIrqProcess+0xa6>
            TimerStop( &RxTimeoutTimer );
 800b824:	4839      	ldr	r0, [pc, #228]	; (800b90c <RadioIrqProcess+0x1f8>)
 800b826:	f000 ff1d 	bl	800c664 <TimerStop>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800b82a:	4b37      	ldr	r3, [pc, #220]	; (800b908 <RadioIrqProcess+0x1f4>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	b113      	cbz	r3, 800b836 <RadioIrqProcess+0x122>
 800b830:	68db      	ldr	r3, [r3, #12]
 800b832:	b103      	cbz	r3, 800b836 <RadioIrqProcess+0x122>
                RadioEvents->RxTimeout( );
 800b834:	4798      	blx	r3
 800b836:	9b04      	ldr	r3, [sp, #16]
 800b838:	461a      	mov	r2, r3
 800b83a:	e7bc      	b.n	800b7b6 <RadioIrqProcess+0xa2>
            TimerStop( &RxTimeoutTimer );
 800b83c:	4833      	ldr	r0, [pc, #204]	; (800b90c <RadioIrqProcess+0x1f8>)
 800b83e:	f000 ff11 	bl	800c664 <TimerStop>
            lr1110_radio_get_rxbuffer_status( &LR1110, &rxbuffer_status );
 800b842:	4830      	ldr	r0, [pc, #192]	; (800b904 <RadioIrqProcess+0x1f0>)
 800b844:	a905      	add	r1, sp, #20
 800b846:	f7fe ff27 	bl	800a698 <lr1110_radio_get_rxbuffer_status>
            lr1110_regmem_read_buffer8( &LR1110, RadioRxPayload, rxbuffer_status.rx_start_buffer_pointer,
 800b84a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800b84e:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800b852:	492f      	ldr	r1, [pc, #188]	; (800b910 <RadioIrqProcess+0x1fc>)
 800b854:	482b      	ldr	r0, [pc, #172]	; (800b904 <RadioIrqProcess+0x1f0>)
 800b856:	f7ff f9b1 	bl	800abbc <lr1110_regmem_read_buffer8>
            lr1110_radio_get_packet_type( &LR1110, &packet_type );
 800b85a:	482a      	ldr	r0, [pc, #168]	; (800b904 <RadioIrqProcess+0x1f0>)
 800b85c:	a902      	add	r1, sp, #8
 800b85e:	f7fe ff0b 	bl	800a678 <lr1110_radio_get_packet_type>
            if( packet_type == LR1110_RADIO_PACKET_LORA )
 800b862:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800b866:	2b02      	cmp	r3, #2
 800b868:	d01f      	beq.n	800b8aa <RadioIrqProcess+0x196>
                lr1110_radio_get_packet_status_gfsk( &LR1110, &gfsk_packet_status );
 800b86a:	4c2a      	ldr	r4, [pc, #168]	; (800b914 <RadioIrqProcess+0x200>)
 800b86c:	4825      	ldr	r0, [pc, #148]	; (800b904 <RadioIrqProcess+0x1f0>)
 800b86e:	4621      	mov	r1, r4
 800b870:	f7fe ff2a 	bl	800a6c8 <lr1110_radio_get_packet_status_gfsk>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800b874:	4b24      	ldr	r3, [pc, #144]	; (800b908 <RadioIrqProcess+0x1f4>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	b143      	cbz	r3, 800b88c <RadioIrqProcess+0x178>
 800b87a:	689d      	ldr	r5, [r3, #8]
 800b87c:	b135      	cbz	r5, 800b88c <RadioIrqProcess+0x178>
                    RadioEvents->RxDone( RadioRxPayload, rxbuffer_status.rx_payload_length,
 800b87e:	f994 2001 	ldrsb.w	r2, [r4, #1]
 800b882:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800b886:	4822      	ldr	r0, [pc, #136]	; (800b910 <RadioIrqProcess+0x1fc>)
 800b888:	2300      	movs	r3, #0
 800b88a:	47a8      	blx	r5
 800b88c:	9b04      	ldr	r3, [sp, #16]
 800b88e:	461a      	mov	r2, r3
 800b890:	e777      	b.n	800b782 <RadioIrqProcess+0x6e>
            TimerStop( &TxTimeoutTimer );
 800b892:	4821      	ldr	r0, [pc, #132]	; (800b918 <RadioIrqProcess+0x204>)
 800b894:	f000 fee6 	bl	800c664 <TimerStop>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800b898:	4b1b      	ldr	r3, [pc, #108]	; (800b908 <RadioIrqProcess+0x1f4>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	b113      	cbz	r3, 800b8a4 <RadioIrqProcess+0x190>
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	b103      	cbz	r3, 800b8a4 <RadioIrqProcess+0x190>
                RadioEvents->TxDone( );
 800b8a2:	4798      	blx	r3
 800b8a4:	9b04      	ldr	r3, [sp, #16]
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	e769      	b.n	800b77e <RadioIrqProcess+0x6a>
                lr1110_radio_get_packet_status_lora( &LR1110, &lora_packet_status );
 800b8aa:	4c1c      	ldr	r4, [pc, #112]	; (800b91c <RadioIrqProcess+0x208>)
 800b8ac:	4815      	ldr	r0, [pc, #84]	; (800b904 <RadioIrqProcess+0x1f0>)
 800b8ae:	4621      	mov	r1, r4
 800b8b0:	f7fe ff3e 	bl	800a730 <lr1110_radio_get_packet_status_lora>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800b8b4:	4b14      	ldr	r3, [pc, #80]	; (800b908 <RadioIrqProcess+0x1f4>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d0e7      	beq.n	800b88c <RadioIrqProcess+0x178>
 800b8bc:	689d      	ldr	r5, [r3, #8]
 800b8be:	2d00      	cmp	r5, #0
 800b8c0:	d0e4      	beq.n	800b88c <RadioIrqProcess+0x178>
                    RadioEvents->RxDone( RadioRxPayload, rxbuffer_status.rx_payload_length,
 800b8c2:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800b8c6:	f994 2000 	ldrsb.w	r2, [r4]
 800b8ca:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800b8ce:	4810      	ldr	r0, [pc, #64]	; (800b910 <RadioIrqProcess+0x1fc>)
 800b8d0:	47a8      	blx	r5
 800b8d2:	e7db      	b.n	800b88c <RadioIrqProcess+0x178>
        if( ( irqRegs & LR1110_SYSTEM_IRQ_WIFISCANDONE_MASK ) == LR1110_SYSTEM_IRQ_WIFISCANDONE_MASK )
 800b8d4:	02dd      	lsls	r5, r3, #11
 800b8d6:	f57f af22 	bpl.w	800b71e <RadioIrqProcess+0xa>
            if( ( RadioEvents != NULL ) && ( RadioEvents->WifiDone != NULL ) )
 800b8da:	680a      	ldr	r2, [r1, #0]
 800b8dc:	e77f      	b.n	800b7de <RadioIrqProcess+0xca>
        if( ( irqRegs & LR1110_SYSTEM_IRQ_CADDONE_MASK ) == LR1110_SYSTEM_IRQ_CADDONE_MASK )
 800b8de:	05d8      	lsls	r0, r3, #23
 800b8e0:	f53f af60 	bmi.w	800b7a4 <RadioIrqProcess+0x90>
 800b8e4:	e765      	b.n	800b7b2 <RadioIrqProcess+0x9e>
 800b8e6:	9a04      	ldr	r2, [sp, #16]
        if( ( irqRegs & LR1110_SYSTEM_IRQ_GNSSSCANDONE_MASK ) == LR1110_SYSTEM_IRQ_GNSSSCANDONE_MASK )
 800b8e8:	0310      	lsls	r0, r2, #12
 800b8ea:	f57f af72 	bpl.w	800b7d2 <RadioIrqProcess+0xbe>
 800b8ee:	e716      	b.n	800b71e <RadioIrqProcess+0xa>
 800b8f0:	9b04      	ldr	r3, [sp, #16]
 800b8f2:	031c      	lsls	r4, r3, #12
 800b8f4:	f53f af67 	bmi.w	800b7c6 <RadioIrqProcess+0xb2>
        if( ( irqRegs & LR1110_SYSTEM_IRQ_WIFISCANDONE_MASK ) == LR1110_SYSTEM_IRQ_WIFISCANDONE_MASK )
 800b8f8:	02db      	lsls	r3, r3, #11
 800b8fa:	f53f af70 	bmi.w	800b7de <RadioIrqProcess+0xca>
 800b8fe:	e70e      	b.n	800b71e <RadioIrqProcess+0xa>
 800b900:	2000059d 	.word	0x2000059d
 800b904:	20000a7c 	.word	0x20000a7c
 800b908:	200005a0 	.word	0x200005a0
 800b90c:	20000c5c 	.word	0x20000c5c
 800b910:	20000b5c 	.word	0x20000b5c
 800b914:	20000b50 	.word	0x20000b50
 800b918:	20000b38 	.word	0x20000b38
 800b91c:	20000a78 	.word	0x20000a78

0800b920 <RadioSetPublicNetwork>:
    RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 800b920:	4b09      	ldr	r3, [pc, #36]	; (800b948 <RadioSetPublicNetwork+0x28>)
{
 800b922:	b510      	push	{r4, lr}
 800b924:	4604      	mov	r4, r0
    RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 800b926:	7018      	strb	r0, [r3, #0]
 800b928:	7058      	strb	r0, [r3, #1]
    switch( modem )
 800b92a:	f000 f811 	bl	800b950 <RadioSetModem.part.0>
    if( enable == true )
 800b92e:	b12c      	cbz	r4, 800b93c <RadioSetPublicNetwork+0x1c>
}
 800b930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lr1110_radio_set_lora_sync_word( &LR1110, LR1110_RADIO_LORA_NETWORK_PUBLIC );
 800b934:	4805      	ldr	r0, [pc, #20]	; (800b94c <RadioSetPublicNetwork+0x2c>)
 800b936:	2101      	movs	r1, #1
 800b938:	f7fe bf54 	b.w	800a7e4 <lr1110_radio_set_lora_sync_word>
        lr1110_radio_set_lora_sync_word( &LR1110, LR1110_RADIO_LORA_NETWORK_PRIVATE );
 800b93c:	4621      	mov	r1, r4
 800b93e:	4803      	ldr	r0, [pc, #12]	; (800b94c <RadioSetPublicNetwork+0x2c>)
}
 800b940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lr1110_radio_set_lora_sync_word( &LR1110, LR1110_RADIO_LORA_NETWORK_PRIVATE );
 800b944:	f7fe bf4e 	b.w	800a7e4 <lr1110_radio_set_lora_sync_word>
 800b948:	200005a4 	.word	0x200005a4
 800b94c:	20000a7c 	.word	0x20000a7c

0800b950 <RadioSetModem.part.0>:
void RadioSetModem( RadioModems_t modem )
 800b950:	b508      	push	{r3, lr}
        lr1110_radio_set_packet_type( &LR1110, LR1110_RADIO_PACKET_LORA );
 800b952:	4807      	ldr	r0, [pc, #28]	; (800b970 <RadioSetModem.part.0+0x20>)
 800b954:	2102      	movs	r1, #2
 800b956:	f7fe ff9b 	bl	800a890 <lr1110_radio_set_packet_type>
        if( RadioPublicNetwork.Current != RadioPublicNetwork.Previous )
 800b95a:	4b06      	ldr	r3, [pc, #24]	; (800b974 <RadioSetModem.part.0+0x24>)
 800b95c:	7818      	ldrb	r0, [r3, #0]
 800b95e:	785a      	ldrb	r2, [r3, #1]
 800b960:	4282      	cmp	r2, r0
 800b962:	d100      	bne.n	800b966 <RadioSetModem.part.0+0x16>
}
 800b964:	bd08      	pop	{r3, pc}
            RadioPublicNetwork.Current = RadioPublicNetwork.Previous;
 800b966:	7058      	strb	r0, [r3, #1]
}
 800b968:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            RadioSetPublicNetwork( RadioPublicNetwork.Current );
 800b96c:	f7ff bfd8 	b.w	800b920 <RadioSetPublicNetwork>
 800b970:	20000a7c 	.word	0x20000a7c
 800b974:	200005a4 	.word	0x200005a4

0800b978 <RadioSetModem>:
    switch( modem )
 800b978:	2801      	cmp	r0, #1
 800b97a:	d008      	beq.n	800b98e <RadioSetModem+0x16>
{
 800b97c:	b508      	push	{r3, lr}
        lr1110_radio_set_packet_type( &LR1110, LR1110_RADIO_PACKET_GFSK );
 800b97e:	4805      	ldr	r0, [pc, #20]	; (800b994 <RadioSetModem+0x1c>)
 800b980:	2101      	movs	r1, #1
 800b982:	f7fe ff85 	bl	800a890 <lr1110_radio_set_packet_type>
        RadioPublicNetwork.Current = false;
 800b986:	4b04      	ldr	r3, [pc, #16]	; (800b998 <RadioSetModem+0x20>)
 800b988:	2200      	movs	r2, #0
 800b98a:	705a      	strb	r2, [r3, #1]
}
 800b98c:	bd08      	pop	{r3, pc}
 800b98e:	f7ff bfdf 	b.w	800b950 <RadioSetModem.part.0>
 800b992:	bf00      	nop
 800b994:	20000a7c 	.word	0x20000a7c
 800b998:	200005a4 	.word	0x200005a4

0800b99c <RadioSetTxConfig>:
{
 800b99c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b9a0:	b083      	sub	sp, #12
 800b9a2:	460d      	mov	r5, r1
 800b9a4:	f89d c02c 	ldrb.w	ip, [sp, #44]	; 0x2c
 800b9a8:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 800b9ac:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
 800b9b0:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
 800b9b4:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
    switch( modem )
 800b9b8:	2800      	cmp	r0, #0
 800b9ba:	d04b      	beq.n	800ba54 <RadioSetTxConfig+0xb8>
 800b9bc:	2801      	cmp	r0, #1
 800b9be:	d13f      	bne.n	800ba40 <RadioSetTxConfig+0xa4>
        LR1110.modulation_params.modulation.lora.bandwidth        = Bandwidths[bandwidth];
 800b9c0:	4a5c      	ldr	r2, [pc, #368]	; (800bb34 <RadioSetTxConfig+0x198>)
        LR1110.modulation_params.packet_type            = LR1110_RADIO_PACKET_LORA;
 800b9c2:	4c5d      	ldr	r4, [pc, #372]	; (800bb38 <RadioSetTxConfig+0x19c>)
        LR1110.modulation_params.modulation.lora.bandwidth        = Bandwidths[bandwidth];
 800b9c4:	5cd2      	ldrb	r2, [r2, r3]
 800b9c6:	f884 20a5 	strb.w	r2, [r4, #165]	; 0xa5
        LR1110.modulation_params.modulation.lora.spreading_factor = ( lr1110_radio_lora_sf_t ) datarate;
 800b9ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
        LR1110.modulation_params.modulation.lora.coding_rate      = ( lr1110_radio_lora_cr_t ) coderate;
 800b9cc:	f884 c0a6 	strb.w	ip, [r4, #166]	; 0xa6
        LR1110.modulation_params.packet_type            = LR1110_RADIO_PACKET_LORA;
 800b9d0:	2002      	movs	r0, #2
        LR1110.modulation_params.modulation.lora.spreading_factor = ( lr1110_radio_lora_sf_t ) datarate;
 800b9d2:	b2d2      	uxtb	r2, r2
        LR1110.modulation_params.packet_type            = LR1110_RADIO_PACKET_LORA;
 800b9d4:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
        LR1110.modulation_params.modulation.lora.spreading_factor = ( lr1110_radio_lora_sf_t ) datarate;
 800b9d8:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
        if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	f000 8094 	beq.w	800bb0a <RadioSetTxConfig+0x16e>
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	d103      	bne.n	800b9ee <RadioSetTxConfig+0x52>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800b9e6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b9e8:	2e0c      	cmp	r6, #12
 800b9ea:	f000 809e 	beq.w	800bb2a <RadioSetTxConfig+0x18e>
            LR1110.modulation_params.modulation.lora.ppm_offset = 0x00;
 800b9ee:	2300      	movs	r3, #0
        if( ( LR1110.modulation_params.modulation.lora.spreading_factor == LR1110_RADIO_LORA_SF5 ) ||
 800b9f0:	3a05      	subs	r2, #5
        LR1110.packet_params.packet_type = LR1110_RADIO_PACKET_LORA;
 800b9f2:	2002      	movs	r0, #2
        if( ( LR1110.modulation_params.modulation.lora.spreading_factor == LR1110_RADIO_LORA_SF5 ) ||
 800b9f4:	2a01      	cmp	r2, #1
 800b9f6:	f884 30a7 	strb.w	r3, [r4, #167]	; 0xa7
        LR1110.packet_params.packet_type = LR1110_RADIO_PACKET_LORA;
 800b9fa:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
        if( ( LR1110.modulation_params.modulation.lora.spreading_factor == LR1110_RADIO_LORA_SF5 ) ||
 800b9fe:	f240 808b 	bls.w	800bb18 <RadioSetTxConfig+0x17c>
                LR1110.packet_params.packet.lora.preamble_length_in_symb = preambleLen;
 800ba02:	f8a4 70b4 	strh.w	r7, [r4, #180]	; 0xb4
        LR1110.packet_params.packet.lora.payload_length_in_byte = MaxPayloadLength;
 800ba06:	4b4d      	ldr	r3, [pc, #308]	; (800bb3c <RadioSetTxConfig+0x1a0>)
        LR1110.packet_params.packet.lora.iq                     = ( lr1110_radio_lora_iq_t ) iqInverted;
 800ba08:	f884 10b9 	strb.w	r1, [r4, #185]	; 0xb9
        LR1110.packet_params.packet.lora.payload_length_in_byte = MaxPayloadLength;
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	f884 30b7 	strb.w	r3, [r4, #183]	; 0xb7
        LR1110.packet_params.packet.lora.header_type            = ( lr1110_radio_lora_header_type_t ) fixLen;
 800ba12:	f884 80b6 	strb.w	r8, [r4, #182]	; 0xb6
        LR1110.packet_params.packet.lora.crc                    = ( lr1110_radio_lora_crc_t ) crcOn;
 800ba16:	f884 90b8 	strb.w	r9, [r4, #184]	; 0xb8
        RadioStandby( );
 800ba1a:	f7ff fc81 	bl	800b320 <RadioStandby>
        RadioSetModem( ( LR1110.modulation_params.packet_type == LR1110_RADIO_PACKET_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800ba1e:	f894 0094 	ldrb.w	r0, [r4, #148]	; 0x94
 800ba22:	3801      	subs	r0, #1
 800ba24:	bf18      	it	ne
 800ba26:	2001      	movne	r0, #1
 800ba28:	f7ff ffa6 	bl	800b978 <RadioSetModem>
        lr1110_radio_set_modulation_param_lora( &LR1110, &LR1110.modulation_params.modulation.lora );
 800ba2c:	4944      	ldr	r1, [pc, #272]	; (800bb40 <RadioSetTxConfig+0x1a4>)
 800ba2e:	f1a1 00a4 	sub.w	r0, r1, #164	; 0xa4
 800ba32:	f7fe ff5f 	bl	800a8f4 <lr1110_radio_set_modulation_param_lora>
        lr1110_radio_set_packet_param_lora( &LR1110, &LR1110.packet_params.packet.lora );
 800ba36:	4943      	ldr	r1, [pc, #268]	; (800bb44 <RadioSetTxConfig+0x1a8>)
 800ba38:	f1a1 00b4 	sub.w	r0, r1, #180	; 0xb4
 800ba3c:	f7fe ff92 	bl	800a964 <lr1110_radio_set_packet_param_lora>
    lr1110_board_set_rf_tx_power( &LR1110, power );
 800ba40:	483d      	ldr	r0, [pc, #244]	; (800bb38 <RadioSetTxConfig+0x19c>)
 800ba42:	4629      	mov	r1, r5
 800ba44:	f7f6 fe1e 	bl	8002684 <lr1110_board_set_rf_tx_power>
    TxTimeout = timeout;
 800ba48:	4b3f      	ldr	r3, [pc, #252]	; (800bb48 <RadioSetTxConfig+0x1ac>)
 800ba4a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ba4c:	601a      	str	r2, [r3, #0]
}
 800ba4e:	b003      	add	sp, #12
 800ba50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        LR1110.modulation_params.packet_type   = LR1110_RADIO_PACKET_GFSK;
 800ba54:	4c38      	ldr	r4, [pc, #224]	; (800bb38 <RadioSetTxConfig+0x19c>)
        LR1110.modulation_params.modulation.gfsk.bitrate = datarate;
 800ba56:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ba58:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
        LR1110.modulation_params.packet_type   = LR1110_RADIO_PACKET_GFSK;
 800ba5c:	2101      	movs	r1, #1
 800ba5e:	4616      	mov	r6, r2
    if( bandwidth == 0 )
 800ba60:	fa13 f001 	lsls.w	r0, r3, r1
        LR1110.modulation_params.modulation.gfsk.pulse_shape = LR1110_RADIO_PULSESHAPE_GAUSSIANBT1;
 800ba64:	f04f 020b 	mov.w	r2, #11
        LR1110.modulation_params.packet_type   = LR1110_RADIO_PACKET_GFSK;
 800ba68:	f884 1094 	strb.w	r1, [r4, #148]	; 0x94
        LR1110.modulation_params.modulation.gfsk.pulse_shape = LR1110_RADIO_PULSESHAPE_GAUSSIANBT1;
 800ba6c:	f884 209c 	strb.w	r2, [r4, #156]	; 0x9c
    if( bandwidth == 0 )
 800ba70:	d059      	beq.n	800bb26 <RadioSetTxConfig+0x18a>
 800ba72:	f7ff fdab 	bl	800b5cc <RadioGetFskBandwidthRegValue.part.0>
            LR1110.packet_params.packet.gfsk.crc_type = LR1110_RADIO_GFSK_CRC_OFF;
 800ba76:	f1b9 0f00 	cmp.w	r9, #0
 800ba7a:	bf14      	ite	ne
 800ba7c:	f04f 0c06 	movne.w	ip, #6
 800ba80:	f04f 0c01 	moveq.w	ip, #1
        LR1110.packet_params.packet_type                     = LR1110_RADIO_PACKET_GFSK;
 800ba84:	2301      	movs	r3, #1
        LR1110.packet_params.packet.gfsk.address_filtering         = LR1110_RADIO_GFSK_ADDRESS_FILTERING_DISABLE;
 800ba86:	2200      	movs	r2, #0
        LR1110.packet_params.packet.gfsk.preamble_detect           = LR1110_RADIO_GFSK_PREAMBLE_DETECTOR_LENGTH_8BITS;
 800ba88:	f641 0104 	movw	r1, #6148	; 0x1804
        LR1110.packet_params.packet.gfsk.preamble_length_tx_in_bit = ( preambleLen << 3 );  // convert byte into bit
 800ba8c:	00ff      	lsls	r7, r7, #3
            ( fixLen == true ) ? LR1110_RADIO_GFSK_HEADER_TYPE_IMPLICIT : LR1110_RADIO_GFSK_HEADER_TYPE_EXPLICIT;
 800ba8e:	f088 0801 	eor.w	r8, r8, #1
 800ba92:	f884 c0b1 	strb.w	ip, [r4, #177]	; 0xb1
        LR1110.packet_params.packet.gfsk.address_filtering         = LR1110_RADIO_GFSK_ADDRESS_FILTERING_DISABLE;
 800ba96:	f884 20ae 	strb.w	r2, [r4, #174]	; 0xae
        LR1110.packet_params.packet_type                     = LR1110_RADIO_PACKET_GFSK;
 800ba9a:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
        LR1110.packet_params.packet.gfsk.dc_free = LR1110_RADIO_GFSK_DCFREE_WHITENING;
 800ba9e:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
        LR1110.packet_params.packet.gfsk.preamble_detect           = LR1110_RADIO_GFSK_PREAMBLE_DETECTOR_LENGTH_8BITS;
 800baa2:	f8a4 10ac 	strh.w	r1, [r4, #172]	; 0xac
        LR1110.modulation_params.modulation.gfsk.bandwidth =
 800baa6:	f884 009d 	strb.w	r0, [r4, #157]	; 0x9d
        LR1110.packet_params.packet.gfsk.preamble_length_tx_in_bit = ( preambleLen << 3 );  // convert byte into bit
 800baaa:	f8a4 70aa 	strh.w	r7, [r4, #170]	; 0xaa
        LR1110.packet_params.packet.gfsk.header_type =
 800baae:	f884 80af 	strb.w	r8, [r4, #175]	; 0xaf
        LR1110.modulation_params.modulation.gfsk.fdev = fdev;
 800bab2:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
        RadioStandby( );
 800bab6:	f7ff fc33 	bl	800b320 <RadioStandby>
        RadioSetModem( ( LR1110.modulation_params.packet_type == LR1110_RADIO_PACKET_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800baba:	f894 0094 	ldrb.w	r0, [r4, #148]	; 0x94
 800babe:	3801      	subs	r0, #1
 800bac0:	bf18      	it	ne
 800bac2:	2001      	movne	r0, #1
 800bac4:	f7ff ff58 	bl	800b978 <RadioSetModem>
        lr1110_radio_set_modulation_param_gfsk( &LR1110, &LR1110.modulation_params.modulation.gfsk );
 800bac8:	4920      	ldr	r1, [pc, #128]	; (800bb4c <RadioSetTxConfig+0x1b0>)
 800baca:	f1a1 0098 	sub.w	r0, r1, #152	; 0x98
 800bace:	f7fe fef1 	bl	800a8b4 <lr1110_radio_set_modulation_param_gfsk>
        lr1110_radio_set_packet_param_gfsk( &LR1110, &LR1110.packet_params.packet.gfsk );
 800bad2:	491f      	ldr	r1, [pc, #124]	; (800bb50 <RadioSetTxConfig+0x1b4>)
 800bad4:	f1a1 00aa 	sub.w	r0, r1, #170	; 0xaa
 800bad8:	f7fe ff26 	bl	800a928 <lr1110_radio_set_packet_param_gfsk>
        lr1110_radio_set_gfsk_sync_word( &LR1110, ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800badc:	4b1d      	ldr	r3, [pc, #116]	; (800bb54 <RadioSetTxConfig+0x1b8>)
 800bade:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bae2:	466b      	mov	r3, sp
 800bae4:	e883 0003 	stmia.w	r3, {r0, r1}
 800bae8:	4619      	mov	r1, r3
 800baea:	4813      	ldr	r0, [pc, #76]	; (800bb38 <RadioSetTxConfig+0x19c>)
 800baec:	f7fe fe62 	bl	800a7b4 <lr1110_radio_set_gfsk_sync_word>
        lr1110_radio_set_gfsk_crc_params( &LR1110, 0x1D0F, 0x1021 );
 800baf0:	4811      	ldr	r0, [pc, #68]	; (800bb38 <RadioSetTxConfig+0x19c>)
 800baf2:	f241 0221 	movw	r2, #4129	; 0x1021
 800baf6:	f641 510f 	movw	r1, #7439	; 0x1d0f
 800bafa:	f7fe ffdb 	bl	800aab4 <lr1110_radio_set_gfsk_crc_params>
        lr1110_radio_set_gfsk_whitening_params( &LR1110, 0x01FF );
 800bafe:	480e      	ldr	r0, [pc, #56]	; (800bb38 <RadioSetTxConfig+0x19c>)
 800bb00:	f240 11ff 	movw	r1, #511	; 0x1ff
 800bb04:	f7fe fff6 	bl	800aaf4 <lr1110_radio_set_gfsk_whitening_params>
        break;
 800bb08:	e79a      	b.n	800ba40 <RadioSetTxConfig+0xa4>
        if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800bb0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb0c:	3b0b      	subs	r3, #11
            LR1110.modulation_params.modulation.lora.ppm_offset = 0x00;
 800bb0e:	2b01      	cmp	r3, #1
 800bb10:	bf8c      	ite	hi
 800bb12:	2300      	movhi	r3, #0
 800bb14:	2301      	movls	r3, #1
 800bb16:	e76b      	b.n	800b9f0 <RadioSetTxConfig+0x54>
            if( preambleLen < 12 )
 800bb18:	2f0b      	cmp	r7, #11
 800bb1a:	f63f af72 	bhi.w	800ba02 <RadioSetTxConfig+0x66>
                LR1110.packet_params.packet.lora.preamble_length_in_symb = 12;
 800bb1e:	230c      	movs	r3, #12
 800bb20:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
 800bb24:	e76f      	b.n	800ba06 <RadioSetTxConfig+0x6a>
        return ( 0x1F );
 800bb26:	201f      	movs	r0, #31
 800bb28:	e7a5      	b.n	800ba76 <RadioSetTxConfig+0xda>
 800bb2a:	f884 30a7 	strb.w	r3, [r4, #167]	; 0xa7
        LR1110.packet_params.packet_type = LR1110_RADIO_PACKET_LORA;
 800bb2e:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
        if( ( LR1110.modulation_params.modulation.lora.spreading_factor == LR1110_RADIO_LORA_SF5 ) ||
 800bb32:	e766      	b.n	800ba02 <RadioSetTxConfig+0x66>
 800bb34:	08015764 	.word	0x08015764
 800bb38:	20000a7c 	.word	0x20000a7c
 800bb3c:	200000f0 	.word	0x200000f0
 800bb40:	20000b20 	.word	0x20000b20
 800bb44:	20000b30 	.word	0x20000b30
 800bb48:	200005ac 	.word	0x200005ac
 800bb4c:	20000b14 	.word	0x20000b14
 800bb50:	20000b26 	.word	0x20000b26
 800bb54:	08014470 	.word	0x08014470

0800bb58 <RadioSetRxConfig>:
{
 800bb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb5c:	b085      	sub	sp, #20
    RxContinuous = rxContinuous;
 800bb5e:	4e74      	ldr	r6, [pc, #464]	; (800bd30 <RadioSetRxConfig+0x1d8>)
{
 800bb60:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 800bb64:	f89d 8044 	ldrb.w	r8, [sp, #68]	; 0x44
 800bb68:	f8bd 7040 	ldrh.w	r7, [sp, #64]	; 0x40
 800bb6c:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 800bd54 <RadioSetRxConfig+0x1fc>
 800bb70:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
    RxContinuous = rxContinuous;
 800bb74:	7035      	strb	r5, [r6, #0]
        symbTimeout = 0;
 800bb76:	2d00      	cmp	r5, #0
 800bb78:	bf18      	it	ne
 800bb7a:	2700      	movne	r7, #0
        MaxPayloadLength = 0xFF;
 800bb7c:	f1b8 0f00 	cmp.w	r8, #0
 800bb80:	bf08      	it	eq
 800bb82:	24ff      	moveq	r4, #255	; 0xff
{
 800bb84:	4615      	mov	r5, r2
 800bb86:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 800bb8a:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 800bb8e:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 800bb92:	f889 4000 	strb.w	r4, [r9]
 800bb96:	460e      	mov	r6, r1
    switch( modem )
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	d04b      	beq.n	800bc34 <RadioSetRxConfig+0xdc>
 800bb9c:	2801      	cmp	r0, #1
 800bb9e:	d146      	bne.n	800bc2e <RadioSetRxConfig+0xd6>
        lr1110_radio_stop_timeout_on_preamble( &LR1110, false );
 800bba0:	4c64      	ldr	r4, [pc, #400]	; (800bd34 <RadioSetRxConfig+0x1dc>)
 800bba2:	2100      	movs	r1, #0
 800bba4:	4620      	mov	r0, r4
 800bba6:	e9cd 3200 	strd	r3, r2, [sp]
 800bbaa:	f7fe ff43 	bl	800aa34 <lr1110_radio_stop_timeout_on_preamble>
        lr1110_radio_set_lora_sync_timeout( &LR1110, symbTimeout );
 800bbae:	b2f9      	uxtb	r1, r7
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	f7fe ff6d 	bl	800aa90 <lr1110_radio_set_lora_sync_timeout>
        LR1110.modulation_params.modulation.lora.bandwidth        = Bandwidths[bandwidth];
 800bbb6:	4960      	ldr	r1, [pc, #384]	; (800bd38 <RadioSetRxConfig+0x1e0>)
        LR1110.modulation_params.modulation.lora.coding_rate      = ( lr1110_radio_lora_cr_t ) coderate;
 800bbb8:	9b00      	ldr	r3, [sp, #0]
 800bbba:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
        LR1110.modulation_params.modulation.lora.bandwidth        = Bandwidths[bandwidth];
 800bbbe:	5d8b      	ldrb	r3, [r1, r6]
 800bbc0:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
        LR1110.modulation_params.packet_type            = LR1110_RADIO_PACKET_LORA;
 800bbc4:	2102      	movs	r1, #2
        LR1110.modulation_params.modulation.lora.spreading_factor = ( lr1110_radio_lora_sf_t ) datarate;
 800bbc6:	b2eb      	uxtb	r3, r5
        if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800bbc8:	9a01      	ldr	r2, [sp, #4]
        LR1110.modulation_params.packet_type            = LR1110_RADIO_PACKET_LORA;
 800bbca:	f884 1094 	strb.w	r1, [r4, #148]	; 0x94
        LR1110.modulation_params.modulation.lora.spreading_factor = ( lr1110_radio_lora_sf_t ) datarate;
 800bbce:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
        if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800bbd2:	2e00      	cmp	r6, #0
 800bbd4:	f000 8097 	beq.w	800bd06 <RadioSetRxConfig+0x1ae>
 800bbd8:	2e01      	cmp	r6, #1
 800bbda:	d102      	bne.n	800bbe2 <RadioSetRxConfig+0x8a>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800bbdc:	2d0c      	cmp	r5, #12
 800bbde:	f000 80a2 	beq.w	800bd26 <RadioSetRxConfig+0x1ce>
            LR1110.modulation_params.modulation.lora.ppm_offset = 0x00;
 800bbe2:	2500      	movs	r5, #0
        if( ( LR1110.modulation_params.modulation.lora.spreading_factor == LR1110_RADIO_LORA_SF5 ) ||
 800bbe4:	3b05      	subs	r3, #5
        LR1110.packet_params.packet_type = LR1110_RADIO_PACKET_LORA;
 800bbe6:	2102      	movs	r1, #2
        if( ( LR1110.modulation_params.modulation.lora.spreading_factor == LR1110_RADIO_LORA_SF5 ) ||
 800bbe8:	2b01      	cmp	r3, #1
 800bbea:	f884 50a7 	strb.w	r5, [r4, #167]	; 0xa7
        LR1110.packet_params.packet_type = LR1110_RADIO_PACKET_LORA;
 800bbee:	f884 10a8 	strb.w	r1, [r4, #168]	; 0xa8
        if( ( LR1110.modulation_params.modulation.lora.spreading_factor == LR1110_RADIO_LORA_SF5 ) ||
 800bbf2:	f240 808e 	bls.w	800bd12 <RadioSetRxConfig+0x1ba>
                LR1110.packet_params.packet.lora.preamble_length_in_symb = preambleLen;
 800bbf6:	f8a4 a0b4 	strh.w	sl, [r4, #180]	; 0xb4
        LR1110.packet_params.packet.lora.payload_length_in_byte = MaxPayloadLength;
 800bbfa:	f899 3000 	ldrb.w	r3, [r9]
 800bbfe:	f884 30b7 	strb.w	r3, [r4, #183]	; 0xb7
        LR1110.packet_params.packet.lora.iq                     = ( lr1110_radio_lora_iq_t ) iqInverted;
 800bc02:	f884 20b9 	strb.w	r2, [r4, #185]	; 0xb9
        LR1110.packet_params.packet.lora.header_type = ( lr1110_radio_lora_header_type_t ) fixLen;
 800bc06:	f884 80b6 	strb.w	r8, [r4, #182]	; 0xb6
        LR1110.packet_params.packet.lora.crc                    = ( lr1110_radio_lora_crc_t ) crcOn;
 800bc0a:	f884 b0b8 	strb.w	fp, [r4, #184]	; 0xb8
    switch( modem )
 800bc0e:	f7ff fe9f 	bl	800b950 <RadioSetModem.part.0>
        lr1110_radio_set_modulation_param_lora( &LR1110, &LR1110.modulation_params.modulation.lora );
 800bc12:	494a      	ldr	r1, [pc, #296]	; (800bd3c <RadioSetRxConfig+0x1e4>)
 800bc14:	f1a1 00a4 	sub.w	r0, r1, #164	; 0xa4
 800bc18:	f7fe fe6c 	bl	800a8f4 <lr1110_radio_set_modulation_param_lora>
        lr1110_radio_set_packet_param_lora( &LR1110, &LR1110.packet_params.packet.lora );
 800bc1c:	4948      	ldr	r1, [pc, #288]	; (800bd40 <RadioSetRxConfig+0x1e8>)
 800bc1e:	f1a1 00b4 	sub.w	r0, r1, #180	; 0xb4
 800bc22:	f7fe fe9f 	bl	800a964 <lr1110_radio_set_packet_param_lora>
        RxTimeout = 0xFFFF;
 800bc26:	4b47      	ldr	r3, [pc, #284]	; (800bd44 <RadioSetRxConfig+0x1ec>)
 800bc28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc2c:	601a      	str	r2, [r3, #0]
}
 800bc2e:	b005      	add	sp, #20
 800bc30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lr1110_radio_stop_timeout_on_preamble( &LR1110, false );
 800bc34:	4c3f      	ldr	r4, [pc, #252]	; (800bd34 <RadioSetRxConfig+0x1dc>)
 800bc36:	4601      	mov	r1, r0
 800bc38:	4620      	mov	r0, r4
 800bc3a:	f7fe fefb 	bl	800aa34 <lr1110_radio_stop_timeout_on_preamble>
        LR1110.modulation_params.packet_type = LR1110_RADIO_PACKET_GFSK;
 800bc3e:	2201      	movs	r2, #1
        LR1110.modulation_params.modulation.gfsk.pulse_shape = LR1110_RADIO_PULSESHAPE_GAUSSIANBT1;
 800bc40:	230b      	movs	r3, #11
    if( bandwidth == 0 )
 800bc42:	fa16 f002 	lsls.w	r0, r6, r2
        LR1110.modulation_params.modulation.gfsk.bitrate     = datarate;
 800bc46:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
        LR1110.modulation_params.packet_type = LR1110_RADIO_PACKET_GFSK;
 800bc4a:	f884 2094 	strb.w	r2, [r4, #148]	; 0x94
        LR1110.modulation_params.modulation.gfsk.pulse_shape = LR1110_RADIO_PULSESHAPE_GAUSSIANBT1;
 800bc4e:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
    if( bandwidth == 0 )
 800bc52:	d066      	beq.n	800bd22 <RadioSetRxConfig+0x1ca>
 800bc54:	f7ff fcba 	bl	800b5cc <RadioGetFskBandwidthRegValue.part.0>
            LR1110.packet_params.packet.gfsk.crc_type = LR1110_RADIO_GFSK_CRC_OFF;
 800bc58:	f1bb 0f00 	cmp.w	fp, #0
        LR1110.packet_params.packet.gfsk.preamble_detect           = LR1110_RADIO_GFSK_PREAMBLE_DETECTOR_LENGTH_8BITS;
 800bc5c:	f641 0104 	movw	r1, #6148	; 0x1804
        LR1110.packet_params.packet.gfsk.payload_length_in_byte = MaxPayloadLength;
 800bc60:	f899 c000 	ldrb.w	ip, [r9]
        LR1110.packet_params.packet.gfsk.preamble_detect           = LR1110_RADIO_GFSK_PREAMBLE_DETECTOR_LENGTH_8BITS;
 800bc64:	f8a4 10ac 	strh.w	r1, [r4, #172]	; 0xac
        LR1110.packet_params.packet_type                     = LR1110_RADIO_PACKET_GFSK;
 800bc68:	f04f 0301 	mov.w	r3, #1
        LR1110.packet_params.packet.gfsk.address_filtering         = LR1110_RADIO_GFSK_ADDRESS_FILTERING_DISABLE;
 800bc6c:	f04f 0200 	mov.w	r2, #0
            LR1110.packet_params.packet.gfsk.crc_type = LR1110_RADIO_GFSK_CRC_OFF;
 800bc70:	bf14      	ite	ne
 800bc72:	2606      	movne	r6, #6
 800bc74:	2601      	moveq	r6, #1
        LR1110.packet_params.packet.gfsk.preamble_length_tx_in_bit = ( preambleLen << 3 );  // convert byte into bit
 800bc76:	ea4f 0aca 	mov.w	sl, sl, lsl #3
            ( fixLen == true ) ? LR1110_RADIO_GFSK_HEADER_TYPE_IMPLICIT : LR1110_RADIO_GFSK_HEADER_TYPE_EXPLICIT;
 800bc7a:	f088 0801 	eor.w	r8, r8, #1
        LR1110.packet_params.packet.gfsk.payload_length_in_byte = MaxPayloadLength;
 800bc7e:	f884 c0b0 	strb.w	ip, [r4, #176]	; 0xb0
        LR1110.packet_params.packet.gfsk.address_filtering         = LR1110_RADIO_GFSK_ADDRESS_FILTERING_DISABLE;
 800bc82:	f884 20ae 	strb.w	r2, [r4, #174]	; 0xae
        LR1110.packet_params.packet_type                     = LR1110_RADIO_PACKET_GFSK;
 800bc86:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
        LR1110.packet_params.packet.gfsk.dc_free = LR1110_RADIO_GFSK_DCFREE_WHITENING;
 800bc8a:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
        LR1110.modulation_params.modulation.gfsk.bandwidth =
 800bc8e:	f884 009d 	strb.w	r0, [r4, #157]	; 0x9d
        LR1110.packet_params.packet.gfsk.preamble_length_tx_in_bit = ( preambleLen << 3 );  // convert byte into bit
 800bc92:	f8a4 a0aa 	strh.w	sl, [r4, #170]	; 0xaa
        LR1110.packet_params.packet.gfsk.header_type =
 800bc96:	f884 80af 	strb.w	r8, [r4, #175]	; 0xaf
 800bc9a:	f884 60b1 	strb.w	r6, [r4, #177]	; 0xb1
        RadioStandby( );
 800bc9e:	f7ff fb3f 	bl	800b320 <RadioStandby>
        RadioSetModem( ( LR1110.modulation_params.packet_type == LR1110_RADIO_PACKET_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800bca2:	f894 0094 	ldrb.w	r0, [r4, #148]	; 0x94
 800bca6:	3801      	subs	r0, #1
 800bca8:	bf18      	it	ne
 800bcaa:	2001      	movne	r0, #1
 800bcac:	f7ff fe64 	bl	800b978 <RadioSetModem>
        lr1110_radio_set_modulation_param_gfsk( &LR1110, &LR1110.modulation_params.modulation.gfsk );
 800bcb0:	4925      	ldr	r1, [pc, #148]	; (800bd48 <RadioSetRxConfig+0x1f0>)
 800bcb2:	f1a1 0098 	sub.w	r0, r1, #152	; 0x98
 800bcb6:	f7fe fdfd 	bl	800a8b4 <lr1110_radio_set_modulation_param_gfsk>
        lr1110_radio_set_packet_param_gfsk( &LR1110, &LR1110.packet_params.packet.gfsk );
 800bcba:	4924      	ldr	r1, [pc, #144]	; (800bd4c <RadioSetRxConfig+0x1f4>)
 800bcbc:	f1a1 00aa 	sub.w	r0, r1, #170	; 0xaa
 800bcc0:	f7fe fe32 	bl	800a928 <lr1110_radio_set_packet_param_gfsk>
        lr1110_radio_set_gfsk_sync_word( &LR1110, ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800bcc4:	4b22      	ldr	r3, [pc, #136]	; (800bd50 <RadioSetRxConfig+0x1f8>)
 800bcc6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bcca:	ab02      	add	r3, sp, #8
 800bccc:	e883 0003 	stmia.w	r3, {r0, r1}
 800bcd0:	4619      	mov	r1, r3
 800bcd2:	4818      	ldr	r0, [pc, #96]	; (800bd34 <RadioSetRxConfig+0x1dc>)
 800bcd4:	f7fe fd6e 	bl	800a7b4 <lr1110_radio_set_gfsk_sync_word>
        lr1110_radio_set_gfsk_crc_params( &LR1110, 0x1D0F, 0x1021 );
 800bcd8:	f241 0221 	movw	r2, #4129	; 0x1021
 800bcdc:	4815      	ldr	r0, [pc, #84]	; (800bd34 <RadioSetRxConfig+0x1dc>)
 800bcde:	f641 510f 	movw	r1, #7439	; 0x1d0f
 800bce2:	f7fe fee7 	bl	800aab4 <lr1110_radio_set_gfsk_crc_params>
        lr1110_radio_set_gfsk_whitening_params( &LR1110, 0x01FF );
 800bce6:	4813      	ldr	r0, [pc, #76]	; (800bd34 <RadioSetRxConfig+0x1dc>)
 800bce8:	f240 11ff 	movw	r1, #511	; 0x1ff
 800bcec:	f7fe ff02 	bl	800aaf4 <lr1110_radio_set_gfsk_whitening_params>
        RxTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800bcf0:	4b14      	ldr	r3, [pc, #80]	; (800bd44 <RadioSetRxConfig+0x1ec>)
 800bcf2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800bcf6:	fb02 f707 	mul.w	r7, r2, r7
 800bcfa:	fbb7 f5f5 	udiv	r5, r7, r5
 800bcfe:	601d      	str	r5, [r3, #0]
}
 800bd00:	b005      	add	sp, #20
 800bd02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800bd06:	3d0b      	subs	r5, #11
            LR1110.modulation_params.modulation.lora.ppm_offset = 0x00;
 800bd08:	2d01      	cmp	r5, #1
 800bd0a:	bf8c      	ite	hi
 800bd0c:	2500      	movhi	r5, #0
 800bd0e:	2501      	movls	r5, #1
 800bd10:	e768      	b.n	800bbe4 <RadioSetRxConfig+0x8c>
            if( preambleLen < 12 )
 800bd12:	f1ba 0f0b 	cmp.w	sl, #11
 800bd16:	f63f af6e 	bhi.w	800bbf6 <RadioSetRxConfig+0x9e>
                LR1110.packet_params.packet.lora.preamble_length_in_symb = 12;
 800bd1a:	230c      	movs	r3, #12
 800bd1c:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
 800bd20:	e76b      	b.n	800bbfa <RadioSetRxConfig+0xa2>
        return ( 0x1F );
 800bd22:	201f      	movs	r0, #31
 800bd24:	e798      	b.n	800bc58 <RadioSetRxConfig+0x100>
 800bd26:	f884 60a7 	strb.w	r6, [r4, #167]	; 0xa7
        LR1110.packet_params.packet_type = LR1110_RADIO_PACKET_LORA;
 800bd2a:	f884 10a8 	strb.w	r1, [r4, #168]	; 0xa8
        if( ( LR1110.modulation_params.modulation.lora.spreading_factor == LR1110_RADIO_LORA_SF5 ) ||
 800bd2e:	e762      	b.n	800bbf6 <RadioSetRxConfig+0x9e>
 800bd30:	200005a6 	.word	0x200005a6
 800bd34:	20000a7c 	.word	0x20000a7c
 800bd38:	08015764 	.word	0x08015764
 800bd3c:	20000b20 	.word	0x20000b20
 800bd40:	20000b30 	.word	0x20000b30
 800bd44:	200005a8 	.word	0x200005a8
 800bd48:	20000b14 	.word	0x20000b14
 800bd4c:	20000b26 	.word	0x20000b26
 800bd50:	08014470 	.word	0x08014470
 800bd54:	200000f0 	.word	0x200000f0

0800bd58 <RadioIsChannelFree>:
{
 800bd58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd5c:	4604      	mov	r4, r0
        lr1110_radio_set_packet_type( &LR1110, LR1110_RADIO_PACKET_GFSK );
 800bd5e:	4824      	ldr	r0, [pc, #144]	; (800bdf0 <RadioIsChannelFree+0x98>)
{
 800bd60:	b08f      	sub	sp, #60	; 0x3c
 800bd62:	460d      	mov	r5, r1
        lr1110_radio_set_packet_type( &LR1110, LR1110_RADIO_PACKET_GFSK );
 800bd64:	2101      	movs	r1, #1
{
 800bd66:	4690      	mov	r8, r2
    lr1110_radio_get_rssi_inst( &LR1110, &rssi );
 800bd68:	4681      	mov	r9, r0
{
 800bd6a:	461f      	mov	r7, r3
        lr1110_radio_set_packet_type( &LR1110, LR1110_RADIO_PACKET_GFSK );
 800bd6c:	f7fe fd90 	bl	800a890 <lr1110_radio_set_packet_type>
        RadioPublicNetwork.Current = false;
 800bd70:	4b20      	ldr	r3, [pc, #128]	; (800bdf4 <RadioIsChannelFree+0x9c>)
    lr1110_radio_set_rf_frequency( &LR1110, freq );
 800bd72:	4621      	mov	r1, r4
 800bd74:	4648      	mov	r0, r9
        RadioPublicNetwork.Current = false;
 800bd76:	2400      	movs	r4, #0
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800bd78:	2601      	movs	r6, #1
        RadioPublicNetwork.Current = false;
 800bd7a:	705c      	strb	r4, [r3, #1]
    lr1110_radio_set_rf_frequency( &LR1110, freq );
 800bd7c:	f7fe fd70 	bl	800a860 <lr1110_radio_set_rf_frequency>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800bd80:	2203      	movs	r2, #3
 800bd82:	4629      	mov	r1, r5
 800bd84:	4623      	mov	r3, r4
 800bd86:	4620      	mov	r0, r4
 800bd88:	9609      	str	r6, [sp, #36]	; 0x24
 800bd8a:	9201      	str	r2, [sp, #4]
 800bd8c:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800bd90:	f44f 7216 	mov.w	r2, #600	; 0x258
 800bd94:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800bd98:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800bd9c:	9500      	str	r5, [sp, #0]
 800bd9e:	9402      	str	r4, [sp, #8]
 800bda0:	f7ff feda 	bl	800bb58 <RadioSetRxConfig>
    RadioRx( 0 );
 800bda4:	4620      	mov	r0, r4
 800bda6:	f7ff fc59 	bl	800b65c <RadioRx>
    DelayMs( 1 );
 800bdaa:	4630      	mov	r0, r6
 800bdac:	f000 fb76 	bl	800c49c <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
 800bdb0:	f000 fca4 	bl	800c6fc <TimerGetCurrentTime>
 800bdb4:	4606      	mov	r6, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800bdb6:	e007      	b.n	800bdc8 <RadioIsChannelFree+0x70>
    int8_t rssi = 0;
 800bdb8:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
    lr1110_radio_get_rssi_inst( &LR1110, &rssi );
 800bdbc:	f7fe fce0 	bl	800a780 <lr1110_radio_get_rssi_inst>
    return rssi;
 800bdc0:	f99d 1037 	ldrsb.w	r1, [sp, #55]	; 0x37
        if( rssi > rssiThresh )
 800bdc4:	4588      	cmp	r8, r1
 800bdc6:	db10      	blt.n	800bdea <RadioIsChannelFree+0x92>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800bdc8:	4630      	mov	r0, r6
 800bdca:	f000 fc9f 	bl	800c70c <TimerGetElapsedTime>
 800bdce:	4605      	mov	r5, r0
 800bdd0:	42bd      	cmp	r5, r7
    lr1110_radio_get_rssi_inst( &LR1110, &rssi );
 800bdd2:	f10d 0137 	add.w	r1, sp, #55	; 0x37
 800bdd6:	4648      	mov	r0, r9
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800bdd8:	d3ee      	bcc.n	800bdb8 <RadioIsChannelFree+0x60>
    bool     status           = true;
 800bdda:	2001      	movs	r0, #1
 800bddc:	900b      	str	r0, [sp, #44]	; 0x2c
    RadioSleep( );
 800bdde:	f7ff fb5b 	bl	800b498 <RadioSleep>
}
 800bde2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bde4:	b00f      	add	sp, #60	; 0x3c
 800bde6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            status = false;
 800bdea:	2000      	movs	r0, #0
 800bdec:	e7f6      	b.n	800bddc <RadioIsChannelFree+0x84>
 800bdee:	bf00      	nop
 800bdf0:	20000a7c 	.word	0x20000a7c
 800bdf4:	200005a4 	.word	0x200005a4

0800bdf8 <myRadioOnDioIrq>:
	IrqFired = true;
 800bdf8:	4b01      	ldr	r3, [pc, #4]	; (800be00 <myRadioOnDioIrq+0x8>)
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	701a      	strb	r2, [r3, #0]
}
 800bdfe:	4770      	bx	lr
 800be00:	2000059d 	.word	0x2000059d

0800be04 <on_wifi_scan_timeout_event>:
/*
 * -----------------------------------------------------------------------------
 * --- PRIVATE FUNCTIONS DEFINITION --------------------------------------------
 */

static void on_wifi_scan_timeout_event( void* context ) { wifi_scan_timeout = true; }
 800be04:	4b01      	ldr	r3, [pc, #4]	; (800be0c <on_wifi_scan_timeout_event+0x8>)
 800be06:	2201      	movs	r2, #1
 800be08:	701a      	strb	r2, [r3, #0]
 800be0a:	4770      	bx	lr
 800be0c:	200005b0 	.word	0x200005b0

0800be10 <lr1110_modem_wifi_scan_done>:
    wifi_state = WIFI_GET_RESULTS;
 800be10:	4b01      	ldr	r3, [pc, #4]	; (800be18 <lr1110_modem_wifi_scan_done+0x8>)
 800be12:	2203      	movs	r2, #3
 800be14:	701a      	strb	r2, [r3, #0]
}
 800be16:	4770      	bx	lr
 800be18:	200005cc 	.word	0x200005cc

0800be1c <wifi_execute_scan>:
{
 800be1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    wifi_scan_timeout           = false;
 800be20:	2300      	movs	r3, #0
    capture_result->nbr_results = 0;
 800be22:	7093      	strb	r3, [r2, #2]
    wifi_state                   = WIFI_INIT;
 800be24:	4dbe      	ldr	r5, [pc, #760]	; (800c120 <wifi_execute_scan+0x304>)
{
 800be26:	4616      	mov	r6, r2
    wifi_scan_timeout           = false;
 800be28:	4abe      	ldr	r2, [pc, #760]	; (800c124 <wifi_execute_scan+0x308>)
    wifi_state                   = WIFI_INIT;
 800be2a:	702b      	strb	r3, [r5, #0]
{
 800be2c:	460c      	mov	r4, r1
 800be2e:	f2ad 4d4c 	subw	sp, sp, #1100	; 0x44c
    TimerInit( &wifi_scan_timeout_timer, on_wifi_scan_timeout_event );
 800be32:	49bd      	ldr	r1, [pc, #756]	; (800c128 <wifi_execute_scan+0x30c>)
    wifi_scan_timeout           = false;
 800be34:	7013      	strb	r3, [r2, #0]
{
 800be36:	4680      	mov	r8, r0
    TimerInit( &wifi_scan_timeout_timer, on_wifi_scan_timeout_event );
 800be38:	48bc      	ldr	r0, [pc, #752]	; (800c12c <wifi_execute_scan+0x310>)
 800be3a:	f000 fb6b 	bl	800c514 <TimerInit>
    TimerSetValue( &wifi_scan_timeout_timer, WIFI_SCAN_TIMEOUT );
 800be3e:	48bb      	ldr	r0, [pc, #748]	; (800c12c <wifi_execute_scan+0x310>)
 800be40:	f242 7110 	movw	r1, #10000	; 0x2710
 800be44:	f000 fc48 	bl	800c6d8 <TimerSetValue>
    if( ( wifi_settings->result_format == LR1110_WIFI_RESULT_FORMAT_BASIC_COMPLETE ) &&
 800be48:	7b23      	ldrb	r3, [r4, #12]
        ( wifi_settings->max_results > 12 ) )
 800be4a:	f894 a007 	ldrb.w	sl, [r4, #7]
    if( ( wifi_settings->result_format == LR1110_WIFI_RESULT_FORMAT_BASIC_COMPLETE ) &&
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d171      	bne.n	800bf36 <wifi_execute_scan+0x11a>
 800be52:	f1ba 0f0c 	cmp.w	sl, #12
 800be56:	f200 80fc 	bhi.w	800c052 <wifi_execute_scan+0x236>
    TimerStart( &wifi_scan_timeout_timer );
 800be5a:	48b4      	ldr	r0, [pc, #720]	; (800c12c <wifi_execute_scan+0x310>)
        if( Radio.IrqProcess != NULL )
 800be5c:	f8df 92e4 	ldr.w	r9, [pc, #740]	; 800c144 <wifi_execute_scan+0x328>
        	printf("WIFI_SCAN\r\n");
 800be60:	f8df b2e4 	ldr.w	fp, [pc, #740]	; 800c148 <wifi_execute_scan+0x32c>
    TimerStart( &wifi_scan_timeout_timer );
 800be64:	f000 fb5e 	bl	800c524 <TimerStart>
    while( ( wifi_scan_done != true ) && ( wifi_scan_timeout != true ) )
 800be68:	4657      	mov	r7, sl
 800be6a:	46a2      	mov	sl, r4
 800be6c:	4bad      	ldr	r3, [pc, #692]	; (800c124 <wifi_execute_scan+0x308>)
 800be6e:	781b      	ldrb	r3, [r3, #0]
 800be70:	b9c3      	cbnz	r3, 800bea4 <wifi_execute_scan+0x88>
        if( Radio.IrqProcess != NULL )
 800be72:	f8d9 3060 	ldr.w	r3, [r9, #96]	; 0x60
 800be76:	b103      	cbz	r3, 800be7a <wifi_execute_scan+0x5e>
            Radio.IrqProcess( );
 800be78:	4798      	blx	r3
        LoRaMacProcess( );
 800be7a:	f7f9 fc39 	bl	80056f0 <LoRaMacProcess>
        switch( wifi_state )
 800be7e:	782c      	ldrb	r4, [r5, #0]
 800be80:	2c01      	cmp	r4, #1
 800be82:	d041      	beq.n	800bf08 <wifi_execute_scan+0xec>
 800be84:	2c03      	cmp	r4, #3
 800be86:	d018      	beq.n	800beba <wifi_execute_scan+0x9e>
 800be88:	2c00      	cmp	r4, #0
 800be8a:	d1ef      	bne.n	800be6c <wifi_execute_scan+0x50>
            wifi_state          = WIFI_SCAN;
 800be8c:	2301      	movs	r3, #1
            lr1110_wifi_reset_cumulative_timing(context);
 800be8e:	4640      	mov	r0, r8
            wifi_state          = WIFI_SCAN;
 800be90:	702b      	strb	r3, [r5, #0]
            lr1110_wifi_reset_cumulative_timing(context);
 800be92:	f7ff f93d 	bl	800b110 <lr1110_wifi_reset_cumulative_timing>
            printf("WIFI_INIT\r\n");
 800be96:	48a6      	ldr	r0, [pc, #664]	; (800c130 <wifi_execute_scan+0x314>)
 800be98:	f007 f902 	bl	80130a0 <puts>
    while( ( wifi_scan_done != true ) && ( wifi_scan_timeout != true ) )
 800be9c:	4ba1      	ldr	r3, [pc, #644]	; (800c124 <wifi_execute_scan+0x308>)
 800be9e:	781b      	ldrb	r3, [r3, #0]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d0e6      	beq.n	800be72 <wifi_execute_scan+0x56>
    TimerStop( &wifi_scan_timeout_timer );
 800bea4:	48a1      	ldr	r0, [pc, #644]	; (800c12c <wifi_execute_scan+0x310>)
 800bea6:	f000 fbdd 	bl	800c664 <TimerStop>
    if( wifi_scan_timeout == true )
 800beaa:	4b9e      	ldr	r3, [pc, #632]	; (800c124 <wifi_execute_scan+0x308>)
 800beac:	7818      	ldrb	r0, [r3, #0]
}
 800beae:	f080 0001 	eor.w	r0, r0, #1
 800beb2:	f20d 4d4c 	addw	sp, sp, #1100	; 0x44c
 800beb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            lr1110_wifi_cumulative_timings_t wifi_results_timings = { 0 };
 800beba:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800bebe:	4654      	mov	r4, sl
            printf("WIFI_GET_RESULTS\r\n");
 800bec0:	489c      	ldr	r0, [pc, #624]	; (800c134 <wifi_execute_scan+0x318>)
            lr1110_wifi_cumulative_timings_t wifi_results_timings = { 0 };
 800bec2:	f04f 0a00 	mov.w	sl, #0
 800bec6:	e9c9 aa00 	strd	sl, sl, [r9]
 800beca:	e9c9 aa02 	strd	sl, sl, [r9, #8]
            uint8_t                                nb_results = 0;
 800bece:	f88d a027 	strb.w	sl, [sp, #39]	; 0x27
            printf("WIFI_GET_RESULTS\r\n");
 800bed2:	f007 f8e5 	bl	80130a0 <puts>
            lr1110_wifi_read_cumulative_timing(context, &wifi_results_timings);
 800bed6:	4640      	mov	r0, r8
 800bed8:	4649      	mov	r1, r9
 800beda:	f7ff f927 	bl	800b12c <lr1110_wifi_read_cumulative_timing>
            lr1110_wifi_get_nb_results(&LR1110, &nb_results);
 800bede:	4896      	ldr	r0, [pc, #600]	; (800c138 <wifi_execute_scan+0x31c>)
 800bee0:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 800bee4:	f7fe fffa 	bl	800aedc <lr1110_wifi_get_nb_results>
			if( wifi_settings->result_format == LR1110_WIFI_RESULT_FORMAT_BASIC_MAC_TYPE_CHANNEL )
 800bee8:	f894 800c 	ldrb.w	r8, [r4, #12]
 800beec:	f1b8 0f01 	cmp.w	r8, #1
 800bef0:	f000 80b5 	beq.w	800c05e <wifi_execute_scan+0x242>
			else if( wifi_settings->result_format == LR1110_WIFI_RESULT_FORMAT_BASIC_COMPLETE )
 800bef4:	f1b8 0f00 	cmp.w	r8, #0
 800bef8:	d026      	beq.n	800bf48 <wifi_execute_scan+0x12c>
            capture_result->result_format = wifi_settings->result_format;
 800befa:	f886 8001 	strb.w	r8, [r6, #1]
            capture_result->scan_mode     = wifi_settings->scan_mode;
 800befe:	7963      	ldrb	r3, [r4, #5]
 800bf00:	7033      	strb	r3, [r6, #0]
            wifi_state     = WIFI_INIT;
 800bf02:	2300      	movs	r3, #0
 800bf04:	702b      	strb	r3, [r5, #0]
    while( ( wifi_scan_done != true ) && ( wifi_scan_timeout != true ) )
 800bf06:	e7cd      	b.n	800bea4 <wifi_execute_scan+0x88>
        	printf("WIFI_SCAN\r\n");
 800bf08:	4658      	mov	r0, fp
 800bf0a:	f007 f8c9 	bl	80130a0 <puts>
            lr1110_wifi_scan(
 800bf0e:	f8ba 2008 	ldrh.w	r2, [sl, #8]
 800bf12:	f89a 3006 	ldrb.w	r3, [sl, #6]
 800bf16:	9403      	str	r4, [sp, #12]
 800bf18:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800bf1c:	9700      	str	r7, [sp, #0]
 800bf1e:	f89a 3005 	ldrb.w	r3, [sl, #5]
 800bf22:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 800bf26:	f89a 1004 	ldrb.w	r1, [sl, #4]
 800bf2a:	4640      	mov	r0, r8
 800bf2c:	f7fe ffac 	bl	800ae88 <lr1110_wifi_scan>
            wifi_state = WIFI_WAIT_FOR_SCAN;
 800bf30:	2302      	movs	r3, #2
 800bf32:	702b      	strb	r3, [r5, #0]
            break;
 800bf34:	e79a      	b.n	800be6c <wifi_execute_scan+0x50>
    else if( wifi_settings->max_results > 32 )
 800bf36:	f1ba 0f20 	cmp.w	sl, #32
 800bf3a:	d98e      	bls.n	800be5a <wifi_execute_scan+0x3e>
        printf( "max_results too high, limit to 32 \r\n" );
 800bf3c:	487f      	ldr	r0, [pc, #508]	; (800c13c <wifi_execute_scan+0x320>)
 800bf3e:	f007 f8af 	bl	80130a0 <puts>
        wifi_max_results = 32;
 800bf42:	f04f 0a20 	mov.w	sl, #32
 800bf46:	e788      	b.n	800be5a <wifi_execute_scan+0x3e>
					lr1110_wifi_basic_complete_result_t wifi_results_mac_addr[WIFI_MAX_BASIC_RESULTS_PER_SCAN] = {
 800bf48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bf4c:	4641      	mov	r1, r8
 800bf4e:	a812      	add	r0, sp, #72	; 0x48
 800bf50:	f007 f818 	bl	8012f84 <memset>
					lr1110_wifi_get_nb_results(&LR1110, &nb_results);
 800bf54:	4878      	ldr	r0, [pc, #480]	; (800c138 <wifi_execute_scan+0x31c>)
					nb_results = 0;
 800bf56:	f88d 8027 	strb.w	r8, [sp, #39]	; 0x27
					lr1110_wifi_get_nb_results(&LR1110, &nb_results);
 800bf5a:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 800bf5e:	f7fe ffbd 	bl	800aedc <lr1110_wifi_get_nb_results>
					lr1110_wifi_read_basic_complete_results(&LR1110, 0, nb_results, wifi_results_mac_addr);
 800bf62:	4641      	mov	r1, r8
 800bf64:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 800bf68:	4873      	ldr	r0, [pc, #460]	; (800c138 <wifi_execute_scan+0x31c>)
 800bf6a:	ab12      	add	r3, sp, #72	; 0x48
 800bf6c:	f7fe ffc6 	bl	800aefc <lr1110_wifi_read_basic_complete_results>
					wifi_add_complete_mac_to_results(LR1110_SYSTEM_REGMODE_DCDC_CONVERTER, capture_result,
 800bf70:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
 800bf74:	f89d 7027 	ldrb.w	r7, [sp, #39]	; 0x27
 800bf78:	9706      	str	r7, [sp, #24]
 800bf7a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800bf7e:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
 800bf82:	9104      	str	r1, [sp, #16]
 800bf84:	9207      	str	r2, [sp, #28]
 800bf86:	9305      	str	r3, [sp, #20]

static void wifi_add_complete_mac_to_results(lr1110_regmodes_t reg_mode, wifi_scan_all_results_t *results,
                                             const lr1110_wifi_basic_complete_result_t *scan_result,
                                             uint8_t nbr_results, lr1110_wifi_cumulative_timings_t timing)
{
    for( uint8_t index = 0; index < nbr_results; index++ )
 800bf88:	b3d7      	cbz	r7, 800c000 <wifi_execute_scan+0x1e4>
 800bf8a:	9b06      	ldr	r3, [sp, #24]
 800bf8c:	f103 39ff 	add.w	r9, r3, #4294967295
 800bf90:	fa5f f989 	uxtb.w	r9, r9
 800bf94:	eb06 1949 	add.w	r9, r6, r9, lsl #5
 800bf98:	f509 79a6 	add.w	r9, r9, #332	; 0x14c
 800bf9c:	f506 7b96 	add.w	fp, r6, #300	; 0x12c
 800bfa0:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
    {
        results->basic_complete_results[index].channel_info_byte =
            lr1110_extract_channel_from_info_byte( scan_result[index].channel_info_byte );
 800bfa4:	f81a 0c03 	ldrb.w	r0, [sl, #-3]
 800bfa8:	f7ff f912 	bl	800b1d0 <lr1110_extract_channel_from_info_byte>
        results->basic_complete_results[index].channel_info_byte =
 800bfac:	f80b 0c03 	strb.w	r0, [fp, #-3]
        results->basic_complete_results[index].data_rate_info_byte =
            lr1110_extract_signal_type_from_data_rate_info( scan_result[index].data_rate_info_byte );
 800bfb0:	f81a 0c04 	ldrb.w	r0, [sl, #-4]
 800bfb4:	f7ff f910 	bl	800b1d8 <lr1110_extract_signal_type_from_data_rate_info>
        results->basic_complete_results[index].frame_type_info_byte = scan_result[index].frame_type_info_byte;
 800bfb8:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
 800bfbc:	f80b 1c01 	strb.w	r1, [fp, #-1]
        memcpy( results->basic_complete_results[index].mac_address, scan_result[index].mac_address,
 800bfc0:	f8da 1000 	ldr.w	r1, [sl]
 800bfc4:	f8cb 1000 	str.w	r1, [fp]
 800bfc8:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 800bfcc:	f8ab 1004 	strh.w	r1, [fp, #4]
                LR1110_WIFI_MAC_ADDRESS_LENGTH );
        results->basic_complete_results[index].rssi             = scan_result[index].rssi;
        results->basic_complete_results[index].phi_offset       = scan_result[index].phi_offset;
        results->basic_complete_results[index].timestamp_us     = scan_result[index].timestamp_us;
 800bfd0:	e9da 2303 	ldrd	r2, r3, [sl, #12]
        results->basic_complete_results[index].rssi             = scan_result[index].rssi;
 800bfd4:	f81a 1c02 	ldrb.w	r1, [sl, #-2]
 800bfd8:	f80b 1c02 	strb.w	r1, [fp, #-2]
        results->basic_complete_results[index].phi_offset       = scan_result[index].phi_offset;
 800bfdc:	f8ba 1006 	ldrh.w	r1, [sl, #6]
 800bfe0:	f8ab 1006 	strh.w	r1, [fp, #6]
        results->basic_complete_results[index].beacon_period_tu = scan_result[index].beacon_period_tu;
 800bfe4:	f8ba 1014 	ldrh.w	r1, [sl, #20]
        results->basic_complete_results[index].data_rate_info_byte =
 800bfe8:	f80b 0c04 	strb.w	r0, [fp, #-4]
        results->basic_complete_results[index].timestamp_us     = scan_result[index].timestamp_us;
 800bfec:	e9cb 2303 	strd	r2, r3, [fp, #12]
        results->basic_complete_results[index].beacon_period_tu = scan_result[index].beacon_period_tu;
 800bff0:	f8ab 1014 	strh.w	r1, [fp, #20]
 800bff4:	f10b 0b20 	add.w	fp, fp, #32
    for( uint8_t index = 0; index < nbr_results; index++ )
 800bff8:	45cb      	cmp	fp, r9
 800bffa:	f10a 0a20 	add.w	sl, sl, #32
 800bffe:	d1d1      	bne.n	800bfa4 <wifi_execute_scan+0x188>
    }

    results->timings                = timing;
 800c000:	9f04      	ldr	r7, [sp, #16]
 800c002:	f8c8 7004 	str.w	r7, [r8, #4]
 800c006:	9a05      	ldr	r2, [sp, #20]
 800c008:	9f07      	ldr	r7, [sp, #28]
 800c00a:	f8c8 7008 	str.w	r7, [r8, #8]
 800c00e:	f8c8 200c 	str.w	r2, [r8, #12]
 800c012:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
        consumption_uas = ( ( timing.rx_correlation_us + timing.rx_capture_us ) * WIFI_CONSUMPTION_DCDC_CORRELATION_MA +
 800c016:	46bc      	mov	ip, r7
 800c018:	448c      	add	ip, r1
 800c01a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800c01e:	eb0c 0a03 	add.w	sl, ip, r3
 800c022:	f8df 8128 	ldr.w	r8, [pc, #296]	; 800c14c <wifi_execute_scan+0x330>
    results->timings                = timing;
 800c026:	f506 6ea5 	add.w	lr, r6, #1320	; 0x528
        consumption_uas = ( ( timing.rx_correlation_us + timing.rx_capture_us ) * WIFI_CONSUMPTION_DCDC_CORRELATION_MA +
 800c02a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
    results->timings                = timing;
 800c02e:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
        consumption_uas = ( ( timing.rx_correlation_us + timing.rx_capture_us ) * WIFI_CONSUMPTION_DCDC_CORRELATION_MA +
 800c032:	fba8 230a 	umull	r2, r3, r8, sl
 800c036:	099b      	lsrs	r3, r3, #6
    results->global_consumption_uas = wifi_compute_consumption( reg_mode, timing );
 800c038:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    results->nbr_results            = nbr_results;
 800c03c:	9b06      	ldr	r3, [sp, #24]
 800c03e:	70b3      	strb	r3, [r6, #2]
 800c040:	f894 800c 	ldrb.w	r8, [r4, #12]
            capture_result->result_format = wifi_settings->result_format;
 800c044:	f886 8001 	strb.w	r8, [r6, #1]
            capture_result->scan_mode     = wifi_settings->scan_mode;
 800c048:	7963      	ldrb	r3, [r4, #5]
 800c04a:	7033      	strb	r3, [r6, #0]
            wifi_state     = WIFI_INIT;
 800c04c:	2300      	movs	r3, #0
 800c04e:	702b      	strb	r3, [r5, #0]
    while( ( wifi_scan_done != true ) && ( wifi_scan_timeout != true ) )
 800c050:	e728      	b.n	800bea4 <wifi_execute_scan+0x88>
        printf( "max_results too high, limit to 12 \r\n" );
 800c052:	483b      	ldr	r0, [pc, #236]	; (800c140 <wifi_execute_scan+0x324>)
 800c054:	f007 f824 	bl	80130a0 <puts>
        wifi_max_results = 12;
 800c058:	f04f 0a0c 	mov.w	sl, #12
 800c05c:	e6fd      	b.n	800be5a <wifi_execute_scan+0x3e>
					wifi_results_mac_addr[WIFI_MAX_BASIC_RESULTS_PER_SCAN] = { 0 };
 800c05e:	f44f 7290 	mov.w	r2, #288	; 0x120
 800c062:	4651      	mov	r1, sl
 800c064:	a812      	add	r0, sp, #72	; 0x48
 800c066:	f006 ff8d 	bl	8012f84 <memset>
				lr1110_wifi_read_basic_mac_type_channel_results(&LR1110, 0, nb_results, wifi_results_mac_addr);
 800c06a:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 800c06e:	4832      	ldr	r0, [pc, #200]	; (800c138 <wifi_execute_scan+0x31c>)
 800c070:	ab12      	add	r3, sp, #72	; 0x48
 800c072:	4651      	mov	r1, sl
 800c074:	f7fe fff6 	bl	800b064 <lr1110_wifi_read_basic_mac_type_channel_results>
				wifi_add_basic_mac_to_results(LR1110_SYSTEM_REGMODE_DCDC_CONVERTER, capture_result,
 800c078:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
 800c07c:	f89d 7027 	ldrb.w	r7, [sp, #39]	; 0x27
 800c080:	9706      	str	r7, [sp, #24]
 800c082:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800c086:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
 800c08a:	e9cd 3204 	strd	r3, r2, [sp, #16]
 800c08e:	9107      	str	r1, [sp, #28]
    for( uint8_t index = 0; index < nbr_results; index++ )
 800c090:	b35f      	cbz	r7, 800c0ea <wifi_execute_scan+0x2ce>
 800c092:	9b06      	ldr	r3, [sp, #24]
 800c094:	f103 3aff 	add.w	sl, r3, #4294967295
 800c098:	fa5f fa8a 	uxtb.w	sl, sl
 800c09c:	2309      	movs	r3, #9
 800c09e:	fb03 6a0a 	mla	sl, r3, sl, r6
 800c0a2:	f10a 0a0f 	add.w	sl, sl, #15
 800c0a6:	f106 0b06 	add.w	fp, r6, #6
 800c0aa:	f10d 094b 	add.w	r9, sp, #75	; 0x4b
            lr1110_extract_channel_from_info_byte( scan_result[index].channel_info_byte );
 800c0ae:	f819 0c02 	ldrb.w	r0, [r9, #-2]
 800c0b2:	f7ff f88d 	bl	800b1d0 <lr1110_extract_channel_from_info_byte>
        results->basic_mac_type_channel_results[index].channel_info_byte =
 800c0b6:	f80b 0c02 	strb.w	r0, [fp, #-2]
            lr1110_extract_signal_type_from_data_rate_info( scan_result[index].data_rate_info_byte );
 800c0ba:	f819 0c03 	ldrb.w	r0, [r9, #-3]
 800c0be:	f7ff f88b 	bl	800b1d8 <lr1110_extract_signal_type_from_data_rate_info>
        memcpy( results->basic_mac_type_channel_results[index].mac_address, scan_result[index].mac_address,
 800c0c2:	f8d9 3000 	ldr.w	r3, [r9]
 800c0c6:	f8cb 3000 	str.w	r3, [fp]
 800c0ca:	f8b9 2004 	ldrh.w	r2, [r9, #4]
        results->basic_mac_type_channel_results[index].rssi = scan_result[index].rssi;
 800c0ce:	f819 3c01 	ldrb.w	r3, [r9, #-1]
        results->basic_mac_type_channel_results[index].data_rate_info_byte =
 800c0d2:	f80b 0c03 	strb.w	r0, [fp, #-3]
        memcpy( results->basic_mac_type_channel_results[index].mac_address, scan_result[index].mac_address,
 800c0d6:	f8ab 2004 	strh.w	r2, [fp, #4]
        results->basic_mac_type_channel_results[index].rssi = scan_result[index].rssi;
 800c0da:	f80b 3c01 	strb.w	r3, [fp, #-1]
    for( uint8_t index = 0; index < nbr_results; index++ )
 800c0de:	f10b 0b09 	add.w	fp, fp, #9
 800c0e2:	45d3      	cmp	fp, sl
 800c0e4:	f109 0909 	add.w	r9, r9, #9
 800c0e8:	d1e1      	bne.n	800c0ae <wifi_execute_scan+0x292>
    results->timings                = timing;
 800c0ea:	9f07      	ldr	r7, [sp, #28]
 800c0ec:	9b05      	ldr	r3, [sp, #20]
 800c0ee:	9a04      	ldr	r2, [sp, #16]
 800c0f0:	f8c8 7004 	str.w	r7, [r8, #4]
 800c0f4:	f8c8 3008 	str.w	r3, [r8, #8]
 800c0f8:	f8c8 200c 	str.w	r2, [r8, #12]
 800c0fc:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
        consumption_uas = ( ( timing.rx_correlation_us + timing.rx_capture_us ) * WIFI_CONSUMPTION_DCDC_CORRELATION_MA +
 800c100:	eb07 0902 	add.w	r9, r7, r2
 800c104:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 800c108:	f8df e040 	ldr.w	lr, [pc, #64]	; 800c14c <wifi_execute_scan+0x330>
    results->timings                = timing;
 800c10c:	f506 6ca5 	add.w	ip, r6, #1320	; 0x528
        consumption_uas = ( ( timing.rx_correlation_us + timing.rx_capture_us ) * WIFI_CONSUMPTION_DCDC_CORRELATION_MA +
 800c110:	4499      	add	r9, r3
    results->timings                = timing;
 800c112:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
        consumption_uas = ( ( timing.rx_correlation_us + timing.rx_capture_us ) * WIFI_CONSUMPTION_DCDC_CORRELATION_MA +
 800c116:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800c11a:	fbae 2303 	umull	r2, r3, lr, r3
 800c11e:	e78a      	b.n	800c036 <wifi_execute_scan+0x21a>
 800c120:	200005cc 	.word	0x200005cc
 800c124:	200005b0 	.word	0x200005b0
 800c128:	0800be05 	.word	0x0800be05
 800c12c:	200005b4 	.word	0x200005b4
 800c130:	080158fc 	.word	0x080158fc
 800c134:	08015914 	.word	0x08015914
 800c138:	20000a7c 	.word	0x20000a7c
 800c13c:	080158d8 	.word	0x080158d8
 800c140:	080158b4 	.word	0x080158b4
 800c144:	08015848 	.word	0x08015848
 800c148:	08015908 	.word	0x08015908
 800c14c:	10624dd3 	.word	0x10624dd3

0800c150 <lr1110_modem_display_wifi_scan_results>:
{
 800c150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c154:	4604      	mov	r4, r0
 800c156:	b083      	sub	sp, #12
	memset((uint8_t *) sPtrData, 0x00, sizeof(sWifiMacIdFrameFormat_t));
 800c158:	4608      	mov	r0, r1
{
 800c15a:	460e      	mov	r6, r1
	memset((uint8_t *) sPtrData, 0x00, sizeof(sWifiMacIdFrameFormat_t));
 800c15c:	2224      	movs	r2, #36	; 0x24
 800c15e:	2100      	movs	r1, #0
 800c160:	f006 ff10 	bl	8012f84 <memset>
    if( capture_result->nbr_results != 0 )
 800c164:	78a5      	ldrb	r5, [r4, #2]
 800c166:	2d00      	cmp	r5, #0
 800c168:	d05e      	beq.n	800c228 <lr1110_modem_display_wifi_scan_results+0xd8>
        printf( "Nb access points scanned : %d \r\n", capture_result->nbr_results );
 800c16a:	4629      	mov	r1, r5
 800c16c:	489c      	ldr	r0, [pc, #624]	; (800c3e0 <lr1110_modem_display_wifi_scan_results+0x290>)
 800c16e:	f006 ff11 	bl	8012f94 <iprintf>
        sPtrData->u8NoOfWifiMacId = capture_result->nbr_results;
 800c172:	78a3      	ldrb	r3, [r4, #2]
 800c174:	7033      	strb	r3, [r6, #0]
		if (capture_result->scan_mode == LR1110_WIFI_SCAN_MODE_BEACON_AND_PACKET)
 800c176:	7823      	ldrb	r3, [r4, #0]
 800c178:	2b02      	cmp	r3, #2
			printf( "Wi-Fi Acquisition mode : BEACON_AND_PKT\r\n" );
 800c17a:	bf0c      	ite	eq
 800c17c:	4899      	ldreq	r0, [pc, #612]	; (800c3e4 <lr1110_modem_display_wifi_scan_results+0x294>)
			printf("Wi-Fi Acquisition mode : BEACON\r\n");
 800c17e:	489a      	ldrne	r0, [pc, #616]	; (800c3e8 <lr1110_modem_display_wifi_scan_results+0x298>)
 800c180:	f006 ff8e 	bl	80130a0 <puts>
		if( capture_result->result_format == LR1110_WIFI_RESULT_FORMAT_BASIC_COMPLETE )
 800c184:	7865      	ldrb	r5, [r4, #1]
 800c186:	2d00      	cmp	r5, #0
 800c188:	d159      	bne.n	800c23e <lr1110_modem_display_wifi_scan_results+0xee>
			printf("Wi-Fi result format : BASIC_COMPLETE\r\n");
 800c18a:	4898      	ldr	r0, [pc, #608]	; (800c3ec <lr1110_modem_display_wifi_scan_results+0x29c>)
 800c18c:	f006 ff88 	bl	80130a0 <puts>
			for( uint8_t i = 0; i < capture_result->nbr_results; i++ )
 800c190:	78a3      	ldrb	r3, [r4, #2]
 800c192:	2b00      	cmp	r3, #0
 800c194:	f000 809b 	beq.w	800c2ce <lr1110_modem_display_wifi_scan_results+0x17e>
 800c198:	f504 7399 	add.w	r3, r4, #306	; 0x132
					printf("%#04X ", capture_result->basic_complete_results[i].mac_address[j]);
 800c19c:	f8df 828c 	ldr.w	r8, [pc, #652]	; 800c42c <lr1110_modem_display_wifi_scan_results+0x2dc>
 800c1a0:	9301      	str	r3, [sp, #4]
			for( uint8_t i = 0; i < capture_result->nbr_results; i++ )
 800c1a2:	46aa      	mov	sl, r5
 800c1a4:	46a9      	mov	r9, r5
				printf("MAC addr : ");
 800c1a6:	ea4f 1549 	mov.w	r5, r9, lsl #5
 800c1aa:	4891      	ldr	r0, [pc, #580]	; (800c3f0 <lr1110_modem_display_wifi_scan_results+0x2a0>)
 800c1ac:	f006 fef2 	bl	8012f94 <iprintf>
				for( uint8_t j = 0; j < LR1110_WIFI_MAC_ADDRESS_LENGTH; j++ )
 800c1b0:	f505 7396 	add.w	r3, r5, #300	; 0x12c
 800c1b4:	eb04 0b03 	add.w	fp, r4, r3
 800c1b8:	9b01      	ldr	r3, [sp, #4]
 800c1ba:	195f      	adds	r7, r3, r5
					printf("%#04X ", capture_result->basic_complete_results[i].mac_address[j]);
 800c1bc:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800c1c0:	4640      	mov	r0, r8
 800c1c2:	f006 fee7 	bl	8012f94 <iprintf>
				for( uint8_t j = 0; j < LR1110_WIFI_MAC_ADDRESS_LENGTH; j++ )
 800c1c6:	455f      	cmp	r7, fp
 800c1c8:	d1f8      	bne.n	800c1bc <lr1110_modem_display_wifi_scan_results+0x6c>
				printf(" - RSSI : %d dBm", capture_result->basic_complete_results[i].rssi);
 800c1ca:	4425      	add	r5, r4
 800c1cc:	4889      	ldr	r0, [pc, #548]	; (800c3f4 <lr1110_modem_display_wifi_scan_results+0x2a4>)
 800c1ce:	f995 112a 	ldrsb.w	r1, [r5, #298]	; 0x12a
 800c1d2:	f006 fedf 	bl	8012f94 <iprintf>
				printf(" - Channel : %d",
 800c1d6:	f895 1129 	ldrb.w	r1, [r5, #297]	; 0x129
 800c1da:	4887      	ldr	r0, [pc, #540]	; (800c3f8 <lr1110_modem_display_wifi_scan_results+0x2a8>)
 800c1dc:	f006 feda 	bl	8012f94 <iprintf>
				printf(" - Type : %d",
 800c1e0:	f895 112b 	ldrb.w	r1, [r5, #299]	; 0x12b
 800c1e4:	4885      	ldr	r0, [pc, #532]	; (800c3fc <lr1110_modem_display_wifi_scan_results+0x2ac>)
 800c1e6:	f006 fed5 	bl	8012f94 <iprintf>
				printf(" - Signal Type : %d\r\n",
 800c1ea:	f895 1128 	ldrb.w	r1, [r5, #296]	; 0x128
 800c1ee:	4884      	ldr	r0, [pc, #528]	; (800c400 <lr1110_modem_display_wifi_scan_results+0x2b0>)
 800c1f0:	f006 fed0 	bl	8012f94 <iprintf>
				printf("\t\t\t\t\t  - Phi Offset : %d",
 800c1f4:	f9b5 1132 	ldrsh.w	r1, [r5, #306]	; 0x132
 800c1f8:	4882      	ldr	r0, [pc, #520]	; (800c404 <lr1110_modem_display_wifi_scan_results+0x2b4>)
 800c1fa:	f006 fecb 	bl	8012f94 <iprintf>
					   capture_result->basic_complete_results[i].beacon_period_tu);
 800c1fe:	eb04 1349 	add.w	r3, r4, r9, lsl #5
				printf(" - Beacon period : %d tu",
 800c202:	4881      	ldr	r0, [pc, #516]	; (800c408 <lr1110_modem_display_wifi_scan_results+0x2b8>)
 800c204:	f8b3 1140 	ldrh.w	r1, [r3, #320]	; 0x140
 800c208:	f006 fec4 	bl	8012f94 <iprintf>
				printf(" - timestamp : %lld us\r\n",
 800c20c:	e9d5 234e 	ldrd	r2, r3, [r5, #312]	; 0x138
 800c210:	487e      	ldr	r0, [pc, #504]	; (800c40c <lr1110_modem_display_wifi_scan_results+0x2bc>)
 800c212:	f006 febf 	bl	8012f94 <iprintf>
				switch (i){
 800c216:	f1b9 0f04 	cmp.w	r9, #4
 800c21a:	f200 80ab 	bhi.w	800c374 <lr1110_modem_display_wifi_scan_results+0x224>
 800c21e:	e8df f009 	tbb	[pc, r9]
 800c222:	c9d3      	.short	0xc9d3
 800c224:	b2bd      	.short	0xb2bd
 800c226:	9d          	.byte	0x9d
 800c227:	00          	.byte	0x00
        printf("No MAC address found \r\n\r\n");
 800c228:	4879      	ldr	r0, [pc, #484]	; (800c410 <lr1110_modem_display_wifi_scan_results+0x2c0>)
 800c22a:	f006 ff39 	bl	80130a0 <puts>
        memset((uint8_t *) sPtrData, 0x00, sizeof(sWifiMacIdFrameFormat_t));
 800c22e:	4629      	mov	r1, r5
 800c230:	4630      	mov	r0, r6
 800c232:	2224      	movs	r2, #36	; 0x24
}
 800c234:	b003      	add	sp, #12
 800c236:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        memset((uint8_t *) sPtrData, 0x00, sizeof(sWifiMacIdFrameFormat_t));
 800c23a:	f006 bea3 	b.w	8012f84 <memset>
			printf("Wi-Fi result format : BASIC_MAC_TYPE_CHANNEL\r\n");
 800c23e:	4875      	ldr	r0, [pc, #468]	; (800c414 <lr1110_modem_display_wifi_scan_results+0x2c4>)
 800c240:	f006 ff2e 	bl	80130a0 <puts>
			for( uint8_t i = 0; i < capture_result->nbr_results; i++ )
 800c244:	78a3      	ldrb	r3, [r4, #2]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d041      	beq.n	800c2ce <lr1110_modem_display_wifi_scan_results+0x17e>
 800c24a:	f04f 0a00 	mov.w	sl, #0
 800c24e:	f104 030b 	add.w	r3, r4, #11
					printf("%#04X ",
 800c252:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 800c42c <lr1110_modem_display_wifi_scan_results+0x2dc>
 800c256:	9301      	str	r3, [sp, #4]
 800c258:	46d1      	mov	r9, sl
				printf("MAC addr : ");
 800c25a:	eb09 05c9 	add.w	r5, r9, r9, lsl #3
 800c25e:	4864      	ldr	r0, [pc, #400]	; (800c3f0 <lr1110_modem_display_wifi_scan_results+0x2a0>)
 800c260:	f006 fe98 	bl	8012f94 <iprintf>
				for( uint8_t j = 0; j < LR1110_WIFI_MAC_ADDRESS_LENGTH; j++ )
 800c264:	1d6b      	adds	r3, r5, #5
 800c266:	eb04 0b03 	add.w	fp, r4, r3
 800c26a:	9b01      	ldr	r3, [sp, #4]
 800c26c:	195f      	adds	r7, r3, r5
					printf("%#04X ",
 800c26e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 800c272:	4640      	mov	r0, r8
 800c274:	f006 fe8e 	bl	8012f94 <iprintf>
				for( uint8_t j = 0; j < LR1110_WIFI_MAC_ADDRESS_LENGTH; j++ )
 800c278:	455f      	cmp	r7, fp
 800c27a:	d1f8      	bne.n	800c26e <lr1110_modem_display_wifi_scan_results+0x11e>
				printf("- RSSI : %d dBm", capture_result->basic_mac_type_channel_results[i].rssi);
 800c27c:	4425      	add	r5, r4
 800c27e:	4866      	ldr	r0, [pc, #408]	; (800c418 <lr1110_modem_display_wifi_scan_results+0x2c8>)
 800c280:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800c284:	f006 fe86 	bl	8012f94 <iprintf>
				printf(" - Channel : %d",
 800c288:	7929      	ldrb	r1, [r5, #4]
 800c28a:	485b      	ldr	r0, [pc, #364]	; (800c3f8 <lr1110_modem_display_wifi_scan_results+0x2a8>)
 800c28c:	f006 fe82 	bl	8012f94 <iprintf>
				printf(" - Signal Type : %d\r\n",
 800c290:	78e9      	ldrb	r1, [r5, #3]
 800c292:	485b      	ldr	r0, [pc, #364]	; (800c400 <lr1110_modem_display_wifi_scan_results+0x2b0>)
 800c294:	f006 fe7e 	bl	8012f94 <iprintf>
				switch (i)
 800c298:	f1b9 0f04 	cmp.w	r9, #4
 800c29c:	d810      	bhi.n	800c2c0 <lr1110_modem_display_wifi_scan_results+0x170>
 800c29e:	e8df f009 	tbb	[pc, r9]
 800c2a2:	543e      	.short	0x543e
 800c2a4:	3349      	.short	0x3349
 800c2a6:	03          	.byte	0x03
 800c2a7:	00          	.byte	0x00
					memcpy((uint8_t *) sPtrData->au8MacId5, (uint8_t *)capture_result->basic_mac_type_channel_results[i].mac_address, 6);
 800c2a8:	4623      	mov	r3, r4
 800c2aa:	f853 2f2a 	ldr.w	r2, [r3, #42]!
 800c2ae:	f8c6 201d 	str.w	r2, [r6, #29]
 800c2b2:	889b      	ldrh	r3, [r3, #4]
 800c2b4:	f8a6 3021 	strh.w	r3, [r6, #33]	; 0x21
					sPtrData->i8Rssi5 = capture_result->basic_mac_type_channel_results[i].rssi;
 800c2b8:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800c2bc:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
			for( uint8_t i = 0; i < capture_result->nbr_results; i++ )
 800c2c0:	78a3      	ldrb	r3, [r4, #2]
 800c2c2:	f10a 0a01 	add.w	sl, sl, #1
 800c2c6:	fa5f f98a 	uxtb.w	r9, sl
 800c2ca:	454b      	cmp	r3, r9
 800c2cc:	d8c5      	bhi.n	800c25a <lr1110_modem_display_wifi_scan_results+0x10a>
               (capture_result->timings.demodulation_us + capture_result->timings.rx_capture_us +
 800c2ce:	f8d4 3534 	ldr.w	r3, [r4, #1332]	; 0x534
 800c2d2:	f8d4 1530 	ldr.w	r1, [r4, #1328]	; 0x530
 800c2d6:	f8d4 552c 	ldr.w	r5, [r4, #1324]	; 0x52c
                capture_result->timings.rx_correlation_us + capture_result->timings.rx_detection_us) /
 800c2da:	f8d4 0528 	ldr.w	r0, [r4, #1320]	; 0x528
        printf("\r\nScan Timing : %d ms\r\n",
 800c2de:	4a4f      	ldr	r2, [pc, #316]	; (800c41c <lr1110_modem_display_wifi_scan_results+0x2cc>)
               (capture_result->timings.demodulation_us + capture_result->timings.rx_capture_us +
 800c2e0:	4419      	add	r1, r3
 800c2e2:	4429      	add	r1, r5
                capture_result->timings.rx_correlation_us + capture_result->timings.rx_detection_us) /
 800c2e4:	4401      	add	r1, r0
        printf("\r\nScan Timing : %d ms\r\n",
 800c2e6:	fba2 3101 	umull	r3, r1, r2, r1
 800c2ea:	0989      	lsrs	r1, r1, #6
 800c2ec:	484c      	ldr	r0, [pc, #304]	; (800c420 <lr1110_modem_display_wifi_scan_results+0x2d0>)
 800c2ee:	f006 fe51 	bl	8012f94 <iprintf>
        printf("Scan Consumption : %d uas\r\n", capture_result->global_consumption_uas);
 800c2f2:	f8d4 1538 	ldr.w	r1, [r4, #1336]	; 0x538
 800c2f6:	484b      	ldr	r0, [pc, #300]	; (800c424 <lr1110_modem_display_wifi_scan_results+0x2d4>)
 800c2f8:	f006 fe4c 	bl	8012f94 <iprintf>
        printf("\r\n");
 800c2fc:	484a      	ldr	r0, [pc, #296]	; (800c428 <lr1110_modem_display_wifi_scan_results+0x2d8>)
}
 800c2fe:	b003      	add	sp, #12
 800c300:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        printf("\r\n");
 800c304:	f006 becc 	b.w	80130a0 <puts>
					memcpy((uint8_t *) sPtrData->au8MacId4, (uint8_t *)capture_result->basic_mac_type_channel_results[i].mac_address, 6);
 800c308:	4623      	mov	r3, r4
 800c30a:	f853 2f21 	ldr.w	r2, [r3, #33]!
 800c30e:	f8c6 2016 	str.w	r2, [r6, #22]
 800c312:	889b      	ldrh	r3, [r3, #4]
 800c314:	8373      	strh	r3, [r6, #26]
					sPtrData->i8Rssi4 = capture_result->basic_mac_type_channel_results[i].rssi;
 800c316:	f894 3020 	ldrb.w	r3, [r4, #32]
 800c31a:	7733      	strb	r3, [r6, #28]
					break;
 800c31c:	e7d0      	b.n	800c2c0 <lr1110_modem_display_wifi_scan_results+0x170>
					memcpy((uint8_t *) sPtrData->au8MacId1, (uint8_t *)capture_result->basic_mac_type_channel_results[i].mac_address, 6);
 800c31e:	4623      	mov	r3, r4
 800c320:	f853 2f06 	ldr.w	r2, [r3, #6]!
 800c324:	f8c6 2001 	str.w	r2, [r6, #1]
 800c328:	889b      	ldrh	r3, [r3, #4]
 800c32a:	f8a6 3005 	strh.w	r3, [r6, #5]
					sPtrData->i8Rssi1 = capture_result->basic_mac_type_channel_results[i].rssi;
 800c32e:	7963      	ldrb	r3, [r4, #5]
 800c330:	71f3      	strb	r3, [r6, #7]
					break;
 800c332:	e7c5      	b.n	800c2c0 <lr1110_modem_display_wifi_scan_results+0x170>
					memcpy((uint8_t *) sPtrData->au8MacId3, (uint8_t *)capture_result->basic_mac_type_channel_results[i].mac_address, 6);
 800c334:	4623      	mov	r3, r4
 800c336:	f853 2f18 	ldr.w	r2, [r3, #24]!
 800c33a:	f8c6 200f 	str.w	r2, [r6, #15]
 800c33e:	889b      	ldrh	r3, [r3, #4]
 800c340:	f8a6 3013 	strh.w	r3, [r6, #19]
					sPtrData->i8Rssi3 = capture_result->basic_mac_type_channel_results[i].rssi;
 800c344:	7de3      	ldrb	r3, [r4, #23]
 800c346:	7573      	strb	r3, [r6, #21]
					break;
 800c348:	e7ba      	b.n	800c2c0 <lr1110_modem_display_wifi_scan_results+0x170>
					memcpy((uint8_t *) sPtrData->au8MacId2, (uint8_t *)capture_result->basic_mac_type_channel_results[i].mac_address, 6);
 800c34a:	4623      	mov	r3, r4
 800c34c:	f853 2f0f 	ldr.w	r2, [r3, #15]!
 800c350:	60b2      	str	r2, [r6, #8]
 800c352:	889b      	ldrh	r3, [r3, #4]
 800c354:	81b3      	strh	r3, [r6, #12]
					sPtrData->i8Rssi2 = capture_result->basic_mac_type_channel_results[i].rssi;
 800c356:	7ba3      	ldrb	r3, [r4, #14]
 800c358:	73b3      	strb	r3, [r6, #14]
					break;
 800c35a:	e7b1      	b.n	800c2c0 <lr1110_modem_display_wifi_scan_results+0x170>
					memcpy((uint8_t *) sPtrData->au8MacId5, (uint8_t *)capture_result->basic_complete_results[i].mac_address, 6);
 800c35c:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
 800c360:	f8c6 301d 	str.w	r3, [r6, #29]
 800c364:	f8b4 31b0 	ldrh.w	r3, [r4, #432]	; 0x1b0
 800c368:	f8a6 3021 	strh.w	r3, [r6, #33]	; 0x21
					sPtrData->i8Rssi5 = capture_result->basic_complete_results[i].rssi;
 800c36c:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
 800c370:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
			for( uint8_t i = 0; i < capture_result->nbr_results; i++ )
 800c374:	78a3      	ldrb	r3, [r4, #2]
 800c376:	f10a 0a01 	add.w	sl, sl, #1
 800c37a:	fa5f f98a 	uxtb.w	r9, sl
 800c37e:	454b      	cmp	r3, r9
 800c380:	f63f af11 	bhi.w	800c1a6 <lr1110_modem_display_wifi_scan_results+0x56>
 800c384:	e7a3      	b.n	800c2ce <lr1110_modem_display_wifi_scan_results+0x17e>
					memcpy((uint8_t *) sPtrData->au8MacId4, (uint8_t *)capture_result->basic_complete_results[i].mac_address, 6);
 800c386:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 800c38a:	f8c6 3016 	str.w	r3, [r6, #22]
 800c38e:	f8b4 3190 	ldrh.w	r3, [r4, #400]	; 0x190
 800c392:	8373      	strh	r3, [r6, #26]
					sPtrData->i8Rssi4 = capture_result->basic_complete_results[i].rssi;
 800c394:	f894 318a 	ldrb.w	r3, [r4, #394]	; 0x18a
 800c398:	7733      	strb	r3, [r6, #28]
					break;
 800c39a:	e7eb      	b.n	800c374 <lr1110_modem_display_wifi_scan_results+0x224>
					memcpy((uint8_t *) sPtrData->au8MacId3, (uint8_t *)capture_result->basic_complete_results[i].mac_address, 6);
 800c39c:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800c3a0:	f8c6 300f 	str.w	r3, [r6, #15]
 800c3a4:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
 800c3a8:	f8a6 3013 	strh.w	r3, [r6, #19]
					sPtrData->i8Rssi3 = capture_result->basic_complete_results[i].rssi;
 800c3ac:	f894 316a 	ldrb.w	r3, [r4, #362]	; 0x16a
 800c3b0:	7573      	strb	r3, [r6, #21]
					break;
 800c3b2:	e7df      	b.n	800c374 <lr1110_modem_display_wifi_scan_results+0x224>
					memcpy((uint8_t *) sPtrData->au8MacId2, (uint8_t *)capture_result->basic_complete_results[i].mac_address, 6);
 800c3b4:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
 800c3b8:	60b3      	str	r3, [r6, #8]
 800c3ba:	f8b4 3150 	ldrh.w	r3, [r4, #336]	; 0x150
 800c3be:	81b3      	strh	r3, [r6, #12]
					sPtrData->i8Rssi2 = capture_result->basic_complete_results[i].rssi;
 800c3c0:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
 800c3c4:	73b3      	strb	r3, [r6, #14]
					break;
 800c3c6:	e7d5      	b.n	800c374 <lr1110_modem_display_wifi_scan_results+0x224>
					memcpy((uint8_t *) sPtrData->au8MacId1, (uint8_t *)capture_result->basic_complete_results[i].mac_address, 6);
 800c3c8:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 800c3cc:	f8c6 3001 	str.w	r3, [r6, #1]
 800c3d0:	f8b4 3130 	ldrh.w	r3, [r4, #304]	; 0x130
 800c3d4:	f8a6 3005 	strh.w	r3, [r6, #5]
					sPtrData->i8Rssi1 = capture_result->basic_complete_results[i].rssi;
 800c3d8:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 800c3dc:	71f3      	strb	r3, [r6, #7]
					break;
 800c3de:	e7c9      	b.n	800c374 <lr1110_modem_display_wifi_scan_results+0x224>
 800c3e0:	08015928 	.word	0x08015928
 800c3e4:	0801594c 	.word	0x0801594c
 800c3e8:	08015978 	.word	0x08015978
 800c3ec:	0801599c 	.word	0x0801599c
 800c3f0:	080159f8 	.word	0x080159f8
 800c3f4:	08015a0c 	.word	0x08015a0c
 800c3f8:	08015a20 	.word	0x08015a20
 800c3fc:	08015a30 	.word	0x08015a30
 800c400:	08015a40 	.word	0x08015a40
 800c404:	08015a58 	.word	0x08015a58
 800c408:	08015a74 	.word	0x08015a74
 800c40c:	08015a90 	.word	0x08015a90
 800c410:	08015aec 	.word	0x08015aec
 800c414:	08015aac 	.word	0x08015aac
 800c418:	08015adc 	.word	0x08015adc
 800c41c:	10624dd3 	.word	0x10624dd3
 800c420:	080159c4 	.word	0x080159c4
 800c424:	080159dc 	.word	0x080159dc
 800c428:	08014a2c 	.word	0x08014a2c
 800c42c:	08015a04 	.word	0x08015a04

0800c430 <app_wifi_scan>:
 */
#define WIFI_SCAN_MODE LR1110_WIFI_SCAN_MODE_BEACON_AND_PACKET


void  app_wifi_scan(void * pvWifiMAcDaata)
{
 800c430:	b530      	push	{r4, r5, lr}
	PLACE_IN_SECTION("MB_MEM2") ALIGN(4) static wifi_scan_all_results_t capture_result;

    /* Wi-Fi Parameters */
    wifi_settings.enabled       = true;
    wifi_settings.channels      = 0x3FFF;  // by default enable all channels
    wifi_settings.types         = WIFI_TYPE_SCAN;
 800c432:	4916      	ldr	r1, [pc, #88]	; (800c48c <app_wifi_scan+0x5c>)
{
 800c434:	b085      	sub	sp, #20
    wifi_settings.enabled       = true;
 800c436:	2301      	movs	r3, #1
    wifi_settings.scan_mode     = WIFI_SCAN_MODE;
    wifi_settings.nbr_retrials  = WIFI_NBR_RETRIALS;
    wifi_settings.max_results   = WIFI_MAX_RESULTS;
    wifi_settings.timeout       = WIFI_TIMEOUT_IN_MS;
 800c438:	225a      	movs	r2, #90	; 0x5a
    wifi_settings.channels      = 0x3FFF;  // by default enable all channels
 800c43a:	f643 75ff 	movw	r5, #16383	; 0x3fff
    wifi_settings.timeout       = WIFI_TIMEOUT_IN_MS;
 800c43e:	e9cd 1201 	strd	r1, r2, [sp, #4]
    wifi_settings.enabled       = true;
 800c442:	f88d 3000 	strb.w	r3, [sp]
    wifi_settings.result_format = LR1110_WIFI_RESULT_FORMAT_BASIC_MAC_TYPE_CHANNEL;
 800c446:	f88d 300c 	strb.w	r3, [sp, #12]
{
 800c44a:	4604      	mov	r4, r0
    wifi_settings.channels      = 0x3FFF;  // by default enable all channels
 800c44c:	f8ad 5002 	strh.w	r5, [sp, #2]


    /* Turn on the 2G4 SPDT and set it into the right direction */
    spdt_2g4_on( );
 800c450:	f7f5 faee 	bl	8001a30 <spdt_2g4_on>
    set_wifi_antenna( );
 800c454:	f7f5 faf2 	bl	8001a3c <set_wifi_antenna>

    HAL_Delay(100);
 800c458:	2064      	movs	r0, #100	; 0x64
 800c45a:	f7f4 ff1b 	bl	8001294 <HAL_Delay>

    if( wifi_execute_scan( &LR1110, &wifi_settings, &capture_result ) == WIFI_SCAN_SUCCESS )
 800c45e:	4a0c      	ldr	r2, [pc, #48]	; (800c490 <app_wifi_scan+0x60>)
 800c460:	480c      	ldr	r0, [pc, #48]	; (800c494 <app_wifi_scan+0x64>)
 800c462:	4669      	mov	r1, sp
 800c464:	f7ff fcda 	bl	800be1c <wifi_execute_scan>
 800c468:	2801      	cmp	r0, #1
 800c46a:	d009      	beq.n	800c480 <app_wifi_scan+0x50>
    {
        lr1110_modem_display_wifi_scan_results( &capture_result, pvWifiMAcDaata );
    }
    else
    {
        printf( "Wi-Fi Scan error\n\r" );
 800c46c:	480a      	ldr	r0, [pc, #40]	; (800c498 <app_wifi_scan+0x68>)
 800c46e:	f006 fd91 	bl	8012f94 <iprintf>
    }

    /* Turn off the 2G4 SPDT */
    HAL_Delay(100);
 800c472:	2064      	movs	r0, #100	; 0x64
 800c474:	f7f4 ff0e 	bl	8001294 <HAL_Delay>
    set_ble_antenna();
 800c478:	f7f5 fae8 	bl	8001a4c <set_ble_antenna>

}
 800c47c:	b005      	add	sp, #20
 800c47e:	bd30      	pop	{r4, r5, pc}
        lr1110_modem_display_wifi_scan_results( &capture_result, pvWifiMAcDaata );
 800c480:	4803      	ldr	r0, [pc, #12]	; (800c490 <app_wifi_scan+0x60>)
 800c482:	4621      	mov	r1, r4
 800c484:	f7ff fe64 	bl	800c150 <lr1110_modem_display_wifi_scan_results>
 800c488:	e7f3      	b.n	800c472 <app_wifi_scan+0x42>
 800c48a:	bf00      	nop
 800c48c:	05050204 	.word	0x05050204
 800c490:	2003164c 	.word	0x2003164c
 800c494:	20000a7c 	.word	0x20000a7c
 800c498:	08015b08 	.word	0x08015b08

0800c49c <DelayMs>:
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
    HAL_Delay(ms);
 800c49c:	f7f4 befa 	b.w	8001294 <HAL_Delay>

0800c4a0 <GpioInit>:
#include "gpio-board.h"
#include "stm32wb15xx.h"
#include "stm32wbxx.h"

void GpioInit( Gpio_t *obj, PinNames pin, PinModes mode,  PinConfigs config, PinTypes type, uint32_t value )
{
 800c4a0:	b410      	push	{r4}
 800c4a2:	f89d 4004 	ldrb.w	r4, [sp, #4]
    GpioMcuInit( obj, pin, mode, config, type, value );
 800c4a6:	9401      	str	r4, [sp, #4]
}
 800c4a8:	f85d 4b04 	ldr.w	r4, [sp], #4
    GpioMcuInit( obj, pin, mode, config, type, value );
 800c4ac:	f7f5 bf3a 	b.w	8002324 <GpioMcuInit>

0800c4b0 <GpioSetInterrupt>:
    GpioMcuSetContext( obj, context );
}

void GpioSetInterrupt( Gpio_t *obj, IrqModes irqMode, IrqPriorities irqPriority, GpioIrqHandler *irqHandler )
{
    GpioMcuSetInterrupt( obj, irqMode, irqPriority, irqHandler );
 800c4b0:	f7f5 bfb6 	b.w	8002420 <GpioMcuSetInterrupt>

0800c4b4 <GpioRead>:

    HAL_GPIO_TogglePin( gpio_port, ( 1 << ( obj->pin & 0x0F ) ) );
}

uint32_t GpioRead( Gpio_t *obj )
{
 800c4b4:	b508      	push	{r3, lr}
    GPIO_TypeDef* gpio_port = ( GPIO_TypeDef* ) ( AHB2PERIPH_BASE + ( ( obj->pin & 0xF0 ) << 6 ) );
 800c4b6:	f990 0000 	ldrsb.w	r0, [r0]

    return ( HAL_GPIO_ReadPin( gpio_port, ( ( 1 << ( obj->pin & 0x0F ) ) ) ) != GPIO_PIN_RESET ) ? 1 : 0;
 800c4ba:	2101      	movs	r1, #1
 800c4bc:	f000 030f 	and.w	r3, r0, #15
    GPIO_TypeDef* gpio_port = ( GPIO_TypeDef* ) ( AHB2PERIPH_BASE + ( ( obj->pin & 0xF0 ) << 6 ) );
 800c4c0:	0180      	lsls	r0, r0, #6
    return ( HAL_GPIO_ReadPin( gpio_port, ( ( 1 << ( obj->pin & 0x0F ) ) ) ) != GPIO_PIN_RESET ) ? 1 : 0;
 800c4c2:	4099      	lsls	r1, r3
    GPIO_TypeDef* gpio_port = ( GPIO_TypeDef* ) ( AHB2PERIPH_BASE + ( ( obj->pin & 0xF0 ) << 6 ) );
 800c4c4:	f400 5070 	and.w	r0, r0, #15360	; 0x3c00
    return ( HAL_GPIO_ReadPin( gpio_port, ( ( 1 << ( obj->pin & 0x0F ) ) ) ) != GPIO_PIN_RESET ) ? 1 : 0;
 800c4c8:	b289      	uxth	r1, r1
 800c4ca:	f100 4090 	add.w	r0, r0, #1207959552	; 0x48000000
 800c4ce:	f001 fc29 	bl	800dd24 <HAL_GPIO_ReadPin>
}
 800c4d2:	3800      	subs	r0, #0
 800c4d4:	bf18      	it	ne
 800c4d6:	2001      	movne	r0, #1
 800c4d8:	bd08      	pop	{r3, pc}
 800c4da:	bf00      	nop

0800c4dc <TimerSetTimeout.isra.0>:

    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
 800c4dc:	b570      	push	{r4, r5, r6, lr}
 800c4de:	460c      	mov	r4, r1
 800c4e0:	4605      	mov	r5, r0
{
    int32_t minTicks= RtcGetMinimumTimeout( );
 800c4e2:	f7f6 fb23 	bl	8002b2c <RtcGetMinimumTimeout>
    obj->IsNext2Expire = true;
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	7023      	strb	r3, [r4, #0]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 800c4ea:	682e      	ldr	r6, [r5, #0]
    int32_t minTicks= RtcGetMinimumTimeout( );
 800c4ec:	4604      	mov	r4, r0
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 800c4ee:	f7f6 fc1d 	bl	8002d2c <RtcGetTimerElapsedTime>
 800c4f2:	4420      	add	r0, r4
 800c4f4:	4286      	cmp	r6, r0
 800c4f6:	d304      	bcc.n	800c502 <TimerSetTimeout.isra.0+0x26>
 800c4f8:	6828      	ldr	r0, [r5, #0]
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
    }
    RtcSetAlarm( obj->Timestamp );
}
 800c4fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    RtcSetAlarm( obj->Timestamp );
 800c4fe:	f7f6 bbf1 	b.w	8002ce4 <RtcSetAlarm>
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 800c502:	f7f6 fc13 	bl	8002d2c <RtcGetTimerElapsedTime>
 800c506:	4420      	add	r0, r4
 800c508:	6028      	str	r0, [r5, #0]
}
 800c50a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    RtcSetAlarm( obj->Timestamp );
 800c50e:	f7f6 bbe9 	b.w	8002ce4 <RtcSetAlarm>
 800c512:	bf00      	nop

0800c514 <TimerInit>:
    obj->Timestamp = 0;
 800c514:	2300      	movs	r3, #0
    obj->ReloadValue = 0;
 800c516:	e9c0 3300 	strd	r3, r3, [r0]
    obj->Next = NULL;
 800c51a:	e9c0 3304 	strd	r3, r3, [r0, #16]
    obj->Callback = callback;
 800c51e:	60c1      	str	r1, [r0, #12]
    obj->IsStarted = false;
 800c520:	8103      	strh	r3, [r0, #8]
}
 800c522:	4770      	bx	lr

0800c524 <TimerStart>:
{
 800c524:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c526:	b083      	sub	sp, #12
 800c528:	4605      	mov	r5, r0
    CRITICAL_SECTION_BEGIN( );
 800c52a:	a801      	add	r0, sp, #4
 800c52c:	f7f5 feb0 	bl	8002290 <BoardCriticalSectionBegin>
    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 800c530:	b13d      	cbz	r5, 800c542 <TimerStart+0x1e>
    TimerEvent_t* cur = TimerListHead;
 800c532:	4f2b      	ldr	r7, [pc, #172]	; (800c5e0 <TimerStart+0xbc>)
 800c534:	683c      	ldr	r4, [r7, #0]
    while( cur != NULL )
 800c536:	b914      	cbnz	r4, 800c53e <TimerStart+0x1a>
 800c538:	e026      	b.n	800c588 <TimerStart+0x64>
        cur = cur->Next;
 800c53a:	6964      	ldr	r4, [r4, #20]
    while( cur != NULL )
 800c53c:	b134      	cbz	r4, 800c54c <TimerStart+0x28>
        if( cur == obj )
 800c53e:	42a5      	cmp	r5, r4
 800c540:	d1fb      	bne.n	800c53a <TimerStart+0x16>
        CRITICAL_SECTION_END( );
 800c542:	a801      	add	r0, sp, #4
 800c544:	f7f5 feaa 	bl	800229c <BoardCriticalSectionEnd>
}
 800c548:	b003      	add	sp, #12
 800c54a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    obj->Timestamp = obj->ReloadValue;
 800c54c:	686b      	ldr	r3, [r5, #4]
 800c54e:	602b      	str	r3, [r5, #0]
    obj->IsStarted = true;
 800c550:	2301      	movs	r3, #1
 800c552:	812b      	strh	r3, [r5, #8]
        elapsedTime = RtcGetTimerElapsedTime( );
 800c554:	f7f6 fbea 	bl	8002d2c <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
 800c558:	682b      	ldr	r3, [r5, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
 800c55a:	683e      	ldr	r6, [r7, #0]
        obj->Timestamp += elapsedTime;
 800c55c:	4418      	add	r0, r3
 800c55e:	6028      	str	r0, [r5, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
 800c560:	6833      	ldr	r3, [r6, #0]
 800c562:	4298      	cmp	r0, r3
 800c564:	d32e      	bcc.n	800c5c4 <TimerStart+0xa0>
    TimerEvent_t* next = TimerListHead->Next;
 800c566:	6973      	ldr	r3, [r6, #20]
    while( cur->Next != NULL )
 800c568:	b923      	cbnz	r3, 800c574 <TimerStart+0x50>
 800c56a:	e022      	b.n	800c5b2 <TimerStart+0x8e>
            next = next->Next;
 800c56c:	695a      	ldr	r2, [r3, #20]
    while( cur->Next != NULL )
 800c56e:	461e      	mov	r6, r3
 800c570:	b302      	cbz	r2, 800c5b4 <TimerStart+0x90>
 800c572:	4613      	mov	r3, r2
        if( obj->Timestamp > next->Timestamp )
 800c574:	681a      	ldr	r2, [r3, #0]
 800c576:	4290      	cmp	r0, r2
 800c578:	d8f8      	bhi.n	800c56c <TimerStart+0x48>
            cur->Next = obj;
 800c57a:	6175      	str	r5, [r6, #20]
        CRITICAL_SECTION_END( );
 800c57c:	a801      	add	r0, sp, #4
            obj->Next = next;
 800c57e:	616b      	str	r3, [r5, #20]
        CRITICAL_SECTION_END( );
 800c580:	f7f5 fe8c 	bl	800229c <BoardCriticalSectionEnd>
}
 800c584:	b003      	add	sp, #12
 800c586:	bdf0      	pop	{r4, r5, r6, r7, pc}
    obj->Timestamp = obj->ReloadValue;
 800c588:	686b      	ldr	r3, [r5, #4]
 800c58a:	602b      	str	r3, [r5, #0]
    obj->IsStarted = true;
 800c58c:	2301      	movs	r3, #1
 800c58e:	812b      	strh	r3, [r5, #8]
        RtcSetTimerContext( );
 800c590:	f7f6 faba 	bl	8002b08 <RtcSetTimerContext>
    TimerEvent_t* cur = TimerListHead;
 800c594:	683b      	ldr	r3, [r7, #0]
    if( cur != NULL )
 800c596:	b103      	cbz	r3, 800c59a <TimerStart+0x76>
        cur->IsNext2Expire = false;
 800c598:	725c      	strb	r4, [r3, #9]
    obj->Next = cur;
 800c59a:	616b      	str	r3, [r5, #20]
    TimerSetTimeout( TimerListHead );
 800c59c:	f105 0109 	add.w	r1, r5, #9
 800c5a0:	4628      	mov	r0, r5
    TimerListHead = obj;
 800c5a2:	603d      	str	r5, [r7, #0]
    TimerSetTimeout( TimerListHead );
 800c5a4:	f7ff ff9a 	bl	800c4dc <TimerSetTimeout.isra.0>
        CRITICAL_SECTION_END( );
 800c5a8:	a801      	add	r0, sp, #4
 800c5aa:	f7f5 fe77 	bl	800229c <BoardCriticalSectionEnd>
}
 800c5ae:	b003      	add	sp, #12
 800c5b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while( cur->Next != NULL )
 800c5b2:	4633      	mov	r3, r6
    obj->Next = NULL;
 800c5b4:	2200      	movs	r2, #0
    cur->Next = obj;
 800c5b6:	615d      	str	r5, [r3, #20]
        CRITICAL_SECTION_END( );
 800c5b8:	a801      	add	r0, sp, #4
    obj->Next = NULL;
 800c5ba:	616a      	str	r2, [r5, #20]
        CRITICAL_SECTION_END( );
 800c5bc:	f7f5 fe6e 	bl	800229c <BoardCriticalSectionEnd>
}
 800c5c0:	b003      	add	sp, #12
 800c5c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cur->IsNext2Expire = false;
 800c5c4:	7274      	strb	r4, [r6, #9]
    TimerSetTimeout( TimerListHead );
 800c5c6:	f105 0109 	add.w	r1, r5, #9
 800c5ca:	4628      	mov	r0, r5
    obj->Next = cur;
 800c5cc:	616e      	str	r6, [r5, #20]
    TimerListHead = obj;
 800c5ce:	603d      	str	r5, [r7, #0]
    TimerSetTimeout( TimerListHead );
 800c5d0:	f7ff ff84 	bl	800c4dc <TimerSetTimeout.isra.0>
        CRITICAL_SECTION_END( );
 800c5d4:	a801      	add	r0, sp, #4
 800c5d6:	f7f5 fe61 	bl	800229c <BoardCriticalSectionEnd>
}
 800c5da:	b003      	add	sp, #12
 800c5dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5de:	bf00      	nop
 800c5e0:	200005d0 	.word	0x200005d0

0800c5e4 <TimerIrqHandler>:
{
 800c5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t old =  RtcGetTimerContext( );
 800c5e6:	f7f6 fa9b 	bl	8002b20 <RtcGetTimerContext>
    if( TimerListHead != NULL )
 800c5ea:	4c1d      	ldr	r4, [pc, #116]	; (800c660 <TimerIrqHandler+0x7c>)
    uint32_t old =  RtcGetTimerContext( );
 800c5ec:	4605      	mov	r5, r0
    uint32_t now =  RtcSetTimerContext( );
 800c5ee:	f7f6 fa8b 	bl	8002b08 <RtcSetTimerContext>
    if( TimerListHead != NULL )
 800c5f2:	6821      	ldr	r1, [r4, #0]
 800c5f4:	2900      	cmp	r1, #0
 800c5f6:	d02a      	beq.n	800c64e <TimerIrqHandler+0x6a>
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 800c5f8:	694e      	ldr	r6, [r1, #20]
 800c5fa:	b15e      	cbz	r6, 800c614 <TimerIrqHandler+0x30>
    uint32_t deltaContext = now - old; // intentional wrap around
 800c5fc:	1b47      	subs	r7, r0, r5
 800c5fe:	4633      	mov	r3, r6
                next->Timestamp -= deltaContext;
 800c600:	1a2d      	subs	r5, r5, r0
            if( next->Timestamp > deltaContext )
 800c602:	681a      	ldr	r2, [r3, #0]
 800c604:	42ba      	cmp	r2, r7
                next->Timestamp -= deltaContext;
 800c606:	bf8c      	ite	hi
 800c608:	1952      	addhi	r2, r2, r5
                next->Timestamp = 0;
 800c60a:	2200      	movls	r2, #0
 800c60c:	601a      	str	r2, [r3, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 800c60e:	695b      	ldr	r3, [r3, #20]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d1f6      	bne.n	800c602 <TimerIrqHandler+0x1e>
        ExecuteCallBack( cur->Callback, cur->Context );
 800c614:	68cb      	ldr	r3, [r1, #12]
        TimerListHead = TimerListHead->Next;
 800c616:	6026      	str	r6, [r4, #0]
        cur->IsStarted = false;
 800c618:	2500      	movs	r5, #0
 800c61a:	720d      	strb	r5, [r1, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 800c61c:	b1cb      	cbz	r3, 800c652 <TimerIrqHandler+0x6e>
 800c61e:	6908      	ldr	r0, [r1, #16]
 800c620:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 800c622:	6823      	ldr	r3, [r4, #0]
 800c624:	b953      	cbnz	r3, 800c63c <TimerIrqHandler+0x58>
 800c626:	e012      	b.n	800c64e <TimerIrqHandler+0x6a>
        cur = TimerListHead;
 800c628:	6823      	ldr	r3, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
 800c62a:	68da      	ldr	r2, [r3, #12]
        TimerListHead = TimerListHead->Next;
 800c62c:	6959      	ldr	r1, [r3, #20]
        cur->IsStarted = false;
 800c62e:	721d      	strb	r5, [r3, #8]
        TimerListHead = TimerListHead->Next;
 800c630:	6021      	str	r1, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
 800c632:	b16a      	cbz	r2, 800c650 <TimerIrqHandler+0x6c>
 800c634:	6918      	ldr	r0, [r3, #16]
 800c636:	4790      	blx	r2
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 800c638:	6823      	ldr	r3, [r4, #0]
 800c63a:	b143      	cbz	r3, 800c64e <TimerIrqHandler+0x6a>
 800c63c:	681e      	ldr	r6, [r3, #0]
 800c63e:	f7f6 fb75 	bl	8002d2c <RtcGetTimerElapsedTime>
 800c642:	4286      	cmp	r6, r0
 800c644:	d3f0      	bcc.n	800c628 <TimerIrqHandler+0x44>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 800c646:	6820      	ldr	r0, [r4, #0]
 800c648:	b108      	cbz	r0, 800c64e <TimerIrqHandler+0x6a>
 800c64a:	7a43      	ldrb	r3, [r0, #9]
 800c64c:	b113      	cbz	r3, 800c654 <TimerIrqHandler+0x70>
}
 800c64e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ExecuteCallBack( cur->Callback, cur->Context );
 800c650:	e7fe      	b.n	800c650 <TimerIrqHandler+0x6c>
        ExecuteCallBack( cur->Callback, cur->Context );
 800c652:	e7fe      	b.n	800c652 <TimerIrqHandler+0x6e>
}
 800c654:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        TimerSetTimeout( TimerListHead );
 800c658:	f100 0109 	add.w	r1, r0, #9
 800c65c:	f7ff bf3e 	b.w	800c4dc <TimerSetTimeout.isra.0>
 800c660:	200005d0 	.word	0x200005d0

0800c664 <TimerStop>:
{
 800c664:	b530      	push	{r4, r5, lr}
    TimerEvent_t* prev = TimerListHead;
 800c666:	4d1b      	ldr	r5, [pc, #108]	; (800c6d4 <TimerStop+0x70>)
{
 800c668:	b083      	sub	sp, #12
 800c66a:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 800c66c:	a801      	add	r0, sp, #4
 800c66e:	f7f5 fe0f 	bl	8002290 <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
 800c672:	682b      	ldr	r3, [r5, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 800c674:	b15b      	cbz	r3, 800c68e <TimerStop+0x2a>
 800c676:	b154      	cbz	r4, 800c68e <TimerStop+0x2a>
    obj->IsStarted = false;
 800c678:	2200      	movs	r2, #0
    if( TimerListHead == obj ) // Stop the Head
 800c67a:	42a3      	cmp	r3, r4
    obj->IsStarted = false;
 800c67c:	7222      	strb	r2, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
 800c67e:	d102      	bne.n	800c686 <TimerStop+0x22>
 800c680:	e011      	b.n	800c6a6 <TimerStop+0x42>
            if( cur == obj )
 800c682:	429c      	cmp	r4, r3
 800c684:	d008      	beq.n	800c698 <TimerStop+0x34>
                cur = cur->Next;
 800c686:	461a      	mov	r2, r3
 800c688:	695b      	ldr	r3, [r3, #20]
        while( cur != NULL )
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d1f9      	bne.n	800c682 <TimerStop+0x1e>
        CRITICAL_SECTION_END( );
 800c68e:	a801      	add	r0, sp, #4
 800c690:	f7f5 fe04 	bl	800229c <BoardCriticalSectionEnd>
}
 800c694:	b003      	add	sp, #12
 800c696:	bd30      	pop	{r4, r5, pc}
                if( cur->Next != NULL )
 800c698:	6963      	ldr	r3, [r4, #20]
                    prev->Next = cur;
 800c69a:	6153      	str	r3, [r2, #20]
        CRITICAL_SECTION_END( );
 800c69c:	a801      	add	r0, sp, #4
 800c69e:	f7f5 fdfd 	bl	800229c <BoardCriticalSectionEnd>
}
 800c6a2:	b003      	add	sp, #12
 800c6a4:	bd30      	pop	{r4, r5, pc}
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 800c6a6:	7a59      	ldrb	r1, [r3, #9]
 800c6a8:	b149      	cbz	r1, 800c6be <TimerStop+0x5a>
            if( TimerListHead->Next != NULL )
 800c6aa:	695c      	ldr	r4, [r3, #20]
            TimerListHead->IsNext2Expire = false;
 800c6ac:	725a      	strb	r2, [r3, #9]
            if( TimerListHead->Next != NULL )
 800c6ae:	b16c      	cbz	r4, 800c6cc <TimerStop+0x68>
                TimerSetTimeout( TimerListHead );
 800c6b0:	f104 0109 	add.w	r1, r4, #9
 800c6b4:	4620      	mov	r0, r4
                TimerListHead = TimerListHead->Next;
 800c6b6:	602c      	str	r4, [r5, #0]
                TimerSetTimeout( TimerListHead );
 800c6b8:	f7ff ff10 	bl	800c4dc <TimerSetTimeout.isra.0>
 800c6bc:	e7e7      	b.n	800c68e <TimerStop+0x2a>
            if( TimerListHead->Next != NULL )
 800c6be:	695b      	ldr	r3, [r3, #20]
                TimerListHead = NULL;
 800c6c0:	602b      	str	r3, [r5, #0]
        CRITICAL_SECTION_END( );
 800c6c2:	a801      	add	r0, sp, #4
 800c6c4:	f7f5 fdea 	bl	800229c <BoardCriticalSectionEnd>
}
 800c6c8:	b003      	add	sp, #12
 800c6ca:	bd30      	pop	{r4, r5, pc}
                RtcStopAlarm( );
 800c6cc:	f7f6 fa46 	bl	8002b5c <RtcStopAlarm>
                TimerListHead = NULL;
 800c6d0:	602c      	str	r4, [r5, #0]
 800c6d2:	e7dc      	b.n	800c68e <TimerStop+0x2a>
 800c6d4:	200005d0 	.word	0x200005d0

0800c6d8 <TimerSetValue>:
{
 800c6d8:	b538      	push	{r3, r4, r5, lr}
 800c6da:	4605      	mov	r5, r0
    uint32_t ticks = RtcMs2Tick( value );
 800c6dc:	4608      	mov	r0, r1
 800c6de:	f7f6 fa27 	bl	8002b30 <RtcMs2Tick>
 800c6e2:	4604      	mov	r4, r0
    TimerStop( obj );
 800c6e4:	4628      	mov	r0, r5
 800c6e6:	f7ff ffbd 	bl	800c664 <TimerStop>
    minValue = RtcGetMinimumTimeout( );
 800c6ea:	f7f6 fa1f 	bl	8002b2c <RtcGetMinimumTimeout>
    if( ticks < minValue )
 800c6ee:	42a0      	cmp	r0, r4
 800c6f0:	bf38      	it	cc
 800c6f2:	4620      	movcc	r0, r4
    obj->ReloadValue = ticks;
 800c6f4:	e9c5 0000 	strd	r0, r0, [r5]
}
 800c6f8:	bd38      	pop	{r3, r4, r5, pc}
 800c6fa:	bf00      	nop

0800c6fc <TimerGetCurrentTime>:
{
 800c6fc:	b508      	push	{r3, lr}
    uint32_t now = RtcGetTimerValue( );
 800c6fe:	f7f6 fb0b 	bl	8002d18 <RtcGetTimerValue>
}
 800c702:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return  RtcTick2Ms( now );
 800c706:	f7f6 ba1d 	b.w	8002b44 <RtcTick2Ms>
 800c70a:	bf00      	nop

0800c70c <TimerGetElapsedTime>:
    if ( past == 0 )
 800c70c:	b900      	cbnz	r0, 800c710 <TimerGetElapsedTime+0x4>
}
 800c70e:	4770      	bx	lr
{
 800c710:	b510      	push	{r4, lr}
 800c712:	4604      	mov	r4, r0
    uint32_t nowInTicks = RtcGetTimerValue( );
 800c714:	f7f6 fb00 	bl	8002d18 <RtcGetTimerValue>
 800c718:	4603      	mov	r3, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
 800c71a:	4620      	mov	r0, r4
    uint32_t nowInTicks = RtcGetTimerValue( );
 800c71c:	461c      	mov	r4, r3
    uint32_t pastInTicks = RtcMs2Tick( past );
 800c71e:	f7f6 fa07 	bl	8002b30 <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
 800c722:	1a20      	subs	r0, r4, r0
}
 800c724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return RtcTick2Ms( nowInTicks - pastInTicks );
 800c728:	f7f6 ba0c 	b.w	8002b44 <RtcTick2Ms>

0800c72c <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800c72c:	b082      	sub	sp, #8
 800c72e:	b410      	push	{r4}
 800c730:	b083      	sub	sp, #12
 800c732:	ac02      	add	r4, sp, #8
 800c734:	e904 0006 	stmdb	r4, {r1, r2}
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds + b.Seconds;
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800c738:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 800c73c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c.Seconds = a.Seconds + b.Seconds;
 800c740:	9900      	ldr	r1, [sp, #0]
{
 800c742:	9305      	str	r3, [sp, #20]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800c744:	4422      	add	r2, r4
 800c746:	b214      	sxth	r4, r2
    if( c.SubSeconds >= 1000 )
 800c748:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
    c.Seconds = a.Seconds + b.Seconds;
 800c74c:	440b      	add	r3, r1
    if( c.SubSeconds >= 1000 )
 800c74e:	db04      	blt.n	800c75a <SysTimeAdd+0x2e>
 800c750:	b292      	uxth	r2, r2
    {
        c.Seconds++;
        c.SubSeconds -= 1000;
 800c752:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
 800c756:	b214      	sxth	r4, r2
        c.Seconds++;
 800c758:	3301      	adds	r3, #1
    }
    return c;
 800c75a:	6003      	str	r3, [r0, #0]
 800c75c:	8084      	strh	r4, [r0, #4]
}
 800c75e:	b003      	add	sp, #12
 800c760:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c764:	b002      	add	sp, #8
 800c766:	4770      	bx	lr

0800c768 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 800c768:	b082      	sub	sp, #8
 800c76a:	b410      	push	{r4}
 800c76c:	b083      	sub	sp, #12
 800c76e:	ac02      	add	r4, sp, #8
 800c770:	e904 0006 	stmdb	r4, {r1, r2}
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds - b.Seconds;
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800c774:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 800c778:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c.Seconds = a.Seconds - b.Seconds;
 800c77c:	9900      	ldr	r1, [sp, #0]
{
 800c77e:	9305      	str	r3, [sp, #20]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800c780:	1b12      	subs	r2, r2, r4
 800c782:	b214      	sxth	r4, r2
    if( c.SubSeconds < 0 )
 800c784:	2c00      	cmp	r4, #0
    c.Seconds = a.Seconds - b.Seconds;
 800c786:	eba1 0303 	sub.w	r3, r1, r3
    if( c.SubSeconds < 0 )
 800c78a:	da04      	bge.n	800c796 <SysTimeSub+0x2e>
 800c78c:	b292      	uxth	r2, r2
    {
        c.Seconds--;
        c.SubSeconds += 1000;
 800c78e:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 800c792:	b214      	sxth	r4, r2
        c.Seconds--;
 800c794:	3b01      	subs	r3, #1
    }
    return c;
 800c796:	6003      	str	r3, [r0, #0]
 800c798:	8084      	strh	r4, [r0, #4]
}
 800c79a:	b003      	add	sp, #12
 800c79c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7a0:	b002      	add	sp, #8
 800c7a2:	4770      	bx	lr

0800c7a4 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 800c7a4:	b500      	push	{lr}
 800c7a6:	b085      	sub	sp, #20
 800c7a8:	466b      	mov	r3, sp
 800c7aa:	e883 0003 	stmia.w	r3, {r0, r1}
    SysTime_t deltaTime;
  
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800c7ae:	2300      	movs	r3, #0

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800c7b0:	a803      	add	r0, sp, #12
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800c7b2:	9302      	str	r3, [sp, #8]
 800c7b4:	f8ad 300c 	strh.w	r3, [sp, #12]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800c7b8:	f7f6 fac6 	bl	8002d48 <RtcGetCalendarTime>
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800c7bc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c7c0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    c.Seconds = a.Seconds - b.Seconds;
 800c7c4:	9a00      	ldr	r2, [sp, #0]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800c7c6:	9002      	str	r0, [sp, #8]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800c7c8:	1a5b      	subs	r3, r3, r1
 800c7ca:	b219      	sxth	r1, r3
    if( c.SubSeconds < 0 )
 800c7cc:	2900      	cmp	r1, #0
    c.Seconds = a.Seconds - b.Seconds;
 800c7ce:	eba2 0000 	sub.w	r0, r2, r0
    if( c.SubSeconds < 0 )
 800c7d2:	da04      	bge.n	800c7de <SysTimeSet+0x3a>
 800c7d4:	b29b      	uxth	r3, r3
        c.SubSeconds += 1000;
 800c7d6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800c7da:	b219      	sxth	r1, r3
        c.Seconds--;
 800c7dc:	3801      	subs	r0, #1

    // sysTime is epoch
    deltaTime = SysTimeSub( sysTime, calendarTime );

    RtcBkupWrite( deltaTime.Seconds, ( uint32_t )deltaTime.SubSeconds );
 800c7de:	f7f6 facb 	bl	8002d78 <RtcBkupWrite>
}
 800c7e2:	b005      	add	sp, #20
 800c7e4:	f85d fb04 	ldr.w	pc, [sp], #4

0800c7e8 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 800c7e8:	b510      	push	{r4, lr}
 800c7ea:	b084      	sub	sp, #16
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800c7ec:	2300      	movs	r3, #0
{
 800c7ee:	4604      	mov	r4, r0
    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
    uint32_t seconds;
    uint32_t subSeconds;

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800c7f0:	a803      	add	r0, sp, #12
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800c7f2:	9302      	str	r3, [sp, #8]
 800c7f4:	f8ad 300c 	strh.w	r3, [sp, #12]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800c7f8:	f7f6 faa6 	bl	8002d48 <RtcGetCalendarTime>

    RtcBkupRead( &seconds, &subSeconds );
 800c7fc:	a901      	add	r1, sp, #4
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800c7fe:	4603      	mov	r3, r0
    RtcBkupRead( &seconds, &subSeconds );
 800c800:	4668      	mov	r0, sp
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800c802:	9302      	str	r3, [sp, #8]
    RtcBkupRead( &seconds, &subSeconds );
 800c804:	f7f6 faca 	bl	8002d9c <RtcBkupRead>
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800c808:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c80c:	9b01      	ldr	r3, [sp, #4]
    c.Seconds = a.Seconds + b.Seconds;
 800c80e:	9a00      	ldr	r2, [sp, #0]
 800c810:	9802      	ldr	r0, [sp, #8]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800c812:	440b      	add	r3, r1
 800c814:	b219      	sxth	r1, r3
    if( c.SubSeconds >= 1000 )
 800c816:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
    c.Seconds = a.Seconds + b.Seconds;
 800c81a:	4402      	add	r2, r0
    if( c.SubSeconds >= 1000 )
 800c81c:	db04      	blt.n	800c828 <SysTimeGet+0x40>
 800c81e:	b29b      	uxth	r3, r3
        c.SubSeconds -= 1000;
 800c820:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800c824:	b219      	sxth	r1, r3
        c.Seconds++;
 800c826:	3201      	adds	r2, #1
    SysTime_t deltaTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    sysTime = SysTimeAdd( deltaTime, calendarTime );

    return sysTime;
}
 800c828:	4620      	mov	r0, r4
    return sysTime;
 800c82a:	6022      	str	r2, [r4, #0]
 800c82c:	80a1      	strh	r1, [r4, #4]
}
 800c82e:	b004      	add	sp, #16
 800c830:	bd10      	pop	{r4, pc}
 800c832:	bf00      	nop

0800c834 <SysTimeGetMcuTime>:

SysTime_t SysTimeGetMcuTime( void )
{
 800c834:	b510      	push	{r4, lr}
 800c836:	b082      	sub	sp, #8
 800c838:	4604      	mov	r4, r0
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800c83a:	2300      	movs	r3, #0

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800c83c:	a801      	add	r0, sp, #4
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800c83e:	9300      	str	r3, [sp, #0]
 800c840:	f8ad 3004 	strh.w	r3, [sp, #4]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800c844:	f7f6 fa80 	bl	8002d48 <RtcGetCalendarTime>
 800c848:	466b      	mov	r3, sp
 800c84a:	9000      	str	r0, [sp, #0]

    return calendarTime;
 800c84c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c850:	e884 0003 	stmia.w	r4, {r0, r1}
}
 800c854:	4620      	mov	r0, r4
 800c856:	b002      	add	sp, #8
 800c858:	bd10      	pop	{r4, pc}
 800c85a:	bf00      	nop

0800c85c <SysTimeToMs>:

TimerTime_t SysTimeToMs( SysTime_t sysTime )
{
 800c85c:	b500      	push	{lr}
 800c85e:	b085      	sub	sp, #20
 800c860:	466b      	mov	r3, sp
 800c862:	e883 0003 	stmia.w	r3, {r0, r1}
    uint32_t seconds;
    uint32_t subSeconds;

    RtcBkupRead( &seconds, &subSeconds );
 800c866:	a903      	add	r1, sp, #12
 800c868:	a802      	add	r0, sp, #8
 800c86a:	f7f6 fa97 	bl	8002d9c <RtcBkupRead>
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800c86e:	9803      	ldr	r0, [sp, #12]
 800c870:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    c.Seconds = a.Seconds - b.Seconds;
 800c874:	9a00      	ldr	r2, [sp, #0]
 800c876:	9902      	ldr	r1, [sp, #8]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800c878:	1a1b      	subs	r3, r3, r0
 800c87a:	b218      	sxth	r0, r3
    if( c.SubSeconds < 0 )
 800c87c:	2800      	cmp	r0, #0
    c.Seconds = a.Seconds - b.Seconds;
 800c87e:	eba2 0201 	sub.w	r2, r2, r1
    if( c.SubSeconds < 0 )
 800c882:	da04      	bge.n	800c88e <SysTimeToMs+0x32>
 800c884:	b29b      	uxth	r3, r3
        c.SubSeconds += 1000;
 800c886:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800c88a:	b218      	sxth	r0, r3
        c.Seconds--;
 800c88c:	3a01      	subs	r2, #1

    SysTime_t deltaTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    SysTime_t calendarTime = SysTimeSub( sysTime, deltaTime );

    return ( TimerTime_t )( calendarTime.Seconds * 1000 + calendarTime.SubSeconds );
 800c88e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 800c892:	fb03 0002 	mla	r0, r3, r2, r0
 800c896:	b005      	add	sp, #20
 800c898:	f85d fb04 	ldr.w	pc, [sp], #4

0800c89c <SysTimeFromMs>:

SysTime_t SysTimeFromMs( TimerTime_t timeMs )
{
 800c89c:	b570      	push	{r4, r5, r6, lr}
    uint32_t seconds = timeMs / 1000;
 800c89e:	4c11      	ldr	r4, [pc, #68]	; (800c8e4 <SysTimeFromMs+0x48>)
 800c8a0:	fba4 3401 	umull	r3, r4, r4, r1
{
 800c8a4:	b082      	sub	sp, #8
    uint32_t seconds = timeMs / 1000;
 800c8a6:	09a4      	lsrs	r4, r4, #6
 800c8a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c8ac:	fb03 1614 	mls	r6, r3, r4, r1
{
 800c8b0:	4605      	mov	r5, r0
    uint32_t subSeconds = timeMs - seconds * 1000;
    SysTime_t sysTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    RtcBkupRead( &seconds, &subSeconds );
 800c8b2:	a901      	add	r1, sp, #4
 800c8b4:	4668      	mov	r0, sp
    uint32_t subSeconds = timeMs - seconds * 1000;
 800c8b6:	e9cd 4600 	strd	r4, r6, [sp]
    RtcBkupRead( &seconds, &subSeconds );
 800c8ba:	f7f6 fa6f 	bl	8002d9c <RtcBkupRead>
    c.Seconds = a.Seconds + b.Seconds;
 800c8be:	e9dd 2300 	ldrd	r2, r3, [sp]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800c8c2:	1999      	adds	r1, r3, r6
 800c8c4:	b20b      	sxth	r3, r1
    if( c.SubSeconds >= 1000 )
 800c8c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    c.Seconds = a.Seconds + b.Seconds;
 800c8ca:	4414      	add	r4, r2
    if( c.SubSeconds >= 1000 )
 800c8cc:	db04      	blt.n	800c8d8 <SysTimeFromMs+0x3c>
 800c8ce:	b289      	uxth	r1, r1
        c.SubSeconds -= 1000;
 800c8d0:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 800c8d4:	b20b      	sxth	r3, r1
        c.Seconds++;
 800c8d6:	3401      	adds	r4, #1

    SysTime_t deltaTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    return SysTimeAdd( sysTime, deltaTime );
}
 800c8d8:	4628      	mov	r0, r5
    return c;
 800c8da:	602c      	str	r4, [r5, #0]
 800c8dc:	80ab      	strh	r3, [r5, #4]
}
 800c8de:	b002      	add	sp, #8
 800c8e0:	bd70      	pop	{r4, r5, r6, pc}
 800c8e2:	bf00      	nop
 800c8e4:	10624dd3 	.word	0x10624dd3

0800c8e8 <Adv_Cancel_Req>:
static void Adv_Cancel_Req( void )
{
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 800c8e8:	2100      	movs	r1, #0
 800c8ea:	2001      	movs	r0, #1
 800c8ec:	f006 b9da 	b.w	8012ca4 <UTIL_SEQ_SetTask>

0800c8f0 <BLE_UserEvtRx>:
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
  return;
}

static void BLE_UserEvtRx( void * pPayload )
{
 800c8f0:	b510      	push	{r4, lr}
 800c8f2:	4604      	mov	r4, r0
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800c8f4:	6840      	ldr	r0, [r0, #4]
 800c8f6:	3008      	adds	r0, #8
 800c8f8:	f006 f850 	bl	801299c <SVCCTL_UserEvtRx>
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800c8fc:	3800      	subs	r0, #0
 800c8fe:	bf18      	it	ne
 800c900:	2001      	movne	r0, #1
 800c902:	7020      	strb	r0, [r4, #0]
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
}
 800c904:	bd10      	pop	{r4, pc}
 800c906:	bf00      	nop

0800c908 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
  uint32_t task_id_list;
  switch (status)
 800c908:	b130      	cbz	r0, 800c918 <BLE_StatusNot+0x10>
 800c90a:	2801      	cmp	r0, #1
 800c90c:	d103      	bne.n	800c916 <BLE_StatusNot+0xe>
      /**
       * All tasks that may send an aci/hci commands shall be listed here
       * This is to prevent a new command is sent while one is already pending
       */
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
      UTIL_SEQ_ResumeTask(task_id_list);
 800c90e:	f640 70ff 	movw	r0, #4095	; 0xfff
 800c912:	f006 b9eb 	b.w	8012cec <UTIL_SEQ_ResumeTask>
 800c916:	4770      	bx	lr
      UTIL_SEQ_PauseTask(task_id_list);
 800c918:	f640 70ff 	movw	r0, #4095	; 0xfff
 800c91c:	f006 b9d8 	b.w	8012cd0 <UTIL_SEQ_PauseTask>

0800c920 <Connection_Interval_Update_Req>:
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 800c920:	4b18      	ldr	r3, [pc, #96]	; (800c984 <Connection_Interval_Update_Req+0x64>)
 800c922:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800c926:	2a01      	cmp	r2, #1
 800c928:	d800      	bhi.n	800c92c <Connection_Interval_Update_Req+0xc>
 800c92a:	4770      	bx	lr
  if(mutex == 1) {
 800c92c:	4a16      	ldr	r2, [pc, #88]	; (800c988 <Connection_Interval_Update_Req+0x68>)
 800c92e:	7811      	ldrb	r1, [r2, #0]
 800c930:	2901      	cmp	r1, #1
 800c932:	d1fa      	bne.n	800c92a <Connection_Interval_Update_Req+0xa>
{
 800c934:	b530      	push	{r4, r5, lr}
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 800c936:	4d15      	ldr	r5, [pc, #84]	; (800c98c <Connection_Interval_Update_Req+0x6c>)
    result = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 800c938:	8ad8      	ldrh	r0, [r3, #22]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 800c93a:	7829      	ldrb	r1, [r5, #0]
    uint16_t interval_min = CONN_P(tab_conn_interval[index_con_int]);
 800c93c:	4c14      	ldr	r4, [pc, #80]	; (800c990 <Connection_Interval_Update_Req+0x70>)
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 800c93e:	1c4b      	adds	r3, r1, #1
 800c940:	f003 0301 	and.w	r3, r3, #1
    uint16_t interval_min = CONN_P(tab_conn_interval[index_con_int]);
 800c944:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 800c948:	edd1 6a00 	vldr	s13, [r1]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 800c94c:	702b      	strb	r3, [r5, #0]
    uint16_t interval_min = CONN_P(tab_conn_interval[index_con_int]);
 800c94e:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 800c952:	eec6 7a87 	vdiv.f32	s15, s13, s14
{
 800c956:	b083      	sub	sp, #12
    result = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 800c958:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    mutex = 0;
 800c95c:	2300      	movs	r3, #0
    result = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 800c95e:	9100      	str	r1, [sp, #0]
    mutex = 0;
 800c960:	7013      	strb	r3, [r2, #0]
    uint16_t interval_min = CONN_P(tab_conn_interval[index_con_int]);
 800c962:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c966:	ee17 2a90 	vmov	r2, s15
 800c96a:	b292      	uxth	r2, r2
    result = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 800c96c:	4611      	mov	r1, r2
 800c96e:	f005 f9a1 	bl	8011cb4 <aci_l2cap_connection_parameter_update_req>
    if( result == BLE_STATUS_SUCCESS )
 800c972:	b128      	cbz	r0, 800c980 <Connection_Interval_Update_Req+0x60>
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 800c974:	4807      	ldr	r0, [pc, #28]	; (800c994 <Connection_Interval_Update_Req+0x74>)
}
 800c976:	b003      	add	sp, #12
 800c978:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 800c97c:	f006 bb0a 	b.w	8012f94 <iprintf>
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 800c980:	4805      	ldr	r0, [pc, #20]	; (800c998 <Connection_Interval_Update_Req+0x78>)
 800c982:	e7f8      	b.n	800c976 <Connection_Interval_Update_Req+0x56>
 800c984:	20000240 	.word	0x20000240
 800c988:	20000c78 	.word	0x20000c78
 800c98c:	20000c79 	.word	0x20000c79
 800c990:	20000120 	.word	0x20000120
 800c994:	08015b4c 	.word	0x08015b4c
 800c998:	08015b1c 	.word	0x08015b1c

0800c99c <BleGetBdAddress>:
{
 800c99c:	b508      	push	{r3, lr}
 800c99e:	4b0c      	ldr	r3, [pc, #48]	; (800c9d0 <BleGetBdAddress+0x34>)
  if(udn != 0xFFFFFFFF)
 800c9a0:	681a      	ldr	r2, [r3, #0]
 800c9a2:	8819      	ldrh	r1, [r3, #0]
 800c9a4:	3201      	adds	r2, #1
 800c9a6:	d00a      	beq.n	800c9be <BleGetBdAddress+0x22>
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800c9a8:	4a0a      	ldr	r2, [pc, #40]	; (800c9d4 <BleGetBdAddress+0x38>)
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800c9aa:	480b      	ldr	r0, [pc, #44]	; (800c9d8 <BleGetBdAddress+0x3c>)
 800c9ac:	6813      	ldr	r3, [r2, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800c9ae:	8812      	ldrh	r2, [r2, #0]
    bd_addr_udn[2] = (uint8_t)device_id;
 800c9b0:	8042      	strh	r2, [r0, #2]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800c9b2:	0c1a      	lsrs	r2, r3, #16
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 800c9b4:	0e1b      	lsrs	r3, r3, #24
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800c9b6:	8001      	strh	r1, [r0, #0]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800c9b8:	7102      	strb	r2, [r0, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 800c9ba:	7143      	strb	r3, [r0, #5]
}
 800c9bc:	bd08      	pop	{r3, pc}
    otp_addr = OTP_Read(0);
 800c9be:	2000      	movs	r0, #0
 800c9c0:	f005 fb16 	bl	8011ff0 <OTP_Read>
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800c9c4:	4b05      	ldr	r3, [pc, #20]	; (800c9dc <BleGetBdAddress+0x40>)
 800c9c6:	2800      	cmp	r0, #0
 800c9c8:	bf08      	it	eq
 800c9ca:	4618      	moveq	r0, r3
}
 800c9cc:	bd08      	pop	{r3, pc}
 800c9ce:	bf00      	nop
 800c9d0:	1fff7580 	.word	0x1fff7580
 800c9d4:	1fff7584 	.word	0x1fff7584
 800c9d8:	200005d4 	.word	0x200005d4
 800c9dc:	08016054 	.word	0x08016054

0800c9e0 <Adv_Request.constprop.0>:
static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
 800c9e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    Min_Inter = AdvIntervalMin;
 800c9e4:	4c30      	ldr	r4, [pc, #192]	; (800caa8 <Adv_Request.constprop.0+0xc8>)
static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
 800c9e6:	b08c      	sub	sp, #48	; 0x30
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800c9e8:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
    Min_Inter = AdvIntervalMin;
 800c9ec:	f8b4 6084 	ldrh.w	r6, [r4, #132]	; 0x84
    Max_Inter = AdvIntervalMax;
 800c9f0:	f8b4 7086 	ldrh.w	r7, [r4, #134]	; 0x86
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800c9f4:	f7f4 fe68 	bl	80016c8 <HW_TS_Stop>
    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
 800c9f8:	f894 1080 	ldrb.w	r1, [r4, #128]	; 0x80
 800c9fc:	482b      	ldr	r0, [pc, #172]	; (800caac <Adv_Request.constprop.0+0xcc>)
    uint8_t au8String[10] = {0, };
 800c9fe:	2500      	movs	r5, #0
    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
 800ca00:	f006 fac8 	bl	8012f94 <iprintf>
    BleApplicationContext.Device_Connection_Status = New_Status;
 800ca04:	2301      	movs	r3, #1
 800ca06:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    uint8_t * pu8MacId = BleGetBdAddress();
 800ca0a:	f7ff ffc7 	bl	800c99c <BleGetBdAddress>
    uint8_t au8String[10] = {0, };
 800ca0e:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
 800ca12:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
    			((pu8MacId[0] & 0xF0) >> 4),
 800ca16:	7803      	ldrb	r3, [r0, #0]
    sprintf(au8String, "%X%X%X%X", ((pu8MacId[1] & 0xF0) >> 4),
 800ca18:	7842      	ldrb	r2, [r0, #1]
 800ca1a:	4925      	ldr	r1, [pc, #148]	; (800cab0 <Adv_Request.constprop.0+0xd0>)
 800ca1c:	f003 000f 	and.w	r0, r3, #15
 800ca20:	091b      	lsrs	r3, r3, #4
 800ca22:	e9cd 3000 	strd	r3, r0, [sp]
 800ca26:	f002 030f 	and.w	r3, r2, #15
 800ca2a:	a809      	add	r0, sp, #36	; 0x24
 800ca2c:	0912      	lsrs	r2, r2, #4
 800ca2e:	f006 fb3f 	bl	80130b0 <siprintf>
    ret = aci_gap_set_discoverable(
 800ca32:	7e23      	ldrb	r3, [r4, #24]
    local_name[8] = au8String[0];
 800ca34:	f8df c090 	ldr.w	ip, [pc, #144]	; 800cac8 <Adv_Request.constprop.0+0xe8>
    ret = aci_gap_set_discoverable(
 800ca38:	f8cd c008 	str.w	ip, [sp, #8]
 800ca3c:	f04f 080c 	mov.w	r8, #12
 800ca40:	f104 0019 	add.w	r0, r4, #25
 800ca44:	e9cd 3003 	strd	r3, r0, [sp, #12]
 800ca48:	463a      	mov	r2, r7
 800ca4a:	462b      	mov	r3, r5
 800ca4c:	4631      	mov	r1, r6
 800ca4e:	9506      	str	r5, [sp, #24]
 800ca50:	9505      	str	r5, [sp, #20]
 800ca52:	9500      	str	r5, [sp, #0]
 800ca54:	4628      	mov	r0, r5
 800ca56:	f8cd 8004 	str.w	r8, [sp, #4]
    local_name[8] = au8String[0];
 800ca5a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ca5c:	f8cc 5008 	str.w	r5, [ip, #8]
    ret = aci_gap_set_discoverable(
 800ca60:	f004 fd58 	bl	8011514 <aci_gap_set_discoverable>
    App_vPrepareBleAdvData();
 800ca64:	f7f4 f978 	bl	8000d58 <App_vPrepareBleAdvData>
    App_vBleAdvDataGet(&au8ServiceData[2], 10);
 800ca68:	210a      	movs	r1, #10
 800ca6a:	4812      	ldr	r0, [pc, #72]	; (800cab4 <Adv_Request.constprop.0+0xd4>)
 800ca6c:	f7f4 f998 	bl	8000da0 <App_vBleAdvDataGet>
    ret = aci_gap_update_adv_data(sizeof(au8ServiceData), (uint8_t*) au8ServiceData);
 800ca70:	4911      	ldr	r1, [pc, #68]	; (800cab8 <Adv_Request.constprop.0+0xd8>)
 800ca72:	4640      	mov	r0, r8
 800ca74:	f004 fe72 	bl	801175c <aci_gap_update_adv_data>
    if (ret == BLE_STATUS_SUCCESS)
 800ca78:	b970      	cbnz	r0, 800ca98 <Adv_Request.constprop.0+0xb8>
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 800ca7a:	4810      	ldr	r0, [pc, #64]	; (800cabc <Adv_Request.constprop.0+0xdc>)
 800ca7c:	f006 fb10 	bl	80130a0 <puts>
        ret = aci_gap_update_adv_data(sizeof(au8ServiceData), (uint8_t*) au8ServiceData);
 800ca80:	490d      	ldr	r1, [pc, #52]	; (800cab8 <Adv_Request.constprop.0+0xd8>)
 800ca82:	4640      	mov	r0, r8
 800ca84:	f004 fe6a 	bl	801175c <aci_gap_update_adv_data>
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800ca88:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
 800ca8c:	490c      	ldr	r1, [pc, #48]	; (800cac0 <Adv_Request.constprop.0+0xe0>)
 800ca8e:	f7f4 fe79 	bl	8001784 <HW_TS_Start>
}
 800ca92:	b00c      	add	sp, #48	; 0x30
 800ca94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 800ca98:	4601      	mov	r1, r0
 800ca9a:	480a      	ldr	r0, [pc, #40]	; (800cac4 <Adv_Request.constprop.0+0xe4>)
 800ca9c:	f006 fa7a 	bl	8012f94 <iprintf>
}
 800caa0:	b00c      	add	sp, #48	; 0x30
 800caa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caa6:	bf00      	nop
 800caa8:	20000240 	.word	0x20000240
 800caac:	08015b74 	.word	0x08015b74
 800cab0:	08015b90 	.word	0x08015b90
 800cab4:	200000f6 	.word	0x200000f6
 800cab8:	200000f4 	.word	0x200000f4
 800cabc:	08015b9c 	.word	0x08015b9c
 800cac0:	0001e046 	.word	0x0001e046
 800cac4:	08015bc4 	.word	0x08015bc4
 800cac8:	20000100 	.word	0x20000100

0800cacc <Adv_Cancel>:
{
 800cacc:	b510      	push	{r4, lr}
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800cace:	4c11      	ldr	r4, [pc, #68]	; (800cb14 <Adv_Cancel+0x48>)
	printf("Adv_Cancel\r\n");
 800cad0:	4811      	ldr	r0, [pc, #68]	; (800cb18 <Adv_Cancel+0x4c>)
 800cad2:	f006 fae5 	bl	80130a0 <puts>
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800cad6:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800cada:	2b05      	cmp	r3, #5
 800cadc:	d103      	bne.n	800cae6 <Adv_Cancel+0x1a>
}
 800cade:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adv_Request(APP_BLE_FAST_ADV);
 800cae2:	f7ff bf7d 	b.w	800c9e0 <Adv_Request.constprop.0>
    result = aci_gap_set_non_discoverable();
 800cae6:	f004 fcf7 	bl	80114d8 <aci_gap_set_non_discoverable>
    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800caea:	2300      	movs	r3, #0
 800caec:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    if (result == BLE_STATUS_SUCCESS)
 800caf0:	b948      	cbnz	r0, 800cb06 <Adv_Cancel+0x3a>
      APP_DBG_MSG("  \r\n\r");APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800caf2:	480a      	ldr	r0, [pc, #40]	; (800cb1c <Adv_Cancel+0x50>)
 800caf4:	f006 fa4e 	bl	8012f94 <iprintf>
 800caf8:	4809      	ldr	r0, [pc, #36]	; (800cb20 <Adv_Cancel+0x54>)
 800cafa:	f006 fa4b 	bl	8012f94 <iprintf>
}
 800cafe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adv_Request(APP_BLE_FAST_ADV);
 800cb02:	f7ff bf6d 	b.w	800c9e0 <Adv_Request.constprop.0>
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800cb06:	4807      	ldr	r0, [pc, #28]	; (800cb24 <Adv_Cancel+0x58>)
 800cb08:	f006 fa44 	bl	8012f94 <iprintf>
}
 800cb0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adv_Request(APP_BLE_FAST_ADV);
 800cb10:	f7ff bf66 	b.w	800c9e0 <Adv_Request.constprop.0>
 800cb14:	20000240 	.word	0x20000240
 800cb18:	08015bf4 	.word	0x08015bf4
 800cb1c:	08015c00 	.word	0x08015c00
 800cb20:	08015c08 	.word	0x08015c08
 800cb24:	08015c24 	.word	0x08015c24

0800cb28 <APP_BLE_Init>:
{
 800cb28:	b5f0      	push	{r4, r5, r6, r7, lr}
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800cb2a:	4d5d      	ldr	r5, [pc, #372]	; (800cca0 <APP_BLE_Init+0x178>)
  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800cb2c:	4b5d      	ldr	r3, [pc, #372]	; (800cca4 <APP_BLE_Init+0x17c>)
{
 800cb2e:	b099      	sub	sp, #100	; 0x64
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800cb30:	ac0b      	add	r4, sp, #44	; 0x2c
  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800cb32:	9309      	str	r3, [sp, #36]	; 0x24
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800cb34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cb36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cb3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cb3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800cb40:	ae09      	add	r6, sp, #36	; 0x24
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800cb42:	682a      	ldr	r2, [r5, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800cb44:	4b58      	ldr	r3, [pc, #352]	; (800cca8 <APP_BLE_Init+0x180>)
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800cb46:	4859      	ldr	r0, [pc, #356]	; (800ccac <APP_BLE_Init+0x184>)
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800cb48:	7022      	strb	r2, [r4, #0]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800cb4a:	4631      	mov	r1, r6
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800cb4c:	930a      	str	r3, [sp, #40]	; 0x28
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800cb4e:	f005 f94d 	bl	8011dec <hci_init>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800cb52:	2004      	movs	r0, #4
 800cb54:	4a56      	ldr	r2, [pc, #344]	; (800ccb0 <APP_BLE_Init+0x188>)
 800cb56:	2100      	movs	r1, #0
 800cb58:	f006 f9cc 	bl	8012ef4 <UTIL_SEQ_RegTask>
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 800cb5c:	a80b      	add	r0, sp, #44	; 0x2c
 800cb5e:	f005 fb23 	bl	80121a8 <SHCI_C2_BLE_Init>
 800cb62:	2800      	cmp	r0, #0
 800cb64:	f040 8096 	bne.w	800cc94 <APP_BLE_Init+0x16c>
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 800cb68:	2500      	movs	r5, #0
 800cb6a:	f8ad 501c 	strh.w	r5, [sp, #28]
  hci_reset();
 800cb6e:	f005 f829 	bl	8011bc4 <hci_reset>
  bd_addr = BleGetBdAddress();
 800cb72:	f7ff ff13 	bl	800c99c <BleGetBdAddress>
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800cb76:	2106      	movs	r1, #6
  bd_addr = BleGetBdAddress();
 800cb78:	4604      	mov	r4, r0
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800cb7a:	4602      	mov	r2, r0
 800cb7c:	4628      	mov	r0, r5
 800cb7e:	f004 ffa7 	bl	8011ad0 <aci_hal_write_config_data>
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 800cb82:	4b4c      	ldr	r3, [pc, #304]	; (800ccb4 <APP_BLE_Init+0x18c>)
 800cb84:	7962      	ldrb	r2, [r4, #5]
 800cb86:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 800cb88:	7922      	ldrb	r2, [r4, #4]
 800cb8a:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 800cb8c:	78e2      	ldrb	r2, [r4, #3]
 800cb8e:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 800cb90:	78a2      	ldrb	r2, [r4, #2]
 800cb92:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 800cb94:	7862      	ldrb	r2, [r4, #1]
 800cb96:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 800cb98:	7821      	ldrb	r1, [r4, #0]
 800cb9a:	7359      	strb	r1, [r3, #13]
  aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800cb9c:	4a46      	ldr	r2, [pc, #280]	; (800ccb8 <APP_BLE_Init+0x190>)
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800cb9e:	4c47      	ldr	r4, [pc, #284]	; (800ccbc <APP_BLE_Init+0x194>)
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800cba0:	4f47      	ldr	r7, [pc, #284]	; (800ccc0 <APP_BLE_Init+0x198>)
  aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800cba2:	2110      	movs	r1, #16
 800cba4:	2018      	movs	r0, #24
 800cba6:	f004 ff93 	bl	8011ad0 <aci_hal_write_config_data>
  aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800cbaa:	4a46      	ldr	r2, [pc, #280]	; (800ccc4 <APP_BLE_Init+0x19c>)
 800cbac:	2110      	movs	r1, #16
 800cbae:	2008      	movs	r0, #8
 800cbb0:	f004 ff8e 	bl	8011ad0 <aci_hal_write_config_data>
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800cbb4:	2118      	movs	r1, #24
 800cbb6:	2001      	movs	r0, #1
 800cbb8:	f004 ffb8 	bl	8011b2c <aci_hal_set_tx_power_level>
  aci_gatt_init();
 800cbbc:	f004 fe62 	bl	8011884 <aci_gatt_init>
    aci_gap_init(role,
 800cbc0:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 800cbc4:	4629      	mov	r1, r5
 800cbc6:	9601      	str	r6, [sp, #4]
 800cbc8:	9300      	str	r3, [sp, #0]
 800cbca:	2207      	movs	r2, #7
 800cbcc:	ab08      	add	r3, sp, #32
 800cbce:	2001      	movs	r0, #1
 800cbd0:	f004 fd82 	bl	80116d8 <aci_gap_init>
    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800cbd4:	4b3c      	ldr	r3, [pc, #240]	; (800ccc8 <APP_BLE_Init+0x1a0>)
 800cbd6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800cbda:	9300      	str	r3, [sp, #0]
 800cbdc:	462a      	mov	r2, r5
 800cbde:	2307      	movs	r3, #7
 800cbe0:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 800cbe4:	f004 ff42 	bl	8011a6c <aci_gatt_update_char_value>
  if(aci_gatt_update_char_value(gap_service_handle,
 800cbe8:	ab07      	add	r3, sp, #28
 800cbea:	462a      	mov	r2, r5
 800cbec:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800cbf0:	9300      	str	r3, [sp, #0]
 800cbf2:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 800cbf6:	2302      	movs	r3, #2
 800cbf8:	f004 ff38 	bl	8011a6c <aci_gatt_update_char_value>
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800cbfc:	2202      	movs	r2, #2
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800cbfe:	2601      	movs	r6, #1
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800cc00:	4611      	mov	r1, r2
 800cc02:	4628      	mov	r0, r5
 800cc04:	f005 f82c 	bl	8011c60 <hci_le_set_default_phy>
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800cc08:	4630      	mov	r0, r6
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800cc0a:	7026      	strb	r6, [r4, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800cc0c:	f004 fcdc 	bl	80115c8 <aci_gap_set_io_capability>
  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800cc10:	2110      	movs	r1, #16
 800cc12:	9504      	str	r5, [sp, #16]
 800cc14:	9502      	str	r5, [sp, #8]
 800cc16:	9101      	str	r1, [sp, #4]
 800cc18:	462b      	mov	r3, r5
 800cc1a:	2108      	movs	r1, #8
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800cc1c:	f241 0508 	movw	r5, #4104	; 0x1008
  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800cc20:	9100      	str	r1, [sp, #0]
 800cc22:	9703      	str	r7, [sp, #12]
 800cc24:	4632      	mov	r2, r6
 800cc26:	4631      	mov	r1, r6
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800cc28:	7066      	strb	r6, [r4, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800cc2a:	8066      	strh	r6, [r4, #2]
  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800cc2c:	4630      	mov	r0, r6
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800cc2e:	80a5      	strh	r5, [r4, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800cc30:	60a7      	str	r7, [r4, #8]
  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800cc32:	f004 fced 	bl	8011610 <aci_gap_set_authentication_requirement>
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800cc36:	78a3      	ldrb	r3, [r4, #2]
 800cc38:	bb7b      	cbnz	r3, 800cc9a <APP_BLE_Init+0x172>
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800cc3a:	2500      	movs	r5, #0
  SVCCTL_Init();
 800cc3c:	f005 fe9a 	bl	8012974 <SVCCTL_Init>
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800cc40:	f64f 73ff 	movw	r3, #65535	; 0xffff
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800cc44:	4629      	mov	r1, r5
 800cc46:	4a21      	ldr	r2, [pc, #132]	; (800cccc <APP_BLE_Init+0x1a4>)
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800cc48:	82e3      	strh	r3, [r4, #22]
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800cc4a:	2001      	movs	r0, #1
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800cc4c:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800cc50:	f006 f950 	bl	8012ef4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_UPDATE_REG_ID, UTIL_SEQ_RFU, Connection_Interval_Update_Req);
 800cc54:	4629      	mov	r1, r5
 800cc56:	4a1e      	ldr	r2, [pc, #120]	; (800ccd0 <APP_BLE_Init+0x1a8>)
 800cc58:	2002      	movs	r0, #2
 800cc5a:	f006 f94b 	bl	8012ef4 <UTIL_SEQ_RegTask>
  aci_hal_set_radio_activity_mask(0x0006);
 800cc5e:	2006      	movs	r0, #6
 800cc60:	f004 ff8c 	bl	8011b7c <aci_hal_set_radio_activity_mask>
  index_con_int = 0;
 800cc64:	4a1b      	ldr	r2, [pc, #108]	; (800ccd4 <APP_BLE_Init+0x1ac>)
  mutex = 1;
 800cc66:	4b1c      	ldr	r3, [pc, #112]	; (800ccd8 <APP_BLE_Init+0x1b0>)
  index_con_int = 0;
 800cc68:	7015      	strb	r5, [r2, #0]
  mutex = 1;
 800cc6a:	2201      	movs	r2, #1
 800cc6c:	701a      	strb	r2, [r3, #0]
  P2PS_APP_Init();
 800cc6e:	f000 fa19 	bl	800d0a4 <P2PS_APP_Init>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800cc72:	491a      	ldr	r1, [pc, #104]	; (800ccdc <APP_BLE_Init+0x1b4>)
 800cc74:	4b1a      	ldr	r3, [pc, #104]	; (800cce0 <APP_BLE_Init+0x1b8>)
 800cc76:	462a      	mov	r2, r5
 800cc78:	4628      	mov	r0, r5
 800cc7a:	f7f4 fcfb 	bl	8001674 <HW_TS_Create>
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800cc7e:	2280      	movs	r2, #128	; 0x80
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800cc80:	23a0      	movs	r3, #160	; 0xa0
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800cc82:	8325      	strh	r5, [r4, #24]
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800cc84:	f8a4 2084 	strh.w	r2, [r4, #132]	; 0x84
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800cc88:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
   Adv_Request(APP_BLE_FAST_ADV);
 800cc8c:	f7ff fea8 	bl	800c9e0 <Adv_Request.constprop.0>
}
 800cc90:	b019      	add	sp, #100	; 0x64
 800cc92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 800cc94:	f7f5 f92a 	bl	8001eec <Error_Handler>
 800cc98:	e766      	b.n	800cb68 <APP_BLE_Init+0x40>
     aci_gap_configure_whitelist();
 800cc9a:	f004 fd89 	bl	80117b0 <aci_gap_configure_whitelist>
 800cc9e:	e7cc      	b.n	800cc3a <APP_BLE_Init+0x112>
 800cca0:	08014478 	.word	0x08014478
 800cca4:	20030028 	.word	0x20030028
 800cca8:	0800c909 	.word	0x0800c909
 800ccac:	0800c8f1 	.word	0x0800c8f1
 800ccb0:	08011e45 	.word	0x08011e45
 800ccb4:	20000110 	.word	0x20000110
 800ccb8:	08016044 	.word	0x08016044
 800ccbc:	20000240 	.word	0x20000240
 800ccc0:	0001b207 	.word	0x0001b207
 800ccc4:	08016034 	.word	0x08016034
 800ccc8:	08015c48 	.word	0x08015c48
 800cccc:	0800cacd 	.word	0x0800cacd
 800ccd0:	0800c921 	.word	0x0800c921
 800ccd4:	20000c79 	.word	0x20000c79
 800ccd8:	20000c78 	.word	0x20000c78
 800ccdc:	200002c1 	.word	0x200002c1
 800cce0:	0800c8e9 	.word	0x0800c8e9

0800cce4 <SVCCTL_App_Notification>:
{
 800cce4:	b530      	push	{r4, r5, lr}
  switch (event_pckt->evt)
 800cce6:	7843      	ldrb	r3, [r0, #1]
 800cce8:	2b3e      	cmp	r3, #62	; 0x3e
{
 800ccea:	b083      	sub	sp, #12
 800ccec:	4604      	mov	r4, r0
  switch (event_pckt->evt)
 800ccee:	d006      	beq.n	800ccfe <SVCCTL_App_Notification+0x1a>
 800ccf0:	2bff      	cmp	r3, #255	; 0xff
 800ccf2:	d03c      	beq.n	800cd6e <SVCCTL_App_Notification+0x8a>
 800ccf4:	2b05      	cmp	r3, #5
 800ccf6:	d026      	beq.n	800cd46 <SVCCTL_App_Notification+0x62>
}
 800ccf8:	2001      	movs	r0, #1
 800ccfa:	b003      	add	sp, #12
 800ccfc:	bd30      	pop	{r4, r5, pc}
      switch (meta_evt->subevent)
 800ccfe:	78c3      	ldrb	r3, [r0, #3]
 800cd00:	2b03      	cmp	r3, #3
 800cd02:	f000 8084 	beq.w	800ce0e <SVCCTL_App_Notification+0x12a>
 800cd06:	2b0c      	cmp	r3, #12
 800cd08:	d05f      	beq.n	800cdca <SVCCTL_App_Notification+0xe6>
 800cd0a:	2b01      	cmp	r3, #1
 800cd0c:	d1f4      	bne.n	800ccf8 <SVCCTL_App_Notification+0x14>
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800cd0e:	4d75      	ldr	r5, [pc, #468]	; (800cee4 <SVCCTL_App_Notification+0x200>)
 800cd10:	f895 0081 	ldrb.w	r0, [r5, #129]	; 0x81
 800cd14:	f7f4 fcd8 	bl	80016c8 <HW_TS_Stop>
          APP_DBG_MSG("HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE for connection handle 0x%x\n", connection_complete_event->Connection_Handle);
 800cd18:	f8b4 1005 	ldrh.w	r1, [r4, #5]
 800cd1c:	4872      	ldr	r0, [pc, #456]	; (800cee8 <SVCCTL_App_Notification+0x204>)
 800cd1e:	f006 f939 	bl	8012f94 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800cd22:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800cd26:	4871      	ldr	r0, [pc, #452]	; (800ceec <SVCCTL_App_Notification+0x208>)
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800cd28:	2b04      	cmp	r3, #4
 800cd2a:	bf0c      	ite	eq
 800cd2c:	2306      	moveq	r3, #6
 800cd2e:	2305      	movne	r3, #5
 800cd30:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 800cd34:	f8b4 3005 	ldrh.w	r3, [r4, #5]
 800cd38:	82eb      	strh	r3, [r5, #22]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800cd3a:	2200      	movs	r2, #0
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800cd3c:	8043      	strh	r3, [r0, #2]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800cd3e:	7002      	strb	r2, [r0, #0]
          P2PS_APP_Notification(&handleNotification);
 800cd40:	f000 f996 	bl	800d070 <P2PS_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800cd44:	e7d8      	b.n	800ccf8 <SVCCTL_App_Notification+0x14>
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800cd46:	4d67      	ldr	r5, [pc, #412]	; (800cee4 <SVCCTL_App_Notification+0x200>)
 800cd48:	8882      	ldrh	r2, [r0, #4]
 800cd4a:	8aeb      	ldrh	r3, [r5, #22]
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	d062      	beq.n	800ce16 <SVCCTL_App_Notification+0x132>
      Adv_Request(APP_BLE_FAST_ADV);
 800cd50:	f7ff fe46 	bl	800c9e0 <Adv_Request.constprop.0>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800cd54:	4865      	ldr	r0, [pc, #404]	; (800ceec <SVCCTL_App_Notification+0x208>)
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800cd56:	8aeb      	ldrh	r3, [r5, #22]
 800cd58:	8043      	strh	r3, [r0, #2]
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	7003      	strb	r3, [r0, #0]
      P2PS_APP_Notification(&handleNotification);
 800cd5e:	f000 f987 	bl	800d070 <P2PS_APP_Notification>
      App_vSetBleConnectionStatus(FALSE);
 800cd62:	2000      	movs	r0, #0
 800cd64:	f7f4 f844 	bl	8000df0 <App_vSetBleConnectionStatus>
}
 800cd68:	2001      	movs	r0, #1
 800cd6a:	b003      	add	sp, #12
 800cd6c:	bd30      	pop	{r4, r5, pc}
      switch (blecore_evt->ecode)
 800cd6e:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 800cd72:	f240 420a 	movw	r2, #1034	; 0x40a
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d820      	bhi.n	800cdbc <SVCCTL_App_Notification+0xd8>
 800cd7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd7e:	d3bb      	bcc.n	800ccf8 <SVCCTL_App_Notification+0x14>
 800cd80:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800cd84:	2b0a      	cmp	r3, #10
 800cd86:	d8b7      	bhi.n	800ccf8 <SVCCTL_App_Notification+0x14>
 800cd88:	a201      	add	r2, pc, #4	; (adr r2, 800cd90 <SVCCTL_App_Notification+0xac>)
 800cd8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd8e:	bf00      	nop
 800cd90:	0800ce2f 	.word	0x0800ce2f
 800cd94:	0800ce37 	.word	0x0800ce37
 800cd98:	0800ce4d 	.word	0x0800ce4d
 800cd9c:	0800ceb1 	.word	0x0800ceb1
 800cda0:	0800ceb9 	.word	0x0800ceb9
 800cda4:	0800ce65 	.word	0x0800ce65
 800cda8:	0800ccf9 	.word	0x0800ccf9
 800cdac:	0800ce7b 	.word	0x0800ce7b
 800cdb0:	0800ce83 	.word	0x0800ce83
 800cdb4:	0800ce8b 	.word	0x0800ce8b
 800cdb8:	0800ce27 	.word	0x0800ce27
 800cdbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cdc0:	d19a      	bne.n	800ccf8 <SVCCTL_App_Notification+0x14>
          mutex = 1;
 800cdc2:	4b4b      	ldr	r3, [pc, #300]	; (800cef0 <SVCCTL_App_Notification+0x20c>)
 800cdc4:	2201      	movs	r2, #1
 800cdc6:	701a      	strb	r2, [r3, #0]
      break;
 800cdc8:	e796      	b.n	800ccf8 <SVCCTL_App_Notification+0x14>
          APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE \n");
 800cdca:	484a      	ldr	r0, [pc, #296]	; (800cef4 <SVCCTL_App_Notification+0x210>)
 800cdcc:	f006 f968 	bl	80130a0 <puts>
          if (evt_le_phy_update_complete->Status == 0)
 800cdd0:	7923      	ldrb	r3, [r4, #4]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d074      	beq.n	800cec0 <SVCCTL_App_Notification+0x1dc>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status nok \n");
 800cdd6:	4848      	ldr	r0, [pc, #288]	; (800cef8 <SVCCTL_App_Notification+0x214>)
 800cdd8:	f006 f962 	bl	80130a0 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 800cddc:	4b41      	ldr	r3, [pc, #260]	; (800cee4 <SVCCTL_App_Notification+0x200>)
 800cdde:	f10d 0207 	add.w	r2, sp, #7
 800cde2:	8ad8      	ldrh	r0, [r3, #22]
 800cde4:	f10d 0106 	add.w	r1, sp, #6
 800cde8:	f004 ff0a 	bl	8011c00 <hci_le_read_phy>
          if (ret == BLE_STATUS_SUCCESS)
 800cdec:	2800      	cmp	r0, #0
 800cdee:	d16b      	bne.n	800cec8 <SVCCTL_App_Notification+0x1e4>
            APP_DBG_MSG("Read_PHY success \n");
 800cdf0:	4842      	ldr	r0, [pc, #264]	; (800cefc <SVCCTL_App_Notification+0x218>)
 800cdf2:	f006 f955 	bl	80130a0 <puts>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 800cdf6:	f89d 1006 	ldrb.w	r1, [sp, #6]
 800cdfa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cdfe:	2902      	cmp	r1, #2
 800ce00:	d101      	bne.n	800ce06 <SVCCTL_App_Notification+0x122>
 800ce02:	2a02      	cmp	r2, #2
 800ce04:	d068      	beq.n	800ced8 <SVCCTL_App_Notification+0x1f4>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 800ce06:	483e      	ldr	r0, [pc, #248]	; (800cf00 <SVCCTL_App_Notification+0x21c>)
 800ce08:	f006 f8c4 	bl	8012f94 <iprintf>
 800ce0c:	e774      	b.n	800ccf8 <SVCCTL_App_Notification+0x14>
          APP_DBG_MSG("\r\n\r** CONNECTION UPDATE EVENT WITH CLIENT \n");
 800ce0e:	483d      	ldr	r0, [pc, #244]	; (800cf04 <SVCCTL_App_Notification+0x220>)
 800ce10:	f006 f946 	bl	80130a0 <puts>
          break;
 800ce14:	e770      	b.n	800ccf8 <SVCCTL_App_Notification+0x14>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800ce16:	2300      	movs	r3, #0
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 800ce18:	483b      	ldr	r0, [pc, #236]	; (800cf08 <SVCCTL_App_Notification+0x224>)
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800ce1a:	82eb      	strh	r3, [r5, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ce1c:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 800ce20:	f006 f93e 	bl	80130a0 <puts>
 800ce24:	e794      	b.n	800cd50 <SVCCTL_App_Notification+0x6c>
         APP_DBG_MSG("\r\n\r** ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800ce26:	4839      	ldr	r0, [pc, #228]	; (800cf0c <SVCCTL_App_Notification+0x228>)
 800ce28:	f006 f93a 	bl	80130a0 <puts>
          break; /* ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE */    
 800ce2c:	e764      	b.n	800ccf8 <SVCCTL_App_Notification+0x14>
        APP_DBG_MSG("\r\n\r** ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE \n");
 800ce2e:	4838      	ldr	r0, [pc, #224]	; (800cf10 <SVCCTL_App_Notification+0x22c>)
 800ce30:	f006 f936 	bl	80130a0 <puts>
          break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 800ce34:	e760      	b.n	800ccf8 <SVCCTL_App_Notification+0x14>
            APP_DBG_MSG("BLE_CTRL_App_Notification: ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE, pairing_complete->Status = %d\n",pairing_complete->Status);
 800ce36:	79c1      	ldrb	r1, [r0, #7]
 800ce38:	4836      	ldr	r0, [pc, #216]	; (800cf14 <SVCCTL_App_Notification+0x230>)
 800ce3a:	f006 f8ab 	bl	8012f94 <iprintf>
            if (pairing_complete->Status == 0)
 800ce3e:	79e3      	ldrb	r3, [r4, #7]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d145      	bne.n	800ced0 <SVCCTL_App_Notification+0x1ec>
              APP_DBG_MSG("\r\n\r** Pairing OK \n");
 800ce44:	4834      	ldr	r0, [pc, #208]	; (800cf18 <SVCCTL_App_Notification+0x234>)
 800ce46:	f006 f92b 	bl	80130a0 <puts>
 800ce4a:	e755      	b.n	800ccf8 <SVCCTL_App_Notification+0x14>
        APP_DBG_MSG("\r\n\r** ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800ce4c:	4833      	ldr	r0, [pc, #204]	; (800cf1c <SVCCTL_App_Notification+0x238>)
 800ce4e:	f006 f927 	bl	80130a0 <puts>
        aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,123456);
 800ce52:	4b24      	ldr	r3, [pc, #144]	; (800cee4 <SVCCTL_App_Notification+0x200>)
 800ce54:	4932      	ldr	r1, [pc, #200]	; (800cf20 <SVCCTL_App_Notification+0x23c>)
 800ce56:	8ad8      	ldrh	r0, [r3, #22]
 800ce58:	f004 fc16 	bl	8011688 <aci_gap_pass_key_resp>
        APP_DBG_MSG("\r\n\r** aci_gap_pass_key_resp \n");
 800ce5c:	4831      	ldr	r0, [pc, #196]	; (800cf24 <SVCCTL_App_Notification+0x240>)
 800ce5e:	f006 f91f 	bl	80130a0 <puts>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 800ce62:	e749      	b.n	800ccf8 <SVCCTL_App_Notification+0x14>
        APP_DBG_MSG("\r\n\r** ACI_GAP_BOND_LOST_VSEVT_CODE \n");
 800ce64:	4830      	ldr	r0, [pc, #192]	; (800cf28 <SVCCTL_App_Notification+0x244>)
 800ce66:	f006 f91b 	bl	80130a0 <puts>
          aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800ce6a:	4b1e      	ldr	r3, [pc, #120]	; (800cee4 <SVCCTL_App_Notification+0x200>)
 800ce6c:	8ad8      	ldrh	r0, [r3, #22]
 800ce6e:	f004 fcbd 	bl	80117ec <aci_gap_allow_rebond>
        APP_DBG_MSG("\r\n\r** Send allow rebond \n");
 800ce72:	482e      	ldr	r0, [pc, #184]	; (800cf2c <SVCCTL_App_Notification+0x248>)
 800ce74:	f006 f914 	bl	80130a0 <puts>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 800ce78:	e73e      	b.n	800ccf8 <SVCCTL_App_Notification+0x14>
        APP_DBG_MSG("\r\n\r** ACI_GAP_PROC_COMPLETE_VSEVT_CODE \n");
 800ce7a:	482d      	ldr	r0, [pc, #180]	; (800cf30 <SVCCTL_App_Notification+0x24c>)
 800ce7c:	f006 f910 	bl	80130a0 <puts>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800ce80:	e73a      	b.n	800ccf8 <SVCCTL_App_Notification+0x14>
         APP_DBG_MSG("\r\n\r** ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE \n");
 800ce82:	482c      	ldr	r0, [pc, #176]	; (800cf34 <SVCCTL_App_Notification+0x250>)
 800ce84:	f006 f90c 	bl	80130a0 <puts>
          break; /* ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE */
 800ce88:	e736      	b.n	800ccf8 <SVCCTL_App_Notification+0x14>
          APP_DBG_MSG("numeric_value = %ld\n",
 800ce8a:	f8d0 1007 	ldr.w	r1, [r0, #7]
 800ce8e:	482a      	ldr	r0, [pc, #168]	; (800cf38 <SVCCTL_App_Notification+0x254>)
 800ce90:	f006 f880 	bl	8012f94 <iprintf>
          APP_DBG_MSG("Hex_value = %lx\n",
 800ce94:	f8d4 1007 	ldr.w	r1, [r4, #7]
 800ce98:	4828      	ldr	r0, [pc, #160]	; (800cf3c <SVCCTL_App_Notification+0x258>)
 800ce9a:	f006 f87b 	bl	8012f94 <iprintf>
          aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, 1); /* CONFIRM_YES = 1 */
 800ce9e:	4b11      	ldr	r3, [pc, #68]	; (800cee4 <SVCCTL_App_Notification+0x200>)
 800cea0:	2101      	movs	r1, #1
 800cea2:	8ad8      	ldrh	r0, [r3, #22]
 800cea4:	f004 fcc6 	bl	8011834 <aci_gap_numeric_comparison_value_confirm_yesno>
          APP_DBG_MSG("\r\n\r** aci_gap_numeric_comparison_value_confirm_yesno-->YES \n");
 800cea8:	4825      	ldr	r0, [pc, #148]	; (800cf40 <SVCCTL_App_Notification+0x25c>)
 800ceaa:	f006 f8f9 	bl	80130a0 <puts>
          break;
 800ceae:	e723      	b.n	800ccf8 <SVCCTL_App_Notification+0x14>
        APP_DBG_MSG("\r\n\r** ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE \n");
 800ceb0:	4824      	ldr	r0, [pc, #144]	; (800cf44 <SVCCTL_App_Notification+0x260>)
 800ceb2:	f006 f8f5 	bl	80130a0 <puts>
          break; /* ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE */
 800ceb6:	e71f      	b.n	800ccf8 <SVCCTL_App_Notification+0x14>
        APP_DBG_MSG("\r\n\r** ACI_GAP_SLAVE_SECURITY_INITIATED_VSEVT_CODE \n");
 800ceb8:	4823      	ldr	r0, [pc, #140]	; (800cf48 <SVCCTL_App_Notification+0x264>)
 800ceba:	f006 f8f1 	bl	80130a0 <puts>
          break; /* ACI_GAP_SLAVE_SECURITY_INITIATED_VSEVT_CODE */
 800cebe:	e71b      	b.n	800ccf8 <SVCCTL_App_Notification+0x14>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status ok \n");
 800cec0:	4822      	ldr	r0, [pc, #136]	; (800cf4c <SVCCTL_App_Notification+0x268>)
 800cec2:	f006 f8ed 	bl	80130a0 <puts>
 800cec6:	e789      	b.n	800cddc <SVCCTL_App_Notification+0xf8>
            APP_DBG_MSG("Read conf not succeess \n");
 800cec8:	4821      	ldr	r0, [pc, #132]	; (800cf50 <SVCCTL_App_Notification+0x26c>)
 800ceca:	f006 f8e9 	bl	80130a0 <puts>
 800cece:	e713      	b.n	800ccf8 <SVCCTL_App_Notification+0x14>
              APP_DBG_MSG("\r\n\r** Pairing KO \n");
 800ced0:	4820      	ldr	r0, [pc, #128]	; (800cf54 <SVCCTL_App_Notification+0x270>)
 800ced2:	f006 f8e5 	bl	80130a0 <puts>
 800ced6:	e70f      	b.n	800ccf8 <SVCCTL_App_Notification+0x14>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 800ced8:	4611      	mov	r1, r2
 800ceda:	4809      	ldr	r0, [pc, #36]	; (800cf00 <SVCCTL_App_Notification+0x21c>)
 800cedc:	f006 f85a 	bl	8012f94 <iprintf>
 800cee0:	e70a      	b.n	800ccf8 <SVCCTL_App_Notification+0x14>
 800cee2:	bf00      	nop
 800cee4:	20000240 	.word	0x20000240
 800cee8:	08015d54 	.word	0x08015d54
 800ceec:	20000c74 	.word	0x20000c74
 800cef0:	20000c78 	.word	0x20000c78
 800cef4:	08015ca4 	.word	0x08015ca4
 800cef8:	08015ce4 	.word	0x08015ce4
 800cefc:	08015d0c 	.word	0x08015d0c
 800cf00:	08015d20 	.word	0x08015d20
 800cf04:	08015c78 	.word	0x08015c78
 800cf08:	08015c50 	.word	0x08015c50
 800cf0c:	08015edc 	.word	0x08015edc
 800cf10:	08015d98 	.word	0x08015d98
 800cf14:	08015f74 	.word	0x08015f74
 800cf18:	08015fd4 	.word	0x08015fd4
 800cf1c:	08015dc8 	.word	0x08015dc8
 800cf20:	0001e240 	.word	0x0001e240
 800cf24:	08015df0 	.word	0x08015df0
 800cf28:	08015e70 	.word	0x08015e70
 800cf2c:	08015e94 	.word	0x08015e94
 800cf30:	08015ffc 	.word	0x08015ffc
 800cf34:	08015eb0 	.word	0x08015eb0
 800cf38:	08015f0c 	.word	0x08015f0c
 800cf3c:	08015f24 	.word	0x08015f24
 800cf40:	08015f38 	.word	0x08015f38
 800cf44:	08015e10 	.word	0x08015e10
 800cf48:	08015e3c 	.word	0x08015e3c
 800cf4c:	08015cc0 	.word	0x08015cc0
 800cf50:	08015d3c 	.word	0x08015d3c
 800cf54:	08015fe8 	.word	0x08015fe8

0800cf58 <Adv_UpdateData>:
{
 800cf58:	b510      	push	{r4, lr}
	HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800cf5a:	4c19      	ldr	r4, [pc, #100]	; (800cfc0 <Adv_UpdateData+0x68>)
  APP_DBG_MSG("Adv_UpdateData \n");
 800cf5c:	4819      	ldr	r0, [pc, #100]	; (800cfc4 <Adv_UpdateData+0x6c>)
 800cf5e:	f006 f89f 	bl	80130a0 <puts>
	HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800cf62:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
 800cf66:	f7f4 fbaf 	bl	80016c8 <HW_TS_Stop>
	APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
 800cf6a:	f894 1080 	ldrb.w	r1, [r4, #128]	; 0x80
 800cf6e:	4816      	ldr	r0, [pc, #88]	; (800cfc8 <Adv_UpdateData+0x70>)
 800cf70:	f006 f810 	bl	8012f94 <iprintf>
			|| (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800cf74:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
	if ( ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800cf78:	3b01      	subs	r3, #1
 800cf7a:	2b01      	cmp	r3, #1
 800cf7c:	d900      	bls.n	800cf80 <Adv_UpdateData+0x28>
}
 800cf7e:	bd10      	pop	{r4, pc}
		App_vPrepareBleAdvData();
 800cf80:	f7f3 feea 	bl	8000d58 <App_vPrepareBleAdvData>
		App_vBleAdvDataGet(&au8ServiceData[2], 10);
 800cf84:	210a      	movs	r1, #10
 800cf86:	4811      	ldr	r0, [pc, #68]	; (800cfcc <Adv_UpdateData+0x74>)
 800cf88:	f7f3 ff0a 	bl	8000da0 <App_vBleAdvDataGet>
		ret = aci_gap_update_adv_data(sizeof(au8ServiceData), (uint8_t*) au8ServiceData);
 800cf8c:	4910      	ldr	r1, [pc, #64]	; (800cfd0 <Adv_UpdateData+0x78>)
 800cf8e:	200c      	movs	r0, #12
 800cf90:	f004 fbe4 	bl	801175c <aci_gap_update_adv_data>
		if (ret == BLE_STATUS_SUCCESS)
 800cf94:	b968      	cbnz	r0, 800cfb2 <Adv_UpdateData+0x5a>
			APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 800cf96:	480f      	ldr	r0, [pc, #60]	; (800cfd4 <Adv_UpdateData+0x7c>)
 800cf98:	f006 f882 	bl	80130a0 <puts>
			ret = aci_gap_update_adv_data(sizeof(au8ServiceData), (uint8_t*) au8ServiceData);
 800cf9c:	490c      	ldr	r1, [pc, #48]	; (800cfd0 <Adv_UpdateData+0x78>)
 800cf9e:	200c      	movs	r0, #12
 800cfa0:	f004 fbdc 	bl	801175c <aci_gap_update_adv_data>
			HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800cfa4:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
 800cfa8:	490b      	ldr	r1, [pc, #44]	; (800cfd8 <Adv_UpdateData+0x80>)
}
 800cfaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800cfae:	f7f4 bbe9 	b.w	8001784 <HW_TS_Start>
			APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 800cfb2:	4601      	mov	r1, r0
}
 800cfb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 800cfb8:	4808      	ldr	r0, [pc, #32]	; (800cfdc <Adv_UpdateData+0x84>)
 800cfba:	f005 bfeb 	b.w	8012f94 <iprintf>
 800cfbe:	bf00      	nop
 800cfc0:	20000240 	.word	0x20000240
 800cfc4:	08016024 	.word	0x08016024
 800cfc8:	08015b74 	.word	0x08015b74
 800cfcc:	200000f6 	.word	0x200000f6
 800cfd0:	200000f4 	.word	0x200000f4
 800cfd4:	08015b9c 	.word	0x08015b9c
 800cfd8:	0001e046 	.word	0x0001e046
 800cfdc:	08015bc4 	.word	0x08015bc4

0800cfe0 <Ble_GetMacId>:
{
 800cfe0:	b510      	push	{r4, lr}
 800cfe2:	4604      	mov	r4, r0
	memcpy(pu8MacId, BleGetBdAddress(), 6);
 800cfe4:	f7ff fcda 	bl	800c99c <BleGetBdAddress>
 800cfe8:	6803      	ldr	r3, [r0, #0]
 800cfea:	6023      	str	r3, [r4, #0]
 800cfec:	8883      	ldrh	r3, [r0, #4]
 800cfee:	80a3      	strh	r3, [r4, #4]
}
 800cff0:	bd10      	pop	{r4, pc}
 800cff2:	bf00      	nop

0800cff4 <hci_notify_asynch_evt>:
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800cff4:	2100      	movs	r1, #0
 800cff6:	2004      	movs	r0, #4
 800cff8:	f005 be54 	b.w	8012ca4 <UTIL_SEQ_SetTask>

0800cffc <hci_cmd_resp_release>:
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800cffc:	2001      	movs	r0, #1
 800cffe:	f005 be81 	b.w	8012d04 <UTIL_SEQ_SetEvt>
 800d002:	bf00      	nop

0800d004 <hci_cmd_resp_wait>:
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800d004:	2001      	movs	r0, #1
 800d006:	f005 bf43 	b.w	8012e90 <UTIL_SEQ_WaitEvt>
 800d00a:	bf00      	nop

0800d00c <P2PS_STM_App_Notification>:
static void P2PS_APP_LED_BUTTON_context_Init(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800d00c:	b510      	push	{r4, lr}
 800d00e:	7803      	ldrb	r3, [r0, #0]
 800d010:	2b03      	cmp	r3, #3
 800d012:	d822      	bhi.n	800d05a <P2PS_STM_App_Notification+0x4e>
 800d014:	e8df f003 	tbb	[pc, r3]
 800d018:	021c140c 	.word	0x021c140c
/* USER CODE END P2PS_STM_NOTIFY_DISABLED_EVT */
      break;

    case P2PS_STM_WRITE_EVT:
/* USER CODE BEGIN P2PS_STM_WRITE_EVT */
    	APP_DBG_MSG("-- P2P APPLICATION SERVER : P2PS_STM_WRITE_EVT\n");
 800d01c:	4604      	mov	r4, r0
 800d01e:	480f      	ldr	r0, [pc, #60]	; (800d05c <P2PS_STM_App_Notification+0x50>)
 800d020:	f006 f83e 	bl	80130a0 <puts>

//    	if(pNotification->DataTransfered.pPayload[0] == 'N'){
//    		App_vNotifyTaskRun();
//    	}

    	App_vBleReceiveProcessData(pNotification->DataTransfered.pPayload, pNotification->DataTransfered.Length);
 800d024:	7a21      	ldrb	r1, [r4, #8]
 800d026:	6860      	ldr	r0, [r4, #4]
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
}
 800d028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    	App_vBleReceiveProcessData(pNotification->DataTransfered.pPayload, pNotification->DataTransfered.Length);
 800d02c:	f7f3 be36 	b.w	8000c9c <App_vBleReceiveProcessData>
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n"); 
 800d030:	480b      	ldr	r0, [pc, #44]	; (800d060 <P2PS_STM_App_Notification+0x54>)
 800d032:	f006 f835 	bl	80130a0 <puts>
}
 800d036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      APP_DBG_MSG(" \n\r");
 800d03a:	480a      	ldr	r0, [pc, #40]	; (800d064 <P2PS_STM_App_Notification+0x58>)
 800d03c:	f005 bfaa 	b.w	8012f94 <iprintf>
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 800d040:	4809      	ldr	r0, [pc, #36]	; (800d068 <P2PS_STM_App_Notification+0x5c>)
 800d042:	f006 f82d 	bl	80130a0 <puts>
}
 800d046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      APP_DBG_MSG(" \n\r");
 800d04a:	4806      	ldr	r0, [pc, #24]	; (800d064 <P2PS_STM_App_Notification+0x58>)
 800d04c:	f005 bfa2 	b.w	8012f94 <iprintf>
}
 800d050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    	APP_DBG_MSG("-- P2P APPLICATION SERVER : P2PS_STM_READ_EVT\n");
 800d054:	4805      	ldr	r0, [pc, #20]	; (800d06c <P2PS_STM_App_Notification+0x60>)
 800d056:	f006 b823 	b.w	80130a0 <puts>
}
 800d05a:	bd10      	pop	{r4, pc}
 800d05c:	080160c8 	.word	0x080160c8
 800d060:	0801605c 	.word	0x0801605c
 800d064:	08016090 	.word	0x08016090
 800d068:	08016094 	.word	0x08016094
 800d06c:	080160f8 	.word	0x080160f8

0800d070 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800d070:	b508      	push	{r3, lr}
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800d072:	7803      	ldrb	r3, [r0, #0]
 800d074:	b113      	cbz	r3, 800d07c <P2PS_APP_Notification+0xc>
 800d076:	2b01      	cmp	r3, #1
 800d078:	d008      	beq.n	800d08c <P2PS_APP_Notification+0x1c>
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
}
 800d07a:	bd08      	pop	{r3, pc}
	  APP_DBG_MSG("P2PS_APP_Notification : PEER_CONN_HANDLE_EVT\r\n");
 800d07c:	4807      	ldr	r0, [pc, #28]	; (800d09c <P2PS_APP_Notification+0x2c>)
 800d07e:	f006 f80f 	bl	80130a0 <puts>
}
 800d082:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  App_vSetBleConnectionStatus(TRUE);
 800d086:	2001      	movs	r0, #1
 800d088:	f7f3 beb2 	b.w	8000df0 <App_vSetBleConnectionStatus>
      APP_DBG_MSG("P2PS_APP_Notification : PEER_DISCON_HANDLE_EVT\r\n");
 800d08c:	4804      	ldr	r0, [pc, #16]	; (800d0a0 <P2PS_APP_Notification+0x30>)
 800d08e:	f006 f807 	bl	80130a0 <puts>
}
 800d092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      App_vSetBleConnectionStatus(FALSE);
 800d096:	2000      	movs	r0, #0
 800d098:	f7f3 beaa 	b.w	8000df0 <App_vSetBleConnectionStatus>
 800d09c:	08016128 	.word	0x08016128
 800d0a0:	08016158 	.word	0x08016158

0800d0a4 <P2PS_APP_Init>:
void P2PS_APP_Init(void)
{
/* USER CODE BEGIN P2PS_APP_Init */
//  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );

	App_vNotifyCreateTask();
 800d0a4:	f7f3 bd3a 	b.w	8000b1c <App_vNotifyCreateTask>

0800d0a8 <HW_IPCC_Enable>:
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800d0a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
}
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800d0ac:	b082      	sub	sp, #8
 800d0ae:	f8d2 1150 	ldr.w	r1, [r2, #336]	; 0x150
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800d0b2:	4b0f      	ldr	r3, [pc, #60]	; (800d0f0 <HW_IPCC_Enable+0x48>)
 800d0b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d0b8:	f8c2 1150 	str.w	r1, [r2, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800d0bc:	f8d2 2150 	ldr.w	r2, [r2, #336]	; 0x150
 800d0c0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800d0c4:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800d0c6:	9a01      	ldr	r2, [sp, #4]
 800d0c8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800d0cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d0d0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800d0d4:	6a1a      	ldr	r2, [r3, #32]
 800d0d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d0da:	621a      	str	r2, [r3, #32]
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800d0dc:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800d0de:	bf20      	wfe
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800d0e0:	4a04      	ldr	r2, [pc, #16]	; (800d0f4 <HW_IPCC_Enable+0x4c>)
 800d0e2:	68d3      	ldr	r3, [r2, #12]
 800d0e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d0e8:	60d3      	str	r3, [r2, #12]
  LL_PWR_EnableBootC2( );

  return;
}
 800d0ea:	b002      	add	sp, #8
 800d0ec:	4770      	bx	lr
 800d0ee:	bf00      	nop
 800d0f0:	58000800 	.word	0x58000800
 800d0f4:	58000400 	.word	0x58000400

0800d0f8 <HW_IPCC_Init>:
  SET_BIT(RCC->AHB3ENR, Periphs);
 800d0f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000

void HW_IPCC_Init( void )
{
 800d0fc:	b500      	push	{lr}
 800d0fe:	6d11      	ldr	r1, [r2, #80]	; 0x50
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800d100:	4b0d      	ldr	r3, [pc, #52]	; (800d138 <HW_IPCC_Init+0x40>)
 800d102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d106:	6511      	str	r1, [r2, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800d108:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800d10a:	b083      	sub	sp, #12
 800d10c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800d110:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800d112:	9a01      	ldr	r2, [sp, #4]
 800d114:	681a      	ldr	r2, [r3, #0]
 800d116:	f042 0201 	orr.w	r2, r2, #1
 800d11a:	601a      	str	r2, [r3, #0]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800d11c:	681a      	ldr	r2, [r3, #0]
 800d11e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d122:	601a      	str	r2, [r3, #0]
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );

  LL_C1_IPCC_EnableIT_RXO( IPCC );
  LL_C1_IPCC_EnableIT_TXF( IPCC );

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800d124:	202c      	movs	r0, #44	; 0x2c
 800d126:	f000 fa1d 	bl	800d564 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800d12a:	202d      	movs	r0, #45	; 0x2d

  return;
}
 800d12c:	b003      	add	sp, #12
 800d12e:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800d132:	f000 ba17 	b.w	800d564 <HAL_NVIC_EnableIRQ>
 800d136:	bf00      	nop
 800d138:	58000c00 	.word	0x58000c00

0800d13c <HW_IPCC_BLE_Init>:
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800d13c:	4a02      	ldr	r2, [pc, #8]	; (800d148 <HW_IPCC_BLE_Init+0xc>)
 800d13e:	6853      	ldr	r3, [r2, #4]
 800d140:	f023 0301 	bic.w	r3, r3, #1
 800d144:	6053      	str	r3, [r2, #4]
void HW_IPCC_BLE_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );

  return;
}
 800d146:	4770      	bx	lr
 800d148:	58000c00 	.word	0x58000c00

0800d14c <HW_IPCC_BLE_SendCmd>:
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800d14c:	4b08      	ldr	r3, [pc, #32]	; (800d170 <HW_IPCC_BLE_SendCmd+0x24>)
 800d14e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800d152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d156:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800d15a:	6a1a      	ldr	r2, [r3, #32]
 800d15c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d160:	621a      	str	r2, [r3, #32]
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800d162:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800d164:	bf20      	wfe
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800d166:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800d16a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
void HW_IPCC_BLE_SendCmd( void )
{
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );

  return;
}
 800d16e:	4770      	bx	lr
 800d170:	58000800 	.word	0x58000800

0800d174 <HW_IPCC_SYS_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800d174:	4a02      	ldr	r2, [pc, #8]	; (800d180 <HW_IPCC_SYS_Init+0xc>)
 800d176:	6853      	ldr	r3, [r2, #4]
 800d178:	f023 0302 	bic.w	r3, r3, #2
 800d17c:	6053      	str	r3, [r2, #4]
void HW_IPCC_SYS_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );

  return;
}
 800d17e:	4770      	bx	lr
 800d180:	58000c00 	.word	0x58000c00

0800d184 <HW_IPCC_SYS_SendCmd>:
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800d184:	4b0b      	ldr	r3, [pc, #44]	; (800d1b4 <HW_IPCC_SYS_SendCmd+0x30>)
 800d186:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800d18a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d18e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800d192:	6a1a      	ldr	r2, [r3, #32]
 800d194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d198:	621a      	str	r2, [r3, #32]
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800d19a:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800d19c:	bf20      	wfe
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800d19e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d1a2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d1a6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d1aa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d1ae:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
{
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );

  return;
}
 800d1b2:	4770      	bx	lr
 800d1b4:	58000800 	.word	0x58000800

0800d1b8 <HW_IPCC_Tx_Handler>:
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d1b8:	4b1e      	ldr	r3, [pc, #120]	; (800d234 <HW_IPCC_Tx_Handler+0x7c>)
 800d1ba:	68da      	ldr	r2, [r3, #12]
 800d1bc:	0791      	lsls	r1, r2, #30
{
 800d1be:	b510      	push	{r4, lr}
 800d1c0:	d402      	bmi.n	800d1c8 <HW_IPCC_Tx_Handler+0x10>
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800d1c2:	685a      	ldr	r2, [r3, #4]
 800d1c4:	0392      	lsls	r2, r2, #14
 800d1c6:	d50e      	bpl.n	800d1e6 <HW_IPCC_Tx_Handler+0x2e>
 800d1c8:	4c1a      	ldr	r4, [pc, #104]	; (800d234 <HW_IPCC_Tx_Handler+0x7c>)
 800d1ca:	68e3      	ldr	r3, [r4, #12]
 800d1cc:	071b      	lsls	r3, r3, #28
 800d1ce:	d402      	bmi.n	800d1d6 <HW_IPCC_Tx_Handler+0x1e>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800d1d0:	6863      	ldr	r3, [r4, #4]
 800d1d2:	0318      	lsls	r0, r3, #12
 800d1d4:	d50e      	bpl.n	800d1f4 <HW_IPCC_Tx_Handler+0x3c>
 800d1d6:	4b17      	ldr	r3, [pc, #92]	; (800d234 <HW_IPCC_Tx_Handler+0x7c>)
 800d1d8:	68da      	ldr	r2, [r3, #12]
 800d1da:	0691      	lsls	r1, r2, #26
 800d1dc:	d402      	bmi.n	800d1e4 <HW_IPCC_Tx_Handler+0x2c>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800d1de:	685a      	ldr	r2, [r3, #4]
 800d1e0:	0292      	lsls	r2, r2, #10
 800d1e2:	d51f      	bpl.n	800d224 <HW_IPCC_Tx_Handler+0x6c>
}
 800d1e4:	bd10      	pop	{r4, pc}
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d1e6:	685a      	ldr	r2, [r3, #4]
 800d1e8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800d1ec:	605a      	str	r2, [r3, #4]

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );

  HW_IPCC_SYS_CmdEvtNot();
 800d1ee:	f005 fcbd 	bl	8012b6c <HW_IPCC_SYS_CmdEvtNot>
}
 800d1f2:	bd10      	pop	{r4, pc}
 800d1f4:	6863      	ldr	r3, [r4, #4]

static void HW_IPCC_MM_FreeBufHandler( void )
{
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );

  FreeBufCb();
 800d1f6:	4a10      	ldr	r2, [pc, #64]	; (800d238 <HW_IPCC_Tx_Handler+0x80>)
 800d1f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d1fc:	6063      	str	r3, [r4, #4]
 800d1fe:	6813      	ldr	r3, [r2, #0]
 800d200:	4798      	blx	r3
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800d202:	4b0e      	ldr	r3, [pc, #56]	; (800d23c <HW_IPCC_Tx_Handler+0x84>)
 800d204:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800d208:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d20c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800d210:	6a1a      	ldr	r2, [r3, #32]
 800d212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d216:	621a      	str	r2, [r3, #32]
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800d218:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800d21a:	bf20      	wfe
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800d21c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d220:	60a3      	str	r3, [r4, #8]
}
 800d222:	bd10      	pop	{r4, pc}
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d224:	685a      	ldr	r2, [r3, #4]
 800d226:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800d22a:	605a      	str	r2, [r3, #4]
  HW_IPCC_BLE_AclDataAckNot();
 800d22c:	f005 fc6c 	bl	8012b08 <HW_IPCC_BLE_AclDataAckNot>
}
 800d230:	bd10      	pop	{r4, pc}
 800d232:	bf00      	nop
 800d234:	58000c00 	.word	0x58000c00
 800d238:	200005dc 	.word	0x200005dc
 800d23c:	58000800 	.word	0x58000800

0800d240 <HW_IPCC_MM_SendFreeBuf>:
{
 800d240:	b510      	push	{r4, lr}
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d242:	4c0e      	ldr	r4, [pc, #56]	; (800d27c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d244:	68e3      	ldr	r3, [r4, #12]
 800d246:	071b      	lsls	r3, r3, #28
 800d248:	d411      	bmi.n	800d26e <HW_IPCC_MM_SendFreeBuf+0x2e>
    cb();
 800d24a:	4780      	blx	r0
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800d24c:	4b0c      	ldr	r3, [pc, #48]	; (800d280 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800d24e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800d252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d256:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800d25a:	6a1a      	ldr	r2, [r3, #32]
 800d25c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d260:	621a      	str	r2, [r3, #32]
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800d262:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800d264:	bf20      	wfe
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800d266:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d26a:	60a3      	str	r3, [r4, #8]
}
 800d26c:	bd10      	pop	{r4, pc}
    FreeBufCb = cb;
 800d26e:	4b05      	ldr	r3, [pc, #20]	; (800d284 <HW_IPCC_MM_SendFreeBuf+0x44>)
 800d270:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d272:	6863      	ldr	r3, [r4, #4]
 800d274:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800d278:	6063      	str	r3, [r4, #4]
}
 800d27a:	bd10      	pop	{r4, pc}
 800d27c:	58000c00 	.word	0x58000c00
 800d280:	58000800 	.word	0x58000800
 800d284:	200005dc 	.word	0x200005dc

0800d288 <HW_IPCC_TRACES_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800d288:	4a02      	ldr	r2, [pc, #8]	; (800d294 <HW_IPCC_TRACES_Init+0xc>)
 800d28a:	6853      	ldr	r3, [r2, #4]
 800d28c:	f023 0308 	bic.w	r3, r3, #8
 800d290:	6053      	str	r3, [r2, #4]
void HW_IPCC_TRACES_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );

  return;
}
 800d292:	4770      	bx	lr
 800d294:	58000c00 	.word	0x58000c00

0800d298 <HW_IPCC_Rx_Handler>:
{
 800d298:	b510      	push	{r4, lr}
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d29a:	4c12      	ldr	r4, [pc, #72]	; (800d2e4 <HW_IPCC_Rx_Handler+0x4c>)
 800d29c:	69e3      	ldr	r3, [r4, #28]
 800d29e:	079a      	lsls	r2, r3, #30
 800d2a0:	d410      	bmi.n	800d2c4 <HW_IPCC_Rx_Handler+0x2c>
 800d2a2:	4c10      	ldr	r4, [pc, #64]	; (800d2e4 <HW_IPCC_Rx_Handler+0x4c>)
 800d2a4:	69e3      	ldr	r3, [r4, #28]
 800d2a6:	07d8      	lsls	r0, r3, #31
 800d2a8:	d414      	bmi.n	800d2d4 <HW_IPCC_Rx_Handler+0x3c>
 800d2aa:	4c0e      	ldr	r4, [pc, #56]	; (800d2e4 <HW_IPCC_Rx_Handler+0x4c>)
 800d2ac:	69e3      	ldr	r3, [r4, #28]
 800d2ae:	071a      	lsls	r2, r3, #28
 800d2b0:	d400      	bmi.n	800d2b4 <HW_IPCC_Rx_Handler+0x1c>
}
 800d2b2:	bd10      	pop	{r4, pc}
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800d2b4:	6863      	ldr	r3, [r4, #4]
 800d2b6:	071b      	lsls	r3, r3, #28
 800d2b8:	d4fb      	bmi.n	800d2b2 <HW_IPCC_Rx_Handler+0x1a>

static void HW_IPCC_TRACES_EvtHandler( void )
{
  HW_IPCC_TRACES_EvtNot();
 800d2ba:	f005 fcbb 	bl	8012c34 <HW_IPCC_TRACES_EvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 800d2be:	2308      	movs	r3, #8
 800d2c0:	60a3      	str	r3, [r4, #8]
}
 800d2c2:	bd10      	pop	{r4, pc}
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800d2c4:	6863      	ldr	r3, [r4, #4]
 800d2c6:	079b      	lsls	r3, r3, #30
 800d2c8:	d4eb      	bmi.n	800d2a2 <HW_IPCC_Rx_Handler+0xa>
  HW_IPCC_SYS_EvtNot();
 800d2ca:	f005 fc5b 	bl	8012b84 <HW_IPCC_SYS_EvtNot>
 800d2ce:	2302      	movs	r3, #2
 800d2d0:	60a3      	str	r3, [r4, #8]
}
 800d2d2:	bd10      	pop	{r4, pc}
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800d2d4:	6863      	ldr	r3, [r4, #4]
 800d2d6:	07d9      	lsls	r1, r3, #31
 800d2d8:	d4e7      	bmi.n	800d2aa <HW_IPCC_Rx_Handler+0x12>
  HW_IPCC_BLE_RxEvtNot();
 800d2da:	f005 fbfd 	bl	8012ad8 <HW_IPCC_BLE_RxEvtNot>
 800d2de:	2301      	movs	r3, #1
 800d2e0:	60a3      	str	r3, [r4, #8]
}
 800d2e2:	bd10      	pop	{r4, pc}
 800d2e4:	58000c00 	.word	0x58000c00

0800d2e8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800d2e8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d2ea:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d2ec:	3304      	adds	r3, #4

0800d2ee <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d2ee:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d2f0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800d2f2:	d3f9      	bcc.n	800d2e8 <CopyDataInit>
  bx lr
 800d2f4:	4770      	bx	lr

0800d2f6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800d2f6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800d2f8:	3004      	adds	r0, #4

0800d2fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800d2fa:	4288      	cmp	r0, r1
  bcc FillZerobss
 800d2fc:	d3fb      	bcc.n	800d2f6 <FillZerobss>
  bx lr
 800d2fe:	4770      	bx	lr

0800d300 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800d300:	480c      	ldr	r0, [pc, #48]	; (800d334 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800d302:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800d304:	f000 f828 	bl	800d358 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800d308:	480b      	ldr	r0, [pc, #44]	; (800d338 <LoopForever+0x8>)
 800d30a:	490c      	ldr	r1, [pc, #48]	; (800d33c <LoopForever+0xc>)
 800d30c:	4a0c      	ldr	r2, [pc, #48]	; (800d340 <LoopForever+0x10>)
 800d30e:	2300      	movs	r3, #0
 800d310:	f7ff ffed 	bl	800d2ee <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800d314:	480b      	ldr	r0, [pc, #44]	; (800d344 <LoopForever+0x14>)
 800d316:	490c      	ldr	r1, [pc, #48]	; (800d348 <LoopForever+0x18>)
 800d318:	2300      	movs	r3, #0
 800d31a:	f7ff ffee 	bl	800d2fa <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800d31e:	480b      	ldr	r0, [pc, #44]	; (800d34c <LoopForever+0x1c>)
 800d320:	490b      	ldr	r1, [pc, #44]	; (800d350 <LoopForever+0x20>)
 800d322:	2300      	movs	r3, #0
 800d324:	f7ff ffe9 	bl	800d2fa <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800d328:	f005 fdfa 	bl	8012f20 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800d32c:	f7f4 fd56 	bl	8001ddc <main>

0800d330 <LoopForever>:

LoopForever:
  b LoopForever
 800d330:	e7fe      	b.n	800d330 <LoopForever>
 800d332:	0000      	.short	0x0000
  ldr   r0, =_estack
 800d334:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 800d338:	20000008 	.word	0x20000008
 800d33c:	200001a4 	.word	0x200001a4
 800d340:	0801689c 	.word	0x0801689c
  INIT_BSS _sbss, _ebss
 800d344:	200002fc 	.word	0x200002fc
 800d348:	20000c90 	.word	0x20000c90
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800d34c:	200301e0 	.word	0x200301e0
 800d350:	20031fbb 	.word	0x20031fbb

0800d354 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800d354:	e7fe      	b.n	800d354 <ADC1_IRQHandler>
	...

0800d358 <SystemInit>:
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800d358:	4915      	ldr	r1, [pc, #84]	; (800d3b0 <SystemInit+0x58>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800d35a:	4a16      	ldr	r2, [pc, #88]	; (800d3b4 <SystemInit+0x5c>)
{
 800d35c:	b430      	push	{r4, r5}
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800d35e:	2400      	movs	r4, #0
 800d360:	608c      	str	r4, [r1, #8]
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800d362:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800d366:	4d14      	ldr	r5, [pc, #80]	; (800d3b8 <SystemInit+0x60>)
  RCC->CR |= RCC_CR_MSION;
 800d368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800d36c:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
 800d370:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_MSION;
 800d374:	6819      	ldr	r1, [r3, #0]
  RCC->CFGR = 0x00070000U;
 800d376:	f44f 20e0 	mov.w	r0, #458752	; 0x70000
  RCC->CR |= RCC_CR_MSION;
 800d37a:	f041 0101 	orr.w	r1, r1, #1
 800d37e:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00070000U;
 800d380:	6098      	str	r0, [r3, #8]
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800d382:	6819      	ldr	r1, [r3, #0]
 800d384:	400a      	ands	r2, r1
 800d386:	601a      	str	r2, [r3, #0]
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800d388:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800d38c:	f022 0205 	bic.w	r2, r2, #5
 800d390:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800d394:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800d398:	f022 0201 	bic.w	r2, r2, #1
 800d39c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  RCC->PLLCFGR = 0x22041000U;
 800d3a0:	60dd      	str	r5, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800d3a2:	681a      	ldr	r2, [r3, #0]
 800d3a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d3a8:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800d3aa:	619c      	str	r4, [r3, #24]
}
 800d3ac:	bc30      	pop	{r4, r5}
 800d3ae:	4770      	bx	lr
 800d3b0:	e000ed00 	.word	0xe000ed00
 800d3b4:	faf6fefb 	.word	0xfaf6fefb
 800d3b8:	22041000 	.word	0x22041000

0800d3bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d3bc:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0U)
 800d3be:	4c10      	ldr	r4, [pc, #64]	; (800d400 <HAL_InitTick+0x44>)
 800d3c0:	7823      	ldrb	r3, [r4, #0]
 800d3c2:	b90b      	cbnz	r3, 800d3c8 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800d3c4:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800d3c6:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 800d3c8:	4605      	mov	r5, r0
 800d3ca:	f001 fbb5 	bl	800eb38 <HAL_RCC_GetHCLKFreq>
 800d3ce:	7822      	ldrb	r2, [r4, #0]
 800d3d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d3d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3d8:	fbb0 f0f3 	udiv	r0, r0, r3
 800d3dc:	f000 f8f0 	bl	800d5c0 <HAL_SYSTICK_Config>
 800d3e0:	4604      	mov	r4, r0
 800d3e2:	2800      	cmp	r0, #0
 800d3e4:	d1ee      	bne.n	800d3c4 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d3e6:	2d0f      	cmp	r5, #15
 800d3e8:	d8ec      	bhi.n	800d3c4 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800d3ea:	4602      	mov	r2, r0
 800d3ec:	4629      	mov	r1, r5
 800d3ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f2:	f000 f86d 	bl	800d4d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800d3f6:	4b03      	ldr	r3, [pc, #12]	; (800d404 <HAL_InitTick+0x48>)
 800d3f8:	4620      	mov	r0, r4
 800d3fa:	601d      	str	r5, [r3, #0]
}
 800d3fc:	bd38      	pop	{r3, r4, r5, pc}
 800d3fe:	bf00      	nop
 800d400:	2000012c 	.word	0x2000012c
 800d404:	20000130 	.word	0x20000130

0800d408 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800d408:	4a0a      	ldr	r2, [pc, #40]	; (800d434 <HAL_Init+0x2c>)
 800d40a:	6813      	ldr	r3, [r2, #0]
 800d40c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 800d410:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d412:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800d414:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d416:	f000 f83d 	bl	800d494 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800d41a:	2000      	movs	r0, #0
 800d41c:	f7ff ffce 	bl	800d3bc <HAL_InitTick>
 800d420:	b110      	cbz	r0, 800d428 <HAL_Init+0x20>
    status = HAL_ERROR;
 800d422:	2401      	movs	r4, #1
}
 800d424:	4620      	mov	r0, r4
 800d426:	bd10      	pop	{r4, pc}
 800d428:	4604      	mov	r4, r0
    HAL_MspInit();
 800d42a:	f7f4 fd63 	bl	8001ef4 <HAL_MspInit>
}
 800d42e:	4620      	mov	r0, r4
 800d430:	bd10      	pop	{r4, pc}
 800d432:	bf00      	nop
 800d434:	58004000 	.word	0x58004000

0800d438 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800d438:	4a03      	ldr	r2, [pc, #12]	; (800d448 <HAL_IncTick+0x10>)
 800d43a:	4b04      	ldr	r3, [pc, #16]	; (800d44c <HAL_IncTick+0x14>)
 800d43c:	6811      	ldr	r1, [r2, #0]
 800d43e:	781b      	ldrb	r3, [r3, #0]
 800d440:	440b      	add	r3, r1
 800d442:	6013      	str	r3, [r2, #0]
}
 800d444:	4770      	bx	lr
 800d446:	bf00      	nop
 800d448:	20000c7c 	.word	0x20000c7c
 800d44c:	2000012c 	.word	0x2000012c

0800d450 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800d450:	4b01      	ldr	r3, [pc, #4]	; (800d458 <HAL_GetTick+0x8>)
 800d452:	6818      	ldr	r0, [r3, #0]
}
 800d454:	4770      	bx	lr
 800d456:	bf00      	nop
 800d458:	20000c7c 	.word	0x20000c7c

0800d45c <HAL_GetTickPrio>:
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
 800d45c:	4b01      	ldr	r3, [pc, #4]	; (800d464 <HAL_GetTickPrio+0x8>)
}
 800d45e:	6818      	ldr	r0, [r3, #0]
 800d460:	4770      	bx	lr
 800d462:	bf00      	nop
 800d464:	20000130 	.word	0x20000130

0800d468 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
  return uwTickFreq;
 800d468:	4b01      	ldr	r3, [pc, #4]	; (800d470 <HAL_GetTickFreq+0x8>)
}
 800d46a:	7818      	ldrb	r0, [r3, #0]
 800d46c:	4770      	bx	lr
 800d46e:	bf00      	nop
 800d470:	2000012c 	.word	0x2000012c

0800d474 <HAL_DBGMCU_EnableDBGSleepMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800d474:	4a02      	ldr	r2, [pc, #8]	; (800d480 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 800d476:	6853      	ldr	r3, [r2, #4]
 800d478:	f043 0301 	orr.w	r3, r3, #1
 800d47c:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 800d47e:	4770      	bx	lr
 800d480:	e0042000 	.word	0xe0042000

0800d484 <HAL_DBGMCU_EnableDBGStopMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800d484:	4a02      	ldr	r2, [pc, #8]	; (800d490 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 800d486:	6853      	ldr	r3, [r2, #4]
 800d488:	f043 0302 	orr.w	r3, r3, #2
 800d48c:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 800d48e:	4770      	bx	lr
 800d490:	e0042000 	.word	0xe0042000

0800d494 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800d494:	1ec3      	subs	r3, r0, #3
 800d496:	2b04      	cmp	r3, #4
{
 800d498:	b510      	push	{r4, lr}
 800d49a:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800d49c:	d80e      	bhi.n	800d4bc <HAL_NVIC_SetPriorityGrouping+0x28>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d49e:	490a      	ldr	r1, [pc, #40]	; (800d4c8 <HAL_NVIC_SetPriorityGrouping+0x34>)
 800d4a0:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d4a2:	0223      	lsls	r3, r4, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d4a4:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d4a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d4ac:	4014      	ands	r4, r2
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d4ae:	4323      	orrs	r3, r4
  reg_value  =  (reg_value                                   |
 800d4b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800d4b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800d4b8:	60cb      	str	r3, [r1, #12]

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800d4ba:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800d4bc:	4803      	ldr	r0, [pc, #12]	; (800d4cc <HAL_NVIC_SetPriorityGrouping+0x38>)
 800d4be:	218c      	movs	r1, #140	; 0x8c
 800d4c0:	f7f4 fd16 	bl	8001ef0 <assert_failed>
 800d4c4:	e7eb      	b.n	800d49e <HAL_NVIC_SetPriorityGrouping+0xa>
 800d4c6:	bf00      	nop
 800d4c8:	e000ed00 	.word	0xe000ed00
 800d4cc:	08016228 	.word	0x08016228

0800d4d0 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800d4d0:	2a0f      	cmp	r2, #15
{
 800d4d2:	b570      	push	{r4, r5, r6, lr}
 800d4d4:	4616      	mov	r6, r2
 800d4d6:	4605      	mov	r5, r0
 800d4d8:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800d4da:	d837      	bhi.n	800d54c <HAL_NVIC_SetPriority+0x7c>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800d4dc:	2c0f      	cmp	r4, #15
 800d4de:	d830      	bhi.n	800d542 <HAL_NVIC_SetPriority+0x72>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d4e0:	4b1d      	ldr	r3, [pc, #116]	; (800d558 <HAL_NVIC_SetPriority+0x88>)
 800d4e2:	68db      	ldr	r3, [r3, #12]
 800d4e4:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d4e8:	f1c3 0007 	rsb	r0, r3, #7
 800d4ec:	2804      	cmp	r0, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d4ee:	f103 0204 	add.w	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d4f2:	bf28      	it	cs
 800d4f4:	2004      	movcs	r0, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d4f6:	2a06      	cmp	r2, #6
 800d4f8:	d918      	bls.n	800d52c <HAL_NVIC_SetPriority+0x5c>
 800d4fa:	3b03      	subs	r3, #3
 800d4fc:	f04f 32ff 	mov.w	r2, #4294967295
 800d500:	409a      	lsls	r2, r3
 800d502:	ea26 0602 	bic.w	r6, r6, r2

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d506:	f04f 31ff 	mov.w	r1, #4294967295
 800d50a:	4081      	lsls	r1, r0
 800d50c:	ea24 0401 	bic.w	r4, r4, r1
 800d510:	409c      	lsls	r4, r3
  if ((int32_t)(IRQn) >= 0)
 800d512:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d514:	ea44 0406 	orr.w	r4, r4, r6
  if ((int32_t)(IRQn) >= 0)
 800d518:	db0b      	blt.n	800d532 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d51a:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 800d51e:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 800d522:	0124      	lsls	r4, r4, #4
 800d524:	b2e4      	uxtb	r4, r4
 800d526:	f885 4300 	strb.w	r4, [r5, #768]	; 0x300

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800d52a:	bd70      	pop	{r4, r5, r6, pc}
 800d52c:	2600      	movs	r6, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d52e:	4633      	mov	r3, r6
 800d530:	e7e9      	b.n	800d506 <HAL_NVIC_SetPriority+0x36>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d532:	4b0a      	ldr	r3, [pc, #40]	; (800d55c <HAL_NVIC_SetPriority+0x8c>)
 800d534:	f005 050f 	and.w	r5, r5, #15
 800d538:	0124      	lsls	r4, r4, #4
 800d53a:	442b      	add	r3, r5
 800d53c:	b2e4      	uxtb	r4, r4
 800d53e:	761c      	strb	r4, [r3, #24]
 800d540:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800d542:	4807      	ldr	r0, [pc, #28]	; (800d560 <HAL_NVIC_SetPriority+0x90>)
 800d544:	21a5      	movs	r1, #165	; 0xa5
 800d546:	f7f4 fcd3 	bl	8001ef0 <assert_failed>
 800d54a:	e7c9      	b.n	800d4e0 <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800d54c:	4804      	ldr	r0, [pc, #16]	; (800d560 <HAL_NVIC_SetPriority+0x90>)
 800d54e:	21a4      	movs	r1, #164	; 0xa4
 800d550:	f7f4 fcce 	bl	8001ef0 <assert_failed>
 800d554:	e7c2      	b.n	800d4dc <HAL_NVIC_SetPriority+0xc>
 800d556:	bf00      	nop
 800d558:	e000ed00 	.word	0xe000ed00
 800d55c:	e000ecfc 	.word	0xe000ecfc
 800d560:	08016228 	.word	0x08016228

0800d564 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800d564:	2800      	cmp	r0, #0
 800d566:	db08      	blt.n	800d57a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d568:	4a06      	ldr	r2, [pc, #24]	; (800d584 <HAL_NVIC_EnableIRQ+0x20>)
 800d56a:	f000 011f 	and.w	r1, r0, #31
 800d56e:	2301      	movs	r3, #1
 800d570:	0940      	lsrs	r0, r0, #5
 800d572:	408b      	lsls	r3, r1
 800d574:	f842 3020 	str.w	r3, [r2, r0, lsl #2]

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800d578:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800d57a:	4803      	ldr	r0, [pc, #12]	; (800d588 <HAL_NVIC_EnableIRQ+0x24>)
 800d57c:	21b6      	movs	r1, #182	; 0xb6
 800d57e:	f7f4 bcb7 	b.w	8001ef0 <assert_failed>
 800d582:	bf00      	nop
 800d584:	e000e100 	.word	0xe000e100
 800d588:	08016228 	.word	0x08016228

0800d58c <HAL_NVIC_DisableIRQ>:
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800d58c:	2800      	cmp	r0, #0
 800d58e:	db0e      	blt.n	800d5ae <HAL_NVIC_DisableIRQ+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d590:	0943      	lsrs	r3, r0, #5
 800d592:	4909      	ldr	r1, [pc, #36]	; (800d5b8 <HAL_NVIC_DisableIRQ+0x2c>)
 800d594:	3320      	adds	r3, #32
 800d596:	2201      	movs	r2, #1
 800d598:	f000 001f 	and.w	r0, r0, #31
 800d59c:	fa02 f000 	lsl.w	r0, r2, r0
 800d5a0:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800d5a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d5a8:	f3bf 8f6f 	isb	sy

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800d5ac:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800d5ae:	4803      	ldr	r0, [pc, #12]	; (800d5bc <HAL_NVIC_DisableIRQ+0x30>)
 800d5b0:	21c6      	movs	r1, #198	; 0xc6
 800d5b2:	f7f4 bc9d 	b.w	8001ef0 <assert_failed>
 800d5b6:	bf00      	nop
 800d5b8:	e000e100 	.word	0xe000e100
 800d5bc:	08016228 	.word	0x08016228

0800d5c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800d5c0:	3801      	subs	r0, #1
 800d5c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800d5c6:	d20e      	bcs.n	800d5e6 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d5c8:	4b08      	ldr	r3, [pc, #32]	; (800d5ec <HAL_SYSTICK_Config+0x2c>)
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800d5ca:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d5cc:	4c08      	ldr	r4, [pc, #32]	; (800d5f0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d5ce:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d5d0:	20f0      	movs	r0, #240	; 0xf0
 800d5d2:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d5d6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d5d8:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800d5da:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d5dc:	609a      	str	r2, [r3, #8]
  return SysTick_Config(TicksNumb);
}
 800d5de:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d5e2:	6019      	str	r1, [r3, #0]
 800d5e4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800d5e6:	2001      	movs	r0, #1
 800d5e8:	4770      	bx	lr
 800d5ea:	bf00      	nop
 800d5ec:	e000e010 	.word	0xe000e010
 800d5f0:	e000ed00 	.word	0xe000ed00

0800d5f4 <HAL_NVIC_SetPendingIRQ>:
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800d5f4:	2800      	cmp	r0, #0
 800d5f6:	db0a      	blt.n	800d60e <HAL_NVIC_SetPendingIRQ+0x1a>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d5f8:	0943      	lsrs	r3, r0, #5
 800d5fa:	4907      	ldr	r1, [pc, #28]	; (800d618 <HAL_NVIC_SetPendingIRQ+0x24>)
 800d5fc:	3340      	adds	r3, #64	; 0x40
 800d5fe:	f000 001f 	and.w	r0, r0, #31
 800d602:	2201      	movs	r2, #1
 800d604:	fa02 f000 	lsl.w	r0, r2, r0
 800d608:	f841 0023 	str.w	r0, [r1, r3, lsl #2]

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
}
 800d60c:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800d60e:	4803      	ldr	r0, [pc, #12]	; (800d61c <HAL_NVIC_SetPendingIRQ+0x28>)
 800d610:	f240 1127 	movw	r1, #295	; 0x127
 800d614:	f7f4 bc6c 	b.w	8001ef0 <assert_failed>
 800d618:	e000e100 	.word	0xe000e100
 800d61c:	08016228 	.word	0x08016228

0800d620 <HAL_NVIC_ClearPendingIRQ>:
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800d620:	2800      	cmp	r0, #0
 800d622:	db0a      	blt.n	800d63a <HAL_NVIC_ClearPendingIRQ+0x1a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d624:	0943      	lsrs	r3, r0, #5
 800d626:	4907      	ldr	r1, [pc, #28]	; (800d644 <HAL_NVIC_ClearPendingIRQ+0x24>)
 800d628:	3360      	adds	r3, #96	; 0x60
 800d62a:	f000 001f 	and.w	r0, r0, #31
 800d62e:	2201      	movs	r2, #1
 800d630:	fa02 f000 	lsl.w	r0, r2, r0
 800d634:	f841 0023 	str.w	r0, [r1, r3, lsl #2]

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 800d638:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800d63a:	4803      	ldr	r0, [pc, #12]	; (800d648 <HAL_NVIC_ClearPendingIRQ+0x28>)
 800d63c:	f240 1149 	movw	r1, #329	; 0x149
 800d640:	f7f4 bc56 	b.w	8001ef0 <assert_failed>
 800d644:	e000e100 	.word	0xe000e100
 800d648:	08016228 	.word	0x08016228

0800d64c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800d64c:	2800      	cmp	r0, #0
 800d64e:	f000 80e8 	beq.w	800d822 <HAL_DMA_Init+0x1d6>
{
 800d652:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800d654:	6803      	ldr	r3, [r0, #0]
 800d656:	4a74      	ldr	r2, [pc, #464]	; (800d828 <HAL_DMA_Init+0x1dc>)
 800d658:	4293      	cmp	r3, r2
{
 800d65a:	b083      	sub	sp, #12
 800d65c:	4604      	mov	r4, r0
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800d65e:	d015      	beq.n	800d68c <HAL_DMA_Init+0x40>
 800d660:	3214      	adds	r2, #20
 800d662:	4293      	cmp	r3, r2
 800d664:	d012      	beq.n	800d68c <HAL_DMA_Init+0x40>
 800d666:	3214      	adds	r2, #20
 800d668:	4293      	cmp	r3, r2
 800d66a:	d00f      	beq.n	800d68c <HAL_DMA_Init+0x40>
 800d66c:	3214      	adds	r2, #20
 800d66e:	4293      	cmp	r3, r2
 800d670:	d00c      	beq.n	800d68c <HAL_DMA_Init+0x40>
 800d672:	3214      	adds	r2, #20
 800d674:	4293      	cmp	r3, r2
 800d676:	d009      	beq.n	800d68c <HAL_DMA_Init+0x40>
 800d678:	3214      	adds	r2, #20
 800d67a:	4293      	cmp	r3, r2
 800d67c:	d006      	beq.n	800d68c <HAL_DMA_Init+0x40>
 800d67e:	3214      	adds	r2, #20
 800d680:	4293      	cmp	r3, r2
 800d682:	d003      	beq.n	800d68c <HAL_DMA_Init+0x40>
 800d684:	4869      	ldr	r0, [pc, #420]	; (800d82c <HAL_DMA_Init+0x1e0>)
 800d686:	21a2      	movs	r1, #162	; 0xa2
 800d688:	f7f4 fc32 	bl	8001ef0 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800d68c:	68a3      	ldr	r3, [r4, #8]
 800d68e:	f033 0210 	bics.w	r2, r3, #16
 800d692:	f040 8084 	bne.w	800d79e <HAL_DMA_Init+0x152>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800d696:	68e3      	ldr	r3, [r4, #12]
 800d698:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 800d69c:	f040 808c 	bne.w	800d7b8 <HAL_DMA_Init+0x16c>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800d6a0:	6923      	ldr	r3, [r4, #16]
 800d6a2:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800d6a6:	f040 8090 	bne.w	800d7ca <HAL_DMA_Init+0x17e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800d6aa:	6963      	ldr	r3, [r4, #20]
 800d6ac:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800d6b0:	d003      	beq.n	800d6ba <HAL_DMA_Init+0x6e>
 800d6b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d6b6:	f040 80a0 	bne.w	800d7fa <HAL_DMA_Init+0x1ae>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800d6ba:	69a3      	ldr	r3, [r4, #24]
 800d6bc:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800d6c0:	d003      	beq.n	800d6ca <HAL_DMA_Init+0x7e>
 800d6c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d6c6:	f040 80a2 	bne.w	800d80e <HAL_DMA_Init+0x1c2>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800d6ca:	69e3      	ldr	r3, [r4, #28]
 800d6cc:	f033 0320 	bics.w	r3, r3, #32
 800d6d0:	d003      	beq.n	800d6da <HAL_DMA_Init+0x8e>
 800d6d2:	4856      	ldr	r0, [pc, #344]	; (800d82c <HAL_DMA_Init+0x1e0>)
 800d6d4:	21a8      	movs	r1, #168	; 0xa8
 800d6d6:	f7f4 fc0b 	bl	8001ef0 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800d6da:	6a23      	ldr	r3, [r4, #32]
 800d6dc:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800d6e0:	f040 8086 	bne.w	800d7f0 <HAL_DMA_Init+0x1a4>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 800d6e4:	6863      	ldr	r3, [r4, #4]
 800d6e6:	2b28      	cmp	r3, #40	; 0x28
 800d6e8:	d87d      	bhi.n	800d7e6 <HAL_DMA_Init+0x19a>
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800d6ea:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800d6ee:	6821      	ldr	r1, [r4, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d6f0:	6925      	ldr	r5, [r4, #16]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800d6f2:	4f4f      	ldr	r7, [pc, #316]	; (800d830 <HAL_DMA_Init+0x1e4>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d6f4:	6962      	ldr	r2, [r4, #20]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800d6f6:	4e4f      	ldr	r6, [pc, #316]	; (800d834 <HAL_DMA_Init+0x1e8>)
  tmp |=  hdma->Init.Direction        |
 800d6f8:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d6fa:	432b      	orrs	r3, r5
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800d6fc:	440f      	add	r7, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d6fe:	4313      	orrs	r3, r2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800d700:	fba6 2707 	umull	r2, r7, r6, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d704:	69e2      	ldr	r2, [r4, #28]
 800d706:	9201      	str	r2, [sp, #4]
 800d708:	69a2      	ldr	r2, [r4, #24]
  hdma->State = HAL_DMA_STATE_BUSY;
 800d70a:	2502      	movs	r5, #2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d70c:	4313      	orrs	r3, r2
 800d70e:	9a01      	ldr	r2, [sp, #4]
  hdma->State = HAL_DMA_STATE_BUSY;
 800d710:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 800d714:	680d      	ldr	r5, [r1, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d716:	4313      	orrs	r3, r2
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800d718:	b2ca      	uxtb	r2, r1
 800d71a:	3a08      	subs	r2, #8
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800d71c:	f425 4cff 	bic.w	ip, r5, #32640	; 0x7f80
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800d720:	093f      	lsrs	r7, r7, #4
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800d722:	fba6 5202 	umull	r5, r2, r6, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 800d726:	6a25      	ldr	r5, [r4, #32]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800d728:	00bf      	lsls	r7, r7, #2
          hdma->Init.Mode                | hdma->Init.Priority;
 800d72a:	432b      	orrs	r3, r5
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800d72c:	6467      	str	r7, [r4, #68]	; 0x44
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800d72e:	f107 4580 	add.w	r5, r7, #1073741824	; 0x40000000
  hdma->DmaBaseAddress = DMA1;
 800d732:	4f41      	ldr	r7, [pc, #260]	; (800d838 <HAL_DMA_Init+0x1ec>)
 800d734:	6427      	str	r7, [r4, #64]	; 0x40
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800d736:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800d73a:	f3c2 1204 	ubfx	r2, r2, #4, #5
 800d73e:	2601      	movs	r6, #1
  tmp |=  hdma->Init.Direction        |
 800d740:	ea43 030c 	orr.w	r3, r3, ip
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800d744:	f505 3502 	add.w	r5, r5, #133120	; 0x20800
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800d748:	fa06 f202 	lsl.w	r2, r6, r2
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800d74c:	f507 6708 	add.w	r7, r7, #2176	; 0x880
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800d750:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 800d754:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800d756:	e9c4 7213 	strd	r7, r2, [r4, #76]	; 0x4c
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800d75a:	64a5      	str	r5, [r4, #72]	; 0x48
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800d75c:	d03a      	beq.n	800d7d4 <HAL_DMA_Init+0x188>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800d75e:	6861      	ldr	r1, [r4, #4]
 800d760:	f001 033f 	and.w	r3, r1, #63	; 0x3f
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800d764:	3901      	subs	r1, #1
 800d766:	2903      	cmp	r1, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800d768:	602b      	str	r3, [r5, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d76a:	607a      	str	r2, [r7, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800d76c:	d836      	bhi.n	800d7dc <HAL_DMA_Init+0x190>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800d76e:	4a33      	ldr	r2, [pc, #204]	; (800d83c <HAL_DMA_Init+0x1f0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800d770:	4933      	ldr	r1, [pc, #204]	; (800d840 <HAL_DMA_Init+0x1f4>)
 800d772:	65a1      	str	r1, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800d774:	441a      	add	r2, r3

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800d776:	3b01      	subs	r3, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800d778:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800d77a:	f003 0303 	and.w	r3, r3, #3
 800d77e:	fa06 f303 	lsl.w	r3, r6, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800d782:	2000      	movs	r0, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800d784:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800d786:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800d788:	6010      	str	r0, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d78a:	604b      	str	r3, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d78c:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 800d78e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d790:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 800d792:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 800d796:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
 800d79a:	b003      	add	sp, #12
 800d79c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800d79e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d7a2:	f43f af78 	beq.w	800d696 <HAL_DMA_Init+0x4a>
 800d7a6:	4821      	ldr	r0, [pc, #132]	; (800d82c <HAL_DMA_Init+0x1e0>)
 800d7a8:	21a3      	movs	r1, #163	; 0xa3
 800d7aa:	f7f4 fba1 	bl	8001ef0 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800d7ae:	68e3      	ldr	r3, [r4, #12]
 800d7b0:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 800d7b4:	f43f af74 	beq.w	800d6a0 <HAL_DMA_Init+0x54>
 800d7b8:	481c      	ldr	r0, [pc, #112]	; (800d82c <HAL_DMA_Init+0x1e0>)
 800d7ba:	21a4      	movs	r1, #164	; 0xa4
 800d7bc:	f7f4 fb98 	bl	8001ef0 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800d7c0:	6923      	ldr	r3, [r4, #16]
 800d7c2:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800d7c6:	f43f af70 	beq.w	800d6aa <HAL_DMA_Init+0x5e>
 800d7ca:	4818      	ldr	r0, [pc, #96]	; (800d82c <HAL_DMA_Init+0x1e0>)
 800d7cc:	21a5      	movs	r1, #165	; 0xa5
 800d7ce:	f7f4 fb8f 	bl	8001ef0 <assert_failed>
 800d7d2:	e76a      	b.n	800d6aa <HAL_DMA_Init+0x5e>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800d7d8:	602b      	str	r3, [r5, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d7da:	607a      	str	r2, [r7, #4]
    hdma->DMAmuxRequestGen = 0U;
 800d7dc:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 800d7de:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800d7e2:	65e3      	str	r3, [r4, #92]	; 0x5c
 800d7e4:	e7d2      	b.n	800d78c <HAL_DMA_Init+0x140>
  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 800d7e6:	4811      	ldr	r0, [pc, #68]	; (800d82c <HAL_DMA_Init+0x1e0>)
 800d7e8:	21ab      	movs	r1, #171	; 0xab
 800d7ea:	f7f4 fb81 	bl	8001ef0 <assert_failed>
 800d7ee:	e77c      	b.n	800d6ea <HAL_DMA_Init+0x9e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800d7f0:	480e      	ldr	r0, [pc, #56]	; (800d82c <HAL_DMA_Init+0x1e0>)
 800d7f2:	21a9      	movs	r1, #169	; 0xa9
 800d7f4:	f7f4 fb7c 	bl	8001ef0 <assert_failed>
 800d7f8:	e774      	b.n	800d6e4 <HAL_DMA_Init+0x98>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800d7fa:	480c      	ldr	r0, [pc, #48]	; (800d82c <HAL_DMA_Init+0x1e0>)
 800d7fc:	21a6      	movs	r1, #166	; 0xa6
 800d7fe:	f7f4 fb77 	bl	8001ef0 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800d802:	69a3      	ldr	r3, [r4, #24]
 800d804:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800d808:	f43f af5f 	beq.w	800d6ca <HAL_DMA_Init+0x7e>
 800d80c:	e759      	b.n	800d6c2 <HAL_DMA_Init+0x76>
 800d80e:	4807      	ldr	r0, [pc, #28]	; (800d82c <HAL_DMA_Init+0x1e0>)
 800d810:	21a7      	movs	r1, #167	; 0xa7
 800d812:	f7f4 fb6d 	bl	8001ef0 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800d816:	69e3      	ldr	r3, [r4, #28]
 800d818:	f033 0320 	bics.w	r3, r3, #32
 800d81c:	f43f af5d 	beq.w	800d6da <HAL_DMA_Init+0x8e>
 800d820:	e757      	b.n	800d6d2 <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 800d822:	2001      	movs	r0, #1
}
 800d824:	4770      	bx	lr
 800d826:	bf00      	nop
 800d828:	40020008 	.word	0x40020008
 800d82c:	08016298 	.word	0x08016298
 800d830:	bffdfff8 	.word	0xbffdfff8
 800d834:	cccccccd 	.word	0xcccccccd
 800d838:	40020000 	.word	0x40020000
 800d83c:	1000823f 	.word	0x1000823f
 800d840:	40020940 	.word	0x40020940

0800d844 <HAL_DMA_Start_IT>:
{
 800d844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800d848:	1e5e      	subs	r6, r3, #1
{
 800d84a:	461d      	mov	r5, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800d84c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800d850:	429e      	cmp	r6, r3
{
 800d852:	4604      	mov	r4, r0
 800d854:	4688      	mov	r8, r1
 800d856:	4617      	mov	r7, r2
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800d858:	d84d      	bhi.n	800d8f6 <HAL_DMA_Start_IT+0xb2>
  __HAL_LOCK(hdma);
 800d85a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800d85e:	2b01      	cmp	r3, #1
 800d860:	d052      	beq.n	800d908 <HAL_DMA_Start_IT+0xc4>
  if (HAL_DMA_STATE_READY == hdma->State)
 800d862:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
  __HAL_LOCK(hdma);
 800d866:	2201      	movs	r2, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 800d868:	4293      	cmp	r3, r2
  __HAL_LOCK(hdma);
 800d86a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 800d86e:	d005      	beq.n	800d87c <HAL_DMA_Start_IT+0x38>
    __HAL_UNLOCK(hdma);
 800d870:	2300      	movs	r3, #0
 800d872:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 800d876:	2002      	movs	r0, #2
}
 800d878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_DMA_DISABLE(hdma);
 800d87c:	6820      	ldr	r0, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d87e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    hdma->State = HAL_DMA_STATE_BUSY;
 800d880:	2202      	movs	r2, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d882:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800d884:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d888:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800d88a:	6802      	ldr	r2, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d88c:	e9d4 6314 	ldrd	r6, r3, [r4, #80]	; 0x50
    __HAL_DMA_DISABLE(hdma);
 800d890:	f022 0201 	bic.w	r2, r2, #1
 800d894:	6002      	str	r2, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d896:	604e      	str	r6, [r1, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 800d898:	b113      	cbz	r3, 800d8a0 <HAL_DMA_Start_IT+0x5c>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d89a:	e9d4 2116 	ldrd	r2, r1, [r4, #88]	; 0x58
 800d89e:	6051      	str	r1, [r2, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800d8a0:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d8a2:	68a1      	ldr	r1, [r4, #8]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800d8a4:	f002 061c 	and.w	r6, r2, #28
 800d8a8:	2201      	movs	r2, #1
 800d8aa:	40b2      	lsls	r2, r6
 800d8ac:	6c26      	ldr	r6, [r4, #64]	; 0x40
 800d8ae:	6072      	str	r2, [r6, #4]
    if (NULL != hdma->XferHalfCpltCallback)
 800d8b0:	6b22      	ldr	r2, [r4, #48]	; 0x30
  hdma->Instance->CNDTR = DataLength;
 800d8b2:	6045      	str	r5, [r0, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d8b4:	2910      	cmp	r1, #16
    hdma->Instance->CPAR = DstAddress;
 800d8b6:	bf0b      	itete	eq
 800d8b8:	6087      	streq	r7, [r0, #8]
    hdma->Instance->CPAR = SrcAddress;
 800d8ba:	f8c0 8008 	strne.w	r8, [r0, #8]
    hdma->Instance->CMAR = SrcAddress;
 800d8be:	f8c0 800c 	streq.w	r8, [r0, #12]
    hdma->Instance->CMAR = DstAddress;
 800d8c2:	60c7      	strne	r7, [r0, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 800d8c4:	b31a      	cbz	r2, 800d90e <HAL_DMA_Start_IT+0xca>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d8c6:	6802      	ldr	r2, [r0, #0]
 800d8c8:	f042 020e 	orr.w	r2, r2, #14
 800d8cc:	6002      	str	r2, [r0, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800d8ce:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800d8d0:	6811      	ldr	r1, [r2, #0]
 800d8d2:	03c9      	lsls	r1, r1, #15
 800d8d4:	d503      	bpl.n	800d8de <HAL_DMA_Start_IT+0x9a>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800d8d6:	6811      	ldr	r1, [r2, #0]
 800d8d8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800d8dc:	6011      	str	r1, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 800d8de:	b11b      	cbz	r3, 800d8e8 <HAL_DMA_Start_IT+0xa4>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800d8e0:	681a      	ldr	r2, [r3, #0]
 800d8e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d8e6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 800d8e8:	6803      	ldr	r3, [r0, #0]
 800d8ea:	f043 0301 	orr.w	r3, r3, #1
 800d8ee:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d8f0:	2000      	movs	r0, #0
}
 800d8f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800d8f6:	480a      	ldr	r0, [pc, #40]	; (800d920 <HAL_DMA_Start_IT+0xdc>)
 800d8f8:	f240 11b5 	movw	r1, #437	; 0x1b5
 800d8fc:	f7f4 faf8 	bl	8001ef0 <assert_failed>
  __HAL_LOCK(hdma);
 800d900:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800d904:	2b01      	cmp	r3, #1
 800d906:	d1ac      	bne.n	800d862 <HAL_DMA_Start_IT+0x1e>
 800d908:	2002      	movs	r0, #2
}
 800d90a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800d90e:	6802      	ldr	r2, [r0, #0]
 800d910:	f022 0204 	bic.w	r2, r2, #4
 800d914:	6002      	str	r2, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800d916:	6802      	ldr	r2, [r0, #0]
 800d918:	f042 020a 	orr.w	r2, r2, #10
 800d91c:	6002      	str	r2, [r0, #0]
 800d91e:	e7d6      	b.n	800d8ce <HAL_DMA_Start_IT+0x8a>
 800d920:	08016298 	.word	0x08016298

0800d924 <HAL_DMA_Abort>:
  if (NULL == hdma)
 800d924:	2800      	cmp	r0, #0
 800d926:	d035      	beq.n	800d994 <HAL_DMA_Abort+0x70>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d928:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800d92c:	2b02      	cmp	r3, #2
 800d92e:	d12a      	bne.n	800d986 <HAL_DMA_Abort+0x62>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d930:	6803      	ldr	r3, [r0, #0]
 800d932:	6819      	ldr	r1, [r3, #0]
{
 800d934:	b470      	push	{r4, r5, r6}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d936:	f021 010e 	bic.w	r1, r1, #14
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800d93a:	6c84      	ldr	r4, [r0, #72]	; 0x48
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d93c:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800d93e:	e9d0 5210 	ldrd	r5, r2, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d942:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800d944:	6821      	ldr	r1, [r4, #0]
 800d946:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800d94a:	6021      	str	r1, [r4, #0]
    __HAL_DMA_DISABLE(hdma);
 800d94c:	6819      	ldr	r1, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 800d94e:	6d44      	ldr	r4, [r0, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 800d950:	f021 0101 	bic.w	r1, r1, #1
 800d954:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800d956:	f002 021c 	and.w	r2, r2, #28
 800d95a:	2301      	movs	r3, #1
 800d95c:	4093      	lsls	r3, r2
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d95e:	6d02      	ldr	r2, [r0, #80]	; 0x50
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800d960:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d962:	6072      	str	r2, [r6, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800d964:	b134      	cbz	r4, 800d974 <HAL_DMA_Abort+0x50>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800d966:	6823      	ldr	r3, [r4, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d968:	e9d0 2116 	ldrd	r2, r1, [r0, #88]	; 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800d96c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d970:	6023      	str	r3, [r4, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d972:	6051      	str	r1, [r2, #4]
    __HAL_UNLOCK(hdma);
 800d974:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 800d976:	2201      	movs	r2, #1
 800d978:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800d97c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 800d980:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 800d982:	4618      	mov	r0, r3
}
 800d984:	4770      	bx	lr
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d986:	2204      	movs	r2, #4
    __HAL_UNLOCK(hdma);
 800d988:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d98a:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800d98c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 800d990:	2001      	movs	r0, #1
 800d992:	4770      	bx	lr
    return HAL_ERROR;
 800d994:	2001      	movs	r0, #1
}
 800d996:	4770      	bx	lr

0800d998 <HAL_DMA_Abort_IT>:
  if (HAL_DMA_STATE_BUSY != hdma->State)
 800d998:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800d99c:	2b02      	cmp	r3, #2
 800d99e:	d003      	beq.n	800d9a8 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d9a0:	2304      	movs	r3, #4
 800d9a2:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800d9a4:	2001      	movs	r0, #1
}
 800d9a6:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d9a8:	6803      	ldr	r3, [r0, #0]
 800d9aa:	6819      	ldr	r1, [r3, #0]
 800d9ac:	f021 010e 	bic.w	r1, r1, #14
{
 800d9b0:	b570      	push	{r4, r5, r6, lr}
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800d9b2:	e9d0 4210 	ldrd	r4, r2, [r0, #64]	; 0x40
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800d9b6:	6c85      	ldr	r5, [r0, #72]	; 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d9b8:	6019      	str	r1, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800d9ba:	6819      	ldr	r1, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d9bc:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    __HAL_DMA_DISABLE(hdma);
 800d9be:	f021 0101 	bic.w	r1, r1, #1
 800d9c2:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800d9c4:	682b      	ldr	r3, [r5, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 800d9c6:	6d41      	ldr	r1, [r0, #84]	; 0x54
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800d9c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d9cc:	602b      	str	r3, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800d9ce:	f002 021c 	and.w	r2, r2, #28
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	4093      	lsls	r3, r2
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d9d6:	6d02      	ldr	r2, [r0, #80]	; 0x50
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800d9d8:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d9da:	6072      	str	r2, [r6, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800d9dc:	b131      	cbz	r1, 800d9ec <HAL_DMA_Abort_IT+0x54>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800d9de:	680b      	ldr	r3, [r1, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d9e0:	e9d0 2416 	ldrd	r2, r4, [r0, #88]	; 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800d9e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d9e8:	600b      	str	r3, [r1, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d9ea:	6054      	str	r4, [r2, #4]
    if (hdma->XferAbortCallback != NULL)
 800d9ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800d9ee:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 800d9f0:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 800d9f2:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800d9f6:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 800d9fa:	b113      	cbz	r3, 800da02 <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 800d9fc:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800d9fe:	4620      	mov	r0, r4
}
 800da00:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800da02:	4618      	mov	r0, r3
}
 800da04:	bd70      	pop	{r4, r5, r6, pc}
 800da06:	bf00      	nop

0800da08 <HAL_DMA_IRQHandler>:
{
 800da08:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800da0a:	e9d0 6310 	ldrd	r6, r3, [r0, #64]	; 0x40
 800da0e:	2204      	movs	r2, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800da10:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800da12:	6805      	ldr	r5, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800da14:	f003 031c 	and.w	r3, r3, #28
 800da18:	409a      	lsls	r2, r3
 800da1a:	420a      	tst	r2, r1
  uint32_t source_it = hdma->Instance->CCR;
 800da1c:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800da1e:	d00e      	beq.n	800da3e <HAL_DMA_IRQHandler+0x36>
 800da20:	f014 0f04 	tst.w	r4, #4
 800da24:	d00b      	beq.n	800da3e <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800da26:	682b      	ldr	r3, [r5, #0]
 800da28:	069b      	lsls	r3, r3, #26
 800da2a:	d403      	bmi.n	800da34 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800da2c:	682b      	ldr	r3, [r5, #0]
 800da2e:	f023 0304 	bic.w	r3, r3, #4
 800da32:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 800da34:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800da36:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 800da38:	b1cb      	cbz	r3, 800da6e <HAL_DMA_IRQHandler+0x66>
}
 800da3a:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 800da3c:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800da3e:	2202      	movs	r2, #2
 800da40:	409a      	lsls	r2, r3
 800da42:	420a      	tst	r2, r1
 800da44:	d015      	beq.n	800da72 <HAL_DMA_IRQHandler+0x6a>
 800da46:	f014 0f02 	tst.w	r4, #2
 800da4a:	d012      	beq.n	800da72 <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800da4c:	682b      	ldr	r3, [r5, #0]
 800da4e:	0699      	lsls	r1, r3, #26
 800da50:	d406      	bmi.n	800da60 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800da52:	682b      	ldr	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800da54:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800da56:	f023 030a 	bic.w	r3, r3, #10
 800da5a:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800da5c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    if (hdma->XferCpltCallback != NULL)
 800da60:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800da62:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 800da64:	2200      	movs	r2, #0
 800da66:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d1e5      	bne.n	800da3a <HAL_DMA_IRQHandler+0x32>
}
 800da6e:	bc70      	pop	{r4, r5, r6}
 800da70:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800da72:	2208      	movs	r2, #8
 800da74:	409a      	lsls	r2, r3
 800da76:	420a      	tst	r2, r1
 800da78:	d0f9      	beq.n	800da6e <HAL_DMA_IRQHandler+0x66>
 800da7a:	0722      	lsls	r2, r4, #28
 800da7c:	d5f7      	bpl.n	800da6e <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800da7e:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 800da80:	6b41      	ldr	r1, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800da82:	f022 020e 	bic.w	r2, r2, #14
 800da86:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800da88:	2201      	movs	r2, #1
 800da8a:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 800da8e:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800da90:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800da92:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800da94:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 800da98:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 800da9c:	2900      	cmp	r1, #0
 800da9e:	d0e6      	beq.n	800da6e <HAL_DMA_IRQHandler+0x66>
}
 800daa0:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800daa2:	4708      	bx	r1

0800daa4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800daa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800daa8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
{
 800daac:	b083      	sub	sp, #12
 800daae:	4605      	mov	r5, r0
 800dab0:	460f      	mov	r7, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800dab2:	d012      	beq.n	800dada <HAL_GPIO_Init+0x36>
 800dab4:	4b96      	ldr	r3, [pc, #600]	; (800dd10 <HAL_GPIO_Init+0x26c>)
 800dab6:	4298      	cmp	r0, r3
 800dab8:	d00f      	beq.n	800dada <HAL_GPIO_Init+0x36>
 800daba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dabe:	4298      	cmp	r0, r3
 800dac0:	d00b      	beq.n	800dada <HAL_GPIO_Init+0x36>
 800dac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dac6:	4298      	cmp	r0, r3
 800dac8:	d007      	beq.n	800dada <HAL_GPIO_Init+0x36>
 800daca:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800dace:	4298      	cmp	r0, r3
 800dad0:	d003      	beq.n	800dada <HAL_GPIO_Init+0x36>
 800dad2:	4890      	ldr	r0, [pc, #576]	; (800dd14 <HAL_GPIO_Init+0x270>)
 800dad4:	21a8      	movs	r1, #168	; 0xa8
 800dad6:	f7f4 fa0b 	bl	8001ef0 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	b29a      	uxth	r2, r3
 800dade:	2a00      	cmp	r2, #0
 800dae0:	f000 80d2 	beq.w	800dc88 <HAL_GPIO_Init+0x1e4>
 800dae4:	0c1b      	lsrs	r3, r3, #16
 800dae6:	041b      	lsls	r3, r3, #16
 800dae8:	2b00      	cmp	r3, #0
 800daea:	f040 80cd 	bne.w	800dc88 <HAL_GPIO_Init+0x1e4>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2b03      	cmp	r3, #3
 800daf2:	d915      	bls.n	800db20 <HAL_GPIO_Init+0x7c>
 800daf4:	f1a3 0211 	sub.w	r2, r3, #17
 800daf8:	2a01      	cmp	r2, #1
 800dafa:	d911      	bls.n	800db20 <HAL_GPIO_Init+0x7c>
 800dafc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800db00:	f5b2 1f88 	cmp.w	r2, #1114112	; 0x110000
 800db04:	d00c      	beq.n	800db20 <HAL_GPIO_Init+0x7c>
 800db06:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800db0a:	d009      	beq.n	800db20 <HAL_GPIO_Init+0x7c>
 800db0c:	f5b2 1f90 	cmp.w	r2, #1179648	; 0x120000
 800db10:	d006      	beq.n	800db20 <HAL_GPIO_Init+0x7c>
 800db12:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 800db16:	d003      	beq.n	800db20 <HAL_GPIO_Init+0x7c>
 800db18:	487e      	ldr	r0, [pc, #504]	; (800dd14 <HAL_GPIO_Init+0x270>)
 800db1a:	21aa      	movs	r1, #170	; 0xaa
 800db1c:	f7f4 f9e8 	bl	8001ef0 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	2b02      	cmp	r3, #2
 800db24:	f200 80e9 	bhi.w	800dcfa <HAL_GPIO_Init+0x256>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	f000 80a9 	beq.w	800dc82 <HAL_GPIO_Init+0x1de>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800db30:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 800dd20 <HAL_GPIO_Init+0x27c>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800db34:	f8df b1d8 	ldr.w	fp, [pc, #472]	; 800dd10 <HAL_GPIO_Init+0x26c>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800db38:	2400      	movs	r4, #0
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800db3a:	2601      	movs	r6, #1
 800db3c:	40a6      	lsls	r6, r4
    if (iocurrent != 0x00u)
 800db3e:	ea16 0903 	ands.w	r9, r6, r3
 800db42:	f000 8099 	beq.w	800dc78 <HAL_GPIO_Init+0x1d4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f000 0303 	and.w	r3, r0, #3
 800db4c:	1e5a      	subs	r2, r3, #1
 800db4e:	2a01      	cmp	r2, #1
 800db50:	f240 809f 	bls.w	800dc92 <HAL_GPIO_Init+0x1ee>
 800db54:	0062      	lsls	r2, r4, #1
 800db56:	f04f 0a03 	mov.w	sl, #3
 800db5a:	fa0a fa02 	lsl.w	sl, sl, r2
 800db5e:	ea6f 0a0a 	mvn.w	sl, sl
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800db62:	2b03      	cmp	r3, #3
 800db64:	d038      	beq.n	800dbd8 <HAL_GPIO_Init+0x134>
        temp = GPIOx->PUPDR;
 800db66:	68ee      	ldr	r6, [r5, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800db68:	68b9      	ldr	r1, [r7, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800db6a:	ea06 060a 	and.w	r6, r6, sl
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800db6e:	4091      	lsls	r1, r2
 800db70:	4331      	orrs	r1, r6
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800db72:	2b02      	cmp	r3, #2
        GPIOx->PUPDR = temp;
 800db74:	60e9      	str	r1, [r5, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800db76:	d12f      	bne.n	800dbd8 <HAL_GPIO_Init+0x134>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800db78:	f1b5 4f90 	cmp.w	r5, #1207959552	; 0x48000000
 800db7c:	d012      	beq.n	800dba4 <HAL_GPIO_Init+0x100>
 800db7e:	455d      	cmp	r5, fp
 800db80:	d010      	beq.n	800dba4 <HAL_GPIO_Init+0x100>
 800db82:	4b65      	ldr	r3, [pc, #404]	; (800dd18 <HAL_GPIO_Init+0x274>)
 800db84:	429d      	cmp	r5, r3
 800db86:	d00d      	beq.n	800dba4 <HAL_GPIO_Init+0x100>
 800db88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db8c:	429d      	cmp	r5, r3
 800db8e:	d009      	beq.n	800dba4 <HAL_GPIO_Init+0x100>
 800db90:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800db94:	429d      	cmp	r5, r3
 800db96:	d005      	beq.n	800dba4 <HAL_GPIO_Init+0x100>
 800db98:	485e      	ldr	r0, [pc, #376]	; (800dd14 <HAL_GPIO_Init+0x270>)
 800db9a:	9201      	str	r2, [sp, #4]
 800db9c:	21d5      	movs	r1, #213	; 0xd5
 800db9e:	f7f4 f9a7 	bl	8001ef0 <assert_failed>
 800dba2:	9a01      	ldr	r2, [sp, #4]
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	2b0f      	cmp	r3, #15
 800dba8:	f200 809a 	bhi.w	800dce0 <HAL_GPIO_Init+0x23c>
        temp = GPIOx->AFR[position >> 3u];
 800dbac:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
 800dbb0:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800dbb4:	f004 0607 	and.w	r6, r4, #7
        temp = GPIOx->AFR[position >> 3u];
 800dbb8:	f8dc 1020 	ldr.w	r1, [ip, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	00b6      	lsls	r6, r6, #2
 800dbc0:	f04f 0e0f 	mov.w	lr, #15
 800dbc4:	fa0e fe06 	lsl.w	lr, lr, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800dbc8:	40b3      	lsls	r3, r6
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800dbca:	ea21 010e 	bic.w	r1, r1, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800dbce:	430b      	orrs	r3, r1
        GPIOx->AFR[position >> 3u] = temp;
 800dbd0:	f8cc 3020 	str.w	r3, [ip, #32]
 800dbd4:	f000 0303 	and.w	r3, r0, #3
      temp = GPIOx->MODER;
 800dbd8:	6829      	ldr	r1, [r5, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800dbda:	4093      	lsls	r3, r2
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800dbdc:	ea01 0a0a 	and.w	sl, r1, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800dbe0:	ea43 030a 	orr.w	r3, r3, sl
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800dbe4:	f410 3f40 	tst.w	r0, #196608	; 0x30000
      GPIOx->MODER = temp;
 800dbe8:	602b      	str	r3, [r5, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800dbea:	d044      	beq.n	800dc76 <HAL_GPIO_Init+0x1d2>
        temp = SYSCFG->EXTICR[position >> 2u];
 800dbec:	f024 0303 	bic.w	r3, r4, #3
 800dbf0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800dbf4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800dbf8:	f004 0203 	and.w	r2, r4, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 800dbfc:	689e      	ldr	r6, [r3, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800dbfe:	0092      	lsls	r2, r2, #2
 800dc00:	210f      	movs	r1, #15
 800dc02:	4091      	lsls	r1, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800dc04:	f1b5 4f90 	cmp.w	r5, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800dc08:	ea26 0101 	bic.w	r1, r6, r1
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800dc0c:	d00c      	beq.n	800dc28 <HAL_GPIO_Init+0x184>
 800dc0e:	455d      	cmp	r5, fp
 800dc10:	d06e      	beq.n	800dcf0 <HAL_GPIO_Init+0x24c>
 800dc12:	4e41      	ldr	r6, [pc, #260]	; (800dd18 <HAL_GPIO_Init+0x274>)
 800dc14:	42b5      	cmp	r5, r6
 800dc16:	d075      	beq.n	800dd04 <HAL_GPIO_Init+0x260>
 800dc18:	4e40      	ldr	r6, [pc, #256]	; (800dd1c <HAL_GPIO_Init+0x278>)
 800dc1a:	42b5      	cmp	r5, r6
 800dc1c:	bf0c      	ite	eq
 800dc1e:	2604      	moveq	r6, #4
 800dc20:	2607      	movne	r6, #7
 800dc22:	fa06 f202 	lsl.w	r2, r6, r2
 800dc26:	4311      	orrs	r1, r2
        SYSCFG->EXTICR[position >> 2u] = temp;
 800dc28:	6099      	str	r1, [r3, #8]
        temp = EXTI->RTSR1;
 800dc2a:	f8d8 2000 	ldr.w	r2, [r8]
        temp &= ~(iocurrent);
 800dc2e:	ea6f 0109 	mvn.w	r1, r9
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800dc32:	02c6      	lsls	r6, r0, #11
        temp &= ~(iocurrent);
 800dc34:	bf54      	ite	pl
 800dc36:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 800dc38:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->RTSR1 = temp;
 800dc3c:	f8c8 2000 	str.w	r2, [r8]

        temp = EXTI->FTSR1;
 800dc40:	f8d8 2004 	ldr.w	r2, [r8, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800dc44:	0283      	lsls	r3, r0, #10
        temp &= ~(iocurrent);
 800dc46:	bf54      	ite	pl
 800dc48:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 800dc4a:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->FTSR1 = temp;
 800dc4e:	f8c8 2004 	str.w	r2, [r8, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800dc52:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800dc56:	03c6      	lsls	r6, r0, #15
        temp &= ~(iocurrent);
 800dc58:	bf54      	ite	pl
 800dc5a:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 800dc5c:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->IMR1 = temp;
 800dc60:	f8c8 2080 	str.w	r2, [r8, #128]	; 0x80

        temp = EXTI->EMR1;
 800dc64:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800dc68:	0382      	lsls	r2, r0, #14
        temp &= ~(iocurrent);
 800dc6a:	bf54      	ite	pl
 800dc6c:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 800dc6e:	ea49 0303 	orrmi.w	r3, r9, r3
        }
        EXTI->EMR1 = temp;
 800dc72:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
 800dc76:	683b      	ldr	r3, [r7, #0]
      }
    }

    position++;
 800dc78:	3401      	adds	r4, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800dc7a:	fa33 f204 	lsrs.w	r2, r3, r4
 800dc7e:	f47f af5c 	bne.w	800db3a <HAL_GPIO_Init+0x96>
  }
}
 800dc82:	b003      	add	sp, #12
 800dc84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800dc88:	4822      	ldr	r0, [pc, #136]	; (800dd14 <HAL_GPIO_Init+0x270>)
 800dc8a:	21a9      	movs	r1, #169	; 0xa9
 800dc8c:	f7f4 f930 	bl	8001ef0 <assert_failed>
 800dc90:	e72d      	b.n	800daee <HAL_GPIO_Init+0x4a>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800dc92:	68f9      	ldr	r1, [r7, #12]
 800dc94:	2903      	cmp	r1, #3
 800dc96:	d81a      	bhi.n	800dcce <HAL_GPIO_Init+0x22a>
        temp = GPIOx->OSPEEDR;
 800dc98:	f8d5 c008 	ldr.w	ip, [r5, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800dc9c:	0062      	lsls	r2, r4, #1
 800dc9e:	f04f 0a03 	mov.w	sl, #3
 800dca2:	fa0a fa02 	lsl.w	sl, sl, r2
 800dca6:	ea2c 0c0a 	bic.w	ip, ip, sl
        temp |= (GPIO_Init->Speed << (position * 2u));
 800dcaa:	4091      	lsls	r1, r2
 800dcac:	ea41 010c 	orr.w	r1, r1, ip
        GPIOx->OSPEEDR = temp;
 800dcb0:	60a9      	str	r1, [r5, #8]
        temp = GPIOx->OTYPER;
 800dcb2:	f8d5 c004 	ldr.w	ip, [r5, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800dcb6:	f3c0 1100 	ubfx	r1, r0, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800dcba:	ea2c 0c06 	bic.w	ip, ip, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800dcbe:	460e      	mov	r6, r1
 800dcc0:	40a6      	lsls	r6, r4
 800dcc2:	ea46 060c 	orr.w	r6, r6, ip
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800dcc6:	ea6f 0a0a 	mvn.w	sl, sl
        GPIOx->OTYPER = temp;
 800dcca:	606e      	str	r6, [r5, #4]
 800dccc:	e749      	b.n	800db62 <HAL_GPIO_Init+0xbe>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800dcce:	4811      	ldr	r0, [pc, #68]	; (800dd14 <HAL_GPIO_Init+0x270>)
 800dcd0:	21ba      	movs	r1, #186	; 0xba
 800dcd2:	f7f4 f90d 	bl	8001ef0 <assert_failed>
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	68f9      	ldr	r1, [r7, #12]
 800dcda:	f000 0303 	and.w	r3, r0, #3
 800dcde:	e7db      	b.n	800dc98 <HAL_GPIO_Init+0x1f4>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800dce0:	480c      	ldr	r0, [pc, #48]	; (800dd14 <HAL_GPIO_Init+0x270>)
 800dce2:	9201      	str	r2, [sp, #4]
 800dce4:	21d6      	movs	r1, #214	; 0xd6
 800dce6:	f7f4 f903 	bl	8001ef0 <assert_failed>
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	9a01      	ldr	r2, [sp, #4]
 800dcee:	e75d      	b.n	800dbac <HAL_GPIO_Init+0x108>
 800dcf0:	2601      	movs	r6, #1
 800dcf2:	fa06 f202 	lsl.w	r2, r6, r2
 800dcf6:	4311      	orrs	r1, r2
 800dcf8:	e796      	b.n	800dc28 <HAL_GPIO_Init+0x184>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800dcfa:	4806      	ldr	r0, [pc, #24]	; (800dd14 <HAL_GPIO_Init+0x270>)
 800dcfc:	21ab      	movs	r1, #171	; 0xab
 800dcfe:	f7f4 f8f7 	bl	8001ef0 <assert_failed>
 800dd02:	e711      	b.n	800db28 <HAL_GPIO_Init+0x84>
 800dd04:	2602      	movs	r6, #2
 800dd06:	fa06 f202 	lsl.w	r2, r6, r2
 800dd0a:	4311      	orrs	r1, r2
 800dd0c:	e78c      	b.n	800dc28 <HAL_GPIO_Init+0x184>
 800dd0e:	bf00      	nop
 800dd10:	48000400 	.word	0x48000400
 800dd14:	08016304 	.word	0x08016304
 800dd18:	48000800 	.word	0x48000800
 800dd1c:	48001000 	.word	0x48001000
 800dd20:	58000800 	.word	0x58000800

0800dd24 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800dd24:	b538      	push	{r3, r4, r5, lr}
 800dd26:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800dd28:	460c      	mov	r4, r1
 800dd2a:	b129      	cbz	r1, 800dd38 <HAL_GPIO_ReadPin+0x14>

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800dd2c:	692b      	ldr	r3, [r5, #16]
 800dd2e:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800dd30:	bf14      	ite	ne
 800dd32:	2001      	movne	r0, #1
 800dd34:	2000      	moveq	r0, #0
 800dd36:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800dd38:	4802      	ldr	r0, [pc, #8]	; (800dd44 <HAL_GPIO_ReadPin+0x20>)
 800dd3a:	f240 1173 	movw	r1, #371	; 0x173
 800dd3e:	f7f4 f8d7 	bl	8001ef0 <assert_failed>
 800dd42:	e7f3      	b.n	800dd2c <HAL_GPIO_ReadPin+0x8>
 800dd44:	08016304 	.word	0x08016304

0800dd48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800dd48:	b570      	push	{r4, r5, r6, lr}
 800dd4a:	4606      	mov	r6, r0
 800dd4c:	4615      	mov	r5, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800dd4e:	460c      	mov	r4, r1
 800dd50:	b159      	cbz	r1, 800dd6a <HAL_GPIO_WritePin+0x22>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800dd52:	2d01      	cmp	r5, #1
 800dd54:	d802      	bhi.n	800dd5c <HAL_GPIO_WritePin+0x14>

  if (PinState != GPIO_PIN_RESET)
 800dd56:	b935      	cbnz	r5, 800dd66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800dd58:	62b4      	str	r4, [r6, #40]	; 0x28
  }
}
 800dd5a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800dd5c:	4806      	ldr	r0, [pc, #24]	; (800dd78 <HAL_GPIO_WritePin+0x30>)
 800dd5e:	f44f 71ca 	mov.w	r1, #404	; 0x194
 800dd62:	f7f4 f8c5 	bl	8001ef0 <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800dd66:	61b4      	str	r4, [r6, #24]
}
 800dd68:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800dd6a:	4803      	ldr	r0, [pc, #12]	; (800dd78 <HAL_GPIO_WritePin+0x30>)
 800dd6c:	f240 1193 	movw	r1, #403	; 0x193
 800dd70:	f7f4 f8be 	bl	8001ef0 <assert_failed>
 800dd74:	e7ed      	b.n	800dd52 <HAL_GPIO_WritePin+0xa>
 800dd76:	bf00      	nop
 800dd78:	08016304 	.word	0x08016304

0800dd7c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800dd7c:	4a04      	ldr	r2, [pc, #16]	; (800dd90 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800dd7e:	68d1      	ldr	r1, [r2, #12]
 800dd80:	4201      	tst	r1, r0
 800dd82:	d100      	bne.n	800dd86 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800dd84:	4770      	bx	lr
{
 800dd86:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800dd88:	60d0      	str	r0, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800dd8a:	f7f4 fc17 	bl	80025bc <HAL_GPIO_EXTI_Callback>
  }
}
 800dd8e:	bd08      	pop	{r3, pc}
 800dd90:	58000800 	.word	0x58000800

0800dd94 <HAL_HSEM_FreeCallback>:
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800dd94:	4770      	bx	lr
 800dd96:	bf00      	nop

0800dd98 <HAL_HSEM_IRQHandler>:
{
 800dd98:	b508      	push	{r3, lr}
  statusreg = HSEM_COMMON->MISR;
 800dd9a:	4b05      	ldr	r3, [pc, #20]	; (800ddb0 <HAL_HSEM_IRQHandler+0x18>)
 800dd9c:	68d8      	ldr	r0, [r3, #12]
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800dd9e:	681a      	ldr	r2, [r3, #0]
 800dda0:	ea22 0200 	bic.w	r2, r2, r0
 800dda4:	601a      	str	r2, [r3, #0]
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800dda6:	6058      	str	r0, [r3, #4]
  HAL_HSEM_FreeCallback(statusreg);
 800dda8:	f7ff fff4 	bl	800dd94 <HAL_HSEM_FreeCallback>
}
 800ddac:	bd08      	pop	{r3, pc}
 800ddae:	bf00      	nop
 800ddb0:	58001500 	.word	0x58001500

0800ddb4 <HAL_IPCC_TxCallback>:
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800ddb4:	4770      	bx	lr
 800ddb6:	bf00      	nop

0800ddb8 <HAL_IPCC_RxCallback>:
 800ddb8:	4770      	bx	lr
 800ddba:	bf00      	nop

0800ddbc <HAL_IPCC_Init>:
  if (hipcc != NULL)
 800ddbc:	b360      	cbz	r0, 800de18 <HAL_IPCC_Init+0x5c>
{
 800ddbe:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));
 800ddc0:	6802      	ldr	r2, [r0, #0]
 800ddc2:	4b16      	ldr	r3, [pc, #88]	; (800de1c <HAL_IPCC_Init+0x60>)
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	4604      	mov	r4, r0
 800ddc8:	d003      	beq.n	800ddd2 <HAL_IPCC_Init+0x16>
 800ddca:	4815      	ldr	r0, [pc, #84]	; (800de20 <HAL_IPCC_Init+0x64>)
 800ddcc:	2186      	movs	r1, #134	; 0x86
 800ddce:	f7f4 f88f 	bl	8001ef0 <assert_failed>
    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800ddd2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800ddd6:	b1db      	cbz	r3, 800de10 <HAL_IPCC_Init+0x54>
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800ddd8:	4b10      	ldr	r3, [pc, #64]	; (800de1c <HAL_IPCC_Init+0x60>)
 800ddda:	4812      	ldr	r0, [pc, #72]	; (800de24 <HAL_IPCC_Init+0x68>)
 800dddc:	4912      	ldr	r1, [pc, #72]	; (800de28 <HAL_IPCC_Init+0x6c>)
 800ddde:	2200      	movs	r2, #0
 800dde0:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800dde2:	f04f 153f 	mov.w	r5, #4128831	; 0x3f003f

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800dde6:	223f      	movs	r2, #63	; 0x3f
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800dde8:	605d      	str	r5, [r3, #4]
  Instance->SCR = IPCC_ALL_RX_BUF;
 800ddea:	609a      	str	r2, [r3, #8]
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800ddec:	681a      	ldr	r2, [r3, #0]
 800ddee:	f042 1201 	orr.w	r2, r2, #65537	; 0x10001
 800ddf2:	601a      	str	r2, [r3, #0]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800ddf4:	1d23      	adds	r3, r4, #4
 800ddf6:	f104 021c 	add.w	r2, r4, #28
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800ddfa:	f843 0b04 	str.w	r0, [r3], #4
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800ddfe:	4293      	cmp	r3, r2
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800de00:	6159      	str	r1, [r3, #20]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800de02:	d1fa      	bne.n	800ddfa <HAL_IPCC_Init+0x3e>
    hipcc->State = HAL_IPCC_STATE_READY;
 800de04:	2301      	movs	r3, #1
    hipcc->callbackRequest = 0;
 800de06:	2000      	movs	r0, #0
    hipcc->State = HAL_IPCC_STATE_READY;
 800de08:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    hipcc->callbackRequest = 0;
 800de0c:	6360      	str	r0, [r4, #52]	; 0x34
}
 800de0e:	bd38      	pop	{r3, r4, r5, pc}
      HAL_IPCC_MspInit(hipcc);
 800de10:	4620      	mov	r0, r4
 800de12:	f7f4 f887 	bl	8001f24 <HAL_IPCC_MspInit>
 800de16:	e7df      	b.n	800ddd8 <HAL_IPCC_Init+0x1c>
    err = HAL_ERROR;
 800de18:	2001      	movs	r0, #1
}
 800de1a:	4770      	bx	lr
 800de1c:	58000c00 	.word	0x58000c00
 800de20:	08016374 	.word	0x08016374
 800de24:	0800ddb9 	.word	0x0800ddb9
 800de28:	0800ddb5 	.word	0x0800ddb5

0800de2c <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800de2c:	4a02      	ldr	r2, [pc, #8]	; (800de38 <HAL_PWR_EnableBkUpAccess+0xc>)
 800de2e:	6813      	ldr	r3, [r2, #0]
 800de30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800de34:	6013      	str	r3, [r2, #0]
}
 800de36:	4770      	bx	lr
 800de38:	58000400 	.word	0x58000400

0800de3c <HAL_PWR_DisableBkUpAccess>:
  *         (RTC registers, RTC backup data registers).
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 800de3c:	4a02      	ldr	r2, [pc, #8]	; (800de48 <HAL_PWR_DisableBkUpAccess+0xc>)
 800de3e:	6813      	ldr	r3, [r2, #0]
 800de40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800de44:	6013      	str	r3, [r2, #0]
}
 800de46:	4770      	bx	lr
 800de48:	58000400 	.word	0x58000400

0800de4c <HAL_PWREx_EnableSRAMRetention>:
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 800de4c:	4a02      	ldr	r2, [pc, #8]	; (800de58 <HAL_PWREx_EnableSRAMRetention+0xc>)
 800de4e:	6893      	ldr	r3, [r2, #8]
 800de50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800de54:	6093      	str	r3, [r2, #8]
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
  LL_PWR_EnableSRAM2Retention();
}
 800de56:	4770      	bx	lr
 800de58:	58000400 	.word	0x58000400

0800de5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800de5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t flash_clksrcfreq, msifreq;

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));
 800de5e:	4604      	mov	r4, r0
{
 800de60:	b089      	sub	sp, #36	; 0x24
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));
 800de62:	b1d8      	cbz	r0, 800de9c <RCC_SetFlashLatencyFromMSIRange+0x40>
 800de64:	f020 0320 	bic.w	r3, r0, #32
 800de68:	2b10      	cmp	r3, #16
 800de6a:	d017      	beq.n	800de9c <RCC_SetFlashLatencyFromMSIRange+0x40>
 800de6c:	f020 0340 	bic.w	r3, r0, #64	; 0x40
 800de70:	2b20      	cmp	r3, #32
 800de72:	d013      	beq.n	800de9c <RCC_SetFlashLatencyFromMSIRange+0x40>
 800de74:	f020 0310 	bic.w	r3, r0, #16
 800de78:	2b40      	cmp	r3, #64	; 0x40
 800de7a:	d00f      	beq.n	800de9c <RCC_SetFlashLatencyFromMSIRange+0x40>
 800de7c:	2870      	cmp	r0, #112	; 0x70
 800de7e:	d00d      	beq.n	800de9c <RCC_SetFlashLatencyFromMSIRange+0x40>
 800de80:	f020 0330 	bic.w	r3, r0, #48	; 0x30
 800de84:	2b80      	cmp	r3, #128	; 0x80
 800de86:	d009      	beq.n	800de9c <RCC_SetFlashLatencyFromMSIRange+0x40>
 800de88:	4829      	ldr	r0, [pc, #164]	; (800df30 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 800de8a:	f240 61dc 	movw	r1, #1756	; 0x6dc
 800de8e:	f7f4 f82f 	bl	8001ef0 <assert_failed>

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800de92:	2cb0      	cmp	r4, #176	; 0xb0
 800de94:	d902      	bls.n	800de9c <RCC_SetFlashLatencyFromMSIRange+0x40>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800de96:	4b27      	ldr	r3, [pc, #156]	; (800df34 <RCC_SetFlashLatencyFromMSIRange+0xd8>)
 800de98:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800de9a:	e003      	b.n	800dea4 <RCC_SetFlashLatencyFromMSIRange+0x48>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800de9c:	4b25      	ldr	r3, [pc, #148]	; (800df34 <RCC_SetFlashLatencyFromMSIRange+0xd8>)
 800de9e:	0924      	lsrs	r4, r4, #4
 800dea0:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800dea4:	4c24      	ldr	r4, [pc, #144]	; (800df38 <RCC_SetFlashLatencyFromMSIRange+0xdc>)
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800dea6:	f8df e098 	ldr.w	lr, [pc, #152]	; 800df40 <RCC_SetFlashLatencyFromMSIRange+0xe4>
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 800deaa:	f8df c098 	ldr.w	ip, [pc, #152]	; 800df44 <RCC_SetFlashLatencyFromMSIRange+0xe8>
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800deae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800deb2:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800deb6:	3410      	adds	r4, #16
 800deb8:	f8d5 7108 	ldr.w	r7, [r5, #264]	; 0x108
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800debc:	466d      	mov	r5, sp
 800debe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800dec2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800dec6:	f007 070f 	and.w	r7, r7, #15
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800deca:	ac08      	add	r4, sp, #32
 800decc:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800ded0:	f85e 3027 	ldr.w	r3, [lr, r7, lsl #2]
 800ded4:	fbb6 f6f3 	udiv	r6, r6, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 800ded8:	fbac 3606 	umull	r3, r6, ip, r6
 800dedc:	0cb6      	lsrs	r6, r6, #18
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800dede:	2300      	movs	r3, #0
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800dee0:	f855 2b04 	ldr.w	r2, [r5], #4
 800dee4:	4296      	cmp	r6, r2
 800dee6:	d91d      	bls.n	800df24 <RCC_SetFlashLatencyFromMSIRange+0xc8>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800dee8:	3301      	adds	r3, #1
 800deea:	2b04      	cmp	r3, #4
 800deec:	d1f8      	bne.n	800dee0 <RCC_SetFlashLatencyFromMSIRange+0x84>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800deee:	2600      	movs	r6, #0
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800def0:	4c12      	ldr	r4, [pc, #72]	; (800df3c <RCC_SetFlashLatencyFromMSIRange+0xe0>)
 800def2:	6823      	ldr	r3, [r4, #0]
 800def4:	f023 0307 	bic.w	r3, r3, #7
 800def8:	4333      	orrs	r3, r6
 800defa:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800defc:	f7ff faa8 	bl	800d450 <HAL_GetTick>
 800df00:	4605      	mov	r5, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800df02:	e004      	b.n	800df0e <RCC_SetFlashLatencyFromMSIRange+0xb2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800df04:	f7ff faa4 	bl	800d450 <HAL_GetTick>
 800df08:	1b40      	subs	r0, r0, r5
 800df0a:	2802      	cmp	r0, #2
 800df0c:	d807      	bhi.n	800df1e <RCC_SetFlashLatencyFromMSIRange+0xc2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800df0e:	6823      	ldr	r3, [r4, #0]
 800df10:	f003 0307 	and.w	r3, r3, #7
 800df14:	429e      	cmp	r6, r3
 800df16:	d1f5      	bne.n	800df04 <RCC_SetFlashLatencyFromMSIRange+0xa8>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 800df18:	2000      	movs	r0, #0
}
 800df1a:	b009      	add	sp, #36	; 0x24
 800df1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 800df1e:	2003      	movs	r0, #3
}
 800df20:	b009      	add	sp, #36	; 0x24
 800df22:	bdf0      	pop	{r4, r5, r6, r7, pc}
      latency = FLASH_LATENCY_RANGE[index];
 800df24:	aa08      	add	r2, sp, #32
 800df26:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800df2a:	f853 6c10 	ldr.w	r6, [r3, #-16]
      break;
 800df2e:	e7df      	b.n	800def0 <RCC_SetFlashLatencyFromMSIRange+0x94>
 800df30:	080163e4 	.word	0x080163e4
 800df34:	080161e8 	.word	0x080161e8
 800df38:	080144ac 	.word	0x080144ac
 800df3c:	58004000 	.word	0x58004000
 800df40:	08016188 	.word	0x08016188
 800df44:	431bde83 	.word	0x431bde83

0800df48 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800df48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800df4c:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800df4e:	f013 030c 	ands.w	r3, r3, #12
 800df52:	d10a      	bne.n	800df6a <HAL_RCC_GetSysClockFreq+0x22>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800df54:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800df56:	4a23      	ldr	r2, [pc, #140]	; (800dfe4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800df58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df5c:	2bb0      	cmp	r3, #176	; 0xb0
 800df5e:	bf28      	it	cs
 800df60:	23b0      	movcs	r3, #176	; 0xb0
 800df62:	091b      	lsrs	r3, r3, #4
 800df64:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800df68:	4770      	bx	lr
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800df6a:	2b04      	cmp	r3, #4
 800df6c:	d02d      	beq.n	800dfca <HAL_RCC_GetSysClockFreq+0x82>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800df6e:	2b08      	cmp	r3, #8
 800df70:	d02f      	beq.n	800dfd2 <HAL_RCC_GetSysClockFreq+0x8a>
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800df72:	68d3      	ldr	r3, [r2, #12]
 800df74:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800df78:	2b02      	cmp	r3, #2
 800df7a:	d028      	beq.n	800dfce <HAL_RCC_GetSysClockFreq+0x86>
 800df7c:	2b03      	cmp	r3, #3
 800df7e:	d119      	bne.n	800dfb4 <HAL_RCC_GetSysClockFreq+0x6c>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800df80:	6812      	ldr	r2, [r2, #0]
          pllinputfreq = HSE_VALUE / 2U;
 800df82:	4b19      	ldr	r3, [pc, #100]	; (800dfe8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800df84:	4819      	ldr	r0, [pc, #100]	; (800dfec <HAL_RCC_GetSysClockFreq+0xa4>)
 800df86:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800df8a:	bf18      	it	ne
 800df8c:	4618      	movne	r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800df8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800df92:	68d9      	ldr	r1, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800df94:	68da      	ldr	r2, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800df96:	68db      	ldr	r3, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800df98:	f3c1 2106 	ubfx	r1, r1, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800df9c:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800dfa0:	0f5b      	lsrs	r3, r3, #29
 800dfa2:	fb00 f001 	mul.w	r0, r0, r1
 800dfa6:	3201      	adds	r2, #1
 800dfa8:	3301      	adds	r3, #1
 800dfaa:	fbb0 f0f2 	udiv	r0, r0, r2
 800dfae:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 800dfb2:	4770      	bx	lr
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800dfb4:	6813      	ldr	r3, [r2, #0]
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800dfb6:	4a0b      	ldr	r2, [pc, #44]	; (800dfe4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800dfb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dfbc:	2bb0      	cmp	r3, #176	; 0xb0
 800dfbe:	bf28      	it	cs
 800dfc0:	23b0      	movcs	r3, #176	; 0xb0
 800dfc2:	091b      	lsrs	r3, r3, #4
 800dfc4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        break;
 800dfc8:	e7e1      	b.n	800df8e <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 800dfca:	4807      	ldr	r0, [pc, #28]	; (800dfe8 <HAL_RCC_GetSysClockFreq+0xa0>)
}
 800dfcc:	4770      	bx	lr
    switch (pllsource)
 800dfce:	4806      	ldr	r0, [pc, #24]	; (800dfe8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800dfd0:	e7dd      	b.n	800df8e <HAL_RCC_GetSysClockFreq+0x46>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800dfd2:	6812      	ldr	r2, [r2, #0]
      sysclockfreq = HSE_VALUE;
 800dfd4:	4b05      	ldr	r3, [pc, #20]	; (800dfec <HAL_RCC_GetSysClockFreq+0xa4>)
 800dfd6:	4804      	ldr	r0, [pc, #16]	; (800dfe8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800dfd8:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800dfdc:	bf08      	it	eq
 800dfde:	4618      	moveq	r0, r3
 800dfe0:	4770      	bx	lr
 800dfe2:	bf00      	nop
 800dfe4:	080161e8 	.word	0x080161e8
 800dfe8:	00f42400 	.word	0x00f42400
 800dfec:	01e84800 	.word	0x01e84800

0800dff0 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800dff0:	2800      	cmp	r0, #0
 800dff2:	f000 835a 	beq.w	800e6aa <HAL_RCC_OscConfig+0x6ba>
{
 800dff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800dff8:	6803      	ldr	r3, [r0, #0]
 800dffa:	4604      	mov	r4, r0
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d052      	beq.n	800e0a6 <HAL_RCC_OscConfig+0xb6>
 800e000:	f033 023f 	bics.w	r2, r3, #63	; 0x3f
 800e004:	f040 827a 	bne.w	800e4fc <HAL_RCC_OscConfig+0x50c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800e008:	0699      	lsls	r1, r3, #26
 800e00a:	f140 812d 	bpl.w	800e268 <HAL_RCC_OscConfig+0x278>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 800e00e:	69e3      	ldr	r3, [r4, #28]
 800e010:	2b01      	cmp	r3, #1
 800e012:	d904      	bls.n	800e01e <HAL_RCC_OscConfig+0x2e>
 800e014:	48a9      	ldr	r0, [pc, #676]	; (800e2bc <HAL_RCC_OscConfig+0x2cc>)
 800e016:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 800e01a:	f7f3 ff69 	bl	8001ef0 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 800e01e:	6a23      	ldr	r3, [r4, #32]
 800e020:	2bff      	cmp	r3, #255	; 0xff
 800e022:	f200 8265 	bhi.w	800e4f0 <HAL_RCC_OscConfig+0x500>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 800e026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e028:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800e02c:	d008      	beq.n	800e040 <HAL_RCC_OscConfig+0x50>
 800e02e:	2b40      	cmp	r3, #64	; 0x40
 800e030:	d006      	beq.n	800e040 <HAL_RCC_OscConfig+0x50>
 800e032:	2b80      	cmp	r3, #128	; 0x80
 800e034:	d004      	beq.n	800e040 <HAL_RCC_OscConfig+0x50>
 800e036:	48a1      	ldr	r0, [pc, #644]	; (800e2bc <HAL_RCC_OscConfig+0x2cc>)
 800e038:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800e03c:	f7f3 ff58 	bl	8001ef0 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800e040:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e044:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800e046:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800e048:	f013 030c 	ands.w	r3, r3, #12
 800e04c:	f000 80ce 	beq.w	800e1ec <HAL_RCC_OscConfig+0x1fc>
 800e050:	2b0c      	cmp	r3, #12
 800e052:	f000 80c6 	beq.w	800e1e2 <HAL_RCC_OscConfig+0x1f2>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800e056:	69e3      	ldr	r3, [r4, #28]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	f000 82e5 	beq.w	800e628 <HAL_RCC_OscConfig+0x638>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800e05e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800e062:	461d      	mov	r5, r3
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800e064:	681a      	ldr	r2, [r3, #0]
 800e066:	f042 0201 	orr.w	r2, r2, #1
 800e06a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800e06c:	f7ff f9f0 	bl	800d450 <HAL_GetTick>
 800e070:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800e072:	682b      	ldr	r3, [r5, #0]
 800e074:	079b      	lsls	r3, r3, #30
 800e076:	f100 8301 	bmi.w	800e67c <HAL_RCC_OscConfig+0x68c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e07a:	f7ff f9e9 	bl	800d450 <HAL_GetTick>
 800e07e:	1b80      	subs	r0, r0, r6
 800e080:	2802      	cmp	r0, #2
 800e082:	d9f6      	bls.n	800e072 <HAL_RCC_OscConfig+0x82>
            return HAL_TIMEOUT;
 800e084:	2003      	movs	r0, #3
}
 800e086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800e088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800e08c:	461e      	mov	r6, r3
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800e08e:	681a      	ldr	r2, [r3, #0]
 800e090:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e094:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800e096:	f7ff f9db 	bl	800d450 <HAL_GetTick>
 800e09a:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800e09c:	6833      	ldr	r3, [r6, #0]
 800e09e:	0558      	lsls	r0, r3, #21
 800e0a0:	f100 82df 	bmi.w	800e662 <HAL_RCC_OscConfig+0x672>
 800e0a4:	6823      	ldr	r3, [r4, #0]
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800e0a6:	f013 0f18 	tst.w	r3, #24
 800e0aa:	d032      	beq.n	800e112 <HAL_RCC_OscConfig+0x122>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800e0ac:	6962      	ldr	r2, [r4, #20]
 800e0ae:	2a00      	cmp	r2, #0
 800e0b0:	f000 8161 	beq.w	800e376 <HAL_RCC_OscConfig+0x386>
 800e0b4:	2a05      	cmp	r2, #5
 800e0b6:	d009      	beq.n	800e0cc <HAL_RCC_OscConfig+0xdc>
 800e0b8:	4880      	ldr	r0, [pc, #512]	; (800e2bc <HAL_RCC_OscConfig+0x2cc>)
 800e0ba:	f44f 711d 	mov.w	r1, #628	; 0x274
 800e0be:	f7f3 ff17 	bl	8001ef0 <assert_failed>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800e0c2:	6963      	ldr	r3, [r4, #20]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	f000 8156 	beq.w	800e376 <HAL_RCC_OscConfig+0x386>
 800e0ca:	6823      	ldr	r3, [r4, #0]
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800e0cc:	06d9      	lsls	r1, r3, #27
 800e0ce:	f140 82ee 	bpl.w	800e6ae <HAL_RCC_OscConfig+0x6be>
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));
 800e0d2:	69a3      	ldr	r3, [r4, #24]
 800e0d4:	2b0f      	cmp	r3, #15
 800e0d6:	f200 831c 	bhi.w	800e712 <HAL_RCC_OscConfig+0x722>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800e0da:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800e0de:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800e0e2:	079a      	lsls	r2, r3, #30
 800e0e4:	f100 8211 	bmi.w	800e50a <HAL_RCC_OscConfig+0x51a>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800e0e8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800e0ec:	f043 0301 	orr.w	r3, r3, #1
 800e0f0:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
          tickstart = HAL_GetTick();
 800e0f4:	f7ff f9ac 	bl	800d450 <HAL_GetTick>
 800e0f8:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800e0fa:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800e0fe:	079b      	lsls	r3, r3, #30
 800e100:	f100 8203 	bmi.w	800e50a <HAL_RCC_OscConfig+0x51a>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800e104:	f7ff f9a4 	bl	800d450 <HAL_GetTick>
 800e108:	1b80      	subs	r0, r0, r6
 800e10a:	2802      	cmp	r0, #2
 800e10c:	d9f5      	bls.n	800e0fa <HAL_RCC_OscConfig+0x10a>
 800e10e:	e7b9      	b.n	800e084 <HAL_RCC_OscConfig+0x94>
 800e110:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e112:	075d      	lsls	r5, r3, #29
 800e114:	d539      	bpl.n	800e18a <HAL_RCC_OscConfig+0x19a>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800e116:	68a3      	ldr	r3, [r4, #8]
 800e118:	2b01      	cmp	r3, #1
 800e11a:	d907      	bls.n	800e12c <HAL_RCC_OscConfig+0x13c>
 800e11c:	2b05      	cmp	r3, #5
 800e11e:	f000 822d 	beq.w	800e57c <HAL_RCC_OscConfig+0x58c>
 800e122:	4866      	ldr	r0, [pc, #408]	; (800e2bc <HAL_RCC_OscConfig+0x2cc>)
 800e124:	f240 21fb 	movw	r1, #763	; 0x2fb
 800e128:	f7f3 fee2 	bl	8001ef0 <assert_failed>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e12c:	4b64      	ldr	r3, [pc, #400]	; (800e2c0 <HAL_RCC_OscConfig+0x2d0>)
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	05d8      	lsls	r0, r3, #23
 800e132:	f140 8269 	bpl.w	800e608 <HAL_RCC_OscConfig+0x618>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e136:	68a3      	ldr	r3, [r4, #8]
 800e138:	2b01      	cmp	r3, #1
 800e13a:	f000 82ad 	beq.w	800e698 <HAL_RCC_OscConfig+0x6a8>
 800e13e:	2b05      	cmp	r3, #5
 800e140:	f000 8220 	beq.w	800e584 <HAL_RCC_OscConfig+0x594>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800e144:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800e148:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 800e14c:	f022 0201 	bic.w	r2, r2, #1
 800e150:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800e154:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 800e158:	f022 0204 	bic.w	r2, r2, #4
 800e15c:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800e160:	2b00      	cmp	r3, #0
 800e162:	f040 821d 	bne.w	800e5a0 <HAL_RCC_OscConfig+0x5b0>
      tickstart = HAL_GetTick();
 800e166:	f7ff f973 	bl	800d450 <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800e16a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800e16e:	079b      	lsls	r3, r3, #30
 800e170:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e172:	f241 3788 	movw	r7, #5000	; 0x1388
 800e176:	d508      	bpl.n	800e18a <HAL_RCC_OscConfig+0x19a>
 800e178:	f7ff f96a 	bl	800d450 <HAL_GetTick>
 800e17c:	1b80      	subs	r0, r0, r6
 800e17e:	42b8      	cmp	r0, r7
 800e180:	d880      	bhi.n	800e084 <HAL_RCC_OscConfig+0x94>
 800e182:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800e186:	079b      	lsls	r3, r3, #30
 800e188:	d4f6      	bmi.n	800e178 <HAL_RCC_OscConfig+0x188>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800e18a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e18c:	2b02      	cmp	r3, #2
 800e18e:	f200 80dc 	bhi.w	800e34a <HAL_RCC_OscConfig+0x35a>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800e192:	b323      	cbz	r3, 800e1de <HAL_RCC_OscConfig+0x1ee>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800e194:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800e198:	2b02      	cmp	r3, #2
 800e19a:	68ae      	ldr	r6, [r5, #8]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800e19c:	68ef      	ldr	r7, [r5, #12]
 800e19e:	f006 060c 	and.w	r6, r6, #12
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800e1a2:	f000 810f 	beq.w	800e3c4 <HAL_RCC_OscConfig+0x3d4>
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e1a6:	2e0c      	cmp	r6, #12
 800e1a8:	f000 81a0 	beq.w	800e4ec <HAL_RCC_OscConfig+0x4fc>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800e1ac:	682b      	ldr	r3, [r5, #0]
 800e1ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e1b2:	602b      	str	r3, [r5, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800e1b4:	68eb      	ldr	r3, [r5, #12]
 800e1b6:	f023 0303 	bic.w	r3, r3, #3
 800e1ba:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
 800e1bc:	68eb      	ldr	r3, [r5, #12]
 800e1be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e1c2:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800e1c4:	f7ff f944 	bl	800d450 <HAL_GetTick>
 800e1c8:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e1ca:	e005      	b.n	800e1d8 <HAL_RCC_OscConfig+0x1e8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e1cc:	f7ff f940 	bl	800d450 <HAL_GetTick>
 800e1d0:	1b00      	subs	r0, r0, r4
 800e1d2:	2802      	cmp	r0, #2
 800e1d4:	f63f af56 	bhi.w	800e084 <HAL_RCC_OscConfig+0x94>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e1d8:	682b      	ldr	r3, [r5, #0]
 800e1da:	019a      	lsls	r2, r3, #6
 800e1dc:	d4f6      	bmi.n	800e1cc <HAL_RCC_OscConfig+0x1dc>
  return HAL_OK;
 800e1de:	2000      	movs	r0, #0
}
 800e1e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800e1e2:	f002 0203 	and.w	r2, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800e1e6:	2a01      	cmp	r2, #1
 800e1e8:	f47f af35 	bne.w	800e056 <HAL_RCC_OscConfig+0x66>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800e1ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	079a      	lsls	r2, r3, #30
 800e1f4:	d503      	bpl.n	800e1fe <HAL_RCC_OscConfig+0x20e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800e1f6:	69e3      	ldr	r3, [r4, #28]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	f000 8177 	beq.w	800e4ec <HAL_RCC_OscConfig+0x4fc>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800e1fe:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800e202:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e204:	682b      	ldr	r3, [r5, #0]
 800e206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e20a:	2bb0      	cmp	r3, #176	; 0xb0
 800e20c:	bf28      	it	cs
 800e20e:	23b0      	movcs	r3, #176	; 0xb0
 800e210:	4298      	cmp	r0, r3
 800e212:	f240 815a 	bls.w	800e4ca <HAL_RCC_OscConfig+0x4da>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e216:	f7ff fe21 	bl	800de5c <RCC_SetFlashLatencyFromMSIRange>
 800e21a:	2800      	cmp	r0, #0
 800e21c:	f040 8166 	bne.w	800e4ec <HAL_RCC_OscConfig+0x4fc>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800e220:	682b      	ldr	r3, [r5, #0]
 800e222:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e224:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e228:	4313      	orrs	r3, r2
 800e22a:	602b      	str	r3, [r5, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800e22c:	686b      	ldr	r3, [r5, #4]
 800e22e:	6a22      	ldr	r2, [r4, #32]
 800e230:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e234:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e238:	606b      	str	r3, [r5, #4]
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800e23a:	f7ff fe85 	bl	800df48 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800e23e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e242:	4603      	mov	r3, r0
 800e244:	6892      	ldr	r2, [r2, #8]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800e246:	481f      	ldr	r0, [pc, #124]	; (800e2c4 <HAL_RCC_OscConfig+0x2d4>)
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800e248:	4d1f      	ldr	r5, [pc, #124]	; (800e2c8 <HAL_RCC_OscConfig+0x2d8>)
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800e24a:	4920      	ldr	r1, [pc, #128]	; (800e2cc <HAL_RCC_OscConfig+0x2dc>)
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800e24c:	6800      	ldr	r0, [r0, #0]
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800e24e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800e252:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800e256:	fbb3 f3f2 	udiv	r3, r3, r2
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800e25a:	600b      	str	r3, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800e25c:	f7ff f8ae 	bl	800d3bc <HAL_InitTick>
 800e260:	2800      	cmp	r0, #0
 800e262:	f040 8143 	bne.w	800e4ec <HAL_RCC_OscConfig+0x4fc>
 800e266:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e268:	07de      	lsls	r6, r3, #31
 800e26a:	d53f      	bpl.n	800e2ec <HAL_RCC_OscConfig+0x2fc>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800e26c:	6863      	ldr	r3, [r4, #4]
 800e26e:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800e272:	d174      	bne.n	800e35e <HAL_RCC_OscConfig+0x36e>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800e274:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e278:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800e27a:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800e27c:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800e280:	2b08      	cmp	r3, #8
 800e282:	d029      	beq.n	800e2d8 <HAL_RCC_OscConfig+0x2e8>
 800e284:	2b0c      	cmp	r3, #12
 800e286:	d023      	beq.n	800e2d0 <HAL_RCC_OscConfig+0x2e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e288:	6863      	ldr	r3, [r4, #4]
 800e28a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e28e:	f000 819f 	beq.w	800e5d0 <HAL_RCC_OscConfig+0x5e0>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800e292:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800e296:	682a      	ldr	r2, [r5, #0]
 800e298:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e29c:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	f040 819c 	bne.w	800e5dc <HAL_RCC_OscConfig+0x5ec>
        tickstart = HAL_GetTick();
 800e2a4:	f7ff f8d4 	bl	800d450 <HAL_GetTick>
 800e2a8:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800e2aa:	682b      	ldr	r3, [r5, #0]
 800e2ac:	0399      	lsls	r1, r3, #14
 800e2ae:	d51c      	bpl.n	800e2ea <HAL_RCC_OscConfig+0x2fa>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e2b0:	f7ff f8ce 	bl	800d450 <HAL_GetTick>
 800e2b4:	1b80      	subs	r0, r0, r6
 800e2b6:	2864      	cmp	r0, #100	; 0x64
 800e2b8:	d9f7      	bls.n	800e2aa <HAL_RCC_OscConfig+0x2ba>
 800e2ba:	e6e3      	b.n	800e084 <HAL_RCC_OscConfig+0x94>
 800e2bc:	080163e4 	.word	0x080163e4
 800e2c0:	58000400 	.word	0x58000400
 800e2c4:	20000130 	.word	0x20000130
 800e2c8:	08016188 	.word	0x08016188
 800e2cc:	20000128 	.word	0x20000128
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800e2d0:	f002 0203 	and.w	r2, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800e2d4:	2a03      	cmp	r2, #3
 800e2d6:	d1d7      	bne.n	800e288 <HAL_RCC_OscConfig+0x298>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800e2d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	039d      	lsls	r5, r3, #14
 800e2e0:	d503      	bpl.n	800e2ea <HAL_RCC_OscConfig+0x2fa>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e2e2:	6863      	ldr	r3, [r4, #4]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	f000 8101 	beq.w	800e4ec <HAL_RCC_OscConfig+0x4fc>
 800e2ea:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e2ec:	079a      	lsls	r2, r3, #30
 800e2ee:	f57f aeda 	bpl.w	800e0a6 <HAL_RCC_OscConfig+0xb6>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800e2f2:	68e3      	ldr	r3, [r4, #12]
 800e2f4:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 800e2f8:	d137      	bne.n	800e36a <HAL_RCC_OscConfig+0x37a>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800e2fa:	6923      	ldr	r3, [r4, #16]
 800e2fc:	2b7f      	cmp	r3, #127	; 0x7f
 800e2fe:	f200 8161 	bhi.w	800e5c4 <HAL_RCC_OscConfig+0x5d4>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800e302:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e306:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800e308:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800e30a:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800e30e:	2b04      	cmp	r3, #4
 800e310:	f000 80c5 	beq.w	800e49e <HAL_RCC_OscConfig+0x4ae>
 800e314:	2b0c      	cmp	r3, #12
 800e316:	f000 80bd 	beq.w	800e494 <HAL_RCC_OscConfig+0x4a4>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800e31a:	68e3      	ldr	r3, [r4, #12]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	f43f aeb3 	beq.w	800e088 <HAL_RCC_OscConfig+0x98>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800e322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800e326:	461d      	mov	r5, r3
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800e328:	681a      	ldr	r2, [r3, #0]
 800e32a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e32e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800e330:	f7ff f88e 	bl	800d450 <HAL_GetTick>
 800e334:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800e336:	682b      	ldr	r3, [r5, #0]
 800e338:	055f      	lsls	r7, r3, #21
 800e33a:	f100 8189 	bmi.w	800e650 <HAL_RCC_OscConfig+0x660>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e33e:	f7ff f887 	bl	800d450 <HAL_GetTick>
 800e342:	1b80      	subs	r0, r0, r6
 800e344:	2802      	cmp	r0, #2
 800e346:	d9f6      	bls.n	800e336 <HAL_RCC_OscConfig+0x346>
 800e348:	e69c      	b.n	800e084 <HAL_RCC_OscConfig+0x94>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800e34a:	48c9      	ldr	r0, [pc, #804]	; (800e670 <HAL_RCC_OscConfig+0x680>)
 800e34c:	f240 3161 	movw	r1, #865	; 0x361
 800e350:	f7f3 fdce 	bl	8001ef0 <assert_failed>
 800e354:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800e356:	2b00      	cmp	r3, #0
 800e358:	f47f af1c 	bne.w	800e194 <HAL_RCC_OscConfig+0x1a4>
 800e35c:	e73f      	b.n	800e1de <HAL_RCC_OscConfig+0x1ee>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800e35e:	48c4      	ldr	r0, [pc, #784]	; (800e670 <HAL_RCC_OscConfig+0x680>)
 800e360:	f240 11f9 	movw	r1, #505	; 0x1f9
 800e364:	f7f3 fdc4 	bl	8001ef0 <assert_failed>
 800e368:	e784      	b.n	800e274 <HAL_RCC_OscConfig+0x284>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800e36a:	48c1      	ldr	r0, [pc, #772]	; (800e670 <HAL_RCC_OscConfig+0x680>)
 800e36c:	f240 212f 	movw	r1, #559	; 0x22f
 800e370:	f7f3 fdbe 	bl	8001ef0 <assert_failed>
 800e374:	e7c1      	b.n	800e2fa <HAL_RCC_OscConfig+0x30a>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800e376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800e37a:	461e      	mov	r6, r3
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800e37c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800e380:	f022 0204 	bic.w	r2, r2, #4
 800e384:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      tickstart = HAL_GetTick();
 800e388:	f7ff f862 	bl	800d450 <HAL_GetTick>
 800e38c:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800e38e:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800e392:	071b      	lsls	r3, r3, #28
 800e394:	f100 8131 	bmi.w	800e5fa <HAL_RCC_OscConfig+0x60a>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800e398:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800e39c:	f023 0301 	bic.w	r3, r3, #1
 800e3a0:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 800e3a4:	f7ff f854 	bl	800d450 <HAL_GetTick>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800e3a8:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800e3ac:	4605      	mov	r5, r0
 800e3ae:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800e3b2:	079f      	lsls	r7, r3, #30
 800e3b4:	f57f aeac 	bpl.w	800e110 <HAL_RCC_OscConfig+0x120>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800e3b8:	f7ff f84a 	bl	800d450 <HAL_GetTick>
 800e3bc:	1b40      	subs	r0, r0, r5
 800e3be:	2802      	cmp	r0, #2
 800e3c0:	d9f5      	bls.n	800e3ae <HAL_RCC_OscConfig+0x3be>
 800e3c2:	e65f      	b.n	800e084 <HAL_RCC_OscConfig+0x94>
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800e3c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e3c6:	2b03      	cmp	r3, #3
 800e3c8:	f200 81e3 	bhi.w	800e792 <HAL_RCC_OscConfig+0x7a2>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800e3cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e3ce:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800e3d2:	f040 8195 	bne.w	800e700 <HAL_RCC_OscConfig+0x710>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800e3d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e3d8:	3b06      	subs	r3, #6
 800e3da:	2b79      	cmp	r3, #121	; 0x79
 800e3dc:	f200 81f1 	bhi.w	800e7c2 <HAL_RCC_OscConfig+0x7d2>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800e3e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e3e2:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
 800e3e6:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 800e3ea:	f200 81e4 	bhi.w	800e7b6 <HAL_RCC_OscConfig+0x7c6>
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800e3ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e3f0:	f103 437e 	add.w	r3, r3, #4261412864	; 0xfe000000
 800e3f4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e3f8:	f200 81d7 	bhi.w	800e7aa <HAL_RCC_OscConfig+0x7ba>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800e3fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e3fe:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800e402:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800e406:	f200 81ca 	bhi.w	800e79e <HAL_RCC_OscConfig+0x7ae>
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e40a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e40c:	f007 0203 	and.w	r2, r7, #3
 800e410:	429a      	cmp	r2, r3
 800e412:	f000 8184 	beq.w	800e71e <HAL_RCC_OscConfig+0x72e>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e416:	2e0c      	cmp	r6, #12
 800e418:	d068      	beq.n	800e4ec <HAL_RCC_OscConfig+0x4fc>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800e41a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e41e:	461e      	mov	r6, r3
 800e420:	681a      	ldr	r2, [r3, #0]
 800e422:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800e426:	601a      	str	r2, [r3, #0]
            tickstart = HAL_GetTick();
 800e428:	f7ff f812 	bl	800d450 <HAL_GetTick>
 800e42c:	4605      	mov	r5, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e42e:	e005      	b.n	800e43c <HAL_RCC_OscConfig+0x44c>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e430:	f7ff f80e 	bl	800d450 <HAL_GetTick>
 800e434:	1b40      	subs	r0, r0, r5
 800e436:	2802      	cmp	r0, #2
 800e438:	f63f ae24 	bhi.w	800e084 <HAL_RCC_OscConfig+0x94>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e43c:	6833      	ldr	r3, [r6, #0]
 800e43e:	019f      	lsls	r7, r3, #6
 800e440:	d4f6      	bmi.n	800e430 <HAL_RCC_OscConfig+0x440>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e442:	e9d4 310b 	ldrd	r3, r1, [r4, #44]	; 0x2c
 800e446:	68f0      	ldr	r0, [r6, #12]
 800e448:	4a8a      	ldr	r2, [pc, #552]	; (800e674 <HAL_RCC_OscConfig+0x684>)
 800e44a:	430b      	orrs	r3, r1
 800e44c:	4002      	ands	r2, r0
 800e44e:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
 800e452:	4313      	orrs	r3, r2
 800e454:	430b      	orrs	r3, r1
 800e456:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e458:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e45a:	4303      	orrs	r3, r0
 800e45c:	430b      	orrs	r3, r1
 800e45e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e462:	60f3      	str	r3, [r6, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800e464:	6833      	ldr	r3, [r6, #0]
 800e466:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e46a:	6033      	str	r3, [r6, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800e46c:	68f3      	ldr	r3, [r6, #12]
 800e46e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e472:	60f3      	str	r3, [r6, #12]
            tickstart = HAL_GetTick();
 800e474:	f7fe ffec 	bl	800d450 <HAL_GetTick>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e478:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
            tickstart = HAL_GetTick();
 800e47c:	4604      	mov	r4, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e47e:	e005      	b.n	800e48c <HAL_RCC_OscConfig+0x49c>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e480:	f7fe ffe6 	bl	800d450 <HAL_GetTick>
 800e484:	1b00      	subs	r0, r0, r4
 800e486:	2802      	cmp	r0, #2
 800e488:	f63f adfc 	bhi.w	800e084 <HAL_RCC_OscConfig+0x94>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e48c:	682b      	ldr	r3, [r5, #0]
 800e48e:	019e      	lsls	r6, r3, #6
 800e490:	d5f6      	bpl.n	800e480 <HAL_RCC_OscConfig+0x490>
 800e492:	e6a4      	b.n	800e1de <HAL_RCC_OscConfig+0x1ee>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800e494:	f002 0203 	and.w	r2, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800e498:	2a02      	cmp	r2, #2
 800e49a:	f47f af3e 	bne.w	800e31a <HAL_RCC_OscConfig+0x32a>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800e49e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	055b      	lsls	r3, r3, #21
 800e4a6:	d501      	bpl.n	800e4ac <HAL_RCC_OscConfig+0x4bc>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e4a8:	68e3      	ldr	r3, [r4, #12]
 800e4aa:	b1fb      	cbz	r3, 800e4ec <HAL_RCC_OscConfig+0x4fc>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800e4ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e4b0:	6921      	ldr	r1, [r4, #16]
 800e4b2:	6853      	ldr	r3, [r2, #4]
 800e4b4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800e4b8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800e4bc:	6053      	str	r3, [r2, #4]
 800e4be:	6823      	ldr	r3, [r4, #0]
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800e4c0:	f013 0f18 	tst.w	r3, #24
 800e4c4:	f43f ae25 	beq.w	800e112 <HAL_RCC_OscConfig+0x122>
 800e4c8:	e5f0      	b.n	800e0ac <HAL_RCC_OscConfig+0xbc>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800e4ca:	682b      	ldr	r3, [r5, #0]
 800e4cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e4d0:	4303      	orrs	r3, r0
 800e4d2:	602b      	str	r3, [r5, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800e4d4:	686b      	ldr	r3, [r5, #4]
 800e4d6:	6a22      	ldr	r2, [r4, #32]
 800e4d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e4dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e4e0:	606b      	str	r3, [r5, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e4e2:	f7ff fcbb 	bl	800de5c <RCC_SetFlashLatencyFromMSIRange>
 800e4e6:	2800      	cmp	r0, #0
 800e4e8:	f43f aea7 	beq.w	800e23a <HAL_RCC_OscConfig+0x24a>
          return HAL_ERROR;
 800e4ec:	2001      	movs	r0, #1
}
 800e4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 800e4f0:	485f      	ldr	r0, [pc, #380]	; (800e670 <HAL_RCC_OscConfig+0x680>)
 800e4f2:	f240 118f 	movw	r1, #399	; 0x18f
 800e4f6:	f7f3 fcfb 	bl	8001ef0 <assert_failed>
 800e4fa:	e594      	b.n	800e026 <HAL_RCC_OscConfig+0x36>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800e4fc:	485c      	ldr	r0, [pc, #368]	; (800e670 <HAL_RCC_OscConfig+0x680>)
 800e4fe:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800e502:	f7f3 fcf5 	bl	8001ef0 <assert_failed>
 800e506:	6823      	ldr	r3, [r4, #0]
 800e508:	e57e      	b.n	800e008 <HAL_RCC_OscConfig+0x18>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800e50a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800e50e:	461e      	mov	r6, r3
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800e510:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800e514:	f042 0204 	orr.w	r2, r2, #4
 800e518:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        tickstart = HAL_GetTick();
 800e51c:	f7fe ff98 	bl	800d450 <HAL_GetTick>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800e520:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800e524:	071f      	lsls	r7, r3, #28
 800e526:	4605      	mov	r5, r0
 800e528:	d409      	bmi.n	800e53e <HAL_RCC_OscConfig+0x54e>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800e52a:	f7fe ff91 	bl	800d450 <HAL_GetTick>
 800e52e:	1b40      	subs	r0, r0, r5
 800e530:	2803      	cmp	r0, #3
 800e532:	f63f ada7 	bhi.w	800e084 <HAL_RCC_OscConfig+0x94>
 800e536:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800e53a:	071f      	lsls	r7, r3, #28
 800e53c:	d5f5      	bpl.n	800e52a <HAL_RCC_OscConfig+0x53a>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800e53e:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800e542:	69a2      	ldr	r2, [r4, #24]
 800e544:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800e548:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e54c:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800e550:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800e554:	f023 0301 	bic.w	r3, r3, #1
 800e558:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
        tickstart = HAL_GetTick();
 800e55c:	f7fe ff78 	bl	800d450 <HAL_GetTick>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800e560:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800e564:	4605      	mov	r5, r0
 800e566:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800e56a:	0798      	lsls	r0, r3, #30
 800e56c:	f57f add0 	bpl.w	800e110 <HAL_RCC_OscConfig+0x120>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800e570:	f7fe ff6e 	bl	800d450 <HAL_GetTick>
 800e574:	1b40      	subs	r0, r0, r5
 800e576:	2802      	cmp	r0, #2
 800e578:	d9f5      	bls.n	800e566 <HAL_RCC_OscConfig+0x576>
 800e57a:	e583      	b.n	800e084 <HAL_RCC_OscConfig+0x94>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e57c:	4b3e      	ldr	r3, [pc, #248]	; (800e678 <HAL_RCC_OscConfig+0x688>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	05db      	lsls	r3, r3, #23
 800e582:	d541      	bpl.n	800e608 <HAL_RCC_OscConfig+0x618>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800e584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e588:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800e58c:	f042 0204 	orr.w	r2, r2, #4
 800e590:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800e594:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800e598:	f042 0201 	orr.w	r2, r2, #1
 800e59c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      tickstart = HAL_GetTick();
 800e5a0:	f7fe ff56 	bl	800d450 <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800e5a4:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800e5a8:	4605      	mov	r5, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e5aa:	f241 3788 	movw	r7, #5000	; 0x1388
 800e5ae:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800e5b2:	079a      	lsls	r2, r3, #30
 800e5b4:	f53f ade9 	bmi.w	800e18a <HAL_RCC_OscConfig+0x19a>
 800e5b8:	f7fe ff4a 	bl	800d450 <HAL_GetTick>
 800e5bc:	1b40      	subs	r0, r0, r5
 800e5be:	42b8      	cmp	r0, r7
 800e5c0:	d9f5      	bls.n	800e5ae <HAL_RCC_OscConfig+0x5be>
 800e5c2:	e55f      	b.n	800e084 <HAL_RCC_OscConfig+0x94>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800e5c4:	482a      	ldr	r0, [pc, #168]	; (800e670 <HAL_RCC_OscConfig+0x680>)
 800e5c6:	f44f 710c 	mov.w	r1, #560	; 0x230
 800e5ca:	f7f3 fc91 	bl	8001ef0 <assert_failed>
 800e5ce:	e698      	b.n	800e302 <HAL_RCC_OscConfig+0x312>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800e5d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e5d4:	6813      	ldr	r3, [r2, #0]
 800e5d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e5da:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800e5dc:	f7fe ff38 	bl	800d450 <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800e5e0:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800e5e4:	4605      	mov	r5, r0
 800e5e6:	6833      	ldr	r3, [r6, #0]
 800e5e8:	0398      	lsls	r0, r3, #14
 800e5ea:	f53f ae7e 	bmi.w	800e2ea <HAL_RCC_OscConfig+0x2fa>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e5ee:	f7fe ff2f 	bl	800d450 <HAL_GetTick>
 800e5f2:	1b40      	subs	r0, r0, r5
 800e5f4:	2864      	cmp	r0, #100	; 0x64
 800e5f6:	d9f6      	bls.n	800e5e6 <HAL_RCC_OscConfig+0x5f6>
 800e5f8:	e544      	b.n	800e084 <HAL_RCC_OscConfig+0x94>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800e5fa:	f7fe ff29 	bl	800d450 <HAL_GetTick>
 800e5fe:	1b40      	subs	r0, r0, r5
 800e600:	2803      	cmp	r0, #3
 800e602:	f67f aec4 	bls.w	800e38e <HAL_RCC_OscConfig+0x39e>
 800e606:	e53d      	b.n	800e084 <HAL_RCC_OscConfig+0x94>
      HAL_PWR_EnableBkUpAccess();
 800e608:	f7ff fc10 	bl	800de2c <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 800e60c:	f7fe ff20 	bl	800d450 <HAL_GetTick>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e610:	4e19      	ldr	r6, [pc, #100]	; (800e678 <HAL_RCC_OscConfig+0x688>)
      tickstart = HAL_GetTick();
 800e612:	4605      	mov	r5, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e614:	6833      	ldr	r3, [r6, #0]
 800e616:	05d9      	lsls	r1, r3, #23
 800e618:	f53f ad8d 	bmi.w	800e136 <HAL_RCC_OscConfig+0x146>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e61c:	f7fe ff18 	bl	800d450 <HAL_GetTick>
 800e620:	1b40      	subs	r0, r0, r5
 800e622:	2802      	cmp	r0, #2
 800e624:	d9f6      	bls.n	800e614 <HAL_RCC_OscConfig+0x624>
 800e626:	e52d      	b.n	800e084 <HAL_RCC_OscConfig+0x94>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800e628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800e62c:	461e      	mov	r6, r3
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800e62e:	681a      	ldr	r2, [r3, #0]
 800e630:	f022 0201 	bic.w	r2, r2, #1
 800e634:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800e636:	f7fe ff0b 	bl	800d450 <HAL_GetTick>
 800e63a:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800e63c:	6833      	ldr	r3, [r6, #0]
 800e63e:	079f      	lsls	r7, r3, #30
 800e640:	f57f ae11 	bpl.w	800e266 <HAL_RCC_OscConfig+0x276>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e644:	f7fe ff04 	bl	800d450 <HAL_GetTick>
 800e648:	1b40      	subs	r0, r0, r5
 800e64a:	2802      	cmp	r0, #2
 800e64c:	d9f6      	bls.n	800e63c <HAL_RCC_OscConfig+0x64c>
 800e64e:	e519      	b.n	800e084 <HAL_RCC_OscConfig+0x94>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800e650:	686b      	ldr	r3, [r5, #4]
 800e652:	6922      	ldr	r2, [r4, #16]
 800e654:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800e658:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e65c:	606b      	str	r3, [r5, #4]
 800e65e:	6823      	ldr	r3, [r4, #0]
}
 800e660:	e521      	b.n	800e0a6 <HAL_RCC_OscConfig+0xb6>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e662:	f7fe fef5 	bl	800d450 <HAL_GetTick>
 800e666:	1b40      	subs	r0, r0, r5
 800e668:	2802      	cmp	r0, #2
 800e66a:	f67f ad17 	bls.w	800e09c <HAL_RCC_OscConfig+0xac>
 800e66e:	e509      	b.n	800e084 <HAL_RCC_OscConfig+0x94>
 800e670:	080163e4 	.word	0x080163e4
 800e674:	11c1808c 	.word	0x11c1808c
 800e678:	58000400 	.word	0x58000400
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800e67c:	682b      	ldr	r3, [r5, #0]
 800e67e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e680:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e684:	4313      	orrs	r3, r2
 800e686:	602b      	str	r3, [r5, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800e688:	686b      	ldr	r3, [r5, #4]
 800e68a:	6a22      	ldr	r2, [r4, #32]
 800e68c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e690:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e694:	606b      	str	r3, [r5, #4]
 800e696:	e5e6      	b.n	800e266 <HAL_RCC_OscConfig+0x276>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800e698:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e69c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800e6a0:	f043 0301 	orr.w	r3, r3, #1
 800e6a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800e6a8:	e77a      	b.n	800e5a0 <HAL_RCC_OscConfig+0x5b0>
    return HAL_ERROR;
 800e6aa:	2001      	movs	r0, #1
}
 800e6ac:	4770      	bx	lr
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800e6ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800e6b2:	461e      	mov	r6, r3
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800e6b4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800e6b8:	f042 0201 	orr.w	r2, r2, #1
 800e6bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        tickstart = HAL_GetTick();
 800e6c0:	f7fe fec6 	bl	800d450 <HAL_GetTick>
 800e6c4:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800e6c6:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800e6ca:	0799      	lsls	r1, r3, #30
 800e6cc:	d405      	bmi.n	800e6da <HAL_RCC_OscConfig+0x6ea>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800e6ce:	f7fe febf 	bl	800d450 <HAL_GetTick>
 800e6d2:	1b40      	subs	r0, r0, r5
 800e6d4:	2802      	cmp	r0, #2
 800e6d6:	d9f6      	bls.n	800e6c6 <HAL_RCC_OscConfig+0x6d6>
 800e6d8:	e4d4      	b.n	800e084 <HAL_RCC_OscConfig+0x94>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800e6da:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800e6de:	f023 0304 	bic.w	r3, r3, #4
 800e6e2:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800e6e6:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800e6ea:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800e6ee:	071a      	lsls	r2, r3, #28
 800e6f0:	f57f ad0e 	bpl.w	800e110 <HAL_RCC_OscConfig+0x120>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800e6f4:	f7fe feac 	bl	800d450 <HAL_GetTick>
 800e6f8:	1b40      	subs	r0, r0, r5
 800e6fa:	2803      	cmp	r0, #3
 800e6fc:	d9f5      	bls.n	800e6ea <HAL_RCC_OscConfig+0x6fa>
 800e6fe:	e4c1      	b.n	800e084 <HAL_RCC_OscConfig+0x94>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800e700:	2b40      	cmp	r3, #64	; 0x40
 800e702:	f43f ae68 	beq.w	800e3d6 <HAL_RCC_OscConfig+0x3e6>
 800e706:	4832      	ldr	r0, [pc, #200]	; (800e7d0 <HAL_RCC_OscConfig+0x7e0>)
 800e708:	f240 316d 	movw	r1, #877	; 0x36d
 800e70c:	f7f3 fbf0 	bl	8001ef0 <assert_failed>
 800e710:	e661      	b.n	800e3d6 <HAL_RCC_OscConfig+0x3e6>
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));
 800e712:	482f      	ldr	r0, [pc, #188]	; (800e7d0 <HAL_RCC_OscConfig+0x7e0>)
 800e714:	f44f 711f 	mov.w	r1, #636	; 0x27c
 800e718:	f7f3 fbea 	bl	8001ef0 <assert_failed>
 800e71c:	e4dd      	b.n	800e0da <HAL_RCC_OscConfig+0xea>
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e71e:	6b23      	ldr	r3, [r4, #48]	; 0x30
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e720:	f007 0270 	and.w	r2, r7, #112	; 0x70
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e724:	429a      	cmp	r2, r3
 800e726:	f47f ae76 	bne.w	800e416 <HAL_RCC_OscConfig+0x426>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e72a:	6b63      	ldr	r3, [r4, #52]	; 0x34
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800e72c:	f3c7 2206 	ubfx	r2, r7, #8, #7
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e730:	429a      	cmp	r2, r3
 800e732:	f47f ae70 	bne.w	800e416 <HAL_RCC_OscConfig+0x426>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800e736:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800e738:	f407 1278 	and.w	r2, r7, #4063232	; 0x3e0000
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800e73c:	429a      	cmp	r2, r3
 800e73e:	f47f ae6a 	bne.w	800e416 <HAL_RCC_OscConfig+0x426>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800e742:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800e744:	f007 6260 	and.w	r2, r7, #234881024	; 0xe000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800e748:	429a      	cmp	r2, r3
 800e74a:	f47f ae64 	bne.w	800e416 <HAL_RCC_OscConfig+0x426>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800e74e:	6c23      	ldr	r3, [r4, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800e750:	f007 4760 	and.w	r7, r7, #3758096384	; 0xe0000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800e754:	429f      	cmp	r7, r3
 800e756:	f47f ae5e 	bne.w	800e416 <HAL_RCC_OscConfig+0x426>
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e75a:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800e75e:	6823      	ldr	r3, [r4, #0]
 800e760:	0198      	lsls	r0, r3, #6
 800e762:	f53f ad3c 	bmi.w	800e1de <HAL_RCC_OscConfig+0x1ee>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800e766:	6823      	ldr	r3, [r4, #0]
 800e768:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e76c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800e76e:	68e3      	ldr	r3, [r4, #12]
 800e770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e774:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 800e776:	f7fe fe6b 	bl	800d450 <HAL_GetTick>
 800e77a:	4605      	mov	r5, r0
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e77c:	e005      	b.n	800e78a <HAL_RCC_OscConfig+0x79a>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e77e:	f7fe fe67 	bl	800d450 <HAL_GetTick>
 800e782:	1b40      	subs	r0, r0, r5
 800e784:	2802      	cmp	r0, #2
 800e786:	f63f ac7d 	bhi.w	800e084 <HAL_RCC_OscConfig+0x94>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e78a:	6823      	ldr	r3, [r4, #0]
 800e78c:	0199      	lsls	r1, r3, #6
 800e78e:	d5f6      	bpl.n	800e77e <HAL_RCC_OscConfig+0x78e>
 800e790:	e525      	b.n	800e1de <HAL_RCC_OscConfig+0x1ee>
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800e792:	480f      	ldr	r0, [pc, #60]	; (800e7d0 <HAL_RCC_OscConfig+0x7e0>)
 800e794:	f44f 715b 	mov.w	r1, #876	; 0x36c
 800e798:	f7f3 fbaa 	bl	8001ef0 <assert_failed>
 800e79c:	e616      	b.n	800e3cc <HAL_RCC_OscConfig+0x3dc>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800e79e:	480c      	ldr	r0, [pc, #48]	; (800e7d0 <HAL_RCC_OscConfig+0x7e0>)
 800e7a0:	f240 3171 	movw	r1, #881	; 0x371
 800e7a4:	f7f3 fba4 	bl	8001ef0 <assert_failed>
 800e7a8:	e62f      	b.n	800e40a <HAL_RCC_OscConfig+0x41a>
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800e7aa:	4809      	ldr	r0, [pc, #36]	; (800e7d0 <HAL_RCC_OscConfig+0x7e0>)
 800e7ac:	f44f 715c 	mov.w	r1, #880	; 0x370
 800e7b0:	f7f3 fb9e 	bl	8001ef0 <assert_failed>
 800e7b4:	e622      	b.n	800e3fc <HAL_RCC_OscConfig+0x40c>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800e7b6:	4806      	ldr	r0, [pc, #24]	; (800e7d0 <HAL_RCC_OscConfig+0x7e0>)
 800e7b8:	f240 316f 	movw	r1, #879	; 0x36f
 800e7bc:	f7f3 fb98 	bl	8001ef0 <assert_failed>
 800e7c0:	e615      	b.n	800e3ee <HAL_RCC_OscConfig+0x3fe>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800e7c2:	4803      	ldr	r0, [pc, #12]	; (800e7d0 <HAL_RCC_OscConfig+0x7e0>)
 800e7c4:	f240 316e 	movw	r1, #878	; 0x36e
 800e7c8:	f7f3 fb92 	bl	8001ef0 <assert_failed>
 800e7cc:	e608      	b.n	800e3e0 <HAL_RCC_OscConfig+0x3f0>
 800e7ce:	bf00      	nop
 800e7d0:	080163e4 	.word	0x080163e4

0800e7d4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800e7d4:	2800      	cmp	r0, #0
 800e7d6:	f000 81aa 	beq.w	800eb2e <HAL_RCC_ClockConfig+0x35a>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800e7da:	6803      	ldr	r3, [r0, #0]
 800e7dc:	3b01      	subs	r3, #1
 800e7de:	2b6e      	cmp	r3, #110	; 0x6e
{
 800e7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7e4:	460d      	mov	r5, r1
 800e7e6:	4604      	mov	r4, r0
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800e7e8:	f200 8162 	bhi.w	800eab0 <HAL_RCC_ClockConfig+0x2dc>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800e7ec:	2d03      	cmp	r5, #3
 800e7ee:	f200 8159 	bhi.w	800eaa4 <HAL_RCC_ClockConfig+0x2d0>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e7f2:	4ec3      	ldr	r6, [pc, #780]	; (800eb00 <HAL_RCC_ClockConfig+0x32c>)
 800e7f4:	6833      	ldr	r3, [r6, #0]
 800e7f6:	f003 0307 	and.w	r3, r3, #7
 800e7fa:	42ab      	cmp	r3, r5
 800e7fc:	f0c0 813e 	bcc.w	800ea7c <HAL_RCC_ClockConfig+0x2a8>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e800:	6823      	ldr	r3, [r4, #0]
 800e802:	079a      	lsls	r2, r3, #30
 800e804:	d529      	bpl.n	800e85a <HAL_RCC_ClockConfig+0x86>
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
 800e806:	68a2      	ldr	r2, [r4, #8]
 800e808:	f032 0190 	bics.w	r1, r2, #144	; 0x90
 800e80c:	f022 0310 	bic.w	r3, r2, #16
 800e810:	d013      	beq.n	800e83a <HAL_RCC_ClockConfig+0x66>
 800e812:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 800e816:	2920      	cmp	r1, #32
 800e818:	d00f      	beq.n	800e83a <HAL_RCC_ClockConfig+0x66>
 800e81a:	f022 0120 	bic.w	r1, r2, #32
 800e81e:	2950      	cmp	r1, #80	; 0x50
 800e820:	d00b      	beq.n	800e83a <HAL_RCC_ClockConfig+0x66>
 800e822:	f022 0150 	bic.w	r1, r2, #80	; 0x50
 800e826:	29a0      	cmp	r1, #160	; 0xa0
 800e828:	d007      	beq.n	800e83a <HAL_RCC_ClockConfig+0x66>
 800e82a:	2bc0      	cmp	r3, #192	; 0xc0
 800e82c:	d005      	beq.n	800e83a <HAL_RCC_ClockConfig+0x66>
 800e82e:	48b5      	ldr	r0, [pc, #724]	; (800eb04 <HAL_RCC_ClockConfig+0x330>)
 800e830:	f240 4149 	movw	r1, #1097	; 0x449
 800e834:	f7f3 fb5c 	bl	8001ef0 <assert_failed>
 800e838:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800e83a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800e83e:	460e      	mov	r6, r1
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800e840:	688b      	ldr	r3, [r1, #8]
 800e842:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e846:	4313      	orrs	r3, r2
 800e848:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800e84a:	f7fe fe01 	bl	800d450 <HAL_GetTick>
 800e84e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800e850:	68b3      	ldr	r3, [r6, #8]
 800e852:	03db      	lsls	r3, r3, #15
 800e854:	f140 80ed 	bpl.w	800ea32 <HAL_RCC_ClockConfig+0x25e>
 800e858:	6823      	ldr	r3, [r4, #0]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800e85a:	0698      	lsls	r0, r3, #26
 800e85c:	d52c      	bpl.n	800e8b8 <HAL_RCC_ClockConfig+0xe4>
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
 800e85e:	6962      	ldr	r2, [r4, #20]
 800e860:	f032 0190 	bics.w	r1, r2, #144	; 0x90
 800e864:	f022 0310 	bic.w	r3, r2, #16
 800e868:	d013      	beq.n	800e892 <HAL_RCC_ClockConfig+0xbe>
 800e86a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 800e86e:	2920      	cmp	r1, #32
 800e870:	d00f      	beq.n	800e892 <HAL_RCC_ClockConfig+0xbe>
 800e872:	f022 0120 	bic.w	r1, r2, #32
 800e876:	2950      	cmp	r1, #80	; 0x50
 800e878:	d00b      	beq.n	800e892 <HAL_RCC_ClockConfig+0xbe>
 800e87a:	f022 0150 	bic.w	r1, r2, #80	; 0x50
 800e87e:	29a0      	cmp	r1, #160	; 0xa0
 800e880:	d007      	beq.n	800e892 <HAL_RCC_ClockConfig+0xbe>
 800e882:	2bc0      	cmp	r3, #192	; 0xc0
 800e884:	d005      	beq.n	800e892 <HAL_RCC_ClockConfig+0xbe>
 800e886:	489f      	ldr	r0, [pc, #636]	; (800eb04 <HAL_RCC_ClockConfig+0x330>)
 800e888:	f240 415a 	movw	r1, #1114	; 0x45a
 800e88c:	f7f3 fb30 	bl	8001ef0 <assert_failed>
 800e890:	6962      	ldr	r2, [r4, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800e892:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800e896:	460e      	mov	r6, r1
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800e898:	f8d1 3108 	ldr.w	r3, [r1, #264]	; 0x108
 800e89c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e8a0:	4313      	orrs	r3, r2
 800e8a2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 800e8a6:	f7fe fdd3 	bl	800d450 <HAL_GetTick>
 800e8aa:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800e8ac:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 800e8b0:	0399      	lsls	r1, r3, #14
 800e8b2:	f140 80c7 	bpl.w	800ea44 <HAL_RCC_ClockConfig+0x270>
 800e8b6:	6823      	ldr	r3, [r4, #0]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800e8b8:	065a      	lsls	r2, r3, #25
 800e8ba:	d52d      	bpl.n	800e918 <HAL_RCC_ClockConfig+0x144>
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
 800e8bc:	69a2      	ldr	r2, [r4, #24]
 800e8be:	f032 0190 	bics.w	r1, r2, #144	; 0x90
 800e8c2:	f022 0310 	bic.w	r3, r2, #16
 800e8c6:	d013      	beq.n	800e8f0 <HAL_RCC_ClockConfig+0x11c>
 800e8c8:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 800e8cc:	2920      	cmp	r1, #32
 800e8ce:	d00f      	beq.n	800e8f0 <HAL_RCC_ClockConfig+0x11c>
 800e8d0:	f022 0120 	bic.w	r1, r2, #32
 800e8d4:	2950      	cmp	r1, #80	; 0x50
 800e8d6:	d00b      	beq.n	800e8f0 <HAL_RCC_ClockConfig+0x11c>
 800e8d8:	f022 0150 	bic.w	r1, r2, #80	; 0x50
 800e8dc:	29a0      	cmp	r1, #160	; 0xa0
 800e8de:	d007      	beq.n	800e8f0 <HAL_RCC_ClockConfig+0x11c>
 800e8e0:	2bc0      	cmp	r3, #192	; 0xc0
 800e8e2:	d005      	beq.n	800e8f0 <HAL_RCC_ClockConfig+0x11c>
 800e8e4:	4887      	ldr	r0, [pc, #540]	; (800eb04 <HAL_RCC_ClockConfig+0x330>)
 800e8e6:	f240 416a 	movw	r1, #1130	; 0x46a
 800e8ea:	f7f3 fb01 	bl	8001ef0 <assert_failed>
 800e8ee:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800e8f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800e8f4:	460e      	mov	r6, r1
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800e8f6:	f8d1 3108 	ldr.w	r3, [r1, #264]	; 0x108
 800e8fa:	f023 030f 	bic.w	r3, r3, #15
 800e8fe:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 800e902:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 800e906:	f7fe fda3 	bl	800d450 <HAL_GetTick>
 800e90a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800e90c:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 800e910:	03db      	lsls	r3, r3, #15
 800e912:	f140 809e 	bpl.w	800ea52 <HAL_RCC_ClockConfig+0x27e>
 800e916:	6823      	ldr	r3, [r4, #0]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e918:	0758      	lsls	r0, r3, #29
 800e91a:	d514      	bpl.n	800e946 <HAL_RCC_ClockConfig+0x172>
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
 800e91c:	68e1      	ldr	r1, [r4, #12]
 800e91e:	f431 6380 	bics.w	r3, r1, #1024	; 0x400
 800e922:	f040 80cb 	bne.w	800eabc <HAL_RCC_ClockConfig+0x2e8>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800e926:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800e92a:	4616      	mov	r6, r2
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800e92c:	6893      	ldr	r3, [r2, #8]
 800e92e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800e932:	430b      	orrs	r3, r1
 800e934:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800e936:	f7fe fd8b 	bl	800d450 <HAL_GetTick>
 800e93a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800e93c:	68b3      	ldr	r3, [r6, #8]
 800e93e:	0399      	lsls	r1, r3, #14
 800e940:	f140 808e 	bpl.w	800ea60 <HAL_RCC_ClockConfig+0x28c>
 800e944:	6823      	ldr	r3, [r4, #0]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e946:	071a      	lsls	r2, r3, #28
 800e948:	d514      	bpl.n	800e974 <HAL_RCC_ClockConfig+0x1a0>
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
 800e94a:	6921      	ldr	r1, [r4, #16]
 800e94c:	f431 6380 	bics.w	r3, r1, #1024	; 0x400
 800e950:	f040 80c5 	bne.w	800eade <HAL_RCC_ClockConfig+0x30a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800e954:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800e958:	4616      	mov	r6, r2
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800e95a:	6893      	ldr	r3, [r2, #8]
 800e95c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800e960:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800e964:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800e966:	f7fe fd73 	bl	800d450 <HAL_GetTick>
 800e96a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800e96c:	68b3      	ldr	r3, [r6, #8]
 800e96e:	035b      	lsls	r3, r3, #13
 800e970:	d57d      	bpl.n	800ea6e <HAL_RCC_ClockConfig+0x29a>
 800e972:	6823      	ldr	r3, [r4, #0]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e974:	07df      	lsls	r7, r3, #31
 800e976:	d52f      	bpl.n	800e9d8 <HAL_RCC_ClockConfig+0x204>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800e978:	6863      	ldr	r3, [r4, #4]
 800e97a:	2b03      	cmp	r3, #3
 800e97c:	f200 80c8 	bhi.w	800eb10 <HAL_RCC_ClockConfig+0x33c>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800e980:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e984:	2b02      	cmp	r3, #2
 800e986:	6812      	ldr	r2, [r2, #0]
 800e988:	d00a      	beq.n	800e9a0 <HAL_RCC_ClockConfig+0x1cc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e98a:	2b03      	cmp	r3, #3
 800e98c:	f000 80c7 	beq.w	800eb1e <HAL_RCC_ClockConfig+0x34a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800e990:	2b00      	cmp	r3, #0
 800e992:	f040 80c8 	bne.w	800eb26 <HAL_RCC_ClockConfig+0x352>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800e996:	0791      	lsls	r1, r2, #30
 800e998:	d404      	bmi.n	800e9a4 <HAL_RCC_ClockConfig+0x1d0>
    return HAL_ERROR;
 800e99a:	2001      	movs	r0, #1
}
 800e99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800e9a0:	0396      	lsls	r6, r2, #14
 800e9a2:	d5fa      	bpl.n	800e99a <HAL_RCC_ClockConfig+0x1c6>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800e9a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800e9a8:	460f      	mov	r7, r1
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800e9aa:	688a      	ldr	r2, [r1, #8]
 800e9ac:	f022 0203 	bic.w	r2, r2, #3
 800e9b0:	4313      	orrs	r3, r2
 800e9b2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800e9b4:	f7fe fd4c 	bl	800d450 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e9b8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800e9bc:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e9be:	e004      	b.n	800e9ca <HAL_RCC_ClockConfig+0x1f6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e9c0:	f7fe fd46 	bl	800d450 <HAL_GetTick>
 800e9c4:	1b80      	subs	r0, r0, r6
 800e9c6:	4540      	cmp	r0, r8
 800e9c8:	d839      	bhi.n	800ea3e <HAL_RCC_ClockConfig+0x26a>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800e9ca:	68bb      	ldr	r3, [r7, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e9cc:	6862      	ldr	r2, [r4, #4]
 800e9ce:	f003 030c 	and.w	r3, r3, #12
 800e9d2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800e9d6:	d1f3      	bne.n	800e9c0 <HAL_RCC_ClockConfig+0x1ec>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e9d8:	4c49      	ldr	r4, [pc, #292]	; (800eb00 <HAL_RCC_ClockConfig+0x32c>)
 800e9da:	6823      	ldr	r3, [r4, #0]
 800e9dc:	f003 0307 	and.w	r3, r3, #7
 800e9e0:	42ab      	cmp	r3, r5
 800e9e2:	d912      	bls.n	800ea0a <HAL_RCC_ClockConfig+0x236>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e9e4:	6823      	ldr	r3, [r4, #0]
 800e9e6:	f023 0307 	bic.w	r3, r3, #7
 800e9ea:	432b      	orrs	r3, r5
 800e9ec:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800e9ee:	f7fe fd2f 	bl	800d450 <HAL_GetTick>
 800e9f2:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e9f4:	e004      	b.n	800ea00 <HAL_RCC_ClockConfig+0x22c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800e9f6:	f7fe fd2b 	bl	800d450 <HAL_GetTick>
 800e9fa:	1b80      	subs	r0, r0, r6
 800e9fc:	2802      	cmp	r0, #2
 800e9fe:	d81e      	bhi.n	800ea3e <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ea00:	6823      	ldr	r3, [r4, #0]
 800ea02:	f003 0307 	and.w	r3, r3, #7
 800ea06:	42ab      	cmp	r3, r5
 800ea08:	d1f5      	bne.n	800e9f6 <HAL_RCC_ClockConfig+0x222>
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800ea0a:	f7ff fa9d 	bl	800df48 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800ea0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ea12:	493d      	ldr	r1, [pc, #244]	; (800eb08 <HAL_RCC_ClockConfig+0x334>)
 800ea14:	689b      	ldr	r3, [r3, #8]
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800ea16:	4a3d      	ldr	r2, [pc, #244]	; (800eb0c <HAL_RCC_ClockConfig+0x338>)
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800ea18:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800ea1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ea20:	fbb0 f0f3 	udiv	r0, r0, r3
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800ea24:	6010      	str	r0, [r2, #0]
  return HAL_InitTick(HAL_GetTickPrio());
 800ea26:	f7fe fd19 	bl	800d45c <HAL_GetTickPrio>
}
 800ea2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(HAL_GetTickPrio());
 800ea2e:	f7fe bcc5 	b.w	800d3bc <HAL_InitTick>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ea32:	f7fe fd0d 	bl	800d450 <HAL_GetTick>
 800ea36:	1bc0      	subs	r0, r0, r7
 800ea38:	2802      	cmp	r0, #2
 800ea3a:	f67f af09 	bls.w	800e850 <HAL_RCC_ClockConfig+0x7c>
        return HAL_TIMEOUT;
 800ea3e:	2003      	movs	r0, #3
}
 800ea40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ea44:	f7fe fd04 	bl	800d450 <HAL_GetTick>
 800ea48:	1bc0      	subs	r0, r0, r7
 800ea4a:	2802      	cmp	r0, #2
 800ea4c:	f67f af2e 	bls.w	800e8ac <HAL_RCC_ClockConfig+0xd8>
 800ea50:	e7f5      	b.n	800ea3e <HAL_RCC_ClockConfig+0x26a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ea52:	f7fe fcfd 	bl	800d450 <HAL_GetTick>
 800ea56:	1bc0      	subs	r0, r0, r7
 800ea58:	2802      	cmp	r0, #2
 800ea5a:	f67f af57 	bls.w	800e90c <HAL_RCC_ClockConfig+0x138>
 800ea5e:	e7ee      	b.n	800ea3e <HAL_RCC_ClockConfig+0x26a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ea60:	f7fe fcf6 	bl	800d450 <HAL_GetTick>
 800ea64:	1bc0      	subs	r0, r0, r7
 800ea66:	2802      	cmp	r0, #2
 800ea68:	f67f af68 	bls.w	800e93c <HAL_RCC_ClockConfig+0x168>
 800ea6c:	e7e7      	b.n	800ea3e <HAL_RCC_ClockConfig+0x26a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ea6e:	f7fe fcef 	bl	800d450 <HAL_GetTick>
 800ea72:	1bc0      	subs	r0, r0, r7
 800ea74:	2802      	cmp	r0, #2
 800ea76:	f67f af79 	bls.w	800e96c <HAL_RCC_ClockConfig+0x198>
 800ea7a:	e7e0      	b.n	800ea3e <HAL_RCC_ClockConfig+0x26a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ea7c:	6833      	ldr	r3, [r6, #0]
 800ea7e:	f023 0307 	bic.w	r3, r3, #7
 800ea82:	432b      	orrs	r3, r5
 800ea84:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800ea86:	f7fe fce3 	bl	800d450 <HAL_GetTick>
 800ea8a:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ea8c:	6833      	ldr	r3, [r6, #0]
 800ea8e:	f003 0307 	and.w	r3, r3, #7
 800ea92:	42ab      	cmp	r3, r5
 800ea94:	f43f aeb4 	beq.w	800e800 <HAL_RCC_ClockConfig+0x2c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800ea98:	f7fe fcda 	bl	800d450 <HAL_GetTick>
 800ea9c:	1bc0      	subs	r0, r0, r7
 800ea9e:	2802      	cmp	r0, #2
 800eaa0:	d9f4      	bls.n	800ea8c <HAL_RCC_ClockConfig+0x2b8>
 800eaa2:	e7cc      	b.n	800ea3e <HAL_RCC_ClockConfig+0x26a>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800eaa4:	4817      	ldr	r0, [pc, #92]	; (800eb04 <HAL_RCC_ClockConfig+0x330>)
 800eaa6:	f240 412c 	movw	r1, #1068	; 0x42c
 800eaaa:	f7f3 fa21 	bl	8001ef0 <assert_failed>
 800eaae:	e6a0      	b.n	800e7f2 <HAL_RCC_ClockConfig+0x1e>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800eab0:	4814      	ldr	r0, [pc, #80]	; (800eb04 <HAL_RCC_ClockConfig+0x330>)
 800eab2:	f240 412b 	movw	r1, #1067	; 0x42b
 800eab6:	f7f3 fa1b 	bl	8001ef0 <assert_failed>
 800eaba:	e697      	b.n	800e7ec <HAL_RCC_ClockConfig+0x18>
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
 800eabc:	f421 7300 	bic.w	r3, r1, #512	; 0x200
 800eac0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800eac4:	f43f af2f 	beq.w	800e926 <HAL_RCC_ClockConfig+0x152>
 800eac8:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 800eacc:	f43f af2b 	beq.w	800e926 <HAL_RCC_ClockConfig+0x152>
 800ead0:	f240 417b 	movw	r1, #1147	; 0x47b
 800ead4:	480b      	ldr	r0, [pc, #44]	; (800eb04 <HAL_RCC_ClockConfig+0x330>)
 800ead6:	f7f3 fa0b 	bl	8001ef0 <assert_failed>
 800eada:	68e1      	ldr	r1, [r4, #12]
 800eadc:	e723      	b.n	800e926 <HAL_RCC_ClockConfig+0x152>
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
 800eade:	f421 7300 	bic.w	r3, r1, #512	; 0x200
 800eae2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800eae6:	f43f af35 	beq.w	800e954 <HAL_RCC_ClockConfig+0x180>
 800eaea:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 800eaee:	f43f af31 	beq.w	800e954 <HAL_RCC_ClockConfig+0x180>
 800eaf2:	f240 418c 	movw	r1, #1164	; 0x48c
 800eaf6:	4803      	ldr	r0, [pc, #12]	; (800eb04 <HAL_RCC_ClockConfig+0x330>)
 800eaf8:	f7f3 f9fa 	bl	8001ef0 <assert_failed>
 800eafc:	6921      	ldr	r1, [r4, #16]
 800eafe:	e729      	b.n	800e954 <HAL_RCC_ClockConfig+0x180>
 800eb00:	58004000 	.word	0x58004000
 800eb04:	080163e4 	.word	0x080163e4
 800eb08:	08016188 	.word	0x08016188
 800eb0c:	20000128 	.word	0x20000128
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800eb10:	4808      	ldr	r0, [pc, #32]	; (800eb34 <HAL_RCC_ClockConfig+0x360>)
 800eb12:	f240 419d 	movw	r1, #1181	; 0x49d
 800eb16:	f7f3 f9eb 	bl	8001ef0 <assert_failed>
 800eb1a:	6863      	ldr	r3, [r4, #4]
 800eb1c:	e730      	b.n	800e980 <HAL_RCC_ClockConfig+0x1ac>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800eb1e:	0190      	lsls	r0, r2, #6
 800eb20:	f53f af40 	bmi.w	800e9a4 <HAL_RCC_ClockConfig+0x1d0>
 800eb24:	e739      	b.n	800e99a <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800eb26:	0552      	lsls	r2, r2, #21
 800eb28:	f57f af37 	bpl.w	800e99a <HAL_RCC_ClockConfig+0x1c6>
 800eb2c:	e73a      	b.n	800e9a4 <HAL_RCC_ClockConfig+0x1d0>
    return HAL_ERROR;
 800eb2e:	2001      	movs	r0, #1
}
 800eb30:	4770      	bx	lr
 800eb32:	bf00      	nop
 800eb34:	080163e4 	.word	0x080163e4

0800eb38 <HAL_RCC_GetHCLKFreq>:
{
 800eb38:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800eb3a:	f7ff fa05 	bl	800df48 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800eb3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eb42:	4a04      	ldr	r2, [pc, #16]	; (800eb54 <HAL_RCC_GetHCLKFreq+0x1c>)
 800eb44:	689b      	ldr	r3, [r3, #8]
 800eb46:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800eb4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800eb4e:	fbb0 f0f3 	udiv	r0, r0, r3
 800eb52:	bd08      	pop	{r3, pc}
 800eb54:	08016188 	.word	0x08016188

0800eb58 <HAL_RCC_GetPCLK1Freq>:
{
 800eb58:	b510      	push	{r4, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800eb5a:	f7ff f9f5 	bl	800df48 <HAL_RCC_GetSysClockFreq>
 800eb5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800eb62:	4c09      	ldr	r4, [pc, #36]	; (800eb88 <HAL_RCC_GetPCLK1Freq+0x30>)
 800eb64:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800eb66:	689b      	ldr	r3, [r3, #8]
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800eb68:	4908      	ldr	r1, [pc, #32]	; (800eb8c <HAL_RCC_GetPCLK1Freq+0x34>)
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800eb6a:	f3c3 2302 	ubfx	r3, r3, #8, #3
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800eb6e:	f3c2 1203 	ubfx	r2, r2, #4, #4
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800eb72:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800eb76:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800eb7a:	fbb0 f0f2 	udiv	r0, r0, r2
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800eb7e:	f003 031f 	and.w	r3, r3, #31
}
 800eb82:	40d8      	lsrs	r0, r3
 800eb84:	bd10      	pop	{r4, pc}
 800eb86:	bf00      	nop
 800eb88:	080161c8 	.word	0x080161c8
 800eb8c:	08016188 	.word	0x08016188

0800eb90 <HAL_RCC_GetPCLK2Freq>:
{
 800eb90:	b510      	push	{r4, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800eb92:	f7ff f9d9 	bl	800df48 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800eb96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800eb9a:	4c09      	ldr	r4, [pc, #36]	; (800ebc0 <HAL_RCC_GetPCLK2Freq+0x30>)
 800eb9c:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800eb9e:	689b      	ldr	r3, [r3, #8]
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800eba0:	4908      	ldr	r1, [pc, #32]	; (800ebc4 <HAL_RCC_GetPCLK2Freq+0x34>)
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800eba2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800eba6:	f3c2 1203 	ubfx	r2, r2, #4, #4
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800ebaa:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800ebae:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ebb2:	fbb0 f0f2 	udiv	r0, r0, r2
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800ebb6:	f003 031f 	and.w	r3, r3, #31
}
 800ebba:	40d8      	lsrs	r0, r3
 800ebbc:	bd10      	pop	{r4, pc}
 800ebbe:	bf00      	nop
 800ebc0:	080161c8 	.word	0x080161c8
 800ebc4:	08016188 	.word	0x08016188

0800ebc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ebc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800ebca:	6803      	ldr	r3, [r0, #0]
 800ebcc:	f641 6237 	movw	r2, #7735	; 0x1e37
 800ebd0:	4213      	tst	r3, r2
{
 800ebd2:	4604      	mov	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800ebd4:	f000 8102 	beq.w	800eddc <HAL_RCCEx_PeriphCLKConfig+0x214>
 800ebd8:	f423 52f1 	bic.w	r2, r3, #7712	; 0x1e20
 800ebdc:	f022 0217 	bic.w	r2, r2, #23
 800ebe0:	2a00      	cmp	r2, #0
 800ebe2:	f040 80fb 	bne.w	800eddc <HAL_RCCEx_PeriphCLKConfig+0x214>
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ebe6:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 800ebea:	d013      	beq.n	800ec14 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800ebec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800ebf0:	6a23      	ldr	r3, [r4, #32]
 800ebf2:	f8d2 5090 	ldr.w	r5, [r2, #144]	; 0x90
 800ebf6:	f433 7240 	bics.w	r2, r3, #768	; 0x300
 800ebfa:	f405 7540 	and.w	r5, r5, #768	; 0x300
 800ebfe:	d004      	beq.n	800ec0a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800ec00:	48c0      	ldr	r0, [pc, #768]	; (800ef04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ec02:	21d4      	movs	r1, #212	; 0xd4
 800ec04:	f7f3 f974 	bl	8001ef0 <assert_failed>
 800ec08:	6a23      	ldr	r3, [r4, #32]

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800ec0a:	429d      	cmp	r5, r3
 800ec0c:	f040 80f6 	bne.w	800edfc <HAL_RCCEx_PeriphCLKConfig+0x234>
 800ec10:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800ec12:	2500      	movs	r5, #0
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ec14:	07d8      	lsls	r0, r3, #31
 800ec16:	d512      	bpl.n	800ec3e <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800ec18:	6861      	ldr	r1, [r4, #4]
 800ec1a:	2903      	cmp	r1, #3
 800ec1c:	d906      	bls.n	800ec2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ec1e:	f44f 7189 	mov.w	r1, #274	; 0x112
 800ec22:	48b8      	ldr	r0, [pc, #736]	; (800ef04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ec24:	f7f3 f964 	bl	8001ef0 <assert_failed>
 800ec28:	e9d4 3100 	ldrd	r3, r1, [r4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800ec2c:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800ec30:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800ec34:	f022 0203 	bic.w	r2, r2, #3
 800ec38:	430a      	orrs	r2, r1
 800ec3a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ec3e:	0799      	lsls	r1, r3, #30
 800ec40:	d50d      	bpl.n	800ec5e <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 800ec42:	68a1      	ldr	r1, [r4, #8]
 800ec44:	f431 6240 	bics.w	r2, r1, #3072	; 0xc00
 800ec48:	f040 8104 	bne.w	800ee54 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800ec4c:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800ec50:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800ec54:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ec58:	430a      	orrs	r2, r1
 800ec5a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ec5e:	06da      	lsls	r2, r3, #27
 800ec60:	d518      	bpl.n	800ec94 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800ec62:	6921      	ldr	r1, [r4, #16]
 800ec64:	f021 020c 	bic.w	r2, r1, #12
 800ec68:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 800ec6c:	d006      	beq.n	800ec7c <HAL_RCCEx_PeriphCLKConfig+0xb4>
 800ec6e:	f240 1127 	movw	r1, #295	; 0x127
 800ec72:	48a4      	ldr	r0, [pc, #656]	; (800ef04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ec74:	f7f3 f93c 	bl	8001ef0 <assert_failed>
 800ec78:	6921      	ldr	r1, [r4, #16]
 800ec7a:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800ec7c:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800ec80:	0c08      	lsrs	r0, r1, #16
 800ec82:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 800ec86:	0400      	lsls	r0, r0, #16
 800ec88:	ea22 0200 	bic.w	r2, r2, r0
 800ec8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800ec90:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ec94:	069f      	lsls	r7, r3, #26
 800ec96:	d518      	bpl.n	800ecca <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 800ec98:	6961      	ldr	r1, [r4, #20]
 800ec9a:	f021 0230 	bic.w	r2, r1, #48	; 0x30
 800ec9e:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800eca2:	d006      	beq.n	800ecb2 <HAL_RCCEx_PeriphCLKConfig+0xea>
 800eca4:	f44f 7197 	mov.w	r1, #302	; 0x12e
 800eca8:	4896      	ldr	r0, [pc, #600]	; (800ef04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ecaa:	f7f3 f921 	bl	8001ef0 <assert_failed>
 800ecae:	6961      	ldr	r1, [r4, #20]
 800ecb0:	6823      	ldr	r3, [r4, #0]
 800ecb2:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800ecb6:	0c08      	lsrs	r0, r1, #16
 800ecb8:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 800ecbc:	0400      	lsls	r0, r0, #16
 800ecbe:	ea22 0200 	bic.w	r2, r2, r0
 800ecc2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800ecc6:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ecca:	075e      	lsls	r6, r3, #29
 800eccc:	d518      	bpl.n	800ed00 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800ecce:	68e2      	ldr	r2, [r4, #12]
 800ecd0:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800ecd4:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 800ecd8:	d003      	beq.n	800ece2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
 800ecda:	498b      	ldr	r1, [pc, #556]	; (800ef08 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800ecdc:	428a      	cmp	r2, r1
 800ecde:	f040 80fe 	bne.w	800eede <HAL_RCCEx_PeriphCLKConfig+0x316>
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800ece2:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800ece6:	0910      	lsrs	r0, r2, #4
 800ece8:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
 800ecec:	f400 207f 	and.w	r0, r0, #1044480	; 0xff000
 800ecf0:	0112      	lsls	r2, r2, #4
 800ecf2:	ea21 0100 	bic.w	r1, r1, r0
 800ecf6:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 800ecfa:	430a      	orrs	r2, r1
 800ecfc:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ed00:	0598      	lsls	r0, r3, #22
 800ed02:	d518      	bpl.n	800ed36 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 800ed04:	69a2      	ldr	r2, [r4, #24]
 800ed06:	f022 6180 	bic.w	r1, r2, #67108864	; 0x4000000
 800ed0a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
 800ed0e:	f000 80ad 	beq.w	800ee6c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 800ed12:	f032 4180 	bics.w	r1, r2, #1073741824	; 0x40000000
 800ed16:	f000 80d8 	beq.w	800eeca <HAL_RCCEx_PeriphCLKConfig+0x302>
 800ed1a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800ed1e:	f040 80f5 	bne.w	800ef0c <HAL_RCCEx_PeriphCLKConfig+0x344>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800ed22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ed26:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800ed2a:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800ed2e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800ed32:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ed36:	0559      	lsls	r1, r3, #21
 800ed38:	d524      	bpl.n	800ed84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 800ed3a:	69e1      	ldr	r1, [r4, #28]
 800ed3c:	2900      	cmp	r1, #0
 800ed3e:	d053      	beq.n	800ede8 <HAL_RCCEx_PeriphCLKConfig+0x220>
 800ed40:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800ed44:	f000 80d3 	beq.w	800eeee <HAL_RCCEx_PeriphCLKConfig+0x326>
 800ed48:	f021 5200 	bic.w	r2, r1, #536870912	; 0x20000000
 800ed4c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800ed50:	d04a      	beq.n	800ede8 <HAL_RCCEx_PeriphCLKConfig+0x220>
 800ed52:	f44f 71bc 	mov.w	r1, #376	; 0x178
 800ed56:	486b      	ldr	r0, [pc, #428]	; (800ef04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ed58:	f7f3 f8ca 	bl	8001ef0 <assert_failed>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800ed5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ed60:	69e2      	ldr	r2, [r4, #28]
 800ed62:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800ed66:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800ed6a:	4313      	orrs	r3, r2
 800ed6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800ed70:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800ed74:	6823      	ldr	r3, [r4, #0]
 800ed76:	d105      	bne.n	800ed84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800ed78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ed7c:	68ca      	ldr	r2, [r1, #12]
 800ed7e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ed82:	60ca      	str	r2, [r1, #12]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800ed84:	04da      	lsls	r2, r3, #19
 800ed86:	d50c      	bpl.n	800eda2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));
 800ed88:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ed8a:	f431 4280 	bics.w	r2, r1, #16384	; 0x4000
 800ed8e:	d156      	bne.n	800ee3e <HAL_RCCEx_PeriphCLKConfig+0x276>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800ed90:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800ed94:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 800ed98:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ed9c:	430a      	orrs	r2, r1
 800ed9e:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800eda2:	049b      	lsls	r3, r3, #18
 800eda4:	d518      	bpl.n	800edd8 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
 800eda6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800eda8:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800edac:	d004      	beq.n	800edb8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800edae:	4855      	ldr	r0, [pc, #340]	; (800ef04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800edb0:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 800edb4:	f7f3 f89c 	bl	8001ef0 <assert_failed>
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));
 800edb8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800edba:	2802      	cmp	r0, #2
 800edbc:	d872      	bhi.n	800eea4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800edbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800edc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800edc4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800edc6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800edca:	431a      	orrs	r2, r3
 800edcc:	624a      	str	r2, [r1, #36]	; 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800edce:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800edd0:	f023 0303 	bic.w	r3, r3, #3
 800edd4:	4303      	orrs	r3, r0
 800edd6:	624b      	str	r3, [r1, #36]	; 0x24
  }
#endif


  return status;
}
 800edd8:	4628      	mov	r0, r5
 800edda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800eddc:	4849      	ldr	r0, [pc, #292]	; (800ef04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800edde:	219a      	movs	r1, #154	; 0x9a
 800ede0:	f7f3 f886 	bl	8001ef0 <assert_failed>
 800ede4:	6823      	ldr	r3, [r4, #0]
 800ede6:	e6fe      	b.n	800ebe6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800ede8:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800edec:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800edf0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800edf4:	430a      	orrs	r2, r1
 800edf6:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800edfa:	e7c3      	b.n	800ed84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      HAL_PWR_EnableBkUpAccess();
 800edfc:	f7ff f816 	bl	800de2c <HAL_PWR_EnableBkUpAccess>
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800ee00:	2d00      	cmp	r5, #0
 800ee02:	d056      	beq.n	800eeb2 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800ee04:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800ee08:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800ee0c:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800ee10:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ee14:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800ee18:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800ee1c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ee20:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800ee24:	6a22      	ldr	r2, [r4, #32]
 800ee26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ee2a:	4313      	orrs	r3, r2
        LL_RCC_WriteReg(BDCR, bdcr);
 800ee2c:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800ee30:	f8d6 5090 	ldr.w	r5, [r6, #144]	; 0x90
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800ee34:	f015 0501 	ands.w	r5, r5, #1
 800ee38:	d17d      	bne.n	800ef36 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800ee3a:	6823      	ldr	r3, [r4, #0]
 800ee3c:	e6ea      	b.n	800ec14 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));
 800ee3e:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 800ee42:	d0a5      	beq.n	800ed90 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 800ee44:	f44f 71cb 	mov.w	r1, #406	; 0x196
 800ee48:	482e      	ldr	r0, [pc, #184]	; (800ef04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ee4a:	f7f3 f851 	bl	8001ef0 <assert_failed>
 800ee4e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ee50:	6823      	ldr	r3, [r4, #0]
 800ee52:	e79d      	b.n	800ed90 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 800ee54:	f240 111d 	movw	r1, #285	; 0x11d
 800ee58:	482a      	ldr	r0, [pc, #168]	; (800ef04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ee5a:	f7f3 f849 	bl	8001ef0 <assert_failed>
 800ee5e:	68a1      	ldr	r1, [r4, #8]
 800ee60:	6823      	ldr	r3, [r4, #0]
 800ee62:	e6f3      	b.n	800ec4c <HAL_RCCEx_PeriphCLKConfig+0x84>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ee64:	f032 4380 	bics.w	r3, r2, #1073741824	; 0x40000000
 800ee68:	6823      	ldr	r3, [r4, #0]
 800ee6a:	d02e      	beq.n	800eeca <HAL_RCCEx_PeriphCLKConfig+0x302>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800ee6c:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800ee70:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 800ee74:	f8d0 6088 	ldr.w	r6, [r0, #136]	; 0x88
 800ee78:	f026 4640 	bic.w	r6, r6, #3221225472	; 0xc0000000
 800ee7c:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800ee80:	f8d0 6088 	ldr.w	r6, [r0, #136]	; 0x88
 800ee84:	f026 6640 	bic.w	r6, r6, #201326592	; 0xc000000
 800ee88:	4331      	orrs	r1, r6
 800ee8a:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800ee8e:	f1b2 5fc0 	cmp.w	r2, #402653184	; 0x18000000
 800ee92:	f47f af50 	bne.w	800ed36 <HAL_RCCEx_PeriphCLKConfig+0x16e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800ee96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ee9a:	68ca      	ldr	r2, [r1, #12]
 800ee9c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800eea0:	60ca      	str	r2, [r1, #12]
 800eea2:	e748      	b.n	800ed36 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));
 800eea4:	4817      	ldr	r0, [pc, #92]	; (800ef04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800eea6:	f240 11a3 	movw	r1, #419	; 0x1a3
 800eeaa:	f7f3 f821 	bl	8001ef0 <assert_failed>
 800eeae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800eeb0:	e785      	b.n	800edbe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800eeb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800eeb6:	6a21      	ldr	r1, [r4, #32]
 800eeb8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800eebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eec0:	430b      	orrs	r3, r1
 800eec2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800eec6:	6823      	ldr	r3, [r4, #0]
}
 800eec8:	e6a4      	b.n	800ec14 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800eeca:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800eece:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 800eed2:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 800eed6:	4311      	orrs	r1, r2
 800eed8:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
}
 800eedc:	e7d7      	b.n	800ee8e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800eede:	4809      	ldr	r0, [pc, #36]	; (800ef04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800eee0:	f44f 719b 	mov.w	r1, #310	; 0x136
 800eee4:	f7f3 f804 	bl	8001ef0 <assert_failed>
 800eee8:	68e2      	ldr	r2, [r4, #12]
 800eeea:	6823      	ldr	r3, [r4, #0]
 800eeec:	e6f9      	b.n	800ece2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800eeee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800eef2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800eef6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800eefa:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800eefe:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800ef02:	e739      	b.n	800ed78 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
 800ef04:	08016450 	.word	0x08016450
 800ef08:	00030200 	.word	0x00030200
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 800ef0c:	4813      	ldr	r0, [pc, #76]	; (800ef5c <HAL_RCCEx_PeriphCLKConfig+0x394>)
 800ef0e:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800ef12:	f7f2 ffed 	bl	8001ef0 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ef16:	69a2      	ldr	r2, [r4, #24]
 800ef18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800ef1c:	d1a2      	bne.n	800ee64 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800ef1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ef22:	6823      	ldr	r3, [r4, #0]
 800ef24:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800ef28:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800ef2c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800ef30:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800ef34:	e6ff      	b.n	800ed36 <HAL_RCCEx_PeriphCLKConfig+0x16e>
          tickstart = HAL_GetTick();
 800ef36:	f7fe fa8b 	bl	800d450 <HAL_GetTick>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ef3a:	f241 3788 	movw	r7, #5000	; 0x1388
          tickstart = HAL_GetTick();
 800ef3e:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800ef40:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800ef44:	079b      	lsls	r3, r3, #30
 800ef46:	f53f ae63 	bmi.w	800ec10 <HAL_RCCEx_PeriphCLKConfig+0x48>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ef4a:	f7fe fa81 	bl	800d450 <HAL_GetTick>
 800ef4e:	1b40      	subs	r0, r0, r5
 800ef50:	42b8      	cmp	r0, r7
 800ef52:	d9f5      	bls.n	800ef40 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800ef54:	6823      	ldr	r3, [r4, #0]
              ret = HAL_TIMEOUT;
 800ef56:	2503      	movs	r5, #3
 800ef58:	e65c      	b.n	800ec14 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 800ef5a:	bf00      	nop
 800ef5c:	08016450 	.word	0x08016450

0800ef60 <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 800ef60:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus backupchanged;

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));
 800ef62:	f030 7300 	bics.w	r3, r0, #33554432	; 0x2000000
{
 800ef66:	b086      	sub	sp, #24
 800ef68:	4605      	mov	r5, r0
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));
 800ef6a:	d004      	beq.n	800ef76 <HAL_RCCEx_EnableLSCO+0x16>
 800ef6c:	481e      	ldr	r0, [pc, #120]	; (800efe8 <HAL_RCCEx_EnableLSCO+0x88>)
 800ef6e:	f44f 61b6 	mov.w	r1, #1456	; 0x5b0
 800ef72:	f7f2 ffbd 	bl	8001ef0 <assert_failed>
  SET_BIT(RCC->AHB2ENR, Periphs);
 800ef76:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000

  /* LSCO Pin Clock Enable */
  __LSCO1_CLK_ENABLE();

  /* Configure the LSCO pin in analog mode */
  GPIO_InitStruct.Pin   = LSCO1_PIN;
 800ef7a:	2204      	movs	r2, #4
 800ef7c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ef7e:	f043 0301 	orr.w	r3, r3, #1
 800ef82:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800ef84:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ef86:	9201      	str	r2, [sp, #4]
 800ef88:	f003 0301 	and.w	r3, r3, #1
  GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 800ef8c:	2002      	movs	r0, #2
 800ef8e:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ef90:	2203      	movs	r2, #3
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800ef92:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 800ef94:	9002      	str	r0, [sp, #8]
  GPIO_InitStruct.Alternate = GPIO_AF0_LSCO;
  HAL_GPIO_Init(LSCO1_GPIO_PORT, &GPIO_InitStruct);
 800ef96:	a901      	add	r1, sp, #4
 800ef98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800ef9c:	e9cd 3203 	strd	r3, r2, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_LSCO;
 800efa0:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 800efa2:	9e00      	ldr	r6, [sp, #0]
  HAL_GPIO_Init(LSCO1_GPIO_PORT, &GPIO_InitStruct);
 800efa4:	f7fe fd7e 	bl	800daa4 <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800efa8:	4b10      	ldr	r3, [pc, #64]	; (800efec <HAL_RCCEx_EnableLSCO+0x8c>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	05db      	lsls	r3, r3, #23
 800efae:	d50b      	bpl.n	800efc8 <HAL_RCCEx_EnableLSCO+0x68>
  else
  {
    backupchanged = RESET;
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 800efb0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800efb4:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800efb8:	ea43 0005 	orr.w	r0, r3, r5
 800efbc:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 800efc0:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90

  if (backupchanged == SET)
  {
    HAL_PWR_DisableBkUpAccess();
  }
}
 800efc4:	b006      	add	sp, #24
 800efc6:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 800efc8:	f7fe ff30 	bl	800de2c <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 800efcc:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800efd0:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 800efd4:	4328      	orrs	r0, r5
 800efd6:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 800efda:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    HAL_PWR_DisableBkUpAccess();
 800efde:	f7fe ff2d 	bl	800de3c <HAL_PWR_DisableBkUpAccess>
}
 800efe2:	b006      	add	sp, #24
 800efe4:	bd70      	pop	{r4, r5, r6, pc}
 800efe6:	bf00      	nop
 800efe8:	08016450 	.word	0x08016450
 800efec:	58000400 	.word	0x58000400

0800eff0 <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800eff0:	2800      	cmp	r0, #0
 800eff2:	d032      	beq.n	800f05a <HAL_RNG_Init+0x6a>
{
 800eff4:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800eff6:	6802      	ldr	r2, [r0, #0]
 800eff8:	4b19      	ldr	r3, [pc, #100]	; (800f060 <HAL_RNG_Init+0x70>)
 800effa:	429a      	cmp	r2, r3
 800effc:	4604      	mov	r4, r0
 800effe:	d003      	beq.n	800f008 <HAL_RNG_Init+0x18>
 800f000:	4818      	ldr	r0, [pc, #96]	; (800f064 <HAL_RNG_Init+0x74>)
 800f002:	21a3      	movs	r1, #163	; 0xa3
 800f004:	f7f2 ff74 	bl	8001ef0 <assert_failed>
  assert_param(IS_RNG_CED(hrng->Init.ClockErrorDetection));
 800f008:	6863      	ldr	r3, [r4, #4]
 800f00a:	f033 0320 	bics.w	r3, r3, #32
 800f00e:	d116      	bne.n	800f03e <HAL_RNG_Init+0x4e>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800f010:	7a63      	ldrb	r3, [r4, #9]
 800f012:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f016:	b1db      	cbz	r3, 800f050 <HAL_RNG_Init+0x60>

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800f018:	6822      	ldr	r2, [r4, #0]
 800f01a:	6861      	ldr	r1, [r4, #4]
  hrng->State = HAL_RNG_STATE_BUSY;
 800f01c:	2302      	movs	r3, #2
 800f01e:	7263      	strb	r3, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800f020:	6813      	ldr	r3, [r2, #0]
 800f022:	f023 0320 	bic.w	r3, r3, #32
 800f026:	430b      	orrs	r3, r1
 800f028:	6013      	str	r3, [r2, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800f02a:	6813      	ldr	r3, [r2, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800f02c:	2501      	movs	r5, #1
  __HAL_RNG_ENABLE(hrng);
 800f02e:	f043 0304 	orr.w	r3, r3, #4

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800f032:	2100      	movs	r1, #0
  __HAL_RNG_ENABLE(hrng);
 800f034:	6013      	str	r3, [r2, #0]
  hrng->State = HAL_RNG_STATE_READY;
 800f036:	7265      	strb	r5, [r4, #9]

  /* Return function status */
  return HAL_OK;
 800f038:	4608      	mov	r0, r1
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800f03a:	60e1      	str	r1, [r4, #12]
}
 800f03c:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_RNG_CED(hrng->Init.ClockErrorDetection));
 800f03e:	4809      	ldr	r0, [pc, #36]	; (800f064 <HAL_RNG_Init+0x74>)
 800f040:	21a4      	movs	r1, #164	; 0xa4
 800f042:	f7f2 ff55 	bl	8001ef0 <assert_failed>
  if (hrng->State == HAL_RNG_STATE_RESET)
 800f046:	7a63      	ldrb	r3, [r4, #9]
 800f048:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d1e3      	bne.n	800f018 <HAL_RNG_Init+0x28>
    hrng->Lock = HAL_UNLOCKED;
 800f050:	7222      	strb	r2, [r4, #8]
    HAL_RNG_MspInit(hrng);
 800f052:	4620      	mov	r0, r4
 800f054:	f7f2 ff8e 	bl	8001f74 <HAL_RNG_MspInit>
 800f058:	e7de      	b.n	800f018 <HAL_RNG_Init+0x28>
    return HAL_ERROR;
 800f05a:	2001      	movs	r0, #1
}
 800f05c:	4770      	bx	lr
 800f05e:	bf00      	nop
 800f060:	58001000 	.word	0x58001000
 800f064:	080164c0 	.word	0x080164c0

0800f068 <HAL_RTC_GetTime>:
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800f068:	2a01      	cmp	r2, #1
{
 800f06a:	b570      	push	{r4, r5, r6, lr}
 800f06c:	4615      	mov	r5, r2
 800f06e:	4606      	mov	r6, r0
 800f070:	460c      	mov	r4, r1
  assert_param(IS_RTC_FORMAT(Format));
 800f072:	d904      	bls.n	800f07e <HAL_RTC_GetTime+0x16>
 800f074:	481a      	ldr	r0, [pc, #104]	; (800f0e0 <HAL_RTC_GetTime+0x78>)
 800f076:	f240 3177 	movw	r1, #887	; 0x377
 800f07a:	f7f2 ff39 	bl	8001ef0 <assert_failed>

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800f07e:	6833      	ldr	r3, [r6, #0]
 800f080:	6a9a      	ldr	r2, [r3, #40]	; 0x28

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800f082:	6919      	ldr	r1, [r3, #16]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800f084:	681b      	ldr	r3, [r3, #0]
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800f086:	6062      	str	r2, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800f088:	f3c1 010e 	ubfx	r1, r1, #0, #15

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800f08c:	f3c3 4206 	ubfx	r2, r3, #16, #7
 800f090:	f3c3 4005 	ubfx	r0, r3, #16, #6
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800f094:	f002 0640 	and.w	r6, r2, #64	; 0x40
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800f098:	60a1      	str	r1, [r4, #8]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800f09a:	f3c3 2106 	ubfx	r1, r3, #8, #7
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800f09e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800f0a2:	70e6      	strb	r6, [r4, #3]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800f0a4:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800f0a6:	7061      	strb	r1, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800f0a8:	70a3      	strb	r3, [r4, #2]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800f0aa:	b9bd      	cbnz	r5, 800f0dc <HAL_RTC_GetTime+0x74>
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800f0ac:	0900      	lsrs	r0, r0, #4
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800f0ae:	f002 020f 	and.w	r2, r2, #15
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800f0b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800f0b6:	090d      	lsrs	r5, r1, #4
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800f0b8:	eb02 0040 	add.w	r0, r2, r0, lsl #1
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800f0bc:	091a      	lsrs	r2, r3, #4
 800f0be:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800f0c2:	f001 010f 	and.w	r1, r1, #15
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800f0c6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800f0ca:	f003 030f 	and.w	r3, r3, #15
 800f0ce:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 800f0d2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800f0d6:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800f0d8:	7061      	strb	r1, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800f0da:	70a3      	strb	r3, [r4, #2]
}
 800f0dc:	2000      	movs	r0, #0
 800f0de:	bd70      	pop	{r4, r5, r6, pc}
 800f0e0:	0801652c 	.word	0x0801652c

0800f0e4 <HAL_RTC_GetDate>:
  assert_param(IS_RTC_FORMAT(Format));
 800f0e4:	2a01      	cmp	r2, #1
{
 800f0e6:	b570      	push	{r4, r5, r6, lr}
 800f0e8:	4615      	mov	r5, r2
 800f0ea:	4606      	mov	r6, r0
 800f0ec:	460c      	mov	r4, r1
  assert_param(IS_RTC_FORMAT(Format));
 800f0ee:	d904      	bls.n	800f0fa <HAL_RTC_GetDate+0x16>
 800f0f0:	4817      	ldr	r0, [pc, #92]	; (800f150 <HAL_RTC_GetDate+0x6c>)
 800f0f2:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800f0f6:	f7f2 fefb 	bl	8001ef0 <assert_failed>
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800f0fa:	6833      	ldr	r3, [r6, #0]
 800f0fc:	685b      	ldr	r3, [r3, #4]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800f0fe:	f3c3 4007 	ubfx	r0, r3, #16, #8
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800f102:	f3c3 2204 	ubfx	r2, r3, #8, #5
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800f106:	f003 013f 	and.w	r1, r3, #63	; 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800f10a:	f3c3 3642 	ubfx	r6, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800f10e:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800f110:	7062      	strb	r2, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800f112:	70a1      	strb	r1, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800f114:	7026      	strb	r6, [r4, #0]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800f116:	f3c3 2307 	ubfx	r3, r3, #8, #8
  if (Format == RTC_FORMAT_BIN)
 800f11a:	b9bd      	cbnz	r5, 800f14c <HAL_RTC_GetDate+0x68>
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800f11c:	0912      	lsrs	r2, r2, #4
 800f11e:	0095      	lsls	r5, r2, #2
 800f120:	0906      	lsrs	r6, r0, #4
 800f122:	442a      	add	r2, r5
 800f124:	090d      	lsrs	r5, r1, #4
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800f126:	f003 030f 	and.w	r3, r3, #15
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800f12a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800f12e:	f000 000f 	and.w	r0, r0, #15
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800f132:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800f136:	f001 010f 	and.w	r1, r1, #15
 800f13a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800f13e:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800f142:	eb01 0145 	add.w	r1, r1, r5, lsl #1
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800f146:	7063      	strb	r3, [r4, #1]
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800f148:	70e0      	strb	r0, [r4, #3]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800f14a:	70a1      	strb	r1, [r4, #2]
}
 800f14c:	2000      	movs	r0, #0
 800f14e:	bd70      	pop	{r4, r5, r6, pc}
 800f150:	0801652c 	.word	0x0801652c

0800f154 <HAL_RTC_SetAlarm_IT>:
  assert_param(IS_RTC_FORMAT(Format));
 800f154:	2a01      	cmp	r2, #1
{
 800f156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f15a:	4617      	mov	r7, r2
 800f15c:	4605      	mov	r5, r0
 800f15e:	460e      	mov	r6, r1
  assert_param(IS_RTC_FORMAT(Format));
 800f160:	d904      	bls.n	800f16c <HAL_RTC_SetAlarm_IT+0x18>
 800f162:	48c1      	ldr	r0, [pc, #772]	; (800f468 <HAL_RTC_SetAlarm_IT+0x314>)
 800f164:	f240 513f 	movw	r1, #1343	; 0x53f
 800f168:	f7f2 fec2 	bl	8001ef0 <assert_failed>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 800f16c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f16e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f172:	d003      	beq.n	800f17c <HAL_RTC_SetAlarm_IT+0x28>
 800f174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f178:	f040 8132 	bne.w	800f3e0 <HAL_RTC_SetAlarm_IT+0x28c>
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 800f17c:	6973      	ldr	r3, [r6, #20]
 800f17e:	f013 3f7f 	tst.w	r3, #2139062143	; 0x7f7f7f7f
 800f182:	f040 8137 	bne.w	800f3f4 <HAL_RTC_SetAlarm_IT+0x2a0>
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 800f186:	69f3      	ldr	r3, [r6, #28]
 800f188:	f033 4380 	bics.w	r3, r3, #1073741824	; 0x40000000
 800f18c:	d004      	beq.n	800f198 <HAL_RTC_SetAlarm_IT+0x44>
 800f18e:	48b6      	ldr	r0, [pc, #728]	; (800f468 <HAL_RTC_SetAlarm_IT+0x314>)
 800f190:	f240 5142 	movw	r1, #1346	; 0x542
 800f194:	f7f2 feac 	bl	8001ef0 <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 800f198:	6873      	ldr	r3, [r6, #4]
 800f19a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f19e:	f080 813a 	bcs.w	800f416 <HAL_RTC_SetAlarm_IT+0x2c2>
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 800f1a2:	69b3      	ldr	r3, [r6, #24]
 800f1a4:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 800f1a8:	d00d      	beq.n	800f1c6 <HAL_RTC_SetAlarm_IT+0x72>
 800f1aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f1ae:	d00a      	beq.n	800f1c6 <HAL_RTC_SetAlarm_IT+0x72>
 800f1b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f1b4:	d007      	beq.n	800f1c6 <HAL_RTC_SetAlarm_IT+0x72>
 800f1b6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800f1ba:	d004      	beq.n	800f1c6 <HAL_RTC_SetAlarm_IT+0x72>
 800f1bc:	48aa      	ldr	r0, [pc, #680]	; (800f468 <HAL_RTC_SetAlarm_IT+0x314>)
 800f1be:	f240 5144 	movw	r1, #1348	; 0x544
 800f1c2:	f7f2 fe95 	bl	8001ef0 <assert_failed>
  __HAL_LOCK(hrtc);
 800f1c6:	f895 3020 	ldrb.w	r3, [r5, #32]
 800f1ca:	2b01      	cmp	r3, #1
 800f1cc:	f000 81cc 	beq.w	800f568 <HAL_RTC_SetAlarm_IT+0x414>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f1d0:	2302      	movs	r3, #2
 800f1d2:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
  __HAL_LOCK(hrtc);
 800f1d6:	2201      	movs	r2, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f1d8:	682b      	ldr	r3, [r5, #0]
  __HAL_LOCK(hrtc);
 800f1da:	f885 2020 	strb.w	r2, [r5, #32]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f1de:	689b      	ldr	r3, [r3, #8]
  if (Format == RTC_FORMAT_BIN)
 800f1e0:	2f00      	cmp	r7, #0
 800f1e2:	f040 80ae 	bne.w	800f342 <HAL_RTC_SetAlarm_IT+0x1ee>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f1e6:	f013 0f40 	tst.w	r3, #64	; 0x40
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 800f1ea:	7833      	ldrb	r3, [r6, #0]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f1ec:	f000 814b 	beq.w	800f486 <HAL_RTC_SetAlarm_IT+0x332>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 800f1f0:	3b01      	subs	r3, #1
 800f1f2:	2b0b      	cmp	r3, #11
 800f1f4:	f200 8190 	bhi.w	800f518 <HAL_RTC_SetAlarm_IT+0x3c4>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 800f1f8:	78f3      	ldrb	r3, [r6, #3]
 800f1fa:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 800f1fe:	f040 8171 	bne.w	800f4e4 <HAL_RTC_SetAlarm_IT+0x390>
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 800f202:	7873      	ldrb	r3, [r6, #1]
 800f204:	2b3b      	cmp	r3, #59	; 0x3b
 800f206:	f200 819d 	bhi.w	800f544 <HAL_RTC_SetAlarm_IT+0x3f0>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 800f20a:	78b3      	ldrb	r3, [r6, #2]
 800f20c:	2b3b      	cmp	r3, #59	; 0x3b
 800f20e:	f200 8193 	bhi.w	800f538 <HAL_RTC_SetAlarm_IT+0x3e4>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 800f212:	f896 2020 	ldrb.w	r2, [r6, #32]
    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 800f216:	f8d6 c01c 	ldr.w	ip, [r6, #28]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 800f21a:	1e53      	subs	r3, r2, #1
    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 800f21c:	f1bc 0f00 	cmp.w	ip, #0
 800f220:	f040 813b 	bne.w	800f49a <HAL_RTC_SetAlarm_IT+0x346>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 800f224:	2b1e      	cmp	r3, #30
 800f226:	f200 817d 	bhi.w	800f524 <HAL_RTC_SetAlarm_IT+0x3d0>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800f22a:	7834      	ldrb	r4, [r6, #0]
  while (Param >= 10U)
 800f22c:	2c09      	cmp	r4, #9
 800f22e:	d909      	bls.n	800f244 <HAL_RTC_SetAlarm_IT+0xf0>
  uint32_t bcdhigh = 0U;
 800f230:	2300      	movs	r3, #0
    Param -= 10U;
 800f232:	3c0a      	subs	r4, #10
 800f234:	b2e4      	uxtb	r4, r4
  while (Param >= 10U)
 800f236:	2c09      	cmp	r4, #9
    bcdhigh++;
 800f238:	f103 0301 	add.w	r3, r3, #1
  while (Param >= 10U)
 800f23c:	d8f9      	bhi.n	800f232 <HAL_RTC_SetAlarm_IT+0xde>
 800f23e:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
 800f242:	b2e4      	uxtb	r4, r4
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800f244:	7873      	ldrb	r3, [r6, #1]
  while (Param >= 10U)
 800f246:	2b09      	cmp	r3, #9
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800f248:	ea4f 4104 	mov.w	r1, r4, lsl #16
  while (Param >= 10U)
 800f24c:	d909      	bls.n	800f262 <HAL_RTC_SetAlarm_IT+0x10e>
  uint32_t bcdhigh = 0U;
 800f24e:	2000      	movs	r0, #0
    Param -= 10U;
 800f250:	3b0a      	subs	r3, #10
 800f252:	b2db      	uxtb	r3, r3
  while (Param >= 10U)
 800f254:	2b09      	cmp	r3, #9
    bcdhigh++;
 800f256:	f100 0001 	add.w	r0, r0, #1
  while (Param >= 10U)
 800f25a:	d8f9      	bhi.n	800f250 <HAL_RTC_SetAlarm_IT+0xfc>
 800f25c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800f260:	b2db      	uxtb	r3, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800f262:	78b0      	ldrb	r0, [r6, #2]
  while (Param >= 10U)
 800f264:	2809      	cmp	r0, #9
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800f266:	ea4f 2303 	mov.w	r3, r3, lsl #8
  while (Param >= 10U)
 800f26a:	d90a      	bls.n	800f282 <HAL_RTC_SetAlarm_IT+0x12e>
  uint32_t bcdhigh = 0U;
 800f26c:	f04f 0e00 	mov.w	lr, #0
    Param -= 10U;
 800f270:	380a      	subs	r0, #10
 800f272:	b2c0      	uxtb	r0, r0
  while (Param >= 10U)
 800f274:	2809      	cmp	r0, #9
    bcdhigh++;
 800f276:	f10e 0e01 	add.w	lr, lr, #1
  while (Param >= 10U)
 800f27a:	d8f9      	bhi.n	800f270 <HAL_RTC_SetAlarm_IT+0x11c>
 800f27c:	ea40 100e 	orr.w	r0, r0, lr, lsl #4
 800f280:	b2c0      	uxtb	r0, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800f282:	78f4      	ldrb	r4, [r6, #3]
  while (Param >= 10U)
 800f284:	2a09      	cmp	r2, #9
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800f286:	ea4f 4e04 	mov.w	lr, r4, lsl #16
  while (Param >= 10U)
 800f28a:	d909      	bls.n	800f2a0 <HAL_RTC_SetAlarm_IT+0x14c>
    Param -= 10U;
 800f28c:	f1a2 040a 	sub.w	r4, r2, #10
 800f290:	b2e2      	uxtb	r2, r4
  while (Param >= 10U)
 800f292:	2a09      	cmp	r2, #9
    bcdhigh++;
 800f294:	f107 0701 	add.w	r7, r7, #1
  while (Param >= 10U)
 800f298:	d8f8      	bhi.n	800f28c <HAL_RTC_SetAlarm_IT+0x138>
 800f29a:	ea42 1407 	orr.w	r4, r2, r7, lsl #4
 800f29e:	b2e2      	uxtb	r2, r4
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800f2a0:	6974      	ldr	r4, [r6, #20]
 800f2a2:	ea4e 0404 	orr.w	r4, lr, r4
 800f2a6:	ea44 040c 	orr.w	r4, r4, ip
 800f2aa:	430c      	orrs	r4, r1
 800f2ac:	4323      	orrs	r3, r4
 800f2ae:	ea43 0400 	orr.w	r4, r3, r0
 800f2b2:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800f2b6:	69b1      	ldr	r1, [r6, #24]
 800f2b8:	6877      	ldr	r7, [r6, #4]
  if (sAlarm->Alarm == RTC_ALARM_A)
 800f2ba:	6a72      	ldr	r2, [r6, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f2bc:	682b      	ldr	r3, [r5, #0]
 800f2be:	20ca      	movs	r0, #202	; 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800f2c0:	430f      	orrs	r7, r1
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f2c2:	2153      	movs	r1, #83	; 0x53
 800f2c4:	6258      	str	r0, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 800f2c6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f2ca:	6259      	str	r1, [r3, #36]	; 0x24
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800f2cc:	689a      	ldr	r2, [r3, #8]
  if (sAlarm->Alarm == RTC_ALARM_A)
 800f2ce:	f000 80a8 	beq.w	800f422 <HAL_RTC_SetAlarm_IT+0x2ce>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800f2d2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800f2d6:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800f2d8:	68da      	ldr	r2, [r3, #12]
 800f2da:	b2d2      	uxtb	r2, r2
 800f2dc:	f462 7220 	orn	r2, r2, #640	; 0x280
 800f2e0:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800f2e2:	f7fe f8b5 	bl	800d450 <HAL_GetTick>
 800f2e6:	4606      	mov	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800f2e8:	e006      	b.n	800f2f8 <HAL_RTC_SetAlarm_IT+0x1a4>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f2ea:	f7fe f8b1 	bl	800d450 <HAL_GetTick>
 800f2ee:	1b83      	subs	r3, r0, r6
 800f2f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f2f4:	f200 8084 	bhi.w	800f400 <HAL_RTC_SetAlarm_IT+0x2ac>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800f2f8:	682b      	ldr	r3, [r5, #0]
 800f2fa:	68da      	ldr	r2, [r3, #12]
 800f2fc:	f012 0802 	ands.w	r8, r2, #2
 800f300:	d0f3      	beq.n	800f2ea <HAL_RTC_SetAlarm_IT+0x196>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800f302:	621c      	str	r4, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800f304:	649f      	str	r7, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800f306:	689a      	ldr	r2, [r3, #8]
 800f308:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f30c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800f30e:	689a      	ldr	r2, [r3, #8]
 800f310:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f314:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800f316:	4a55      	ldr	r2, [pc, #340]	; (800f46c <HAL_RTC_SetAlarm_IT+0x318>)
 800f318:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
 800f31c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800f320:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800f324:	6811      	ldr	r1, [r2, #0]
 800f326:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800f32a:	6011      	str	r1, [r2, #0]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f32c:	20ff      	movs	r0, #255	; 0xff
  __HAL_UNLOCK(hrtc);
 800f32e:	2200      	movs	r2, #0
  hrtc->State = HAL_RTC_STATE_READY;
 800f330:	2401      	movs	r4, #1
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f332:	6258      	str	r0, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800f334:	f885 4021 	strb.w	r4, [r5, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 800f338:	f885 2020 	strb.w	r2, [r5, #32]
  return HAL_OK;
 800f33c:	4610      	mov	r0, r2
}
 800f33e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f342:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 800f346:	7832      	ldrb	r2, [r6, #0]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f348:	f000 80b4 	beq.w	800f4b4 <HAL_RTC_SetAlarm_IT+0x360>
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800f34c:	f002 030f 	and.w	r3, r2, #15
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800f350:	0912      	lsrs	r2, r2, #4
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 800f352:	3b01      	subs	r3, #1
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800f354:	eb02 0282 	add.w	r2, r2, r2, lsl #2
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 800f358:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800f35c:	b2db      	uxtb	r3, r3
 800f35e:	2b0b      	cmp	r3, #11
 800f360:	f200 80c6 	bhi.w	800f4f0 <HAL_RTC_SetAlarm_IT+0x39c>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 800f364:	78f3      	ldrb	r3, [r6, #3]
 800f366:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 800f36a:	f040 80b5 	bne.w	800f4d8 <HAL_RTC_SetAlarm_IT+0x384>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 800f36e:	7873      	ldrb	r3, [r6, #1]
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800f370:	091a      	lsrs	r2, r3, #4
 800f372:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800f376:	f003 030f 	and.w	r3, r3, #15
 800f37a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 800f37e:	b2db      	uxtb	r3, r3
 800f380:	2b3b      	cmp	r3, #59	; 0x3b
 800f382:	f200 80eb 	bhi.w	800f55c <HAL_RTC_SetAlarm_IT+0x408>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 800f386:	78b3      	ldrb	r3, [r6, #2]
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800f388:	091a      	lsrs	r2, r3, #4
 800f38a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800f38e:	f003 030f 	and.w	r3, r3, #15
 800f392:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 800f396:	b2db      	uxtb	r3, r3
 800f398:	2b3b      	cmp	r3, #59	; 0x3b
 800f39a:	f200 80d9 	bhi.w	800f550 <HAL_RTC_SetAlarm_IT+0x3fc>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 800f39e:	f896 3020 	ldrb.w	r3, [r6, #32]
    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 800f3a2:	69f1      	ldr	r1, [r6, #28]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800f3a4:	f003 020f 	and.w	r2, r3, #15
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800f3a8:	0918      	lsrs	r0, r3, #4
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 800f3aa:	3a01      	subs	r2, #1
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800f3ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 800f3b0:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800f3b4:	b2d2      	uxtb	r2, r2
    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 800f3b6:	2900      	cmp	r1, #0
 800f3b8:	d15a      	bne.n	800f470 <HAL_RTC_SetAlarm_IT+0x31c>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 800f3ba:	2a1e      	cmp	r2, #30
 800f3bc:	f200 80a3 	bhi.w	800f506 <HAL_RTC_SetAlarm_IT+0x3b2>
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800f3c0:	6970      	ldr	r0, [r6, #20]
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800f3c2:	78b4      	ldrb	r4, [r6, #2]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800f3c4:	7832      	ldrb	r2, [r6, #0]
 800f3c6:	4304      	orrs	r4, r0
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800f3c8:	7870      	ldrb	r0, [r6, #1]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800f3ca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800f3ce:	78f2      	ldrb	r2, [r6, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800f3d0:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 800f3d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f3d8:	430c      	orrs	r4, r1
 800f3da:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
 800f3de:	e76a      	b.n	800f2b6 <HAL_RTC_SetAlarm_IT+0x162>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 800f3e0:	4821      	ldr	r0, [pc, #132]	; (800f468 <HAL_RTC_SetAlarm_IT+0x314>)
 800f3e2:	f44f 61a8 	mov.w	r1, #1344	; 0x540
 800f3e6:	f7f2 fd83 	bl	8001ef0 <assert_failed>
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 800f3ea:	6973      	ldr	r3, [r6, #20]
 800f3ec:	f013 3f7f 	tst.w	r3, #2139062143	; 0x7f7f7f7f
 800f3f0:	f43f aec9 	beq.w	800f186 <HAL_RTC_SetAlarm_IT+0x32>
 800f3f4:	481c      	ldr	r0, [pc, #112]	; (800f468 <HAL_RTC_SetAlarm_IT+0x314>)
 800f3f6:	f240 5141 	movw	r1, #1345	; 0x541
 800f3fa:	f7f2 fd79 	bl	8001ef0 <assert_failed>
 800f3fe:	e6c2      	b.n	800f186 <HAL_RTC_SetAlarm_IT+0x32>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f400:	682a      	ldr	r2, [r5, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f402:	2303      	movs	r3, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f404:	21ff      	movs	r1, #255	; 0xff
 800f406:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 800f408:	f885 8020 	strb.w	r8, [r5, #32]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f40c:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        return HAL_TIMEOUT;
 800f410:	4618      	mov	r0, r3
}
 800f412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 800f416:	4814      	ldr	r0, [pc, #80]	; (800f468 <HAL_RTC_SetAlarm_IT+0x314>)
 800f418:	f240 5143 	movw	r1, #1347	; 0x543
 800f41c:	f7f2 fd68 	bl	8001ef0 <assert_failed>
 800f420:	e6bf      	b.n	800f1a2 <HAL_RTC_SetAlarm_IT+0x4e>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800f422:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f426:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800f428:	68da      	ldr	r2, [r3, #12]
 800f42a:	b2d2      	uxtb	r2, r2
 800f42c:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800f430:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800f432:	f7fe f80d 	bl	800d450 <HAL_GetTick>
 800f436:	4606      	mov	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800f438:	e005      	b.n	800f446 <HAL_RTC_SetAlarm_IT+0x2f2>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f43a:	f7fe f809 	bl	800d450 <HAL_GetTick>
 800f43e:	1b80      	subs	r0, r0, r6
 800f440:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800f444:	d8dc      	bhi.n	800f400 <HAL_RTC_SetAlarm_IT+0x2ac>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800f446:	682b      	ldr	r3, [r5, #0]
 800f448:	68da      	ldr	r2, [r3, #12]
 800f44a:	f012 0801 	ands.w	r8, r2, #1
 800f44e:	d0f4      	beq.n	800f43a <HAL_RTC_SetAlarm_IT+0x2e6>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800f450:	61dc      	str	r4, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800f452:	645f      	str	r7, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800f454:	689a      	ldr	r2, [r3, #8]
 800f456:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f45a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800f45c:	689a      	ldr	r2, [r3, #8]
 800f45e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f462:	609a      	str	r2, [r3, #8]
 800f464:	e757      	b.n	800f316 <HAL_RTC_SetAlarm_IT+0x1c2>
 800f466:	bf00      	nop
 800f468:	0801652c 	.word	0x0801652c
 800f46c:	58000800 	.word	0x58000800
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 800f470:	2a06      	cmp	r2, #6
 800f472:	d9a5      	bls.n	800f3c0 <HAL_RTC_SetAlarm_IT+0x26c>
 800f474:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 800f478:	483d      	ldr	r0, [pc, #244]	; (800f570 <HAL_RTC_SetAlarm_IT+0x41c>)
 800f47a:	f7f2 fd39 	bl	8001ef0 <assert_failed>
 800f47e:	f896 3020 	ldrb.w	r3, [r6, #32]
 800f482:	69f1      	ldr	r1, [r6, #28]
 800f484:	e79c      	b.n	800f3c0 <HAL_RTC_SetAlarm_IT+0x26c>
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 800f486:	2b17      	cmp	r3, #23
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800f488:	70f7      	strb	r7, [r6, #3]
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 800f48a:	f67f aeba 	bls.w	800f202 <HAL_RTC_SetAlarm_IT+0xae>
 800f48e:	4838      	ldr	r0, [pc, #224]	; (800f570 <HAL_RTC_SetAlarm_IT+0x41c>)
 800f490:	f240 5155 	movw	r1, #1365	; 0x555
 800f494:	f7f2 fd2c 	bl	8001ef0 <assert_failed>
 800f498:	e6b3      	b.n	800f202 <HAL_RTC_SetAlarm_IT+0xae>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 800f49a:	2b06      	cmp	r3, #6
 800f49c:	f67f aec5 	bls.w	800f22a <HAL_RTC_SetAlarm_IT+0xd6>
 800f4a0:	4833      	ldr	r0, [pc, #204]	; (800f570 <HAL_RTC_SetAlarm_IT+0x41c>)
 800f4a2:	f44f 61ac 	mov.w	r1, #1376	; 0x560
 800f4a6:	f7f2 fd23 	bl	8001ef0 <assert_failed>
 800f4aa:	f896 2020 	ldrb.w	r2, [r6, #32]
 800f4ae:	f8d6 c01c 	ldr.w	ip, [r6, #28]
 800f4b2:	e6ba      	b.n	800f22a <HAL_RTC_SetAlarm_IT+0xd6>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800f4b4:	70f3      	strb	r3, [r6, #3]
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800f4b6:	0913      	lsrs	r3, r2, #4
 800f4b8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800f4bc:	f002 030f 	and.w	r3, r2, #15
 800f4c0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 800f4c4:	b2db      	uxtb	r3, r3
 800f4c6:	2b17      	cmp	r3, #23
 800f4c8:	f67f af51 	bls.w	800f36e <HAL_RTC_SetAlarm_IT+0x21a>
 800f4cc:	4828      	ldr	r0, [pc, #160]	; (800f570 <HAL_RTC_SetAlarm_IT+0x41c>)
 800f4ce:	f240 5174 	movw	r1, #1396	; 0x574
 800f4d2:	f7f2 fd0d 	bl	8001ef0 <assert_failed>
 800f4d6:	e74a      	b.n	800f36e <HAL_RTC_SetAlarm_IT+0x21a>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 800f4d8:	4825      	ldr	r0, [pc, #148]	; (800f570 <HAL_RTC_SetAlarm_IT+0x41c>)
 800f4da:	f240 516f 	movw	r1, #1391	; 0x56f
 800f4de:	f7f2 fd07 	bl	8001ef0 <assert_failed>
 800f4e2:	e744      	b.n	800f36e <HAL_RTC_SetAlarm_IT+0x21a>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 800f4e4:	4822      	ldr	r0, [pc, #136]	; (800f570 <HAL_RTC_SetAlarm_IT+0x41c>)
 800f4e6:	f44f 61aa 	mov.w	r1, #1360	; 0x550
 800f4ea:	f7f2 fd01 	bl	8001ef0 <assert_failed>
 800f4ee:	e688      	b.n	800f202 <HAL_RTC_SetAlarm_IT+0xae>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 800f4f0:	481f      	ldr	r0, [pc, #124]	; (800f570 <HAL_RTC_SetAlarm_IT+0x41c>)
 800f4f2:	f240 516e 	movw	r1, #1390	; 0x56e
 800f4f6:	f7f2 fcfb 	bl	8001ef0 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 800f4fa:	78f3      	ldrb	r3, [r6, #3]
 800f4fc:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 800f500:	f43f af35 	beq.w	800f36e <HAL_RTC_SetAlarm_IT+0x21a>
 800f504:	e7e8      	b.n	800f4d8 <HAL_RTC_SetAlarm_IT+0x384>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 800f506:	f240 517c 	movw	r1, #1404	; 0x57c
 800f50a:	4819      	ldr	r0, [pc, #100]	; (800f570 <HAL_RTC_SetAlarm_IT+0x41c>)
 800f50c:	f7f2 fcf0 	bl	8001ef0 <assert_failed>
 800f510:	f896 3020 	ldrb.w	r3, [r6, #32]
 800f514:	69f1      	ldr	r1, [r6, #28]
 800f516:	e753      	b.n	800f3c0 <HAL_RTC_SetAlarm_IT+0x26c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 800f518:	4815      	ldr	r0, [pc, #84]	; (800f570 <HAL_RTC_SetAlarm_IT+0x41c>)
 800f51a:	f240 514f 	movw	r1, #1359	; 0x54f
 800f51e:	f7f2 fce7 	bl	8001ef0 <assert_failed>
 800f522:	e669      	b.n	800f1f8 <HAL_RTC_SetAlarm_IT+0xa4>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 800f524:	4812      	ldr	r0, [pc, #72]	; (800f570 <HAL_RTC_SetAlarm_IT+0x41c>)
 800f526:	f240 515c 	movw	r1, #1372	; 0x55c
 800f52a:	f7f2 fce1 	bl	8001ef0 <assert_failed>
 800f52e:	f896 2020 	ldrb.w	r2, [r6, #32]
 800f532:	f8d6 c01c 	ldr.w	ip, [r6, #28]
 800f536:	e678      	b.n	800f22a <HAL_RTC_SetAlarm_IT+0xd6>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 800f538:	480d      	ldr	r0, [pc, #52]	; (800f570 <HAL_RTC_SetAlarm_IT+0x41c>)
 800f53a:	f44f 61ab 	mov.w	r1, #1368	; 0x558
 800f53e:	f7f2 fcd7 	bl	8001ef0 <assert_failed>
 800f542:	e666      	b.n	800f212 <HAL_RTC_SetAlarm_IT+0xbe>
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 800f544:	480a      	ldr	r0, [pc, #40]	; (800f570 <HAL_RTC_SetAlarm_IT+0x41c>)
 800f546:	f240 5157 	movw	r1, #1367	; 0x557
 800f54a:	f7f2 fcd1 	bl	8001ef0 <assert_failed>
 800f54e:	e65c      	b.n	800f20a <HAL_RTC_SetAlarm_IT+0xb6>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 800f550:	4807      	ldr	r0, [pc, #28]	; (800f570 <HAL_RTC_SetAlarm_IT+0x41c>)
 800f552:	f44f 61af 	mov.w	r1, #1400	; 0x578
 800f556:	f7f2 fccb 	bl	8001ef0 <assert_failed>
 800f55a:	e720      	b.n	800f39e <HAL_RTC_SetAlarm_IT+0x24a>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 800f55c:	4804      	ldr	r0, [pc, #16]	; (800f570 <HAL_RTC_SetAlarm_IT+0x41c>)
 800f55e:	f240 5177 	movw	r1, #1399	; 0x577
 800f562:	f7f2 fcc5 	bl	8001ef0 <assert_failed>
 800f566:	e70e      	b.n	800f386 <HAL_RTC_SetAlarm_IT+0x232>
  __HAL_LOCK(hrtc);
 800f568:	2002      	movs	r0, #2
}
 800f56a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f56e:	bf00      	nop
 800f570:	0801652c 	.word	0x0801652c

0800f574 <HAL_RTC_DeactivateAlarm>:
  assert_param(IS_RTC_ALARM(Alarm));
 800f574:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 800f578:	b570      	push	{r4, r5, r6, lr}
 800f57a:	4605      	mov	r5, r0
  assert_param(IS_RTC_ALARM(Alarm));
 800f57c:	d042      	beq.n	800f604 <HAL_RTC_DeactivateAlarm+0x90>
 800f57e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800f582:	d12f      	bne.n	800f5e4 <HAL_RTC_DeactivateAlarm+0x70>
  __HAL_LOCK(hrtc);
 800f584:	f895 3020 	ldrb.w	r3, [r5, #32]
 800f588:	2b01      	cmp	r3, #1
 800f58a:	d062      	beq.n	800f652 <HAL_RTC_DeactivateAlarm+0xde>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f58c:	682b      	ldr	r3, [r5, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f58e:	2002      	movs	r0, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f590:	21ca      	movs	r1, #202	; 0xca
 800f592:	2253      	movs	r2, #83	; 0x53
  __HAL_LOCK(hrtc);
 800f594:	2401      	movs	r4, #1
 800f596:	f885 4020 	strb.w	r4, [r5, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f59a:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f59e:	6259      	str	r1, [r3, #36]	; 0x24
 800f5a0:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800f5a2:	689a      	ldr	r2, [r3, #8]
 800f5a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800f5a8:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800f5aa:	689a      	ldr	r2, [r3, #8]
 800f5ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f5b0:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800f5b2:	f7fd ff4d 	bl	800d450 <HAL_GetTick>
 800f5b6:	4606      	mov	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800f5b8:	e005      	b.n	800f5c6 <HAL_RTC_DeactivateAlarm+0x52>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f5ba:	f7fd ff49 	bl	800d450 <HAL_GetTick>
 800f5be:	1b83      	subs	r3, r0, r6
 800f5c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f5c4:	d814      	bhi.n	800f5f0 <HAL_RTC_DeactivateAlarm+0x7c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800f5c6:	682b      	ldr	r3, [r5, #0]
 800f5c8:	68dc      	ldr	r4, [r3, #12]
 800f5ca:	f014 0402 	ands.w	r4, r4, #2
 800f5ce:	d0f4      	beq.n	800f5ba <HAL_RTC_DeactivateAlarm+0x46>
  __HAL_UNLOCK(hrtc);
 800f5d0:	2200      	movs	r2, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f5d2:	20ff      	movs	r0, #255	; 0xff
  hrtc->State = HAL_RTC_STATE_READY;
 800f5d4:	2101      	movs	r1, #1
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f5d6:	6258      	str	r0, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800f5d8:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 800f5dc:	f885 2020 	strb.w	r2, [r5, #32]
  return HAL_OK;
 800f5e0:	4610      	mov	r0, r2
}
 800f5e2:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_RTC_ALARM(Alarm));
 800f5e4:	481c      	ldr	r0, [pc, #112]	; (800f658 <HAL_RTC_DeactivateAlarm+0xe4>)
 800f5e6:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800f5ea:	f7f2 fc81 	bl	8001ef0 <assert_failed>
 800f5ee:	e7c9      	b.n	800f584 <HAL_RTC_DeactivateAlarm+0x10>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f5f0:	682a      	ldr	r2, [r5, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f5f2:	2303      	movs	r3, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f5f4:	21ff      	movs	r1, #255	; 0xff
 800f5f6:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 800f5f8:	f885 4020 	strb.w	r4, [r5, #32]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f5fc:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        return HAL_TIMEOUT;
 800f600:	4618      	mov	r0, r3
}
 800f602:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hrtc);
 800f604:	f890 3020 	ldrb.w	r3, [r0, #32]
 800f608:	2b01      	cmp	r3, #1
 800f60a:	d022      	beq.n	800f652 <HAL_RTC_DeactivateAlarm+0xde>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f60c:	682b      	ldr	r3, [r5, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f60e:	2002      	movs	r0, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f610:	21ca      	movs	r1, #202	; 0xca
 800f612:	2253      	movs	r2, #83	; 0x53
  __HAL_LOCK(hrtc);
 800f614:	2401      	movs	r4, #1
 800f616:	f885 4020 	strb.w	r4, [r5, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f61a:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f61e:	6259      	str	r1, [r3, #36]	; 0x24
 800f620:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800f622:	689a      	ldr	r2, [r3, #8]
 800f624:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f628:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800f62a:	689a      	ldr	r2, [r3, #8]
 800f62c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f630:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800f632:	f7fd ff0d 	bl	800d450 <HAL_GetTick>
 800f636:	4606      	mov	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800f638:	e005      	b.n	800f646 <HAL_RTC_DeactivateAlarm+0xd2>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800f63a:	f7fd ff09 	bl	800d450 <HAL_GetTick>
 800f63e:	1b80      	subs	r0, r0, r6
 800f640:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800f644:	d8d4      	bhi.n	800f5f0 <HAL_RTC_DeactivateAlarm+0x7c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800f646:	682b      	ldr	r3, [r5, #0]
 800f648:	68dc      	ldr	r4, [r3, #12]
 800f64a:	f014 0401 	ands.w	r4, r4, #1
 800f64e:	d0f4      	beq.n	800f63a <HAL_RTC_DeactivateAlarm+0xc6>
 800f650:	e7be      	b.n	800f5d0 <HAL_RTC_DeactivateAlarm+0x5c>
  __HAL_LOCK(hrtc);
 800f652:	2002      	movs	r0, #2
}
 800f654:	bd70      	pop	{r4, r5, r6, pc}
 800f656:	bf00      	nop
 800f658:	0801652c 	.word	0x0801652c

0800f65c <HAL_RTC_AlarmIRQHandler>:
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800f65c:	6803      	ldr	r3, [r0, #0]
 800f65e:	689a      	ldr	r2, [r3, #8]
 800f660:	04d2      	lsls	r2, r2, #19
{
 800f662:	b510      	push	{r4, lr}
 800f664:	4604      	mov	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800f666:	d502      	bpl.n	800f66e <HAL_RTC_AlarmIRQHandler+0x12>
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800f668:	68da      	ldr	r2, [r3, #12]
 800f66a:	05d1      	lsls	r1, r2, #23
 800f66c:	d417      	bmi.n	800f69e <HAL_RTC_AlarmIRQHandler+0x42>
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800f66e:	689a      	ldr	r2, [r3, #8]
 800f670:	0492      	lsls	r2, r2, #18
 800f672:	d502      	bpl.n	800f67a <HAL_RTC_AlarmIRQHandler+0x1e>
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800f674:	68db      	ldr	r3, [r3, #12]
 800f676:	059b      	lsls	r3, r3, #22
 800f678:	d407      	bmi.n	800f68a <HAL_RTC_AlarmIRQHandler+0x2e>
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800f67a:	4a0d      	ldr	r2, [pc, #52]	; (800f6b0 <HAL_RTC_AlarmIRQHandler+0x54>)
 800f67c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hrtc->State = HAL_RTC_STATE_READY;
 800f680:	2301      	movs	r3, #1
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800f682:	60d1      	str	r1, [r2, #12]
  hrtc->State = HAL_RTC_STATE_READY;
 800f684:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800f688:	bd10      	pop	{r4, pc}
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800f68a:	4620      	mov	r0, r4
 800f68c:	f000 fc3a 	bl	800ff04 <HAL_RTCEx_AlarmBEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800f690:	6822      	ldr	r2, [r4, #0]
 800f692:	68d3      	ldr	r3, [r2, #12]
 800f694:	b2db      	uxtb	r3, r3
 800f696:	f463 7320 	orn	r3, r3, #640	; 0x280
 800f69a:	60d3      	str	r3, [r2, #12]
 800f69c:	e7ed      	b.n	800f67a <HAL_RTC_AlarmIRQHandler+0x1e>
      HAL_RTC_AlarmAEventCallback(hrtc);
 800f69e:	f7f3 fb69 	bl	8002d74 <HAL_RTC_AlarmAEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800f6a2:	6823      	ldr	r3, [r4, #0]
 800f6a4:	68da      	ldr	r2, [r3, #12]
 800f6a6:	b2d2      	uxtb	r2, r2
 800f6a8:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800f6ac:	60da      	str	r2, [r3, #12]
 800f6ae:	e7de      	b.n	800f66e <HAL_RTC_AlarmIRQHandler+0x12>
 800f6b0:	58000800 	.word	0x58000800

0800f6b4 <HAL_RTC_WaitForSynchro>:
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800f6b4:	6802      	ldr	r2, [r0, #0]
{
 800f6b6:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800f6b8:	68d3      	ldr	r3, [r2, #12]
 800f6ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f6be:	60d3      	str	r3, [r2, #12]
{
 800f6c0:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 800f6c2:	f7fd fec5 	bl	800d450 <HAL_GetTick>
 800f6c6:	4605      	mov	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800f6c8:	e005      	b.n	800f6d6 <HAL_RTC_WaitForSynchro+0x22>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f6ca:	f7fd fec1 	bl	800d450 <HAL_GetTick>
 800f6ce:	1b43      	subs	r3, r0, r5
 800f6d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f6d4:	d805      	bhi.n	800f6e2 <HAL_RTC_WaitForSynchro+0x2e>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800f6d6:	6823      	ldr	r3, [r4, #0]
 800f6d8:	68db      	ldr	r3, [r3, #12]
 800f6da:	069b      	lsls	r3, r3, #26
 800f6dc:	d5f5      	bpl.n	800f6ca <HAL_RTC_WaitForSynchro+0x16>
  return HAL_OK;
 800f6de:	2000      	movs	r0, #0
}
 800f6e0:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 800f6e2:	2003      	movs	r0, #3
}
 800f6e4:	bd38      	pop	{r3, r4, r5, pc}
 800f6e6:	bf00      	nop

0800f6e8 <RTC_EnterInitMode>:
{
 800f6e8:	b538      	push	{r3, r4, r5, lr}
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800f6ea:	6803      	ldr	r3, [r0, #0]
 800f6ec:	68da      	ldr	r2, [r3, #12]
 800f6ee:	0652      	lsls	r2, r2, #25
 800f6f0:	d501      	bpl.n	800f6f6 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 800f6f2:	2000      	movs	r0, #0
}
 800f6f4:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800f6f6:	f04f 32ff 	mov.w	r2, #4294967295
 800f6fa:	60da      	str	r2, [r3, #12]
 800f6fc:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 800f6fe:	f7fd fea7 	bl	800d450 <HAL_GetTick>
 800f702:	4605      	mov	r5, r0
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800f704:	6823      	ldr	r3, [r4, #0]
 800f706:	68db      	ldr	r3, [r3, #12]
 800f708:	065b      	lsls	r3, r3, #25
 800f70a:	d4f2      	bmi.n	800f6f2 <RTC_EnterInitMode+0xa>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800f70c:	f7fd fea0 	bl	800d450 <HAL_GetTick>
 800f710:	1b43      	subs	r3, r0, r5
 800f712:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f716:	d9f5      	bls.n	800f704 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 800f718:	2003      	movs	r0, #3
}
 800f71a:	bd38      	pop	{r3, r4, r5, pc}

0800f71c <HAL_RTC_Init>:
{
 800f71c:	b570      	push	{r4, r5, r6, lr}
  if (hrtc == NULL)
 800f71e:	2800      	cmp	r0, #0
 800f720:	f000 80ab 	beq.w	800f87a <HAL_RTC_Init+0x15e>
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 800f724:	4b59      	ldr	r3, [pc, #356]	; (800f88c <HAL_RTC_Init+0x170>)
 800f726:	6802      	ldr	r2, [r0, #0]
 800f728:	429a      	cmp	r2, r3
 800f72a:	4604      	mov	r4, r0
 800f72c:	d003      	beq.n	800f736 <HAL_RTC_Init+0x1a>
 800f72e:	4858      	ldr	r0, [pc, #352]	; (800f890 <HAL_RTC_Init+0x174>)
 800f730:	21ef      	movs	r1, #239	; 0xef
 800f732:	f7f2 fbdd 	bl	8001ef0 <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 800f736:	6863      	ldr	r3, [r4, #4]
 800f738:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 800f73c:	f040 80a0 	bne.w	800f880 <HAL_RTC_Init+0x164>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 800f740:	68a3      	ldr	r3, [r4, #8]
 800f742:	2b7f      	cmp	r3, #127	; 0x7f
 800f744:	f200 8092 	bhi.w	800f86c <HAL_RTC_Init+0x150>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 800f748:	68e3      	ldr	r3, [r4, #12]
 800f74a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f74e:	f080 8088 	bcs.w	800f862 <HAL_RTC_Init+0x146>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 800f752:	6923      	ldr	r3, [r4, #16]
 800f754:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 800f758:	d003      	beq.n	800f762 <HAL_RTC_Init+0x46>
 800f75a:	484d      	ldr	r0, [pc, #308]	; (800f890 <HAL_RTC_Init+0x174>)
 800f75c:	21f3      	movs	r1, #243	; 0xf3
 800f75e:	f7f2 fbc7 	bl	8001ef0 <assert_failed>
  assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
 800f762:	6963      	ldr	r3, [r4, #20]
 800f764:	f033 0302 	bics.w	r3, r3, #2
 800f768:	d003      	beq.n	800f772 <HAL_RTC_Init+0x56>
 800f76a:	4849      	ldr	r0, [pc, #292]	; (800f890 <HAL_RTC_Init+0x174>)
 800f76c:	21f4      	movs	r1, #244	; 0xf4
 800f76e:	f7f2 fbbf 	bl	8001ef0 <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 800f772:	69a3      	ldr	r3, [r4, #24]
 800f774:	f433 1380 	bics.w	r3, r3, #1048576	; 0x100000
 800f778:	d144      	bne.n	800f804 <HAL_RTC_Init+0xe8>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 800f77a:	69e3      	ldr	r3, [r4, #28]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d148      	bne.n	800f812 <HAL_RTC_Init+0xf6>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800f780:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800f784:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d04c      	beq.n	800f826 <HAL_RTC_Init+0x10a>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f78c:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f78e:	2002      	movs	r0, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f790:	21ca      	movs	r1, #202	; 0xca
 800f792:	2253      	movs	r2, #83	; 0x53
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f794:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f798:	6259      	str	r1, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800f79a:	4620      	mov	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f79c:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800f79e:	f7ff ffa3 	bl	800f6e8 <RTC_EnterInitMode>
 800f7a2:	4605      	mov	r5, r0
 800f7a4:	2800      	cmp	r0, #0
 800f7a6:	d153      	bne.n	800f850 <HAL_RTC_Init+0x134>
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800f7a8:	e9d4 3200 	ldrd	r3, r2, [r4]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800f7ac:	6899      	ldr	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800f7ae:	6926      	ldr	r6, [r4, #16]
 800f7b0:	69a0      	ldr	r0, [r4, #24]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800f7b2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800f7b6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800f7ba:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800f7bc:	6899      	ldr	r1, [r3, #8]
 800f7be:	4332      	orrs	r2, r6
 800f7c0:	4302      	orrs	r2, r0
 800f7c2:	430a      	orrs	r2, r1
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800f7c4:	68e1      	ldr	r1, [r4, #12]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800f7c6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800f7c8:	6119      	str	r1, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800f7ca:	6919      	ldr	r1, [r3, #16]
 800f7cc:	68a6      	ldr	r6, [r4, #8]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800f7ce:	69e2      	ldr	r2, [r4, #28]
 800f7d0:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800f7d2:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 800f7d6:	6119      	str	r1, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800f7d8:	68d9      	ldr	r1, [r3, #12]
 800f7da:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f7de:	60d9      	str	r1, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 800f7e0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800f7e2:	f021 0102 	bic.w	r1, r1, #2
 800f7e6:	64d9      	str	r1, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800f7e8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800f7ea:	4302      	orrs	r2, r0
 800f7ec:	430a      	orrs	r2, r1
 800f7ee:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800f7f0:	689a      	ldr	r2, [r3, #8]
 800f7f2:	0692      	lsls	r2, r2, #26
 800f7f4:	d51d      	bpl.n	800f832 <HAL_RTC_Init+0x116>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f7f6:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_READY;
 800f7f8:	2201      	movs	r2, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f7fa:	6259      	str	r1, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800f7fc:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
}
 800f800:	4628      	mov	r0, r5
 800f802:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 800f804:	4822      	ldr	r0, [pc, #136]	; (800f890 <HAL_RTC_Init+0x174>)
 800f806:	21f5      	movs	r1, #245	; 0xf5
 800f808:	f7f2 fb72 	bl	8001ef0 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 800f80c:	69e3      	ldr	r3, [r4, #28]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d0b6      	beq.n	800f780 <HAL_RTC_Init+0x64>
 800f812:	481f      	ldr	r0, [pc, #124]	; (800f890 <HAL_RTC_Init+0x174>)
 800f814:	21f6      	movs	r1, #246	; 0xf6
 800f816:	f7f2 fb6b 	bl	8001ef0 <assert_failed>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800f81a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800f81e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f822:	2b00      	cmp	r3, #0
 800f824:	d1b2      	bne.n	800f78c <HAL_RTC_Init+0x70>
    hrtc->Lock = HAL_UNLOCKED;
 800f826:	f884 2020 	strb.w	r2, [r4, #32]
    HAL_RTC_MspInit(hrtc);
 800f82a:	4620      	mov	r0, r4
 800f82c:	f7f2 fbcc 	bl	8001fc8 <HAL_RTC_MspInit>
 800f830:	e7ac      	b.n	800f78c <HAL_RTC_Init+0x70>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f832:	4620      	mov	r0, r4
 800f834:	f7ff ff3e 	bl	800f6b4 <HAL_RTC_WaitForSynchro>
 800f838:	b1e8      	cbz	r0, 800f876 <HAL_RTC_Init+0x15a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f83a:	6822      	ldr	r2, [r4, #0]
 800f83c:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 800f83e:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f840:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 800f842:	f884 5020 	strb.w	r5, [r4, #32]
        hrtc->State = HAL_RTC_STATE_ERROR;
 800f846:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        return HAL_ERROR;
 800f84a:	2501      	movs	r5, #1
}
 800f84c:	4628      	mov	r0, r5
 800f84e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f850:	6822      	ldr	r2, [r4, #0]
 800f852:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 800f854:	2304      	movs	r3, #4
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f856:	6251      	str	r1, [r2, #36]	; 0x24
    return HAL_ERROR;
 800f858:	2501      	movs	r5, #1
    hrtc->State = HAL_RTC_STATE_ERROR;
 800f85a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800f85e:	4628      	mov	r0, r5
 800f860:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 800f862:	480b      	ldr	r0, [pc, #44]	; (800f890 <HAL_RTC_Init+0x174>)
 800f864:	21f2      	movs	r1, #242	; 0xf2
 800f866:	f7f2 fb43 	bl	8001ef0 <assert_failed>
 800f86a:	e772      	b.n	800f752 <HAL_RTC_Init+0x36>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 800f86c:	4808      	ldr	r0, [pc, #32]	; (800f890 <HAL_RTC_Init+0x174>)
 800f86e:	21f1      	movs	r1, #241	; 0xf1
 800f870:	f7f2 fb3e 	bl	8001ef0 <assert_failed>
 800f874:	e768      	b.n	800f748 <HAL_RTC_Init+0x2c>
 800f876:	6823      	ldr	r3, [r4, #0]
 800f878:	e7bd      	b.n	800f7f6 <HAL_RTC_Init+0xda>
    return HAL_ERROR;
 800f87a:	2501      	movs	r5, #1
}
 800f87c:	4628      	mov	r0, r5
 800f87e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 800f880:	4803      	ldr	r0, [pc, #12]	; (800f890 <HAL_RTC_Init+0x174>)
 800f882:	21f0      	movs	r1, #240	; 0xf0
 800f884:	f7f2 fb34 	bl	8001ef0 <assert_failed>
 800f888:	e75a      	b.n	800f740 <HAL_RTC_Init+0x24>
 800f88a:	bf00      	nop
 800f88c:	40002800 	.word	0x40002800
 800f890:	0801652c 	.word	0x0801652c

0800f894 <HAL_RTC_SetTime>:
  assert_param(IS_RTC_FORMAT(Format));
 800f894:	2a01      	cmp	r2, #1
{
 800f896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f898:	4605      	mov	r5, r0
 800f89a:	460e      	mov	r6, r1
  assert_param(IS_RTC_FORMAT(Format));
 800f89c:	f200 8088 	bhi.w	800f9b0 <HAL_RTC_SetTime+0x11c>
  __HAL_LOCK(hrtc);
 800f8a0:	f890 3020 	ldrb.w	r3, [r0, #32]
 800f8a4:	2b01      	cmp	r3, #1
 800f8a6:	f000 812f 	beq.w	800fb08 <HAL_RTC_SetTime+0x274>
 800f8aa:	4617      	mov	r7, r2
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f8ac:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 800f8ae:	2201      	movs	r2, #1
 800f8b0:	f880 2020 	strb.w	r2, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f8b4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  if (Format == RTC_FORMAT_BIN)
 800f8b8:	2f00      	cmp	r7, #0
 800f8ba:	f040 8089 	bne.w	800f9d0 <HAL_RTC_SetTime+0x13c>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f8be:	6803      	ldr	r3, [r0, #0]
 800f8c0:	689b      	ldr	r3, [r3, #8]
 800f8c2:	f013 0f40 	tst.w	r3, #64	; 0x40
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 800f8c6:	780b      	ldrb	r3, [r1, #0]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f8c8:	f000 80d4 	beq.w	800fa74 <HAL_RTC_SetTime+0x1e0>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 800f8cc:	3b01      	subs	r3, #1
 800f8ce:	2b0b      	cmp	r3, #11
 800f8d0:	f200 80fa 	bhi.w	800fac8 <HAL_RTC_SetTime+0x234>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 800f8d4:	78f3      	ldrb	r3, [r6, #3]
 800f8d6:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 800f8da:	f040 80df 	bne.w	800fa9c <HAL_RTC_SetTime+0x208>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 800f8de:	7873      	ldrb	r3, [r6, #1]
 800f8e0:	2b3b      	cmp	r3, #59	; 0x3b
 800f8e2:	f200 80fe 	bhi.w	800fae2 <HAL_RTC_SetTime+0x24e>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 800f8e6:	78b4      	ldrb	r4, [r6, #2]
 800f8e8:	2c3b      	cmp	r4, #59	; 0x3b
 800f8ea:	f200 80f3 	bhi.w	800fad4 <HAL_RTC_SetTime+0x240>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800f8ee:	7833      	ldrb	r3, [r6, #0]
  while (Param >= 10U)
 800f8f0:	2b09      	cmp	r3, #9
 800f8f2:	d909      	bls.n	800f908 <HAL_RTC_SetTime+0x74>
  uint32_t bcdhigh = 0U;
 800f8f4:	2200      	movs	r2, #0
    Param -= 10U;
 800f8f6:	3b0a      	subs	r3, #10
 800f8f8:	b2db      	uxtb	r3, r3
  while (Param >= 10U)
 800f8fa:	2b09      	cmp	r3, #9
    bcdhigh++;
 800f8fc:	f102 0201 	add.w	r2, r2, #1
  while (Param >= 10U)
 800f900:	d8f9      	bhi.n	800f8f6 <HAL_RTC_SetTime+0x62>
 800f902:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800f906:	b2db      	uxtb	r3, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800f908:	7870      	ldrb	r0, [r6, #1]
  while (Param >= 10U)
 800f90a:	2809      	cmp	r0, #9
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800f90c:	ea4f 4103 	mov.w	r1, r3, lsl #16
  while (Param >= 10U)
 800f910:	d909      	bls.n	800f926 <HAL_RTC_SetTime+0x92>
  uint32_t bcdhigh = 0U;
 800f912:	2300      	movs	r3, #0
    Param -= 10U;
 800f914:	380a      	subs	r0, #10
 800f916:	b2c0      	uxtb	r0, r0
  while (Param >= 10U)
 800f918:	2809      	cmp	r0, #9
    bcdhigh++;
 800f91a:	f103 0301 	add.w	r3, r3, #1
  while (Param >= 10U)
 800f91e:	d8f9      	bhi.n	800f914 <HAL_RTC_SetTime+0x80>
 800f920:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 800f924:	b2c0      	uxtb	r0, r0
 800f926:	2c09      	cmp	r4, #9
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800f928:	ea4f 2000 	mov.w	r0, r0, lsl #8
  while (Param >= 10U)
 800f92c:	d908      	bls.n	800f940 <HAL_RTC_SetTime+0xac>
    Param -= 10U;
 800f92e:	3c0a      	subs	r4, #10
 800f930:	b2e4      	uxtb	r4, r4
  while (Param >= 10U)
 800f932:	2c09      	cmp	r4, #9
    bcdhigh++;
 800f934:	f107 0701 	add.w	r7, r7, #1
  while (Param >= 10U)
 800f938:	d8f9      	bhi.n	800f92e <HAL_RTC_SetTime+0x9a>
 800f93a:	ea44 1407 	orr.w	r4, r4, r7, lsl #4
 800f93e:	b2e4      	uxtb	r4, r4
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800f940:	78f3      	ldrb	r3, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800f942:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f946:	4303      	orrs	r3, r0
 800f948:	431c      	orrs	r4, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f94a:	682b      	ldr	r3, [r5, #0]
 800f94c:	21ca      	movs	r1, #202	; 0xca
 800f94e:	2253      	movs	r2, #83	; 0x53
 800f950:	6259      	str	r1, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800f952:	4628      	mov	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f954:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800f956:	f7ff fec7 	bl	800f6e8 <RTC_EnterInitMode>
 800f95a:	4607      	mov	r7, r0
 800f95c:	2800      	cmp	r0, #0
 800f95e:	d16c      	bne.n	800fa3a <HAL_RTC_SetTime+0x1a6>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800f960:	682a      	ldr	r2, [r5, #0]
 800f962:	f004 337f 	and.w	r3, r4, #2139062143	; 0x7f7f7f7f
 800f966:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800f96a:	e9d6 1403 	ldrd	r1, r4, [r6, #12]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800f96e:	6013      	str	r3, [r2, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800f970:	6890      	ldr	r0, [r2, #8]
 800f972:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 800f976:	6090      	str	r0, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800f978:	6890      	ldr	r0, [r2, #8]
 800f97a:	ea41 0304 	orr.w	r3, r1, r4
 800f97e:	4303      	orrs	r3, r0
 800f980:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800f982:	68d3      	ldr	r3, [r2, #12]
 800f984:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f988:	60d3      	str	r3, [r2, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800f98a:	6893      	ldr	r3, [r2, #8]
 800f98c:	069b      	lsls	r3, r3, #26
 800f98e:	d405      	bmi.n	800f99c <HAL_RTC_SetTime+0x108>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f990:	4628      	mov	r0, r5
 800f992:	f7ff fe8f 	bl	800f6b4 <HAL_RTC_WaitForSynchro>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f996:	682a      	ldr	r2, [r5, #0]
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f998:	2800      	cmp	r0, #0
 800f99a:	d175      	bne.n	800fa88 <HAL_RTC_SetTime+0x1f4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f99c:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_READY;
 800f99e:	2101      	movs	r1, #1
    __HAL_UNLOCK(hrtc);
 800f9a0:	2300      	movs	r3, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f9a2:	6250      	str	r0, [r2, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800f9a4:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 800f9a8:	f885 3020 	strb.w	r3, [r5, #32]
}
 800f9ac:	4638      	mov	r0, r7
 800f9ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_RTC_FORMAT(Format));
 800f9b0:	4857      	ldr	r0, [pc, #348]	; (800fb10 <HAL_RTC_SetTime+0x27c>)
 800f9b2:	f240 21f3 	movw	r1, #755	; 0x2f3
 800f9b6:	f7f2 fa9b 	bl	8001ef0 <assert_failed>
  __HAL_LOCK(hrtc);
 800f9ba:	f895 3020 	ldrb.w	r3, [r5, #32]
 800f9be:	2b01      	cmp	r3, #1
 800f9c0:	f000 80a2 	beq.w	800fb08 <HAL_RTC_SetTime+0x274>
 800f9c4:	2201      	movs	r2, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f9c6:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 800f9c8:	f885 2020 	strb.w	r2, [r5, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f9cc:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f9d0:	682b      	ldr	r3, [r5, #0]
 800f9d2:	689a      	ldr	r2, [r3, #8]
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 800f9d4:	7833      	ldrb	r3, [r6, #0]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f9d6:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 800f9da:	d03a      	beq.n	800fa52 <HAL_RTC_SetTime+0x1be>
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800f9dc:	091a      	lsrs	r2, r3, #4
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800f9de:	f003 030f 	and.w	r3, r3, #15
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800f9e2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 800f9e6:	3b01      	subs	r3, #1
 800f9e8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800f9ec:	b2db      	uxtb	r3, r3
 800f9ee:	2b0b      	cmp	r3, #11
 800f9f0:	d860      	bhi.n	800fab4 <HAL_RTC_SetTime+0x220>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 800f9f2:	78f3      	ldrb	r3, [r6, #3]
 800f9f4:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 800f9f8:	d156      	bne.n	800faa8 <HAL_RTC_SetTime+0x214>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 800f9fa:	7873      	ldrb	r3, [r6, #1]
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800f9fc:	091a      	lsrs	r2, r3, #4
 800f9fe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800fa02:	f003 030f 	and.w	r3, r3, #15
 800fa06:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 800fa0a:	b2db      	uxtb	r3, r3
 800fa0c:	2b3b      	cmp	r3, #59	; 0x3b
 800fa0e:	d875      	bhi.n	800fafc <HAL_RTC_SetTime+0x268>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 800fa10:	78b4      	ldrb	r4, [r6, #2]
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800fa12:	0922      	lsrs	r2, r4, #4
 800fa14:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800fa18:	f004 020f 	and.w	r2, r4, #15
 800fa1c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 800fa20:	b2d2      	uxtb	r2, r2
 800fa22:	2a3b      	cmp	r2, #59	; 0x3b
 800fa24:	d863      	bhi.n	800faee <HAL_RTC_SetTime+0x25a>
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800fa26:	7873      	ldrb	r3, [r6, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800fa28:	7831      	ldrb	r1, [r6, #0]
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800fa2a:	78f2      	ldrb	r2, [r6, #3]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800fa2c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800fa2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800fa32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa36:	431c      	orrs	r4, r3
 800fa38:	e787      	b.n	800f94a <HAL_RTC_SetTime+0xb6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fa3a:	6829      	ldr	r1, [r5, #0]
 800fa3c:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 800fa3e:	2204      	movs	r2, #4
    __HAL_UNLOCK(hrtc);
 800fa40:	2300      	movs	r3, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fa42:	6248      	str	r0, [r1, #36]	; 0x24
    return HAL_ERROR;
 800fa44:	2701      	movs	r7, #1
    hrtc->State = HAL_RTC_STATE_ERROR;
 800fa46:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 800fa4a:	f885 3020 	strb.w	r3, [r5, #32]
}
 800fa4e:	4638      	mov	r0, r7
 800fa50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      sTime->TimeFormat = 0x00U;
 800fa52:	70f2      	strb	r2, [r6, #3]
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800fa54:	091a      	lsrs	r2, r3, #4
 800fa56:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800fa5a:	f003 030f 	and.w	r3, r3, #15
 800fa5e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 800fa62:	b2db      	uxtb	r3, r3
 800fa64:	2b17      	cmp	r3, #23
 800fa66:	d9c8      	bls.n	800f9fa <HAL_RTC_SetTime+0x166>
 800fa68:	4829      	ldr	r0, [pc, #164]	; (800fb10 <HAL_RTC_SetTime+0x27c>)
 800fa6a:	f44f 7146 	mov.w	r1, #792	; 0x318
 800fa6e:	f7f2 fa3f 	bl	8001ef0 <assert_failed>
 800fa72:	e7c2      	b.n	800f9fa <HAL_RTC_SetTime+0x166>
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 800fa74:	2b17      	cmp	r3, #23
      sTime->TimeFormat = 0x00U;
 800fa76:	70cf      	strb	r7, [r1, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 800fa78:	f67f af31 	bls.w	800f8de <HAL_RTC_SetTime+0x4a>
 800fa7c:	4824      	ldr	r0, [pc, #144]	; (800fb10 <HAL_RTC_SetTime+0x27c>)
 800fa7e:	f44f 7141 	mov.w	r1, #772	; 0x304
 800fa82:	f7f2 fa35 	bl	8001ef0 <assert_failed>
 800fa86:	e72a      	b.n	800f8de <HAL_RTC_SetTime+0x4a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fa88:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 800fa8a:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fa8c:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 800fa8e:	f885 7020 	strb.w	r7, [r5, #32]
        hrtc->State = HAL_RTC_STATE_ERROR;
 800fa92:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        return HAL_ERROR;
 800fa96:	2701      	movs	r7, #1
}
 800fa98:	4638      	mov	r0, r7
 800fa9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 800fa9c:	481c      	ldr	r0, [pc, #112]	; (800fb10 <HAL_RTC_SetTime+0x27c>)
 800fa9e:	f240 21ff 	movw	r1, #767	; 0x2ff
 800faa2:	f7f2 fa25 	bl	8001ef0 <assert_failed>
 800faa6:	e71a      	b.n	800f8de <HAL_RTC_SetTime+0x4a>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 800faa8:	4819      	ldr	r0, [pc, #100]	; (800fb10 <HAL_RTC_SetTime+0x27c>)
 800faaa:	f240 3113 	movw	r1, #787	; 0x313
 800faae:	f7f2 fa1f 	bl	8001ef0 <assert_failed>
 800fab2:	e7a2      	b.n	800f9fa <HAL_RTC_SetTime+0x166>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 800fab4:	4816      	ldr	r0, [pc, #88]	; (800fb10 <HAL_RTC_SetTime+0x27c>)
 800fab6:	f240 3112 	movw	r1, #786	; 0x312
 800faba:	f7f2 fa19 	bl	8001ef0 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 800fabe:	78f3      	ldrb	r3, [r6, #3]
 800fac0:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 800fac4:	d099      	beq.n	800f9fa <HAL_RTC_SetTime+0x166>
 800fac6:	e7ef      	b.n	800faa8 <HAL_RTC_SetTime+0x214>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 800fac8:	4811      	ldr	r0, [pc, #68]	; (800fb10 <HAL_RTC_SetTime+0x27c>)
 800faca:	f240 21fe 	movw	r1, #766	; 0x2fe
 800face:	f7f2 fa0f 	bl	8001ef0 <assert_failed>
 800fad2:	e6ff      	b.n	800f8d4 <HAL_RTC_SetTime+0x40>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 800fad4:	480e      	ldr	r0, [pc, #56]	; (800fb10 <HAL_RTC_SetTime+0x27c>)
 800fad6:	f240 3107 	movw	r1, #775	; 0x307
 800fada:	f7f2 fa09 	bl	8001ef0 <assert_failed>
 800fade:	78b4      	ldrb	r4, [r6, #2]
 800fae0:	e705      	b.n	800f8ee <HAL_RTC_SetTime+0x5a>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 800fae2:	480b      	ldr	r0, [pc, #44]	; (800fb10 <HAL_RTC_SetTime+0x27c>)
 800fae4:	f240 3106 	movw	r1, #774	; 0x306
 800fae8:	f7f2 fa02 	bl	8001ef0 <assert_failed>
 800faec:	e6fb      	b.n	800f8e6 <HAL_RTC_SetTime+0x52>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 800faee:	4808      	ldr	r0, [pc, #32]	; (800fb10 <HAL_RTC_SetTime+0x27c>)
 800faf0:	f240 311b 	movw	r1, #795	; 0x31b
 800faf4:	f7f2 f9fc 	bl	8001ef0 <assert_failed>
 800faf8:	78b4      	ldrb	r4, [r6, #2]
 800fafa:	e794      	b.n	800fa26 <HAL_RTC_SetTime+0x192>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 800fafc:	4804      	ldr	r0, [pc, #16]	; (800fb10 <HAL_RTC_SetTime+0x27c>)
 800fafe:	f240 311a 	movw	r1, #794	; 0x31a
 800fb02:	f7f2 f9f5 	bl	8001ef0 <assert_failed>
 800fb06:	e783      	b.n	800fa10 <HAL_RTC_SetTime+0x17c>
  __HAL_LOCK(hrtc);
 800fb08:	2702      	movs	r7, #2
}
 800fb0a:	4638      	mov	r0, r7
 800fb0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb0e:	bf00      	nop
 800fb10:	0801652c 	.word	0x0801652c

0800fb14 <HAL_RTC_SetDate>:
  assert_param(IS_RTC_FORMAT(Format));
 800fb14:	2a01      	cmp	r2, #1
{
 800fb16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb18:	4605      	mov	r5, r0
 800fb1a:	460f      	mov	r7, r1
  assert_param(IS_RTC_FORMAT(Format));
 800fb1c:	d87e      	bhi.n	800fc1c <HAL_RTC_SetDate+0x108>
  __HAL_LOCK(hrtc);
 800fb1e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800fb22:	2b01      	cmp	r3, #1
 800fb24:	f000 8100 	beq.w	800fd28 <HAL_RTC_SetDate+0x214>
 800fb28:	4614      	mov	r4, r2
  hrtc->State = HAL_RTC_STATE_BUSY;
 800fb2a:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 800fb2c:	2201      	movs	r2, #1
 800fb2e:	f880 2020 	strb.w	r2, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800fb32:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800fb36:	2c00      	cmp	r4, #0
 800fb38:	d17f      	bne.n	800fc3a <HAL_RTC_SetDate+0x126>
 800fb3a:	784b      	ldrb	r3, [r1, #1]
 800fb3c:	06da      	lsls	r2, r3, #27
 800fb3e:	d503      	bpl.n	800fb48 <HAL_RTC_SetDate+0x34>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800fb40:	f023 0310 	bic.w	r3, r3, #16
 800fb44:	330a      	adds	r3, #10
 800fb46:	704b      	strb	r3, [r1, #1]
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 800fb48:	783b      	ldrb	r3, [r7, #0]
 800fb4a:	3b01      	subs	r3, #1
 800fb4c:	2b06      	cmp	r3, #6
 800fb4e:	f200 80d9 	bhi.w	800fd04 <HAL_RTC_SetDate+0x1f0>
    assert_param(IS_RTC_YEAR(sDate->Year));
 800fb52:	78fb      	ldrb	r3, [r7, #3]
 800fb54:	2b63      	cmp	r3, #99	; 0x63
 800fb56:	f200 80cf 	bhi.w	800fcf8 <HAL_RTC_SetDate+0x1e4>
    assert_param(IS_RTC_MONTH(sDate->Month));
 800fb5a:	787b      	ldrb	r3, [r7, #1]
 800fb5c:	3b01      	subs	r3, #1
 800fb5e:	2b0b      	cmp	r3, #11
 800fb60:	f200 80c4 	bhi.w	800fcec <HAL_RTC_SetDate+0x1d8>
    assert_param(IS_RTC_DATE(sDate->Date));
 800fb64:	78ba      	ldrb	r2, [r7, #2]
 800fb66:	1e53      	subs	r3, r2, #1
 800fb68:	2b1e      	cmp	r3, #30
 800fb6a:	f200 80b8 	bhi.w	800fcde <HAL_RTC_SetDate+0x1ca>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800fb6e:	78fb      	ldrb	r3, [r7, #3]
  while (Param >= 10U)
 800fb70:	2b09      	cmp	r3, #9
 800fb72:	d909      	bls.n	800fb88 <HAL_RTC_SetDate+0x74>
  uint32_t bcdhigh = 0U;
 800fb74:	2100      	movs	r1, #0
    Param -= 10U;
 800fb76:	3b0a      	subs	r3, #10
 800fb78:	b2db      	uxtb	r3, r3
  while (Param >= 10U)
 800fb7a:	2b09      	cmp	r3, #9
    bcdhigh++;
 800fb7c:	f101 0101 	add.w	r1, r1, #1
  while (Param >= 10U)
 800fb80:	d8f9      	bhi.n	800fb76 <HAL_RTC_SetDate+0x62>
 800fb82:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800fb86:	b2db      	uxtb	r3, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800fb88:	787e      	ldrb	r6, [r7, #1]
  while (Param >= 10U)
 800fb8a:	2e09      	cmp	r6, #9
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800fb8c:	ea4f 4003 	mov.w	r0, r3, lsl #16
  while (Param >= 10U)
 800fb90:	d909      	bls.n	800fba6 <HAL_RTC_SetDate+0x92>
  uint32_t bcdhigh = 0U;
 800fb92:	2300      	movs	r3, #0
    Param -= 10U;
 800fb94:	3e0a      	subs	r6, #10
 800fb96:	b2f6      	uxtb	r6, r6
  while (Param >= 10U)
 800fb98:	2e09      	cmp	r6, #9
    bcdhigh++;
 800fb9a:	f103 0301 	add.w	r3, r3, #1
  while (Param >= 10U)
 800fb9e:	d8f9      	bhi.n	800fb94 <HAL_RTC_SetDate+0x80>
 800fba0:	ea46 1603 	orr.w	r6, r6, r3, lsl #4
 800fba4:	b2f6      	uxtb	r6, r6
 800fba6:	2a09      	cmp	r2, #9
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800fba8:	ea4f 2606 	mov.w	r6, r6, lsl #8
  while (Param >= 10U)
 800fbac:	d908      	bls.n	800fbc0 <HAL_RTC_SetDate+0xac>
    Param -= 10U;
 800fbae:	3a0a      	subs	r2, #10
 800fbb0:	b2d2      	uxtb	r2, r2
  while (Param >= 10U)
 800fbb2:	2a09      	cmp	r2, #9
    bcdhigh++;
 800fbb4:	f104 0401 	add.w	r4, r4, #1
  while (Param >= 10U)
 800fbb8:	d8f9      	bhi.n	800fbae <HAL_RTC_SetDate+0x9a>
 800fbba:	ea42 1404 	orr.w	r4, r2, r4, lsl #4
 800fbbe:	b2e2      	uxtb	r2, r4
                  ((uint32_t)sDate->WeekDay << 13U));
 800fbc0:	783b      	ldrb	r3, [r7, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800fbc2:	ea40 3343 	orr.w	r3, r0, r3, lsl #13
 800fbc6:	4333      	orrs	r3, r6
 800fbc8:	ea43 0402 	orr.w	r4, r3, r2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fbcc:	682b      	ldr	r3, [r5, #0]
 800fbce:	21ca      	movs	r1, #202	; 0xca
 800fbd0:	2253      	movs	r2, #83	; 0x53
 800fbd2:	6259      	str	r1, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800fbd4:	4628      	mov	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fbd6:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800fbd8:	f7ff fd86 	bl	800f6e8 <RTC_EnterInitMode>
 800fbdc:	4606      	mov	r6, r0
 800fbde:	2800      	cmp	r0, #0
 800fbe0:	d167      	bne.n	800fcb2 <HAL_RTC_SetDate+0x19e>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800fbe2:	682a      	ldr	r2, [r5, #0]
 800fbe4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 800fbe8:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 800fbec:	6054      	str	r4, [r2, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800fbee:	68d3      	ldr	r3, [r2, #12]
 800fbf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fbf4:	60d3      	str	r3, [r2, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800fbf6:	6893      	ldr	r3, [r2, #8]
 800fbf8:	069b      	lsls	r3, r3, #26
 800fbfa:	d405      	bmi.n	800fc08 <HAL_RTC_SetDate+0xf4>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800fbfc:	4628      	mov	r0, r5
 800fbfe:	f7ff fd59 	bl	800f6b4 <HAL_RTC_WaitForSynchro>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fc02:	682a      	ldr	r2, [r5, #0]
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800fc04:	2800      	cmp	r0, #0
 800fc06:	d160      	bne.n	800fcca <HAL_RTC_SetDate+0x1b6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fc08:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_READY ;
 800fc0a:	2101      	movs	r1, #1
    __HAL_UNLOCK(hrtc);
 800fc0c:	2300      	movs	r3, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fc0e:	6250      	str	r0, [r2, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 800fc10:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 800fc14:	f885 3020 	strb.w	r3, [r5, #32]
}
 800fc18:	4630      	mov	r0, r6
 800fc1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_RTC_FORMAT(Format));
 800fc1c:	4844      	ldr	r0, [pc, #272]	; (800fd30 <HAL_RTC_SetDate+0x21c>)
 800fc1e:	f240 31a3 	movw	r1, #931	; 0x3a3
 800fc22:	f7f2 f965 	bl	8001ef0 <assert_failed>
  __HAL_LOCK(hrtc);
 800fc26:	f895 3020 	ldrb.w	r3, [r5, #32]
 800fc2a:	2b01      	cmp	r3, #1
 800fc2c:	d07c      	beq.n	800fd28 <HAL_RTC_SetDate+0x214>
 800fc2e:	2201      	movs	r2, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800fc30:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 800fc32:	f885 2020 	strb.w	r2, [r5, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800fc36:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 800fc3a:	783b      	ldrb	r3, [r7, #0]
 800fc3c:	3b01      	subs	r3, #1
 800fc3e:	2b06      	cmp	r3, #6
 800fc40:	d86c      	bhi.n	800fd1c <HAL_RTC_SetDate+0x208>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 800fc42:	78fb      	ldrb	r3, [r7, #3]
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800fc44:	091a      	lsrs	r2, r3, #4
 800fc46:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800fc4a:	f003 030f 	and.w	r3, r3, #15
 800fc4e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 800fc52:	b2db      	uxtb	r3, r3
 800fc54:	2b63      	cmp	r3, #99	; 0x63
 800fc56:	d85b      	bhi.n	800fd10 <HAL_RTC_SetDate+0x1fc>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 800fc58:	787a      	ldrb	r2, [r7, #1]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800fc5a:	f002 030f 	and.w	r3, r2, #15
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800fc5e:	0912      	lsrs	r2, r2, #4
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 800fc60:	3b01      	subs	r3, #1
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800fc62:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 800fc66:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800fc6a:	b2db      	uxtb	r3, r3
 800fc6c:	2b0b      	cmp	r3, #11
 800fc6e:	d904      	bls.n	800fc7a <HAL_RTC_SetDate+0x166>
 800fc70:	482f      	ldr	r0, [pc, #188]	; (800fd30 <HAL_RTC_SetDate+0x21c>)
 800fc72:	f240 31bf 	movw	r1, #959	; 0x3bf
 800fc76:	f7f2 f93b 	bl	8001ef0 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 800fc7a:	78bc      	ldrb	r4, [r7, #2]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800fc7c:	f004 020f 	and.w	r2, r4, #15
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800fc80:	0921      	lsrs	r1, r4, #4
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 800fc82:	3a01      	subs	r2, #1
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800fc84:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 800fc88:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800fc8c:	b2d2      	uxtb	r2, r2
 800fc8e:	2a1e      	cmp	r2, #30
 800fc90:	d905      	bls.n	800fc9e <HAL_RTC_SetDate+0x18a>
 800fc92:	4827      	ldr	r0, [pc, #156]	; (800fd30 <HAL_RTC_SetDate+0x21c>)
 800fc94:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800fc98:	f7f2 f92a 	bl	8001ef0 <assert_failed>
 800fc9c:	78bc      	ldrb	r4, [r7, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800fc9e:	787b      	ldrb	r3, [r7, #1]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800fca0:	78f9      	ldrb	r1, [r7, #3]
                  (((uint32_t)sDate->WeekDay) << 13U));
 800fca2:	783a      	ldrb	r2, [r7, #0]
                  (((uint32_t)sDate->Month) << 8U) | \
 800fca4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800fca6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800fcaa:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800fcae:	431c      	orrs	r4, r3
 800fcb0:	e78c      	b.n	800fbcc <HAL_RTC_SetDate+0xb8>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fcb2:	6829      	ldr	r1, [r5, #0]
 800fcb4:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 800fcb6:	2204      	movs	r2, #4
    __HAL_UNLOCK(hrtc);
 800fcb8:	2300      	movs	r3, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fcba:	6248      	str	r0, [r1, #36]	; 0x24
    return HAL_ERROR;
 800fcbc:	2601      	movs	r6, #1
    hrtc->State = HAL_RTC_STATE_ERROR;
 800fcbe:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 800fcc2:	f885 3020 	strb.w	r3, [r5, #32]
}
 800fcc6:	4630      	mov	r0, r6
 800fcc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fcca:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 800fccc:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fcce:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 800fcd0:	f885 6020 	strb.w	r6, [r5, #32]
        hrtc->State = HAL_RTC_STATE_ERROR;
 800fcd4:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        return HAL_ERROR;
 800fcd8:	2601      	movs	r6, #1
}
 800fcda:	4630      	mov	r0, r6
 800fcdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_RTC_DATE(sDate->Date));
 800fcde:	4814      	ldr	r0, [pc, #80]	; (800fd30 <HAL_RTC_SetDate+0x21c>)
 800fce0:	f240 31b5 	movw	r1, #949	; 0x3b5
 800fce4:	f7f2 f904 	bl	8001ef0 <assert_failed>
 800fce8:	78ba      	ldrb	r2, [r7, #2]
 800fcea:	e740      	b.n	800fb6e <HAL_RTC_SetDate+0x5a>
    assert_param(IS_RTC_MONTH(sDate->Month));
 800fcec:	4810      	ldr	r0, [pc, #64]	; (800fd30 <HAL_RTC_SetDate+0x21c>)
 800fcee:	f44f 716d 	mov.w	r1, #948	; 0x3b4
 800fcf2:	f7f2 f8fd 	bl	8001ef0 <assert_failed>
 800fcf6:	e735      	b.n	800fb64 <HAL_RTC_SetDate+0x50>
    assert_param(IS_RTC_YEAR(sDate->Year));
 800fcf8:	480d      	ldr	r0, [pc, #52]	; (800fd30 <HAL_RTC_SetDate+0x21c>)
 800fcfa:	f240 31b3 	movw	r1, #947	; 0x3b3
 800fcfe:	f7f2 f8f7 	bl	8001ef0 <assert_failed>
 800fd02:	e72a      	b.n	800fb5a <HAL_RTC_SetDate+0x46>
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 800fd04:	480a      	ldr	r0, [pc, #40]	; (800fd30 <HAL_RTC_SetDate+0x21c>)
 800fd06:	f240 31af 	movw	r1, #943	; 0x3af
 800fd0a:	f7f2 f8f1 	bl	8001ef0 <assert_failed>
  if (Format == RTC_FORMAT_BIN)
 800fd0e:	e720      	b.n	800fb52 <HAL_RTC_SetDate+0x3e>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 800fd10:	4807      	ldr	r0, [pc, #28]	; (800fd30 <HAL_RTC_SetDate+0x21c>)
 800fd12:	f240 31be 	movw	r1, #958	; 0x3be
 800fd16:	f7f2 f8eb 	bl	8001ef0 <assert_failed>
 800fd1a:	e79d      	b.n	800fc58 <HAL_RTC_SetDate+0x144>
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 800fd1c:	4804      	ldr	r0, [pc, #16]	; (800fd30 <HAL_RTC_SetDate+0x21c>)
 800fd1e:	f240 31af 	movw	r1, #943	; 0x3af
 800fd22:	f7f2 f8e5 	bl	8001ef0 <assert_failed>
  if (Format == RTC_FORMAT_BIN)
 800fd26:	e78c      	b.n	800fc42 <HAL_RTC_SetDate+0x12e>
  __HAL_LOCK(hrtc);
 800fd28:	2602      	movs	r6, #2
}
 800fd2a:	4630      	mov	r0, r6
 800fd2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd2e:	bf00      	nop
 800fd30:	0801652c 	.word	0x0801652c

0800fd34 <HAL_RTCEx_SetWakeUpTimer_IT>:
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
 800fd34:	2a04      	cmp	r2, #4
{
 800fd36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd3a:	4617      	mov	r7, r2
 800fd3c:	4605      	mov	r5, r0
 800fd3e:	4688      	mov	r8, r1
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
 800fd40:	d901      	bls.n	800fd46 <HAL_RTCEx_SetWakeUpTimer_IT+0x12>
 800fd42:	2a06      	cmp	r2, #6
 800fd44:	d161      	bne.n	800fe0a <HAL_RTCEx_SetWakeUpTimer_IT+0xd6>
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
 800fd46:	f5b8 3f80 	cmp.w	r8, #65536	; 0x10000
 800fd4a:	d266      	bcs.n	800fe1a <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800fd4c:	f895 3020 	ldrb.w	r3, [r5, #32]
 800fd50:	2b01      	cmp	r3, #1
 800fd52:	d06b      	beq.n	800fe2c <HAL_RTCEx_SetWakeUpTimer_IT+0xf8>

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fd54:	682b      	ldr	r3, [r5, #0]
  __HAL_LOCK(hrtc);
 800fd56:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800fd58:	2202      	movs	r2, #2
  __HAL_LOCK(hrtc);
 800fd5a:	f885 1020 	strb.w	r1, [r5, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800fd5e:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fd62:	21ca      	movs	r1, #202	; 0xca
 800fd64:	2253      	movs	r2, #83	; 0x53
 800fd66:	6259      	str	r1, [r3, #36]	; 0x24
 800fd68:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800fd6a:	689a      	ldr	r2, [r3, #8]
 800fd6c:	0551      	lsls	r1, r2, #21
 800fd6e:	d50d      	bpl.n	800fd8c <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  {
    tickstart = HAL_GetTick();
 800fd70:	f7fd fb6e 	bl	800d450 <HAL_GetTick>
 800fd74:	4604      	mov	r4, r0

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800fd76:	e005      	b.n	800fd84 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800fd78:	f7fd fb6a 	bl	800d450 <HAL_GetTick>
 800fd7c:	1b00      	subs	r0, r0, r4
 800fd7e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800fd82:	d861      	bhi.n	800fe48 <HAL_RTCEx_SetWakeUpTimer_IT+0x114>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800fd84:	682b      	ldr	r3, [r5, #0]
 800fd86:	68da      	ldr	r2, [r3, #12]
 800fd88:	0752      	lsls	r2, r2, #29
 800fd8a:	d4f5      	bmi.n	800fd78 <HAL_RTCEx_SetWakeUpTimer_IT+0x44>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800fd8c:	689a      	ldr	r2, [r3, #8]
 800fd8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fd92:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800fd94:	68da      	ldr	r2, [r3, #12]
 800fd96:	b2d2      	uxtb	r2, r2
 800fd98:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800fd9c:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800fd9e:	f7fd fb57 	bl	800d450 <HAL_GetTick>
 800fda2:	4606      	mov	r6, r0

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800fda4:	e005      	b.n	800fdb2 <HAL_RTCEx_SetWakeUpTimer_IT+0x7e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800fda6:	f7fd fb53 	bl	800d450 <HAL_GetTick>
 800fdaa:	1b83      	subs	r3, r0, r6
 800fdac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fdb0:	d83f      	bhi.n	800fe32 <HAL_RTCEx_SetWakeUpTimer_IT+0xfe>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800fdb2:	682a      	ldr	r2, [r5, #0]
 800fdb4:	68d4      	ldr	r4, [r2, #12]
 800fdb6:	f014 0404 	ands.w	r4, r4, #4
 800fdba:	d0f4      	beq.n	800fda6 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
      return HAL_TIMEOUT;
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800fdbc:	f8c2 8014 	str.w	r8, [r2, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800fdc0:	6891      	ldr	r1, [r2, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800fdc2:	4b27      	ldr	r3, [pc, #156]	; (800fe60 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800fdc4:	f021 0107 	bic.w	r1, r1, #7
 800fdc8:	6091      	str	r1, [r2, #8]
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800fdca:	6891      	ldr	r1, [r2, #8]
 800fdcc:	430f      	orrs	r7, r1
 800fdce:	6097      	str	r7, [r2, #8]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800fdd0:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800fdd4:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 800fdd8:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800fddc:	6819      	ldr	r1, [r3, #0]
 800fdde:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 800fde2:	6019      	str	r1, [r3, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800fde4:	6893      	ldr	r3, [r2, #8]
 800fde6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fdea:	6093      	str	r3, [r2, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800fdec:	6893      	ldr	r3, [r2, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800fdee:	2100      	movs	r1, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fdf0:	20ff      	movs	r0, #255	; 0xff
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800fdf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  hrtc->State = HAL_RTC_STATE_READY;
 800fdf6:	2401      	movs	r4, #1
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800fdf8:	6093      	str	r3, [r2, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fdfa:	6250      	str	r0, [r2, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800fdfc:	f885 4021 	strb.w	r4, [r5, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 800fe00:	f885 1020 	strb.w	r1, [r5, #32]

  return HAL_OK;
 800fe04:	4608      	mov	r0, r1
}
 800fe06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
 800fe0a:	4816      	ldr	r0, [pc, #88]	; (800fe64 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 800fe0c:	f240 4164 	movw	r1, #1124	; 0x464
 800fe10:	f7f2 f86e 	bl	8001ef0 <assert_failed>
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
 800fe14:	f5b8 3f80 	cmp.w	r8, #65536	; 0x10000
 800fe18:	d398      	bcc.n	800fd4c <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 800fe1a:	4812      	ldr	r0, [pc, #72]	; (800fe64 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 800fe1c:	f240 4165 	movw	r1, #1125	; 0x465
 800fe20:	f7f2 f866 	bl	8001ef0 <assert_failed>
  __HAL_LOCK(hrtc);
 800fe24:	f895 3020 	ldrb.w	r3, [r5, #32]
 800fe28:	2b01      	cmp	r3, #1
 800fe2a:	d193      	bne.n	800fd54 <HAL_RTCEx_SetWakeUpTimer_IT+0x20>
 800fe2c:	2002      	movs	r0, #2
}
 800fe2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fe32:	682a      	ldr	r2, [r5, #0]
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800fe34:	2303      	movs	r3, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fe36:	21ff      	movs	r1, #255	; 0xff
 800fe38:	6251      	str	r1, [r2, #36]	; 0x24
      __HAL_UNLOCK(hrtc);
 800fe3a:	f885 4020 	strb.w	r4, [r5, #32]
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800fe3e:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
      return HAL_TIMEOUT;
 800fe42:	4618      	mov	r0, r3
}
 800fe44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fe48:	6829      	ldr	r1, [r5, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800fe4a:	2303      	movs	r3, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fe4c:	20ff      	movs	r0, #255	; 0xff
        __HAL_UNLOCK(hrtc);
 800fe4e:	2200      	movs	r2, #0
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fe50:	6248      	str	r0, [r1, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800fe52:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 800fe56:	f885 2020 	strb.w	r2, [r5, #32]
        return HAL_TIMEOUT;
 800fe5a:	4618      	mov	r0, r3
}
 800fe5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe60:	58000800 	.word	0x58000800
 800fe64:	08016598 	.word	0x08016598

0800fe68 <HAL_RTCEx_BKUPWrite>:
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
 800fe68:	2913      	cmp	r1, #19
{
 800fe6a:	b570      	push	{r4, r5, r6, lr}
 800fe6c:	460c      	mov	r4, r1
 800fe6e:	4606      	mov	r6, r0
 800fe70:	4615      	mov	r5, r2
  assert_param(IS_RTC_BKP(BackupRegister));
 800fe72:	d804      	bhi.n	800fe7e <HAL_RTCEx_BKUPWrite+0x16>

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 800fe74:	6833      	ldr	r3, [r6, #0]
 800fe76:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800fe78:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
}
 800fe7c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_RTC_BKP(BackupRegister));
 800fe7e:	4805      	ldr	r0, [pc, #20]	; (800fe94 <HAL_RTCEx_BKUPWrite+0x2c>)
 800fe80:	f240 5175 	movw	r1, #1397	; 0x575
 800fe84:	f7f2 f834 	bl	8001ef0 <assert_failed>
  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 800fe88:	6833      	ldr	r3, [r6, #0]
 800fe8a:	3350      	adds	r3, #80	; 0x50
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800fe8c:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
}
 800fe90:	bd70      	pop	{r4, r5, r6, pc}
 800fe92:	bf00      	nop
 800fe94:	08016598 	.word	0x08016598

0800fe98 <HAL_RTCEx_BKUPRead>:
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
 800fe98:	2913      	cmp	r1, #19
{
 800fe9a:	b538      	push	{r3, r4, r5, lr}
 800fe9c:	460c      	mov	r4, r1
 800fe9e:	4605      	mov	r5, r0
  assert_param(IS_RTC_BKP(BackupRegister));
 800fea0:	d804      	bhi.n	800feac <HAL_RTCEx_BKUPRead+0x14>

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 800fea2:	682b      	ldr	r3, [r5, #0]
 800fea4:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800fea6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 800feaa:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_RTC_BKP(BackupRegister));
 800feac:	4804      	ldr	r0, [pc, #16]	; (800fec0 <HAL_RTCEx_BKUPRead+0x28>)
 800feae:	f240 518b 	movw	r1, #1419	; 0x58b
 800feb2:	f7f2 f81d 	bl	8001ef0 <assert_failed>
  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 800feb6:	682b      	ldr	r3, [r5, #0]
 800feb8:	3350      	adds	r3, #80	; 0x50
  return (*(__IO uint32_t *)tmp);
 800feba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 800febe:	bd38      	pop	{r3, r4, r5, pc}
 800fec0:	08016598 	.word	0x08016598

0800fec4 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800fec4:	f890 2020 	ldrb.w	r2, [r0, #32]
 800fec8:	2a01      	cmp	r2, #1
 800feca:	d018      	beq.n	800fefe <HAL_RTCEx_EnableBypassShadow+0x3a>

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fecc:	6802      	ldr	r2, [r0, #0]
 800fece:	4603      	mov	r3, r0
{
 800fed0:	b430      	push	{r4, r5}
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fed2:	20ca      	movs	r0, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 800fed4:	2402      	movs	r4, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fed6:	2153      	movs	r1, #83	; 0x53
  hrtc->State = HAL_RTC_STATE_BUSY;
 800fed8:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fedc:	6250      	str	r0, [r2, #36]	; 0x24
 800fede:	6251      	str	r1, [r2, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800fee0:	6891      	ldr	r1, [r2, #8]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800fee2:	2400      	movs	r4, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fee4:	20ff      	movs	r0, #255	; 0xff
  hrtc->State = HAL_RTC_STATE_READY;
 800fee6:	2501      	movs	r5, #1
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800fee8:	f041 0120 	orr.w	r1, r1, #32
 800feec:	6091      	str	r1, [r2, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800feee:	6250      	str	r0, [r2, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800fef0:	f883 5021 	strb.w	r5, [r3, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 800fef4:	f883 4020 	strb.w	r4, [r3, #32]

  return HAL_OK;
 800fef8:	4620      	mov	r0, r4
}
 800fefa:	bc30      	pop	{r4, r5}
 800fefc:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 800fefe:	2002      	movs	r0, #2
}
 800ff00:	4770      	bx	lr
 800ff02:	bf00      	nop

0800ff04 <HAL_RTCEx_AlarmBEventCallback>:
 800ff04:	4770      	bx	lr
 800ff06:	bf00      	nop

0800ff08 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800ff08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff0a:	b083      	sub	sp, #12
 800ff0c:	460c      	mov	r4, r1
 800ff0e:	4617      	mov	r7, r2
 800ff10:	4606      	mov	r6, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ff12:	f7fd fa9d 	bl	800d450 <HAL_GetTick>
 800ff16:	4427      	add	r7, r4
 800ff18:	1a3d      	subs	r5, r7, r0
  tmp_tickstart = HAL_GetTick();
 800ff1a:	f7fd fa99 	bl	800d450 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ff1e:	4b25      	ldr	r3, [pc, #148]	; (800ffb4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800ff26:	fb05 f303 	mul.w	r3, r5, r3
  tmp_tickstart = HAL_GetTick();
 800ff2a:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ff2c:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ff2e:	6832      	ldr	r2, [r6, #0]
 800ff30:	e001      	b.n	800ff36 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ff32:	1c63      	adds	r3, r4, #1
 800ff34:	d106      	bne.n	800ff44 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ff36:	6893      	ldr	r3, [r2, #8]
 800ff38:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800ff3c:	d1f9      	bne.n	800ff32 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
      }
      count--;
    }
  }

  return HAL_OK;
 800ff3e:	4618      	mov	r0, r3
}
 800ff40:	b003      	add	sp, #12
 800ff42:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ff44:	f7fd fa84 	bl	800d450 <HAL_GetTick>
 800ff48:	1bc0      	subs	r0, r0, r7
 800ff4a:	42a8      	cmp	r0, r5
 800ff4c:	d208      	bcs.n	800ff60 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x58>
      if (count == 0U)
 800ff4e:	9a01      	ldr	r2, [sp, #4]
      count--;
 800ff50:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800ff52:	2a00      	cmp	r2, #0
      count--;
 800ff54:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800ff58:	bf08      	it	eq
 800ff5a:	2500      	moveq	r5, #0
      count--;
 800ff5c:	9301      	str	r3, [sp, #4]
 800ff5e:	e7e6      	b.n	800ff2e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ff60:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ff64:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ff66:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ff6a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ff6e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ff70:	d014      	beq.n	800ff9c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ff72:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800ff74:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800ff78:	d007      	beq.n	800ff8a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
        hspi->State = HAL_SPI_STATE_READY;
 800ff7a:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 800ff7c:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 800ff7e:	f886 205d 	strb.w	r2, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800ff82:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
 800ff86:	2003      	movs	r0, #3
 800ff88:	e7da      	b.n	800ff40 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
          SPI_RESET_CRC(hspi);
 800ff8a:	681a      	ldr	r2, [r3, #0]
 800ff8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ff90:	601a      	str	r2, [r3, #0]
 800ff92:	681a      	ldr	r2, [r3, #0]
 800ff94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ff98:	601a      	str	r2, [r3, #0]
 800ff9a:	e7ee      	b.n	800ff7a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ff9c:	68b2      	ldr	r2, [r6, #8]
 800ff9e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800ffa2:	d002      	beq.n	800ffaa <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa2>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ffa4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800ffa8:	d1e3      	bne.n	800ff72 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
          __HAL_SPI_DISABLE(hspi);
 800ffaa:	681a      	ldr	r2, [r3, #0]
 800ffac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ffb0:	601a      	str	r2, [r3, #0]
 800ffb2:	e7de      	b.n	800ff72 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
 800ffb4:	20000128 	.word	0x20000128

0800ffb8 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800ffb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ffbc:	b083      	sub	sp, #12
 800ffbe:	4698      	mov	r8, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ffc0:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800ffc2:	4615      	mov	r5, r2
  __IO uint8_t  tmpreg8 = 0;
 800ffc4:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800ffc8:	4606      	mov	r6, r0
 800ffca:	460c      	mov	r4, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ffcc:	f7fd fa40 	bl	800d450 <HAL_GetTick>
 800ffd0:	44a8      	add	r8, r5
 800ffd2:	eba8 0700 	sub.w	r7, r8, r0
  tmp_tickstart = HAL_GetTick();
 800ffd6:	f7fd fa3b 	bl	800d450 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ffda:	4b30      	ldr	r3, [pc, #192]	; (801009c <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800ffdc:	f8d6 8000 	ldr.w	r8, [r6]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ffe6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800ffea:	0d1b      	lsrs	r3, r3, #20
 800ffec:	fb07 f303 	mul.w	r3, r7, r3
  tmp_tickstart = HAL_GetTick();
 800fff0:	4681      	mov	r9, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800fff2:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 800fff4:	4642      	mov	r2, r8
 800fff6:	e001      	b.n	800fffc <SPI_WaitFifoStateUntilTimeout.constprop.0+0x44>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 800fff8:	1c6b      	adds	r3, r5, #1
 800fffa:	d10e      	bne.n	801001a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x62>
  while ((hspi->Instance->SR & Fifo) != State)
 800fffc:	6893      	ldr	r3, [r2, #8]
 800fffe:	4023      	ands	r3, r4
 8010000:	d01d      	beq.n	801003e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8010002:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8010006:	d1f7      	bne.n	800fff8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      tmpreg8 = *ptmpreg8;
 8010008:	f898 300c 	ldrb.w	r3, [r8, #12]
 801000c:	b2db      	uxtb	r3, r3
 801000e:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8010012:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if (Timeout != HAL_MAX_DELAY)
 8010016:	1c6b      	adds	r3, r5, #1
 8010018:	d0f0      	beq.n	800fffc <SPI_WaitFifoStateUntilTimeout.constprop.0+0x44>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801001a:	f7fd fa19 	bl	800d450 <HAL_GetTick>
 801001e:	eba0 0009 	sub.w	r0, r0, r9
 8010022:	42b8      	cmp	r0, r7
 8010024:	d20f      	bcs.n	8010046 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8e>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8010026:	9a01      	ldr	r2, [sp, #4]
      {
        tmp_timeout = 0U;
      }
      count--;
 8010028:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 801002a:	2a00      	cmp	r2, #0
      count--;
 801002c:	f103 33ff 	add.w	r3, r3, #4294967295
 8010030:	6832      	ldr	r2, [r6, #0]
 8010032:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 8010034:	6893      	ldr	r3, [r2, #8]
        tmp_timeout = 0U;
 8010036:	bf08      	it	eq
 8010038:	2700      	moveq	r7, #0
  while ((hspi->Instance->SR & Fifo) != State)
 801003a:	4023      	ands	r3, r4
 801003c:	d1e1      	bne.n	8010002 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x4a>
    }
  }

  return HAL_OK;
 801003e:	4618      	mov	r0, r3
}
 8010040:	b003      	add	sp, #12
 8010042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010046:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801004a:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801004c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010050:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010054:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010056:	d014      	beq.n	8010082 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xca>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010058:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 801005a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 801005e:	d007      	beq.n	8010070 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb8>
        hspi->State = HAL_SPI_STATE_READY;
 8010060:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8010062:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8010064:	f886 205d 	strb.w	r2, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8010068:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 801006c:	2003      	movs	r0, #3
 801006e:	e7e7      	b.n	8010040 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x88>
          SPI_RESET_CRC(hspi);
 8010070:	681a      	ldr	r2, [r3, #0]
 8010072:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010076:	601a      	str	r2, [r3, #0]
 8010078:	681a      	ldr	r2, [r3, #0]
 801007a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801007e:	601a      	str	r2, [r3, #0]
 8010080:	e7ee      	b.n	8010060 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010082:	68b2      	ldr	r2, [r6, #8]
 8010084:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8010088:	d002      	beq.n	8010090 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801008a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 801008e:	d1e3      	bne.n	8010058 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa0>
          __HAL_SPI_DISABLE(hspi);
 8010090:	681a      	ldr	r2, [r3, #0]
 8010092:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010096:	601a      	str	r2, [r3, #0]
 8010098:	e7de      	b.n	8010058 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa0>
 801009a:	bf00      	nop
 801009c:	20000128 	.word	0x20000128

080100a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80100a0:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80100a2:	4613      	mov	r3, r2
{
 80100a4:	460d      	mov	r5, r1
 80100a6:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80100a8:	460a      	mov	r2, r1
 80100aa:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 80100ae:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80100b0:	f7ff ff82 	bl	800ffb8 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 80100b4:	b970      	cbnz	r0, 80100d4 <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80100b6:	4632      	mov	r2, r6
 80100b8:	4629      	mov	r1, r5
 80100ba:	4620      	mov	r0, r4
 80100bc:	f7ff ff24 	bl	800ff08 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80100c0:	b940      	cbnz	r0, 80100d4 <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80100c2:	4633      	mov	r3, r6
 80100c4:	462a      	mov	r2, r5
 80100c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80100ca:	4620      	mov	r0, r4
 80100cc:	f7ff ff74 	bl	800ffb8 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 80100d0:	b900      	cbnz	r0, 80100d4 <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80100d2:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80100d4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80100d6:	f043 0320 	orr.w	r3, r3, #32
 80100da:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80100dc:	2003      	movs	r0, #3
}
 80100de:	bd70      	pop	{r4, r5, r6, pc}

080100e0 <HAL_SPI_Init>:
  if (hspi == NULL)
 80100e0:	2800      	cmp	r0, #0
 80100e2:	f000 8112 	beq.w	801030a <HAL_SPI_Init+0x22a>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80100e6:	4b92      	ldr	r3, [pc, #584]	; (8010330 <HAL_SPI_Init+0x250>)
 80100e8:	6802      	ldr	r2, [r0, #0]
 80100ea:	429a      	cmp	r2, r3
{
 80100ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100f0:	4604      	mov	r4, r0
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80100f2:	d004      	beq.n	80100fe <HAL_SPI_Init+0x1e>
 80100f4:	488f      	ldr	r0, [pc, #572]	; (8010334 <HAL_SPI_Init+0x254>)
 80100f6:	f240 1145 	movw	r1, #325	; 0x145
 80100fa:	f7f1 fef9 	bl	8001ef0 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80100fe:	6863      	ldr	r3, [r4, #4]
 8010100:	b13b      	cbz	r3, 8010112 <HAL_SPI_Init+0x32>
 8010102:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010106:	d004      	beq.n	8010112 <HAL_SPI_Init+0x32>
 8010108:	488a      	ldr	r0, [pc, #552]	; (8010334 <HAL_SPI_Init+0x254>)
 801010a:	f44f 71a3 	mov.w	r1, #326	; 0x146
 801010e:	f7f1 feef 	bl	8001ef0 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8010112:	68a3      	ldr	r3, [r4, #8]
 8010114:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8010118:	f040 80db 	bne.w	80102d2 <HAL_SPI_Init+0x1f2>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 801011c:	68e3      	ldr	r3, [r4, #12]
 801011e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8010122:	d018      	beq.n	8010156 <HAL_SPI_Init+0x76>
 8010124:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010128:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 801012c:	d013      	beq.n	8010156 <HAL_SPI_Init+0x76>
 801012e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010132:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
 8010136:	d00e      	beq.n	8010156 <HAL_SPI_Init+0x76>
 8010138:	f423 6210 	bic.w	r2, r3, #2304	; 0x900
 801013c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8010140:	d009      	beq.n	8010156 <HAL_SPI_Init+0x76>
 8010142:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010146:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801014a:	d004      	beq.n	8010156 <HAL_SPI_Init+0x76>
 801014c:	4879      	ldr	r0, [pc, #484]	; (8010334 <HAL_SPI_Init+0x254>)
 801014e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8010152:	f7f1 fecd 	bl	8001ef0 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8010156:	69a3      	ldr	r3, [r4, #24]
 8010158:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 801015c:	f040 80a5 	bne.w	80102aa <HAL_SPI_Init+0x1ca>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8010160:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010162:	f033 0308 	bics.w	r3, r3, #8
 8010166:	f040 80ae 	bne.w	80102c6 <HAL_SPI_Init+0x1e6>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 801016a:	69e3      	ldr	r3, [r4, #28]
 801016c:	f033 0318 	bics.w	r3, r3, #24
 8010170:	d006      	beq.n	8010180 <HAL_SPI_Init+0xa0>
 8010172:	2b20      	cmp	r3, #32
 8010174:	d004      	beq.n	8010180 <HAL_SPI_Init+0xa0>
 8010176:	486f      	ldr	r0, [pc, #444]	; (8010334 <HAL_SPI_Init+0x254>)
 8010178:	f240 114b 	movw	r1, #331	; 0x14b
 801017c:	f7f1 feb8 	bl	8001ef0 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8010180:	6a23      	ldr	r3, [r4, #32]
 8010182:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8010186:	d004      	beq.n	8010192 <HAL_SPI_Init+0xb2>
 8010188:	486a      	ldr	r0, [pc, #424]	; (8010334 <HAL_SPI_Init+0x254>)
 801018a:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 801018e:	f7f1 feaf 	bl	8001ef0 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8010192:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010194:	2b00      	cmp	r3, #0
 8010196:	d16f      	bne.n	8010278 <HAL_SPI_Init+0x198>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8010198:	6923      	ldr	r3, [r4, #16]
 801019a:	f033 0302 	bics.w	r3, r3, #2
 801019e:	d004      	beq.n	80101aa <HAL_SPI_Init+0xca>
 80101a0:	4864      	ldr	r0, [pc, #400]	; (8010334 <HAL_SPI_Init+0x254>)
 80101a2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80101a6:	f7f1 fea3 	bl	8001ef0 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80101aa:	6963      	ldr	r3, [r4, #20]
 80101ac:	2b01      	cmp	r3, #1
 80101ae:	d904      	bls.n	80101ba <HAL_SPI_Init+0xda>
 80101b0:	4860      	ldr	r0, [pc, #384]	; (8010334 <HAL_SPI_Init+0x254>)
 80101b2:	f240 1151 	movw	r1, #337	; 0x151
 80101b6:	f7f1 fe9b 	bl	8001ef0 <assert_failed>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80101ba:	6863      	ldr	r3, [r4, #4]
 80101bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80101c0:	f000 80a5 	beq.w	801030e <HAL_SPI_Init+0x22e>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80101c4:	2300      	movs	r3, #0
 80101c6:	61e3      	str	r3, [r4, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 80101c8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80101cc:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80101ce:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80101d2:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	f000 808c 	beq.w	80102f2 <HAL_SPI_Init+0x212>
  __HAL_SPI_DISABLE(hspi);
 80101da:	6825      	ldr	r5, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80101dc:	f8d4 e00c 	ldr.w	lr, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80101e0:	2302      	movs	r3, #2
 80101e2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80101e6:	682b      	ldr	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80101e8:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80101ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80101f0:	602b      	str	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80101f2:	d978      	bls.n	80102e6 <HAL_SPI_Init+0x206>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80101f4:	f5be 6f70 	cmp.w	lr, #3840	; 0xf00
 80101f8:	f040 8097 	bne.w	801032a <HAL_SPI_Init+0x24a>
 80101fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80101fe:	f04f 0c00 	mov.w	ip, #0
 8010202:	f403 5000 	and.w	r0, r3, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8010206:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 801020a:	6927      	ldr	r7, [r4, #16]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801020c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801020e:	6b66      	ldr	r6, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8010210:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8010214:	f402 7282 	and.w	r2, r2, #260	; 0x104
 8010218:	431a      	orrs	r2, r3
 801021a:	f007 0702 	and.w	r7, r7, #2
 801021e:	433a      	orrs	r2, r7
 8010220:	e9d4 7305 	ldrd	r7, r3, [r4, #20]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8010224:	f006 0608 	and.w	r6, r6, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8010228:	f007 0701 	and.w	r7, r7, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801022c:	f001 0110 	and.w	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8010230:	433a      	orrs	r2, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8010232:	4331      	orrs	r1, r6
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8010234:	e9d4 6707 	ldrd	r6, r7, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8010238:	f40e 6e70 	and.w	lr, lr, #3840	; 0xf00
 801023c:	ea41 0e0e 	orr.w	lr, r1, lr
 8010240:	0c19      	lsrs	r1, r3, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8010242:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010246:	f006 0838 	and.w	r8, r6, #56	; 0x38
 801024a:	4313      	orrs	r3, r2
 801024c:	ea43 0308 	orr.w	r3, r3, r8
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8010250:	f001 0204 	and.w	r2, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8010254:	f007 0780 	and.w	r7, r7, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8010258:	ea4e 0202 	orr.w	r2, lr, r2
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801025c:	433b      	orrs	r3, r7
 801025e:	4303      	orrs	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010260:	2100      	movs	r1, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8010262:	ea42 020c 	orr.w	r2, r2, ip
  hspi->State     = HAL_SPI_STATE_READY;
 8010266:	2601      	movs	r6, #1
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8010268:	602b      	str	r3, [r5, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801026a:	606a      	str	r2, [r5, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801026c:	6621      	str	r1, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801026e:	f884 605d 	strb.w	r6, [r4, #93]	; 0x5d
  return HAL_OK;
 8010272:	4608      	mov	r0, r1
}
 8010274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8010278:	2b10      	cmp	r3, #16
 801027a:	d007      	beq.n	801028c <HAL_SPI_Init+0x1ac>
 801027c:	482d      	ldr	r0, [pc, #180]	; (8010334 <HAL_SPI_Init+0x254>)
 801027e:	f240 114d 	movw	r1, #333	; 0x14d
 8010282:	f7f1 fe35 	bl	8001ef0 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8010286:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010288:	2b00      	cmp	r3, #0
 801028a:	d085      	beq.n	8010198 <HAL_SPI_Init+0xb8>
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 801028c:	69e3      	ldr	r3, [r4, #28]
 801028e:	f033 0318 	bics.w	r3, r3, #24
 8010292:	d006      	beq.n	80102a2 <HAL_SPI_Init+0x1c2>
 8010294:	2b20      	cmp	r3, #32
 8010296:	d004      	beq.n	80102a2 <HAL_SPI_Init+0x1c2>
 8010298:	4826      	ldr	r0, [pc, #152]	; (8010334 <HAL_SPI_Init+0x254>)
 801029a:	f240 115f 	movw	r1, #351	; 0x15f
 801029e:	f7f1 fe27 	bl	8001ef0 <assert_failed>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80102a2:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80102a4:	e9c4 3304 	strd	r3, r3, [r4, #16]
 80102a8:	e78e      	b.n	80101c8 <HAL_SPI_Init+0xe8>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80102aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80102ae:	f43f af57 	beq.w	8010160 <HAL_SPI_Init+0x80>
 80102b2:	4820      	ldr	r0, [pc, #128]	; (8010334 <HAL_SPI_Init+0x254>)
 80102b4:	f240 1149 	movw	r1, #329	; 0x149
 80102b8:	f7f1 fe1a 	bl	8001ef0 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 80102bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80102be:	f033 0308 	bics.w	r3, r3, #8
 80102c2:	f43f af52 	beq.w	801016a <HAL_SPI_Init+0x8a>
 80102c6:	481b      	ldr	r0, [pc, #108]	; (8010334 <HAL_SPI_Init+0x254>)
 80102c8:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80102cc:	f7f1 fe10 	bl	8001ef0 <assert_failed>
 80102d0:	e74b      	b.n	801016a <HAL_SPI_Init+0x8a>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80102d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80102d6:	f43f af21 	beq.w	801011c <HAL_SPI_Init+0x3c>
 80102da:	4816      	ldr	r0, [pc, #88]	; (8010334 <HAL_SPI_Init+0x254>)
 80102dc:	f240 1147 	movw	r1, #327	; 0x147
 80102e0:	f7f1 fe06 	bl	8001ef0 <assert_failed>
 80102e4:	e71a      	b.n	801011c <HAL_SPI_Init+0x3c>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80102e6:	d00a      	beq.n	80102fe <HAL_SPI_Init+0x21e>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80102e8:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80102ec:	2000      	movs	r0, #0
 80102ee:	62a0      	str	r0, [r4, #40]	; 0x28
 80102f0:	e789      	b.n	8010206 <HAL_SPI_Init+0x126>
    hspi->Lock = HAL_UNLOCKED;
 80102f2:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80102f6:	4620      	mov	r0, r4
 80102f8:	f7f1 feb8 	bl	800206c <HAL_SPI_MspInit>
 80102fc:	e76d      	b.n	80101da <HAL_SPI_Init+0xfa>
 80102fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8010300:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 8010304:	f403 5000 	and.w	r0, r3, #8192	; 0x2000
 8010308:	e77d      	b.n	8010206 <HAL_SPI_Init+0x126>
    return HAL_ERROR;
 801030a:	2001      	movs	r0, #1
}
 801030c:	4770      	bx	lr
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 801030e:	69e3      	ldr	r3, [r4, #28]
 8010310:	f033 0318 	bics.w	r3, r3, #24
 8010314:	f43f af58 	beq.w	80101c8 <HAL_SPI_Init+0xe8>
 8010318:	2b20      	cmp	r3, #32
 801031a:	f43f af55 	beq.w	80101c8 <HAL_SPI_Init+0xe8>
 801031e:	4805      	ldr	r0, [pc, #20]	; (8010334 <HAL_SPI_Init+0x254>)
 8010320:	f240 1155 	movw	r1, #341	; 0x155
 8010324:	f7f1 fde4 	bl	8001ef0 <assert_failed>
 8010328:	e74e      	b.n	80101c8 <HAL_SPI_Init+0xe8>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801032a:	f04f 0c00 	mov.w	ip, #0
 801032e:	e7dd      	b.n	80102ec <HAL_SPI_Init+0x20c>
 8010330:	40013000 	.word	0x40013000
 8010334:	08016608 	.word	0x08016608

08010338 <HAL_SPI_TransmitReceive>:
{
 8010338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801033c:	4604      	mov	r4, r0
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 801033e:	6880      	ldr	r0, [r0, #8]
{
 8010340:	9e08      	ldr	r6, [sp, #32]
 8010342:	4688      	mov	r8, r1
 8010344:	4691      	mov	r9, r2
 8010346:	461f      	mov	r7, r3
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8010348:	2800      	cmp	r0, #0
 801034a:	f040 809c 	bne.w	8010486 <HAL_SPI_TransmitReceive+0x14e>
  __HAL_LOCK(hspi);
 801034e:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8010352:	2b01      	cmp	r3, #1
 8010354:	f000 80a1 	beq.w	801049a <HAL_SPI_TransmitReceive+0x162>
 8010358:	2301      	movs	r3, #1
 801035a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 801035e:	f7fd f877 	bl	800d450 <HAL_GetTick>
  tmp_state           = hspi->State;
 8010362:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 8010366:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8010368:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 801036a:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 801036c:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801036e:	d010      	beq.n	8010392 <HAL_SPI_TransmitReceive+0x5a>
 8010370:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8010374:	d008      	beq.n	8010388 <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_BUSY;
 8010376:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8010378:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 801037a:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 801037c:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8010380:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8010384:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8010388:	68a3      	ldr	r3, [r4, #8]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d1f3      	bne.n	8010376 <HAL_SPI_TransmitReceive+0x3e>
 801038e:	2904      	cmp	r1, #4
 8010390:	d1f1      	bne.n	8010376 <HAL_SPI_TransmitReceive+0x3e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8010392:	f1b8 0f00 	cmp.w	r8, #0
 8010396:	f000 8083 	beq.w	80104a0 <HAL_SPI_TransmitReceive+0x168>
 801039a:	f1b9 0f00 	cmp.w	r9, #0
 801039e:	d07f      	beq.n	80104a0 <HAL_SPI_TransmitReceive+0x168>
 80103a0:	2f00      	cmp	r7, #0
 80103a2:	d07d      	beq.n	80104a0 <HAL_SPI_TransmitReceive+0x168>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80103a4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80103a8:	68e1      	ldr	r1, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80103aa:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80103ae:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80103b0:	bf1c      	itt	ne
 80103b2:	2305      	movne	r3, #5
 80103b4:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80103b8:	2300      	movs	r3, #0
 80103ba:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 80103bc:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80103c0:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80103c2:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80103c6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  hspi->TxXferCount = Size;
 80103ca:	87e7      	strh	r7, [r4, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80103cc:	6859      	ldr	r1, [r3, #4]
  hspi->RxXferSize  = Size;
 80103ce:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80103d2:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80103d6:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80103d8:	d864      	bhi.n	80104a4 <HAL_SPI_TransmitReceive+0x16c>
 80103da:	2f01      	cmp	r7, #1
 80103dc:	f240 80bc 	bls.w	8010558 <HAL_SPI_TransmitReceive+0x220>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80103e0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80103e4:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80103e6:	6819      	ldr	r1, [r3, #0]
 80103e8:	0648      	lsls	r0, r1, #25
 80103ea:	f140 80bc 	bpl.w	8010566 <HAL_SPI_TransmitReceive+0x22e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80103ee:	b96a      	cbnz	r2, 801040c <HAL_SPI_TransmitReceive+0xd4>
      if (hspi->TxXferCount > 1U)
 80103f0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80103f2:	b292      	uxth	r2, r2
 80103f4:	2a01      	cmp	r2, #1
 80103f6:	f240 80f1 	bls.w	80105dc <HAL_SPI_TransmitReceive+0x2a4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80103fa:	4641      	mov	r1, r8
 80103fc:	f831 2b02 	ldrh.w	r2, [r1], #2
 8010400:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8010402:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010404:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8010406:	3b02      	subs	r3, #2
 8010408:	b29b      	uxth	r3, r3
 801040a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 801040c:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801040e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8010410:	b29b      	uxth	r3, r3
 8010412:	b92b      	cbnz	r3, 8010420 <HAL_SPI_TransmitReceive+0xe8>
 8010414:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8010418:	b29b      	uxth	r3, r3
 801041a:	2b00      	cmp	r3, #0
 801041c:	f000 808d 	beq.w	801053a <HAL_SPI_TransmitReceive+0x202>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010420:	6822      	ldr	r2, [r4, #0]
 8010422:	6893      	ldr	r3, [r2, #8]
 8010424:	0799      	lsls	r1, r3, #30
 8010426:	d505      	bpl.n	8010434 <HAL_SPI_TransmitReceive+0xfc>
 8010428:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801042a:	b29b      	uxth	r3, r3
 801042c:	b113      	cbz	r3, 8010434 <HAL_SPI_TransmitReceive+0xfc>
 801042e:	2f00      	cmp	r7, #0
 8010430:	f040 80b2 	bne.w	8010598 <HAL_SPI_TransmitReceive+0x260>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010434:	6893      	ldr	r3, [r2, #8]
 8010436:	f013 0301 	ands.w	r3, r3, #1
 801043a:	d01b      	beq.n	8010474 <HAL_SPI_TransmitReceive+0x13c>
 801043c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8010440:	b289      	uxth	r1, r1
 8010442:	b1b9      	cbz	r1, 8010474 <HAL_SPI_TransmitReceive+0x13c>
        if (hspi->RxXferCount > 1U)
 8010444:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8010448:	b289      	uxth	r1, r1
 801044a:	2901      	cmp	r1, #1
 801044c:	f240 8096 	bls.w	801057c <HAL_SPI_TransmitReceive+0x244>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010450:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8010452:	68d1      	ldr	r1, [r2, #12]
 8010454:	f820 1b02 	strh.w	r1, [r0], #2
          hspi->RxXferCount -= 2U;
 8010458:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801045c:	6420      	str	r0, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801045e:	3902      	subs	r1, #2
 8010460:	b289      	uxth	r1, r1
 8010462:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8010466:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 801046a:	b289      	uxth	r1, r1
 801046c:	2901      	cmp	r1, #1
 801046e:	f240 80a2 	bls.w	80105b6 <HAL_SPI_TransmitReceive+0x27e>
        txallowed = 1U;
 8010472:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8010474:	f7fc ffec 	bl	800d450 <HAL_GetTick>
 8010478:	1b40      	subs	r0, r0, r5
 801047a:	42b0      	cmp	r0, r6
 801047c:	d3c7      	bcc.n	801040e <HAL_SPI_TransmitReceive+0xd6>
 801047e:	1c73      	adds	r3, r6, #1
 8010480:	d0c5      	beq.n	801040e <HAL_SPI_TransmitReceive+0xd6>
        errorcode = HAL_TIMEOUT;
 8010482:	2003      	movs	r0, #3
 8010484:	e778      	b.n	8010378 <HAL_SPI_TransmitReceive+0x40>
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8010486:	485b      	ldr	r0, [pc, #364]	; (80105f4 <HAL_SPI_TransmitReceive+0x2bc>)
 8010488:	f240 41f3 	movw	r1, #1267	; 0x4f3
 801048c:	f7f1 fd30 	bl	8001ef0 <assert_failed>
  __HAL_LOCK(hspi);
 8010490:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8010494:	2b01      	cmp	r3, #1
 8010496:	f47f af5f 	bne.w	8010358 <HAL_SPI_TransmitReceive+0x20>
 801049a:	2002      	movs	r0, #2
}
 801049c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 80104a0:	2001      	movs	r0, #1
 80104a2:	e769      	b.n	8010378 <HAL_SPI_TransmitReceive+0x40>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80104a4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80104a8:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80104aa:	6819      	ldr	r1, [r3, #0]
 80104ac:	0649      	lsls	r1, r1, #25
 80104ae:	d403      	bmi.n	80104b8 <HAL_SPI_TransmitReceive+0x180>
    __HAL_SPI_ENABLE(hspi);
 80104b0:	6819      	ldr	r1, [r3, #0]
 80104b2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80104b6:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80104b8:	2a00      	cmp	r2, #0
 80104ba:	d14a      	bne.n	8010552 <HAL_SPI_TransmitReceive+0x21a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80104bc:	4641      	mov	r1, r8
 80104be:	f831 2b02 	ldrh.w	r2, [r1], #2
 80104c2:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80104c4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80104c6:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80104c8:	3b01      	subs	r3, #1
 80104ca:	b29b      	uxth	r3, r3
 80104cc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80104ce:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80104d0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80104d2:	b29b      	uxth	r3, r3
 80104d4:	b91b      	cbnz	r3, 80104de <HAL_SPI_TransmitReceive+0x1a6>
 80104d6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80104da:	b29b      	uxth	r3, r3
 80104dc:	b36b      	cbz	r3, 801053a <HAL_SPI_TransmitReceive+0x202>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80104de:	6822      	ldr	r2, [r4, #0]
 80104e0:	6893      	ldr	r3, [r2, #8]
 80104e2:	079b      	lsls	r3, r3, #30
 80104e4:	d50d      	bpl.n	8010502 <HAL_SPI_TransmitReceive+0x1ca>
 80104e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80104e8:	b29b      	uxth	r3, r3
 80104ea:	b153      	cbz	r3, 8010502 <HAL_SPI_TransmitReceive+0x1ca>
 80104ec:	b14f      	cbz	r7, 8010502 <HAL_SPI_TransmitReceive+0x1ca>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80104ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80104f0:	f831 3b02 	ldrh.w	r3, [r1], #2
 80104f4:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 80104f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80104f8:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80104fa:	3b01      	subs	r3, #1
 80104fc:	b29b      	uxth	r3, r3
 80104fe:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8010500:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010502:	6893      	ldr	r3, [r2, #8]
 8010504:	f013 0301 	ands.w	r3, r3, #1
 8010508:	d00f      	beq.n	801052a <HAL_SPI_TransmitReceive+0x1f2>
 801050a:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 801050e:	b289      	uxth	r1, r1
 8010510:	b159      	cbz	r1, 801052a <HAL_SPI_TransmitReceive+0x1f2>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010512:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010514:	68d2      	ldr	r2, [r2, #12]
 8010516:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 801051a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801051e:	6421      	str	r1, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8010520:	3a01      	subs	r2, #1
 8010522:	b292      	uxth	r2, r2
        txallowed = 1U;
 8010524:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8010526:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801052a:	f7fc ff91 	bl	800d450 <HAL_GetTick>
 801052e:	1b40      	subs	r0, r0, r5
 8010530:	42b0      	cmp	r0, r6
 8010532:	d3cd      	bcc.n	80104d0 <HAL_SPI_TransmitReceive+0x198>
 8010534:	1c70      	adds	r0, r6, #1
 8010536:	d0cb      	beq.n	80104d0 <HAL_SPI_TransmitReceive+0x198>
 8010538:	e7a3      	b.n	8010482 <HAL_SPI_TransmitReceive+0x14a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801053a:	462a      	mov	r2, r5
 801053c:	4631      	mov	r1, r6
 801053e:	4620      	mov	r0, r4
 8010540:	f7ff fdae 	bl	80100a0 <SPI_EndRxTxTransaction>
 8010544:	2800      	cmp	r0, #0
 8010546:	f43f af17 	beq.w	8010378 <HAL_SPI_TransmitReceive+0x40>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801054a:	2320      	movs	r3, #32
 801054c:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 801054e:	2001      	movs	r0, #1
 8010550:	e712      	b.n	8010378 <HAL_SPI_TransmitReceive+0x40>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010552:	2f01      	cmp	r7, #1
 8010554:	d1bb      	bne.n	80104ce <HAL_SPI_TransmitReceive+0x196>
 8010556:	e7b1      	b.n	80104bc <HAL_SPI_TransmitReceive+0x184>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8010558:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 801055c:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801055e:	6819      	ldr	r1, [r3, #0]
 8010560:	0649      	lsls	r1, r1, #25
 8010562:	f53f af45 	bmi.w	80103f0 <HAL_SPI_TransmitReceive+0xb8>
    __HAL_SPI_ENABLE(hspi);
 8010566:	6819      	ldr	r1, [r3, #0]
 8010568:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 801056c:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801056e:	2a00      	cmp	r2, #0
 8010570:	f43f af3e 	beq.w	80103f0 <HAL_SPI_TransmitReceive+0xb8>
 8010574:	2f01      	cmp	r7, #1
 8010576:	f47f af49 	bne.w	801040c <HAL_SPI_TransmitReceive+0xd4>
 801057a:	e739      	b.n	80103f0 <HAL_SPI_TransmitReceive+0xb8>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801057c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801057e:	7b12      	ldrb	r2, [r2, #12]
 8010580:	700a      	strb	r2, [r1, #0]
          hspi->RxXferCount--;
 8010582:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
          hspi->pRxBuffPtr++;
 8010586:	6c21      	ldr	r1, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8010588:	3a01      	subs	r2, #1
 801058a:	b292      	uxth	r2, r2
          hspi->pRxBuffPtr++;
 801058c:	3101      	adds	r1, #1
        txallowed = 1U;
 801058e:	461f      	mov	r7, r3
          hspi->RxXferCount--;
 8010590:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          hspi->pRxBuffPtr++;
 8010594:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8010596:	e76d      	b.n	8010474 <HAL_SPI_TransmitReceive+0x13c>
        if (hspi->TxXferCount > 1U)
 8010598:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801059a:	b29b      	uxth	r3, r3
 801059c:	2b01      	cmp	r3, #1
 801059e:	d910      	bls.n	80105c2 <HAL_SPI_TransmitReceive+0x28a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80105a0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80105a2:	f831 3b02 	ldrh.w	r3, [r1], #2
 80105a6:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 80105a8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80105aa:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80105ac:	3b02      	subs	r3, #2
 80105ae:	b29b      	uxth	r3, r3
 80105b0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80105b2:	2700      	movs	r7, #0
 80105b4:	e73e      	b.n	8010434 <HAL_SPI_TransmitReceive+0xfc>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80105b6:	6851      	ldr	r1, [r2, #4]
 80105b8:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
        txallowed = 1U;
 80105bc:	461f      	mov	r7, r3
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80105be:	6051      	str	r1, [r2, #4]
 80105c0:	e758      	b.n	8010474 <HAL_SPI_TransmitReceive+0x13c>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80105c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80105c4:	781b      	ldrb	r3, [r3, #0]
 80105c6:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 80105c8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 80105ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80105cc:	6822      	ldr	r2, [r4, #0]
          hspi->TxXferCount--;
 80105ce:	3b01      	subs	r3, #1
 80105d0:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 80105d2:	3101      	adds	r1, #1
          hspi->TxXferCount--;
 80105d4:	87e3      	strh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 80105d6:	63a1      	str	r1, [r4, #56]	; 0x38
        txallowed = 0U;
 80105d8:	2700      	movs	r7, #0
 80105da:	e72b      	b.n	8010434 <HAL_SPI_TransmitReceive+0xfc>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80105dc:	f898 2000 	ldrb.w	r2, [r8]
 80105e0:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80105e2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 80105e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80105e6:	3b01      	subs	r3, #1
 80105e8:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 80105ea:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 80105ec:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 80105ee:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80105f0:	e70c      	b.n	801040c <HAL_SPI_TransmitReceive+0xd4>
 80105f2:	bf00      	nop
 80105f4:	08016608 	.word	0x08016608

080105f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80105f8:	b410      	push	{r4}
 80105fa:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105fc:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010600:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010604:	e842 3100 	strex	r1, r3, [r2]
 8010608:	2900      	cmp	r1, #0
 801060a:	d1f7      	bne.n	80105fc <UART_EndRxTransfer+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801060c:	4c14      	ldr	r4, [pc, #80]	; (8010660 <UART_EndRxTransfer+0x68>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801060e:	f102 0308 	add.w	r3, r2, #8
 8010612:	e853 3f00 	ldrex	r3, [r3]
 8010616:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010618:	f102 0c08 	add.w	ip, r2, #8
 801061c:	e84c 3100 	strex	r1, r3, [ip]
 8010620:	2900      	cmp	r1, #0
 8010622:	d1f4      	bne.n	801060e <UART_EndRxTransfer+0x16>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010624:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8010626:	2b01      	cmp	r3, #1
 8010628:	d008      	beq.n	801063c <UART_EndRxTransfer+0x44>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801062a:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 801062c:	2220      	movs	r2, #32
 801062e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
}
 8010632:	f85d 4b04 	ldr.w	r4, [sp], #4
  huart->RxISR = NULL;
 8010636:	6703      	str	r3, [r0, #112]	; 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010638:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 801063a:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801063c:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010640:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010644:	e842 3100 	strex	r1, r3, [r2]
 8010648:	2900      	cmp	r1, #0
 801064a:	d0ee      	beq.n	801062a <UART_EndRxTransfer+0x32>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801064c:	e852 3f00 	ldrex	r3, [r2]
 8010650:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010654:	e842 3100 	strex	r1, r3, [r2]
 8010658:	2900      	cmp	r1, #0
 801065a:	d1ef      	bne.n	801063c <UART_EndRxTransfer+0x44>
 801065c:	e7e5      	b.n	801062a <UART_EndRxTransfer+0x32>
 801065e:	bf00      	nop
 8010660:	effffffe 	.word	0xeffffffe

08010664 <HAL_UART_Transmit_DMA>:
{
 8010664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8010668:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 801066c:	2e20      	cmp	r6, #32
 801066e:	d142      	bne.n	80106f6 <HAL_UART_Transmit_DMA+0x92>
    if ((pData == NULL) || (Size == 0U))
 8010670:	2900      	cmp	r1, #0
 8010672:	d03d      	beq.n	80106f0 <HAL_UART_Transmit_DMA+0x8c>
 8010674:	2a00      	cmp	r2, #0
 8010676:	d03b      	beq.n	80106f0 <HAL_UART_Transmit_DMA+0x8c>
 8010678:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 801067a:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
 801067e:	2801      	cmp	r0, #1
 8010680:	d039      	beq.n	80106f6 <HAL_UART_Transmit_DMA+0x92>
    if (huart->hdmatx != NULL)
 8010682:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    huart->TxXferCount = Size;
 8010684:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010688:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 801068a:	2501      	movs	r5, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801068c:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801068e:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
    huart->pTxBuffPtr  = pData;
 8010692:	6521      	str	r1, [r4, #80]	; 0x50
    huart->TxXferSize  = Size;
 8010694:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
    __HAL_LOCK(huart);
 8010698:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801069c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    if (huart->hdmatx != NULL)
 80106a0:	b190      	cbz	r0, 80106c8 <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80106a2:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8010710 <HAL_UART_Transmit_DMA+0xac>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80106a6:	f8d4 8000 	ldr.w	r8, [r4]
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80106aa:	f8df e068 	ldr.w	lr, [pc, #104]	; 8010714 <HAL_UART_Transmit_DMA+0xb0>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80106ae:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80106b2:	f8df c064 	ldr.w	ip, [pc, #100]	; 8010718 <HAL_UART_Transmit_DMA+0xb4>
      huart->hdmatx->XferAbortCallback = NULL;
 80106b6:	6387      	str	r7, [r0, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80106b8:	4613      	mov	r3, r2
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80106ba:	e9c0 ec0c 	strd	lr, ip, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80106be:	f108 0228 	add.w	r2, r8, #40	; 0x28
 80106c2:	f7fd f8bf 	bl	800d844 <HAL_DMA_Start_IT>
 80106c6:	b9c8      	cbnz	r0, 80106fc <HAL_UART_Transmit_DMA+0x98>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80106c8:	6822      	ldr	r2, [r4, #0]
 80106ca:	2140      	movs	r1, #64	; 0x40
    __HAL_UNLOCK(huart);
 80106cc:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80106ce:	6211      	str	r1, [r2, #32]
    __HAL_UNLOCK(huart);
 80106d0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106d4:	f102 0308 	add.w	r3, r2, #8
 80106d8:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80106dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106e0:	f102 0108 	add.w	r1, r2, #8
 80106e4:	e841 3000 	strex	r0, r3, [r1]
 80106e8:	2800      	cmp	r0, #0
 80106ea:	d1f3      	bne.n	80106d4 <HAL_UART_Transmit_DMA+0x70>
}
 80106ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 80106f0:	2001      	movs	r0, #1
}
 80106f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80106f6:	2002      	movs	r0, #2
}
 80106f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80106fc:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 80106fe:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010702:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        return HAL_ERROR;
 8010706:	4628      	mov	r0, r5
        huart->gState = HAL_UART_STATE_READY;
 8010708:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
}
 801070c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010710:	0801071d 	.word	0x0801071d
 8010714:	08010765 	.word	0x08010765
 8010718:	08010775 	.word	0x08010775

0801071c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801071c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801071e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010720:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	f013 0320 	ands.w	r3, r3, #32
 8010728:	d117      	bne.n	801075a <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 801072a:	6802      	ldr	r2, [r0, #0]
 801072c:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010730:	f102 0308 	add.w	r3, r2, #8
 8010734:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010738:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801073c:	f102 0008 	add.w	r0, r2, #8
 8010740:	e840 3100 	strex	r1, r3, [r0]
 8010744:	2900      	cmp	r1, #0
 8010746:	d1f3      	bne.n	8010730 <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010748:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801074c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010750:	e842 3100 	strex	r1, r3, [r2]
 8010754:	2900      	cmp	r1, #0
 8010756:	d1f7      	bne.n	8010748 <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010758:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 801075a:	f7f1 f95b 	bl	8001a14 <HAL_UART_TxCpltCallback>
}
 801075e:	bd08      	pop	{r3, pc}

08010760 <HAL_UART_TxHalfCpltCallback>:
 8010760:	4770      	bx	lr
 8010762:	bf00      	nop

08010764 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010764:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010766:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8010768:	f7ff fffa 	bl	8010760 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801076c:	bd08      	pop	{r3, pc}
 801076e:	bf00      	nop

08010770 <HAL_UART_ErrorCallback>:
 8010770:	4770      	bx	lr
 8010772:	bf00      	nop

08010774 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010774:	6a80      	ldr	r0, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010776:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010778:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
{
 801077c:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801077e:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010782:	689a      	ldr	r2, [r3, #8]
 8010784:	0612      	lsls	r2, r2, #24
 8010786:	d501      	bpl.n	801078c <UART_DMAError+0x18>
 8010788:	2921      	cmp	r1, #33	; 0x21
 801078a:	d00d      	beq.n	80107a8 <UART_DMAError+0x34>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801078c:	689b      	ldr	r3, [r3, #8]
 801078e:	065b      	lsls	r3, r3, #25
 8010790:	d501      	bpl.n	8010796 <UART_DMAError+0x22>
 8010792:	2c22      	cmp	r4, #34	; 0x22
 8010794:	d023      	beq.n	80107de <UART_DMAError+0x6a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010796:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 801079a:	f043 0310 	orr.w	r3, r3, #16
 801079e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80107a2:	f7ff ffe5 	bl	8010770 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80107a6:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 80107a8:	2200      	movs	r2, #0
 80107aa:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107ae:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80107b2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107b6:	e843 2100 	strex	r1, r2, [r3]
 80107ba:	2900      	cmp	r1, #0
 80107bc:	d1f7      	bne.n	80107ae <UART_DMAError+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107be:	f103 0208 	add.w	r2, r3, #8
 80107c2:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80107c6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107ca:	f103 0c08 	add.w	ip, r3, #8
 80107ce:	e84c 2100 	strex	r1, r2, [ip]
 80107d2:	2900      	cmp	r1, #0
 80107d4:	d1f3      	bne.n	80107be <UART_DMAError+0x4a>
  huart->gState = HAL_UART_STATE_READY;
 80107d6:	2220      	movs	r2, #32
 80107d8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
}
 80107dc:	e7d6      	b.n	801078c <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 80107de:	2300      	movs	r3, #0
 80107e0:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80107e4:	f7ff ff08 	bl	80105f8 <UART_EndRxTransfer>
 80107e8:	e7d5      	b.n	8010796 <UART_DMAError+0x22>
 80107ea:	bf00      	nop

080107ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80107ec:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80107ee:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80107f0:	2300      	movs	r3, #0
 80107f2:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80107f6:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80107fa:	f7ff ffb9 	bl	8010770 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80107fe:	bd08      	pop	{r3, pc}

08010800 <HAL_UARTEx_RxEventCallback>:
}
 8010800:	4770      	bx	lr
 8010802:	bf00      	nop

08010804 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010804:	6803      	ldr	r3, [r0, #0]
 8010806:	69da      	ldr	r2, [r3, #28]
{
 8010808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801080c:	f640 060f 	movw	r6, #2063	; 0x80f
  if (errorflags == 0U)
 8010810:	4232      	tst	r2, r6
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010812:	681d      	ldr	r5, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010814:	6899      	ldr	r1, [r3, #8]
{
 8010816:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8010818:	f000 80c9 	beq.w	80109ae <HAL_UART_IRQHandler+0x1aa>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801081c:	48b8      	ldr	r0, [pc, #736]	; (8010b00 <HAL_UART_IRQHandler+0x2fc>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801081e:	4eb9      	ldr	r6, [pc, #740]	; (8010b04 <HAL_UART_IRQHandler+0x300>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010820:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010822:	402e      	ands	r6, r5
 8010824:	4306      	orrs	r6, r0
 8010826:	d155      	bne.n	80108d4 <HAL_UART_IRQHandler+0xd0>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010828:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 801082a:	2801      	cmp	r0, #1
 801082c:	d022      	beq.n	8010874 <HAL_UART_IRQHandler+0x70>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801082e:	02d7      	lsls	r7, r2, #11
 8010830:	d502      	bpl.n	8010838 <HAL_UART_IRQHandler+0x34>
 8010832:	024e      	lsls	r6, r1, #9
 8010834:	f100 80e1 	bmi.w	80109fa <HAL_UART_IRQHandler+0x1f6>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010838:	0610      	lsls	r0, r2, #24
 801083a:	d506      	bpl.n	801084a <HAL_UART_IRQHandler+0x46>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801083c:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010840:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010844:	4301      	orrs	r1, r0
 8010846:	f040 80d0 	bne.w	80109ea <HAL_UART_IRQHandler+0x1e6>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801084a:	0657      	lsls	r7, r2, #25
 801084c:	d534      	bpl.n	80108b8 <HAL_UART_IRQHandler+0xb4>
 801084e:	066e      	lsls	r6, r5, #25
 8010850:	d532      	bpl.n	80108b8 <HAL_UART_IRQHandler+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010852:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010856:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801085a:	e843 2100 	strex	r1, r2, [r3]
 801085e:	2900      	cmp	r1, #0
 8010860:	d1f7      	bne.n	8010852 <HAL_UART_IRQHandler+0x4e>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010862:	2320      	movs	r3, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010864:	6761      	str	r1, [r4, #116]	; 0x74
  huart->gState = HAL_UART_STATE_READY;
 8010866:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801086a:	4620      	mov	r0, r4
 801086c:	f7f1 f8d2 	bl	8001a14 <HAL_UART_TxCpltCallback>
}
 8010870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8010874:	06d6      	lsls	r6, r2, #27
 8010876:	d5da      	bpl.n	801082e <HAL_UART_IRQHandler+0x2a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8010878:	06e8      	lsls	r0, r5, #27
 801087a:	d5d8      	bpl.n	801082e <HAL_UART_IRQHandler+0x2a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801087c:	2210      	movs	r2, #16
 801087e:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010880:	689a      	ldr	r2, [r3, #8]
 8010882:	0651      	lsls	r1, r2, #25
 8010884:	f140 80d1 	bpl.w	8010a2a <HAL_UART_IRQHandler+0x226>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010888:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 801088a:	6801      	ldr	r1, [r0, #0]
 801088c:	684a      	ldr	r2, [r1, #4]
 801088e:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 8010890:	2a00      	cmp	r2, #0
 8010892:	d0ed      	beq.n	8010870 <HAL_UART_IRQHandler+0x6c>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8010894:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 8010898:	4295      	cmp	r5, r2
 801089a:	d9e9      	bls.n	8010870 <HAL_UART_IRQHandler+0x6c>
        huart->RxXferCount = nb_remaining_rx_data;
 801089c:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80108a0:	680a      	ldr	r2, [r1, #0]
 80108a2:	0692      	lsls	r2, r2, #26
 80108a4:	f140 80f6 	bpl.w	8010a94 <HAL_UART_IRQHandler+0x290>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80108a8:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 80108ac:	1a69      	subs	r1, r5, r1
 80108ae:	b289      	uxth	r1, r1
 80108b0:	4620      	mov	r0, r4
 80108b2:	f7ff ffa5 	bl	8010800 <HAL_UARTEx_RxEventCallback>
 80108b6:	e7db      	b.n	8010870 <HAL_UART_IRQHandler+0x6c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80108b8:	0210      	lsls	r0, r2, #8
 80108ba:	d502      	bpl.n	80108c2 <HAL_UART_IRQHandler+0xbe>
 80108bc:	0069      	lsls	r1, r5, #1
 80108be:	f100 80a8 	bmi.w	8010a12 <HAL_UART_IRQHandler+0x20e>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80108c2:	01d3      	lsls	r3, r2, #7
 80108c4:	d5d4      	bpl.n	8010870 <HAL_UART_IRQHandler+0x6c>
 80108c6:	2d00      	cmp	r5, #0
 80108c8:	dad2      	bge.n	8010870 <HAL_UART_IRQHandler+0x6c>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80108ca:	4620      	mov	r0, r4
}
 80108cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 80108d0:	f000 bd3c 	b.w	801134c <HAL_UARTEx_RxFifoFullCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80108d4:	07d6      	lsls	r6, r2, #31
 80108d6:	461f      	mov	r7, r3
 80108d8:	d509      	bpl.n	80108ee <HAL_UART_IRQHandler+0xea>
 80108da:	05ee      	lsls	r6, r5, #23
 80108dc:	d507      	bpl.n	80108ee <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80108de:	2601      	movs	r6, #1
 80108e0:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80108e2:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 80108e6:	f046 0601 	orr.w	r6, r6, #1
 80108ea:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80108ee:	0796      	lsls	r6, r2, #30
 80108f0:	d56e      	bpl.n	80109d0 <HAL_UART_IRQHandler+0x1cc>
 80108f2:	07ce      	lsls	r6, r1, #31
 80108f4:	d509      	bpl.n	801090a <HAL_UART_IRQHandler+0x106>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80108f6:	2602      	movs	r6, #2
 80108f8:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80108fa:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 80108fe:	f046 0604 	orr.w	r6, r6, #4
 8010902:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010906:	0756      	lsls	r6, r2, #29
 8010908:	d466      	bmi.n	80109d8 <HAL_UART_IRQHandler+0x1d4>
    if (((isrflags & USART_ISR_ORE) != 0U)
 801090a:	0716      	lsls	r6, r2, #28
 801090c:	d50b      	bpl.n	8010926 <HAL_UART_IRQHandler+0x122>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801090e:	f005 0620 	and.w	r6, r5, #32
 8010912:	4330      	orrs	r0, r6
 8010914:	d007      	beq.n	8010926 <HAL_UART_IRQHandler+0x122>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010916:	2008      	movs	r0, #8
 8010918:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801091a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 801091e:	f040 0008 	orr.w	r0, r0, #8
 8010922:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010926:	0516      	lsls	r6, r2, #20
 8010928:	d50a      	bpl.n	8010940 <HAL_UART_IRQHandler+0x13c>
 801092a:	0168      	lsls	r0, r5, #5
 801092c:	d508      	bpl.n	8010940 <HAL_UART_IRQHandler+0x13c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801092e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010932:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010934:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8010938:	f043 0320 	orr.w	r3, r3, #32
 801093c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010940:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8010944:	2b00      	cmp	r3, #0
 8010946:	d093      	beq.n	8010870 <HAL_UART_IRQHandler+0x6c>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010948:	0693      	lsls	r3, r2, #26
 801094a:	d506      	bpl.n	801095a <HAL_UART_IRQHandler+0x156>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801094c:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010950:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8010954:	ea55 0301 	orrs.w	r3, r5, r1
 8010958:	d160      	bne.n	8010a1c <HAL_UART_IRQHandler+0x218>
      errorcode = huart->ErrorCode;
 801095a:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801095e:	68bb      	ldr	r3, [r7, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010960:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010968:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 801096a:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801096c:	f000 80c3 	beq.w	8010af6 <HAL_UART_IRQHandler+0x2f2>
        UART_EndRxTransfer(huart);
 8010970:	f7ff fe42 	bl	80105f8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010974:	6823      	ldr	r3, [r4, #0]
 8010976:	689a      	ldr	r2, [r3, #8]
 8010978:	0657      	lsls	r7, r2, #25
 801097a:	d546      	bpl.n	8010a0a <HAL_UART_IRQHandler+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801097c:	f103 0208 	add.w	r2, r3, #8
 8010980:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010984:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010988:	f103 0008 	add.w	r0, r3, #8
 801098c:	e840 2100 	strex	r1, r2, [r0]
 8010990:	2900      	cmp	r1, #0
 8010992:	d1f3      	bne.n	801097c <HAL_UART_IRQHandler+0x178>
          if (huart->hdmarx != NULL)
 8010994:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8010996:	2800      	cmp	r0, #0
 8010998:	d037      	beq.n	8010a0a <HAL_UART_IRQHandler+0x206>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801099a:	4b5b      	ldr	r3, [pc, #364]	; (8010b08 <HAL_UART_IRQHandler+0x304>)
 801099c:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801099e:	f7fc fffb 	bl	800d998 <HAL_DMA_Abort_IT>
 80109a2:	2800      	cmp	r0, #0
 80109a4:	f43f af64 	beq.w	8010870 <HAL_UART_IRQHandler+0x6c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80109a8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80109aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80109ac:	e00d      	b.n	80109ca <HAL_UART_IRQHandler+0x1c6>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80109ae:	0697      	lsls	r7, r2, #26
 80109b0:	f57f af3a 	bpl.w	8010828 <HAL_UART_IRQHandler+0x24>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80109b4:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80109b8:	f001 5780 	and.w	r7, r1, #268435456	; 0x10000000
 80109bc:	433e      	orrs	r6, r7
 80109be:	f43f af33 	beq.w	8010828 <HAL_UART_IRQHandler+0x24>
      if (huart->RxISR != NULL)
 80109c2:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	f43f af53 	beq.w	8010870 <HAL_UART_IRQHandler+0x6c>
}
 80109ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80109ce:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80109d0:	0756      	lsls	r6, r2, #29
 80109d2:	d59a      	bpl.n	801090a <HAL_UART_IRQHandler+0x106>
 80109d4:	07ce      	lsls	r6, r1, #31
 80109d6:	d598      	bpl.n	801090a <HAL_UART_IRQHandler+0x106>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80109d8:	2604      	movs	r6, #4
 80109da:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80109dc:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 80109e0:	f046 0602 	orr.w	r6, r6, #2
 80109e4:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 80109e8:	e78f      	b.n	801090a <HAL_UART_IRQHandler+0x106>
    if (huart->TxISR != NULL)
 80109ea:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	f43f af3f 	beq.w	8010870 <HAL_UART_IRQHandler+0x6c>
      huart->TxISR(huart);
 80109f2:	4620      	mov	r0, r4
}
 80109f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 80109f8:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80109fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 80109fe:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010a00:	621a      	str	r2, [r3, #32]
}
 8010a02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8010a06:	f000 bc9f 	b.w	8011348 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 8010a0a:	4620      	mov	r0, r4
 8010a0c:	f7ff feb0 	bl	8010770 <HAL_UART_ErrorCallback>
 8010a10:	e72e      	b.n	8010870 <HAL_UART_IRQHandler+0x6c>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010a12:	4620      	mov	r0, r4
}
 8010a14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010a18:	f000 bc9a 	b.w	8011350 <HAL_UARTEx_TxFifoEmptyCallback>
        if (huart->RxISR != NULL)
 8010a1c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d09b      	beq.n	801095a <HAL_UART_IRQHandler+0x156>
          huart->RxISR(huart);
 8010a22:	4620      	mov	r0, r4
 8010a24:	4798      	blx	r3
 8010a26:	6827      	ldr	r7, [r4, #0]
 8010a28:	e797      	b.n	801095a <HAL_UART_IRQHandler+0x156>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010a2a:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
      if (  (huart->RxXferCount > 0U)
 8010a2e:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 8010a32:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010a34:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 8010a36:	2a00      	cmp	r2, #0
 8010a38:	f43f af1a 	beq.w	8010870 <HAL_UART_IRQHandler+0x6c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010a3c:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8010a40:	1a51      	subs	r1, r2, r1
 8010a42:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 8010a44:	2900      	cmp	r1, #0
 8010a46:	f43f af13 	beq.w	8010870 <HAL_UART_IRQHandler+0x6c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a4a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010a4e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a52:	e843 2000 	strex	r0, r2, [r3]
 8010a56:	2800      	cmp	r0, #0
 8010a58:	d1f7      	bne.n	8010a4a <HAL_UART_IRQHandler+0x246>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010a5a:	4d2c      	ldr	r5, [pc, #176]	; (8010b0c <HAL_UART_IRQHandler+0x308>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a5c:	f103 0208 	add.w	r2, r3, #8
 8010a60:	e852 2f00 	ldrex	r2, [r2]
 8010a64:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a66:	f103 0608 	add.w	r6, r3, #8
 8010a6a:	e846 2000 	strex	r0, r2, [r6]
 8010a6e:	2800      	cmp	r0, #0
 8010a70:	d1f4      	bne.n	8010a5c <HAL_UART_IRQHandler+0x258>
        huart->RxState = HAL_UART_STATE_READY;
 8010a72:	2220      	movs	r2, #32
 8010a74:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8010a78:	6720      	str	r0, [r4, #112]	; 0x70
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a7a:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a7c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010a80:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a84:	e843 2000 	strex	r0, r2, [r3]
 8010a88:	2800      	cmp	r0, #0
 8010a8a:	d1f7      	bne.n	8010a7c <HAL_UART_IRQHandler+0x278>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010a8c:	4620      	mov	r0, r4
 8010a8e:	f7ff feb7 	bl	8010800 <HAL_UARTEx_RxEventCallback>
 8010a92:	e6ed      	b.n	8010870 <HAL_UART_IRQHandler+0x6c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a94:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010a98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a9c:	e843 2100 	strex	r1, r2, [r3]
 8010aa0:	2900      	cmp	r1, #0
 8010aa2:	d1f7      	bne.n	8010a94 <HAL_UART_IRQHandler+0x290>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010aa4:	f103 0208 	add.w	r2, r3, #8
 8010aa8:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010aac:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ab0:	f103 0508 	add.w	r5, r3, #8
 8010ab4:	e845 2100 	strex	r1, r2, [r5]
 8010ab8:	2900      	cmp	r1, #0
 8010aba:	d1f3      	bne.n	8010aa4 <HAL_UART_IRQHandler+0x2a0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010abc:	f103 0208 	add.w	r2, r3, #8
 8010ac0:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010ac4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ac8:	f103 0508 	add.w	r5, r3, #8
 8010acc:	e845 2100 	strex	r1, r2, [r5]
 8010ad0:	2900      	cmp	r1, #0
 8010ad2:	d1f3      	bne.n	8010abc <HAL_UART_IRQHandler+0x2b8>
          huart->RxState = HAL_UART_STATE_READY;
 8010ad4:	2220      	movs	r2, #32
 8010ad6:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ada:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010adc:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ae0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ae4:	e843 2100 	strex	r1, r2, [r3]
 8010ae8:	2900      	cmp	r1, #0
 8010aea:	d1f7      	bne.n	8010adc <HAL_UART_IRQHandler+0x2d8>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010aec:	f7fc ff1a 	bl	800d924 <HAL_DMA_Abort>
 8010af0:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 8010af4:	e6d8      	b.n	80108a8 <HAL_UART_IRQHandler+0xa4>
        HAL_UART_ErrorCallback(huart);
 8010af6:	f7ff fe3b 	bl	8010770 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010afa:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 8010afe:	e6b7      	b.n	8010870 <HAL_UART_IRQHandler+0x6c>
 8010b00:	10000001 	.word	0x10000001
 8010b04:	04000120 	.word	0x04000120
 8010b08:	080107ed 	.word	0x080107ed
 8010b0c:	effffffe 	.word	0xeffffffe

08010b10 <UART_SetConfig>:
{
 8010b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8010b12:	6842      	ldr	r2, [r0, #4]
 8010b14:	4bbf      	ldr	r3, [pc, #764]	; (8010e14 <UART_SetConfig+0x304>)
 8010b16:	429a      	cmp	r2, r3
{
 8010b18:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8010b1a:	f200 80a2 	bhi.w	8010c62 <UART_SetConfig+0x152>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8010b1e:	68a3      	ldr	r3, [r4, #8]
 8010b20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010b24:	d003      	beq.n	8010b2e <UART_SetConfig+0x1e>
 8010b26:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8010b2a:	f040 80fd 	bne.w	8010d28 <UART_SetConfig+0x218>
  if (UART_INSTANCE_LOWPOWER(huart))
 8010b2e:	4bba      	ldr	r3, [pc, #744]	; (8010e18 <UART_SetConfig+0x308>)
 8010b30:	6822      	ldr	r2, [r4, #0]
 8010b32:	429a      	cmp	r2, r3
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8010b34:	68e3      	ldr	r3, [r4, #12]
  if (UART_INSTANCE_LOWPOWER(huart))
 8010b36:	f000 80e7 	beq.w	8010d08 <UART_SetConfig+0x1f8>
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8010b3a:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8010b3e:	d004      	beq.n	8010b4a <UART_SetConfig+0x3a>
 8010b40:	48b6      	ldr	r0, [pc, #728]	; (8010e1c <UART_SetConfig+0x30c>)
 8010b42:	f640 4125 	movw	r1, #3109	; 0xc25
 8010b46:	f7f1 f9d3 	bl	8001ef0 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8010b4a:	6a23      	ldr	r3, [r4, #32]
 8010b4c:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8010b50:	f040 80e4 	bne.w	8010d1c <UART_SetConfig+0x20c>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8010b54:	6923      	ldr	r3, [r4, #16]
 8010b56:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8010b5a:	d003      	beq.n	8010b64 <UART_SetConfig+0x54>
 8010b5c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010b60:	f040 80e8 	bne.w	8010d34 <UART_SetConfig+0x224>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8010b64:	6963      	ldr	r3, [r4, #20]
 8010b66:	f033 020c 	bics.w	r2, r3, #12
 8010b6a:	d147      	bne.n	8010bfc <UART_SetConfig+0xec>
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d045      	beq.n	8010bfc <UART_SetConfig+0xec>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8010b70:	69a3      	ldr	r3, [r4, #24]
 8010b72:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8010b76:	d004      	beq.n	8010b82 <UART_SetConfig+0x72>
 8010b78:	48a8      	ldr	r0, [pc, #672]	; (8010e1c <UART_SetConfig+0x30c>)
 8010b7a:	f640 412f 	movw	r1, #3119	; 0xc2f
 8010b7e:	f7f1 f9b7 	bl	8001ef0 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8010b82:	69e3      	ldr	r3, [r4, #28]
 8010b84:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8010b88:	d004      	beq.n	8010b94 <UART_SetConfig+0x84>
 8010b8a:	48a4      	ldr	r0, [pc, #656]	; (8010e1c <UART_SetConfig+0x30c>)
 8010b8c:	f44f 6143 	mov.w	r1, #3120	; 0xc30
 8010b90:	f7f1 f9ae 	bl	8001ef0 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8010b94:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010b96:	290b      	cmp	r1, #11
 8010b98:	d85c      	bhi.n	8010c54 <UART_SetConfig+0x144>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010b9a:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010b9c:	6925      	ldr	r5, [r4, #16]
 8010b9e:	68a2      	ldr	r2, [r4, #8]
 8010ba0:	6966      	ldr	r6, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010ba2:	681f      	ldr	r7, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010ba4:	69e0      	ldr	r0, [r4, #28]
 8010ba6:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010ba8:	4d9d      	ldr	r5, [pc, #628]	; (8010e20 <UART_SetConfig+0x310>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010baa:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010bac:	403d      	ands	r5, r7
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010bae:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010bb0:	432a      	orrs	r2, r5
 8010bb2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010bb4:	685a      	ldr	r2, [r3, #4]
 8010bb6:	68e5      	ldr	r5, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010bb8:	4f97      	ldr	r7, [pc, #604]	; (8010e18 <UART_SetConfig+0x308>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010bba:	69a6      	ldr	r6, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010bbc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8010bc0:	432a      	orrs	r2, r5
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010bc2:	42bb      	cmp	r3, r7
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010bc4:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010bc6:	d052      	beq.n	8010c6e <UART_SetConfig+0x15e>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010bc8:	689d      	ldr	r5, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8010bca:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010bcc:	f025 456e 	bic.w	r5, r5, #3992977408	; 0xee000000
 8010bd0:	f425 6530 	bic.w	r5, r5, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8010bd4:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010bd6:	432a      	orrs	r2, r5
 8010bd8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010bdc:	f507 4738 	add.w	r7, r7, #47104	; 0xb800
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010be0:	f022 020f 	bic.w	r2, r2, #15
 8010be4:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010be6:	42bb      	cmp	r3, r7
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010be8:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010bea:	d00d      	beq.n	8010c08 <UART_SetConfig+0xf8>
        ret = HAL_ERROR;
 8010bec:	2001      	movs	r0, #1
  huart->NbRxDataToProcess = 1;
 8010bee:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 8010bf2:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8010bf4:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8010bf8:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8010bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8010bfc:	4887      	ldr	r0, [pc, #540]	; (8010e1c <UART_SetConfig+0x30c>)
 8010bfe:	f640 412e 	movw	r1, #3118	; 0xc2e
 8010c02:	f7f1 f975 	bl	8001ef0 <assert_failed>
 8010c06:	e7b3      	b.n	8010b70 <UART_SetConfig+0x60>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8010c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010c10:	f003 0303 	and.w	r3, r3, #3
 8010c14:	3b01      	subs	r3, #1
 8010c16:	2b02      	cmp	r3, #2
 8010c18:	f200 80b2 	bhi.w	8010d80 <UART_SetConfig+0x270>
 8010c1c:	4a81      	ldr	r2, [pc, #516]	; (8010e24 <UART_SetConfig+0x314>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010c1e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8010c22:	5cd3      	ldrb	r3, [r2, r3]
 8010c24:	f000 80b5 	beq.w	8010d92 <UART_SetConfig+0x282>
    switch (clocksource)
 8010c28:	3b01      	subs	r3, #1
 8010c2a:	2b07      	cmp	r3, #7
 8010c2c:	d8de      	bhi.n	8010bec <UART_SetConfig+0xdc>
 8010c2e:	a201      	add	r2, pc, #4	; (adr r2, 8010c34 <UART_SetConfig+0x124>)
 8010c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c34:	08010d87 	.word	0x08010d87
 8010c38:	08010d71 	.word	0x08010d71
 8010c3c:	08010bed 	.word	0x08010bed
 8010c40:	08010d75 	.word	0x08010d75
 8010c44:	08010bed 	.word	0x08010bed
 8010c48:	08010bed 	.word	0x08010bed
 8010c4c:	08010bed 	.word	0x08010bed
 8010c50:	08010d41 	.word	0x08010d41
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8010c54:	f640 4131 	movw	r1, #3121	; 0xc31
 8010c58:	4870      	ldr	r0, [pc, #448]	; (8010e1c <UART_SetConfig+0x30c>)
 8010c5a:	f7f1 f949 	bl	8001ef0 <assert_failed>
 8010c5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010c60:	e79b      	b.n	8010b9a <UART_SetConfig+0x8a>
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8010c62:	486e      	ldr	r0, [pc, #440]	; (8010e1c <UART_SetConfig+0x30c>)
 8010c64:	f640 411c 	movw	r1, #3100	; 0xc1c
 8010c68:	f7f1 f942 	bl	8001ef0 <assert_failed>
 8010c6c:	e757      	b.n	8010b1e <UART_SetConfig+0xe>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010c6e:	6898      	ldr	r0, [r3, #8]
 8010c70:	f020 406e 	bic.w	r0, r0, #3992977408	; 0xee000000
 8010c74:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 8010c78:	4330      	orrs	r0, r6
 8010c7a:	6098      	str	r0, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c7e:	f022 020f 	bic.w	r2, r2, #15
 8010c82:	430a      	orrs	r2, r1
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8010c84:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8010c88:	62da      	str	r2, [r3, #44]	; 0x2c
 8010c8a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8010c8e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010c92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010c96:	f000 80b1 	beq.w	8010dfc <UART_SetConfig+0x2ec>
 8010c9a:	d80b      	bhi.n	8010cb4 <UART_SetConfig+0x1a4>
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d075      	beq.n	8010d8c <UART_SetConfig+0x27c>
 8010ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010ca4:	d1a2      	bne.n	8010bec <UART_SetConfig+0xdc>
        pclk = HAL_RCC_GetSysClockFreq();
 8010ca6:	f7fd f94f 	bl	800df48 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8010caa:	2800      	cmp	r0, #0
 8010cac:	f000 80a4 	beq.w	8010df8 <UART_SetConfig+0x2e8>
 8010cb0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010cb2:	e004      	b.n	8010cbe <UART_SetConfig+0x1ae>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010cb4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010cb8:	d198      	bne.n	8010bec <UART_SetConfig+0xdc>
        pclk = (uint32_t) LSE_VALUE;
 8010cba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010cbe:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010cc0:	4b59      	ldr	r3, [pc, #356]	; (8010e28 <UART_SetConfig+0x318>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010cc2:	eb05 0645 	add.w	r6, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010cc6:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8010cca:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010cce:	429e      	cmp	r6, r3
 8010cd0:	d88c      	bhi.n	8010bec <UART_SetConfig+0xdc>
 8010cd2:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8010cd6:	d889      	bhi.n	8010bec <UART_SetConfig+0xdc>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010cd8:	2300      	movs	r3, #0
 8010cda:	2100      	movs	r1, #0
 8010cdc:	f7ef fd0c 	bl	80006f8 <__aeabi_uldivmod>
 8010ce0:	020b      	lsls	r3, r1, #8
 8010ce2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010ce6:	0202      	lsls	r2, r0, #8
 8010ce8:	0868      	lsrs	r0, r5, #1
 8010cea:	1810      	adds	r0, r2, r0
 8010cec:	f143 0100 	adc.w	r1, r3, #0
 8010cf0:	462a      	mov	r2, r5
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	f7ef fd00 	bl	80006f8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010cf8:	4a4c      	ldr	r2, [pc, #304]	; (8010e2c <UART_SetConfig+0x31c>)
 8010cfa:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8010cfe:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010d00:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010d02:	f63f af73 	bhi.w	8010bec <UART_SetConfig+0xdc>
 8010d06:	e02f      	b.n	8010d68 <UART_SetConfig+0x258>
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8010d08:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8010d0c:	f43f af22 	beq.w	8010b54 <UART_SetConfig+0x44>
 8010d10:	4842      	ldr	r0, [pc, #264]	; (8010e1c <UART_SetConfig+0x30c>)
 8010d12:	f640 4121 	movw	r1, #3105	; 0xc21
 8010d16:	f7f1 f8eb 	bl	8001ef0 <assert_failed>
 8010d1a:	e71b      	b.n	8010b54 <UART_SetConfig+0x44>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8010d1c:	483f      	ldr	r0, [pc, #252]	; (8010e1c <UART_SetConfig+0x30c>)
 8010d1e:	f640 4126 	movw	r1, #3110	; 0xc26
 8010d22:	f7f1 f8e5 	bl	8001ef0 <assert_failed>
 8010d26:	e715      	b.n	8010b54 <UART_SetConfig+0x44>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8010d28:	483c      	ldr	r0, [pc, #240]	; (8010e1c <UART_SetConfig+0x30c>)
 8010d2a:	f640 411d 	movw	r1, #3101	; 0xc1d
 8010d2e:	f7f1 f8df 	bl	8001ef0 <assert_failed>
 8010d32:	e6fc      	b.n	8010b2e <UART_SetConfig+0x1e>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8010d34:	4839      	ldr	r0, [pc, #228]	; (8010e1c <UART_SetConfig+0x30c>)
 8010d36:	f640 412d 	movw	r1, #3117	; 0xc2d
 8010d3a:	f7f1 f8d9 	bl	8001ef0 <assert_failed>
 8010d3e:	e711      	b.n	8010b64 <UART_SetConfig+0x54>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010d40:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010d44:	6862      	ldr	r2, [r4, #4]
 8010d46:	4b38      	ldr	r3, [pc, #224]	; (8010e28 <UART_SetConfig+0x318>)
 8010d48:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8010d4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8010d50:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8010d54:	fbb3 f3f2 	udiv	r3, r3, r2
 8010d58:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010d5a:	f1a3 0110 	sub.w	r1, r3, #16
 8010d5e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8010d62:	4291      	cmp	r1, r2
 8010d64:	f63f af42 	bhi.w	8010bec <UART_SetConfig+0xdc>
        huart->Instance->BRR = usartdiv;
 8010d68:	6822      	ldr	r2, [r4, #0]
 8010d6a:	2000      	movs	r0, #0
 8010d6c:	60d3      	str	r3, [r2, #12]
 8010d6e:	e73e      	b.n	8010bee <UART_SetConfig+0xde>
        pclk = (uint32_t) HSI_VALUE;
 8010d70:	482f      	ldr	r0, [pc, #188]	; (8010e30 <UART_SetConfig+0x320>)
 8010d72:	e7e7      	b.n	8010d44 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetSysClockFreq();
 8010d74:	f7fd f8e8 	bl	800df48 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8010d78:	2800      	cmp	r0, #0
 8010d7a:	d03d      	beq.n	8010df8 <UART_SetConfig+0x2e8>
 8010d7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010d7e:	e7e1      	b.n	8010d44 <UART_SetConfig+0x234>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010d80:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8010d84:	d042      	beq.n	8010e0c <UART_SetConfig+0x2fc>
        pclk = HAL_RCC_GetPCLK2Freq();
 8010d86:	f7fd ff03 	bl	800eb90 <HAL_RCC_GetPCLK2Freq>
        break;
 8010d8a:	e7f5      	b.n	8010d78 <UART_SetConfig+0x268>
        pclk = HAL_RCC_GetPCLK1Freq();
 8010d8c:	f7fd fee4 	bl	800eb58 <HAL_RCC_GetPCLK1Freq>
        break;
 8010d90:	e78b      	b.n	8010caa <UART_SetConfig+0x19a>
    switch (clocksource)
 8010d92:	3b01      	subs	r3, #1
 8010d94:	2b07      	cmp	r3, #7
 8010d96:	f63f af29 	bhi.w	8010bec <UART_SetConfig+0xdc>
 8010d9a:	a201      	add	r2, pc, #4	; (adr r2, 8010da0 <UART_SetConfig+0x290>)
 8010d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010da0:	08010e0d 	.word	0x08010e0d
 8010da4:	08010dc1 	.word	0x08010dc1
 8010da8:	08010bed 	.word	0x08010bed
 8010dac:	08010e01 	.word	0x08010e01
 8010db0:	08010bed 	.word	0x08010bed
 8010db4:	08010bed 	.word	0x08010bed
 8010db8:	08010bed 	.word	0x08010bed
 8010dbc:	08010dc3 	.word	0x08010dc3
        pclk = (uint32_t) HSI_VALUE;
 8010dc0:	481b      	ldr	r0, [pc, #108]	; (8010e30 <UART_SetConfig+0x320>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010dc2:	6862      	ldr	r2, [r4, #4]
 8010dc4:	4d18      	ldr	r5, [pc, #96]	; (8010e28 <UART_SetConfig+0x318>)
 8010dc6:	0853      	lsrs	r3, r2, #1
 8010dc8:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
 8010dcc:	fbb0 f0f1 	udiv	r0, r0, r1
 8010dd0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8010dd4:	fbb0 f0f2 	udiv	r0, r0, r2
 8010dd8:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010dda:	f1a3 0110 	sub.w	r1, r3, #16
 8010dde:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8010de2:	4291      	cmp	r1, r2
 8010de4:	f63f af02 	bhi.w	8010bec <UART_SetConfig+0xdc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010de8:	f020 000f 	bic.w	r0, r0, #15
        huart->Instance->BRR = brrtemp;
 8010dec:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010dee:	b280      	uxth	r0, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010df0:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8010df4:	4318      	orrs	r0, r3
 8010df6:	60d0      	str	r0, [r2, #12]
 8010df8:	2000      	movs	r0, #0
 8010dfa:	e6f8      	b.n	8010bee <UART_SetConfig+0xde>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010dfc:	480c      	ldr	r0, [pc, #48]	; (8010e30 <UART_SetConfig+0x320>)
 8010dfe:	e75e      	b.n	8010cbe <UART_SetConfig+0x1ae>
        pclk = HAL_RCC_GetSysClockFreq();
 8010e00:	f7fd f8a2 	bl	800df48 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8010e04:	2800      	cmp	r0, #0
 8010e06:	d0f7      	beq.n	8010df8 <UART_SetConfig+0x2e8>
 8010e08:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010e0a:	e7da      	b.n	8010dc2 <UART_SetConfig+0x2b2>
        pclk = HAL_RCC_GetPCLK2Freq();
 8010e0c:	f7fd fec0 	bl	800eb90 <HAL_RCC_GetPCLK2Freq>
        break;
 8010e10:	e7f8      	b.n	8010e04 <UART_SetConfig+0x2f4>
 8010e12:	bf00      	nop
 8010e14:	007a1200 	.word	0x007a1200
 8010e18:	40008000 	.word	0x40008000
 8010e1c:	080166b0 	.word	0x080166b0
 8010e20:	cfff69f3 	.word	0xcfff69f3
 8010e24:	08016720 	.word	0x08016720
 8010e28:	08016724 	.word	0x08016724
 8010e2c:	000ffcff 	.word	0x000ffcff
 8010e30:	00f42400 	.word	0x00f42400

08010e34 <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8010e34:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010e36:	2bff      	cmp	r3, #255	; 0xff
{
 8010e38:	b510      	push	{r4, lr}
 8010e3a:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8010e3c:	f200 808d 	bhi.w	8010f5a <UART_AdvFeatureConfig+0x126>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010e40:	07da      	lsls	r2, r3, #31
 8010e42:	d50a      	bpl.n	8010e5a <UART_AdvFeatureConfig+0x26>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8010e44:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010e46:	f431 3200 	bics.w	r2, r1, #131072	; 0x20000
 8010e4a:	f040 8095 	bne.w	8010f78 <UART_AdvFeatureConfig+0x144>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010e4e:	6820      	ldr	r0, [r4, #0]
 8010e50:	6842      	ldr	r2, [r0, #4]
 8010e52:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8010e56:	430a      	orrs	r2, r1
 8010e58:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010e5a:	0798      	lsls	r0, r3, #30
 8010e5c:	d50a      	bpl.n	8010e74 <UART_AdvFeatureConfig+0x40>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8010e5e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010e60:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 8010e64:	f040 8090 	bne.w	8010f88 <UART_AdvFeatureConfig+0x154>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010e68:	6820      	ldr	r0, [r4, #0]
 8010e6a:	6842      	ldr	r2, [r0, #4]
 8010e6c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8010e70:	430a      	orrs	r2, r1
 8010e72:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010e74:	0759      	lsls	r1, r3, #29
 8010e76:	d50a      	bpl.n	8010e8e <UART_AdvFeatureConfig+0x5a>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8010e78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010e7a:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 8010e7e:	f040 808b 	bne.w	8010f98 <UART_AdvFeatureConfig+0x164>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010e82:	6820      	ldr	r0, [r4, #0]
 8010e84:	6842      	ldr	r2, [r0, #4]
 8010e86:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010e8a:	430a      	orrs	r2, r1
 8010e8c:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010e8e:	071a      	lsls	r2, r3, #28
 8010e90:	d50a      	bpl.n	8010ea8 <UART_AdvFeatureConfig+0x74>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8010e92:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010e94:	f431 4200 	bics.w	r2, r1, #32768	; 0x8000
 8010e98:	f040 8086 	bne.w	8010fa8 <UART_AdvFeatureConfig+0x174>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010e9c:	6820      	ldr	r0, [r4, #0]
 8010e9e:	6842      	ldr	r2, [r0, #4]
 8010ea0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010ea4:	430a      	orrs	r2, r1
 8010ea6:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010ea8:	06d8      	lsls	r0, r3, #27
 8010eaa:	d50a      	bpl.n	8010ec2 <UART_AdvFeatureConfig+0x8e>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8010eac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8010eae:	f431 5280 	bics.w	r2, r1, #4096	; 0x1000
 8010eb2:	f040 8081 	bne.w	8010fb8 <UART_AdvFeatureConfig+0x184>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010eb6:	6820      	ldr	r0, [r4, #0]
 8010eb8:	6882      	ldr	r2, [r0, #8]
 8010eba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010ebe:	430a      	orrs	r2, r1
 8010ec0:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010ec2:	0699      	lsls	r1, r3, #26
 8010ec4:	d509      	bpl.n	8010eda <UART_AdvFeatureConfig+0xa6>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8010ec6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010ec8:	f431 5200 	bics.w	r2, r1, #8192	; 0x2000
 8010ecc:	d14c      	bne.n	8010f68 <UART_AdvFeatureConfig+0x134>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010ece:	6820      	ldr	r0, [r4, #0]
 8010ed0:	6882      	ldr	r2, [r0, #8]
 8010ed2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010ed6:	430a      	orrs	r2, r1
 8010ed8:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010eda:	065a      	lsls	r2, r3, #25
 8010edc:	d523      	bpl.n	8010f26 <UART_AdvFeatureConfig+0xf2>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8010ede:	4b43      	ldr	r3, [pc, #268]	; (8010fec <UART_AdvFeatureConfig+0x1b8>)
 8010ee0:	6822      	ldr	r2, [r4, #0]
 8010ee2:	429a      	cmp	r2, r3
 8010ee4:	d004      	beq.n	8010ef0 <UART_AdvFeatureConfig+0xbc>
 8010ee6:	4842      	ldr	r0, [pc, #264]	; (8010ff0 <UART_AdvFeatureConfig+0x1bc>)
 8010ee8:	f640 5123 	movw	r1, #3363	; 0xd23
 8010eec:	f7f1 f800 	bl	8001ef0 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8010ef0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010ef2:	b35b      	cbz	r3, 8010f4c <UART_AdvFeatureConfig+0x118>
 8010ef4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010ef8:	d166      	bne.n	8010fc8 <UART_AdvFeatureConfig+0x194>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010efa:	6822      	ldr	r2, [r4, #0]
 8010efc:	6853      	ldr	r3, [r2, #4]
 8010efe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010f02:	6053      	str	r3, [r2, #4]
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8010f04:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8010f06:	f430 03c0 	bics.w	r3, r0, #6291456	; 0x600000
 8010f0a:	d006      	beq.n	8010f1a <UART_AdvFeatureConfig+0xe6>
 8010f0c:	4838      	ldr	r0, [pc, #224]	; (8010ff0 <UART_AdvFeatureConfig+0x1bc>)
 8010f0e:	f640 5129 	movw	r1, #3369	; 0xd29
 8010f12:	f7f0 ffed 	bl	8001ef0 <assert_failed>
 8010f16:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8010f18:	6822      	ldr	r2, [r4, #0]
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010f1a:	6851      	ldr	r1, [r2, #4]
 8010f1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010f1e:	f421 01c0 	bic.w	r1, r1, #6291456	; 0x600000
 8010f22:	4301      	orrs	r1, r0
 8010f24:	6051      	str	r1, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010f26:	061b      	lsls	r3, r3, #24
 8010f28:	d50f      	bpl.n	8010f4a <UART_AdvFeatureConfig+0x116>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8010f2a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8010f2c:	f432 2300 	bics.w	r3, r2, #524288	; 0x80000
 8010f30:	d005      	beq.n	8010f3e <UART_AdvFeatureConfig+0x10a>
 8010f32:	482f      	ldr	r0, [pc, #188]	; (8010ff0 <UART_AdvFeatureConfig+0x1bc>)
 8010f34:	f640 5131 	movw	r1, #3377	; 0xd31
 8010f38:	f7f0 ffda 	bl	8001ef0 <assert_failed>
 8010f3c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010f3e:	6821      	ldr	r1, [r4, #0]
 8010f40:	684b      	ldr	r3, [r1, #4]
 8010f42:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8010f46:	4313      	orrs	r3, r2
 8010f48:	604b      	str	r3, [r1, #4]
}
 8010f4a:	bd10      	pop	{r4, pc}
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010f4c:	6821      	ldr	r1, [r4, #0]
 8010f4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010f50:	684a      	ldr	r2, [r1, #4]
 8010f52:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8010f56:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010f58:	e7e5      	b.n	8010f26 <UART_AdvFeatureConfig+0xf2>
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8010f5a:	4825      	ldr	r0, [pc, #148]	; (8010ff0 <UART_AdvFeatureConfig+0x1bc>)
 8010f5c:	f640 41f4 	movw	r1, #3316	; 0xcf4
 8010f60:	f7f0 ffc6 	bl	8001ef0 <assert_failed>
 8010f64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010f66:	e76b      	b.n	8010e40 <UART_AdvFeatureConfig+0xc>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8010f68:	f640 511c 	movw	r1, #3356	; 0xd1c
 8010f6c:	4820      	ldr	r0, [pc, #128]	; (8010ff0 <UART_AdvFeatureConfig+0x1bc>)
 8010f6e:	f7f0 ffbf 	bl	8001ef0 <assert_failed>
 8010f72:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010f74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010f76:	e7aa      	b.n	8010ece <UART_AdvFeatureConfig+0x9a>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8010f78:	f640 41f9 	movw	r1, #3321	; 0xcf9
 8010f7c:	481c      	ldr	r0, [pc, #112]	; (8010ff0 <UART_AdvFeatureConfig+0x1bc>)
 8010f7e:	f7f0 ffb7 	bl	8001ef0 <assert_failed>
 8010f82:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
 8010f86:	e762      	b.n	8010e4e <UART_AdvFeatureConfig+0x1a>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8010f88:	f44f 6150 	mov.w	r1, #3328	; 0xd00
 8010f8c:	4818      	ldr	r0, [pc, #96]	; (8010ff0 <UART_AdvFeatureConfig+0x1bc>)
 8010f8e:	f7f0 ffaf 	bl	8001ef0 <assert_failed>
 8010f92:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010f94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010f96:	e767      	b.n	8010e68 <UART_AdvFeatureConfig+0x34>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8010f98:	f640 5107 	movw	r1, #3335	; 0xd07
 8010f9c:	4814      	ldr	r0, [pc, #80]	; (8010ff0 <UART_AdvFeatureConfig+0x1bc>)
 8010f9e:	f7f0 ffa7 	bl	8001ef0 <assert_failed>
 8010fa2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010fa4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010fa6:	e76c      	b.n	8010e82 <UART_AdvFeatureConfig+0x4e>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8010fa8:	f640 510e 	movw	r1, #3342	; 0xd0e
 8010fac:	4810      	ldr	r0, [pc, #64]	; (8010ff0 <UART_AdvFeatureConfig+0x1bc>)
 8010fae:	f7f0 ff9f 	bl	8001ef0 <assert_failed>
 8010fb2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010fb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010fb6:	e771      	b.n	8010e9c <UART_AdvFeatureConfig+0x68>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8010fb8:	f640 5115 	movw	r1, #3349	; 0xd15
 8010fbc:	480c      	ldr	r0, [pc, #48]	; (8010ff0 <UART_AdvFeatureConfig+0x1bc>)
 8010fbe:	f7f0 ff97 	bl	8001ef0 <assert_failed>
 8010fc2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8010fc4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010fc6:	e776      	b.n	8010eb6 <UART_AdvFeatureConfig+0x82>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8010fc8:	f640 5124 	movw	r1, #3364	; 0xd24
 8010fcc:	4808      	ldr	r0, [pc, #32]	; (8010ff0 <UART_AdvFeatureConfig+0x1bc>)
 8010fce:	f7f0 ff8f 	bl	8001ef0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010fd2:	6822      	ldr	r2, [r4, #0]
 8010fd4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8010fd6:	6853      	ldr	r3, [r2, #4]
 8010fd8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010fdc:	430b      	orrs	r3, r1
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010fde:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010fe2:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010fe4:	d08e      	beq.n	8010f04 <UART_AdvFeatureConfig+0xd0>
 8010fe6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010fe8:	e79d      	b.n	8010f26 <UART_AdvFeatureConfig+0xf2>
 8010fea:	bf00      	nop
 8010fec:	40013800 	.word	0x40013800
 8010ff0:	080166b0 	.word	0x080166b0

08010ff4 <UART_WaitOnFlagUntilTimeout>:
{
 8010ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ff8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010ffc:	6805      	ldr	r5, [r0, #0]
 8010ffe:	4681      	mov	r9, r0
 8011000:	460f      	mov	r7, r1
 8011002:	4616      	mov	r6, r2
 8011004:	469a      	mov	sl, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011006:	e002      	b.n	801100e <UART_WaitOnFlagUntilTimeout+0x1a>
    if (Timeout != HAL_MAX_DELAY)
 8011008:	f1b8 3fff 	cmp.w	r8, #4294967295
 801100c:	d10a      	bne.n	8011024 <UART_WaitOnFlagUntilTimeout+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801100e:	69ec      	ldr	r4, [r5, #28]
 8011010:	ea37 0304 	bics.w	r3, r7, r4
 8011014:	bf0c      	ite	eq
 8011016:	2401      	moveq	r4, #1
 8011018:	2400      	movne	r4, #0
 801101a:	42b4      	cmp	r4, r6
 801101c:	d0f4      	beq.n	8011008 <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 801101e:	2000      	movs	r0, #0
}
 8011020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011024:	f7fc fa14 	bl	800d450 <HAL_GetTick>
 8011028:	eba0 000a 	sub.w	r0, r0, sl
 801102c:	4540      	cmp	r0, r8
 801102e:	d82d      	bhi.n	801108c <UART_WaitOnFlagUntilTimeout+0x98>
 8011030:	f1b8 0f00 	cmp.w	r8, #0
 8011034:	d02a      	beq.n	801108c <UART_WaitOnFlagUntilTimeout+0x98>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011036:	f8d9 5000 	ldr.w	r5, [r9]
 801103a:	682b      	ldr	r3, [r5, #0]
 801103c:	0759      	lsls	r1, r3, #29
 801103e:	462a      	mov	r2, r5
 8011040:	d5e5      	bpl.n	801100e <UART_WaitOnFlagUntilTimeout+0x1a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011042:	69eb      	ldr	r3, [r5, #28]
 8011044:	051b      	lsls	r3, r3, #20
 8011046:	d5e2      	bpl.n	801100e <UART_WaitOnFlagUntilTimeout+0x1a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011048:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801104c:	622b      	str	r3, [r5, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801104e:	e852 3f00 	ldrex	r3, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8011052:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011056:	e842 3100 	strex	r1, r3, [r2]
 801105a:	2900      	cmp	r1, #0
 801105c:	d1f7      	bne.n	801104e <UART_WaitOnFlagUntilTimeout+0x5a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801105e:	f102 0308 	add.w	r3, r2, #8
 8011062:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011066:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801106a:	f102 0008 	add.w	r0, r2, #8
 801106e:	e840 3100 	strex	r1, r3, [r0]
 8011072:	2900      	cmp	r1, #0
 8011074:	d1f3      	bne.n	801105e <UART_WaitOnFlagUntilTimeout+0x6a>
          huart->gState = HAL_UART_STATE_READY;
 8011076:	2320      	movs	r3, #32
 8011078:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84
          __HAL_UNLOCK(huart);
 801107c:	f889 1080 	strb.w	r1, [r9, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8011080:	f8c9 3088 	str.w	r3, [r9, #136]	; 0x88
          return HAL_TIMEOUT;
 8011084:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011086:	f8c9 308c 	str.w	r3, [r9, #140]	; 0x8c
          return HAL_TIMEOUT;
 801108a:	e7c9      	b.n	8011020 <UART_WaitOnFlagUntilTimeout+0x2c>
 801108c:	f8d9 2000 	ldr.w	r2, [r9]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011090:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8011094:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011098:	e842 3100 	strex	r1, r3, [r2]
 801109c:	2900      	cmp	r1, #0
 801109e:	d1f7      	bne.n	8011090 <UART_WaitOnFlagUntilTimeout+0x9c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110a0:	f102 0308 	add.w	r3, r2, #8
 80110a4:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80110a8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110ac:	f102 0008 	add.w	r0, r2, #8
 80110b0:	e840 3100 	strex	r1, r3, [r0]
 80110b4:	2900      	cmp	r1, #0
 80110b6:	d1f3      	bne.n	80110a0 <UART_WaitOnFlagUntilTimeout+0xac>
        huart->gState = HAL_UART_STATE_READY;
 80110b8:	2320      	movs	r3, #32
 80110ba:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84
        __HAL_UNLOCK(huart);
 80110be:	f889 1080 	strb.w	r1, [r9, #128]	; 0x80
        return HAL_TIMEOUT;
 80110c2:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 80110c4:	f8c9 3088 	str.w	r3, [r9, #136]	; 0x88
        return HAL_TIMEOUT;
 80110c8:	e7aa      	b.n	8011020 <UART_WaitOnFlagUntilTimeout+0x2c>
 80110ca:	bf00      	nop

080110cc <HAL_UART_Receive>:
{
 80110cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80110d0:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 80110d2:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 80110d6:	2820      	cmp	r0, #32
{
 80110d8:	b083      	sub	sp, #12
  if (huart->RxState == HAL_UART_STATE_READY)
 80110da:	d153      	bne.n	8011184 <HAL_UART_Receive+0xb8>
    if ((pData == NULL) || (Size == 0U))
 80110dc:	460d      	mov	r5, r1
 80110de:	2900      	cmp	r1, #0
 80110e0:	d04c      	beq.n	801117c <HAL_UART_Receive+0xb0>
 80110e2:	4617      	mov	r7, r2
 80110e4:	2a00      	cmp	r2, #0
 80110e6:	d049      	beq.n	801117c <HAL_UART_Receive+0xb0>
 80110e8:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 80110ea:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 80110ee:	2b01      	cmp	r3, #1
 80110f0:	d048      	beq.n	8011184 <HAL_UART_Receive+0xb8>
 80110f2:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80110f4:	f04f 0800 	mov.w	r8, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80110f8:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80110fa:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
    __HAL_LOCK(huart);
 80110fe:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011102:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011106:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
    tickstart = HAL_GetTick();
 801110a:	f7fc f9a1 	bl	800d450 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 801110e:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize  = Size;
 8011110:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
    UART_MASK_COMPUTATION(huart);
 8011114:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8011118:	4681      	mov	r9, r0
    huart->RxXferCount = Size;
 801111a:	f8a4 705e 	strh.w	r7, [r4, #94]	; 0x5e
    UART_MASK_COMPUTATION(huart);
 801111e:	d035      	beq.n	801118c <HAL_UART_Receive+0xc0>
 8011120:	2a00      	cmp	r2, #0
 8011122:	d147      	bne.n	80111b4 <HAL_UART_Receive+0xe8>
 8011124:	6923      	ldr	r3, [r4, #16]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d04f      	beq.n	80111ca <HAL_UART_Receive+0xfe>
 801112a:	277f      	movs	r7, #127	; 0x7f
 801112c:	f8a4 7060 	strh.w	r7, [r4, #96]	; 0x60
      pdata16bits = NULL;
 8011130:	f04f 0800 	mov.w	r8, #0
    while (huart->RxXferCount > 0U)
 8011134:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
    __HAL_UNLOCK(huart);
 8011138:	2200      	movs	r2, #0
    while (huart->RxXferCount > 0U)
 801113a:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 801113c:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    while (huart->RxXferCount > 0U)
 8011140:	b963      	cbnz	r3, 801115c <HAL_UART_Receive+0x90>
 8011142:	e02c      	b.n	801119e <HAL_UART_Receive+0xd2>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8011144:	f805 3b01 	strb.w	r3, [r5], #1
      huart->RxXferCount--;
 8011148:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 801114c:	3a01      	subs	r2, #1
 801114e:	b292      	uxth	r2, r2
 8011150:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8011154:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8011158:	b29b      	uxth	r3, r3
 801115a:	b303      	cbz	r3, 801119e <HAL_UART_Receive+0xd2>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801115c:	9600      	str	r6, [sp, #0]
 801115e:	464b      	mov	r3, r9
 8011160:	2200      	movs	r2, #0
 8011162:	2120      	movs	r1, #32
 8011164:	4620      	mov	r0, r4
 8011166:	f7ff ff45 	bl	8010ff4 <UART_WaitOnFlagUntilTimeout>
 801116a:	b9f8      	cbnz	r0, 80111ac <HAL_UART_Receive+0xe0>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 801116c:	6823      	ldr	r3, [r4, #0]
 801116e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011170:	403b      	ands	r3, r7
      if (pdata8bits == NULL)
 8011172:	2d00      	cmp	r5, #0
 8011174:	d1e6      	bne.n	8011144 <HAL_UART_Receive+0x78>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8011176:	f828 3b02 	strh.w	r3, [r8], #2
        pdata16bits++;
 801117a:	e7e5      	b.n	8011148 <HAL_UART_Receive+0x7c>
      return  HAL_ERROR;
 801117c:	2001      	movs	r0, #1
}
 801117e:	b003      	add	sp, #12
 8011180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8011184:	2002      	movs	r0, #2
}
 8011186:	b003      	add	sp, #12
 8011188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 801118c:	6923      	ldr	r3, [r4, #16]
 801118e:	b9c3      	cbnz	r3, 80111c2 <HAL_UART_Receive+0xf6>
 8011190:	f240 17ff 	movw	r7, #511	; 0x1ff
 8011194:	46a8      	mov	r8, r5
 8011196:	f8a4 7060 	strh.w	r7, [r4, #96]	; 0x60
      pdata8bits  = NULL;
 801119a:	461d      	mov	r5, r3
 801119c:	e7ca      	b.n	8011134 <HAL_UART_Receive+0x68>
    huart->RxState = HAL_UART_STATE_READY;
 801119e:	2320      	movs	r3, #32
    return HAL_OK;
 80111a0:	2000      	movs	r0, #0
    huart->RxState = HAL_UART_STATE_READY;
 80111a2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 80111a6:	b003      	add	sp, #12
 80111a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80111ac:	2003      	movs	r0, #3
}
 80111ae:	b003      	add	sp, #12
 80111b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 80111b4:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80111b8:	d00b      	beq.n	80111d2 <HAL_UART_Receive+0x106>
 80111ba:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
 80111be:	4647      	mov	r7, r8
 80111c0:	e7b6      	b.n	8011130 <HAL_UART_Receive+0x64>
 80111c2:	27ff      	movs	r7, #255	; 0xff
 80111c4:	f8a4 7060 	strh.w	r7, [r4, #96]	; 0x60
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80111c8:	e7b4      	b.n	8011134 <HAL_UART_Receive+0x68>
    UART_MASK_COMPUTATION(huart);
 80111ca:	27ff      	movs	r7, #255	; 0xff
 80111cc:	f8a4 7060 	strh.w	r7, [r4, #96]	; 0x60
 80111d0:	e7ae      	b.n	8011130 <HAL_UART_Receive+0x64>
 80111d2:	6923      	ldr	r3, [r4, #16]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d0a8      	beq.n	801112a <HAL_UART_Receive+0x5e>
 80111d8:	273f      	movs	r7, #63	; 0x3f
 80111da:	f8a4 7060 	strh.w	r7, [r4, #96]	; 0x60
 80111de:	e7a7      	b.n	8011130 <HAL_UART_Receive+0x64>

080111e0 <UART_CheckIdleState>:
{
 80111e0:	b570      	push	{r4, r5, r6, lr}
 80111e2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80111e4:	2600      	movs	r6, #0
{
 80111e6:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80111e8:	f8c0 608c 	str.w	r6, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 80111ec:	f7fc f930 	bl	800d450 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80111f0:	6823      	ldr	r3, [r4, #0]
 80111f2:	681a      	ldr	r2, [r3, #0]
 80111f4:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 80111f6:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80111f8:	d40e      	bmi.n	8011218 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	075b      	lsls	r3, r3, #29
 80111fe:	d41a      	bmi.n	8011236 <UART_CheckIdleState+0x56>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011200:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8011202:	2220      	movs	r2, #32
  return HAL_OK;
 8011204:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8011206:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 801120a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 801120e:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011212:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8011214:	b002      	add	sp, #8
 8011216:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011218:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801121c:	9300      	str	r3, [sp, #0]
 801121e:	4632      	mov	r2, r6
 8011220:	4603      	mov	r3, r0
 8011222:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011226:	4620      	mov	r0, r4
 8011228:	f7ff fee4 	bl	8010ff4 <UART_WaitOnFlagUntilTimeout>
 801122c:	b978      	cbnz	r0, 801124e <UART_CheckIdleState+0x6e>
 801122e:	6823      	ldr	r3, [r4, #0]
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	075b      	lsls	r3, r3, #29
 8011234:	d5e4      	bpl.n	8011200 <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011236:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 801123a:	9200      	str	r2, [sp, #0]
 801123c:	462b      	mov	r3, r5
 801123e:	2200      	movs	r2, #0
 8011240:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011244:	4620      	mov	r0, r4
 8011246:	f7ff fed5 	bl	8010ff4 <UART_WaitOnFlagUntilTimeout>
 801124a:	2800      	cmp	r0, #0
 801124c:	d0d8      	beq.n	8011200 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 801124e:	2003      	movs	r0, #3
}
 8011250:	b002      	add	sp, #8
 8011252:	bd70      	pop	{r4, r5, r6, pc}

08011254 <HAL_UART_Init>:
  if (huart == NULL)
 8011254:	2800      	cmp	r0, #0
 8011256:	d053      	beq.n	8011300 <HAL_UART_Init+0xac>
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8011258:	6983      	ldr	r3, [r0, #24]
{
 801125a:	b510      	push	{r4, lr}
 801125c:	4604      	mov	r4, r0
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 801125e:	2b00      	cmp	r3, #0
 8011260:	d031      	beq.n	80112c6 <HAL_UART_Init+0x72>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8011262:	6803      	ldr	r3, [r0, #0]
 8011264:	4a27      	ldr	r2, [pc, #156]	; (8011304 <HAL_UART_Init+0xb0>)
 8011266:	4293      	cmp	r3, r2
 8011268:	d008      	beq.n	801127c <HAL_UART_Init+0x28>
 801126a:	f5a2 4238 	sub.w	r2, r2, #47104	; 0xb800
 801126e:	4293      	cmp	r3, r2
 8011270:	d004      	beq.n	801127c <HAL_UART_Init+0x28>
 8011272:	4825      	ldr	r0, [pc, #148]	; (8011308 <HAL_UART_Init+0xb4>)
 8011274:	f240 113b 	movw	r1, #315	; 0x13b
 8011278:	f7f0 fe3a 	bl	8001ef0 <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 801127c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8011280:	2b00      	cmp	r3, #0
 8011282:	d031      	beq.n	80112e8 <HAL_UART_Init+0x94>
  __HAL_UART_DISABLE(huart);
 8011284:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8011286:	2324      	movs	r3, #36	; 0x24
 8011288:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 801128c:	6813      	ldr	r3, [r2, #0]
 801128e:	f023 0301 	bic.w	r3, r3, #1
 8011292:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011294:	4620      	mov	r0, r4
 8011296:	f7ff fc3b 	bl	8010b10 <UART_SetConfig>
 801129a:	2801      	cmp	r0, #1
 801129c:	d02a      	beq.n	80112f4 <HAL_UART_Init+0xa0>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801129e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80112a0:	bb53      	cbnz	r3, 80112f8 <HAL_UART_Init+0xa4>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80112a2:	6823      	ldr	r3, [r4, #0]
 80112a4:	685a      	ldr	r2, [r3, #4]
 80112a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80112aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80112ac:	689a      	ldr	r2, [r3, #8]
 80112ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80112b2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80112b4:	681a      	ldr	r2, [r3, #0]
 80112b6:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80112ba:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80112bc:	601a      	str	r2, [r3, #0]
}
 80112be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80112c2:	f7ff bf8d 	b.w	80111e0 <UART_CheckIdleState>
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 80112c6:	6803      	ldr	r3, [r0, #0]
 80112c8:	4a0e      	ldr	r2, [pc, #56]	; (8011304 <HAL_UART_Init+0xb0>)
 80112ca:	4293      	cmp	r3, r2
 80112cc:	d0d6      	beq.n	801127c <HAL_UART_Init+0x28>
 80112ce:	f5a2 4238 	sub.w	r2, r2, #47104	; 0xb800
 80112d2:	4293      	cmp	r3, r2
 80112d4:	d0d2      	beq.n	801127c <HAL_UART_Init+0x28>
 80112d6:	480c      	ldr	r0, [pc, #48]	; (8011308 <HAL_UART_Init+0xb4>)
 80112d8:	f240 1141 	movw	r1, #321	; 0x141
 80112dc:	f7f0 fe08 	bl	8001ef0 <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 80112e0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d1cd      	bne.n	8011284 <HAL_UART_Init+0x30>
    huart->Lock = HAL_UNLOCKED;
 80112e8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_UART_MspInit(huart);
 80112ec:	4620      	mov	r0, r4
 80112ee:	f7f0 fef1 	bl	80020d4 <HAL_UART_MspInit>
 80112f2:	e7c7      	b.n	8011284 <HAL_UART_Init+0x30>
}
 80112f4:	2001      	movs	r0, #1
 80112f6:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 80112f8:	4620      	mov	r0, r4
 80112fa:	f7ff fd9b 	bl	8010e34 <UART_AdvFeatureConfig>
 80112fe:	e7d0      	b.n	80112a2 <HAL_UART_Init+0x4e>
}
 8011300:	2001      	movs	r0, #1
 8011302:	4770      	bx	lr
 8011304:	40013800 	.word	0x40013800
 8011308:	080166b0 	.word	0x080166b0

0801130c <UARTEx_SetNbDataToProcess.part.0>:
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801130c:	6803      	ldr	r3, [r0, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801130e:	4a0c      	ldr	r2, [pc, #48]	; (8011340 <UARTEx_SetNbDataToProcess.part.0+0x34>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011310:	6899      	ldr	r1, [r3, #8]
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
 8011312:	b430      	push	{r4, r5}
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011314:	689c      	ldr	r4, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8011316:	4d0b      	ldr	r5, [pc, #44]	; (8011344 <UARTEx_SetNbDataToProcess.part.0+0x38>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011318:	f3c1 6142 	ubfx	r1, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801131c:	0f64      	lsrs	r4, r4, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801131e:	5c53      	ldrb	r3, [r2, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011320:	5d12      	ldrb	r2, [r2, r4]
                               (uint16_t)denominator[rx_fifo_threshold];
 8011322:	5c69      	ldrb	r1, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8011324:	5d2c      	ldrb	r4, [r5, r4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011326:	00d2      	lsls	r2, r2, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011328:	00db      	lsls	r3, r3, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801132a:	fbb2 f2f4 	udiv	r2, r2, r4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801132e:	fbb3 f3f1 	udiv	r3, r3, r1
  }
}
 8011332:	bc30      	pop	{r4, r5}
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011334:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011338:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 801133c:	4770      	bx	lr
 801133e:	bf00      	nop
 8011340:	080167b4 	.word	0x080167b4
 8011344:	080167ac 	.word	0x080167ac

08011348 <HAL_UARTEx_WakeupCallback>:
}
 8011348:	4770      	bx	lr
 801134a:	bf00      	nop

0801134c <HAL_UARTEx_RxFifoFullCallback>:
 801134c:	4770      	bx	lr
 801134e:	bf00      	nop

08011350 <HAL_UARTEx_TxFifoEmptyCallback>:
 8011350:	4770      	bx	lr
 8011352:	bf00      	nop

08011354 <HAL_UARTEx_DisableFifoMode>:
{
 8011354:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8011356:	4a14      	ldr	r2, [pc, #80]	; (80113a8 <HAL_UARTEx_DisableFifoMode+0x54>)
 8011358:	6803      	ldr	r3, [r0, #0]
 801135a:	4293      	cmp	r3, r2
{
 801135c:	4604      	mov	r4, r0
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 801135e:	d008      	beq.n	8011372 <HAL_UARTEx_DisableFifoMode+0x1e>
 8011360:	f5a2 4238 	sub.w	r2, r2, #47104	; 0xb800
 8011364:	4293      	cmp	r3, r2
 8011366:	d004      	beq.n	8011372 <HAL_UARTEx_DisableFifoMode+0x1e>
 8011368:	4810      	ldr	r0, [pc, #64]	; (80113ac <HAL_UARTEx_DisableFifoMode+0x58>)
 801136a:	f44f 710d 	mov.w	r1, #564	; 0x234
 801136e:	f7f0 fdbf 	bl	8001ef0 <assert_failed>
  __HAL_LOCK(huart);
 8011372:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8011376:	2b01      	cmp	r3, #1
 8011378:	d014      	beq.n	80113a4 <HAL_UARTEx_DisableFifoMode+0x50>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801137a:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 801137c:	2224      	movs	r2, #36	; 0x24
 801137e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011382:	6819      	ldr	r1, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8011384:	6818      	ldr	r0, [r3, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011386:	2200      	movs	r2, #0
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011388:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 801138c:	f020 0001 	bic.w	r0, r0, #1
 8011390:	6018      	str	r0, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8011392:	2520      	movs	r5, #32
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011394:	6662      	str	r2, [r4, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011396:	6019      	str	r1, [r3, #0]
  __HAL_UNLOCK(huart);
 8011398:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
  return HAL_OK;
 801139c:	4610      	mov	r0, r2
  huart->gState = HAL_UART_STATE_READY;
 801139e:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 80113a2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80113a4:	2002      	movs	r0, #2
}
 80113a6:	bd38      	pop	{r3, r4, r5, pc}
 80113a8:	40013800 	.word	0x40013800
 80113ac:	0801673c 	.word	0x0801673c

080113b0 <HAL_UARTEx_SetTxFifoThreshold>:
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 80113b0:	4a22      	ldr	r2, [pc, #136]	; (801143c <HAL_UARTEx_SetTxFifoThreshold+0x8c>)
 80113b2:	6803      	ldr	r3, [r0, #0]
 80113b4:	4293      	cmp	r3, r2
{
 80113b6:	b570      	push	{r4, r5, r6, lr}
 80113b8:	4604      	mov	r4, r0
 80113ba:	460d      	mov	r5, r1
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 80113bc:	d008      	beq.n	80113d0 <HAL_UARTEx_SetTxFifoThreshold+0x20>
 80113be:	f5a2 4238 	sub.w	r2, r2, #47104	; 0xb800
 80113c2:	4293      	cmp	r3, r2
 80113c4:	d004      	beq.n	80113d0 <HAL_UARTEx_SetTxFifoThreshold+0x20>
 80113c6:	481e      	ldr	r0, [pc, #120]	; (8011440 <HAL_UARTEx_SetTxFifoThreshold+0x90>)
 80113c8:	f240 2162 	movw	r1, #610	; 0x262
 80113cc:	f7f0 fd90 	bl	8001ef0 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 80113d0:	f035 42c0 	bics.w	r2, r5, #1610612736	; 0x60000000
 80113d4:	f025 5300 	bic.w	r3, r5, #536870912	; 0x20000000
 80113d8:	d007      	beq.n	80113ea <HAL_UARTEx_SetTxFifoThreshold+0x3a>
 80113da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80113de:	d004      	beq.n	80113ea <HAL_UARTEx_SetTxFifoThreshold+0x3a>
 80113e0:	4817      	ldr	r0, [pc, #92]	; (8011440 <HAL_UARTEx_SetTxFifoThreshold+0x90>)
 80113e2:	f240 2163 	movw	r1, #611	; 0x263
 80113e6:	f7f0 fd83 	bl	8001ef0 <assert_failed>
  __HAL_LOCK(huart);
 80113ea:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 80113ee:	2b01      	cmp	r3, #1
 80113f0:	d022      	beq.n	8011438 <HAL_UARTEx_SetTxFifoThreshold+0x88>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80113f2:	6823      	ldr	r3, [r4, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80113f4:	6e60      	ldr	r0, [r4, #100]	; 0x64
  __HAL_LOCK(huart);
 80113f6:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80113f8:	2224      	movs	r2, #36	; 0x24
  __HAL_LOCK(huart);
 80113fa:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80113fe:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011402:	681e      	ldr	r6, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8011404:	681a      	ldr	r2, [r3, #0]
 8011406:	f022 0201 	bic.w	r2, r2, #1
 801140a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801140c:	6899      	ldr	r1, [r3, #8]
 801140e:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8011412:	430d      	orrs	r5, r1
 8011414:	609d      	str	r5, [r3, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011416:	b158      	cbz	r0, 8011430 <HAL_UARTEx_SetTxFifoThreshold+0x80>
 8011418:	4620      	mov	r0, r4
 801141a:	f7ff ff77 	bl	801130c <UARTEx_SetNbDataToProcess.part.0>
 801141e:	6823      	ldr	r3, [r4, #0]
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011420:	601e      	str	r6, [r3, #0]
  __HAL_UNLOCK(huart);
 8011422:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8011424:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8011426:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 801142a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 801142e:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 8011430:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8011434:	66a2      	str	r2, [r4, #104]	; 0x68
 8011436:	e7f3      	b.n	8011420 <HAL_UARTEx_SetTxFifoThreshold+0x70>
  __HAL_LOCK(huart);
 8011438:	2002      	movs	r0, #2
}
 801143a:	bd70      	pop	{r4, r5, r6, pc}
 801143c:	40013800 	.word	0x40013800
 8011440:	0801673c 	.word	0x0801673c

08011444 <HAL_UARTEx_SetRxFifoThreshold>:
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8011444:	4a22      	ldr	r2, [pc, #136]	; (80114d0 <HAL_UARTEx_SetRxFifoThreshold+0x8c>)
 8011446:	6803      	ldr	r3, [r0, #0]
 8011448:	4293      	cmp	r3, r2
{
 801144a:	b570      	push	{r4, r5, r6, lr}
 801144c:	4604      	mov	r4, r0
 801144e:	460d      	mov	r5, r1
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8011450:	d008      	beq.n	8011464 <HAL_UARTEx_SetRxFifoThreshold+0x20>
 8011452:	f5a2 4238 	sub.w	r2, r2, #47104	; 0xb800
 8011456:	4293      	cmp	r3, r2
 8011458:	d004      	beq.n	8011464 <HAL_UARTEx_SetRxFifoThreshold+0x20>
 801145a:	481e      	ldr	r0, [pc, #120]	; (80114d4 <HAL_UARTEx_SetRxFifoThreshold+0x90>)
 801145c:	f240 2193 	movw	r1, #659	; 0x293
 8011460:	f7f0 fd46 	bl	8001ef0 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 8011464:	f035 62c0 	bics.w	r2, r5, #100663296	; 0x6000000
 8011468:	f025 7300 	bic.w	r3, r5, #33554432	; 0x2000000
 801146c:	d007      	beq.n	801147e <HAL_UARTEx_SetRxFifoThreshold+0x3a>
 801146e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011472:	d004      	beq.n	801147e <HAL_UARTEx_SetRxFifoThreshold+0x3a>
 8011474:	4817      	ldr	r0, [pc, #92]	; (80114d4 <HAL_UARTEx_SetRxFifoThreshold+0x90>)
 8011476:	f44f 7125 	mov.w	r1, #660	; 0x294
 801147a:	f7f0 fd39 	bl	8001ef0 <assert_failed>
  __HAL_LOCK(huart);
 801147e:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8011482:	2b01      	cmp	r3, #1
 8011484:	d022      	beq.n	80114cc <HAL_UARTEx_SetRxFifoThreshold+0x88>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011486:	6823      	ldr	r3, [r4, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011488:	6e60      	ldr	r0, [r4, #100]	; 0x64
  __HAL_LOCK(huart);
 801148a:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 801148c:	2224      	movs	r2, #36	; 0x24
  __HAL_LOCK(huart);
 801148e:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8011492:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011496:	681e      	ldr	r6, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8011498:	681a      	ldr	r2, [r3, #0]
 801149a:	f022 0201 	bic.w	r2, r2, #1
 801149e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80114a0:	6899      	ldr	r1, [r3, #8]
 80114a2:	f021 6160 	bic.w	r1, r1, #234881024	; 0xe000000
 80114a6:	430d      	orrs	r5, r1
 80114a8:	609d      	str	r5, [r3, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80114aa:	b158      	cbz	r0, 80114c4 <HAL_UARTEx_SetRxFifoThreshold+0x80>
 80114ac:	4620      	mov	r0, r4
 80114ae:	f7ff ff2d 	bl	801130c <UARTEx_SetNbDataToProcess.part.0>
 80114b2:	6823      	ldr	r3, [r4, #0]
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80114b4:	601e      	str	r6, [r3, #0]
  __HAL_UNLOCK(huart);
 80114b6:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80114b8:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80114ba:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 80114be:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 80114c2:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 80114c4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80114c8:	66a2      	str	r2, [r4, #104]	; 0x68
 80114ca:	e7f3      	b.n	80114b4 <HAL_UARTEx_SetRxFifoThreshold+0x70>
  __HAL_LOCK(huart);
 80114cc:	2002      	movs	r0, #2
}
 80114ce:	bd70      	pop	{r4, r5, r6, pc}
 80114d0:	40013800 	.word	0x40013800
 80114d4:	0801673c 	.word	0x0801673c

080114d8 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80114d8:	b510      	push	{r4, lr}
  struct hci_request rq;
  tBleStatus status = 0;
 80114da:	2400      	movs	r4, #0
{
 80114dc:	b088      	sub	sp, #32
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80114de:	4621      	mov	r1, r4
 80114e0:	a802      	add	r0, sp, #8
 80114e2:	2218      	movs	r2, #24
  tBleStatus status = 0;
 80114e4:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80114e8:	f000 fd80 	bl	8011fec <Osal_MemSet>
  rq.ogf = 0x3f;
 80114ec:	4b08      	ldr	r3, [pc, #32]	; (8011510 <aci_gap_set_non_discoverable+0x38>)
 80114ee:	9302      	str	r3, [sp, #8]
  rq.ocf = 0x081;
  rq.rparam = &status;
 80114f0:	f10d 0207 	add.w	r2, sp, #7
  rq.rlen = 1;
 80114f4:	2301      	movs	r3, #1
  if ( hci_send_req(&rq, FALSE) < 0 )
 80114f6:	4621      	mov	r1, r4
 80114f8:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 80114fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80114fe:	f000 fcdb 	bl	8011eb8 <hci_send_req>
 8011502:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  return status;
 8011504:	bfac      	ite	ge
 8011506:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 801150a:	20ff      	movlt	r0, #255	; 0xff
}
 801150c:	b008      	add	sp, #32
 801150e:	bd10      	pop	{r4, pc}
 8011510:	0081003f 	.word	0x0081003f

08011514 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8011514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011518:	b0cb      	sub	sp, #300	; 0x12c
 801151a:	4696      	mov	lr, r2
 801151c:	f89d 915c 	ldrb.w	r9, [sp, #348]	; 0x15c
 8011520:	f89d 6154 	ldrb.w	r6, [sp, #340]	; 0x154
 8011524:	f89d c150 	ldrb.w	ip, [sp, #336]	; 0x150
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
  tBleStatus status = 0;
  int index_input = 0;
  cp0->Advertising_Type = Advertising_Type;
 8011528:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 801152c:	ac0a      	add	r4, sp, #40	; 0x28
  index_input += 1;
  cp0->Local_Name_Length = Local_Name_Length;
  index_input += 1;
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 801152e:	4632      	mov	r2, r6
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8011530:	f106 0808 	add.w	r8, r6, #8
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8011534:	f109 0509 	add.w	r5, r9, #9
 8011538:	4435      	add	r5, r6
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 801153a:	f8ad 1029 	strh.w	r1, [sp, #41]	; 0x29
  tBleStatus status = 0;
 801153e:	2600      	movs	r6, #0
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8011540:	9956      	ldr	r1, [sp, #344]	; 0x158
  cp0->Own_Address_Type = Own_Address_Type;
 8011542:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8011546:	a80c      	add	r0, sp, #48	; 0x30
    index_input += Local_Name_Length;
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
    }
    index_input += 1;
 8011548:	f102 0309 	add.w	r3, r2, #9
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 801154c:	f8ad e02b 	strh.w	lr, [sp, #43]	; 0x2b
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8011550:	f88d c02e 	strb.w	ip, [sp, #46]	; 0x2e
{
 8011554:	f8bd a164 	ldrh.w	sl, [sp, #356]	; 0x164
 8011558:	f8bd b168 	ldrh.w	fp, [sp, #360]	; 0x168
  cp0->Local_Name_Length = Local_Name_Length;
 801155c:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
    index_input += 1;
 8011560:	9301      	str	r3, [sp, #4]
  tBleStatus status = 0;
 8011562:	f88d 600f 	strb.w	r6, [sp, #15]
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8011566:	f000 fd3f 	bl	8011fe8 <Osal_MemCpy>
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
    index_input += Service_Uuid_length;
 801156a:	9b01      	ldr	r3, [sp, #4]
      cp1->Service_Uuid_length = Service_Uuid_length;
 801156c:	f804 9008 	strb.w	r9, [r4, r8]
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8011570:	464a      	mov	r2, r9
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8011572:	eb04 0008 	add.w	r0, r4, r8
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8011576:	eb04 0905 	add.w	r9, r4, r5
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 801157a:	9958      	ldr	r1, [sp, #352]	; 0x160
 801157c:	3001      	adds	r0, #1
    index_input += Service_Uuid_length;
 801157e:	eb02 0803 	add.w	r8, r2, r3
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8011582:	f000 fd31 	bl	8011fe8 <Osal_MemCpy>
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8011586:	f824 a005 	strh.w	sl, [r4, r5]
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
    }
    index_input += 2;
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801158a:	4631      	mov	r1, r6
 801158c:	a804      	add	r0, sp, #16
 801158e:	2218      	movs	r2, #24
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8011590:	f8a9 b002 	strh.w	fp, [r9, #2]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011594:	f000 fd2a 	bl	8011fec <Osal_MemSet>
  tBleStatus status = 0;
 8011598:	f10d 070f 	add.w	r7, sp, #15
    index_input += 2;
 801159c:	f108 0304 	add.w	r3, r8, #4
  rq.ogf = 0x3f;
  rq.ocf = 0x083;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 80115a0:	2201      	movs	r2, #1
  rq.ogf = 0x3f;
 80115a2:	4d08      	ldr	r5, [pc, #32]	; (80115c4 <aci_gap_set_discoverable+0xb0>)
  rq.cparam = cmd_buffer;
 80115a4:	9406      	str	r4, [sp, #24]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80115a6:	4631      	mov	r1, r6
 80115a8:	a804      	add	r0, sp, #16
  rq.rparam = &status;
 80115aa:	e9cd 3707 	strd	r3, r7, [sp, #28]
  rq.ogf = 0x3f;
 80115ae:	9504      	str	r5, [sp, #16]
  rq.rlen = 1;
 80115b0:	9209      	str	r2, [sp, #36]	; 0x24
  if ( hci_send_req(&rq, FALSE) < 0 )
 80115b2:	f000 fc81 	bl	8011eb8 <hci_send_req>
 80115b6:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  return status;
 80115b8:	bfac      	ite	ge
 80115ba:	7838      	ldrbge	r0, [r7, #0]
    return BLE_STATUS_TIMEOUT;
 80115bc:	20ff      	movlt	r0, #255	; 0xff
}
 80115be:	b04b      	add	sp, #300	; 0x12c
 80115c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115c4:	0083003f 	.word	0x0083003f

080115c8 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80115c8:	b570      	push	{r4, r5, r6, lr}
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 80115ca:	2400      	movs	r4, #0
{
 80115cc:	b0c8      	sub	sp, #288	; 0x120
 80115ce:	4603      	mov	r3, r0
  int index_input = 0;
  cp0->IO_Capability = IO_Capability;
  index_input += 1;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80115d0:	4621      	mov	r1, r4
 80115d2:	a802      	add	r0, sp, #8
 80115d4:	2218      	movs	r2, #24
  tBleStatus status = 0;
 80115d6:	f10d 0507 	add.w	r5, sp, #7
  cp0->IO_Capability = IO_Capability;
 80115da:	f88d 3020 	strb.w	r3, [sp, #32]
 80115de:	ae08      	add	r6, sp, #32
  tBleStatus status = 0;
 80115e0:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80115e4:	f000 fd02 	bl	8011fec <Osal_MemSet>
  rq.ogf = 0x3f;
  rq.ocf = 0x085;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 80115e8:	2301      	movs	r3, #1
  rq.ogf = 0x3f;
 80115ea:	4a08      	ldr	r2, [pc, #32]	; (801160c <aci_gap_set_io_capability+0x44>)
  rq.cparam = cmd_buffer;
 80115ec:	9604      	str	r6, [sp, #16]
  rq.rparam = &status;
  rq.rlen = 1;
  if ( hci_send_req(&rq, FALSE) < 0 )
 80115ee:	4621      	mov	r1, r4
 80115f0:	a802      	add	r0, sp, #8
  rq.rparam = &status;
 80115f2:	9506      	str	r5, [sp, #24]
  rq.ogf = 0x3f;
 80115f4:	9202      	str	r2, [sp, #8]
  rq.clen = index_input;
 80115f6:	9305      	str	r3, [sp, #20]
  rq.rlen = 1;
 80115f8:	9307      	str	r3, [sp, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80115fa:	f000 fc5d 	bl	8011eb8 <hci_send_req>
 80115fe:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  return status;
 8011600:	bfac      	ite	ge
 8011602:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 8011604:	20ff      	movlt	r0, #255	; 0xff
}
 8011606:	b048      	add	sp, #288	; 0x120
 8011608:	bd70      	pop	{r4, r5, r6, pc}
 801160a:	bf00      	nop
 801160c:	0085003f 	.word	0x0085003f

08011610 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8011610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011612:	b0c9      	sub	sp, #292	; 0x124
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8011614:	2500      	movs	r5, #0
  int index_input = 0;
  cp0->Bonding_Mode = Bonding_Mode;
 8011616:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  cp0->MITM_Mode = MITM_Mode;
 801161a:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
{
 801161e:	f89d 0140 	ldrb.w	r0, [sp, #320]	; 0x140
 8011622:	f89d 113c 	ldrb.w	r1, [sp, #316]	; 0x13c
  index_input += 1;
  cp0->SC_Support = SC_Support;
 8011626:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
{
 801162a:	9a51      	ldr	r2, [sp, #324]	; 0x144
 801162c:	f89d 7138 	ldrb.w	r7, [sp, #312]	; 0x138
  index_input += 1;
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8011630:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
  index_input += 1;
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
  index_input += 1;
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8011634:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
{
 8011638:	f89d 3148 	ldrb.w	r3, [sp, #328]	; 0x148
  index_input += 1;
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 801163c:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
  index_input += 1;
  cp0->Fixed_Pin = Fixed_Pin;
  index_input += 4;
  cp0->Identity_Address_Type = Identity_Address_Type;
  index_input += 1;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011640:	4629      	mov	r1, r5
  cp0->Fixed_Pin = Fixed_Pin;
 8011642:	f8cd 2027 	str.w	r2, [sp, #39]	; 0x27
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011646:	a802      	add	r0, sp, #8
 8011648:	2218      	movs	r2, #24
  tBleStatus status = 0;
 801164a:	f10d 0607 	add.w	r6, sp, #7
  cp0->Identity_Address_Type = Identity_Address_Type;
 801164e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
  tBleStatus status = 0;
 8011652:	f88d 5007 	strb.w	r5, [sp, #7]
  cp0->Bonding_Mode = Bonding_Mode;
 8011656:	ac08      	add	r4, sp, #32
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8011658:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801165c:	f000 fcc6 	bl	8011fec <Osal_MemSet>
  rq.ocf = 0x086;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011660:	4629      	mov	r1, r5
  rq.clen = index_input;
 8011662:	220c      	movs	r2, #12
  rq.rlen = 1;
 8011664:	2301      	movs	r3, #1
  rq.ogf = 0x3f;
 8011666:	4d07      	ldr	r5, [pc, #28]	; (8011684 <aci_gap_set_authentication_requirement+0x74>)
  rq.cparam = cmd_buffer;
 8011668:	9404      	str	r4, [sp, #16]
  if ( hci_send_req(&rq, FALSE) < 0 )
 801166a:	a802      	add	r0, sp, #8
  rq.rparam = &status;
 801166c:	9606      	str	r6, [sp, #24]
  rq.ogf = 0x3f;
 801166e:	9502      	str	r5, [sp, #8]
  rq.clen = index_input;
 8011670:	9205      	str	r2, [sp, #20]
  rq.rlen = 1;
 8011672:	9307      	str	r3, [sp, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011674:	f000 fc20 	bl	8011eb8 <hci_send_req>
 8011678:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  return status;
 801167a:	bfac      	ite	ge
 801167c:	7830      	ldrbge	r0, [r6, #0]
    return BLE_STATUS_TIMEOUT;
 801167e:	20ff      	movlt	r0, #255	; 0xff
}
 8011680:	b049      	add	sp, #292	; 0x124
 8011682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011684:	0086003f 	.word	0x0086003f

08011688 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8011688:	b570      	push	{r4, r5, r6, lr}
 801168a:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 801168c:	2500      	movs	r5, #0
{
 801168e:	4602      	mov	r2, r0
 8011690:	460b      	mov	r3, r1
  int index_input = 0;
  cp0->Connection_Handle = Connection_Handle;
 8011692:	f8ad 2020 	strh.w	r2, [sp, #32]
  index_input += 2;
  cp0->Pass_Key = Pass_Key;
  index_input += 4;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011696:	4629      	mov	r1, r5
 8011698:	a802      	add	r0, sp, #8
 801169a:	2218      	movs	r2, #24
  tBleStatus status = 0;
 801169c:	f10d 0607 	add.w	r6, sp, #7
  cp0->Pass_Key = Pass_Key;
 80116a0:	f8cd 3022 	str.w	r3, [sp, #34]	; 0x22
  tBleStatus status = 0;
 80116a4:	f88d 5007 	strb.w	r5, [sp, #7]
  cp0->Connection_Handle = Connection_Handle;
 80116a8:	ac08      	add	r4, sp, #32
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80116aa:	f000 fc9f 	bl	8011fec <Osal_MemSet>
  rq.ocf = 0x088;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
  if ( hci_send_req(&rq, FALSE) < 0 )
 80116ae:	4629      	mov	r1, r5
  rq.clen = index_input;
 80116b0:	2206      	movs	r2, #6
  rq.rlen = 1;
 80116b2:	2301      	movs	r3, #1
  rq.ogf = 0x3f;
 80116b4:	4d07      	ldr	r5, [pc, #28]	; (80116d4 <aci_gap_pass_key_resp+0x4c>)
  rq.cparam = cmd_buffer;
 80116b6:	9404      	str	r4, [sp, #16]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80116b8:	a802      	add	r0, sp, #8
  rq.rparam = &status;
 80116ba:	9606      	str	r6, [sp, #24]
  rq.ogf = 0x3f;
 80116bc:	9502      	str	r5, [sp, #8]
  rq.clen = index_input;
 80116be:	9205      	str	r2, [sp, #20]
  rq.rlen = 1;
 80116c0:	9307      	str	r3, [sp, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80116c2:	f000 fbf9 	bl	8011eb8 <hci_send_req>
 80116c6:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  return status;
 80116c8:	bfac      	ite	ge
 80116ca:	7830      	ldrbge	r0, [r6, #0]
    return BLE_STATUS_TIMEOUT;
 80116cc:	20ff      	movlt	r0, #255	; 0xff
}
 80116ce:	b048      	add	sp, #288	; 0x120
 80116d0:	bd70      	pop	{r4, r5, r6, pc}
 80116d2:	bf00      	nop
 80116d4:	0088003f 	.word	0x0088003f

080116d8 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80116d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116dc:	b0c8      	sub	sp, #288	; 0x120
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
  int index_input = 0;
  cp0->Role = Role;
 80116de:	ac08      	add	r4, sp, #32
{
 80116e0:	4615      	mov	r5, r2
 80116e2:	4607      	mov	r7, r0
 80116e4:	460e      	mov	r6, r1
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80116e6:	2207      	movs	r2, #7
 80116e8:	2100      	movs	r1, #0
 80116ea:	4668      	mov	r0, sp
{
 80116ec:	4698      	mov	r8, r3
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80116ee:	f000 fc7d 	bl	8011fec <Osal_MemSet>
  index_input += 1;
  cp0->privacy_enabled = privacy_enabled;
  index_input += 1;
  cp0->device_name_char_len = device_name_char_len;
  index_input += 1;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80116f2:	2218      	movs	r2, #24
 80116f4:	2100      	movs	r1, #0
  cp0->device_name_char_len = device_name_char_len;
 80116f6:	70a5      	strb	r5, [r4, #2]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80116f8:	a802      	add	r0, sp, #8
  cp0->Role = Role;
 80116fa:	7027      	strb	r7, [r4, #0]
  cp0->privacy_enabled = privacy_enabled;
 80116fc:	7066      	strb	r6, [r4, #1]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80116fe:	f000 fc75 	bl	8011fec <Osal_MemSet>
  rq.ogf = 0x3f;
 8011702:	4d15      	ldr	r5, [pc, #84]	; (8011758 <aci_gap_init+0x80>)
  rq.ocf = 0x08a;
  rq.cparam = cmd_buffer;
 8011704:	9404      	str	r4, [sp, #16]
  rq.clen = index_input;
 8011706:	2203      	movs	r2, #3
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
 8011708:	2307      	movs	r3, #7
  if ( hci_send_req(&rq, FALSE) < 0 )
 801170a:	a802      	add	r0, sp, #8
 801170c:	2100      	movs	r1, #0
  rq.rparam = &resp;
 801170e:	f8cd d018 	str.w	sp, [sp, #24]
  rq.ogf = 0x3f;
 8011712:	9502      	str	r5, [sp, #8]
  rq.clen = index_input;
 8011714:	9205      	str	r2, [sp, #20]
  rq.rlen = sizeof(resp);
 8011716:	9307      	str	r3, [sp, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011718:	f000 fbce 	bl	8011eb8 <hci_send_req>
 801171c:	2800      	cmp	r0, #0
 801171e:	db17      	blt.n	8011750 <aci_gap_init+0x78>
    return BLE_STATUS_TIMEOUT;
  if ( resp.Status )
 8011720:	f89d 0000 	ldrb.w	r0, [sp]
 8011724:	b988      	cbnz	r0, 801174a <aci_gap_init+0x72>
    return resp.Status;
  *Service_Handle = resp.Service_Handle;
 8011726:	9900      	ldr	r1, [sp, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8011728:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801172c:	f89d 4004 	ldrb.w	r4, [sp, #4]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8011730:	9b01      	ldr	r3, [sp, #4]
  *Service_Handle = resp.Service_Handle;
 8011732:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8011736:	f8a8 1000 	strh.w	r1, [r8]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 801173a:	994e      	ldr	r1, [sp, #312]	; 0x138
 801173c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8011740:	800a      	strh	r2, [r1, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8011742:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
 8011744:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8011748:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 801174a:	b048      	add	sp, #288	; 0x120
 801174c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 8011750:	20ff      	movs	r0, #255	; 0xff
}
 8011752:	b048      	add	sp, #288	; 0x120
 8011754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011758:	008a003f 	.word	0x008a003f

0801175c <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 801175c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801175e:	b0c9      	sub	sp, #292	; 0x124
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8011760:	2500      	movs	r5, #0
{
 8011762:	4604      	mov	r4, r0
  int index_input = 0;
  cp0->AdvDataLen = AdvDataLen;
  index_input += 1;
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8011764:	4602      	mov	r2, r0
 8011766:	f10d 0021 	add.w	r0, sp, #33	; 0x21
  cp0->AdvDataLen = AdvDataLen;
 801176a:	f88d 4020 	strb.w	r4, [sp, #32]
  tBleStatus status = 0;
 801176e:	f88d 5007 	strb.w	r5, [sp, #7]
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8011772:	f000 fc39 	bl	8011fe8 <Osal_MemCpy>
  index_input += AdvDataLen;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011776:	4629      	mov	r1, r5
 8011778:	a802      	add	r0, sp, #8
 801177a:	2218      	movs	r2, #24
 801177c:	f000 fc36 	bl	8011fec <Osal_MemSet>
  tBleStatus status = 0;
 8011780:	f10d 0607 	add.w	r6, sp, #7
  rq.ogf = 0x3f;
 8011784:	4a09      	ldr	r2, [pc, #36]	; (80117ac <aci_gap_update_adv_data+0x50>)
 8011786:	9202      	str	r2, [sp, #8]
  rq.ocf = 0x08e;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 8011788:	2301      	movs	r3, #1
  cp0->AdvDataLen = AdvDataLen;
 801178a:	af08      	add	r7, sp, #32
  index_input += AdvDataLen;
 801178c:	3401      	adds	r4, #1
  if ( hci_send_req(&rq, FALSE) < 0 )
 801178e:	4629      	mov	r1, r5
 8011790:	a802      	add	r0, sp, #8
  rq.rparam = &status;
 8011792:	e9cd 4605 	strd	r4, r6, [sp, #20]
  rq.cparam = cmd_buffer;
 8011796:	9704      	str	r7, [sp, #16]
  rq.rlen = 1;
 8011798:	9307      	str	r3, [sp, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 801179a:	f000 fb8d 	bl	8011eb8 <hci_send_req>
 801179e:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  return status;
 80117a0:	bfac      	ite	ge
 80117a2:	7830      	ldrbge	r0, [r6, #0]
    return BLE_STATUS_TIMEOUT;
 80117a4:	20ff      	movlt	r0, #255	; 0xff
}
 80117a6:	b049      	add	sp, #292	; 0x124
 80117a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117aa:	bf00      	nop
 80117ac:	008e003f 	.word	0x008e003f

080117b0 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 80117b0:	b510      	push	{r4, lr}
  struct hci_request rq;
  tBleStatus status = 0;
 80117b2:	2400      	movs	r4, #0
{
 80117b4:	b088      	sub	sp, #32
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80117b6:	4621      	mov	r1, r4
 80117b8:	a802      	add	r0, sp, #8
 80117ba:	2218      	movs	r2, #24
  tBleStatus status = 0;
 80117bc:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80117c0:	f000 fc14 	bl	8011fec <Osal_MemSet>
  rq.ogf = 0x3f;
 80117c4:	4b08      	ldr	r3, [pc, #32]	; (80117e8 <aci_gap_configure_whitelist+0x38>)
 80117c6:	9302      	str	r3, [sp, #8]
  rq.ocf = 0x092;
  rq.rparam = &status;
 80117c8:	f10d 0207 	add.w	r2, sp, #7
  rq.rlen = 1;
 80117cc:	2301      	movs	r3, #1
  if ( hci_send_req(&rq, FALSE) < 0 )
 80117ce:	4621      	mov	r1, r4
 80117d0:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 80117d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80117d6:	f000 fb6f 	bl	8011eb8 <hci_send_req>
 80117da:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  return status;
 80117dc:	bfac      	ite	ge
 80117de:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 80117e2:	20ff      	movlt	r0, #255	; 0xff
}
 80117e4:	b008      	add	sp, #32
 80117e6:	bd10      	pop	{r4, pc}
 80117e8:	0092003f 	.word	0x0092003f

080117ec <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 80117ec:	b570      	push	{r4, r5, r6, lr}
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 80117ee:	2400      	movs	r4, #0
{
 80117f0:	b0c8      	sub	sp, #288	; 0x120
 80117f2:	4603      	mov	r3, r0
  int index_input = 0;
  cp0->Connection_Handle = Connection_Handle;
  index_input += 2;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80117f4:	4621      	mov	r1, r4
 80117f6:	a802      	add	r0, sp, #8
 80117f8:	2218      	movs	r2, #24
  tBleStatus status = 0;
 80117fa:	f10d 0507 	add.w	r5, sp, #7
  cp0->Connection_Handle = Connection_Handle;
 80117fe:	f8ad 3020 	strh.w	r3, [sp, #32]
  tBleStatus status = 0;
 8011802:	f88d 4007 	strb.w	r4, [sp, #7]
  cp0->Connection_Handle = Connection_Handle;
 8011806:	ae08      	add	r6, sp, #32
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011808:	f000 fbf0 	bl	8011fec <Osal_MemSet>
  rq.ocf = 0x095;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
  if ( hci_send_req(&rq, FALSE) < 0 )
 801180c:	4621      	mov	r1, r4
  rq.clen = index_input;
 801180e:	2202      	movs	r2, #2
  rq.rlen = 1;
 8011810:	2301      	movs	r3, #1
  rq.ogf = 0x3f;
 8011812:	4c07      	ldr	r4, [pc, #28]	; (8011830 <aci_gap_allow_rebond+0x44>)
  rq.cparam = cmd_buffer;
 8011814:	9604      	str	r6, [sp, #16]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011816:	a802      	add	r0, sp, #8
  rq.rparam = &status;
 8011818:	9506      	str	r5, [sp, #24]
  rq.ogf = 0x3f;
 801181a:	9402      	str	r4, [sp, #8]
  rq.clen = index_input;
 801181c:	9205      	str	r2, [sp, #20]
  rq.rlen = 1;
 801181e:	9307      	str	r3, [sp, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011820:	f000 fb4a 	bl	8011eb8 <hci_send_req>
 8011824:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  return status;
 8011826:	bfac      	ite	ge
 8011828:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 801182a:	20ff      	movlt	r0, #255	; 0xff
}
 801182c:	b048      	add	sp, #288	; 0x120
 801182e:	bd70      	pop	{r4, r5, r6, pc}
 8011830:	0095003f 	.word	0x0095003f

08011834 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8011834:	b570      	push	{r4, r5, r6, lr}
 8011836:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8011838:	2500      	movs	r5, #0
{
 801183a:	4602      	mov	r2, r0
 801183c:	460b      	mov	r3, r1
  int index_input = 0;
  cp0->Connection_Handle = Connection_Handle;
 801183e:	f8ad 2020 	strh.w	r2, [sp, #32]
  index_input += 2;
  cp0->Confirm_Yes_No = Confirm_Yes_No;
  index_input += 1;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011842:	4629      	mov	r1, r5
 8011844:	a802      	add	r0, sp, #8
 8011846:	2218      	movs	r2, #24
  tBleStatus status = 0;
 8011848:	f10d 0607 	add.w	r6, sp, #7
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 801184c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
  tBleStatus status = 0;
 8011850:	f88d 5007 	strb.w	r5, [sp, #7]
  cp0->Connection_Handle = Connection_Handle;
 8011854:	ac08      	add	r4, sp, #32
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011856:	f000 fbc9 	bl	8011fec <Osal_MemSet>
  rq.ocf = 0x0a5;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
  if ( hci_send_req(&rq, FALSE) < 0 )
 801185a:	4629      	mov	r1, r5
  rq.clen = index_input;
 801185c:	2203      	movs	r2, #3
  rq.rlen = 1;
 801185e:	2301      	movs	r3, #1
  rq.ogf = 0x3f;
 8011860:	4d07      	ldr	r5, [pc, #28]	; (8011880 <aci_gap_numeric_comparison_value_confirm_yesno+0x4c>)
  rq.cparam = cmd_buffer;
 8011862:	9404      	str	r4, [sp, #16]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011864:	a802      	add	r0, sp, #8
  rq.rparam = &status;
 8011866:	9606      	str	r6, [sp, #24]
  rq.ogf = 0x3f;
 8011868:	9502      	str	r5, [sp, #8]
  rq.clen = index_input;
 801186a:	9205      	str	r2, [sp, #20]
  rq.rlen = 1;
 801186c:	9307      	str	r3, [sp, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 801186e:	f000 fb23 	bl	8011eb8 <hci_send_req>
 8011872:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  return status;
 8011874:	bfac      	ite	ge
 8011876:	7830      	ldrbge	r0, [r6, #0]
    return BLE_STATUS_TIMEOUT;
 8011878:	20ff      	movlt	r0, #255	; 0xff
}
 801187a:	b048      	add	sp, #288	; 0x120
 801187c:	bd70      	pop	{r4, r5, r6, pc}
 801187e:	bf00      	nop
 8011880:	00a5003f 	.word	0x00a5003f

08011884 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8011884:	b510      	push	{r4, lr}
  struct hci_request rq;
  tBleStatus status = 0;
 8011886:	2400      	movs	r4, #0
{
 8011888:	b088      	sub	sp, #32
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801188a:	4621      	mov	r1, r4
 801188c:	a802      	add	r0, sp, #8
 801188e:	2218      	movs	r2, #24
  tBleStatus status = 0;
 8011890:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011894:	f000 fbaa 	bl	8011fec <Osal_MemSet>
  rq.ogf = 0x3f;
 8011898:	4b08      	ldr	r3, [pc, #32]	; (80118bc <aci_gatt_init+0x38>)
 801189a:	9302      	str	r3, [sp, #8]
  rq.ocf = 0x101;
  rq.rparam = &status;
 801189c:	f10d 0207 	add.w	r2, sp, #7
  rq.rlen = 1;
 80118a0:	2301      	movs	r3, #1
  if ( hci_send_req(&rq, FALSE) < 0 )
 80118a2:	4621      	mov	r1, r4
 80118a4:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 80118a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80118aa:	f000 fb05 	bl	8011eb8 <hci_send_req>
 80118ae:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  return status;
 80118b0:	bfac      	ite	ge
 80118b2:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 80118b6:	20ff      	movlt	r0, #255	; 0xff
}
 80118b8:	b008      	add	sp, #32
 80118ba:	bd10      	pop	{r4, pc}
 80118bc:	0101003f 	.word	0x0101003f

080118c0 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80118c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80118c4:	2801      	cmp	r0, #1
{
 80118c6:	b0c8      	sub	sp, #288	; 0x120
 80118c8:	4604      	mov	r4, r0
 80118ca:	4688      	mov	r8, r1
 80118cc:	4617      	mov	r7, r2
 80118ce:	461d      	mov	r5, r3
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80118d0:	d03e      	beq.n	8011950 <aci_gatt_add_service+0x90>
 80118d2:	2802      	cmp	r0, #2
 80118d4:	d008      	beq.n	80118e8 <aci_gatt_add_service+0x28>
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80118d6:	2203      	movs	r2, #3
 80118d8:	2100      	movs	r1, #0
 80118da:	a801      	add	r0, sp, #4
 80118dc:	f000 fb86 	bl	8011fec <Osal_MemSet>
 80118e0:	2097      	movs	r0, #151	; 0x97
    return BLE_STATUS_TIMEOUT;
  if ( resp.Status )
    return resp.Status;
  *Service_Handle = resp.Service_Handle;
  return BLE_STATUS_SUCCESS;
}
 80118e2:	b048      	add	sp, #288	; 0x120
 80118e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80118e8:	ae01      	add	r6, sp, #4
  cp0->Service_UUID_Type = Service_UUID_Type;
 80118ea:	f10d 0920 	add.w	r9, sp, #32
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80118ee:	2203      	movs	r2, #3
 80118f0:	4630      	mov	r0, r6
 80118f2:	2100      	movs	r1, #0
 80118f4:	f000 fb7a 	bl	8011fec <Osal_MemSet>
      case 2: size = 16; break;
 80118f8:	f04f 0a13 	mov.w	sl, #19
  cp0->Service_UUID_Type = Service_UUID_Type;
 80118fc:	f889 4000 	strb.w	r4, [r9]
      case 2: size = 16; break;
 8011900:	2210      	movs	r2, #16
 8011902:	f10d 0431 	add.w	r4, sp, #49	; 0x31
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8011906:	4641      	mov	r1, r8
 8011908:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 801190c:	f000 fb6c 	bl	8011fe8 <Osal_MemCpy>
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011910:	2218      	movs	r2, #24
 8011912:	2100      	movs	r1, #0
 8011914:	a802      	add	r0, sp, #8
      cp1->Service_Type = Service_Type;
 8011916:	7027      	strb	r7, [r4, #0]
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8011918:	7065      	strb	r5, [r4, #1]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801191a:	f000 fb67 	bl	8011fec <Osal_MemSet>
  rq.ogf = 0x3f;
 801191e:	4a16      	ldr	r2, [pc, #88]	; (8011978 <aci_gatt_add_service+0xb8>)
  rq.cparam = cmd_buffer;
 8011920:	f8cd 9010 	str.w	r9, [sp, #16]
  rq.rlen = sizeof(resp);
 8011924:	2303      	movs	r3, #3
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011926:	a802      	add	r0, sp, #8
 8011928:	2100      	movs	r1, #0
  rq.rparam = &resp;
 801192a:	e9cd a605 	strd	sl, r6, [sp, #20]
  rq.ogf = 0x3f;
 801192e:	9202      	str	r2, [sp, #8]
  rq.rlen = sizeof(resp);
 8011930:	9307      	str	r3, [sp, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011932:	f000 fac1 	bl	8011eb8 <hci_send_req>
 8011936:	2800      	cmp	r0, #0
 8011938:	db1a      	blt.n	8011970 <aci_gatt_add_service+0xb0>
  if ( resp.Status )
 801193a:	7830      	ldrb	r0, [r6, #0]
 801193c:	2800      	cmp	r0, #0
 801193e:	d1d0      	bne.n	80118e2 <aci_gatt_add_service+0x22>
  *Service_Handle = resp.Service_Handle;
 8011940:	6833      	ldr	r3, [r6, #0]
 8011942:	9a50      	ldr	r2, [sp, #320]	; 0x140
 8011944:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8011948:	8013      	strh	r3, [r2, #0]
}
 801194a:	b048      	add	sp, #288	; 0x120
 801194c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8011950:	ae01      	add	r6, sp, #4
  cp0->Service_UUID_Type = Service_UUID_Type;
 8011952:	f10d 0920 	add.w	r9, sp, #32
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8011956:	2203      	movs	r2, #3
 8011958:	4630      	mov	r0, r6
 801195a:	2100      	movs	r1, #0
 801195c:	f000 fb46 	bl	8011fec <Osal_MemSet>
  cp0->Service_UUID_Type = Service_UUID_Type;
 8011960:	f04f 0a05 	mov.w	sl, #5
 8011964:	f889 4000 	strb.w	r4, [r9]
 8011968:	2202      	movs	r2, #2
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 801196a:	f10d 0423 	add.w	r4, sp, #35	; 0x23
 801196e:	e7ca      	b.n	8011906 <aci_gatt_add_service+0x46>
    return BLE_STATUS_TIMEOUT;
 8011970:	20ff      	movs	r0, #255	; 0xff
}
 8011972:	b048      	add	sp, #288	; 0x120
 8011974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011978:	0102003f 	.word	0x0102003f

0801197c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 801197c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011980:	b0cd      	sub	sp, #308	; 0x134
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8011982:	2901      	cmp	r1, #1
{
 8011984:	9300      	str	r3, [sp, #0]
 8011986:	f89d 3158 	ldrb.w	r3, [sp, #344]	; 0x158
 801198a:	9301      	str	r3, [sp, #4]
 801198c:	f89d 315c 	ldrb.w	r3, [sp, #348]	; 0x15c
 8011990:	f89d 9160 	ldrb.w	r9, [sp, #352]	; 0x160
 8011994:	f89d a164 	ldrb.w	sl, [sp, #356]	; 0x164
 8011998:	f89d b168 	ldrb.w	fp, [sp, #360]	; 0x168
 801199c:	9302      	str	r3, [sp, #8]
 801199e:	460c      	mov	r4, r1
 80119a0:	4605      	mov	r5, r0
 80119a2:	4616      	mov	r6, r2
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80119a4:	d04b      	beq.n	8011a3e <aci_gatt_add_char+0xc2>
 80119a6:	2902      	cmp	r1, #2
 80119a8:	d008      	beq.n	80119bc <aci_gatt_add_char+0x40>
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80119aa:	2203      	movs	r2, #3
 80119ac:	2100      	movs	r1, #0
 80119ae:	a805      	add	r0, sp, #20
 80119b0:	f000 fb1c 	bl	8011fec <Osal_MemSet>
 80119b4:	2097      	movs	r0, #151	; 0x97
    return BLE_STATUS_TIMEOUT;
  if ( resp.Status )
    return resp.Status;
  *Char_Handle = resp.Char_Handle;
  return BLE_STATUS_SUCCESS;
}
 80119b6:	b04d      	add	sp, #308	; 0x134
 80119b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  cp0->Service_Handle = Service_Handle;
 80119bc:	f10d 0830 	add.w	r8, sp, #48	; 0x30
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80119c0:	af05      	add	r7, sp, #20
 80119c2:	2203      	movs	r2, #3
 80119c4:	4638      	mov	r0, r7
 80119c6:	2100      	movs	r1, #0
 80119c8:	f000 fb10 	bl	8011fec <Osal_MemSet>
  cp0->Char_UUID_Type = Char_UUID_Type;
 80119cc:	f888 4002 	strb.w	r4, [r8, #2]
      case 2: size = 16; break;
 80119d0:	231a      	movs	r3, #26
  cp0->Service_Handle = Service_Handle;
 80119d2:	f8a8 5000 	strh.w	r5, [r8]
      case 2: size = 16; break;
 80119d6:	2210      	movs	r2, #16
 80119d8:	f10d 0443 	add.w	r4, sp, #67	; 0x43
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80119dc:	4631      	mov	r1, r6
 80119de:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 80119e2:	9303      	str	r3, [sp, #12]
 80119e4:	f000 fb00 	bl	8011fe8 <Osal_MemCpy>
      cp1->Char_Value_Length = Char_Value_Length;
 80119e8:	9b00      	ldr	r3, [sp, #0]
 80119ea:	8023      	strh	r3, [r4, #0]
      cp1->Char_Properties = Char_Properties;
 80119ec:	9b01      	ldr	r3, [sp, #4]
 80119ee:	70a3      	strb	r3, [r4, #2]
      cp1->Security_Permissions = Security_Permissions;
 80119f0:	9b02      	ldr	r3, [sp, #8]
 80119f2:	70e3      	strb	r3, [r4, #3]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80119f4:	2218      	movs	r2, #24
 80119f6:	2100      	movs	r1, #0
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80119f8:	f884 9004 	strb.w	r9, [r4, #4]
      cp1->Enc_Key_Size = Enc_Key_Size;
 80119fc:	f884 a005 	strb.w	sl, [r4, #5]
      cp1->Is_Variable = Is_Variable;
 8011a00:	f884 b006 	strb.w	fp, [r4, #6]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011a04:	a806      	add	r0, sp, #24
 8011a06:	f000 faf1 	bl	8011fec <Osal_MemSet>
  rq.clen = index_input;
 8011a0a:	9b03      	ldr	r3, [sp, #12]
  rq.ogf = 0x3f;
 8011a0c:	4c16      	ldr	r4, [pc, #88]	; (8011a68 <aci_gatt_add_char+0xec>)
  rq.cparam = cmd_buffer;
 8011a0e:	f8cd 8020 	str.w	r8, [sp, #32]
  rq.rlen = sizeof(resp);
 8011a12:	2203      	movs	r2, #3
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011a14:	a806      	add	r0, sp, #24
 8011a16:	2100      	movs	r1, #0
  rq.rparam = &resp;
 8011a18:	e9cd 3709 	strd	r3, r7, [sp, #36]	; 0x24
  rq.ogf = 0x3f;
 8011a1c:	9406      	str	r4, [sp, #24]
  rq.rlen = sizeof(resp);
 8011a1e:	920b      	str	r2, [sp, #44]	; 0x2c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011a20:	f000 fa4a 	bl	8011eb8 <hci_send_req>
 8011a24:	2800      	cmp	r0, #0
 8011a26:	db1b      	blt.n	8011a60 <aci_gatt_add_char+0xe4>
  if ( resp.Status )
 8011a28:	7838      	ldrb	r0, [r7, #0]
 8011a2a:	2800      	cmp	r0, #0
 8011a2c:	d1c3      	bne.n	80119b6 <aci_gatt_add_char+0x3a>
  *Char_Handle = resp.Char_Handle;
 8011a2e:	683b      	ldr	r3, [r7, #0]
 8011a30:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
 8011a32:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8011a36:	8013      	strh	r3, [r2, #0]
}
 8011a38:	b04d      	add	sp, #308	; 0x134
 8011a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  cp0->Service_Handle = Service_Handle;
 8011a3e:	f10d 0830 	add.w	r8, sp, #48	; 0x30
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8011a42:	af05      	add	r7, sp, #20
 8011a44:	2203      	movs	r2, #3
 8011a46:	4638      	mov	r0, r7
 8011a48:	2100      	movs	r1, #0
 8011a4a:	f000 facf 	bl	8011fec <Osal_MemSet>
  cp0->Char_UUID_Type = Char_UUID_Type;
 8011a4e:	f888 4002 	strb.w	r4, [r8, #2]
 8011a52:	230c      	movs	r3, #12
  cp0->Service_Handle = Service_Handle;
 8011a54:	f8a8 5000 	strh.w	r5, [r8]
  cp0->Char_UUID_Type = Char_UUID_Type;
 8011a58:	2202      	movs	r2, #2
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8011a5a:	f10d 0435 	add.w	r4, sp, #53	; 0x35
 8011a5e:	e7bd      	b.n	80119dc <aci_gatt_add_char+0x60>
    return BLE_STATUS_TIMEOUT;
 8011a60:	20ff      	movs	r0, #255	; 0xff
}
 8011a62:	b04d      	add	sp, #308	; 0x134
 8011a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a68:	0104003f 	.word	0x0104003f

08011a6c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8011a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a6e:	b0c9      	sub	sp, #292	; 0x124
 8011a70:	461c      	mov	r4, r3
 8011a72:	468c      	mov	ip, r1
 8011a74:	4613      	mov	r3, r2
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8011a76:	2600      	movs	r6, #0
  index_input += 2;
  cp0->Val_Offset = Val_Offset;
  index_input += 1;
  cp0->Char_Value_Length = Char_Value_Length;
  index_input += 1;
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8011a78:	994e      	ldr	r1, [sp, #312]	; 0x138
  cp0->Service_Handle = Service_Handle;
 8011a7a:	f8ad 0020 	strh.w	r0, [sp, #32]
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8011a7e:	4622      	mov	r2, r4
 8011a80:	f10d 0026 	add.w	r0, sp, #38	; 0x26
  cp0->Char_Handle = Char_Handle;
 8011a84:	f8ad c022 	strh.w	ip, [sp, #34]	; 0x22
  cp0->Val_Offset = Val_Offset;
 8011a88:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  cp0->Char_Value_Length = Char_Value_Length;
 8011a8c:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
  tBleStatus status = 0;
 8011a90:	f88d 6007 	strb.w	r6, [sp, #7]
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8011a94:	f000 faa8 	bl	8011fe8 <Osal_MemCpy>
  index_input += Char_Value_Length;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011a98:	4631      	mov	r1, r6
 8011a9a:	a802      	add	r0, sp, #8
 8011a9c:	2218      	movs	r2, #24
 8011a9e:	f000 faa5 	bl	8011fec <Osal_MemSet>
  tBleStatus status = 0;
 8011aa2:	f10d 0707 	add.w	r7, sp, #7
  rq.ogf = 0x3f;
 8011aa6:	4a09      	ldr	r2, [pc, #36]	; (8011acc <aci_gatt_update_char_value+0x60>)
 8011aa8:	9202      	str	r2, [sp, #8]
  rq.ocf = 0x106;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 8011aaa:	2301      	movs	r3, #1
  cp0->Service_Handle = Service_Handle;
 8011aac:	ad08      	add	r5, sp, #32
  index_input += Char_Value_Length;
 8011aae:	3406      	adds	r4, #6
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011ab0:	4631      	mov	r1, r6
 8011ab2:	a802      	add	r0, sp, #8
  rq.rparam = &status;
 8011ab4:	e9cd 4705 	strd	r4, r7, [sp, #20]
  rq.cparam = cmd_buffer;
 8011ab8:	9504      	str	r5, [sp, #16]
  rq.rlen = 1;
 8011aba:	9307      	str	r3, [sp, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011abc:	f000 f9fc 	bl	8011eb8 <hci_send_req>
 8011ac0:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  return status;
 8011ac2:	bfac      	ite	ge
 8011ac4:	7838      	ldrbge	r0, [r7, #0]
    return BLE_STATUS_TIMEOUT;
 8011ac6:	20ff      	movlt	r0, #255	; 0xff
}
 8011ac8:	b049      	add	sp, #292	; 0x124
 8011aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011acc:	0106003f 	.word	0x0106003f

08011ad0 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8011ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ad2:	460c      	mov	r4, r1
 8011ad4:	b0c9      	sub	sp, #292	; 0x124
 8011ad6:	4603      	mov	r3, r0
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8011ad8:	2600      	movs	r6, #0
  int index_input = 0;
  cp0->Offset = Offset;
  index_input += 1;
  cp0->Length = Length;
  index_input += 1;
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8011ada:	4611      	mov	r1, r2
 8011adc:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8011ae0:	4622      	mov	r2, r4
  cp0->Offset = Offset;
 8011ae2:	f88d 3020 	strb.w	r3, [sp, #32]
  cp0->Length = Length;
 8011ae6:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  tBleStatus status = 0;
 8011aea:	f88d 6007 	strb.w	r6, [sp, #7]
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8011aee:	f000 fa7b 	bl	8011fe8 <Osal_MemCpy>
  index_input += Length;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011af2:	4631      	mov	r1, r6
 8011af4:	a802      	add	r0, sp, #8
 8011af6:	2218      	movs	r2, #24
 8011af8:	f000 fa78 	bl	8011fec <Osal_MemSet>
  tBleStatus status = 0;
 8011afc:	f10d 0707 	add.w	r7, sp, #7
  rq.ogf = 0x3f;
 8011b00:	4a09      	ldr	r2, [pc, #36]	; (8011b28 <aci_hal_write_config_data+0x58>)
 8011b02:	9202      	str	r2, [sp, #8]
  rq.ocf = 0x00c;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 8011b04:	2301      	movs	r3, #1
  cp0->Offset = Offset;
 8011b06:	ad08      	add	r5, sp, #32
  index_input += Length;
 8011b08:	3402      	adds	r4, #2
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011b0a:	4631      	mov	r1, r6
 8011b0c:	a802      	add	r0, sp, #8
  rq.rparam = &status;
 8011b0e:	e9cd 4705 	strd	r4, r7, [sp, #20]
  rq.cparam = cmd_buffer;
 8011b12:	9504      	str	r5, [sp, #16]
  rq.rlen = 1;
 8011b14:	9307      	str	r3, [sp, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011b16:	f000 f9cf 	bl	8011eb8 <hci_send_req>
 8011b1a:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  return status;
 8011b1c:	bfac      	ite	ge
 8011b1e:	7838      	ldrbge	r0, [r7, #0]
    return BLE_STATUS_TIMEOUT;
 8011b20:	20ff      	movlt	r0, #255	; 0xff
}
 8011b22:	b049      	add	sp, #292	; 0x124
 8011b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b26:	bf00      	nop
 8011b28:	000c003f 	.word	0x000c003f

08011b2c <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8011b2c:	b570      	push	{r4, r5, r6, lr}
 8011b2e:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8011b30:	2500      	movs	r5, #0
{
 8011b32:	4602      	mov	r2, r0
 8011b34:	460b      	mov	r3, r1
  int index_input = 0;
  cp0->En_High_Power = En_High_Power;
 8011b36:	f88d 2020 	strb.w	r2, [sp, #32]
  index_input += 1;
  cp0->PA_Level = PA_Level;
  index_input += 1;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011b3a:	4629      	mov	r1, r5
 8011b3c:	a802      	add	r0, sp, #8
 8011b3e:	2218      	movs	r2, #24
  tBleStatus status = 0;
 8011b40:	f10d 0607 	add.w	r6, sp, #7
  cp0->PA_Level = PA_Level;
 8011b44:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  tBleStatus status = 0;
 8011b48:	f88d 5007 	strb.w	r5, [sp, #7]
  cp0->En_High_Power = En_High_Power;
 8011b4c:	ac08      	add	r4, sp, #32
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011b4e:	f000 fa4d 	bl	8011fec <Osal_MemSet>
  rq.ocf = 0x00f;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011b52:	4629      	mov	r1, r5
  rq.clen = index_input;
 8011b54:	2202      	movs	r2, #2
  rq.rlen = 1;
 8011b56:	2301      	movs	r3, #1
  rq.ogf = 0x3f;
 8011b58:	4d07      	ldr	r5, [pc, #28]	; (8011b78 <aci_hal_set_tx_power_level+0x4c>)
  rq.cparam = cmd_buffer;
 8011b5a:	9404      	str	r4, [sp, #16]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011b5c:	a802      	add	r0, sp, #8
  rq.rparam = &status;
 8011b5e:	9606      	str	r6, [sp, #24]
  rq.ogf = 0x3f;
 8011b60:	9502      	str	r5, [sp, #8]
  rq.clen = index_input;
 8011b62:	9205      	str	r2, [sp, #20]
  rq.rlen = 1;
 8011b64:	9307      	str	r3, [sp, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011b66:	f000 f9a7 	bl	8011eb8 <hci_send_req>
 8011b6a:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  return status;
 8011b6c:	bfac      	ite	ge
 8011b6e:	7830      	ldrbge	r0, [r6, #0]
    return BLE_STATUS_TIMEOUT;
 8011b70:	20ff      	movlt	r0, #255	; 0xff
}
 8011b72:	b048      	add	sp, #288	; 0x120
 8011b74:	bd70      	pop	{r4, r5, r6, pc}
 8011b76:	bf00      	nop
 8011b78:	000f003f 	.word	0x000f003f

08011b7c <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8011b7c:	b570      	push	{r4, r5, r6, lr}
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8011b7e:	2400      	movs	r4, #0
{
 8011b80:	b0c8      	sub	sp, #288	; 0x120
 8011b82:	4603      	mov	r3, r0
  int index_input = 0;
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
  index_input += 2;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011b84:	4621      	mov	r1, r4
 8011b86:	a802      	add	r0, sp, #8
 8011b88:	2218      	movs	r2, #24
  tBleStatus status = 0;
 8011b8a:	f10d 0507 	add.w	r5, sp, #7
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8011b8e:	f8ad 3020 	strh.w	r3, [sp, #32]
  tBleStatus status = 0;
 8011b92:	f88d 4007 	strb.w	r4, [sp, #7]
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8011b96:	ae08      	add	r6, sp, #32
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011b98:	f000 fa28 	bl	8011fec <Osal_MemSet>
  rq.ocf = 0x018;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011b9c:	4621      	mov	r1, r4
  rq.clen = index_input;
 8011b9e:	2202      	movs	r2, #2
  rq.rlen = 1;
 8011ba0:	2301      	movs	r3, #1
  rq.ogf = 0x3f;
 8011ba2:	4c07      	ldr	r4, [pc, #28]	; (8011bc0 <aci_hal_set_radio_activity_mask+0x44>)
  rq.cparam = cmd_buffer;
 8011ba4:	9604      	str	r6, [sp, #16]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011ba6:	a802      	add	r0, sp, #8
  rq.rparam = &status;
 8011ba8:	9506      	str	r5, [sp, #24]
  rq.ogf = 0x3f;
 8011baa:	9402      	str	r4, [sp, #8]
  rq.clen = index_input;
 8011bac:	9205      	str	r2, [sp, #20]
  rq.rlen = 1;
 8011bae:	9307      	str	r3, [sp, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011bb0:	f000 f982 	bl	8011eb8 <hci_send_req>
 8011bb4:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  return status;
 8011bb6:	bfac      	ite	ge
 8011bb8:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 8011bba:	20ff      	movlt	r0, #255	; 0xff
}
 8011bbc:	b048      	add	sp, #288	; 0x120
 8011bbe:	bd70      	pop	{r4, r5, r6, pc}
 8011bc0:	0018003f 	.word	0x0018003f

08011bc4 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8011bc4:	b510      	push	{r4, lr}
  struct hci_request rq;
  tBleStatus status = 0;
 8011bc6:	2400      	movs	r4, #0
{
 8011bc8:	b088      	sub	sp, #32
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011bca:	4621      	mov	r1, r4
 8011bcc:	a802      	add	r0, sp, #8
 8011bce:	2218      	movs	r2, #24
  tBleStatus status = 0;
 8011bd0:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011bd4:	f000 fa0a 	bl	8011fec <Osal_MemSet>
  rq.ogf = 0x03;
  rq.ocf = 0x003;
  rq.rparam = &status;
  rq.rlen = 1;
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011bd8:	4621      	mov	r1, r4
  rq.rparam = &status;
 8011bda:	f10d 0207 	add.w	r2, sp, #7
  rq.rlen = 1;
 8011bde:	2301      	movs	r3, #1
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011be0:	a802      	add	r0, sp, #8
  rq.ogf = 0x03;
 8011be2:	f04f 1403 	mov.w	r4, #196611	; 0x30003
  rq.rlen = 1;
 8011be6:	e9cd 2306 	strd	r2, r3, [sp, #24]
  rq.ogf = 0x03;
 8011bea:	9402      	str	r4, [sp, #8]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011bec:	f000 f964 	bl	8011eb8 <hci_send_req>
 8011bf0:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  return status;
 8011bf2:	bfac      	ite	ge
 8011bf4:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8011bf8:	20ff      	movlt	r0, #255	; 0xff
}
 8011bfa:	b008      	add	sp, #32
 8011bfc:	bd10      	pop	{r4, pc}
 8011bfe:	bf00      	nop

08011c00 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 8011c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c02:	b0c9      	sub	sp, #292	; 0x124
 8011c04:	4604      	mov	r4, r0
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
  int index_input = 0;
  cp0->Connection_Handle = Connection_Handle;
 8011c06:	af08      	add	r7, sp, #32
{
 8011c08:	460e      	mov	r6, r1
 8011c0a:	4615      	mov	r5, r2
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8011c0c:	2100      	movs	r1, #0
 8011c0e:	2205      	movs	r2, #5
 8011c10:	4668      	mov	r0, sp
 8011c12:	f000 f9eb 	bl	8011fec <Osal_MemSet>
  index_input += 2;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011c16:	2218      	movs	r2, #24
 8011c18:	2100      	movs	r1, #0
 8011c1a:	a802      	add	r0, sp, #8
  cp0->Connection_Handle = Connection_Handle;
 8011c1c:	803c      	strh	r4, [r7, #0]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011c1e:	f000 f9e5 	bl	8011fec <Osal_MemSet>
  rq.ogf = 0x08;
 8011c22:	4c0e      	ldr	r4, [pc, #56]	; (8011c5c <hci_le_read_phy+0x5c>)
  rq.ocf = 0x030;
  rq.cparam = cmd_buffer;
 8011c24:	9704      	str	r7, [sp, #16]
  rq.clen = index_input;
 8011c26:	2202      	movs	r2, #2
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
 8011c28:	2305      	movs	r3, #5
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011c2a:	a802      	add	r0, sp, #8
 8011c2c:	2100      	movs	r1, #0
  rq.rparam = &resp;
 8011c2e:	f8cd d018 	str.w	sp, [sp, #24]
  rq.ogf = 0x08;
 8011c32:	9402      	str	r4, [sp, #8]
  rq.clen = index_input;
 8011c34:	9205      	str	r2, [sp, #20]
  rq.rlen = sizeof(resp);
 8011c36:	9307      	str	r3, [sp, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011c38:	f000 f93e 	bl	8011eb8 <hci_send_req>
 8011c3c:	2800      	cmp	r0, #0
 8011c3e:	db0a      	blt.n	8011c56 <hci_le_read_phy+0x56>
    return BLE_STATUS_TIMEOUT;
  if ( resp.Status )
 8011c40:	f89d 0000 	ldrb.w	r0, [sp]
 8011c44:	b928      	cbnz	r0, 8011c52 <hci_le_read_phy+0x52>
    return resp.Status;
  *TX_PHY = resp.TX_PHY;
 8011c46:	f89d 2003 	ldrb.w	r2, [sp, #3]
  *RX_PHY = resp.RX_PHY;
 8011c4a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  *TX_PHY = resp.TX_PHY;
 8011c4e:	7032      	strb	r2, [r6, #0]
  *RX_PHY = resp.RX_PHY;
 8011c50:	702b      	strb	r3, [r5, #0]
  return BLE_STATUS_SUCCESS;
}
 8011c52:	b049      	add	sp, #292	; 0x124
 8011c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 8011c56:	20ff      	movs	r0, #255	; 0xff
}
 8011c58:	b049      	add	sp, #292	; 0x124
 8011c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c5c:	00300008 	.word	0x00300008

08011c60 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8011c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c62:	b0c9      	sub	sp, #292	; 0x124
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8011c64:	2500      	movs	r5, #0
{
 8011c66:	4613      	mov	r3, r2
 8011c68:	460f      	mov	r7, r1
  int index_input = 0;
  cp0->ALL_PHYS = ALL_PHYS;
 8011c6a:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  cp0->TX_PHYS = TX_PHYS;
  index_input += 1;
  cp0->RX_PHYS = RX_PHYS;
  index_input += 1;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011c6e:	4629      	mov	r1, r5
 8011c70:	a802      	add	r0, sp, #8
 8011c72:	2218      	movs	r2, #24
  tBleStatus status = 0;
 8011c74:	f10d 0607 	add.w	r6, sp, #7
  cp0->RX_PHYS = RX_PHYS;
 8011c78:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
  tBleStatus status = 0;
 8011c7c:	f88d 5007 	strb.w	r5, [sp, #7]
  cp0->ALL_PHYS = ALL_PHYS;
 8011c80:	ac08      	add	r4, sp, #32
  cp0->TX_PHYS = TX_PHYS;
 8011c82:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011c86:	f000 f9b1 	bl	8011fec <Osal_MemSet>
  rq.ocf = 0x031;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011c8a:	4629      	mov	r1, r5
  rq.clen = index_input;
 8011c8c:	2203      	movs	r2, #3
  rq.rlen = 1;
 8011c8e:	2301      	movs	r3, #1
  rq.ogf = 0x08;
 8011c90:	4d07      	ldr	r5, [pc, #28]	; (8011cb0 <hci_le_set_default_phy+0x50>)
  rq.cparam = cmd_buffer;
 8011c92:	9404      	str	r4, [sp, #16]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011c94:	a802      	add	r0, sp, #8
  rq.rparam = &status;
 8011c96:	9606      	str	r6, [sp, #24]
  rq.ogf = 0x08;
 8011c98:	9502      	str	r5, [sp, #8]
  rq.clen = index_input;
 8011c9a:	9205      	str	r2, [sp, #20]
  rq.rlen = 1;
 8011c9c:	9307      	str	r3, [sp, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011c9e:	f000 f90b 	bl	8011eb8 <hci_send_req>
 8011ca2:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  return status;
 8011ca4:	bfac      	ite	ge
 8011ca6:	7830      	ldrbge	r0, [r6, #0]
    return BLE_STATUS_TIMEOUT;
 8011ca8:	20ff      	movlt	r0, #255	; 0xff
}
 8011caa:	b049      	add	sp, #292	; 0x124
 8011cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cae:	bf00      	nop
 8011cb0:	00310008 	.word	0x00310008

08011cb4 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Slave_latency,
                                                      uint16_t Timeout_Multiplier )
{
 8011cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cb6:	b0c9      	sub	sp, #292	; 0x124
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8011cb8:	2500      	movs	r5, #0
{
 8011cba:	f8bd 7138 	ldrh.w	r7, [sp, #312]	; 0x138
  int index_input = 0;
  cp0->Connection_Handle = Connection_Handle;
 8011cbe:	f8ad 0020 	strh.w	r0, [sp, #32]
  index_input += 2;
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8011cc2:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  index_input += 2;
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8011cc6:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
  index_input += 2;
  cp0->Slave_latency = Slave_latency;
  index_input += 2;
  cp0->Timeout_Multiplier = Timeout_Multiplier;
  index_input += 2;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011cca:	4629      	mov	r1, r5
 8011ccc:	a802      	add	r0, sp, #8
 8011cce:	2218      	movs	r2, #24
  cp0->Connection_Handle = Connection_Handle;
 8011cd0:	ac08      	add	r4, sp, #32
  cp0->Slave_latency = Slave_latency;
 8011cd2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
  tBleStatus status = 0;
 8011cd6:	f88d 5007 	strb.w	r5, [sp, #7]
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 8011cda:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011cde:	f000 f985 	bl	8011fec <Osal_MemSet>
  rq.event = 0x0F;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011ce2:	4629      	mov	r1, r5
  rq.ogf = 0x3f;
 8011ce4:	4d0a      	ldr	r5, [pc, #40]	; (8011d10 <aci_l2cap_connection_parameter_update_req+0x5c>)
  rq.cparam = cmd_buffer;
 8011ce6:	9404      	str	r4, [sp, #16]
  tBleStatus status = 0;
 8011ce8:	f10d 0607 	add.w	r6, sp, #7
  rq.clen = index_input;
 8011cec:	220a      	movs	r2, #10
  rq.rlen = 1;
 8011cee:	2301      	movs	r3, #1
  rq.event = 0x0F;
 8011cf0:	240f      	movs	r4, #15
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011cf2:	a802      	add	r0, sp, #8
  rq.event = 0x0F;
 8011cf4:	e9cd 5402 	strd	r5, r4, [sp, #8]
  rq.rparam = &status;
 8011cf8:	9606      	str	r6, [sp, #24]
  rq.clen = index_input;
 8011cfa:	9205      	str	r2, [sp, #20]
  rq.rlen = 1;
 8011cfc:	9307      	str	r3, [sp, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011cfe:	f000 f8db 	bl	8011eb8 <hci_send_req>
 8011d02:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  return status;
 8011d04:	bfac      	ite	ge
 8011d06:	7830      	ldrbge	r0, [r6, #0]
    return BLE_STATUS_TIMEOUT;
 8011d08:	20ff      	movlt	r0, #255	; 0xff
}
 8011d0a:	b049      	add	sp, #292	; 0x124
 8011d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d0e:	bf00      	nop
 8011d10:	0181003f 	.word	0x0181003f

08011d14 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8011d14:	b510      	push	{r4, lr}
 8011d16:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d18:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011d1c:	b672      	cpsid	i

  BACKUP_PRIMASK();

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8011d1e:	480d      	ldr	r0, [pc, #52]	; (8011d54 <DbgTrace_TxCpltCallback+0x40>)
 8011d20:	f10d 0106 	add.w	r1, sp, #6
 8011d24:	f000 fd14 	bl	8012750 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8011d28:	480a      	ldr	r0, [pc, #40]	; (8011d54 <DbgTrace_TxCpltCallback+0x40>)
 8011d2a:	f10d 0106 	add.w	r1, sp, #6
 8011d2e:	f000 fd89 	bl	8012844 <CircularQueue_Sense>


  if ( buf != NULL) 
 8011d32:	b140      	cbz	r0, 8011d46 <DbgTrace_TxCpltCallback+0x32>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011d34:	f384 8810 	msr	PRIMASK, r4
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8011d38:	4a07      	ldr	r2, [pc, #28]	; (8011d58 <DbgTrace_TxCpltCallback+0x44>)
 8011d3a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8011d3e:	f7ef f96b 	bl	8001018 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8011d42:	b002      	add	sp, #8
 8011d44:	bd10      	pop	{r4, pc}
    DbgTracePeripheralReady = SET;
 8011d46:	4b05      	ldr	r3, [pc, #20]	; (8011d5c <DbgTrace_TxCpltCallback+0x48>)
 8011d48:	2201      	movs	r2, #1
 8011d4a:	701a      	strb	r2, [r3, #0]
 8011d4c:	f384 8810 	msr	PRIMASK, r4
}
 8011d50:	b002      	add	sp, #8
 8011d52:	bd10      	pop	{r4, pc}
 8011d54:	20031b8c 	.word	0x20031b8c
 8011d58:	08011d15 	.word	0x08011d15
 8011d5c:	20000134 	.word	0x20000134

08011d60 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8011d60:	b500      	push	{lr}
 8011d62:	b083      	sub	sp, #12
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 8011d64:	f7ef f956 	bl	8001014 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 8011d68:	4806      	ldr	r0, [pc, #24]	; (8011d84 <DbgTraceInit+0x24>)
 8011d6a:	2302      	movs	r3, #2
 8011d6c:	9300      	str	r3, [sp, #0]
 8011d6e:	f100 0120 	add.w	r1, r0, #32
 8011d72:	2300      	movs	r3, #0
 8011d74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011d78:	f000 fb84 	bl	8012484 <CircularQueue_Init>
#endif 
#endif
  return;
}
 8011d7c:	b003      	add	sp, #12
 8011d7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011d82:	bf00      	nop
 8011d84:	20031b8c 	.word	0x20031b8c

08011d88 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8011d88:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d8a:	f3ef 8510 	mrs	r5, PRIMASK
  uint8_t* buffer;

  BACKUP_PRIMASK();

  /* Ignore flushes */
  if ( handle == -1 )
 8011d8e:	1c43      	adds	r3, r0, #1
 8011d90:	d009      	beq.n	8011da6 <DbgTraceWrite+0x1e>
  {
    chars_written = ( size_t ) 0;
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8011d92:	1e43      	subs	r3, r0, #1
 8011d94:	2b01      	cmp	r3, #1
 8011d96:	d803      	bhi.n	8011da0 <DbgTraceWrite+0x18>
  {
    chars_written = ( size_t ) - 1;
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8011d98:	4614      	mov	r4, r2
 8011d9a:	b932      	cbnz	r2, 8011daa <DbgTraceWrite+0x22>
    chars_written = ( size_t ) 0;
 8011d9c:	4610      	mov	r0, r2
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
}
 8011d9e:	bd70      	pop	{r4, r5, r6, pc}
    chars_written = ( size_t ) - 1;
 8011da0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8011da4:	bd70      	pop	{r4, r5, r6, pc}
    chars_written = ( size_t ) 0;
 8011da6:	2000      	movs	r0, #0
}
 8011da8:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8011daa:	b672      	cpsid	i
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8011dac:	b296      	uxth	r6, r2
 8011dae:	480b      	ldr	r0, [pc, #44]	; (8011ddc <DbgTraceWrite+0x54>)
 8011db0:	4632      	mov	r2, r6
 8011db2:	2301      	movs	r3, #1
 8011db4:	f000 fb7c 	bl	80124b0 <CircularQueue_Add>
    if (buffer && DbgTracePeripheralReady)
 8011db8:	b110      	cbz	r0, 8011dc0 <DbgTraceWrite+0x38>
 8011dba:	4b09      	ldr	r3, [pc, #36]	; (8011de0 <DbgTraceWrite+0x58>)
 8011dbc:	781a      	ldrb	r2, [r3, #0]
 8011dbe:	b91a      	cbnz	r2, 8011dc8 <DbgTraceWrite+0x40>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011dc0:	f385 8810 	msr	PRIMASK, r5
}
 8011dc4:	4620      	mov	r0, r4
}
 8011dc6:	bd70      	pop	{r4, r5, r6, pc}
      DbgTracePeripheralReady = RESET;
 8011dc8:	2200      	movs	r2, #0
 8011dca:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011dcc:	f385 8810 	msr	PRIMASK, r5
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8011dd0:	4a04      	ldr	r2, [pc, #16]	; (8011de4 <DbgTraceWrite+0x5c>)
 8011dd2:	4631      	mov	r1, r6
 8011dd4:	f7ef f920 	bl	8001018 <DbgOutputTraces>
 8011dd8:	4620      	mov	r0, r4
}
 8011dda:	bd70      	pop	{r4, r5, r6, pc}
 8011ddc:	20031b8c 	.word	0x20031b8c
 8011de0:	20000134 	.word	0x20000134
 8011de4:	08011d15 	.word	0x08011d15

08011de8 <_write>:
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8011de8:	f7ff bfce 	b.w	8011d88 <DbgTraceWrite>

08011dec <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8011dec:	b570      	push	{r4, r5, r6, lr}
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8011dee:	4b10      	ldr	r3, [pc, #64]	; (8011e30 <hci_init+0x44>)
  hciContext.UserEvtRx = UserEvtRx;
 8011df0:	4d10      	ldr	r5, [pc, #64]	; (8011e34 <hci_init+0x48>)
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8011df2:	684a      	ldr	r2, [r1, #4]
 8011df4:	601a      	str	r2, [r3, #0]
{
 8011df6:	460c      	mov	r4, r1
 8011df8:	4603      	mov	r3, r0
 8011dfa:	b084      	sub	sp, #16
  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);

  pCmdBuffer = p_cmdbuffer;
 8011dfc:	4e0e      	ldr	r6, [pc, #56]	; (8011e38 <hci_init+0x4c>)
  hciContext.UserEvtRx = UserEvtRx;
 8011dfe:	61eb      	str	r3, [r5, #28]
  hci_register_io_bus (&hciContext.io);
 8011e00:	4628      	mov	r0, r5
 8011e02:	f000 f8e7 	bl	8011fd4 <hci_register_io_bus>
  LST_init_head (&HciCmdEventQueue);
 8011e06:	480d      	ldr	r0, [pc, #52]	; (8011e3c <hci_init+0x50>)
  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8011e08:	6824      	ldr	r4, [r4, #0]
  LST_init_head (&HciCmdEventQueue);
 8011e0a:	f000 fafd 	bl	8012408 <LST_init_head>
  pCmdBuffer = p_cmdbuffer;
 8011e0e:	4630      	mov	r0, r6
 8011e10:	f840 4b04 	str.w	r4, [r0], #4

  LST_init_head (&HciAsynchEventQueue);
 8011e14:	f000 faf8 	bl	8012408 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8011e18:	682b      	ldr	r3, [r5, #0]
  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8011e1a:	2201      	movs	r2, #1
 8011e1c:	7332      	strb	r2, [r6, #12]
  if (hciContext.io.Init)
 8011e1e:	b123      	cbz	r3, 8011e2a <hci_init+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8011e20:	4a07      	ldr	r2, [pc, #28]	; (8011e40 <hci_init+0x54>)
    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8011e22:	9402      	str	r4, [sp, #8]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8011e24:	9200      	str	r2, [sp, #0]
    hciContext.io.Init(&Conf);
 8011e26:	4668      	mov	r0, sp
 8011e28:	4798      	blx	r3
}
 8011e2a:	b004      	add	sp, #16
 8011e2c:	bd70      	pop	{r4, r5, r6, pc}
 8011e2e:	bf00      	nop
 8011e30:	200005e8 	.word	0x200005e8
 8011e34:	200005ec 	.word	0x200005ec
 8011e38:	200002c8 	.word	0x200002c8
 8011e3c:	200005e0 	.word	0x200005e0
 8011e40:	08011fa1 	.word	0x08011fa1

08011e44 <hci_user_evt_proc>:
{
 8011e44:	b510      	push	{r4, lr}
  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8011e46:	4c19      	ldr	r4, [pc, #100]	; (8011eac <hci_user_evt_proc+0x68>)
{
 8011e48:	b084      	sub	sp, #16
  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8011e4a:	1d20      	adds	r0, r4, #4
 8011e4c:	f000 fae0 	bl	8012410 <LST_is_empty>
 8011e50:	b908      	cbnz	r0, 8011e56 <hci_user_evt_proc+0x12>
 8011e52:	7b23      	ldrb	r3, [r4, #12]
 8011e54:	b963      	cbnz	r3, 8011e70 <hci_user_evt_proc+0x2c>
  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8011e56:	4816      	ldr	r0, [pc, #88]	; (8011eb0 <hci_user_evt_proc+0x6c>)
 8011e58:	f000 fada 	bl	8012410 <LST_is_empty>
 8011e5c:	b908      	cbnz	r0, 8011e62 <hci_user_evt_proc+0x1e>
 8011e5e:	7b23      	ldrb	r3, [r4, #12]
 8011e60:	b90b      	cbnz	r3, 8011e66 <hci_user_evt_proc+0x22>
}
 8011e62:	b004      	add	sp, #16
 8011e64:	bd10      	pop	{r4, pc}
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8011e66:	4812      	ldr	r0, [pc, #72]	; (8011eb0 <hci_user_evt_proc+0x6c>)
 8011e68:	f7fb f8c4 	bl	800cff4 <hci_notify_asynch_evt>
}
 8011e6c:	b004      	add	sp, #16
 8011e6e:	bd10      	pop	{r4, pc}
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8011e70:	a901      	add	r1, sp, #4
 8011e72:	1d20      	adds	r0, r4, #4
 8011e74:	f000 faf0 	bl	8012458 <LST_remove_head>
    if (hciContext.UserEvtRx != NULL)
 8011e78:	4b0e      	ldr	r3, [pc, #56]	; (8011eb4 <hci_user_evt_proc+0x70>)
 8011e7a:	69db      	ldr	r3, [r3, #28]
 8011e7c:	b17b      	cbz	r3, 8011e9e <hci_user_evt_proc+0x5a>
      UserEvtRxParam.pckt = phcievtbuffer;
 8011e7e:	9a01      	ldr	r2, [sp, #4]
 8011e80:	9203      	str	r2, [sp, #12]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8011e82:	2201      	movs	r2, #1
 8011e84:	f88d 2008 	strb.w	r2, [sp, #8]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8011e88:	a802      	add	r0, sp, #8
 8011e8a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8011e8c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8011e90:	7323      	strb	r3, [r4, #12]
    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8011e92:	b933      	cbnz	r3, 8011ea2 <hci_user_evt_proc+0x5e>
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8011e94:	9901      	ldr	r1, [sp, #4]
 8011e96:	1d20      	adds	r0, r4, #4
 8011e98:	f000 fac6 	bl	8012428 <LST_insert_head>
 8011e9c:	e7db      	b.n	8011e56 <hci_user_evt_proc+0x12>
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8011e9e:	2301      	movs	r3, #1
 8011ea0:	7323      	strb	r3, [r4, #12]
      TL_MM_EvtDone( phcievtbuffer );
 8011ea2:	9801      	ldr	r0, [sp, #4]
 8011ea4:	f000 fea6 	bl	8012bf4 <TL_MM_EvtDone>
 8011ea8:	e7d5      	b.n	8011e56 <hci_user_evt_proc+0x12>
 8011eaa:	bf00      	nop
 8011eac:	200002c8 	.word	0x200002c8
 8011eb0:	200002cc 	.word	0x200002cc
 8011eb4:	200005ec 	.word	0x200005ec

08011eb8 <hci_send_req>:
{
 8011eb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
  if(hcicmdstatus == HCI_TL_CmdBusy)
  {
    if(StatusNotCallBackFunction != 0)
 8011ebc:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8011f9c <hci_send_req+0xe4>
 8011ec0:	f8d9 3000 	ldr.w	r3, [r9]
{
 8011ec4:	b083      	sub	sp, #12
 8011ec6:	4680      	mov	r8, r0
    if(StatusNotCallBackFunction != 0)
 8011ec8:	b10b      	cbz	r3, 8011ece <hci_send_req+0x16>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8011eca:	2000      	movs	r0, #0
 8011ecc:	4798      	blx	r3
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8011ece:	4a30      	ldr	r2, [pc, #192]	; (8011f90 <hci_send_req+0xd8>)
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8011ed0:	f8b8 6002 	ldrh.w	r6, [r8, #2]
 8011ed4:	f8b8 3000 	ldrh.w	r3, [r8]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8011ed8:	6810      	ldr	r0, [r2, #0]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8011eda:	4d2e      	ldr	r5, [pc, #184]	; (8011f94 <hci_send_req+0xdc>)
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8011edc:	e9d8 1202 	ldrd	r1, r2, [r8, #8]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8011ee0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8011ee4:	ea46 2683 	orr.w	r6, r6, r3, lsl #10
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8011ee8:	72c2      	strb	r2, [r0, #11]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8011eea:	f8a0 6009 	strh.w	r6, [r0, #9]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8011eee:	b2d2      	uxtb	r2, r2
 8011ef0:	300c      	adds	r0, #12
 8011ef2:	f001 f839 	bl	8012f68 <memcpy>
  hciContext.io.Send(0,0);
 8011ef6:	4b28      	ldr	r3, [pc, #160]	; (8011f98 <hci_send_req+0xe0>)
 8011ef8:	2100      	movs	r1, #0
 8011efa:	691b      	ldr	r3, [r3, #16]
 8011efc:	4608      	mov	r0, r1
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8011efe:	b2b6      	uxth	r6, r6
  hciContext.io.Send(0,0);
 8011f00:	4798      	blx	r3
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8011f02:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8011f06:	f7fb f87d 	bl	800d004 <hci_cmd_resp_wait>
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8011f0a:	2700      	movs	r7, #0
 8011f0c:	4628      	mov	r0, r5
 8011f0e:	f000 fa7f 	bl	8012410 <LST_is_empty>
 8011f12:	4603      	mov	r3, r0
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8011f14:	a901      	add	r1, sp, #4
 8011f16:	4628      	mov	r0, r5
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8011f18:	b9a3      	cbnz	r3, 8011f44 <hci_send_req+0x8c>
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8011f1a:	f000 fa9d 	bl	8012458 <LST_remove_head>
      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8011f1e:	9c01      	ldr	r4, [sp, #4]
 8011f20:	7a63      	ldrb	r3, [r4, #9]
 8011f22:	2b0f      	cmp	r3, #15
 8011f24:	d019      	beq.n	8011f5a <hci_send_req+0xa2>
        if(pcommand_complete_event->cmdcode == opcode)
 8011f26:	89a3      	ldrh	r3, [r4, #12]
 8011f28:	42b3      	cmp	r3, r6
 8011f2a:	d022      	beq.n	8011f72 <hci_send_req+0xba>
        if(pcommand_complete_event->numcmd != 0)
 8011f2c:	7ae3      	ldrb	r3, [r4, #11]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d0ec      	beq.n	8011f0c <hci_send_req+0x54>
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8011f32:	4628      	mov	r0, r5
 8011f34:	f000 fa6c 	bl	8012410 <LST_is_empty>
 8011f38:	4603      	mov	r3, r0
          local_cmd_status = HCI_TL_CmdAvailable;
 8011f3a:	2701      	movs	r7, #1
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8011f3c:	a901      	add	r1, sp, #4
 8011f3e:	4628      	mov	r0, r5
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d0ea      	beq.n	8011f1a <hci_send_req+0x62>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8011f44:	2f00      	cmp	r7, #0
 8011f46:	d0dc      	beq.n	8011f02 <hci_send_req+0x4a>
    }
  }
  else
  {
    if(StatusNotCallBackFunction != 0)
 8011f48:	f8d9 3000 	ldr.w	r3, [r9]
 8011f4c:	b10b      	cbz	r3, 8011f52 <hci_send_req+0x9a>
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8011f4e:	2001      	movs	r0, #1
 8011f50:	4798      	blx	r3
}
 8011f52:	2000      	movs	r0, #0
 8011f54:	b003      	add	sp, #12
 8011f56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(pcommand_status_event->cmdcode == opcode)
 8011f5a:	f8b4 300d 	ldrh.w	r3, [r4, #13]
 8011f5e:	42b3      	cmp	r3, r6
 8011f60:	d103      	bne.n	8011f6a <hci_send_req+0xb2>
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8011f62:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011f66:	7ae2      	ldrb	r2, [r4, #11]
 8011f68:	701a      	strb	r2, [r3, #0]
        if(pcommand_status_event->numcmd != 0)
 8011f6a:	7b23      	ldrb	r3, [r4, #12]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d0cd      	beq.n	8011f0c <hci_send_req+0x54>
 8011f70:	e7df      	b.n	8011f32 <hci_send_req+0x7a>
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8011f72:	7aa2      	ldrb	r2, [r4, #10]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8011f74:	e9d8 0304 	ldrd	r0, r3, [r8, #16]
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8011f78:	3a03      	subs	r2, #3
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8011f7a:	b2d2      	uxtb	r2, r2
 8011f7c:	429a      	cmp	r2, r3
 8011f7e:	bfa8      	it	ge
 8011f80:	461a      	movge	r2, r3
 8011f82:	f8c8 2014 	str.w	r2, [r8, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8011f86:	f104 010e 	add.w	r1, r4, #14
 8011f8a:	f000 ffed 	bl	8012f68 <memcpy>
 8011f8e:	e7cd      	b.n	8011f2c <hci_send_req+0x74>
 8011f90:	200002c8 	.word	0x200002c8
 8011f94:	200005e0 	.word	0x200005e0
 8011f98:	200005ec 	.word	0x200005ec
 8011f9c:	200005e8 	.word	0x200005e8

08011fa0 <TlEvtReceived>:

  return;
}

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8011fa0:	b508      	push	{r3, lr}
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8011fa2:	7a43      	ldrb	r3, [r0, #9]
 8011fa4:	3b0e      	subs	r3, #14
 8011fa6:	2b01      	cmp	r3, #1
{
 8011fa8:	4601      	mov	r1, r0
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8011faa:	d907      	bls.n	8011fbc <TlEvtReceived+0x1c>
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8011fac:	4807      	ldr	r0, [pc, #28]	; (8011fcc <TlEvtReceived+0x2c>)
 8011fae:	f000 fa47 	bl	8012440 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
  }

  return;
}
 8011fb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8011fb6:	4805      	ldr	r0, [pc, #20]	; (8011fcc <TlEvtReceived+0x2c>)
 8011fb8:	f7fb b81c 	b.w	800cff4 <hci_notify_asynch_evt>
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8011fbc:	4804      	ldr	r0, [pc, #16]	; (8011fd0 <TlEvtReceived+0x30>)
 8011fbe:	f000 fa3f 	bl	8012440 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8011fc2:	2000      	movs	r0, #0
 8011fc4:	f7fb f81a 	bl	800cffc <hci_cmd_resp_release>
}
 8011fc8:	bd08      	pop	{r3, pc}
 8011fca:	bf00      	nop
 8011fcc:	200002cc 	.word	0x200002cc
 8011fd0:	200005e0 	.word	0x200005e0

08011fd4 <hci_register_io_bus>:


void hci_register_io_bus(tHciIO* fops)
{
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8011fd4:	4a02      	ldr	r2, [pc, #8]	; (8011fe0 <hci_register_io_bus+0xc>)
  fops->Send    = TL_BLE_SendCmd;
 8011fd6:	4b03      	ldr	r3, [pc, #12]	; (8011fe4 <hci_register_io_bus+0x10>)
  fops->Init    = TL_BLE_Init;
 8011fd8:	6002      	str	r2, [r0, #0]
  fops->Send    = TL_BLE_SendCmd;
 8011fda:	6103      	str	r3, [r0, #16]

  return;
}
 8011fdc:	4770      	bx	lr
 8011fde:	bf00      	nop
 8011fe0:	08012a75 	.word	0x08012a75
 8011fe4:	08012abd 	.word	0x08012abd

08011fe8 <Osal_MemCpy>:
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
  return memcpy( dest, src, size ); 
 8011fe8:	f000 bfbe 	b.w	8012f68 <memcpy>

08011fec <Osal_MemSet>:
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
  return memset( ptr, value, size );
 8011fec:	f000 bfca 	b.w	8012f84 <memset>

08011ff0 <OTP_Read>:
{
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8011ff0:	4b0a      	ldr	r3, [pc, #40]	; (801201c <OTP_Read+0x2c>)
 8011ff2:	79d9      	ldrb	r1, [r3, #7]
 8011ff4:	4281      	cmp	r1, r0
{
 8011ff6:	4602      	mov	r2, r0
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8011ff8:	d00d      	beq.n	8012016 <OTP_Read+0x26>
 8011ffa:	4909      	ldr	r1, [pc, #36]	; (8012020 <OTP_Read+0x30>)
  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	e001      	b.n	8012004 <OTP_Read+0x14>
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8012000:	4288      	cmp	r0, r1
 8012002:	d006      	beq.n	8012012 <OTP_Read+0x22>
 8012004:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8012008:	4293      	cmp	r3, r2
  {
    p_id -= 8 ;
 801200a:	f1a0 0008 	sub.w	r0, r0, #8
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 801200e:	d1f7      	bne.n	8012000 <OTP_Read+0x10>
  {
    p_id = 0 ;
  }

  return p_id ;
}
 8012010:	4770      	bx	lr
    p_id = 0 ;
 8012012:	2000      	movs	r0, #0
 8012014:	4770      	bx	lr
  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8012016:	4618      	mov	r0, r3
  return p_id ;
 8012018:	e7fa      	b.n	8012010 <OTP_Read+0x20>
 801201a:	bf00      	nop
 801201c:	1fff73f8 	.word	0x1fff73f8
 8012020:	1fff7000 	.word	0x1fff7000

08012024 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8012024:	b510      	push	{r4, lr}
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);

  switch(event_pckt->evt)
 8012026:	7843      	ldrb	r3, [r0, #1]
 8012028:	2bff      	cmp	r3, #255	; 0xff
{
 801202a:	b084      	sub	sp, #16
  switch(event_pckt->evt)
 801202c:	d003      	beq.n	8012036 <PeerToPeer_Event_Handler+0x12>
  return_value = SVCCTL_EvtNotAck;
 801202e:	2400      	movs	r4, #0
    default:
      break;
  }

  return(return_value);
}/* end SVCCTL_EvtAckStatus_t */
 8012030:	4620      	mov	r0, r4
 8012032:	b004      	add	sp, #16
 8012034:	bd10      	pop	{r4, pc}
      switch(blecore_evt->ecode)
 8012036:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 801203a:	f640 4301 	movw	r3, #3073	; 0xc01
 801203e:	429a      	cmp	r2, r3
 8012040:	4604      	mov	r4, r0
 8012042:	d1f4      	bne.n	801202e <PeerToPeer_Event_Handler+0xa>
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8012044:	4916      	ldr	r1, [pc, #88]	; (80120a0 <PeerToPeer_Event_Handler+0x7c>)
 8012046:	f8b0 2007 	ldrh.w	r2, [r0, #7]
 801204a:	888b      	ldrh	r3, [r1, #4]
 801204c:	3302      	adds	r3, #2
 801204e:	429a      	cmp	r2, r3
 8012050:	d014      	beq.n	801207c <PeerToPeer_Event_Handler+0x58>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8012052:	884b      	ldrh	r3, [r1, #2]
 8012054:	3301      	adds	r3, #1
 8012056:	429a      	cmp	r2, r3
 8012058:	d1e9      	bne.n	801202e <PeerToPeer_Event_Handler+0xa>
              BLE_DBG_P2P_STM_MSG("-- GATT : LED CONFIGURATION RECEIVED\n");
 801205a:	4812      	ldr	r0, [pc, #72]	; (80120a4 <PeerToPeer_Event_Handler+0x80>)
 801205c:	f001 f820 	bl	80130a0 <puts>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8012060:	340d      	adds	r4, #13
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8012062:	f834 3c02 	ldrh.w	r3, [r4, #-2]
 8012066:	f88d 3008 	strb.w	r3, [sp, #8]
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 801206a:	2203      	movs	r2, #3
              P2PS_STM_App_Notification(&Notification);  
 801206c:	4668      	mov	r0, sp
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 801206e:	9401      	str	r4, [sp, #4]
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8012070:	f88d 2000 	strb.w	r2, [sp]
              P2PS_STM_App_Notification(&Notification);  
 8012074:	2400      	movs	r4, #0
 8012076:	f7fa ffc9 	bl	800d00c <P2PS_STM_App_Notification>
  return(return_value);
 801207a:	e7d9      	b.n	8012030 <PeerToPeer_Event_Handler+0xc>
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 801207c:	7b44      	ldrb	r4, [r0, #13]
 801207e:	f014 0401 	ands.w	r4, r4, #1
 8012082:	d006      	beq.n	8012092 <PeerToPeer_Event_Handler+0x6e>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8012084:	2300      	movs	r3, #0
                P2PS_STM_App_Notification(&Notification);
 8012086:	4668      	mov	r0, sp
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8012088:	f88d 3000 	strb.w	r3, [sp]
                P2PS_STM_App_Notification(&Notification);
 801208c:	f7fa ffbe 	bl	800d00c <P2PS_STM_App_Notification>
 8012090:	e7ce      	b.n	8012030 <PeerToPeer_Event_Handler+0xc>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8012092:	2401      	movs	r4, #1
                P2PS_STM_App_Notification(&Notification);
 8012094:	4668      	mov	r0, sp
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8012096:	f88d 4000 	strb.w	r4, [sp]
                P2PS_STM_App_Notification(&Notification);
 801209a:	f7fa ffb7 	bl	800d00c <P2PS_STM_App_Notification>
 801209e:	e7c7      	b.n	8012030 <PeerToPeer_Event_Handler+0xc>
 80120a0:	200002d8 	.word	0x200002d8
 80120a4:	080167bc 	.word	0x080167bc

080120a8 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 80120a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 80120ac:	4825      	ldr	r0, [pc, #148]	; (8012144 <P2PS_STM_Init+0x9c>)
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
    aci_gatt_add_service(UUID_TYPE_128,
 80120ae:	4c26      	ldr	r4, [pc, #152]	; (8012148 <P2PS_STM_Init+0xa0>)
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 80120b0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8012158 <P2PS_STM_Init+0xb0>
 80120b4:	4f25      	ldr	r7, [pc, #148]	; (801214c <P2PS_STM_Init+0xa4>)
 80120b6:	4e26      	ldr	r6, [pc, #152]	; (8012150 <P2PS_STM_Init+0xa8>)
{
 80120b8:	b08a      	sub	sp, #40	; 0x28
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 80120ba:	f000 fc65 	bl	8012988 <SVCCTL_RegisterSvcHandler>
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 80120be:	f8df e09c 	ldr.w	lr, [pc, #156]	; 801215c <P2PS_STM_Init+0xb4>
 80120c2:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8012160 <P2PS_STM_Init+0xb8>
 80120c6:	4b23      	ldr	r3, [pc, #140]	; (8012154 <P2PS_STM_Init+0xac>)
    aci_gatt_add_service(UUID_TYPE_128,
 80120c8:	9400      	str	r4, [sp, #0]
 80120ca:	a906      	add	r1, sp, #24
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 80120cc:	9306      	str	r3, [sp, #24]
 80120ce:	f64f 6540 	movw	r5, #65088	; 0xfe40
    aci_gatt_add_service(UUID_TYPE_128,
 80120d2:	2308      	movs	r3, #8
 80120d4:	2201      	movs	r2, #1
 80120d6:	2002      	movs	r0, #2
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 80120d8:	e9cd ec07 	strd	lr, ip, [sp, #28]
 80120dc:	9509      	str	r5, [sp, #36]	; 0x24
    aci_gatt_add_service(UUID_TYPE_128,
 80120de:	f7ff fbef 	bl	80118c0 <aci_gatt_add_service>
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 80120e2:	4623      	mov	r3, r4
 80120e4:	2501      	movs	r5, #1
 80120e6:	f833 0b02 	ldrh.w	r0, [r3], #2
 80120ea:	9305      	str	r3, [sp, #20]
 80120ec:	f04f 0a0a 	mov.w	sl, #10
 80120f0:	f04f 0900 	mov.w	r9, #0
 80120f4:	2306      	movs	r3, #6
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 80120f6:	f64f 6c41 	movw	ip, #65089	; 0xfe41
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 80120fa:	e9cd 3900 	strd	r3, r9, [sp]
 80120fe:	aa06      	add	r2, sp, #24
 8012100:	e9cd 5a02 	strd	r5, sl, [sp, #8]
 8012104:	9504      	str	r5, [sp, #16]
 8012106:	2332      	movs	r3, #50	; 0x32
 8012108:	2102      	movs	r1, #2
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 801210a:	e9cd 6c08 	strd	r6, ip, [sp, #32]
 801210e:	e9cd 8706 	strd	r8, r7, [sp, #24]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8012112:	f7ff fc33 	bl	801197c <aci_gatt_add_char>

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8012116:	f834 0b04 	ldrh.w	r0, [r4], #4
 801211a:	9405      	str	r4, [sp, #20]
 801211c:	2310      	movs	r3, #16
 801211e:	9300      	str	r3, [sp, #0]
 8012120:	e9cd a503 	strd	sl, r5, [sp, #12]
 8012124:	e9cd 9501 	strd	r9, r5, [sp, #4]
 8012128:	aa06      	add	r2, sp, #24
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 801212a:	f64f 6442 	movw	r4, #65090	; 0xfe42
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 801212e:	2332      	movs	r3, #50	; 0x32
 8012130:	2102      	movs	r1, #2
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8012132:	e9cd 8706 	strd	r8, r7, [sp, #24]
 8012136:	e9cd 6408 	strd	r6, r4, [sp, #32]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 801213a:	f7ff fc1f 	bl	801197c <aci_gatt_add_char>
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
}
 801213e:	b00a      	add	sp, #40	; 0x28
 8012140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012144:	08012025 	.word	0x08012025
 8012148:	200002d8 	.word	0x200002d8
 801214c:	9d4c21ed 	.word	0x9d4c21ed
 8012150:	8e224541 	.word	0x8e224541
 8012154:	d5b3e58f 	.word	0xd5b3e58f
 8012158:	ae82ed19 	.word	0xae82ed19
 801215c:	984a7f2e 	.word	0x984a7f2e
 8012160:	cc7a482a 	.word	0xcc7a482a

08012164 <P2PS_STM_App_Update_Char_With_Len>:

tBleStatus P2PS_STM_App_Update_Char_With_Len(uint16_t UUID, uint8_t *pPayload, uint8_t len)
{
 8012164:	b510      	push	{r4, lr}
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
  switch(UUID)
 8012166:	f64f 6441 	movw	r4, #65089	; 0xfe41
 801216a:	42a0      	cmp	r0, r4
{
 801216c:	b082      	sub	sp, #8
 801216e:	4613      	mov	r3, r2
  switch(UUID)
 8012170:	d00f      	beq.n	8012192 <P2PS_STM_App_Update_Char_With_Len+0x2e>
 8012172:	f64f 6242 	movw	r2, #65090	; 0xfe42
 8012176:	4290      	cmp	r0, r2
 8012178:	d108      	bne.n	801218c <P2PS_STM_App_Update_Char_With_Len+0x28>
  {
    case P2P_NOTIFY_CHAR_UUID:

     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 801217a:	4a0a      	ldr	r2, [pc, #40]	; (80121a4 <P2PS_STM_App_Update_Char_With_Len+0x40>)
 801217c:	9100      	str	r1, [sp, #0]
 801217e:	8891      	ldrh	r1, [r2, #4]
 8012180:	8810      	ldrh	r0, [r2, #0]
 8012182:	2200      	movs	r2, #0
 8012184:	f7ff fc72 	bl	8011a6c <aci_gatt_update_char_value>
    default:
      break;
  }

  return result;
}
 8012188:	b002      	add	sp, #8
 801218a:	bd10      	pop	{r4, pc}
  switch(UUID)
 801218c:	2092      	movs	r0, #146	; 0x92
}
 801218e:	b002      	add	sp, #8
 8012190:	bd10      	pop	{r4, pc}
        result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 8012192:	4a04      	ldr	r2, [pc, #16]	; (80121a4 <P2PS_STM_App_Update_Char_With_Len+0x40>)
 8012194:	9100      	str	r1, [sp, #0]
 8012196:	8851      	ldrh	r1, [r2, #2]
 8012198:	8810      	ldrh	r0, [r2, #0]
 801219a:	2200      	movs	r2, #0
 801219c:	f7ff fc66 	bl	8011a6c <aci_gatt_update_char_value>
}
 80121a0:	b002      	add	sp, #8
 80121a2:	bd10      	pop	{r4, pc}
 80121a4:	200002d8 	.word	0x200002d8

080121a8 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80121a8:	b500      	push	{lr}
 80121aa:	b085      	sub	sp, #20
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80121ac:	f100 020c 	add.w	r2, r0, #12
 80121b0:	466b      	mov	r3, sp
 80121b2:	2125      	movs	r1, #37	; 0x25
 80121b4:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80121b8:	f000 f8d8 	bl	801236c <shci_send>
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}
 80121bc:	f89d 000e 	ldrb.w	r0, [sp, #14]
 80121c0:	b005      	add	sp, #20
 80121c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80121c6:	bf00      	nop

080121c8 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80121c8:	b500      	push	{lr}
 80121ca:	b085      	sub	sp, #20
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80121cc:	f100 020c 	add.w	r2, r0, #12
 80121d0:	466b      	mov	r3, sp
 80121d2:	210f      	movs	r1, #15
 80121d4:	f64f 4068 	movw	r0, #64616	; 0xfc68
 80121d8:	f000 f8c8 	bl	801236c <shci_send>
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}
 80121dc:	f89d 000e 	ldrb.w	r0, [sp, #14]
 80121e0:	b005      	add	sp, #20
 80121e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80121e6:	bf00      	nop

080121e8 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80121e8:	b500      	push	{lr}
 80121ea:	b085      	sub	sp, #20
 80121ec:	4602      	mov	r2, r0
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;

  shci_send( SHCI_OPCODE_C2_CONFIG,
 80121ee:	466b      	mov	r3, sp
 80121f0:	210e      	movs	r1, #14
 80121f2:	f64f 4075 	movw	r0, #64629	; 0xfc75
 80121f6:	f000 f8b9 	bl	801236c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}
 80121fa:	f89d 000e 	ldrb.w	r0, [sp, #14]
 80121fe:	b005      	add	sp, #20
 8012200:	f85d fb04 	ldr.w	pc, [sp], #4

08012204 <SHCI_GetWirelessFwInfo>:
  uint32_t wireless_firmware_infoStack = 0;
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
  uint32_t fus_version = 0;
  uint32_t fus_memorySize = 0;

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8012204:	4b1d      	ldr	r3, [pc, #116]	; (801227c <SHCI_GetWirelessFwInfo+0x78>)
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8012206:	4a1e      	ldr	r2, [pc, #120]	; (8012280 <SHCI_GetWirelessFwInfo+0x7c>)
  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8012208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 801220a:	009b      	lsls	r3, r3, #2
 801220c:	b29b      	uxth	r3, r3
 801220e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8012212:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
{
 8012216:	b4f0      	push	{r4, r5, r6, r7}
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8012218:	6819      	ldr	r1, [r3, #0]
  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 801221a:	680b      	ldr	r3, [r1, #0]
 801221c:	4293      	cmp	r3, r2
 801221e:	d026      	beq.n	801226e <SHCI_GetWirelessFwInfo+0x6a>

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8012220:	690b      	ldr	r3, [r1, #16]
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8012222:	694a      	ldr	r2, [r1, #20]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8012224:	698e      	ldr	r6, [r1, #24]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8012226:	684c      	ldr	r4, [r1, #4]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8012228:	6889      	ldr	r1, [r1, #8]
  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 801222a:	7246      	strb	r6, [r0, #9]
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 801222c:	0e1d      	lsrs	r5, r3, #24
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 801222e:	0c1e      	lsrs	r6, r3, #16
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8012230:	7005      	strb	r5, [r0, #0]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8012232:	0a1d      	lsrs	r5, r3, #8
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8012234:	7046      	strb	r6, [r0, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8012236:	7085      	strb	r5, [r0, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8012238:	f3c3 1603 	ubfx	r6, r3, #4, #4
  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 801223c:	0e15      	lsrs	r5, r2, #24
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 801223e:	f003 030f 	and.w	r3, r3, #15
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8012242:	7202      	strb	r2, [r0, #8]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8012244:	73c1      	strb	r1, [r0, #15]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8012246:	70c6      	strb	r6, [r0, #3]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8012248:	0c17      	lsrs	r7, r2, #16
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 801224a:	7103      	strb	r3, [r0, #4]
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 801224c:	0e26      	lsrs	r6, r4, #24
  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 801224e:	7145      	strb	r5, [r0, #5]
  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8012250:	0e0b      	lsrs	r3, r1, #24
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8012252:	0c25      	lsrs	r5, r4, #16
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8012254:	0a12      	lsrs	r2, r2, #8
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8012256:	0a24      	lsrs	r4, r4, #8
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8012258:	0c09      	lsrs	r1, r1, #16
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 801225a:	7187      	strb	r7, [r0, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 801225c:	71c2      	strb	r2, [r0, #7]
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 801225e:	7286      	strb	r6, [r0, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8012260:	72c5      	strb	r5, [r0, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8012262:	7304      	strb	r4, [r0, #12]
  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8012264:	7343      	strb	r3, [r0, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8012266:	7381      	strb	r1, [r0, #14]

  return (SHCI_Success);
}
 8012268:	bcf0      	pop	{r4, r5, r6, r7}
 801226a:	2000      	movs	r0, #0
 801226c:	4770      	bx	lr
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 801226e:	e9d1 3205 	ldrd	r3, r2, [r1, #20]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8012272:	69ce      	ldr	r6, [r1, #28]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8012274:	e9d1 4103 	ldrd	r4, r1, [r1, #12]
 8012278:	e7d7      	b.n	801222a <SHCI_GetWirelessFwInfo+0x26>
 801227a:	bf00      	nop
 801227c:	58004000 	.word	0x58004000
 8012280:	a94656b9 	.word	0xa94656b9

08012284 <TlUserEvtReceived>:

  return;
}

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8012284:	b510      	push	{r4, lr}
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8012286:	4c05      	ldr	r4, [pc, #20]	; (801229c <TlUserEvtReceived+0x18>)
{
 8012288:	4601      	mov	r1, r0
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 801228a:	4620      	mov	r0, r4
 801228c:	f000 f8d8 	bl	8012440 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8012290:	4620      	mov	r0, r4

  return;
}
 8012292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8012296:	f7ef b821 	b.w	80012dc <shci_notify_asynch_evt>
 801229a:	bf00      	nop
 801229c:	200002ec 	.word	0x200002ec

080122a0 <shci_init>:
{
 80122a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  shciContext.UserEvtRx = UserEvtRx;
 80122a2:	4e11      	ldr	r6, [pc, #68]	; (80122e8 <shci_init+0x48>)
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80122a4:	4f11      	ldr	r7, [pc, #68]	; (80122ec <shci_init+0x4c>)
 80122a6:	684b      	ldr	r3, [r1, #4]
  pCmdBuffer = p_cmdbuffer;
 80122a8:	4c11      	ldr	r4, [pc, #68]	; (80122f0 <shci_init+0x50>)
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80122aa:	603b      	str	r3, [r7, #0]
{
 80122ac:	460d      	mov	r5, r1
 80122ae:	4603      	mov	r3, r0
 80122b0:	b085      	sub	sp, #20
  shci_register_io_bus (&shciContext.io);
 80122b2:	4630      	mov	r0, r6
  shciContext.UserEvtRx = UserEvtRx;
 80122b4:	61f3      	str	r3, [r6, #28]
  shci_register_io_bus (&shciContext.io);
 80122b6:	f000 f89d 	bl	80123f4 <shci_register_io_bus>
  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80122ba:	682d      	ldr	r5, [r5, #0]
  pCmdBuffer = p_cmdbuffer;
 80122bc:	60a5      	str	r5, [r4, #8]
  LST_init_head (&SHciAsynchEventQueue);
 80122be:	4620      	mov	r0, r4
 80122c0:	f000 f8a2 	bl	8012408 <LST_init_head>
    if(StatusNotCallBackFunction != 0)
 80122c4:	683b      	ldr	r3, [r7, #0]
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80122c6:	2001      	movs	r0, #1
 80122c8:	7320      	strb	r0, [r4, #12]
    if(StatusNotCallBackFunction != 0)
 80122ca:	b103      	cbz	r3, 80122ce <shci_init+0x2e>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80122cc:	4798      	blx	r3
  if (shciContext.io.Init)
 80122ce:	6833      	ldr	r3, [r6, #0]
  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80122d0:	2201      	movs	r2, #1
 80122d2:	7362      	strb	r2, [r4, #13]
  if (shciContext.io.Init)
 80122d4:	b133      	cbz	r3, 80122e4 <shci_init+0x44>
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80122d6:	4907      	ldr	r1, [pc, #28]	; (80122f4 <shci_init+0x54>)
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80122d8:	4a07      	ldr	r2, [pc, #28]	; (80122f8 <shci_init+0x58>)
    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80122da:	9503      	str	r5, [sp, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80122dc:	e9cd 1201 	strd	r1, r2, [sp, #4]
    shciContext.io.Init(&Conf);
 80122e0:	a801      	add	r0, sp, #4
 80122e2:	4798      	blx	r3
}
 80122e4:	b005      	add	sp, #20
 80122e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122e8:	20000610 	.word	0x20000610
 80122ec:	2000060c 	.word	0x2000060c
 80122f0:	200002ec 	.word	0x200002ec
 80122f4:	080123e9 	.word	0x080123e9
 80122f8:	08012285 	.word	0x08012285

080122fc <shci_user_evt_proc>:
{
 80122fc:	b510      	push	{r4, lr}
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80122fe:	4c19      	ldr	r4, [pc, #100]	; (8012364 <shci_user_evt_proc+0x68>)
{
 8012300:	b084      	sub	sp, #16
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8012302:	4620      	mov	r0, r4
 8012304:	f000 f884 	bl	8012410 <LST_is_empty>
 8012308:	b908      	cbnz	r0, 801230e <shci_user_evt_proc+0x12>
 801230a:	7b63      	ldrb	r3, [r4, #13]
 801230c:	b963      	cbnz	r3, 8012328 <shci_user_evt_proc+0x2c>
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 801230e:	4815      	ldr	r0, [pc, #84]	; (8012364 <shci_user_evt_proc+0x68>)
 8012310:	f000 f87e 	bl	8012410 <LST_is_empty>
 8012314:	b908      	cbnz	r0, 801231a <shci_user_evt_proc+0x1e>
 8012316:	7b63      	ldrb	r3, [r4, #13]
 8012318:	b90b      	cbnz	r3, 801231e <shci_user_evt_proc+0x22>
}
 801231a:	b004      	add	sp, #16
 801231c:	bd10      	pop	{r4, pc}
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 801231e:	4811      	ldr	r0, [pc, #68]	; (8012364 <shci_user_evt_proc+0x68>)
 8012320:	f7ee ffdc 	bl	80012dc <shci_notify_asynch_evt>
}
 8012324:	b004      	add	sp, #16
 8012326:	bd10      	pop	{r4, pc}
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8012328:	a901      	add	r1, sp, #4
 801232a:	4620      	mov	r0, r4
 801232c:	f000 f894 	bl	8012458 <LST_remove_head>
    if (shciContext.UserEvtRx != NULL)
 8012330:	4b0d      	ldr	r3, [pc, #52]	; (8012368 <shci_user_evt_proc+0x6c>)
 8012332:	69db      	ldr	r3, [r3, #28]
 8012334:	b17b      	cbz	r3, 8012356 <shci_user_evt_proc+0x5a>
      UserEvtRxParam.pckt = phcievtbuffer;
 8012336:	9a01      	ldr	r2, [sp, #4]
 8012338:	9203      	str	r2, [sp, #12]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 801233a:	2201      	movs	r2, #1
 801233c:	f88d 2008 	strb.w	r2, [sp, #8]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8012340:	a802      	add	r0, sp, #8
 8012342:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8012344:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012348:	7363      	strb	r3, [r4, #13]
    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 801234a:	b933      	cbnz	r3, 801235a <shci_user_evt_proc+0x5e>
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 801234c:	9901      	ldr	r1, [sp, #4]
 801234e:	4620      	mov	r0, r4
 8012350:	f000 f86a 	bl	8012428 <LST_insert_head>
 8012354:	e7db      	b.n	801230e <shci_user_evt_proc+0x12>
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8012356:	2301      	movs	r3, #1
 8012358:	7363      	strb	r3, [r4, #13]
      TL_MM_EvtDone( phcievtbuffer );
 801235a:	9801      	ldr	r0, [sp, #4]
 801235c:	f000 fc4a 	bl	8012bf4 <TL_MM_EvtDone>
 8012360:	e7d5      	b.n	801230e <shci_user_evt_proc+0x12>
 8012362:	bf00      	nop
 8012364:	200002ec 	.word	0x200002ec
 8012368:	20000610 	.word	0x20000610

0801236c <shci_send>:
{
 801236c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(StatusNotCallBackFunction != 0)
 8012370:	f8df 8070 	ldr.w	r8, [pc, #112]	; 80123e4 <shci_send+0x78>
 8012374:	f8d8 4000 	ldr.w	r4, [r8]
{
 8012378:	460d      	mov	r5, r1
 801237a:	b082      	sub	sp, #8
 801237c:	4607      	mov	r7, r0
 801237e:	4611      	mov	r1, r2
 8012380:	461e      	mov	r6, r3
    if(StatusNotCallBackFunction != 0)
 8012382:	b11c      	cbz	r4, 801238c <shci_send+0x20>
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8012384:	2000      	movs	r0, #0
 8012386:	9201      	str	r2, [sp, #4]
 8012388:	47a0      	blx	r4
 801238a:	9901      	ldr	r1, [sp, #4]
    SHCICmdStatus = SHCI_TL_CmdBusy;
 801238c:	4c13      	ldr	r4, [pc, #76]	; (80123dc <shci_send+0x70>)
  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 801238e:	68a0      	ldr	r0, [r4, #8]
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8012390:	462a      	mov	r2, r5
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8012392:	72c5      	strb	r5, [r0, #11]
  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8012394:	f8a0 7009 	strh.w	r7, [r0, #9]
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8012398:	2500      	movs	r5, #0
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 801239a:	300c      	adds	r0, #12
    SHCICmdStatus = SHCI_TL_CmdBusy;
 801239c:	7325      	strb	r5, [r4, #12]
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 801239e:	f000 fde3 	bl	8012f68 <memcpy>
  shciContext.io.Send(0,0);
 80123a2:	4b0f      	ldr	r3, [pc, #60]	; (80123e0 <shci_send+0x74>)
 80123a4:	4629      	mov	r1, r5
 80123a6:	691b      	ldr	r3, [r3, #16]
 80123a8:	4628      	mov	r0, r5
 80123aa:	4798      	blx	r3
  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80123ac:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80123b0:	f7ee ff9e 	bl	80012f0 <shci_cmd_resp_wait>
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80123b4:	68a1      	ldr	r1, [r4, #8]
 80123b6:	788a      	ldrb	r2, [r1, #2]
 80123b8:	f106 0008 	add.w	r0, r6, #8
 80123bc:	3203      	adds	r2, #3
 80123be:	f000 fdd3 	bl	8012f68 <memcpy>
    if(StatusNotCallBackFunction != 0)
 80123c2:	f8d8 3000 	ldr.w	r3, [r8]
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80123c6:	2001      	movs	r0, #1
 80123c8:	7320      	strb	r0, [r4, #12]
    if(StatusNotCallBackFunction != 0)
 80123ca:	b11b      	cbz	r3, 80123d4 <shci_send+0x68>
}
 80123cc:	b002      	add	sp, #8
 80123ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80123d2:	4718      	bx	r3
}
 80123d4:	b002      	add	sp, #8
 80123d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123da:	bf00      	nop
 80123dc:	200002ec 	.word	0x200002ec
 80123e0:	20000610 	.word	0x20000610
 80123e4:	2000060c 	.word	0x2000060c

080123e8 <TlCmdEvtReceived>:
{
 80123e8:	b508      	push	{r3, lr}
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80123ea:	2000      	movs	r0, #0
 80123ec:	f7ee ff7c 	bl	80012e8 <shci_cmd_resp_release>
}
 80123f0:	bd08      	pop	{r3, pc}
 80123f2:	bf00      	nop

080123f4 <shci_register_io_bus>:


void shci_register_io_bus(tSHciIO* fops)
{
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80123f4:	4a02      	ldr	r2, [pc, #8]	; (8012400 <shci_register_io_bus+0xc>)
  fops->Send    = TL_SYS_SendCmd;
 80123f6:	4b03      	ldr	r3, [pc, #12]	; (8012404 <shci_register_io_bus+0x10>)
  fops->Init    = TL_SYS_Init;
 80123f8:	6002      	str	r2, [r0, #0]
  fops->Send    = TL_SYS_SendCmd;
 80123fa:	6103      	str	r3, [r0, #16]

  return;
}
 80123fc:	4770      	bx	lr
 80123fe:	bf00      	nop
 8012400:	08012b15 	.word	0x08012b15
 8012404:	08012b51 	.word	0x08012b51

08012408 <LST_init_head>:
/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 8012408:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;
 801240a:	6040      	str	r0, [r0, #4]
}
 801240c:	4770      	bx	lr
 801240e:	bf00      	nop

08012410 <LST_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012410:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012414:	b672      	cpsid	i
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8012416:	6802      	ldr	r2, [r0, #0]
  {
    return_value = TRUE;
 8012418:	1a80      	subs	r0, r0, r2
 801241a:	fab0 f080 	clz	r0, r0
 801241e:	0940      	lsrs	r0, r0, #5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012420:	f383 8810 	msr	PRIMASK, r3
    return_value = FALSE;
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
}
 8012424:	4770      	bx	lr
 8012426:	bf00      	nop

08012428 <LST_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012428:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801242c:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 801242e:	6802      	ldr	r2, [r0, #0]
 8012430:	600a      	str	r2, [r1, #0]
  node->prev = listHead;
 8012432:	6048      	str	r0, [r1, #4]
  listHead->next = node;
 8012434:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 8012436:	680a      	ldr	r2, [r1, #0]
 8012438:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801243a:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801243e:	4770      	bx	lr

08012440 <LST_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012440:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012444:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8012446:	6008      	str	r0, [r1, #0]
  node->prev = listHead->prev;
 8012448:	6842      	ldr	r2, [r0, #4]
 801244a:	604a      	str	r2, [r1, #4]
  listHead->prev = node;
 801244c:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 801244e:	684a      	ldr	r2, [r1, #4]
 8012450:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012452:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8012456:	4770      	bx	lr

08012458 <LST_remove_head>:
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8012458:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801245a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801245e:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8012460:	6803      	ldr	r3, [r0, #0]
 8012462:	600b      	str	r3, [r1, #0]
  LST_remove_node (listHead->next);
 8012464:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012466:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801246a:	b672      	cpsid	i
  (node->prev)->next = node->next;
 801246c:	685a      	ldr	r2, [r3, #4]
 801246e:	6818      	ldr	r0, [r3, #0]
 8012470:	6010      	str	r0, [r2, #0]
  (node->next)->prev = node->prev;
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012476:	f381 8810 	msr	PRIMASK, r1
 801247a:	f384 8810 	msr	PRIMASK, r4

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801247e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012482:	4770      	bx	lr

08012484 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8012484:	b430      	push	{r4, r5}
 8012486:	f89d 4008 	ldrb.w	r4, [sp, #8]
  q->last = 0; /* queueSize-1; */
  q->byteCount = 0;
  q->elementCount = 0;
  q->queueMaxSize = queueSize;
  q->elementSize = elementSize;
  q->optionFlags = optionFlags;
 801248a:	7704      	strb	r4, [r0, #28]
  q->first = 0;
 801248c:	2500      	movs	r5, #0
  q->queueMaxSize = queueSize;
 801248e:	e9c0 1200 	strd	r1, r2, [r0]
  q->last = 0; /* queueSize-1; */
 8012492:	e9c0 5503 	strd	r5, r5, [r0, #12]
  q->elementCount = 0;
 8012496:	e9c0 5505 	strd	r5, r5, [r0, #20]
  q->elementSize = elementSize;
 801249a:	8103      	strh	r3, [r0, #8]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 801249c:	f014 0002 	ands.w	r0, r4, #2
 80124a0:	d003      	beq.n	80124aa <CircularQueue_Init+0x26>
 80124a2:	1b58      	subs	r0, r3, r5
 80124a4:	bf18      	it	ne
 80124a6:	2001      	movne	r0, #1
 80124a8:	4240      	negs	r0, r0
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
  }
  return 0;
}
 80124aa:	bc30      	pop	{r4, r5}
 80124ac:	4770      	bx	lr
 80124ae:	bf00      	nop

080124b0 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 80124b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 80124b4:	f8b0 c008 	ldrh.w	ip, [r0, #8]
{
 80124b8:	b087      	sub	sp, #28
 80124ba:	4604      	mov	r4, r0
 80124bc:	9101      	str	r1, [sp, #4]
 80124be:	4698      	mov	r8, r3
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 80124c0:	f1bc 0f00 	cmp.w	ip, #0
 80124c4:	f040 811e 	bne.w	8012704 <CircularQueue_Add+0x254>
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 80124c8:	4615      	mov	r5, r2
 80124ca:	6942      	ldr	r2, [r0, #20]
 80124cc:	2a00      	cmp	r2, #0
 80124ce:	f040 808b 	bne.w	80125e8 <CircularQueue_Add+0x138>
 80124d2:	2102      	movs	r1, #2
 80124d4:	6900      	ldr	r0, [r0, #16]
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 80124d6:	9104      	str	r1, [sp, #16]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 80124d8:	4692      	mov	sl, r2
  if (q->elementSize > 0)               
  {
    elementSize = q->elementSize;
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 80124da:	68e3      	ldr	r3, [r4, #12]
 80124dc:	4283      	cmp	r3, r0
 80124de:	f200 8099 	bhi.w	8012614 <CircularQueue_Add+0x164>
 80124e2:	6863      	ldr	r3, [r4, #4]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 80124e4:	4429      	add	r1, r5
   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 80124e6:	1a1b      	subs	r3, r3, r0
 80124e8:	eba3 070a 	sub.w	r7, r3, sl
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 80124ec:	fb08 f601 	mul.w	r6, r8, r1
 80124f0:	42be      	cmp	r6, r7
 80124f2:	f080 810f 	bcs.w	8012714 <CircularQueue_Add+0x264>
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 80124f6:	2300      	movs	r3, #0
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 80124f8:	2d00      	cmp	r5, #0
 80124fa:	f000 8092 	beq.w	8012622 <CircularQueue_Add+0x172>
 80124fe:	6861      	ldr	r1, [r4, #4]
 8012500:	4416      	add	r6, r2
 8012502:	4433      	add	r3, r6
 8012504:	428b      	cmp	r3, r1
 8012506:	f200 808c 	bhi.w	8012622 <CircularQueue_Add+0x172>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 801250a:	f1b8 0f00 	cmp.w	r8, #0
 801250e:	f000 80ee 	beq.w	80126ee <CircularQueue_Add+0x23e>
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8012512:	9b04      	ldr	r3, [sp, #16]
 8012514:	eb05 0e03 	add.w	lr, r5, r3
 8012518:	fa1f f38e 	uxth.w	r3, lr
          curBuffPosition = 0; 
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 801251c:	2700      	movs	r7, #0
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 801251e:	9305      	str	r3, [sp, #20]
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8012520:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8012524:	9303      	str	r3, [sp, #12]
    for (i=0; i < nbElements; i++) 
 8012526:	463e      	mov	r6, r7
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8012528:	463b      	mov	r3, r7
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 801252a:	4450      	add	r0, sl
 801252c:	4288      	cmp	r0, r1
 801252e:	bf28      	it	cs
 8012530:	1a40      	subcs	r0, r0, r1
 8012532:	6120      	str	r0, [r4, #16]
      if (q->elementSize == 0) 
 8012534:	f1bc 0f00 	cmp.w	ip, #0
 8012538:	d112      	bne.n	8012560 <CircularQueue_Add+0xb0>
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 801253a:	6822      	ldr	r2, [r4, #0]
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 801253c:	9903      	ldr	r1, [sp, #12]
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 801253e:	5415      	strb	r5, [r2, r0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8012540:	6862      	ldr	r2, [r4, #4]
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8012542:	3001      	adds	r0, #1
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8012544:	4282      	cmp	r2, r0
 8012546:	bf98      	it	ls
 8012548:	1a80      	subls	r0, r0, r2
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 801254a:	6822      	ldr	r2, [r4, #0]
 801254c:	5411      	strb	r1, [r2, r0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 801254e:	6861      	ldr	r1, [r4, #4]
        q->byteCount += 2;
 8012550:	6962      	ldr	r2, [r4, #20]
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8012552:	3001      	adds	r0, #1
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8012554:	4281      	cmp	r1, r0
        q->byteCount += 2;
 8012556:	f102 0202 	add.w	r2, r2, #2
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 801255a:	bf98      	it	ls
 801255c:	1a40      	subls	r0, r0, r1
        q->byteCount += 2;
 801255e:	6162      	str	r2, [r4, #20]
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8012560:	eba1 0c00 	sub.w	ip, r1, r0
 8012564:	4565      	cmp	r5, ip
 8012566:	46a9      	mov	r9, r5
 8012568:	bf28      	it	cs
 801256a:	46e1      	movcs	r9, ip
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 801256c:	4565      	cmp	r5, ip
 801256e:	d95c      	bls.n	801262a <CircularQueue_Add+0x17a>
 8012570:	454d      	cmp	r5, r9
 8012572:	f894 c01c 	ldrb.w	ip, [r4, #28]
 8012576:	d87a      	bhi.n	801266e <CircularQueue_Add+0x1be>
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8012578:	f01c 0f01 	tst.w	ip, #1
 801257c:	d07e      	beq.n	801267c <CircularQueue_Add+0x1cc>
          if (q->elementSize == 0)
 801257e:	8921      	ldrh	r1, [r4, #8]
 8012580:	2900      	cmp	r1, #0
 8012582:	f040 8082 	bne.w	801268a <CircularQueue_Add+0x1da>
             q->qBuff[curBuffPosition-2] = 0xFF;
 8012586:	6823      	ldr	r3, [r4, #0]
 8012588:	4403      	add	r3, r0
 801258a:	22ff      	movs	r2, #255	; 0xff
 801258c:	f803 2c02 	strb.w	r2, [r3, #-2]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8012590:	6823      	ldr	r3, [r4, #0]
 8012592:	4418      	add	r0, r3
 8012594:	f800 2c01 	strb.w	r2, [r0, #-1]
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8012598:	6962      	ldr	r2, [r4, #20]
 801259a:	8923      	ldrh	r3, [r4, #8]
 801259c:	444a      	add	r2, r9
 801259e:	6162      	str	r2, [r4, #20]
          if (q->elementSize == 0)
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	f040 80d0 	bne.w	8012746 <CircularQueue_Add+0x296>
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 80125a6:	6822      	ldr	r2, [r4, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80125a8:	9903      	ldr	r1, [sp, #12]
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 80125aa:	7015      	strb	r5, [r2, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80125ac:	6822      	ldr	r2, [r4, #0]
 80125ae:	7051      	strb	r1, [r2, #1]
            q->byteCount += 2;   
 80125b0:	6962      	ldr	r2, [r4, #20]
 80125b2:	3202      	adds	r2, #2
 80125b4:	6162      	str	r2, [r4, #20]
 80125b6:	46aa      	mov	sl, r5
 80125b8:	46ab      	mov	fp, r5
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80125ba:	2002      	movs	r0, #2
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 80125bc:	9904      	ldr	r1, [sp, #16]
 80125be:	448a      	add	sl, r1
        q->last = 0;        
 80125c0:	2100      	movs	r1, #0
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 80125c2:	fa1f fa8a 	uxth.w	sl, sl
        q->last = 0;        
 80125c6:	6121      	str	r1, [r4, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 80125c8:	f1bb 0f00 	cmp.w	fp, #0
 80125cc:	d140      	bne.n	8012650 <CircularQueue_Add+0x1a0>
 80125ce:	6861      	ldr	r1, [r4, #4]
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
        q->byteCount += NbBytesToCopy;
      }      
      
      /* One more element */
      q->elementCount++;
 80125d0:	69a0      	ldr	r0, [r4, #24]
    for (i=0; i < nbElements; i++) 
 80125d2:	3601      	adds	r6, #1
      q->elementCount++;
 80125d4:	3001      	adds	r0, #1
    for (i=0; i < nbElements; i++) 
 80125d6:	45b0      	cmp	r8, r6
      q->elementCount++;
 80125d8:	61a0      	str	r0, [r4, #24]
    for (i=0; i < nbElements; i++) 
 80125da:	442f      	add	r7, r5
 80125dc:	6920      	ldr	r0, [r4, #16]
 80125de:	f000 8086 	beq.w	80126ee <CircularQueue_Add+0x23e>
 80125e2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80125e6:	e7a0      	b.n	801252a <CircularQueue_Add+0x7a>
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 80125e8:	e9d4 1600 	ldrd	r1, r6, [r4]
 80125ec:	6920      	ldr	r0, [r4, #16]
 80125ee:	1c43      	adds	r3, r0, #1
 80125f0:	42b3      	cmp	r3, r6
 80125f2:	bf28      	it	cs
 80125f4:	1b9b      	subcs	r3, r3, r6
 80125f6:	f811 a000 	ldrb.w	sl, [r1, r0]
 80125fa:	5ccb      	ldrb	r3, [r1, r3]
 80125fc:	f10a 0a02 	add.w	sl, sl, #2
 8012600:	eb0a 2a03 	add.w	sl, sl, r3, lsl #8
   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8012604:	68e3      	ldr	r3, [r4, #12]
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8012606:	2102      	movs	r1, #2
   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8012608:	4283      	cmp	r3, r0
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 801260a:	fa1f fa8a 	uxth.w	sl, sl
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 801260e:	9104      	str	r1, [sp, #16]
   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8012610:	f67f af67 	bls.w	80124e2 <CircularQueue_Add+0x32>
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8012614:	4429      	add	r1, r5
 8012616:	fb08 f601 	mul.w	r6, r8, r1
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 801261a:	2300      	movs	r3, #0
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 801261c:	2d00      	cmp	r5, #0
 801261e:	f47f af6e 	bne.w	80124fe <CircularQueue_Add+0x4e>
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
  }
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
 8012622:	2000      	movs	r0, #0
  }
  return ptr;
}
 8012624:	b007      	add	sp, #28
 8012626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 801262a:	6823      	ldr	r3, [r4, #0]
 801262c:	4418      	add	r0, r3
 801262e:	9b01      	ldr	r3, [sp, #4]
 8012630:	464a      	mov	r2, r9
 8012632:	19d9      	adds	r1, r3, r7
 8012634:	f000 fc98 	bl	8012f68 <memcpy>
        q->byteCount += NbBytesToCopy;
 8012638:	6962      	ldr	r2, [r4, #20]
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 801263a:	f8dd a014 	ldr.w	sl, [sp, #20]
        q->byteCount += NbBytesToCopy;
 801263e:	444a      	add	r2, r9
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8012640:	eba5 0b09 	sub.w	fp, r5, r9
        q->byteCount += NbBytesToCopy;
 8012644:	6162      	str	r2, [r4, #20]
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8012646:	464b      	mov	r3, r9
        curBuffPosition = 0; 
 8012648:	2000      	movs	r0, #0
      if (NbBytesToCopy)      
 801264a:	f1bb 0f00 	cmp.w	fp, #0
 801264e:	d0be      	beq.n	80125ce <CircularQueue_Add+0x11e>
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8012650:	6822      	ldr	r2, [r4, #0]
 8012652:	9302      	str	r3, [sp, #8]
 8012654:	19d9      	adds	r1, r3, r7
 8012656:	9b01      	ldr	r3, [sp, #4]
 8012658:	4410      	add	r0, r2
 801265a:	4419      	add	r1, r3
 801265c:	465a      	mov	r2, fp
 801265e:	f000 fc83 	bl	8012f68 <memcpy>
        q->byteCount += NbBytesToCopy;
 8012662:	6962      	ldr	r2, [r4, #20]
 8012664:	6861      	ldr	r1, [r4, #4]
 8012666:	9b02      	ldr	r3, [sp, #8]
 8012668:	445a      	add	r2, fp
 801266a:	6162      	str	r2, [r4, #20]
 801266c:	e7b0      	b.n	80125d0 <CircularQueue_Add+0x120>
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 801266e:	f1bc 0f00 	cmp.w	ip, #0
 8012672:	d0da      	beq.n	801262a <CircularQueue_Add+0x17a>
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8012674:	f1b9 0f00 	cmp.w	r9, #0
 8012678:	d0aa      	beq.n	80125d0 <CircularQueue_Add+0x120>
 801267a:	e77d      	b.n	8012578 <CircularQueue_Add+0xc8>
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 801267c:	f01c 0f02 	tst.w	ip, #2
 8012680:	d10a      	bne.n	8012698 <CircularQueue_Add+0x1e8>
 8012682:	fa1f fa89 	uxth.w	sl, r9
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8012686:	46cb      	mov	fp, r9
 8012688:	e798      	b.n	80125bc <CircularQueue_Add+0x10c>
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 801268a:	444a      	add	r2, r9
          NbCopiedBytes = 0;
 801268c:	2300      	movs	r3, #0
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 801268e:	6162      	str	r2, [r4, #20]
          curBuffPosition = 0; 
 8012690:	4618      	mov	r0, r3
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8012692:	46aa      	mov	sl, r5
 8012694:	46ab      	mov	fp, r5
 8012696:	e791      	b.n	80125bc <CircularQueue_Add+0x10c>
          if (q->elementSize == 0)
 8012698:	8923      	ldrh	r3, [r4, #8]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d1c1      	bne.n	8012622 <CircularQueue_Add+0x172>
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 801269e:	6823      	ldr	r3, [r4, #0]
 80126a0:	4403      	add	r3, r0
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80126a2:	ea4f 2119 	mov.w	r1, r9, lsr #8
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 80126a6:	f803 9c02 	strb.w	r9, [r3, #-2]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80126aa:	6823      	ldr	r3, [r4, #0]
 80126ac:	4403      	add	r3, r0
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80126ae:	464a      	mov	r2, r9
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80126b0:	f803 1c01 	strb.w	r1, [r3, #-1]
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80126b4:	6823      	ldr	r3, [r4, #0]
 80126b6:	9901      	ldr	r1, [sp, #4]
 80126b8:	4418      	add	r0, r3
 80126ba:	4439      	add	r1, r7
 80126bc:	f000 fc54 	bl	8012f68 <memcpy>
             q->elementCount++;
 80126c0:	e9d4 1305 	ldrd	r1, r3, [r4, #20]
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 80126c4:	6820      	ldr	r0, [r4, #0]
             NbBytesToCopy = elementSize - NbBytesToCopy;
 80126c6:	eba5 0b09 	sub.w	fp, r5, r9
             q->elementCount++;
 80126ca:	3301      	adds	r3, #1
             q->byteCount += NbBytesToCopy; 
 80126cc:	4449      	add	r1, r9
             q->elementCount++;
 80126ce:	e9c4 1305 	strd	r1, r3, [r4, #20]
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 80126d2:	f880 b000 	strb.w	fp, [r0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80126d6:	6823      	ldr	r3, [r4, #0]
 80126d8:	ea4f 221b 	mov.w	r2, fp, lsr #8
 80126dc:	705a      	strb	r2, [r3, #1]
             q->byteCount += 2;              
 80126de:	6962      	ldr	r2, [r4, #20]
 80126e0:	3202      	adds	r2, #2
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 80126e2:	464b      	mov	r3, r9
             q->byteCount += 2;              
 80126e4:	6162      	str	r2, [r4, #20]
 80126e6:	fa1f fa8b 	uxth.w	sl, fp
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80126ea:	2002      	movs	r0, #2
 80126ec:	e766      	b.n	80125bc <CircularQueue_Add+0x10c>
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 80126ee:	9b04      	ldr	r3, [sp, #16]
 80126f0:	4403      	add	r3, r0
 80126f2:	4618      	mov	r0, r3
 80126f4:	4288      	cmp	r0, r1
 80126f6:	6823      	ldr	r3, [r4, #0]
 80126f8:	bf28      	it	cs
 80126fa:	1a40      	subcs	r0, r0, r1
 80126fc:	4418      	add	r0, r3
}
 80126fe:	b007      	add	sp, #28
 8012700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (q->byteCount)
 8012704:	6942      	ldr	r2, [r0, #20]
 8012706:	b1c2      	cbz	r2, 801273a <CircularQueue_Add+0x28a>
 8012708:	2100      	movs	r1, #0
 801270a:	6900      	ldr	r0, [r0, #16]
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 801270c:	9104      	str	r1, [sp, #16]
  if (q->byteCount)
 801270e:	46e2      	mov	sl, ip
 8012710:	4665      	mov	r5, ip
 8012712:	e6e2      	b.n	80124da <CircularQueue_Add+0x2a>
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8012714:	fbb7 f3f1 	udiv	r3, r7, r1
 8012718:	fb01 7313 	mls	r3, r1, r3, r7
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 801271c:	9f04      	ldr	r7, [sp, #16]
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 801271e:	b2db      	uxtb	r3, r3
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8012720:	42bb      	cmp	r3, r7
 8012722:	f67f aee8 	bls.w	80124f6 <CircularQueue_Add+0x46>
 8012726:	7f21      	ldrb	r1, [r4, #28]
 8012728:	f011 0f01 	tst.w	r1, #1
 801272c:	bf08      	it	eq
 801272e:	2300      	moveq	r3, #0
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8012730:	0789      	lsls	r1, r1, #30
 8012732:	f57f aee1 	bpl.w	80124f8 <CircularQueue_Add+0x48>
 8012736:	b2bb      	uxth	r3, r7
 8012738:	e6de      	b.n	80124f8 <CircularQueue_Add+0x48>
  if (q->elementSize > 0)               
 801273a:	6900      	ldr	r0, [r0, #16]
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 801273c:	9204      	str	r2, [sp, #16]
  if (q->byteCount)
 801273e:	4665      	mov	r5, ip
 8012740:	4611      	mov	r1, r2
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8012742:	4692      	mov	sl, r2
 8012744:	e6c9      	b.n	80124da <CircularQueue_Add+0x2a>
          NbCopiedBytes = 0;
 8012746:	460b      	mov	r3, r1
          curBuffPosition = 0; 
 8012748:	4608      	mov	r0, r1
 801274a:	46aa      	mov	sl, r5
 801274c:	46ab      	mov	fp, r5
 801274e:	e735      	b.n	80125bc <CircularQueue_Add+0x10c>

08012750 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 8012750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t  elemSizeStorageRoom = 0;
  uint8_t* ptr= NULL;
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8012754:	8904      	ldrh	r4, [r0, #8]
{
 8012756:	4603      	mov	r3, r0
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8012758:	bb84      	cbnz	r4, 80127bc <CircularQueue_Remove+0x6c>
  uint16_t eltSize = 0;
  if (q->byteCount > 0) 
 801275a:	6946      	ldr	r6, [r0, #20]
 801275c:	2e00      	cmp	r6, #0
 801275e:	d058      	beq.n	8012812 <CircularQueue_Remove+0xc2>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8012760:	e9d3 a700 	ldrd	sl, r7, [r3]
 8012764:	f8d3 800c 	ldr.w	r8, [r3, #12]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8012768:	f893 c01c 	ldrb.w	ip, [r3, #28]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 801276c:	f81a 5008 	ldrb.w	r5, [sl, r8]
 8012770:	f108 0201 	add.w	r2, r8, #1
 8012774:	42ba      	cmp	r2, r7
 8012776:	bf28      	it	cs
 8012778:	1bd2      	subcs	r2, r2, r7
     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 801277a:	f00c 0c03 	and.w	ip, ip, #3
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 801277e:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8012782:	f04f 0e02 	mov.w	lr, #2
 8012786:	eb05 2502 	add.w	r5, r5, r2, lsl #8
     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 801278a:	f1bc 0f01 	cmp.w	ip, #1
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 801278e:	b2ad      	uxth	r5, r5
 8012790:	4672      	mov	r2, lr
     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8012792:	d125      	bne.n	80127e0 <CircularQueue_Remove+0x90>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8012794:	f64f 79ff 	movw	r9, #65535	; 0xffff
 8012798:	454d      	cmp	r5, r9
 801279a:	d03d      	beq.n	8012818 <CircularQueue_Remove+0xc8>
 801279c:	6918      	ldr	r0, [r3, #16]
 801279e:	4540      	cmp	r0, r8
 80127a0:	d21e      	bcs.n	80127e0 <CircularQueue_Remove+0x90>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80127a2:	b1ec      	cbz	r4, 80127e0 <CircularQueue_Remove+0x90>
 80127a4:	eba7 0c08 	sub.w	ip, r7, r8
 80127a8:	45a4      	cmp	ip, r4
 80127aa:	d219      	bcs.n	80127e0 <CircularQueue_Remove+0x90>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 80127ac:	4446      	add	r6, r8
          /* Adjust first element pos */
          q->first = 0;
 80127ae:	f04f 0c00 	mov.w	ip, #0
 80127b2:	4625      	mov	r5, r4
          q->byteCount -= (q->queueMaxSize - q->first);
 80127b4:	1bf6      	subs	r6, r6, r7
          q->first = 0;
 80127b6:	f8c3 c00c 	str.w	ip, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80127ba:	e013      	b.n	80127e4 <CircularQueue_Remove+0x94>
  if (q->byteCount > 0) 
 80127bc:	6946      	ldr	r6, [r0, #20]
 80127be:	b346      	cbz	r6, 8012812 <CircularQueue_Remove+0xc2>
     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 80127c0:	f893 c01c 	ldrb.w	ip, [r3, #28]
 80127c4:	f8d0 a000 	ldr.w	sl, [r0]
 80127c8:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80127cc:	6847      	ldr	r7, [r0, #4]
 80127ce:	f00c 0c03 	and.w	ip, ip, #3
  if (q->byteCount > 0) 
 80127d2:	f04f 0e00 	mov.w	lr, #0
     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 80127d6:	f1bc 0f01 	cmp.w	ip, #1
  if (q->byteCount > 0) 
 80127da:	4672      	mov	r2, lr
 80127dc:	4625      	mov	r5, r4
     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 80127de:	d0d9      	beq.n	8012794 <CircularQueue_Remove+0x44>
 80127e0:	4442      	add	r2, r8
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80127e2:	462c      	mov	r4, r5
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 80127e4:	4297      	cmp	r7, r2

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 80127e6:	4474      	add	r4, lr
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 80127e8:	bf94      	ite	ls
 80127ea:	eba2 0c07 	subls.w	ip, r2, r7
 80127ee:	4694      	movhi	ip, r2
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 80127f0:	1b34      	subs	r4, r6, r4
 80127f2:	615c      	str	r4, [r3, #20]
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 80127f4:	eb0a 000c 	add.w	r0, sl, ip
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 80127f8:	b124      	cbz	r4, 8012804 <CircularQueue_Remove+0xb4>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 80127fa:	442a      	add	r2, r5
 80127fc:	42ba      	cmp	r2, r7
 80127fe:	bf28      	it	cs
 8012800:	1bd2      	subcs	r2, r2, r7
 8012802:	60da      	str	r2, [r3, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8012804:	699a      	ldr	r2, [r3, #24]
 8012806:	3a01      	subs	r2, #1
 8012808:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 801280a:	b101      	cbz	r1, 801280e <CircularQueue_Remove+0xbe>
  {
    *elementSize = eltSize;
 801280c:	800d      	strh	r5, [r1, #0]
  }
  return ptr;
}
 801280e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint16_t eltSize = 0;
 8012812:	4635      	mov	r5, r6
  uint8_t* ptr= NULL;
 8012814:	4630      	mov	r0, r6
 8012816:	e7f8      	b.n	801280a <CircularQueue_Remove+0xba>
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8012818:	b984      	cbnz	r4, 801283c <CircularQueue_Remove+0xec>
          q->byteCount -= (q->queueMaxSize - q->first);
 801281a:	4446      	add	r6, r8
 801281c:	1bf6      	subs	r6, r6, r7
 801281e:	615e      	str	r6, [r3, #20]
          q->first = 0;
 8012820:	60dc      	str	r4, [r3, #12]
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8012822:	2f01      	cmp	r7, #1
 8012824:	f89a 5000 	ldrb.w	r5, [sl]
 8012828:	d801      	bhi.n	801282e <CircularQueue_Remove+0xde>
 801282a:	f1c7 0c01 	rsb	ip, r7, #1
 801282e:	f81a 400c 	ldrb.w	r4, [sl, ip]
 8012832:	eb05 2504 	add.w	r5, r5, r4, lsl #8
 8012836:	b2ad      	uxth	r5, r5
 8012838:	462c      	mov	r4, r5
 801283a:	e7d3      	b.n	80127e4 <CircularQueue_Remove+0x94>
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 801283c:	6918      	ldr	r0, [r3, #16]
 801283e:	4580      	cmp	r8, r0
 8012840:	d8b0      	bhi.n	80127a4 <CircularQueue_Remove+0x54>
 8012842:	e7cd      	b.n	80127e0 <CircularQueue_Remove+0x90>

08012844 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 8012844:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t  elemSizeStorageRoom = 0;
  uint8_t* x= NULL;
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8012846:	8905      	ldrh	r5, [r0, #8]
 8012848:	b9fd      	cbnz	r5, 801288a <CircularQueue_Sense+0x46>
  uint16_t eltSize = 0;
  uint32_t FirstElemetPos = 0;
    
  if (q->byteCount > 0) 
 801284a:	6943      	ldr	r3, [r0, #20]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d037      	beq.n	80128c0 <CircularQueue_Sense+0x7c>
  {
    FirstElemetPos = q->first;
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8012850:	e9d0 4600 	ldrd	r4, r6, [r0]
    FirstElemetPos = q->first;
 8012854:	68c7      	ldr	r7, [r0, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8012856:	1c7a      	adds	r2, r7, #1
 8012858:	42b2      	cmp	r2, r6
 801285a:	5de3      	ldrb	r3, [r4, r7]
 801285c:	d300      	bcc.n	8012860 <CircularQueue_Sense+0x1c>
 801285e:	1b92      	subs	r2, r2, r6
 8012860:	5ca2      	ldrb	r2, [r4, r2]
 8012862:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8012866:	7f02      	ldrb	r2, [r0, #28]
 8012868:	f002 0203 	and.w	r2, r2, #3
 801286c:	2a01      	cmp	r2, #1
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 801286e:	b29b      	uxth	r3, r3
 8012870:	f04f 0e02 	mov.w	lr, #2
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8012874:	d016      	beq.n	80128a4 <CircularQueue_Sense+0x60>
 8012876:	44be      	add	lr, r7
        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8012878:	4576      	cmp	r6, lr
 801287a:	bf98      	it	ls
 801287c:	ebae 0e06 	subls.w	lr, lr, r6
 8012880:	eb04 000e 	add.w	r0, r4, lr
  }
  if (elementSize != NULL)
 8012884:	b101      	cbz	r1, 8012888 <CircularQueue_Sense+0x44>
  {
    *elementSize = eltSize;
 8012886:	800b      	strh	r3, [r1, #0]
  }
  return x;
}
 8012888:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (q->byteCount > 0) 
 801288a:	6943      	ldr	r3, [r0, #20]
 801288c:	b1c3      	cbz	r3, 80128c0 <CircularQueue_Sense+0x7c>
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 801288e:	7f02      	ldrb	r2, [r0, #28]
    FirstElemetPos = q->first;
 8012890:	68c7      	ldr	r7, [r0, #12]
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8012892:	f002 0203 	and.w	r2, r2, #3
 8012896:	2a01      	cmp	r2, #1
 8012898:	e9d0 4600 	ldrd	r4, r6, [r0]
    FirstElemetPos = q->first;
 801289c:	462b      	mov	r3, r5
 801289e:	f04f 0e00 	mov.w	lr, #0
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 80128a2:	d1e8      	bne.n	8012876 <CircularQueue_Sense+0x32>
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80128a4:	f64f 7cff 	movw	ip, #65535	; 0xffff
 80128a8:	4563      	cmp	r3, ip
 80128aa:	d00b      	beq.n	80128c4 <CircularQueue_Sense+0x80>
 80128ac:	6902      	ldr	r2, [r0, #16]
 80128ae:	42ba      	cmp	r2, r7
 80128b0:	d2e1      	bcs.n	8012876 <CircularQueue_Sense+0x32>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80128b2:	2d00      	cmp	r5, #0
 80128b4:	d0df      	beq.n	8012876 <CircularQueue_Sense+0x32>
 80128b6:	1bf2      	subs	r2, r6, r7
 80128b8:	42aa      	cmp	r2, r5
 80128ba:	d2dc      	bcs.n	8012876 <CircularQueue_Sense+0x32>
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80128bc:	462b      	mov	r3, r5
 80128be:	e7db      	b.n	8012878 <CircularQueue_Sense+0x34>
  uint8_t* x= NULL;
 80128c0:	4618      	mov	r0, r3
 80128c2:	e7df      	b.n	8012884 <CircularQueue_Sense+0x40>
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80128c4:	b94d      	cbnz	r5, 80128da <CircularQueue_Sense+0x96>
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 80128c6:	2e01      	cmp	r6, #1
 80128c8:	bf98      	it	ls
 80128ca:	f1c6 0201 	rsbls	r2, r6, #1
 80128ce:	7823      	ldrb	r3, [r4, #0]
 80128d0:	5ca2      	ldrb	r2, [r4, r2]
 80128d2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80128d6:	b29b      	uxth	r3, r3
 80128d8:	e7ce      	b.n	8012878 <CircularQueue_Sense+0x34>
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80128da:	6902      	ldr	r2, [r0, #16]
 80128dc:	42ba      	cmp	r2, r7
 80128de:	d3ea      	bcc.n	80128b6 <CircularQueue_Sense+0x72>
 80128e0:	e7c9      	b.n	8012876 <CircularQueue_Sense+0x32>
 80128e2:	bf00      	nop

080128e4 <BAS_Init>:
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
  return;
}
 80128e4:	4770      	bx	lr
 80128e6:	bf00      	nop

080128e8 <BLS_Init>:
 80128e8:	4770      	bx	lr
 80128ea:	bf00      	nop

080128ec <CRS_STM_Init>:
 80128ec:	4770      	bx	lr
 80128ee:	bf00      	nop

080128f0 <DIS_Init>:
 80128f0:	4770      	bx	lr
 80128f2:	bf00      	nop

080128f4 <EDS_STM_Init>:
 80128f4:	4770      	bx	lr
 80128f6:	bf00      	nop

080128f8 <HIDS_Init>:
 80128f8:	4770      	bx	lr
 80128fa:	bf00      	nop

080128fc <HRS_Init>:
 80128fc:	4770      	bx	lr
 80128fe:	bf00      	nop

08012900 <HTS_Init>:
 8012900:	4770      	bx	lr
 8012902:	bf00      	nop

08012904 <IAS_Init>:
 8012904:	4770      	bx	lr
 8012906:	bf00      	nop

08012908 <LLS_Init>:
 8012908:	4770      	bx	lr
 801290a:	bf00      	nop

0801290c <TPS_Init>:
 801290c:	4770      	bx	lr
 801290e:	bf00      	nop

08012910 <MOTENV_STM_Init>:
 8012910:	4770      	bx	lr
 8012912:	bf00      	nop

08012914 <ZDD_STM_Init>:
 8012914:	4770      	bx	lr
 8012916:	bf00      	nop

08012918 <OTAS_STM_Init>:
 8012918:	4770      	bx	lr
 801291a:	bf00      	nop

0801291c <MESH_Init>:
 801291c:	4770      	bx	lr
 801291e:	bf00      	nop

08012920 <BVOPUS_STM_Init>:
 8012920:	4770      	bx	lr
 8012922:	bf00      	nop

08012924 <SVCCTL_InitCustomSvc>:
 8012924:	4770      	bx	lr
 8012926:	bf00      	nop

08012928 <SVCCTL_SvcInit>:

  return;
}

__WEAK void SVCCTL_SvcInit(void)
{
 8012928:	b508      	push	{r3, lr}
  BAS_Init();
 801292a:	f7ff ffdb 	bl	80128e4 <BAS_Init>

  BLS_Init();
 801292e:	f7ff ffdb 	bl	80128e8 <BLS_Init>

  CRS_STM_Init();
 8012932:	f7ff ffdb 	bl	80128ec <CRS_STM_Init>

  DIS_Init();
 8012936:	f7ff ffdb 	bl	80128f0 <DIS_Init>

  EDS_STM_Init();
 801293a:	f7ff ffdb 	bl	80128f4 <EDS_STM_Init>

  HIDS_Init();
 801293e:	f7ff ffdb 	bl	80128f8 <HIDS_Init>

  HRS_Init();
 8012942:	f7ff ffdb 	bl	80128fc <HRS_Init>

  HTS_Init();
 8012946:	f7ff ffdb 	bl	8012900 <HTS_Init>

  IAS_Init();
 801294a:	f7ff ffdb 	bl	8012904 <IAS_Init>

  LLS_Init();
 801294e:	f7ff ffdb 	bl	8012908 <LLS_Init>

  TPS_Init();
 8012952:	f7ff ffdb 	bl	801290c <TPS_Init>

  MOTENV_STM_Init();
 8012956:	f7ff ffdb 	bl	8012910 <MOTENV_STM_Init>

  P2PS_STM_Init();
 801295a:	f7ff fba5 	bl	80120a8 <P2PS_STM_Init>

  ZDD_STM_Init();
 801295e:	f7ff ffd9 	bl	8012914 <ZDD_STM_Init>

  OTAS_STM_Init();
 8012962:	f7ff ffd9 	bl	8012918 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8012966:	f7ff ffdb 	bl	8012920 <BVOPUS_STM_Init>

  MESH_Init();
 801296a:	f7ff ffd7 	bl	801291c <MESH_Init>

  SVCCTL_InitCustomSvc();
 801296e:	f7ff ffd9 	bl	8012924 <SVCCTL_InitCustomSvc>
  
  return;
}
 8012972:	bd08      	pop	{r3, pc}

08012974 <SVCCTL_Init>:
{
 8012974:	b508      	push	{r3, lr}
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8012976:	4b03      	ldr	r3, [pc, #12]	; (8012984 <SVCCTL_Init+0x10>)
 8012978:	2200      	movs	r2, #0
 801297a:	711a      	strb	r2, [r3, #4]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 801297c:	721a      	strb	r2, [r3, #8]
  SVCCTL_SvcInit();
 801297e:	f7ff ffd3 	bl	8012928 <SVCCTL_SvcInit>
}
 8012982:	bd08      	pop	{r3, pc}
 8012984:	200002e0 	.word	0x200002e0

08012988 <SVCCTL_RegisterSvcHandler>:
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8012988:	4a03      	ldr	r2, [pc, #12]	; (8012998 <SVCCTL_RegisterSvcHandler+0x10>)
 801298a:	7913      	ldrb	r3, [r2, #4]
 801298c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8012990:	3301      	adds	r3, #1
 8012992:	7113      	strb	r3, [r2, #4]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
}
 8012994:	4770      	bx	lr
 8012996:	bf00      	nop
 8012998:	200002e0 	.word	0x200002e0

0801299c <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 801299c:	b570      	push	{r4, r5, r6, lr}
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
  event_notification_status = SVCCTL_EvtNotAck;

  switch (event_pckt->evt)
 801299e:	7843      	ldrb	r3, [r0, #1]
 80129a0:	2bff      	cmp	r3, #255	; 0xff
{
 80129a2:	4604      	mov	r4, r0
  switch (event_pckt->evt)
 80129a4:	d106      	bne.n	80129b4 <SVCCTL_UserEvtRx+0x18>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80129a6:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 80129aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80129ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80129b2:	d004      	beq.n	80129be <SVCCTL_UserEvtRx+0x22>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80129b4:	4620      	mov	r0, r4
      return_status = SVCCTL_UserEvtFlowEnable;
      break;
  }

  return (return_status);
}
 80129b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return_status = SVCCTL_App_Notification(pckt);
 80129ba:	f7fa b993 	b.w	800cce4 <SVCCTL_App_Notification>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80129be:	4e0b      	ldr	r6, [pc, #44]	; (80129ec <SVCCTL_UserEvtRx+0x50>)
 80129c0:	7933      	ldrb	r3, [r6, #4]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d0f6      	beq.n	80129b4 <SVCCTL_UserEvtRx+0x18>
 80129c6:	2500      	movs	r5, #0
 80129c8:	462b      	mov	r3, r5
 80129ca:	e002      	b.n	80129d2 <SVCCTL_UserEvtRx+0x36>
 80129cc:	7932      	ldrb	r2, [r6, #4]
 80129ce:	429a      	cmp	r2, r3
 80129d0:	d9f0      	bls.n	80129b4 <SVCCTL_UserEvtRx+0x18>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80129d2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80129d6:	4620      	mov	r0, r4
 80129d8:	4798      	blx	r3
            if (event_notification_status != SVCCTL_EvtNotAck)
 80129da:	3501      	adds	r5, #1
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80129dc:	b2eb      	uxtb	r3, r5
            if (event_notification_status != SVCCTL_EvtNotAck)
 80129de:	2800      	cmp	r0, #0
 80129e0:	d0f4      	beq.n	80129cc <SVCCTL_UserEvtRx+0x30>
}
 80129e2:	3802      	subs	r0, #2
 80129e4:	bf18      	it	ne
 80129e6:	2001      	movne	r0, #1
 80129e8:	bd70      	pop	{r4, r5, r6, pc}
 80129ea:	bf00      	nop
 80129ec:	200002e0 	.word	0x200002e0

080129f0 <SendFreeBuf>:

  return;
}

static void SendFreeBuf( void )
{
 80129f0:	b530      	push	{r4, r5, lr}
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80129f2:	4c0a      	ldr	r4, [pc, #40]	; (8012a1c <SendFreeBuf+0x2c>)
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80129f4:	4d0a      	ldr	r5, [pc, #40]	; (8012a20 <SendFreeBuf+0x30>)
{
 80129f6:	b083      	sub	sp, #12
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80129f8:	e006      	b.n	8012a08 <SendFreeBuf+0x18>
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80129fa:	f7ff fd2d 	bl	8012458 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80129fe:	692b      	ldr	r3, [r5, #16]
 8012a00:	9901      	ldr	r1, [sp, #4]
 8012a02:	6918      	ldr	r0, [r3, #16]
 8012a04:	f7ff fd1c 	bl	8012440 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8012a08:	4620      	mov	r0, r4
 8012a0a:	f7ff fd01 	bl	8012410 <LST_is_empty>
 8012a0e:	4603      	mov	r3, r0
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8012a10:	a901      	add	r1, sp, #4
 8012a12:	4620      	mov	r0, r4
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d0f0      	beq.n	80129fa <SendFreeBuf+0xa>
  }

  return;
}
 8012a18:	b003      	add	sp, #12
 8012a1a:	bd30      	pop	{r4, r5, pc}
 8012a1c:	20000638 	.word	0x20000638
 8012a20:	20030000 	.word	0x20030000

08012a24 <TL_Enable>:
  HW_IPCC_Enable();
 8012a24:	f7fa bb40 	b.w	800d0a8 <HW_IPCC_Enable>

08012a28 <TL_Init>:
{
 8012a28:	b430      	push	{r4, r5}
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8012a2a:	4b10      	ldr	r3, [pc, #64]	; (8012a6c <TL_Init+0x44>)
 8012a2c:	4a10      	ldr	r2, [pc, #64]	; (8012a70 <TL_Init+0x48>)
  TL_RefTable.p_ble_table = &TL_BleTable;
 8012a2e:	f103 0520 	add.w	r5, r3, #32
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8012a32:	f103 0430 	add.w	r4, r3, #48	; 0x30
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8012a36:	6013      	str	r3, [r2, #0]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8012a38:	f103 003c 	add.w	r0, r3, #60	; 0x3c
  TL_RefTable.p_ble_table = &TL_BleTable;
 8012a3c:	6055      	str	r5, [r2, #4]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8012a3e:	f103 0144 	add.w	r1, r3, #68	; 0x44
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8012a42:	6094      	str	r4, [r2, #8]
  TL_RefTable.p_sys_table = &TL_SysTable;
 8012a44:	f103 054c 	add.w	r5, r3, #76	; 0x4c
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8012a48:	f103 0454 	add.w	r4, r3, #84	; 0x54
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8012a4c:	6210      	str	r0, [r2, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8012a4e:	6251      	str	r1, [r2, #36]	; 0x24
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8012a50:	f103 0070 	add.w	r0, r3, #112	; 0x70
  TL_RefTable.p_sys_table = &TL_SysTable;
 8012a54:	60d5      	str	r5, [r2, #12]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8012a56:	f103 0174 	add.w	r1, r3, #116	; 0x74
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8012a5a:	6114      	str	r4, [r2, #16]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8012a5c:	3380      	adds	r3, #128	; 0x80
}
 8012a5e:	bc30      	pop	{r4, r5}
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8012a60:	6150      	str	r0, [r2, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8012a62:	6191      	str	r1, [r2, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8012a64:	61d3      	str	r3, [r2, #28]
  HW_IPCC_Init();
 8012a66:	f7fa bb47 	b.w	800d0f8 <HW_IPCC_Init>
 8012a6a:	bf00      	nop
 8012a6c:	20030134 	.word	0x20030134
 8012a70:	20030000 	.word	0x20030000

08012a74 <TL_BLE_Init>:
{
 8012a74:	b538      	push	{r3, r4, r5, lr}
  LST_init_head (&EvtQueue);
 8012a76:	4d0c      	ldr	r5, [pc, #48]	; (8012aa8 <TL_BLE_Init+0x34>)
{
 8012a78:	4604      	mov	r4, r0
  LST_init_head (&EvtQueue);
 8012a7a:	4628      	mov	r0, r5
 8012a7c:	f7ff fcc4 	bl	8012408 <LST_init_head>
  p_bletable = TL_RefTable.p_ble_table;
 8012a80:	4b0a      	ldr	r3, [pc, #40]	; (8012aac <TL_BLE_Init+0x38>)
  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8012a82:	68a0      	ldr	r0, [r4, #8]
  p_bletable = TL_RefTable.p_ble_table;
 8012a84:	685b      	ldr	r3, [r3, #4]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8012a86:	68e1      	ldr	r1, [r4, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8012a88:	4a09      	ldr	r2, [pc, #36]	; (8012ab0 <TL_BLE_Init+0x3c>)
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8012a8a:	609d      	str	r5, [r3, #8]
  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8012a8c:	6018      	str	r0, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8012a8e:	60d9      	str	r1, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8012a90:	605a      	str	r2, [r3, #4]
  HW_IPCC_BLE_Init();
 8012a92:	f7fa fb53 	bl	800d13c <HW_IPCC_BLE_Init>
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8012a96:	e9d4 0200 	ldrd	r0, r2, [r4]
  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8012a9a:	4906      	ldr	r1, [pc, #24]	; (8012ab4 <TL_BLE_Init+0x40>)
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8012a9c:	4b06      	ldr	r3, [pc, #24]	; (8012ab8 <TL_BLE_Init+0x44>)
  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8012a9e:	6008      	str	r0, [r1, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8012aa0:	601a      	str	r2, [r3, #0]
}
 8012aa2:	2000      	movs	r0, #0
 8012aa4:	bd38      	pop	{r3, r4, r5, pc}
 8012aa6:	bf00      	nop
 8012aa8:	200301c0 	.word	0x200301c0
 8012aac:	20030000 	.word	0x20030000
 8012ab0:	20031fac 	.word	0x20031fac
 8012ab4:	20000634 	.word	0x20000634
 8012ab8:	20000630 	.word	0x20000630

08012abc <TL_BLE_SendCmd>:
{
 8012abc:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8012abe:	4b05      	ldr	r3, [pc, #20]	; (8012ad4 <TL_BLE_SendCmd+0x18>)
 8012ac0:	685a      	ldr	r2, [r3, #4]
  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8012ac2:	685b      	ldr	r3, [r3, #4]
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8012ac4:	6813      	ldr	r3, [r2, #0]
 8012ac6:	2201      	movs	r2, #1
 8012ac8:	721a      	strb	r2, [r3, #8]
  HW_IPCC_BLE_SendCmd();
 8012aca:	f7fa fb3f 	bl	800d14c <HW_IPCC_BLE_SendCmd>
}
 8012ace:	2000      	movs	r0, #0
 8012ad0:	bd08      	pop	{r3, pc}
 8012ad2:	bf00      	nop
 8012ad4:	20030000 	.word	0x20030000

08012ad8 <HW_IPCC_BLE_RxEvtNot>:
{
 8012ad8:	b530      	push	{r4, r5, lr}
  while(LST_is_empty(&EvtQueue) == FALSE)
 8012ada:	4c09      	ldr	r4, [pc, #36]	; (8012b00 <HW_IPCC_BLE_RxEvtNot+0x28>)
    BLE_IoBusEvtCallBackFunction(phcievt);
 8012adc:	4d09      	ldr	r5, [pc, #36]	; (8012b04 <HW_IPCC_BLE_RxEvtNot+0x2c>)
{
 8012ade:	b083      	sub	sp, #12
  while(LST_is_empty(&EvtQueue) == FALSE)
 8012ae0:	e004      	b.n	8012aec <HW_IPCC_BLE_RxEvtNot+0x14>
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8012ae2:	f7ff fcb9 	bl	8012458 <LST_remove_head>
    BLE_IoBusEvtCallBackFunction(phcievt);
 8012ae6:	682b      	ldr	r3, [r5, #0]
 8012ae8:	9801      	ldr	r0, [sp, #4]
 8012aea:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8012aec:	4620      	mov	r0, r4
 8012aee:	f7ff fc8f 	bl	8012410 <LST_is_empty>
 8012af2:	4603      	mov	r3, r0
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8012af4:	a901      	add	r1, sp, #4
 8012af6:	4620      	mov	r0, r4
  while(LST_is_empty(&EvtQueue) == FALSE)
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d0f2      	beq.n	8012ae2 <HW_IPCC_BLE_RxEvtNot+0xa>
}
 8012afc:	b003      	add	sp, #12
 8012afe:	bd30      	pop	{r4, r5, pc}
 8012b00:	200301c0 	.word	0x200301c0
 8012b04:	20000634 	.word	0x20000634

08012b08 <HW_IPCC_BLE_AclDataAckNot>:
  BLE_IoBusAclDataTxAck( );
 8012b08:	4b01      	ldr	r3, [pc, #4]	; (8012b10 <HW_IPCC_BLE_AclDataAckNot+0x8>)
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	4718      	bx	r3
 8012b0e:	bf00      	nop
 8012b10:	20000630 	.word	0x20000630

08012b14 <TL_SYS_Init>:
{
 8012b14:	b538      	push	{r3, r4, r5, lr}
  LST_init_head (&SystemEvtQueue);
 8012b16:	4d0a      	ldr	r5, [pc, #40]	; (8012b40 <TL_SYS_Init+0x2c>)
{
 8012b18:	4604      	mov	r4, r0
  LST_init_head (&SystemEvtQueue);
 8012b1a:	4628      	mov	r0, r5
 8012b1c:	f7ff fc74 	bl	8012408 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8012b20:	4b08      	ldr	r3, [pc, #32]	; (8012b44 <TL_SYS_Init+0x30>)
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8012b22:	68a2      	ldr	r2, [r4, #8]
  p_systable = TL_RefTable.p_sys_table;
 8012b24:	68db      	ldr	r3, [r3, #12]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8012b26:	e9c3 2500 	strd	r2, r5, [r3]
  HW_IPCC_SYS_Init();
 8012b2a:	f7fa fb23 	bl	800d174 <HW_IPCC_SYS_Init>
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8012b2e:	e9d4 0200 	ldrd	r0, r2, [r4]
  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8012b32:	4905      	ldr	r1, [pc, #20]	; (8012b48 <TL_SYS_Init+0x34>)
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8012b34:	4b05      	ldr	r3, [pc, #20]	; (8012b4c <TL_SYS_Init+0x38>)
  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8012b36:	6008      	str	r0, [r1, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8012b38:	601a      	str	r2, [r3, #0]
}
 8012b3a:	2000      	movs	r0, #0
 8012b3c:	bd38      	pop	{r3, r4, r5, pc}
 8012b3e:	bf00      	nop
 8012b40:	200301c8 	.word	0x200301c8
 8012b44:	20030000 	.word	0x20030000
 8012b48:	20000640 	.word	0x20000640
 8012b4c:	20000644 	.word	0x20000644

08012b50 <TL_SYS_SendCmd>:
{
 8012b50:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8012b52:	4b05      	ldr	r3, [pc, #20]	; (8012b68 <TL_SYS_SendCmd+0x18>)
 8012b54:	68da      	ldr	r2, [r3, #12]
  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8012b56:	68db      	ldr	r3, [r3, #12]
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8012b58:	6813      	ldr	r3, [r2, #0]
 8012b5a:	2210      	movs	r2, #16
 8012b5c:	721a      	strb	r2, [r3, #8]
  HW_IPCC_SYS_SendCmd();
 8012b5e:	f7fa fb11 	bl	800d184 <HW_IPCC_SYS_SendCmd>
}
 8012b62:	2000      	movs	r0, #0
 8012b64:	bd08      	pop	{r3, pc}
 8012b66:	bf00      	nop
 8012b68:	20030000 	.word	0x20030000

08012b6c <HW_IPCC_SYS_CmdEvtNot>:
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8012b6c:	4b03      	ldr	r3, [pc, #12]	; (8012b7c <HW_IPCC_SYS_CmdEvtNot+0x10>)
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8012b6e:	4904      	ldr	r1, [pc, #16]	; (8012b80 <HW_IPCC_SYS_CmdEvtNot+0x14>)
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8012b70:	68da      	ldr	r2, [r3, #12]
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8012b72:	68da      	ldr	r2, [r3, #12]
 8012b74:	680b      	ldr	r3, [r1, #0]
 8012b76:	6810      	ldr	r0, [r2, #0]
 8012b78:	4718      	bx	r3
 8012b7a:	bf00      	nop
 8012b7c:	20030000 	.word	0x20030000
 8012b80:	20000640 	.word	0x20000640

08012b84 <HW_IPCC_SYS_EvtNot>:
{
 8012b84:	b530      	push	{r4, r5, lr}
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8012b86:	4c09      	ldr	r4, [pc, #36]	; (8012bac <HW_IPCC_SYS_EvtNot+0x28>)
    SYS_EVT_IoBusCallBackFunction( p_evt );
 8012b88:	4d09      	ldr	r5, [pc, #36]	; (8012bb0 <HW_IPCC_SYS_EvtNot+0x2c>)
{
 8012b8a:	b083      	sub	sp, #12
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8012b8c:	e004      	b.n	8012b98 <HW_IPCC_SYS_EvtNot+0x14>
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8012b8e:	f7ff fc63 	bl	8012458 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 8012b92:	682b      	ldr	r3, [r5, #0]
 8012b94:	9801      	ldr	r0, [sp, #4]
 8012b96:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8012b98:	4620      	mov	r0, r4
 8012b9a:	f7ff fc39 	bl	8012410 <LST_is_empty>
 8012b9e:	4603      	mov	r3, r0
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8012ba0:	a901      	add	r1, sp, #4
 8012ba2:	4620      	mov	r0, r4
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d0f2      	beq.n	8012b8e <HW_IPCC_SYS_EvtNot+0xa>
}
 8012ba8:	b003      	add	sp, #12
 8012baa:	bd30      	pop	{r4, r5, pc}
 8012bac:	200301c8 	.word	0x200301c8
 8012bb0:	20000644 	.word	0x20000644

08012bb4 <TL_MM_Init>:
{
 8012bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LST_init_head (&FreeBufQueue);
 8012bb6:	4d0c      	ldr	r5, [pc, #48]	; (8012be8 <TL_MM_Init+0x34>)
{
 8012bb8:	4604      	mov	r4, r0
  LST_init_head (&FreeBufQueue);
 8012bba:	4628      	mov	r0, r5
 8012bbc:	f7ff fc24 	bl	8012408 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8012bc0:	480a      	ldr	r0, [pc, #40]	; (8012bec <TL_MM_Init+0x38>)
 8012bc2:	f7ff fc21 	bl	8012408 <LST_init_head>
  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8012bc6:	4b0a      	ldr	r3, [pc, #40]	; (8012bf0 <TL_MM_Init+0x3c>)
  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8012bc8:	68a2      	ldr	r2, [r4, #8]
  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8012bca:	691b      	ldr	r3, [r3, #16]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8012bcc:	68e7      	ldr	r7, [r4, #12]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8012bce:	6826      	ldr	r6, [r4, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8012bd0:	6860      	ldr	r0, [r4, #4]
  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8012bd2:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8012bd4:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8012bd8:	611d      	str	r5, [r3, #16]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8012bda:	e9c3 6000 	strd	r6, r0, [r3]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8012bde:	e9c3 1205 	strd	r1, r2, [r3, #20]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8012be2:	60df      	str	r7, [r3, #12]
}
 8012be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012be6:	bf00      	nop
 8012be8:	200301d0 	.word	0x200301d0
 8012bec:	20000638 	.word	0x20000638
 8012bf0:	20030000 	.word	0x20030000

08012bf4 <TL_MM_EvtDone>:
{
 8012bf4:	b508      	push	{r3, lr}
 8012bf6:	4601      	mov	r1, r0
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8012bf8:	4803      	ldr	r0, [pc, #12]	; (8012c08 <TL_MM_EvtDone+0x14>)
 8012bfa:	f7ff fc21 	bl	8012440 <LST_insert_tail>
}
 8012bfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8012c02:	4802      	ldr	r0, [pc, #8]	; (8012c0c <TL_MM_EvtDone+0x18>)
 8012c04:	f7fa bb1c 	b.w	800d240 <HW_IPCC_MM_SendFreeBuf>
 8012c08:	20000638 	.word	0x20000638
 8012c0c:	080129f1 	.word	0x080129f1

08012c10 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8012c10:	b510      	push	{r4, lr}
  LST_init_head (&TracesEvtQueue);
 8012c12:	4c05      	ldr	r4, [pc, #20]	; (8012c28 <TL_TRACES_Init+0x18>)
 8012c14:	4620      	mov	r0, r4
 8012c16:	f7ff fbf7 	bl	8012408 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8012c1a:	4b04      	ldr	r3, [pc, #16]	; (8012c2c <TL_TRACES_Init+0x1c>)
 8012c1c:	695b      	ldr	r3, [r3, #20]
 8012c1e:	601c      	str	r4, [r3, #0]

  HW_IPCC_TRACES_Init();

  return;
}
 8012c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HW_IPCC_TRACES_Init();
 8012c24:	f7fa bb30 	b.w	800d288 <HW_IPCC_TRACES_Init>
 8012c28:	200301d8 	.word	0x200301d8
 8012c2c:	20030000 	.word	0x20030000

08012c30 <TL_TRACES_EvtReceived>:
}

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
  (void)(hcievt);
}
 8012c30:	4770      	bx	lr
 8012c32:	bf00      	nop

08012c34 <HW_IPCC_TRACES_EvtNot>:
{
 8012c34:	b510      	push	{r4, lr}
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8012c36:	4c09      	ldr	r4, [pc, #36]	; (8012c5c <HW_IPCC_TRACES_EvtNot+0x28>)
{
 8012c38:	b082      	sub	sp, #8
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8012c3a:	e004      	b.n	8012c46 <HW_IPCC_TRACES_EvtNot+0x12>
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8012c3c:	f7ff fc0c 	bl	8012458 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8012c40:	9801      	ldr	r0, [sp, #4]
 8012c42:	f7ff fff5 	bl	8012c30 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8012c46:	4620      	mov	r0, r4
 8012c48:	f7ff fbe2 	bl	8012410 <LST_is_empty>
 8012c4c:	4603      	mov	r3, r0
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8012c4e:	a901      	add	r1, sp, #4
 8012c50:	4620      	mov	r0, r4
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d0f2      	beq.n	8012c3c <HW_IPCC_TRACES_EvtNot+0x8>
}
 8012c56:	b002      	add	sp, #8
 8012c58:	bd10      	pop	{r4, pc}
 8012c5a:	bf00      	nop
 8012c5c:	200301d8 	.word	0x200301d8

08012c60 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8012c60:	4902      	ldr	r1, [pc, #8]	; (8012c6c <UTIL_LPM_Init+0xc>)
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8012c62:	4a03      	ldr	r2, [pc, #12]	; (8012c70 <UTIL_LPM_Init+0x10>)
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8012c64:	2300      	movs	r3, #0
 8012c66:	600b      	str	r3, [r1, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8012c68:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8012c6a:	4770      	bx	lr
 8012c6c:	2000064c 	.word	0x2000064c
 8012c70:	20000648 	.word	0x20000648

08012c74 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012c74:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012c78:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8012c7a:	b141      	cbz	r1, 8012c8e <UTIL_LPM_SetOffMode+0x1a>
 8012c7c:	2901      	cmp	r1, #1
 8012c7e:	d103      	bne.n	8012c88 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8012c80:	4907      	ldr	r1, [pc, #28]	; (8012ca0 <UTIL_LPM_SetOffMode+0x2c>)
 8012c82:	680a      	ldr	r2, [r1, #0]
 8012c84:	4310      	orrs	r0, r2
 8012c86:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c88:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8012c8c:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8012c8e:	4904      	ldr	r1, [pc, #16]	; (8012ca0 <UTIL_LPM_SetOffMode+0x2c>)
 8012c90:	680a      	ldr	r2, [r1, #0]
 8012c92:	ea22 0000 	bic.w	r0, r2, r0
 8012c96:	6008      	str	r0, [r1, #0]
 8012c98:	f383 8810 	msr	PRIMASK, r3
}
 8012c9c:	4770      	bx	lr
 8012c9e:	bf00      	nop
 8012ca0:	20000648 	.word	0x20000648

08012ca4 <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8012ca4:	b470      	push	{r4, r5, r6}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012ca6:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012caa:	b672      	cpsid	i
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8012cac:	4d06      	ldr	r5, [pc, #24]	; (8012cc8 <UTIL_SEQ_SetTask+0x24>)
  TaskSet |= TaskId_bm;
 8012cae:	4c07      	ldr	r4, [pc, #28]	; (8012ccc <UTIL_SEQ_SetTask+0x28>)
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8012cb0:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
  TaskSet |= TaskId_bm;
 8012cb4:	6823      	ldr	r3, [r4, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8012cb6:	4302      	orrs	r2, r0
  TaskSet |= TaskId_bm;
 8012cb8:	4318      	orrs	r0, r3
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8012cba:	f845 2031 	str.w	r2, [r5, r1, lsl #3]
  TaskSet |= TaskId_bm;
 8012cbe:	6020      	str	r0, [r4, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012cc0:	f386 8810 	msr	PRIMASK, r6

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8012cc4:	bc70      	pop	{r4, r5, r6}
 8012cc6:	4770      	bx	lr
 8012cc8:	200006dc 	.word	0x200006dc
 8012ccc:	200006ec 	.word	0x200006ec

08012cd0 <UTIL_SEQ_PauseTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012cd0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012cd4:	b672      	cpsid	i

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskMask &= (~TaskId_bm);
 8012cd6:	4a04      	ldr	r2, [pc, #16]	; (8012ce8 <UTIL_SEQ_PauseTask+0x18>)
 8012cd8:	6813      	ldr	r3, [r2, #0]
 8012cda:	ea23 0000 	bic.w	r0, r3, r0
 8012cde:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012ce0:	f381 8810 	msr	PRIMASK, r1

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8012ce4:	4770      	bx	lr
 8012ce6:	bf00      	nop
 8012ce8:	2000013c 	.word	0x2000013c

08012cec <UTIL_SEQ_ResumeTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012cec:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012cf0:	b672      	cpsid	i

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskMask |= TaskId_bm;
 8012cf2:	4a03      	ldr	r2, [pc, #12]	; (8012d00 <UTIL_SEQ_ResumeTask+0x14>)
 8012cf4:	6813      	ldr	r3, [r2, #0]
 8012cf6:	4318      	orrs	r0, r3
 8012cf8:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012cfa:	f381 8810 	msr	PRIMASK, r1

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8012cfe:	4770      	bx	lr
 8012d00:	2000013c 	.word	0x2000013c

08012d04 <UTIL_SEQ_SetEvt>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012d04:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012d08:	b672      	cpsid	i

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  EvtSet |= EvtId_bm;
 8012d0a:	4a03      	ldr	r2, [pc, #12]	; (8012d18 <UTIL_SEQ_SetEvt+0x14>)
 8012d0c:	6813      	ldr	r3, [r2, #0]
 8012d0e:	4318      	orrs	r0, r3
 8012d10:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012d12:	f381 8810 	msr	PRIMASK, r1

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8012d16:	4770      	bx	lr
 8012d18:	20000654 	.word	0x20000654

08012d1c <UTIL_SEQ_PreIdle>:
 8012d1c:	4770      	bx	lr
 8012d1e:	bf00      	nop

08012d20 <UTIL_SEQ_PostIdle>:
 8012d20:	4770      	bx	lr
 8012d22:	bf00      	nop

08012d24 <SEQ_BitPosition>:
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  uint8_t n = 0U;

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8012d24:	0c03      	lsrs	r3, r0, #16
 8012d26:	041b      	lsls	r3, r3, #16
 8012d28:	b9ab      	cbnz	r3, 8012d56 <SEQ_BitPosition+0x32>
 8012d2a:	0400      	lsls	r0, r0, #16
 8012d2c:	2310      	movs	r3, #16
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8012d2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012d32:	d102      	bne.n	8012d3a <SEQ_BitPosition+0x16>
 8012d34:	3308      	adds	r3, #8
 8012d36:	b2db      	uxtb	r3, r3
 8012d38:	0200      	lsls	r0, r0, #8
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8012d3a:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012d3e:	d102      	bne.n	8012d46 <SEQ_BitPosition+0x22>
 8012d40:	3304      	adds	r3, #4
 8012d42:	b2db      	uxtb	r3, r3
 8012d44:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8012d46:	4a05      	ldr	r2, [pc, #20]	; (8012d5c <SEQ_BitPosition+0x38>)
 8012d48:	0f00      	lsrs	r0, r0, #28

  return (uint8_t)(31U-n);
 8012d4a:	f1c3 031f 	rsb	r3, r3, #31
 8012d4e:	5c10      	ldrb	r0, [r2, r0]
 8012d50:	1a18      	subs	r0, r3, r0
}
 8012d52:	b2c0      	uxtb	r0, r0
 8012d54:	4770      	bx	lr
  uint8_t n = 0U;
 8012d56:	2300      	movs	r3, #0
 8012d58:	e7e9      	b.n	8012d2e <SEQ_BitPosition+0xa>
 8012d5a:	bf00      	nop
 8012d5c:	080167e4 	.word	0x080167e4

08012d60 <UTIL_SEQ_Run>:
{
 8012d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  super_mask_backup = SuperMask;
 8012d64:	4c42      	ldr	r4, [pc, #264]	; (8012e70 <UTIL_SEQ_Run+0x110>)
  local_taskset = TaskSet;
 8012d66:	4d43      	ldr	r5, [pc, #268]	; (8012e74 <UTIL_SEQ_Run+0x114>)
  super_mask_backup = SuperMask;
 8012d68:	6823      	ldr	r3, [r4, #0]
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8012d6a:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8012e88 <UTIL_SEQ_Run+0x128>
  local_taskset = TaskSet;
 8012d6e:	682a      	ldr	r2, [r5, #0]
 8012d70:	f8df a118 	ldr.w	sl, [pc, #280]	; 8012e8c <UTIL_SEQ_Run+0x12c>
{
 8012d74:	b083      	sub	sp, #12
  super_mask_backup = SuperMask;
 8012d76:	4619      	mov	r1, r3
 8012d78:	9301      	str	r3, [sp, #4]
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8012d7a:	f8d9 3000 	ldr.w	r3, [r9]
  SuperMask &= Mask_bm;
 8012d7e:	4008      	ands	r0, r1
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8012d80:	4013      	ands	r3, r2
 8012d82:	4203      	tst	r3, r0
  SuperMask &= Mask_bm;
 8012d84:	6020      	str	r0, [r4, #0]
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8012d86:	d04f      	beq.n	8012e28 <UTIL_SEQ_Run+0xc8>
 8012d88:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 8012e84 <UTIL_SEQ_Run+0x124>
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8012d8c:	4c3a      	ldr	r4, [pc, #232]	; (8012e78 <UTIL_SEQ_Run+0x118>)
      counter++;
 8012d8e:	2601      	movs	r6, #1
 8012d90:	e044      	b.n	8012e1c <UTIL_SEQ_Run+0xbc>
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8012d92:	6822      	ldr	r2, [r4, #0]
 8012d94:	f8d9 1000 	ldr.w	r1, [r9]
 8012d98:	4011      	ands	r1, r2
 8012d9a:	4201      	tst	r1, r0
 8012d9c:	d103      	bne.n	8012da6 <UTIL_SEQ_Run+0x46>
 8012d9e:	68a2      	ldr	r2, [r4, #8]
 8012da0:	f8d9 3000 	ldr.w	r3, [r9]
      counter++;
 8012da4:	2301      	movs	r3, #1
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8012da6:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 8012daa:	f8d9 3000 	ldr.w	r3, [r9]
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8012dae:	f8d1 8004 	ldr.w	r8, [r1, #4]
    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 8012db2:	4003      	ands	r3, r0
 8012db4:	4013      	ands	r3, r2
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8012db6:	ea08 0003 	and.w	r0, r8, r3
 8012dba:	2800      	cmp	r0, #0
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8012dbc:	bf04      	itt	eq
 8012dbe:	4618      	moveq	r0, r3
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8012dc0:	f04f 38ff 	moveq.w	r8, #4294967295
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8012dc4:	f7ff ffae 	bl	8012d24 <SEQ_BitPosition>
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8012dc8:	fa06 f300 	lsl.w	r3, r6, r0
 8012dcc:	ea28 0303 	bic.w	r3, r8, r3
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8012dd0:	f8ca 0000 	str.w	r0, [sl]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8012dd4:	604b      	str	r3, [r1, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012dd6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012dda:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8012ddc:	f8da 3000 	ldr.w	r3, [sl]
 8012de0:	682a      	ldr	r2, [r5, #0]
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8012de2:	68a1      	ldr	r1, [r4, #8]
 8012de4:	6827      	ldr	r7, [r4, #0]
    TaskSet &= ~(1U << CurrentTaskIdx);
 8012de6:	fa06 f303 	lsl.w	r3, r6, r3
 8012dea:	ea22 0203 	bic.w	r2, r2, r3
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8012dee:	ea21 0103 	bic.w	r1, r1, r3
 8012df2:	ea27 0303 	bic.w	r3, r7, r3
    TaskSet &= ~(1U << CurrentTaskIdx);
 8012df6:	602a      	str	r2, [r5, #0]
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8012df8:	60a1      	str	r1, [r4, #8]
 8012dfa:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012dfc:	f380 8810 	msr	PRIMASK, r0
    TaskCb[CurrentTaskIdx]( );
 8012e00:	4a1e      	ldr	r2, [pc, #120]	; (8012e7c <UTIL_SEQ_Run+0x11c>)
 8012e02:	f8da 3000 	ldr.w	r3, [sl]
 8012e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012e0a:	4798      	blx	r3
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8012e0c:	4918      	ldr	r1, [pc, #96]	; (8012e70 <UTIL_SEQ_Run+0x110>)
    local_taskset = TaskSet;
 8012e0e:	682a      	ldr	r2, [r5, #0]
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8012e10:	f8d9 3000 	ldr.w	r3, [r9]
 8012e14:	6808      	ldr	r0, [r1, #0]
 8012e16:	4013      	ands	r3, r2
 8012e18:	4203      	tst	r3, r0
 8012e1a:	d005      	beq.n	8012e28 <UTIL_SEQ_Run+0xc8>
 8012e1c:	4b18      	ldr	r3, [pc, #96]	; (8012e80 <UTIL_SEQ_Run+0x120>)
 8012e1e:	f8db 1000 	ldr.w	r1, [fp]
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	400b      	ands	r3, r1
 8012e26:	d0b4      	beq.n	8012d92 <UTIL_SEQ_Run+0x32>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8012e28:	f04f 33ff 	mov.w	r3, #4294967295
 8012e2c:	f8ca 3000 	str.w	r3, [sl]
  UTIL_SEQ_PreIdle( );
 8012e30:	f7ff ff74 	bl	8012d1c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012e34:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012e38:	b672      	cpsid	i
  if (!(((local_taskset & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8012e3a:	4a0d      	ldr	r2, [pc, #52]	; (8012e70 <UTIL_SEQ_Run+0x110>)
  local_taskset = TaskSet;
 8012e3c:	6829      	ldr	r1, [r5, #0]
  if (!(((local_taskset & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8012e3e:	f8d9 3000 	ldr.w	r3, [r9]
 8012e42:	6812      	ldr	r2, [r2, #0]
 8012e44:	400b      	ands	r3, r1
 8012e46:	4213      	tst	r3, r2
 8012e48:	d105      	bne.n	8012e56 <UTIL_SEQ_Run+0xf6>
 8012e4a:	4a0d      	ldr	r2, [pc, #52]	; (8012e80 <UTIL_SEQ_Run+0x120>)
 8012e4c:	4b0d      	ldr	r3, [pc, #52]	; (8012e84 <UTIL_SEQ_Run+0x124>)
 8012e4e:	6812      	ldr	r2, [r2, #0]
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	421a      	tst	r2, r3
 8012e54:	d009      	beq.n	8012e6a <UTIL_SEQ_Run+0x10a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e56:	f384 8810 	msr	PRIMASK, r4
  UTIL_SEQ_PostIdle( );
 8012e5a:	f7ff ff61 	bl	8012d20 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8012e5e:	9b01      	ldr	r3, [sp, #4]
 8012e60:	4a03      	ldr	r2, [pc, #12]	; (8012e70 <UTIL_SEQ_Run+0x110>)
 8012e62:	6013      	str	r3, [r2, #0]
}
 8012e64:	b003      	add	sp, #12
 8012e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	UTIL_SEQ_Idle( );
 8012e6a:	f7ee fa31 	bl	80012d0 <UTIL_SEQ_Idle>
 8012e6e:	e7f2      	b.n	8012e56 <UTIL_SEQ_Run+0xf6>
 8012e70:	20000138 	.word	0x20000138
 8012e74:	200006ec 	.word	0x200006ec
 8012e78:	200006dc 	.word	0x200006dc
 8012e7c:	2000065c 	.word	0x2000065c
 8012e80:	20000654 	.word	0x20000654
 8012e84:	20000658 	.word	0x20000658
 8012e88:	2000013c 	.word	0x2000013c
 8012e8c:	20000650 	.word	0x20000650

08012e90 <UTIL_SEQ_WaitEvt>:
{
 8012e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  current_task_idx = CurrentTaskIdx;
 8012e94:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8012ef0 <UTIL_SEQ_WaitEvt+0x60>
  while ((EvtSet & EvtWaited) == 0U)
 8012e98:	4d13      	ldr	r5, [pc, #76]	; (8012ee8 <UTIL_SEQ_WaitEvt+0x58>)
  current_task_idx = CurrentTaskIdx;
 8012e9a:	f8d8 7000 	ldr.w	r7, [r8]
  event_waited_id_backup = EvtWaited;
 8012e9e:	4c13      	ldr	r4, [pc, #76]	; (8012eec <UTIL_SEQ_WaitEvt+0x5c>)
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8012ea0:	1c7b      	adds	r3, r7, #1
  while ((EvtSet & EvtWaited) == 0U)
 8012ea2:	682b      	ldr	r3, [r5, #0]
  event_waited_id_backup = EvtWaited;
 8012ea4:	f8d4 9000 	ldr.w	r9, [r4]
  EvtWaited = EvtId_bm;
 8012ea8:	6020      	str	r0, [r4, #0]
    wait_task_idx = 1 << CurrentTaskIdx;
 8012eaa:	bf1a      	itte	ne
 8012eac:	2601      	movne	r6, #1
 8012eae:	40be      	lslne	r6, r7
    wait_task_idx = 0;
 8012eb0:	2600      	moveq	r6, #0
  while ((EvtSet & EvtWaited) == 0U)
 8012eb2:	4218      	tst	r0, r3
{
 8012eb4:	4601      	mov	r1, r0
  while ((EvtSet & EvtWaited) == 0U)
 8012eb6:	d106      	bne.n	8012ec6 <UTIL_SEQ_WaitEvt+0x36>
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 8012eb8:	4630      	mov	r0, r6
 8012eba:	f7ee fa0b 	bl	80012d4 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 8012ebe:	682b      	ldr	r3, [r5, #0]
 8012ec0:	6821      	ldr	r1, [r4, #0]
 8012ec2:	420b      	tst	r3, r1
 8012ec4:	d0f8      	beq.n	8012eb8 <UTIL_SEQ_WaitEvt+0x28>
  CurrentTaskIdx = current_task_idx;
 8012ec6:	f8c8 7000 	str.w	r7, [r8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012eca:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012ece:	b672      	cpsid	i
  EvtSet &= (~EvtWaited);
 8012ed0:	682b      	ldr	r3, [r5, #0]
 8012ed2:	6821      	ldr	r1, [r4, #0]
 8012ed4:	ea23 0301 	bic.w	r3, r3, r1
 8012ed8:	602b      	str	r3, [r5, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012eda:	f382 8810 	msr	PRIMASK, r2
  EvtWaited = event_waited_id_backup;
 8012ede:	f8c4 9000 	str.w	r9, [r4]
}
 8012ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ee6:	bf00      	nop
 8012ee8:	20000654 	.word	0x20000654
 8012eec:	20000658 	.word	0x20000658
 8012ef0:	20000650 	.word	0x20000650

08012ef4 <UTIL_SEQ_RegTask>:
{
 8012ef4:	b510      	push	{r4, lr}
 8012ef6:	4611      	mov	r1, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012ef8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012efc:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8012efe:	f7ff ff11 	bl	8012d24 <SEQ_BitPosition>
 8012f02:	4b03      	ldr	r3, [pc, #12]	; (8012f10 <UTIL_SEQ_RegTask+0x1c>)
 8012f04:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f08:	f384 8810 	msr	PRIMASK, r4
}
 8012f0c:	bd10      	pop	{r4, pc}
 8012f0e:	bf00      	nop
 8012f10:	2000065c 	.word	0x2000065c

08012f14 <__errno>:
 8012f14:	4b01      	ldr	r3, [pc, #4]	; (8012f1c <__errno+0x8>)
 8012f16:	6818      	ldr	r0, [r3, #0]
 8012f18:	4770      	bx	lr
 8012f1a:	bf00      	nop
 8012f1c:	20000140 	.word	0x20000140

08012f20 <__libc_init_array>:
 8012f20:	b570      	push	{r4, r5, r6, lr}
 8012f22:	4d0d      	ldr	r5, [pc, #52]	; (8012f58 <__libc_init_array+0x38>)
 8012f24:	4c0d      	ldr	r4, [pc, #52]	; (8012f5c <__libc_init_array+0x3c>)
 8012f26:	1b64      	subs	r4, r4, r5
 8012f28:	10a4      	asrs	r4, r4, #2
 8012f2a:	2600      	movs	r6, #0
 8012f2c:	42a6      	cmp	r6, r4
 8012f2e:	d109      	bne.n	8012f44 <__libc_init_array+0x24>
 8012f30:	4d0b      	ldr	r5, [pc, #44]	; (8012f60 <__libc_init_array+0x40>)
 8012f32:	4c0c      	ldr	r4, [pc, #48]	; (8012f64 <__libc_init_array+0x44>)
 8012f34:	f001 fa50 	bl	80143d8 <_init>
 8012f38:	1b64      	subs	r4, r4, r5
 8012f3a:	10a4      	asrs	r4, r4, #2
 8012f3c:	2600      	movs	r6, #0
 8012f3e:	42a6      	cmp	r6, r4
 8012f40:	d105      	bne.n	8012f4e <__libc_init_array+0x2e>
 8012f42:	bd70      	pop	{r4, r5, r6, pc}
 8012f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f48:	4798      	blx	r3
 8012f4a:	3601      	adds	r6, #1
 8012f4c:	e7ee      	b.n	8012f2c <__libc_init_array+0xc>
 8012f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f52:	4798      	blx	r3
 8012f54:	3601      	adds	r6, #1
 8012f56:	e7f2      	b.n	8012f3e <__libc_init_array+0x1e>
 8012f58:	08016894 	.word	0x08016894
 8012f5c:	08016894 	.word	0x08016894
 8012f60:	08016894 	.word	0x08016894
 8012f64:	08016898 	.word	0x08016898

08012f68 <memcpy>:
 8012f68:	440a      	add	r2, r1
 8012f6a:	4291      	cmp	r1, r2
 8012f6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012f70:	d100      	bne.n	8012f74 <memcpy+0xc>
 8012f72:	4770      	bx	lr
 8012f74:	b510      	push	{r4, lr}
 8012f76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012f7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012f7e:	4291      	cmp	r1, r2
 8012f80:	d1f9      	bne.n	8012f76 <memcpy+0xe>
 8012f82:	bd10      	pop	{r4, pc}

08012f84 <memset>:
 8012f84:	4402      	add	r2, r0
 8012f86:	4603      	mov	r3, r0
 8012f88:	4293      	cmp	r3, r2
 8012f8a:	d100      	bne.n	8012f8e <memset+0xa>
 8012f8c:	4770      	bx	lr
 8012f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8012f92:	e7f9      	b.n	8012f88 <memset+0x4>

08012f94 <iprintf>:
 8012f94:	b40f      	push	{r0, r1, r2, r3}
 8012f96:	4b0a      	ldr	r3, [pc, #40]	; (8012fc0 <iprintf+0x2c>)
 8012f98:	b513      	push	{r0, r1, r4, lr}
 8012f9a:	681c      	ldr	r4, [r3, #0]
 8012f9c:	b124      	cbz	r4, 8012fa8 <iprintf+0x14>
 8012f9e:	69a3      	ldr	r3, [r4, #24]
 8012fa0:	b913      	cbnz	r3, 8012fa8 <iprintf+0x14>
 8012fa2:	4620      	mov	r0, r4
 8012fa4:	f000 fa90 	bl	80134c8 <__sinit>
 8012fa8:	ab05      	add	r3, sp, #20
 8012faa:	9a04      	ldr	r2, [sp, #16]
 8012fac:	68a1      	ldr	r1, [r4, #8]
 8012fae:	9301      	str	r3, [sp, #4]
 8012fb0:	4620      	mov	r0, r4
 8012fb2:	f000 fdbd 	bl	8013b30 <_vfiprintf_r>
 8012fb6:	b002      	add	sp, #8
 8012fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012fbc:	b004      	add	sp, #16
 8012fbe:	4770      	bx	lr
 8012fc0:	20000140 	.word	0x20000140

08012fc4 <_puts_r>:
 8012fc4:	b570      	push	{r4, r5, r6, lr}
 8012fc6:	460e      	mov	r6, r1
 8012fc8:	4605      	mov	r5, r0
 8012fca:	b118      	cbz	r0, 8012fd4 <_puts_r+0x10>
 8012fcc:	6983      	ldr	r3, [r0, #24]
 8012fce:	b90b      	cbnz	r3, 8012fd4 <_puts_r+0x10>
 8012fd0:	f000 fa7a 	bl	80134c8 <__sinit>
 8012fd4:	69ab      	ldr	r3, [r5, #24]
 8012fd6:	68ac      	ldr	r4, [r5, #8]
 8012fd8:	b913      	cbnz	r3, 8012fe0 <_puts_r+0x1c>
 8012fda:	4628      	mov	r0, r5
 8012fdc:	f000 fa74 	bl	80134c8 <__sinit>
 8012fe0:	4b2c      	ldr	r3, [pc, #176]	; (8013094 <_puts_r+0xd0>)
 8012fe2:	429c      	cmp	r4, r3
 8012fe4:	d120      	bne.n	8013028 <_puts_r+0x64>
 8012fe6:	686c      	ldr	r4, [r5, #4]
 8012fe8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012fea:	07db      	lsls	r3, r3, #31
 8012fec:	d405      	bmi.n	8012ffa <_puts_r+0x36>
 8012fee:	89a3      	ldrh	r3, [r4, #12]
 8012ff0:	0598      	lsls	r0, r3, #22
 8012ff2:	d402      	bmi.n	8012ffa <_puts_r+0x36>
 8012ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012ff6:	f000 fb05 	bl	8013604 <__retarget_lock_acquire_recursive>
 8012ffa:	89a3      	ldrh	r3, [r4, #12]
 8012ffc:	0719      	lsls	r1, r3, #28
 8012ffe:	d51d      	bpl.n	801303c <_puts_r+0x78>
 8013000:	6923      	ldr	r3, [r4, #16]
 8013002:	b1db      	cbz	r3, 801303c <_puts_r+0x78>
 8013004:	3e01      	subs	r6, #1
 8013006:	68a3      	ldr	r3, [r4, #8]
 8013008:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801300c:	3b01      	subs	r3, #1
 801300e:	60a3      	str	r3, [r4, #8]
 8013010:	bb39      	cbnz	r1, 8013062 <_puts_r+0x9e>
 8013012:	2b00      	cmp	r3, #0
 8013014:	da38      	bge.n	8013088 <_puts_r+0xc4>
 8013016:	4622      	mov	r2, r4
 8013018:	210a      	movs	r1, #10
 801301a:	4628      	mov	r0, r5
 801301c:	f000 f87a 	bl	8013114 <__swbuf_r>
 8013020:	3001      	adds	r0, #1
 8013022:	d011      	beq.n	8013048 <_puts_r+0x84>
 8013024:	250a      	movs	r5, #10
 8013026:	e011      	b.n	801304c <_puts_r+0x88>
 8013028:	4b1b      	ldr	r3, [pc, #108]	; (8013098 <_puts_r+0xd4>)
 801302a:	429c      	cmp	r4, r3
 801302c:	d101      	bne.n	8013032 <_puts_r+0x6e>
 801302e:	68ac      	ldr	r4, [r5, #8]
 8013030:	e7da      	b.n	8012fe8 <_puts_r+0x24>
 8013032:	4b1a      	ldr	r3, [pc, #104]	; (801309c <_puts_r+0xd8>)
 8013034:	429c      	cmp	r4, r3
 8013036:	bf08      	it	eq
 8013038:	68ec      	ldreq	r4, [r5, #12]
 801303a:	e7d5      	b.n	8012fe8 <_puts_r+0x24>
 801303c:	4621      	mov	r1, r4
 801303e:	4628      	mov	r0, r5
 8013040:	f000 f8ba 	bl	80131b8 <__swsetup_r>
 8013044:	2800      	cmp	r0, #0
 8013046:	d0dd      	beq.n	8013004 <_puts_r+0x40>
 8013048:	f04f 35ff 	mov.w	r5, #4294967295
 801304c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801304e:	07da      	lsls	r2, r3, #31
 8013050:	d405      	bmi.n	801305e <_puts_r+0x9a>
 8013052:	89a3      	ldrh	r3, [r4, #12]
 8013054:	059b      	lsls	r3, r3, #22
 8013056:	d402      	bmi.n	801305e <_puts_r+0x9a>
 8013058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801305a:	f000 fad4 	bl	8013606 <__retarget_lock_release_recursive>
 801305e:	4628      	mov	r0, r5
 8013060:	bd70      	pop	{r4, r5, r6, pc}
 8013062:	2b00      	cmp	r3, #0
 8013064:	da04      	bge.n	8013070 <_puts_r+0xac>
 8013066:	69a2      	ldr	r2, [r4, #24]
 8013068:	429a      	cmp	r2, r3
 801306a:	dc06      	bgt.n	801307a <_puts_r+0xb6>
 801306c:	290a      	cmp	r1, #10
 801306e:	d004      	beq.n	801307a <_puts_r+0xb6>
 8013070:	6823      	ldr	r3, [r4, #0]
 8013072:	1c5a      	adds	r2, r3, #1
 8013074:	6022      	str	r2, [r4, #0]
 8013076:	7019      	strb	r1, [r3, #0]
 8013078:	e7c5      	b.n	8013006 <_puts_r+0x42>
 801307a:	4622      	mov	r2, r4
 801307c:	4628      	mov	r0, r5
 801307e:	f000 f849 	bl	8013114 <__swbuf_r>
 8013082:	3001      	adds	r0, #1
 8013084:	d1bf      	bne.n	8013006 <_puts_r+0x42>
 8013086:	e7df      	b.n	8013048 <_puts_r+0x84>
 8013088:	6823      	ldr	r3, [r4, #0]
 801308a:	250a      	movs	r5, #10
 801308c:	1c5a      	adds	r2, r3, #1
 801308e:	6022      	str	r2, [r4, #0]
 8013090:	701d      	strb	r5, [r3, #0]
 8013092:	e7db      	b.n	801304c <_puts_r+0x88>
 8013094:	08016818 	.word	0x08016818
 8013098:	08016838 	.word	0x08016838
 801309c:	080167f8 	.word	0x080167f8

080130a0 <puts>:
 80130a0:	4b02      	ldr	r3, [pc, #8]	; (80130ac <puts+0xc>)
 80130a2:	4601      	mov	r1, r0
 80130a4:	6818      	ldr	r0, [r3, #0]
 80130a6:	f7ff bf8d 	b.w	8012fc4 <_puts_r>
 80130aa:	bf00      	nop
 80130ac:	20000140 	.word	0x20000140

080130b0 <siprintf>:
 80130b0:	b40e      	push	{r1, r2, r3}
 80130b2:	b500      	push	{lr}
 80130b4:	b09c      	sub	sp, #112	; 0x70
 80130b6:	ab1d      	add	r3, sp, #116	; 0x74
 80130b8:	9002      	str	r0, [sp, #8]
 80130ba:	9006      	str	r0, [sp, #24]
 80130bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80130c0:	4809      	ldr	r0, [pc, #36]	; (80130e8 <siprintf+0x38>)
 80130c2:	9107      	str	r1, [sp, #28]
 80130c4:	9104      	str	r1, [sp, #16]
 80130c6:	4909      	ldr	r1, [pc, #36]	; (80130ec <siprintf+0x3c>)
 80130c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80130cc:	9105      	str	r1, [sp, #20]
 80130ce:	6800      	ldr	r0, [r0, #0]
 80130d0:	9301      	str	r3, [sp, #4]
 80130d2:	a902      	add	r1, sp, #8
 80130d4:	f000 fc02 	bl	80138dc <_svfiprintf_r>
 80130d8:	9b02      	ldr	r3, [sp, #8]
 80130da:	2200      	movs	r2, #0
 80130dc:	701a      	strb	r2, [r3, #0]
 80130de:	b01c      	add	sp, #112	; 0x70
 80130e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80130e4:	b003      	add	sp, #12
 80130e6:	4770      	bx	lr
 80130e8:	20000140 	.word	0x20000140
 80130ec:	ffff0208 	.word	0xffff0208

080130f0 <strncmp>:
 80130f0:	b510      	push	{r4, lr}
 80130f2:	b16a      	cbz	r2, 8013110 <strncmp+0x20>
 80130f4:	3901      	subs	r1, #1
 80130f6:	1884      	adds	r4, r0, r2
 80130f8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80130fc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013100:	4293      	cmp	r3, r2
 8013102:	d103      	bne.n	801310c <strncmp+0x1c>
 8013104:	42a0      	cmp	r0, r4
 8013106:	d001      	beq.n	801310c <strncmp+0x1c>
 8013108:	2b00      	cmp	r3, #0
 801310a:	d1f5      	bne.n	80130f8 <strncmp+0x8>
 801310c:	1a98      	subs	r0, r3, r2
 801310e:	bd10      	pop	{r4, pc}
 8013110:	4610      	mov	r0, r2
 8013112:	e7fc      	b.n	801310e <strncmp+0x1e>

08013114 <__swbuf_r>:
 8013114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013116:	460e      	mov	r6, r1
 8013118:	4614      	mov	r4, r2
 801311a:	4605      	mov	r5, r0
 801311c:	b118      	cbz	r0, 8013126 <__swbuf_r+0x12>
 801311e:	6983      	ldr	r3, [r0, #24]
 8013120:	b90b      	cbnz	r3, 8013126 <__swbuf_r+0x12>
 8013122:	f000 f9d1 	bl	80134c8 <__sinit>
 8013126:	4b21      	ldr	r3, [pc, #132]	; (80131ac <__swbuf_r+0x98>)
 8013128:	429c      	cmp	r4, r3
 801312a:	d12b      	bne.n	8013184 <__swbuf_r+0x70>
 801312c:	686c      	ldr	r4, [r5, #4]
 801312e:	69a3      	ldr	r3, [r4, #24]
 8013130:	60a3      	str	r3, [r4, #8]
 8013132:	89a3      	ldrh	r3, [r4, #12]
 8013134:	071a      	lsls	r2, r3, #28
 8013136:	d52f      	bpl.n	8013198 <__swbuf_r+0x84>
 8013138:	6923      	ldr	r3, [r4, #16]
 801313a:	b36b      	cbz	r3, 8013198 <__swbuf_r+0x84>
 801313c:	6923      	ldr	r3, [r4, #16]
 801313e:	6820      	ldr	r0, [r4, #0]
 8013140:	1ac0      	subs	r0, r0, r3
 8013142:	6963      	ldr	r3, [r4, #20]
 8013144:	b2f6      	uxtb	r6, r6
 8013146:	4283      	cmp	r3, r0
 8013148:	4637      	mov	r7, r6
 801314a:	dc04      	bgt.n	8013156 <__swbuf_r+0x42>
 801314c:	4621      	mov	r1, r4
 801314e:	4628      	mov	r0, r5
 8013150:	f000 f926 	bl	80133a0 <_fflush_r>
 8013154:	bb30      	cbnz	r0, 80131a4 <__swbuf_r+0x90>
 8013156:	68a3      	ldr	r3, [r4, #8]
 8013158:	3b01      	subs	r3, #1
 801315a:	60a3      	str	r3, [r4, #8]
 801315c:	6823      	ldr	r3, [r4, #0]
 801315e:	1c5a      	adds	r2, r3, #1
 8013160:	6022      	str	r2, [r4, #0]
 8013162:	701e      	strb	r6, [r3, #0]
 8013164:	6963      	ldr	r3, [r4, #20]
 8013166:	3001      	adds	r0, #1
 8013168:	4283      	cmp	r3, r0
 801316a:	d004      	beq.n	8013176 <__swbuf_r+0x62>
 801316c:	89a3      	ldrh	r3, [r4, #12]
 801316e:	07db      	lsls	r3, r3, #31
 8013170:	d506      	bpl.n	8013180 <__swbuf_r+0x6c>
 8013172:	2e0a      	cmp	r6, #10
 8013174:	d104      	bne.n	8013180 <__swbuf_r+0x6c>
 8013176:	4621      	mov	r1, r4
 8013178:	4628      	mov	r0, r5
 801317a:	f000 f911 	bl	80133a0 <_fflush_r>
 801317e:	b988      	cbnz	r0, 80131a4 <__swbuf_r+0x90>
 8013180:	4638      	mov	r0, r7
 8013182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013184:	4b0a      	ldr	r3, [pc, #40]	; (80131b0 <__swbuf_r+0x9c>)
 8013186:	429c      	cmp	r4, r3
 8013188:	d101      	bne.n	801318e <__swbuf_r+0x7a>
 801318a:	68ac      	ldr	r4, [r5, #8]
 801318c:	e7cf      	b.n	801312e <__swbuf_r+0x1a>
 801318e:	4b09      	ldr	r3, [pc, #36]	; (80131b4 <__swbuf_r+0xa0>)
 8013190:	429c      	cmp	r4, r3
 8013192:	bf08      	it	eq
 8013194:	68ec      	ldreq	r4, [r5, #12]
 8013196:	e7ca      	b.n	801312e <__swbuf_r+0x1a>
 8013198:	4621      	mov	r1, r4
 801319a:	4628      	mov	r0, r5
 801319c:	f000 f80c 	bl	80131b8 <__swsetup_r>
 80131a0:	2800      	cmp	r0, #0
 80131a2:	d0cb      	beq.n	801313c <__swbuf_r+0x28>
 80131a4:	f04f 37ff 	mov.w	r7, #4294967295
 80131a8:	e7ea      	b.n	8013180 <__swbuf_r+0x6c>
 80131aa:	bf00      	nop
 80131ac:	08016818 	.word	0x08016818
 80131b0:	08016838 	.word	0x08016838
 80131b4:	080167f8 	.word	0x080167f8

080131b8 <__swsetup_r>:
 80131b8:	4b32      	ldr	r3, [pc, #200]	; (8013284 <__swsetup_r+0xcc>)
 80131ba:	b570      	push	{r4, r5, r6, lr}
 80131bc:	681d      	ldr	r5, [r3, #0]
 80131be:	4606      	mov	r6, r0
 80131c0:	460c      	mov	r4, r1
 80131c2:	b125      	cbz	r5, 80131ce <__swsetup_r+0x16>
 80131c4:	69ab      	ldr	r3, [r5, #24]
 80131c6:	b913      	cbnz	r3, 80131ce <__swsetup_r+0x16>
 80131c8:	4628      	mov	r0, r5
 80131ca:	f000 f97d 	bl	80134c8 <__sinit>
 80131ce:	4b2e      	ldr	r3, [pc, #184]	; (8013288 <__swsetup_r+0xd0>)
 80131d0:	429c      	cmp	r4, r3
 80131d2:	d10f      	bne.n	80131f4 <__swsetup_r+0x3c>
 80131d4:	686c      	ldr	r4, [r5, #4]
 80131d6:	89a3      	ldrh	r3, [r4, #12]
 80131d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80131dc:	0719      	lsls	r1, r3, #28
 80131de:	d42c      	bmi.n	801323a <__swsetup_r+0x82>
 80131e0:	06dd      	lsls	r5, r3, #27
 80131e2:	d411      	bmi.n	8013208 <__swsetup_r+0x50>
 80131e4:	2309      	movs	r3, #9
 80131e6:	6033      	str	r3, [r6, #0]
 80131e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80131ec:	81a3      	strh	r3, [r4, #12]
 80131ee:	f04f 30ff 	mov.w	r0, #4294967295
 80131f2:	e03e      	b.n	8013272 <__swsetup_r+0xba>
 80131f4:	4b25      	ldr	r3, [pc, #148]	; (801328c <__swsetup_r+0xd4>)
 80131f6:	429c      	cmp	r4, r3
 80131f8:	d101      	bne.n	80131fe <__swsetup_r+0x46>
 80131fa:	68ac      	ldr	r4, [r5, #8]
 80131fc:	e7eb      	b.n	80131d6 <__swsetup_r+0x1e>
 80131fe:	4b24      	ldr	r3, [pc, #144]	; (8013290 <__swsetup_r+0xd8>)
 8013200:	429c      	cmp	r4, r3
 8013202:	bf08      	it	eq
 8013204:	68ec      	ldreq	r4, [r5, #12]
 8013206:	e7e6      	b.n	80131d6 <__swsetup_r+0x1e>
 8013208:	0758      	lsls	r0, r3, #29
 801320a:	d512      	bpl.n	8013232 <__swsetup_r+0x7a>
 801320c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801320e:	b141      	cbz	r1, 8013222 <__swsetup_r+0x6a>
 8013210:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013214:	4299      	cmp	r1, r3
 8013216:	d002      	beq.n	801321e <__swsetup_r+0x66>
 8013218:	4630      	mov	r0, r6
 801321a:	f000 fa59 	bl	80136d0 <_free_r>
 801321e:	2300      	movs	r3, #0
 8013220:	6363      	str	r3, [r4, #52]	; 0x34
 8013222:	89a3      	ldrh	r3, [r4, #12]
 8013224:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013228:	81a3      	strh	r3, [r4, #12]
 801322a:	2300      	movs	r3, #0
 801322c:	6063      	str	r3, [r4, #4]
 801322e:	6923      	ldr	r3, [r4, #16]
 8013230:	6023      	str	r3, [r4, #0]
 8013232:	89a3      	ldrh	r3, [r4, #12]
 8013234:	f043 0308 	orr.w	r3, r3, #8
 8013238:	81a3      	strh	r3, [r4, #12]
 801323a:	6923      	ldr	r3, [r4, #16]
 801323c:	b94b      	cbnz	r3, 8013252 <__swsetup_r+0x9a>
 801323e:	89a3      	ldrh	r3, [r4, #12]
 8013240:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013248:	d003      	beq.n	8013252 <__swsetup_r+0x9a>
 801324a:	4621      	mov	r1, r4
 801324c:	4630      	mov	r0, r6
 801324e:	f000 f9ff 	bl	8013650 <__smakebuf_r>
 8013252:	89a0      	ldrh	r0, [r4, #12]
 8013254:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013258:	f010 0301 	ands.w	r3, r0, #1
 801325c:	d00a      	beq.n	8013274 <__swsetup_r+0xbc>
 801325e:	2300      	movs	r3, #0
 8013260:	60a3      	str	r3, [r4, #8]
 8013262:	6963      	ldr	r3, [r4, #20]
 8013264:	425b      	negs	r3, r3
 8013266:	61a3      	str	r3, [r4, #24]
 8013268:	6923      	ldr	r3, [r4, #16]
 801326a:	b943      	cbnz	r3, 801327e <__swsetup_r+0xc6>
 801326c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013270:	d1ba      	bne.n	80131e8 <__swsetup_r+0x30>
 8013272:	bd70      	pop	{r4, r5, r6, pc}
 8013274:	0781      	lsls	r1, r0, #30
 8013276:	bf58      	it	pl
 8013278:	6963      	ldrpl	r3, [r4, #20]
 801327a:	60a3      	str	r3, [r4, #8]
 801327c:	e7f4      	b.n	8013268 <__swsetup_r+0xb0>
 801327e:	2000      	movs	r0, #0
 8013280:	e7f7      	b.n	8013272 <__swsetup_r+0xba>
 8013282:	bf00      	nop
 8013284:	20000140 	.word	0x20000140
 8013288:	08016818 	.word	0x08016818
 801328c:	08016838 	.word	0x08016838
 8013290:	080167f8 	.word	0x080167f8

08013294 <__sflush_r>:
 8013294:	898a      	ldrh	r2, [r1, #12]
 8013296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801329a:	4605      	mov	r5, r0
 801329c:	0710      	lsls	r0, r2, #28
 801329e:	460c      	mov	r4, r1
 80132a0:	d458      	bmi.n	8013354 <__sflush_r+0xc0>
 80132a2:	684b      	ldr	r3, [r1, #4]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	dc05      	bgt.n	80132b4 <__sflush_r+0x20>
 80132a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	dc02      	bgt.n	80132b4 <__sflush_r+0x20>
 80132ae:	2000      	movs	r0, #0
 80132b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80132b6:	2e00      	cmp	r6, #0
 80132b8:	d0f9      	beq.n	80132ae <__sflush_r+0x1a>
 80132ba:	2300      	movs	r3, #0
 80132bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80132c0:	682f      	ldr	r7, [r5, #0]
 80132c2:	602b      	str	r3, [r5, #0]
 80132c4:	d032      	beq.n	801332c <__sflush_r+0x98>
 80132c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80132c8:	89a3      	ldrh	r3, [r4, #12]
 80132ca:	075a      	lsls	r2, r3, #29
 80132cc:	d505      	bpl.n	80132da <__sflush_r+0x46>
 80132ce:	6863      	ldr	r3, [r4, #4]
 80132d0:	1ac0      	subs	r0, r0, r3
 80132d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80132d4:	b10b      	cbz	r3, 80132da <__sflush_r+0x46>
 80132d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80132d8:	1ac0      	subs	r0, r0, r3
 80132da:	2300      	movs	r3, #0
 80132dc:	4602      	mov	r2, r0
 80132de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80132e0:	6a21      	ldr	r1, [r4, #32]
 80132e2:	4628      	mov	r0, r5
 80132e4:	47b0      	blx	r6
 80132e6:	1c43      	adds	r3, r0, #1
 80132e8:	89a3      	ldrh	r3, [r4, #12]
 80132ea:	d106      	bne.n	80132fa <__sflush_r+0x66>
 80132ec:	6829      	ldr	r1, [r5, #0]
 80132ee:	291d      	cmp	r1, #29
 80132f0:	d82c      	bhi.n	801334c <__sflush_r+0xb8>
 80132f2:	4a2a      	ldr	r2, [pc, #168]	; (801339c <__sflush_r+0x108>)
 80132f4:	40ca      	lsrs	r2, r1
 80132f6:	07d6      	lsls	r6, r2, #31
 80132f8:	d528      	bpl.n	801334c <__sflush_r+0xb8>
 80132fa:	2200      	movs	r2, #0
 80132fc:	6062      	str	r2, [r4, #4]
 80132fe:	04d9      	lsls	r1, r3, #19
 8013300:	6922      	ldr	r2, [r4, #16]
 8013302:	6022      	str	r2, [r4, #0]
 8013304:	d504      	bpl.n	8013310 <__sflush_r+0x7c>
 8013306:	1c42      	adds	r2, r0, #1
 8013308:	d101      	bne.n	801330e <__sflush_r+0x7a>
 801330a:	682b      	ldr	r3, [r5, #0]
 801330c:	b903      	cbnz	r3, 8013310 <__sflush_r+0x7c>
 801330e:	6560      	str	r0, [r4, #84]	; 0x54
 8013310:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013312:	602f      	str	r7, [r5, #0]
 8013314:	2900      	cmp	r1, #0
 8013316:	d0ca      	beq.n	80132ae <__sflush_r+0x1a>
 8013318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801331c:	4299      	cmp	r1, r3
 801331e:	d002      	beq.n	8013326 <__sflush_r+0x92>
 8013320:	4628      	mov	r0, r5
 8013322:	f000 f9d5 	bl	80136d0 <_free_r>
 8013326:	2000      	movs	r0, #0
 8013328:	6360      	str	r0, [r4, #52]	; 0x34
 801332a:	e7c1      	b.n	80132b0 <__sflush_r+0x1c>
 801332c:	6a21      	ldr	r1, [r4, #32]
 801332e:	2301      	movs	r3, #1
 8013330:	4628      	mov	r0, r5
 8013332:	47b0      	blx	r6
 8013334:	1c41      	adds	r1, r0, #1
 8013336:	d1c7      	bne.n	80132c8 <__sflush_r+0x34>
 8013338:	682b      	ldr	r3, [r5, #0]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d0c4      	beq.n	80132c8 <__sflush_r+0x34>
 801333e:	2b1d      	cmp	r3, #29
 8013340:	d001      	beq.n	8013346 <__sflush_r+0xb2>
 8013342:	2b16      	cmp	r3, #22
 8013344:	d101      	bne.n	801334a <__sflush_r+0xb6>
 8013346:	602f      	str	r7, [r5, #0]
 8013348:	e7b1      	b.n	80132ae <__sflush_r+0x1a>
 801334a:	89a3      	ldrh	r3, [r4, #12]
 801334c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013350:	81a3      	strh	r3, [r4, #12]
 8013352:	e7ad      	b.n	80132b0 <__sflush_r+0x1c>
 8013354:	690f      	ldr	r7, [r1, #16]
 8013356:	2f00      	cmp	r7, #0
 8013358:	d0a9      	beq.n	80132ae <__sflush_r+0x1a>
 801335a:	0793      	lsls	r3, r2, #30
 801335c:	680e      	ldr	r6, [r1, #0]
 801335e:	bf08      	it	eq
 8013360:	694b      	ldreq	r3, [r1, #20]
 8013362:	600f      	str	r7, [r1, #0]
 8013364:	bf18      	it	ne
 8013366:	2300      	movne	r3, #0
 8013368:	eba6 0807 	sub.w	r8, r6, r7
 801336c:	608b      	str	r3, [r1, #8]
 801336e:	f1b8 0f00 	cmp.w	r8, #0
 8013372:	dd9c      	ble.n	80132ae <__sflush_r+0x1a>
 8013374:	6a21      	ldr	r1, [r4, #32]
 8013376:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013378:	4643      	mov	r3, r8
 801337a:	463a      	mov	r2, r7
 801337c:	4628      	mov	r0, r5
 801337e:	47b0      	blx	r6
 8013380:	2800      	cmp	r0, #0
 8013382:	dc06      	bgt.n	8013392 <__sflush_r+0xfe>
 8013384:	89a3      	ldrh	r3, [r4, #12]
 8013386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801338a:	81a3      	strh	r3, [r4, #12]
 801338c:	f04f 30ff 	mov.w	r0, #4294967295
 8013390:	e78e      	b.n	80132b0 <__sflush_r+0x1c>
 8013392:	4407      	add	r7, r0
 8013394:	eba8 0800 	sub.w	r8, r8, r0
 8013398:	e7e9      	b.n	801336e <__sflush_r+0xda>
 801339a:	bf00      	nop
 801339c:	20400001 	.word	0x20400001

080133a0 <_fflush_r>:
 80133a0:	b538      	push	{r3, r4, r5, lr}
 80133a2:	690b      	ldr	r3, [r1, #16]
 80133a4:	4605      	mov	r5, r0
 80133a6:	460c      	mov	r4, r1
 80133a8:	b913      	cbnz	r3, 80133b0 <_fflush_r+0x10>
 80133aa:	2500      	movs	r5, #0
 80133ac:	4628      	mov	r0, r5
 80133ae:	bd38      	pop	{r3, r4, r5, pc}
 80133b0:	b118      	cbz	r0, 80133ba <_fflush_r+0x1a>
 80133b2:	6983      	ldr	r3, [r0, #24]
 80133b4:	b90b      	cbnz	r3, 80133ba <_fflush_r+0x1a>
 80133b6:	f000 f887 	bl	80134c8 <__sinit>
 80133ba:	4b14      	ldr	r3, [pc, #80]	; (801340c <_fflush_r+0x6c>)
 80133bc:	429c      	cmp	r4, r3
 80133be:	d11b      	bne.n	80133f8 <_fflush_r+0x58>
 80133c0:	686c      	ldr	r4, [r5, #4]
 80133c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d0ef      	beq.n	80133aa <_fflush_r+0xa>
 80133ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80133cc:	07d0      	lsls	r0, r2, #31
 80133ce:	d404      	bmi.n	80133da <_fflush_r+0x3a>
 80133d0:	0599      	lsls	r1, r3, #22
 80133d2:	d402      	bmi.n	80133da <_fflush_r+0x3a>
 80133d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80133d6:	f000 f915 	bl	8013604 <__retarget_lock_acquire_recursive>
 80133da:	4628      	mov	r0, r5
 80133dc:	4621      	mov	r1, r4
 80133de:	f7ff ff59 	bl	8013294 <__sflush_r>
 80133e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80133e4:	07da      	lsls	r2, r3, #31
 80133e6:	4605      	mov	r5, r0
 80133e8:	d4e0      	bmi.n	80133ac <_fflush_r+0xc>
 80133ea:	89a3      	ldrh	r3, [r4, #12]
 80133ec:	059b      	lsls	r3, r3, #22
 80133ee:	d4dd      	bmi.n	80133ac <_fflush_r+0xc>
 80133f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80133f2:	f000 f908 	bl	8013606 <__retarget_lock_release_recursive>
 80133f6:	e7d9      	b.n	80133ac <_fflush_r+0xc>
 80133f8:	4b05      	ldr	r3, [pc, #20]	; (8013410 <_fflush_r+0x70>)
 80133fa:	429c      	cmp	r4, r3
 80133fc:	d101      	bne.n	8013402 <_fflush_r+0x62>
 80133fe:	68ac      	ldr	r4, [r5, #8]
 8013400:	e7df      	b.n	80133c2 <_fflush_r+0x22>
 8013402:	4b04      	ldr	r3, [pc, #16]	; (8013414 <_fflush_r+0x74>)
 8013404:	429c      	cmp	r4, r3
 8013406:	bf08      	it	eq
 8013408:	68ec      	ldreq	r4, [r5, #12]
 801340a:	e7da      	b.n	80133c2 <_fflush_r+0x22>
 801340c:	08016818 	.word	0x08016818
 8013410:	08016838 	.word	0x08016838
 8013414:	080167f8 	.word	0x080167f8

08013418 <std>:
 8013418:	2300      	movs	r3, #0
 801341a:	b510      	push	{r4, lr}
 801341c:	4604      	mov	r4, r0
 801341e:	e9c0 3300 	strd	r3, r3, [r0]
 8013422:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013426:	6083      	str	r3, [r0, #8]
 8013428:	8181      	strh	r1, [r0, #12]
 801342a:	6643      	str	r3, [r0, #100]	; 0x64
 801342c:	81c2      	strh	r2, [r0, #14]
 801342e:	6183      	str	r3, [r0, #24]
 8013430:	4619      	mov	r1, r3
 8013432:	2208      	movs	r2, #8
 8013434:	305c      	adds	r0, #92	; 0x5c
 8013436:	f7ff fda5 	bl	8012f84 <memset>
 801343a:	4b05      	ldr	r3, [pc, #20]	; (8013450 <std+0x38>)
 801343c:	6263      	str	r3, [r4, #36]	; 0x24
 801343e:	4b05      	ldr	r3, [pc, #20]	; (8013454 <std+0x3c>)
 8013440:	62a3      	str	r3, [r4, #40]	; 0x28
 8013442:	4b05      	ldr	r3, [pc, #20]	; (8013458 <std+0x40>)
 8013444:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013446:	4b05      	ldr	r3, [pc, #20]	; (801345c <std+0x44>)
 8013448:	6224      	str	r4, [r4, #32]
 801344a:	6323      	str	r3, [r4, #48]	; 0x30
 801344c:	bd10      	pop	{r4, pc}
 801344e:	bf00      	nop
 8013450:	080140d9 	.word	0x080140d9
 8013454:	080140fb 	.word	0x080140fb
 8013458:	08014133 	.word	0x08014133
 801345c:	08014157 	.word	0x08014157

08013460 <_cleanup_r>:
 8013460:	4901      	ldr	r1, [pc, #4]	; (8013468 <_cleanup_r+0x8>)
 8013462:	f000 b8af 	b.w	80135c4 <_fwalk_reent>
 8013466:	bf00      	nop
 8013468:	080133a1 	.word	0x080133a1

0801346c <__sfmoreglue>:
 801346c:	b570      	push	{r4, r5, r6, lr}
 801346e:	1e4a      	subs	r2, r1, #1
 8013470:	2568      	movs	r5, #104	; 0x68
 8013472:	4355      	muls	r5, r2
 8013474:	460e      	mov	r6, r1
 8013476:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801347a:	f000 f979 	bl	8013770 <_malloc_r>
 801347e:	4604      	mov	r4, r0
 8013480:	b140      	cbz	r0, 8013494 <__sfmoreglue+0x28>
 8013482:	2100      	movs	r1, #0
 8013484:	e9c0 1600 	strd	r1, r6, [r0]
 8013488:	300c      	adds	r0, #12
 801348a:	60a0      	str	r0, [r4, #8]
 801348c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013490:	f7ff fd78 	bl	8012f84 <memset>
 8013494:	4620      	mov	r0, r4
 8013496:	bd70      	pop	{r4, r5, r6, pc}

08013498 <__sfp_lock_acquire>:
 8013498:	4801      	ldr	r0, [pc, #4]	; (80134a0 <__sfp_lock_acquire+0x8>)
 801349a:	f000 b8b3 	b.w	8013604 <__retarget_lock_acquire_recursive>
 801349e:	bf00      	nop
 80134a0:	20000c88 	.word	0x20000c88

080134a4 <__sfp_lock_release>:
 80134a4:	4801      	ldr	r0, [pc, #4]	; (80134ac <__sfp_lock_release+0x8>)
 80134a6:	f000 b8ae 	b.w	8013606 <__retarget_lock_release_recursive>
 80134aa:	bf00      	nop
 80134ac:	20000c88 	.word	0x20000c88

080134b0 <__sinit_lock_acquire>:
 80134b0:	4801      	ldr	r0, [pc, #4]	; (80134b8 <__sinit_lock_acquire+0x8>)
 80134b2:	f000 b8a7 	b.w	8013604 <__retarget_lock_acquire_recursive>
 80134b6:	bf00      	nop
 80134b8:	20000c83 	.word	0x20000c83

080134bc <__sinit_lock_release>:
 80134bc:	4801      	ldr	r0, [pc, #4]	; (80134c4 <__sinit_lock_release+0x8>)
 80134be:	f000 b8a2 	b.w	8013606 <__retarget_lock_release_recursive>
 80134c2:	bf00      	nop
 80134c4:	20000c83 	.word	0x20000c83

080134c8 <__sinit>:
 80134c8:	b510      	push	{r4, lr}
 80134ca:	4604      	mov	r4, r0
 80134cc:	f7ff fff0 	bl	80134b0 <__sinit_lock_acquire>
 80134d0:	69a3      	ldr	r3, [r4, #24]
 80134d2:	b11b      	cbz	r3, 80134dc <__sinit+0x14>
 80134d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80134d8:	f7ff bff0 	b.w	80134bc <__sinit_lock_release>
 80134dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80134e0:	6523      	str	r3, [r4, #80]	; 0x50
 80134e2:	4b13      	ldr	r3, [pc, #76]	; (8013530 <__sinit+0x68>)
 80134e4:	4a13      	ldr	r2, [pc, #76]	; (8013534 <__sinit+0x6c>)
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80134ea:	42a3      	cmp	r3, r4
 80134ec:	bf04      	itt	eq
 80134ee:	2301      	moveq	r3, #1
 80134f0:	61a3      	streq	r3, [r4, #24]
 80134f2:	4620      	mov	r0, r4
 80134f4:	f000 f820 	bl	8013538 <__sfp>
 80134f8:	6060      	str	r0, [r4, #4]
 80134fa:	4620      	mov	r0, r4
 80134fc:	f000 f81c 	bl	8013538 <__sfp>
 8013500:	60a0      	str	r0, [r4, #8]
 8013502:	4620      	mov	r0, r4
 8013504:	f000 f818 	bl	8013538 <__sfp>
 8013508:	2200      	movs	r2, #0
 801350a:	60e0      	str	r0, [r4, #12]
 801350c:	2104      	movs	r1, #4
 801350e:	6860      	ldr	r0, [r4, #4]
 8013510:	f7ff ff82 	bl	8013418 <std>
 8013514:	68a0      	ldr	r0, [r4, #8]
 8013516:	2201      	movs	r2, #1
 8013518:	2109      	movs	r1, #9
 801351a:	f7ff ff7d 	bl	8013418 <std>
 801351e:	68e0      	ldr	r0, [r4, #12]
 8013520:	2202      	movs	r2, #2
 8013522:	2112      	movs	r1, #18
 8013524:	f7ff ff78 	bl	8013418 <std>
 8013528:	2301      	movs	r3, #1
 801352a:	61a3      	str	r3, [r4, #24]
 801352c:	e7d2      	b.n	80134d4 <__sinit+0xc>
 801352e:	bf00      	nop
 8013530:	080167f4 	.word	0x080167f4
 8013534:	08013461 	.word	0x08013461

08013538 <__sfp>:
 8013538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801353a:	4607      	mov	r7, r0
 801353c:	f7ff ffac 	bl	8013498 <__sfp_lock_acquire>
 8013540:	4b1e      	ldr	r3, [pc, #120]	; (80135bc <__sfp+0x84>)
 8013542:	681e      	ldr	r6, [r3, #0]
 8013544:	69b3      	ldr	r3, [r6, #24]
 8013546:	b913      	cbnz	r3, 801354e <__sfp+0x16>
 8013548:	4630      	mov	r0, r6
 801354a:	f7ff ffbd 	bl	80134c8 <__sinit>
 801354e:	3648      	adds	r6, #72	; 0x48
 8013550:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013554:	3b01      	subs	r3, #1
 8013556:	d503      	bpl.n	8013560 <__sfp+0x28>
 8013558:	6833      	ldr	r3, [r6, #0]
 801355a:	b30b      	cbz	r3, 80135a0 <__sfp+0x68>
 801355c:	6836      	ldr	r6, [r6, #0]
 801355e:	e7f7      	b.n	8013550 <__sfp+0x18>
 8013560:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013564:	b9d5      	cbnz	r5, 801359c <__sfp+0x64>
 8013566:	4b16      	ldr	r3, [pc, #88]	; (80135c0 <__sfp+0x88>)
 8013568:	60e3      	str	r3, [r4, #12]
 801356a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801356e:	6665      	str	r5, [r4, #100]	; 0x64
 8013570:	f000 f847 	bl	8013602 <__retarget_lock_init_recursive>
 8013574:	f7ff ff96 	bl	80134a4 <__sfp_lock_release>
 8013578:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801357c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013580:	6025      	str	r5, [r4, #0]
 8013582:	61a5      	str	r5, [r4, #24]
 8013584:	2208      	movs	r2, #8
 8013586:	4629      	mov	r1, r5
 8013588:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801358c:	f7ff fcfa 	bl	8012f84 <memset>
 8013590:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013594:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013598:	4620      	mov	r0, r4
 801359a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801359c:	3468      	adds	r4, #104	; 0x68
 801359e:	e7d9      	b.n	8013554 <__sfp+0x1c>
 80135a0:	2104      	movs	r1, #4
 80135a2:	4638      	mov	r0, r7
 80135a4:	f7ff ff62 	bl	801346c <__sfmoreglue>
 80135a8:	4604      	mov	r4, r0
 80135aa:	6030      	str	r0, [r6, #0]
 80135ac:	2800      	cmp	r0, #0
 80135ae:	d1d5      	bne.n	801355c <__sfp+0x24>
 80135b0:	f7ff ff78 	bl	80134a4 <__sfp_lock_release>
 80135b4:	230c      	movs	r3, #12
 80135b6:	603b      	str	r3, [r7, #0]
 80135b8:	e7ee      	b.n	8013598 <__sfp+0x60>
 80135ba:	bf00      	nop
 80135bc:	080167f4 	.word	0x080167f4
 80135c0:	ffff0001 	.word	0xffff0001

080135c4 <_fwalk_reent>:
 80135c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80135c8:	4606      	mov	r6, r0
 80135ca:	4688      	mov	r8, r1
 80135cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80135d0:	2700      	movs	r7, #0
 80135d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80135d6:	f1b9 0901 	subs.w	r9, r9, #1
 80135da:	d505      	bpl.n	80135e8 <_fwalk_reent+0x24>
 80135dc:	6824      	ldr	r4, [r4, #0]
 80135de:	2c00      	cmp	r4, #0
 80135e0:	d1f7      	bne.n	80135d2 <_fwalk_reent+0xe>
 80135e2:	4638      	mov	r0, r7
 80135e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135e8:	89ab      	ldrh	r3, [r5, #12]
 80135ea:	2b01      	cmp	r3, #1
 80135ec:	d907      	bls.n	80135fe <_fwalk_reent+0x3a>
 80135ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80135f2:	3301      	adds	r3, #1
 80135f4:	d003      	beq.n	80135fe <_fwalk_reent+0x3a>
 80135f6:	4629      	mov	r1, r5
 80135f8:	4630      	mov	r0, r6
 80135fa:	47c0      	blx	r8
 80135fc:	4307      	orrs	r7, r0
 80135fe:	3568      	adds	r5, #104	; 0x68
 8013600:	e7e9      	b.n	80135d6 <_fwalk_reent+0x12>

08013602 <__retarget_lock_init_recursive>:
 8013602:	4770      	bx	lr

08013604 <__retarget_lock_acquire_recursive>:
 8013604:	4770      	bx	lr

08013606 <__retarget_lock_release_recursive>:
 8013606:	4770      	bx	lr

08013608 <__swhatbuf_r>:
 8013608:	b570      	push	{r4, r5, r6, lr}
 801360a:	460e      	mov	r6, r1
 801360c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013610:	2900      	cmp	r1, #0
 8013612:	b096      	sub	sp, #88	; 0x58
 8013614:	4614      	mov	r4, r2
 8013616:	461d      	mov	r5, r3
 8013618:	da07      	bge.n	801362a <__swhatbuf_r+0x22>
 801361a:	2300      	movs	r3, #0
 801361c:	602b      	str	r3, [r5, #0]
 801361e:	89b3      	ldrh	r3, [r6, #12]
 8013620:	061a      	lsls	r2, r3, #24
 8013622:	d410      	bmi.n	8013646 <__swhatbuf_r+0x3e>
 8013624:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013628:	e00e      	b.n	8013648 <__swhatbuf_r+0x40>
 801362a:	466a      	mov	r2, sp
 801362c:	f000 fdba 	bl	80141a4 <_fstat_r>
 8013630:	2800      	cmp	r0, #0
 8013632:	dbf2      	blt.n	801361a <__swhatbuf_r+0x12>
 8013634:	9a01      	ldr	r2, [sp, #4]
 8013636:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801363a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801363e:	425a      	negs	r2, r3
 8013640:	415a      	adcs	r2, r3
 8013642:	602a      	str	r2, [r5, #0]
 8013644:	e7ee      	b.n	8013624 <__swhatbuf_r+0x1c>
 8013646:	2340      	movs	r3, #64	; 0x40
 8013648:	2000      	movs	r0, #0
 801364a:	6023      	str	r3, [r4, #0]
 801364c:	b016      	add	sp, #88	; 0x58
 801364e:	bd70      	pop	{r4, r5, r6, pc}

08013650 <__smakebuf_r>:
 8013650:	898b      	ldrh	r3, [r1, #12]
 8013652:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013654:	079d      	lsls	r5, r3, #30
 8013656:	4606      	mov	r6, r0
 8013658:	460c      	mov	r4, r1
 801365a:	d507      	bpl.n	801366c <__smakebuf_r+0x1c>
 801365c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013660:	6023      	str	r3, [r4, #0]
 8013662:	6123      	str	r3, [r4, #16]
 8013664:	2301      	movs	r3, #1
 8013666:	6163      	str	r3, [r4, #20]
 8013668:	b002      	add	sp, #8
 801366a:	bd70      	pop	{r4, r5, r6, pc}
 801366c:	ab01      	add	r3, sp, #4
 801366e:	466a      	mov	r2, sp
 8013670:	f7ff ffca 	bl	8013608 <__swhatbuf_r>
 8013674:	9900      	ldr	r1, [sp, #0]
 8013676:	4605      	mov	r5, r0
 8013678:	4630      	mov	r0, r6
 801367a:	f000 f879 	bl	8013770 <_malloc_r>
 801367e:	b948      	cbnz	r0, 8013694 <__smakebuf_r+0x44>
 8013680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013684:	059a      	lsls	r2, r3, #22
 8013686:	d4ef      	bmi.n	8013668 <__smakebuf_r+0x18>
 8013688:	f023 0303 	bic.w	r3, r3, #3
 801368c:	f043 0302 	orr.w	r3, r3, #2
 8013690:	81a3      	strh	r3, [r4, #12]
 8013692:	e7e3      	b.n	801365c <__smakebuf_r+0xc>
 8013694:	4b0d      	ldr	r3, [pc, #52]	; (80136cc <__smakebuf_r+0x7c>)
 8013696:	62b3      	str	r3, [r6, #40]	; 0x28
 8013698:	89a3      	ldrh	r3, [r4, #12]
 801369a:	6020      	str	r0, [r4, #0]
 801369c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80136a0:	81a3      	strh	r3, [r4, #12]
 80136a2:	9b00      	ldr	r3, [sp, #0]
 80136a4:	6163      	str	r3, [r4, #20]
 80136a6:	9b01      	ldr	r3, [sp, #4]
 80136a8:	6120      	str	r0, [r4, #16]
 80136aa:	b15b      	cbz	r3, 80136c4 <__smakebuf_r+0x74>
 80136ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80136b0:	4630      	mov	r0, r6
 80136b2:	f000 fd89 	bl	80141c8 <_isatty_r>
 80136b6:	b128      	cbz	r0, 80136c4 <__smakebuf_r+0x74>
 80136b8:	89a3      	ldrh	r3, [r4, #12]
 80136ba:	f023 0303 	bic.w	r3, r3, #3
 80136be:	f043 0301 	orr.w	r3, r3, #1
 80136c2:	81a3      	strh	r3, [r4, #12]
 80136c4:	89a0      	ldrh	r0, [r4, #12]
 80136c6:	4305      	orrs	r5, r0
 80136c8:	81a5      	strh	r5, [r4, #12]
 80136ca:	e7cd      	b.n	8013668 <__smakebuf_r+0x18>
 80136cc:	08013461 	.word	0x08013461

080136d0 <_free_r>:
 80136d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80136d2:	2900      	cmp	r1, #0
 80136d4:	d048      	beq.n	8013768 <_free_r+0x98>
 80136d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80136da:	9001      	str	r0, [sp, #4]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	f1a1 0404 	sub.w	r4, r1, #4
 80136e2:	bfb8      	it	lt
 80136e4:	18e4      	addlt	r4, r4, r3
 80136e6:	f000 fdab 	bl	8014240 <__malloc_lock>
 80136ea:	4a20      	ldr	r2, [pc, #128]	; (801376c <_free_r+0x9c>)
 80136ec:	9801      	ldr	r0, [sp, #4]
 80136ee:	6813      	ldr	r3, [r2, #0]
 80136f0:	4615      	mov	r5, r2
 80136f2:	b933      	cbnz	r3, 8013702 <_free_r+0x32>
 80136f4:	6063      	str	r3, [r4, #4]
 80136f6:	6014      	str	r4, [r2, #0]
 80136f8:	b003      	add	sp, #12
 80136fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80136fe:	f000 bda5 	b.w	801424c <__malloc_unlock>
 8013702:	42a3      	cmp	r3, r4
 8013704:	d90b      	bls.n	801371e <_free_r+0x4e>
 8013706:	6821      	ldr	r1, [r4, #0]
 8013708:	1862      	adds	r2, r4, r1
 801370a:	4293      	cmp	r3, r2
 801370c:	bf04      	itt	eq
 801370e:	681a      	ldreq	r2, [r3, #0]
 8013710:	685b      	ldreq	r3, [r3, #4]
 8013712:	6063      	str	r3, [r4, #4]
 8013714:	bf04      	itt	eq
 8013716:	1852      	addeq	r2, r2, r1
 8013718:	6022      	streq	r2, [r4, #0]
 801371a:	602c      	str	r4, [r5, #0]
 801371c:	e7ec      	b.n	80136f8 <_free_r+0x28>
 801371e:	461a      	mov	r2, r3
 8013720:	685b      	ldr	r3, [r3, #4]
 8013722:	b10b      	cbz	r3, 8013728 <_free_r+0x58>
 8013724:	42a3      	cmp	r3, r4
 8013726:	d9fa      	bls.n	801371e <_free_r+0x4e>
 8013728:	6811      	ldr	r1, [r2, #0]
 801372a:	1855      	adds	r5, r2, r1
 801372c:	42a5      	cmp	r5, r4
 801372e:	d10b      	bne.n	8013748 <_free_r+0x78>
 8013730:	6824      	ldr	r4, [r4, #0]
 8013732:	4421      	add	r1, r4
 8013734:	1854      	adds	r4, r2, r1
 8013736:	42a3      	cmp	r3, r4
 8013738:	6011      	str	r1, [r2, #0]
 801373a:	d1dd      	bne.n	80136f8 <_free_r+0x28>
 801373c:	681c      	ldr	r4, [r3, #0]
 801373e:	685b      	ldr	r3, [r3, #4]
 8013740:	6053      	str	r3, [r2, #4]
 8013742:	4421      	add	r1, r4
 8013744:	6011      	str	r1, [r2, #0]
 8013746:	e7d7      	b.n	80136f8 <_free_r+0x28>
 8013748:	d902      	bls.n	8013750 <_free_r+0x80>
 801374a:	230c      	movs	r3, #12
 801374c:	6003      	str	r3, [r0, #0]
 801374e:	e7d3      	b.n	80136f8 <_free_r+0x28>
 8013750:	6825      	ldr	r5, [r4, #0]
 8013752:	1961      	adds	r1, r4, r5
 8013754:	428b      	cmp	r3, r1
 8013756:	bf04      	itt	eq
 8013758:	6819      	ldreq	r1, [r3, #0]
 801375a:	685b      	ldreq	r3, [r3, #4]
 801375c:	6063      	str	r3, [r4, #4]
 801375e:	bf04      	itt	eq
 8013760:	1949      	addeq	r1, r1, r5
 8013762:	6021      	streq	r1, [r4, #0]
 8013764:	6054      	str	r4, [r2, #4]
 8013766:	e7c7      	b.n	80136f8 <_free_r+0x28>
 8013768:	b003      	add	sp, #12
 801376a:	bd30      	pop	{r4, r5, pc}
 801376c:	200006f0 	.word	0x200006f0

08013770 <_malloc_r>:
 8013770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013772:	1ccd      	adds	r5, r1, #3
 8013774:	f025 0503 	bic.w	r5, r5, #3
 8013778:	3508      	adds	r5, #8
 801377a:	2d0c      	cmp	r5, #12
 801377c:	bf38      	it	cc
 801377e:	250c      	movcc	r5, #12
 8013780:	2d00      	cmp	r5, #0
 8013782:	4606      	mov	r6, r0
 8013784:	db01      	blt.n	801378a <_malloc_r+0x1a>
 8013786:	42a9      	cmp	r1, r5
 8013788:	d903      	bls.n	8013792 <_malloc_r+0x22>
 801378a:	230c      	movs	r3, #12
 801378c:	6033      	str	r3, [r6, #0]
 801378e:	2000      	movs	r0, #0
 8013790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013792:	f000 fd55 	bl	8014240 <__malloc_lock>
 8013796:	4921      	ldr	r1, [pc, #132]	; (801381c <_malloc_r+0xac>)
 8013798:	680a      	ldr	r2, [r1, #0]
 801379a:	4614      	mov	r4, r2
 801379c:	b99c      	cbnz	r4, 80137c6 <_malloc_r+0x56>
 801379e:	4f20      	ldr	r7, [pc, #128]	; (8013820 <_malloc_r+0xb0>)
 80137a0:	683b      	ldr	r3, [r7, #0]
 80137a2:	b923      	cbnz	r3, 80137ae <_malloc_r+0x3e>
 80137a4:	4621      	mov	r1, r4
 80137a6:	4630      	mov	r0, r6
 80137a8:	f000 fc86 	bl	80140b8 <_sbrk_r>
 80137ac:	6038      	str	r0, [r7, #0]
 80137ae:	4629      	mov	r1, r5
 80137b0:	4630      	mov	r0, r6
 80137b2:	f000 fc81 	bl	80140b8 <_sbrk_r>
 80137b6:	1c43      	adds	r3, r0, #1
 80137b8:	d123      	bne.n	8013802 <_malloc_r+0x92>
 80137ba:	230c      	movs	r3, #12
 80137bc:	6033      	str	r3, [r6, #0]
 80137be:	4630      	mov	r0, r6
 80137c0:	f000 fd44 	bl	801424c <__malloc_unlock>
 80137c4:	e7e3      	b.n	801378e <_malloc_r+0x1e>
 80137c6:	6823      	ldr	r3, [r4, #0]
 80137c8:	1b5b      	subs	r3, r3, r5
 80137ca:	d417      	bmi.n	80137fc <_malloc_r+0x8c>
 80137cc:	2b0b      	cmp	r3, #11
 80137ce:	d903      	bls.n	80137d8 <_malloc_r+0x68>
 80137d0:	6023      	str	r3, [r4, #0]
 80137d2:	441c      	add	r4, r3
 80137d4:	6025      	str	r5, [r4, #0]
 80137d6:	e004      	b.n	80137e2 <_malloc_r+0x72>
 80137d8:	6863      	ldr	r3, [r4, #4]
 80137da:	42a2      	cmp	r2, r4
 80137dc:	bf0c      	ite	eq
 80137de:	600b      	streq	r3, [r1, #0]
 80137e0:	6053      	strne	r3, [r2, #4]
 80137e2:	4630      	mov	r0, r6
 80137e4:	f000 fd32 	bl	801424c <__malloc_unlock>
 80137e8:	f104 000b 	add.w	r0, r4, #11
 80137ec:	1d23      	adds	r3, r4, #4
 80137ee:	f020 0007 	bic.w	r0, r0, #7
 80137f2:	1ac2      	subs	r2, r0, r3
 80137f4:	d0cc      	beq.n	8013790 <_malloc_r+0x20>
 80137f6:	1a1b      	subs	r3, r3, r0
 80137f8:	50a3      	str	r3, [r4, r2]
 80137fa:	e7c9      	b.n	8013790 <_malloc_r+0x20>
 80137fc:	4622      	mov	r2, r4
 80137fe:	6864      	ldr	r4, [r4, #4]
 8013800:	e7cc      	b.n	801379c <_malloc_r+0x2c>
 8013802:	1cc4      	adds	r4, r0, #3
 8013804:	f024 0403 	bic.w	r4, r4, #3
 8013808:	42a0      	cmp	r0, r4
 801380a:	d0e3      	beq.n	80137d4 <_malloc_r+0x64>
 801380c:	1a21      	subs	r1, r4, r0
 801380e:	4630      	mov	r0, r6
 8013810:	f000 fc52 	bl	80140b8 <_sbrk_r>
 8013814:	3001      	adds	r0, #1
 8013816:	d1dd      	bne.n	80137d4 <_malloc_r+0x64>
 8013818:	e7cf      	b.n	80137ba <_malloc_r+0x4a>
 801381a:	bf00      	nop
 801381c:	200006f0 	.word	0x200006f0
 8013820:	200006f4 	.word	0x200006f4

08013824 <__ssputs_r>:
 8013824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013828:	688e      	ldr	r6, [r1, #8]
 801382a:	429e      	cmp	r6, r3
 801382c:	4682      	mov	sl, r0
 801382e:	460c      	mov	r4, r1
 8013830:	4690      	mov	r8, r2
 8013832:	461f      	mov	r7, r3
 8013834:	d838      	bhi.n	80138a8 <__ssputs_r+0x84>
 8013836:	898a      	ldrh	r2, [r1, #12]
 8013838:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801383c:	d032      	beq.n	80138a4 <__ssputs_r+0x80>
 801383e:	6825      	ldr	r5, [r4, #0]
 8013840:	6909      	ldr	r1, [r1, #16]
 8013842:	eba5 0901 	sub.w	r9, r5, r1
 8013846:	6965      	ldr	r5, [r4, #20]
 8013848:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801384c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013850:	3301      	adds	r3, #1
 8013852:	444b      	add	r3, r9
 8013854:	106d      	asrs	r5, r5, #1
 8013856:	429d      	cmp	r5, r3
 8013858:	bf38      	it	cc
 801385a:	461d      	movcc	r5, r3
 801385c:	0553      	lsls	r3, r2, #21
 801385e:	d531      	bpl.n	80138c4 <__ssputs_r+0xa0>
 8013860:	4629      	mov	r1, r5
 8013862:	f7ff ff85 	bl	8013770 <_malloc_r>
 8013866:	4606      	mov	r6, r0
 8013868:	b950      	cbnz	r0, 8013880 <__ssputs_r+0x5c>
 801386a:	230c      	movs	r3, #12
 801386c:	f8ca 3000 	str.w	r3, [sl]
 8013870:	89a3      	ldrh	r3, [r4, #12]
 8013872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013876:	81a3      	strh	r3, [r4, #12]
 8013878:	f04f 30ff 	mov.w	r0, #4294967295
 801387c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013880:	6921      	ldr	r1, [r4, #16]
 8013882:	464a      	mov	r2, r9
 8013884:	f7ff fb70 	bl	8012f68 <memcpy>
 8013888:	89a3      	ldrh	r3, [r4, #12]
 801388a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801388e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013892:	81a3      	strh	r3, [r4, #12]
 8013894:	6126      	str	r6, [r4, #16]
 8013896:	6165      	str	r5, [r4, #20]
 8013898:	444e      	add	r6, r9
 801389a:	eba5 0509 	sub.w	r5, r5, r9
 801389e:	6026      	str	r6, [r4, #0]
 80138a0:	60a5      	str	r5, [r4, #8]
 80138a2:	463e      	mov	r6, r7
 80138a4:	42be      	cmp	r6, r7
 80138a6:	d900      	bls.n	80138aa <__ssputs_r+0x86>
 80138a8:	463e      	mov	r6, r7
 80138aa:	4632      	mov	r2, r6
 80138ac:	6820      	ldr	r0, [r4, #0]
 80138ae:	4641      	mov	r1, r8
 80138b0:	f000 fcac 	bl	801420c <memmove>
 80138b4:	68a3      	ldr	r3, [r4, #8]
 80138b6:	6822      	ldr	r2, [r4, #0]
 80138b8:	1b9b      	subs	r3, r3, r6
 80138ba:	4432      	add	r2, r6
 80138bc:	60a3      	str	r3, [r4, #8]
 80138be:	6022      	str	r2, [r4, #0]
 80138c0:	2000      	movs	r0, #0
 80138c2:	e7db      	b.n	801387c <__ssputs_r+0x58>
 80138c4:	462a      	mov	r2, r5
 80138c6:	f000 fcc7 	bl	8014258 <_realloc_r>
 80138ca:	4606      	mov	r6, r0
 80138cc:	2800      	cmp	r0, #0
 80138ce:	d1e1      	bne.n	8013894 <__ssputs_r+0x70>
 80138d0:	6921      	ldr	r1, [r4, #16]
 80138d2:	4650      	mov	r0, sl
 80138d4:	f7ff fefc 	bl	80136d0 <_free_r>
 80138d8:	e7c7      	b.n	801386a <__ssputs_r+0x46>
	...

080138dc <_svfiprintf_r>:
 80138dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138e0:	4698      	mov	r8, r3
 80138e2:	898b      	ldrh	r3, [r1, #12]
 80138e4:	061b      	lsls	r3, r3, #24
 80138e6:	b09d      	sub	sp, #116	; 0x74
 80138e8:	4607      	mov	r7, r0
 80138ea:	460d      	mov	r5, r1
 80138ec:	4614      	mov	r4, r2
 80138ee:	d50e      	bpl.n	801390e <_svfiprintf_r+0x32>
 80138f0:	690b      	ldr	r3, [r1, #16]
 80138f2:	b963      	cbnz	r3, 801390e <_svfiprintf_r+0x32>
 80138f4:	2140      	movs	r1, #64	; 0x40
 80138f6:	f7ff ff3b 	bl	8013770 <_malloc_r>
 80138fa:	6028      	str	r0, [r5, #0]
 80138fc:	6128      	str	r0, [r5, #16]
 80138fe:	b920      	cbnz	r0, 801390a <_svfiprintf_r+0x2e>
 8013900:	230c      	movs	r3, #12
 8013902:	603b      	str	r3, [r7, #0]
 8013904:	f04f 30ff 	mov.w	r0, #4294967295
 8013908:	e0d1      	b.n	8013aae <_svfiprintf_r+0x1d2>
 801390a:	2340      	movs	r3, #64	; 0x40
 801390c:	616b      	str	r3, [r5, #20]
 801390e:	2300      	movs	r3, #0
 8013910:	9309      	str	r3, [sp, #36]	; 0x24
 8013912:	2320      	movs	r3, #32
 8013914:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013918:	f8cd 800c 	str.w	r8, [sp, #12]
 801391c:	2330      	movs	r3, #48	; 0x30
 801391e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013ac8 <_svfiprintf_r+0x1ec>
 8013922:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013926:	f04f 0901 	mov.w	r9, #1
 801392a:	4623      	mov	r3, r4
 801392c:	469a      	mov	sl, r3
 801392e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013932:	b10a      	cbz	r2, 8013938 <_svfiprintf_r+0x5c>
 8013934:	2a25      	cmp	r2, #37	; 0x25
 8013936:	d1f9      	bne.n	801392c <_svfiprintf_r+0x50>
 8013938:	ebba 0b04 	subs.w	fp, sl, r4
 801393c:	d00b      	beq.n	8013956 <_svfiprintf_r+0x7a>
 801393e:	465b      	mov	r3, fp
 8013940:	4622      	mov	r2, r4
 8013942:	4629      	mov	r1, r5
 8013944:	4638      	mov	r0, r7
 8013946:	f7ff ff6d 	bl	8013824 <__ssputs_r>
 801394a:	3001      	adds	r0, #1
 801394c:	f000 80aa 	beq.w	8013aa4 <_svfiprintf_r+0x1c8>
 8013950:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013952:	445a      	add	r2, fp
 8013954:	9209      	str	r2, [sp, #36]	; 0x24
 8013956:	f89a 3000 	ldrb.w	r3, [sl]
 801395a:	2b00      	cmp	r3, #0
 801395c:	f000 80a2 	beq.w	8013aa4 <_svfiprintf_r+0x1c8>
 8013960:	2300      	movs	r3, #0
 8013962:	f04f 32ff 	mov.w	r2, #4294967295
 8013966:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801396a:	f10a 0a01 	add.w	sl, sl, #1
 801396e:	9304      	str	r3, [sp, #16]
 8013970:	9307      	str	r3, [sp, #28]
 8013972:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013976:	931a      	str	r3, [sp, #104]	; 0x68
 8013978:	4654      	mov	r4, sl
 801397a:	2205      	movs	r2, #5
 801397c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013980:	4851      	ldr	r0, [pc, #324]	; (8013ac8 <_svfiprintf_r+0x1ec>)
 8013982:	f7ec fbfd 	bl	8000180 <memchr>
 8013986:	9a04      	ldr	r2, [sp, #16]
 8013988:	b9d8      	cbnz	r0, 80139c2 <_svfiprintf_r+0xe6>
 801398a:	06d0      	lsls	r0, r2, #27
 801398c:	bf44      	itt	mi
 801398e:	2320      	movmi	r3, #32
 8013990:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013994:	0711      	lsls	r1, r2, #28
 8013996:	bf44      	itt	mi
 8013998:	232b      	movmi	r3, #43	; 0x2b
 801399a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801399e:	f89a 3000 	ldrb.w	r3, [sl]
 80139a2:	2b2a      	cmp	r3, #42	; 0x2a
 80139a4:	d015      	beq.n	80139d2 <_svfiprintf_r+0xf6>
 80139a6:	9a07      	ldr	r2, [sp, #28]
 80139a8:	4654      	mov	r4, sl
 80139aa:	2000      	movs	r0, #0
 80139ac:	f04f 0c0a 	mov.w	ip, #10
 80139b0:	4621      	mov	r1, r4
 80139b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80139b6:	3b30      	subs	r3, #48	; 0x30
 80139b8:	2b09      	cmp	r3, #9
 80139ba:	d94e      	bls.n	8013a5a <_svfiprintf_r+0x17e>
 80139bc:	b1b0      	cbz	r0, 80139ec <_svfiprintf_r+0x110>
 80139be:	9207      	str	r2, [sp, #28]
 80139c0:	e014      	b.n	80139ec <_svfiprintf_r+0x110>
 80139c2:	eba0 0308 	sub.w	r3, r0, r8
 80139c6:	fa09 f303 	lsl.w	r3, r9, r3
 80139ca:	4313      	orrs	r3, r2
 80139cc:	9304      	str	r3, [sp, #16]
 80139ce:	46a2      	mov	sl, r4
 80139d0:	e7d2      	b.n	8013978 <_svfiprintf_r+0x9c>
 80139d2:	9b03      	ldr	r3, [sp, #12]
 80139d4:	1d19      	adds	r1, r3, #4
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	9103      	str	r1, [sp, #12]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	bfbb      	ittet	lt
 80139de:	425b      	neglt	r3, r3
 80139e0:	f042 0202 	orrlt.w	r2, r2, #2
 80139e4:	9307      	strge	r3, [sp, #28]
 80139e6:	9307      	strlt	r3, [sp, #28]
 80139e8:	bfb8      	it	lt
 80139ea:	9204      	strlt	r2, [sp, #16]
 80139ec:	7823      	ldrb	r3, [r4, #0]
 80139ee:	2b2e      	cmp	r3, #46	; 0x2e
 80139f0:	d10c      	bne.n	8013a0c <_svfiprintf_r+0x130>
 80139f2:	7863      	ldrb	r3, [r4, #1]
 80139f4:	2b2a      	cmp	r3, #42	; 0x2a
 80139f6:	d135      	bne.n	8013a64 <_svfiprintf_r+0x188>
 80139f8:	9b03      	ldr	r3, [sp, #12]
 80139fa:	1d1a      	adds	r2, r3, #4
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	9203      	str	r2, [sp, #12]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	bfb8      	it	lt
 8013a04:	f04f 33ff 	movlt.w	r3, #4294967295
 8013a08:	3402      	adds	r4, #2
 8013a0a:	9305      	str	r3, [sp, #20]
 8013a0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013ad8 <_svfiprintf_r+0x1fc>
 8013a10:	7821      	ldrb	r1, [r4, #0]
 8013a12:	2203      	movs	r2, #3
 8013a14:	4650      	mov	r0, sl
 8013a16:	f7ec fbb3 	bl	8000180 <memchr>
 8013a1a:	b140      	cbz	r0, 8013a2e <_svfiprintf_r+0x152>
 8013a1c:	2340      	movs	r3, #64	; 0x40
 8013a1e:	eba0 000a 	sub.w	r0, r0, sl
 8013a22:	fa03 f000 	lsl.w	r0, r3, r0
 8013a26:	9b04      	ldr	r3, [sp, #16]
 8013a28:	4303      	orrs	r3, r0
 8013a2a:	3401      	adds	r4, #1
 8013a2c:	9304      	str	r3, [sp, #16]
 8013a2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a32:	4826      	ldr	r0, [pc, #152]	; (8013acc <_svfiprintf_r+0x1f0>)
 8013a34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013a38:	2206      	movs	r2, #6
 8013a3a:	f7ec fba1 	bl	8000180 <memchr>
 8013a3e:	2800      	cmp	r0, #0
 8013a40:	d038      	beq.n	8013ab4 <_svfiprintf_r+0x1d8>
 8013a42:	4b23      	ldr	r3, [pc, #140]	; (8013ad0 <_svfiprintf_r+0x1f4>)
 8013a44:	bb1b      	cbnz	r3, 8013a8e <_svfiprintf_r+0x1b2>
 8013a46:	9b03      	ldr	r3, [sp, #12]
 8013a48:	3307      	adds	r3, #7
 8013a4a:	f023 0307 	bic.w	r3, r3, #7
 8013a4e:	3308      	adds	r3, #8
 8013a50:	9303      	str	r3, [sp, #12]
 8013a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a54:	4433      	add	r3, r6
 8013a56:	9309      	str	r3, [sp, #36]	; 0x24
 8013a58:	e767      	b.n	801392a <_svfiprintf_r+0x4e>
 8013a5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8013a5e:	460c      	mov	r4, r1
 8013a60:	2001      	movs	r0, #1
 8013a62:	e7a5      	b.n	80139b0 <_svfiprintf_r+0xd4>
 8013a64:	2300      	movs	r3, #0
 8013a66:	3401      	adds	r4, #1
 8013a68:	9305      	str	r3, [sp, #20]
 8013a6a:	4619      	mov	r1, r3
 8013a6c:	f04f 0c0a 	mov.w	ip, #10
 8013a70:	4620      	mov	r0, r4
 8013a72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a76:	3a30      	subs	r2, #48	; 0x30
 8013a78:	2a09      	cmp	r2, #9
 8013a7a:	d903      	bls.n	8013a84 <_svfiprintf_r+0x1a8>
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d0c5      	beq.n	8013a0c <_svfiprintf_r+0x130>
 8013a80:	9105      	str	r1, [sp, #20]
 8013a82:	e7c3      	b.n	8013a0c <_svfiprintf_r+0x130>
 8013a84:	fb0c 2101 	mla	r1, ip, r1, r2
 8013a88:	4604      	mov	r4, r0
 8013a8a:	2301      	movs	r3, #1
 8013a8c:	e7f0      	b.n	8013a70 <_svfiprintf_r+0x194>
 8013a8e:	ab03      	add	r3, sp, #12
 8013a90:	9300      	str	r3, [sp, #0]
 8013a92:	462a      	mov	r2, r5
 8013a94:	4b0f      	ldr	r3, [pc, #60]	; (8013ad4 <_svfiprintf_r+0x1f8>)
 8013a96:	a904      	add	r1, sp, #16
 8013a98:	4638      	mov	r0, r7
 8013a9a:	f3af 8000 	nop.w
 8013a9e:	1c42      	adds	r2, r0, #1
 8013aa0:	4606      	mov	r6, r0
 8013aa2:	d1d6      	bne.n	8013a52 <_svfiprintf_r+0x176>
 8013aa4:	89ab      	ldrh	r3, [r5, #12]
 8013aa6:	065b      	lsls	r3, r3, #25
 8013aa8:	f53f af2c 	bmi.w	8013904 <_svfiprintf_r+0x28>
 8013aac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013aae:	b01d      	add	sp, #116	; 0x74
 8013ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ab4:	ab03      	add	r3, sp, #12
 8013ab6:	9300      	str	r3, [sp, #0]
 8013ab8:	462a      	mov	r2, r5
 8013aba:	4b06      	ldr	r3, [pc, #24]	; (8013ad4 <_svfiprintf_r+0x1f8>)
 8013abc:	a904      	add	r1, sp, #16
 8013abe:	4638      	mov	r0, r7
 8013ac0:	f000 f9d4 	bl	8013e6c <_printf_i>
 8013ac4:	e7eb      	b.n	8013a9e <_svfiprintf_r+0x1c2>
 8013ac6:	bf00      	nop
 8013ac8:	08016858 	.word	0x08016858
 8013acc:	08016862 	.word	0x08016862
 8013ad0:	00000000 	.word	0x00000000
 8013ad4:	08013825 	.word	0x08013825
 8013ad8:	0801685e 	.word	0x0801685e

08013adc <__sfputc_r>:
 8013adc:	6893      	ldr	r3, [r2, #8]
 8013ade:	3b01      	subs	r3, #1
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	b410      	push	{r4}
 8013ae4:	6093      	str	r3, [r2, #8]
 8013ae6:	da08      	bge.n	8013afa <__sfputc_r+0x1e>
 8013ae8:	6994      	ldr	r4, [r2, #24]
 8013aea:	42a3      	cmp	r3, r4
 8013aec:	db01      	blt.n	8013af2 <__sfputc_r+0x16>
 8013aee:	290a      	cmp	r1, #10
 8013af0:	d103      	bne.n	8013afa <__sfputc_r+0x1e>
 8013af2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013af6:	f7ff bb0d 	b.w	8013114 <__swbuf_r>
 8013afa:	6813      	ldr	r3, [r2, #0]
 8013afc:	1c58      	adds	r0, r3, #1
 8013afe:	6010      	str	r0, [r2, #0]
 8013b00:	7019      	strb	r1, [r3, #0]
 8013b02:	4608      	mov	r0, r1
 8013b04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b08:	4770      	bx	lr

08013b0a <__sfputs_r>:
 8013b0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b0c:	4606      	mov	r6, r0
 8013b0e:	460f      	mov	r7, r1
 8013b10:	4614      	mov	r4, r2
 8013b12:	18d5      	adds	r5, r2, r3
 8013b14:	42ac      	cmp	r4, r5
 8013b16:	d101      	bne.n	8013b1c <__sfputs_r+0x12>
 8013b18:	2000      	movs	r0, #0
 8013b1a:	e007      	b.n	8013b2c <__sfputs_r+0x22>
 8013b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b20:	463a      	mov	r2, r7
 8013b22:	4630      	mov	r0, r6
 8013b24:	f7ff ffda 	bl	8013adc <__sfputc_r>
 8013b28:	1c43      	adds	r3, r0, #1
 8013b2a:	d1f3      	bne.n	8013b14 <__sfputs_r+0xa>
 8013b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013b30 <_vfiprintf_r>:
 8013b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b34:	460d      	mov	r5, r1
 8013b36:	b09d      	sub	sp, #116	; 0x74
 8013b38:	4614      	mov	r4, r2
 8013b3a:	4698      	mov	r8, r3
 8013b3c:	4606      	mov	r6, r0
 8013b3e:	b118      	cbz	r0, 8013b48 <_vfiprintf_r+0x18>
 8013b40:	6983      	ldr	r3, [r0, #24]
 8013b42:	b90b      	cbnz	r3, 8013b48 <_vfiprintf_r+0x18>
 8013b44:	f7ff fcc0 	bl	80134c8 <__sinit>
 8013b48:	4b89      	ldr	r3, [pc, #548]	; (8013d70 <_vfiprintf_r+0x240>)
 8013b4a:	429d      	cmp	r5, r3
 8013b4c:	d11b      	bne.n	8013b86 <_vfiprintf_r+0x56>
 8013b4e:	6875      	ldr	r5, [r6, #4]
 8013b50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013b52:	07d9      	lsls	r1, r3, #31
 8013b54:	d405      	bmi.n	8013b62 <_vfiprintf_r+0x32>
 8013b56:	89ab      	ldrh	r3, [r5, #12]
 8013b58:	059a      	lsls	r2, r3, #22
 8013b5a:	d402      	bmi.n	8013b62 <_vfiprintf_r+0x32>
 8013b5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013b5e:	f7ff fd51 	bl	8013604 <__retarget_lock_acquire_recursive>
 8013b62:	89ab      	ldrh	r3, [r5, #12]
 8013b64:	071b      	lsls	r3, r3, #28
 8013b66:	d501      	bpl.n	8013b6c <_vfiprintf_r+0x3c>
 8013b68:	692b      	ldr	r3, [r5, #16]
 8013b6a:	b9eb      	cbnz	r3, 8013ba8 <_vfiprintf_r+0x78>
 8013b6c:	4629      	mov	r1, r5
 8013b6e:	4630      	mov	r0, r6
 8013b70:	f7ff fb22 	bl	80131b8 <__swsetup_r>
 8013b74:	b1c0      	cbz	r0, 8013ba8 <_vfiprintf_r+0x78>
 8013b76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013b78:	07dc      	lsls	r4, r3, #31
 8013b7a:	d50e      	bpl.n	8013b9a <_vfiprintf_r+0x6a>
 8013b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8013b80:	b01d      	add	sp, #116	; 0x74
 8013b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b86:	4b7b      	ldr	r3, [pc, #492]	; (8013d74 <_vfiprintf_r+0x244>)
 8013b88:	429d      	cmp	r5, r3
 8013b8a:	d101      	bne.n	8013b90 <_vfiprintf_r+0x60>
 8013b8c:	68b5      	ldr	r5, [r6, #8]
 8013b8e:	e7df      	b.n	8013b50 <_vfiprintf_r+0x20>
 8013b90:	4b79      	ldr	r3, [pc, #484]	; (8013d78 <_vfiprintf_r+0x248>)
 8013b92:	429d      	cmp	r5, r3
 8013b94:	bf08      	it	eq
 8013b96:	68f5      	ldreq	r5, [r6, #12]
 8013b98:	e7da      	b.n	8013b50 <_vfiprintf_r+0x20>
 8013b9a:	89ab      	ldrh	r3, [r5, #12]
 8013b9c:	0598      	lsls	r0, r3, #22
 8013b9e:	d4ed      	bmi.n	8013b7c <_vfiprintf_r+0x4c>
 8013ba0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013ba2:	f7ff fd30 	bl	8013606 <__retarget_lock_release_recursive>
 8013ba6:	e7e9      	b.n	8013b7c <_vfiprintf_r+0x4c>
 8013ba8:	2300      	movs	r3, #0
 8013baa:	9309      	str	r3, [sp, #36]	; 0x24
 8013bac:	2320      	movs	r3, #32
 8013bae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013bb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8013bb6:	2330      	movs	r3, #48	; 0x30
 8013bb8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013d7c <_vfiprintf_r+0x24c>
 8013bbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013bc0:	f04f 0901 	mov.w	r9, #1
 8013bc4:	4623      	mov	r3, r4
 8013bc6:	469a      	mov	sl, r3
 8013bc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013bcc:	b10a      	cbz	r2, 8013bd2 <_vfiprintf_r+0xa2>
 8013bce:	2a25      	cmp	r2, #37	; 0x25
 8013bd0:	d1f9      	bne.n	8013bc6 <_vfiprintf_r+0x96>
 8013bd2:	ebba 0b04 	subs.w	fp, sl, r4
 8013bd6:	d00b      	beq.n	8013bf0 <_vfiprintf_r+0xc0>
 8013bd8:	465b      	mov	r3, fp
 8013bda:	4622      	mov	r2, r4
 8013bdc:	4629      	mov	r1, r5
 8013bde:	4630      	mov	r0, r6
 8013be0:	f7ff ff93 	bl	8013b0a <__sfputs_r>
 8013be4:	3001      	adds	r0, #1
 8013be6:	f000 80aa 	beq.w	8013d3e <_vfiprintf_r+0x20e>
 8013bea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013bec:	445a      	add	r2, fp
 8013bee:	9209      	str	r2, [sp, #36]	; 0x24
 8013bf0:	f89a 3000 	ldrb.w	r3, [sl]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	f000 80a2 	beq.w	8013d3e <_vfiprintf_r+0x20e>
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8013c00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013c04:	f10a 0a01 	add.w	sl, sl, #1
 8013c08:	9304      	str	r3, [sp, #16]
 8013c0a:	9307      	str	r3, [sp, #28]
 8013c0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013c10:	931a      	str	r3, [sp, #104]	; 0x68
 8013c12:	4654      	mov	r4, sl
 8013c14:	2205      	movs	r2, #5
 8013c16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c1a:	4858      	ldr	r0, [pc, #352]	; (8013d7c <_vfiprintf_r+0x24c>)
 8013c1c:	f7ec fab0 	bl	8000180 <memchr>
 8013c20:	9a04      	ldr	r2, [sp, #16]
 8013c22:	b9d8      	cbnz	r0, 8013c5c <_vfiprintf_r+0x12c>
 8013c24:	06d1      	lsls	r1, r2, #27
 8013c26:	bf44      	itt	mi
 8013c28:	2320      	movmi	r3, #32
 8013c2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013c2e:	0713      	lsls	r3, r2, #28
 8013c30:	bf44      	itt	mi
 8013c32:	232b      	movmi	r3, #43	; 0x2b
 8013c34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013c38:	f89a 3000 	ldrb.w	r3, [sl]
 8013c3c:	2b2a      	cmp	r3, #42	; 0x2a
 8013c3e:	d015      	beq.n	8013c6c <_vfiprintf_r+0x13c>
 8013c40:	9a07      	ldr	r2, [sp, #28]
 8013c42:	4654      	mov	r4, sl
 8013c44:	2000      	movs	r0, #0
 8013c46:	f04f 0c0a 	mov.w	ip, #10
 8013c4a:	4621      	mov	r1, r4
 8013c4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013c50:	3b30      	subs	r3, #48	; 0x30
 8013c52:	2b09      	cmp	r3, #9
 8013c54:	d94e      	bls.n	8013cf4 <_vfiprintf_r+0x1c4>
 8013c56:	b1b0      	cbz	r0, 8013c86 <_vfiprintf_r+0x156>
 8013c58:	9207      	str	r2, [sp, #28]
 8013c5a:	e014      	b.n	8013c86 <_vfiprintf_r+0x156>
 8013c5c:	eba0 0308 	sub.w	r3, r0, r8
 8013c60:	fa09 f303 	lsl.w	r3, r9, r3
 8013c64:	4313      	orrs	r3, r2
 8013c66:	9304      	str	r3, [sp, #16]
 8013c68:	46a2      	mov	sl, r4
 8013c6a:	e7d2      	b.n	8013c12 <_vfiprintf_r+0xe2>
 8013c6c:	9b03      	ldr	r3, [sp, #12]
 8013c6e:	1d19      	adds	r1, r3, #4
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	9103      	str	r1, [sp, #12]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	bfbb      	ittet	lt
 8013c78:	425b      	neglt	r3, r3
 8013c7a:	f042 0202 	orrlt.w	r2, r2, #2
 8013c7e:	9307      	strge	r3, [sp, #28]
 8013c80:	9307      	strlt	r3, [sp, #28]
 8013c82:	bfb8      	it	lt
 8013c84:	9204      	strlt	r2, [sp, #16]
 8013c86:	7823      	ldrb	r3, [r4, #0]
 8013c88:	2b2e      	cmp	r3, #46	; 0x2e
 8013c8a:	d10c      	bne.n	8013ca6 <_vfiprintf_r+0x176>
 8013c8c:	7863      	ldrb	r3, [r4, #1]
 8013c8e:	2b2a      	cmp	r3, #42	; 0x2a
 8013c90:	d135      	bne.n	8013cfe <_vfiprintf_r+0x1ce>
 8013c92:	9b03      	ldr	r3, [sp, #12]
 8013c94:	1d1a      	adds	r2, r3, #4
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	9203      	str	r2, [sp, #12]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	bfb8      	it	lt
 8013c9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8013ca2:	3402      	adds	r4, #2
 8013ca4:	9305      	str	r3, [sp, #20]
 8013ca6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013d8c <_vfiprintf_r+0x25c>
 8013caa:	7821      	ldrb	r1, [r4, #0]
 8013cac:	2203      	movs	r2, #3
 8013cae:	4650      	mov	r0, sl
 8013cb0:	f7ec fa66 	bl	8000180 <memchr>
 8013cb4:	b140      	cbz	r0, 8013cc8 <_vfiprintf_r+0x198>
 8013cb6:	2340      	movs	r3, #64	; 0x40
 8013cb8:	eba0 000a 	sub.w	r0, r0, sl
 8013cbc:	fa03 f000 	lsl.w	r0, r3, r0
 8013cc0:	9b04      	ldr	r3, [sp, #16]
 8013cc2:	4303      	orrs	r3, r0
 8013cc4:	3401      	adds	r4, #1
 8013cc6:	9304      	str	r3, [sp, #16]
 8013cc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ccc:	482c      	ldr	r0, [pc, #176]	; (8013d80 <_vfiprintf_r+0x250>)
 8013cce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013cd2:	2206      	movs	r2, #6
 8013cd4:	f7ec fa54 	bl	8000180 <memchr>
 8013cd8:	2800      	cmp	r0, #0
 8013cda:	d03f      	beq.n	8013d5c <_vfiprintf_r+0x22c>
 8013cdc:	4b29      	ldr	r3, [pc, #164]	; (8013d84 <_vfiprintf_r+0x254>)
 8013cde:	bb1b      	cbnz	r3, 8013d28 <_vfiprintf_r+0x1f8>
 8013ce0:	9b03      	ldr	r3, [sp, #12]
 8013ce2:	3307      	adds	r3, #7
 8013ce4:	f023 0307 	bic.w	r3, r3, #7
 8013ce8:	3308      	adds	r3, #8
 8013cea:	9303      	str	r3, [sp, #12]
 8013cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013cee:	443b      	add	r3, r7
 8013cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8013cf2:	e767      	b.n	8013bc4 <_vfiprintf_r+0x94>
 8013cf4:	fb0c 3202 	mla	r2, ip, r2, r3
 8013cf8:	460c      	mov	r4, r1
 8013cfa:	2001      	movs	r0, #1
 8013cfc:	e7a5      	b.n	8013c4a <_vfiprintf_r+0x11a>
 8013cfe:	2300      	movs	r3, #0
 8013d00:	3401      	adds	r4, #1
 8013d02:	9305      	str	r3, [sp, #20]
 8013d04:	4619      	mov	r1, r3
 8013d06:	f04f 0c0a 	mov.w	ip, #10
 8013d0a:	4620      	mov	r0, r4
 8013d0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d10:	3a30      	subs	r2, #48	; 0x30
 8013d12:	2a09      	cmp	r2, #9
 8013d14:	d903      	bls.n	8013d1e <_vfiprintf_r+0x1ee>
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d0c5      	beq.n	8013ca6 <_vfiprintf_r+0x176>
 8013d1a:	9105      	str	r1, [sp, #20]
 8013d1c:	e7c3      	b.n	8013ca6 <_vfiprintf_r+0x176>
 8013d1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013d22:	4604      	mov	r4, r0
 8013d24:	2301      	movs	r3, #1
 8013d26:	e7f0      	b.n	8013d0a <_vfiprintf_r+0x1da>
 8013d28:	ab03      	add	r3, sp, #12
 8013d2a:	9300      	str	r3, [sp, #0]
 8013d2c:	462a      	mov	r2, r5
 8013d2e:	4b16      	ldr	r3, [pc, #88]	; (8013d88 <_vfiprintf_r+0x258>)
 8013d30:	a904      	add	r1, sp, #16
 8013d32:	4630      	mov	r0, r6
 8013d34:	f3af 8000 	nop.w
 8013d38:	4607      	mov	r7, r0
 8013d3a:	1c78      	adds	r0, r7, #1
 8013d3c:	d1d6      	bne.n	8013cec <_vfiprintf_r+0x1bc>
 8013d3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013d40:	07d9      	lsls	r1, r3, #31
 8013d42:	d405      	bmi.n	8013d50 <_vfiprintf_r+0x220>
 8013d44:	89ab      	ldrh	r3, [r5, #12]
 8013d46:	059a      	lsls	r2, r3, #22
 8013d48:	d402      	bmi.n	8013d50 <_vfiprintf_r+0x220>
 8013d4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013d4c:	f7ff fc5b 	bl	8013606 <__retarget_lock_release_recursive>
 8013d50:	89ab      	ldrh	r3, [r5, #12]
 8013d52:	065b      	lsls	r3, r3, #25
 8013d54:	f53f af12 	bmi.w	8013b7c <_vfiprintf_r+0x4c>
 8013d58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013d5a:	e711      	b.n	8013b80 <_vfiprintf_r+0x50>
 8013d5c:	ab03      	add	r3, sp, #12
 8013d5e:	9300      	str	r3, [sp, #0]
 8013d60:	462a      	mov	r2, r5
 8013d62:	4b09      	ldr	r3, [pc, #36]	; (8013d88 <_vfiprintf_r+0x258>)
 8013d64:	a904      	add	r1, sp, #16
 8013d66:	4630      	mov	r0, r6
 8013d68:	f000 f880 	bl	8013e6c <_printf_i>
 8013d6c:	e7e4      	b.n	8013d38 <_vfiprintf_r+0x208>
 8013d6e:	bf00      	nop
 8013d70:	08016818 	.word	0x08016818
 8013d74:	08016838 	.word	0x08016838
 8013d78:	080167f8 	.word	0x080167f8
 8013d7c:	08016858 	.word	0x08016858
 8013d80:	08016862 	.word	0x08016862
 8013d84:	00000000 	.word	0x00000000
 8013d88:	08013b0b 	.word	0x08013b0b
 8013d8c:	0801685e 	.word	0x0801685e

08013d90 <_printf_common>:
 8013d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d94:	4616      	mov	r6, r2
 8013d96:	4699      	mov	r9, r3
 8013d98:	688a      	ldr	r2, [r1, #8]
 8013d9a:	690b      	ldr	r3, [r1, #16]
 8013d9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013da0:	4293      	cmp	r3, r2
 8013da2:	bfb8      	it	lt
 8013da4:	4613      	movlt	r3, r2
 8013da6:	6033      	str	r3, [r6, #0]
 8013da8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013dac:	4607      	mov	r7, r0
 8013dae:	460c      	mov	r4, r1
 8013db0:	b10a      	cbz	r2, 8013db6 <_printf_common+0x26>
 8013db2:	3301      	adds	r3, #1
 8013db4:	6033      	str	r3, [r6, #0]
 8013db6:	6823      	ldr	r3, [r4, #0]
 8013db8:	0699      	lsls	r1, r3, #26
 8013dba:	bf42      	ittt	mi
 8013dbc:	6833      	ldrmi	r3, [r6, #0]
 8013dbe:	3302      	addmi	r3, #2
 8013dc0:	6033      	strmi	r3, [r6, #0]
 8013dc2:	6825      	ldr	r5, [r4, #0]
 8013dc4:	f015 0506 	ands.w	r5, r5, #6
 8013dc8:	d106      	bne.n	8013dd8 <_printf_common+0x48>
 8013dca:	f104 0a19 	add.w	sl, r4, #25
 8013dce:	68e3      	ldr	r3, [r4, #12]
 8013dd0:	6832      	ldr	r2, [r6, #0]
 8013dd2:	1a9b      	subs	r3, r3, r2
 8013dd4:	42ab      	cmp	r3, r5
 8013dd6:	dc26      	bgt.n	8013e26 <_printf_common+0x96>
 8013dd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013ddc:	1e13      	subs	r3, r2, #0
 8013dde:	6822      	ldr	r2, [r4, #0]
 8013de0:	bf18      	it	ne
 8013de2:	2301      	movne	r3, #1
 8013de4:	0692      	lsls	r2, r2, #26
 8013de6:	d42b      	bmi.n	8013e40 <_printf_common+0xb0>
 8013de8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013dec:	4649      	mov	r1, r9
 8013dee:	4638      	mov	r0, r7
 8013df0:	47c0      	blx	r8
 8013df2:	3001      	adds	r0, #1
 8013df4:	d01e      	beq.n	8013e34 <_printf_common+0xa4>
 8013df6:	6823      	ldr	r3, [r4, #0]
 8013df8:	68e5      	ldr	r5, [r4, #12]
 8013dfa:	6832      	ldr	r2, [r6, #0]
 8013dfc:	f003 0306 	and.w	r3, r3, #6
 8013e00:	2b04      	cmp	r3, #4
 8013e02:	bf08      	it	eq
 8013e04:	1aad      	subeq	r5, r5, r2
 8013e06:	68a3      	ldr	r3, [r4, #8]
 8013e08:	6922      	ldr	r2, [r4, #16]
 8013e0a:	bf0c      	ite	eq
 8013e0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013e10:	2500      	movne	r5, #0
 8013e12:	4293      	cmp	r3, r2
 8013e14:	bfc4      	itt	gt
 8013e16:	1a9b      	subgt	r3, r3, r2
 8013e18:	18ed      	addgt	r5, r5, r3
 8013e1a:	2600      	movs	r6, #0
 8013e1c:	341a      	adds	r4, #26
 8013e1e:	42b5      	cmp	r5, r6
 8013e20:	d11a      	bne.n	8013e58 <_printf_common+0xc8>
 8013e22:	2000      	movs	r0, #0
 8013e24:	e008      	b.n	8013e38 <_printf_common+0xa8>
 8013e26:	2301      	movs	r3, #1
 8013e28:	4652      	mov	r2, sl
 8013e2a:	4649      	mov	r1, r9
 8013e2c:	4638      	mov	r0, r7
 8013e2e:	47c0      	blx	r8
 8013e30:	3001      	adds	r0, #1
 8013e32:	d103      	bne.n	8013e3c <_printf_common+0xac>
 8013e34:	f04f 30ff 	mov.w	r0, #4294967295
 8013e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e3c:	3501      	adds	r5, #1
 8013e3e:	e7c6      	b.n	8013dce <_printf_common+0x3e>
 8013e40:	18e1      	adds	r1, r4, r3
 8013e42:	1c5a      	adds	r2, r3, #1
 8013e44:	2030      	movs	r0, #48	; 0x30
 8013e46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013e4a:	4422      	add	r2, r4
 8013e4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013e50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013e54:	3302      	adds	r3, #2
 8013e56:	e7c7      	b.n	8013de8 <_printf_common+0x58>
 8013e58:	2301      	movs	r3, #1
 8013e5a:	4622      	mov	r2, r4
 8013e5c:	4649      	mov	r1, r9
 8013e5e:	4638      	mov	r0, r7
 8013e60:	47c0      	blx	r8
 8013e62:	3001      	adds	r0, #1
 8013e64:	d0e6      	beq.n	8013e34 <_printf_common+0xa4>
 8013e66:	3601      	adds	r6, #1
 8013e68:	e7d9      	b.n	8013e1e <_printf_common+0x8e>
	...

08013e6c <_printf_i>:
 8013e6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013e70:	460c      	mov	r4, r1
 8013e72:	4691      	mov	r9, r2
 8013e74:	7e27      	ldrb	r7, [r4, #24]
 8013e76:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013e78:	2f78      	cmp	r7, #120	; 0x78
 8013e7a:	4680      	mov	r8, r0
 8013e7c:	469a      	mov	sl, r3
 8013e7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013e82:	d807      	bhi.n	8013e94 <_printf_i+0x28>
 8013e84:	2f62      	cmp	r7, #98	; 0x62
 8013e86:	d80a      	bhi.n	8013e9e <_printf_i+0x32>
 8013e88:	2f00      	cmp	r7, #0
 8013e8a:	f000 80d8 	beq.w	801403e <_printf_i+0x1d2>
 8013e8e:	2f58      	cmp	r7, #88	; 0x58
 8013e90:	f000 80a3 	beq.w	8013fda <_printf_i+0x16e>
 8013e94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013e98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013e9c:	e03a      	b.n	8013f14 <_printf_i+0xa8>
 8013e9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013ea2:	2b15      	cmp	r3, #21
 8013ea4:	d8f6      	bhi.n	8013e94 <_printf_i+0x28>
 8013ea6:	a001      	add	r0, pc, #4	; (adr r0, 8013eac <_printf_i+0x40>)
 8013ea8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8013eac:	08013f05 	.word	0x08013f05
 8013eb0:	08013f19 	.word	0x08013f19
 8013eb4:	08013e95 	.word	0x08013e95
 8013eb8:	08013e95 	.word	0x08013e95
 8013ebc:	08013e95 	.word	0x08013e95
 8013ec0:	08013e95 	.word	0x08013e95
 8013ec4:	08013f19 	.word	0x08013f19
 8013ec8:	08013e95 	.word	0x08013e95
 8013ecc:	08013e95 	.word	0x08013e95
 8013ed0:	08013e95 	.word	0x08013e95
 8013ed4:	08013e95 	.word	0x08013e95
 8013ed8:	08014025 	.word	0x08014025
 8013edc:	08013f49 	.word	0x08013f49
 8013ee0:	08014007 	.word	0x08014007
 8013ee4:	08013e95 	.word	0x08013e95
 8013ee8:	08013e95 	.word	0x08013e95
 8013eec:	08014047 	.word	0x08014047
 8013ef0:	08013e95 	.word	0x08013e95
 8013ef4:	08013f49 	.word	0x08013f49
 8013ef8:	08013e95 	.word	0x08013e95
 8013efc:	08013e95 	.word	0x08013e95
 8013f00:	0801400f 	.word	0x0801400f
 8013f04:	680b      	ldr	r3, [r1, #0]
 8013f06:	1d1a      	adds	r2, r3, #4
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	600a      	str	r2, [r1, #0]
 8013f0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013f10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013f14:	2301      	movs	r3, #1
 8013f16:	e0a3      	b.n	8014060 <_printf_i+0x1f4>
 8013f18:	6825      	ldr	r5, [r4, #0]
 8013f1a:	6808      	ldr	r0, [r1, #0]
 8013f1c:	062e      	lsls	r6, r5, #24
 8013f1e:	f100 0304 	add.w	r3, r0, #4
 8013f22:	d50a      	bpl.n	8013f3a <_printf_i+0xce>
 8013f24:	6805      	ldr	r5, [r0, #0]
 8013f26:	600b      	str	r3, [r1, #0]
 8013f28:	2d00      	cmp	r5, #0
 8013f2a:	da03      	bge.n	8013f34 <_printf_i+0xc8>
 8013f2c:	232d      	movs	r3, #45	; 0x2d
 8013f2e:	426d      	negs	r5, r5
 8013f30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013f34:	485e      	ldr	r0, [pc, #376]	; (80140b0 <_printf_i+0x244>)
 8013f36:	230a      	movs	r3, #10
 8013f38:	e019      	b.n	8013f6e <_printf_i+0x102>
 8013f3a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8013f3e:	6805      	ldr	r5, [r0, #0]
 8013f40:	600b      	str	r3, [r1, #0]
 8013f42:	bf18      	it	ne
 8013f44:	b22d      	sxthne	r5, r5
 8013f46:	e7ef      	b.n	8013f28 <_printf_i+0xbc>
 8013f48:	680b      	ldr	r3, [r1, #0]
 8013f4a:	6825      	ldr	r5, [r4, #0]
 8013f4c:	1d18      	adds	r0, r3, #4
 8013f4e:	6008      	str	r0, [r1, #0]
 8013f50:	0628      	lsls	r0, r5, #24
 8013f52:	d501      	bpl.n	8013f58 <_printf_i+0xec>
 8013f54:	681d      	ldr	r5, [r3, #0]
 8013f56:	e002      	b.n	8013f5e <_printf_i+0xf2>
 8013f58:	0669      	lsls	r1, r5, #25
 8013f5a:	d5fb      	bpl.n	8013f54 <_printf_i+0xe8>
 8013f5c:	881d      	ldrh	r5, [r3, #0]
 8013f5e:	4854      	ldr	r0, [pc, #336]	; (80140b0 <_printf_i+0x244>)
 8013f60:	2f6f      	cmp	r7, #111	; 0x6f
 8013f62:	bf0c      	ite	eq
 8013f64:	2308      	moveq	r3, #8
 8013f66:	230a      	movne	r3, #10
 8013f68:	2100      	movs	r1, #0
 8013f6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013f6e:	6866      	ldr	r6, [r4, #4]
 8013f70:	60a6      	str	r6, [r4, #8]
 8013f72:	2e00      	cmp	r6, #0
 8013f74:	bfa2      	ittt	ge
 8013f76:	6821      	ldrge	r1, [r4, #0]
 8013f78:	f021 0104 	bicge.w	r1, r1, #4
 8013f7c:	6021      	strge	r1, [r4, #0]
 8013f7e:	b90d      	cbnz	r5, 8013f84 <_printf_i+0x118>
 8013f80:	2e00      	cmp	r6, #0
 8013f82:	d04d      	beq.n	8014020 <_printf_i+0x1b4>
 8013f84:	4616      	mov	r6, r2
 8013f86:	fbb5 f1f3 	udiv	r1, r5, r3
 8013f8a:	fb03 5711 	mls	r7, r3, r1, r5
 8013f8e:	5dc7      	ldrb	r7, [r0, r7]
 8013f90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013f94:	462f      	mov	r7, r5
 8013f96:	42bb      	cmp	r3, r7
 8013f98:	460d      	mov	r5, r1
 8013f9a:	d9f4      	bls.n	8013f86 <_printf_i+0x11a>
 8013f9c:	2b08      	cmp	r3, #8
 8013f9e:	d10b      	bne.n	8013fb8 <_printf_i+0x14c>
 8013fa0:	6823      	ldr	r3, [r4, #0]
 8013fa2:	07df      	lsls	r7, r3, #31
 8013fa4:	d508      	bpl.n	8013fb8 <_printf_i+0x14c>
 8013fa6:	6923      	ldr	r3, [r4, #16]
 8013fa8:	6861      	ldr	r1, [r4, #4]
 8013faa:	4299      	cmp	r1, r3
 8013fac:	bfde      	ittt	le
 8013fae:	2330      	movle	r3, #48	; 0x30
 8013fb0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013fb4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013fb8:	1b92      	subs	r2, r2, r6
 8013fba:	6122      	str	r2, [r4, #16]
 8013fbc:	f8cd a000 	str.w	sl, [sp]
 8013fc0:	464b      	mov	r3, r9
 8013fc2:	aa03      	add	r2, sp, #12
 8013fc4:	4621      	mov	r1, r4
 8013fc6:	4640      	mov	r0, r8
 8013fc8:	f7ff fee2 	bl	8013d90 <_printf_common>
 8013fcc:	3001      	adds	r0, #1
 8013fce:	d14c      	bne.n	801406a <_printf_i+0x1fe>
 8013fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8013fd4:	b004      	add	sp, #16
 8013fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fda:	4835      	ldr	r0, [pc, #212]	; (80140b0 <_printf_i+0x244>)
 8013fdc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013fe0:	6823      	ldr	r3, [r4, #0]
 8013fe2:	680e      	ldr	r6, [r1, #0]
 8013fe4:	061f      	lsls	r7, r3, #24
 8013fe6:	f856 5b04 	ldr.w	r5, [r6], #4
 8013fea:	600e      	str	r6, [r1, #0]
 8013fec:	d514      	bpl.n	8014018 <_printf_i+0x1ac>
 8013fee:	07d9      	lsls	r1, r3, #31
 8013ff0:	bf44      	itt	mi
 8013ff2:	f043 0320 	orrmi.w	r3, r3, #32
 8013ff6:	6023      	strmi	r3, [r4, #0]
 8013ff8:	b91d      	cbnz	r5, 8014002 <_printf_i+0x196>
 8013ffa:	6823      	ldr	r3, [r4, #0]
 8013ffc:	f023 0320 	bic.w	r3, r3, #32
 8014000:	6023      	str	r3, [r4, #0]
 8014002:	2310      	movs	r3, #16
 8014004:	e7b0      	b.n	8013f68 <_printf_i+0xfc>
 8014006:	6823      	ldr	r3, [r4, #0]
 8014008:	f043 0320 	orr.w	r3, r3, #32
 801400c:	6023      	str	r3, [r4, #0]
 801400e:	2378      	movs	r3, #120	; 0x78
 8014010:	4828      	ldr	r0, [pc, #160]	; (80140b4 <_printf_i+0x248>)
 8014012:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014016:	e7e3      	b.n	8013fe0 <_printf_i+0x174>
 8014018:	065e      	lsls	r6, r3, #25
 801401a:	bf48      	it	mi
 801401c:	b2ad      	uxthmi	r5, r5
 801401e:	e7e6      	b.n	8013fee <_printf_i+0x182>
 8014020:	4616      	mov	r6, r2
 8014022:	e7bb      	b.n	8013f9c <_printf_i+0x130>
 8014024:	680b      	ldr	r3, [r1, #0]
 8014026:	6826      	ldr	r6, [r4, #0]
 8014028:	6960      	ldr	r0, [r4, #20]
 801402a:	1d1d      	adds	r5, r3, #4
 801402c:	600d      	str	r5, [r1, #0]
 801402e:	0635      	lsls	r5, r6, #24
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	d501      	bpl.n	8014038 <_printf_i+0x1cc>
 8014034:	6018      	str	r0, [r3, #0]
 8014036:	e002      	b.n	801403e <_printf_i+0x1d2>
 8014038:	0671      	lsls	r1, r6, #25
 801403a:	d5fb      	bpl.n	8014034 <_printf_i+0x1c8>
 801403c:	8018      	strh	r0, [r3, #0]
 801403e:	2300      	movs	r3, #0
 8014040:	6123      	str	r3, [r4, #16]
 8014042:	4616      	mov	r6, r2
 8014044:	e7ba      	b.n	8013fbc <_printf_i+0x150>
 8014046:	680b      	ldr	r3, [r1, #0]
 8014048:	1d1a      	adds	r2, r3, #4
 801404a:	600a      	str	r2, [r1, #0]
 801404c:	681e      	ldr	r6, [r3, #0]
 801404e:	6862      	ldr	r2, [r4, #4]
 8014050:	2100      	movs	r1, #0
 8014052:	4630      	mov	r0, r6
 8014054:	f7ec f894 	bl	8000180 <memchr>
 8014058:	b108      	cbz	r0, 801405e <_printf_i+0x1f2>
 801405a:	1b80      	subs	r0, r0, r6
 801405c:	6060      	str	r0, [r4, #4]
 801405e:	6863      	ldr	r3, [r4, #4]
 8014060:	6123      	str	r3, [r4, #16]
 8014062:	2300      	movs	r3, #0
 8014064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014068:	e7a8      	b.n	8013fbc <_printf_i+0x150>
 801406a:	6923      	ldr	r3, [r4, #16]
 801406c:	4632      	mov	r2, r6
 801406e:	4649      	mov	r1, r9
 8014070:	4640      	mov	r0, r8
 8014072:	47d0      	blx	sl
 8014074:	3001      	adds	r0, #1
 8014076:	d0ab      	beq.n	8013fd0 <_printf_i+0x164>
 8014078:	6823      	ldr	r3, [r4, #0]
 801407a:	079b      	lsls	r3, r3, #30
 801407c:	d413      	bmi.n	80140a6 <_printf_i+0x23a>
 801407e:	68e0      	ldr	r0, [r4, #12]
 8014080:	9b03      	ldr	r3, [sp, #12]
 8014082:	4298      	cmp	r0, r3
 8014084:	bfb8      	it	lt
 8014086:	4618      	movlt	r0, r3
 8014088:	e7a4      	b.n	8013fd4 <_printf_i+0x168>
 801408a:	2301      	movs	r3, #1
 801408c:	4632      	mov	r2, r6
 801408e:	4649      	mov	r1, r9
 8014090:	4640      	mov	r0, r8
 8014092:	47d0      	blx	sl
 8014094:	3001      	adds	r0, #1
 8014096:	d09b      	beq.n	8013fd0 <_printf_i+0x164>
 8014098:	3501      	adds	r5, #1
 801409a:	68e3      	ldr	r3, [r4, #12]
 801409c:	9903      	ldr	r1, [sp, #12]
 801409e:	1a5b      	subs	r3, r3, r1
 80140a0:	42ab      	cmp	r3, r5
 80140a2:	dcf2      	bgt.n	801408a <_printf_i+0x21e>
 80140a4:	e7eb      	b.n	801407e <_printf_i+0x212>
 80140a6:	2500      	movs	r5, #0
 80140a8:	f104 0619 	add.w	r6, r4, #25
 80140ac:	e7f5      	b.n	801409a <_printf_i+0x22e>
 80140ae:	bf00      	nop
 80140b0:	08016869 	.word	0x08016869
 80140b4:	0801687a 	.word	0x0801687a

080140b8 <_sbrk_r>:
 80140b8:	b538      	push	{r3, r4, r5, lr}
 80140ba:	4d06      	ldr	r5, [pc, #24]	; (80140d4 <_sbrk_r+0x1c>)
 80140bc:	2300      	movs	r3, #0
 80140be:	4604      	mov	r4, r0
 80140c0:	4608      	mov	r0, r1
 80140c2:	602b      	str	r3, [r5, #0]
 80140c4:	f7ee f8c2 	bl	800224c <_sbrk>
 80140c8:	1c43      	adds	r3, r0, #1
 80140ca:	d102      	bne.n	80140d2 <_sbrk_r+0x1a>
 80140cc:	682b      	ldr	r3, [r5, #0]
 80140ce:	b103      	cbz	r3, 80140d2 <_sbrk_r+0x1a>
 80140d0:	6023      	str	r3, [r4, #0]
 80140d2:	bd38      	pop	{r3, r4, r5, pc}
 80140d4:	20000c8c 	.word	0x20000c8c

080140d8 <__sread>:
 80140d8:	b510      	push	{r4, lr}
 80140da:	460c      	mov	r4, r1
 80140dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140e0:	f000 f8e0 	bl	80142a4 <_read_r>
 80140e4:	2800      	cmp	r0, #0
 80140e6:	bfab      	itete	ge
 80140e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80140ea:	89a3      	ldrhlt	r3, [r4, #12]
 80140ec:	181b      	addge	r3, r3, r0
 80140ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80140f2:	bfac      	ite	ge
 80140f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80140f6:	81a3      	strhlt	r3, [r4, #12]
 80140f8:	bd10      	pop	{r4, pc}

080140fa <__swrite>:
 80140fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140fe:	461f      	mov	r7, r3
 8014100:	898b      	ldrh	r3, [r1, #12]
 8014102:	05db      	lsls	r3, r3, #23
 8014104:	4605      	mov	r5, r0
 8014106:	460c      	mov	r4, r1
 8014108:	4616      	mov	r6, r2
 801410a:	d505      	bpl.n	8014118 <__swrite+0x1e>
 801410c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014110:	2302      	movs	r3, #2
 8014112:	2200      	movs	r2, #0
 8014114:	f000 f868 	bl	80141e8 <_lseek_r>
 8014118:	89a3      	ldrh	r3, [r4, #12]
 801411a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801411e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014122:	81a3      	strh	r3, [r4, #12]
 8014124:	4632      	mov	r2, r6
 8014126:	463b      	mov	r3, r7
 8014128:	4628      	mov	r0, r5
 801412a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801412e:	f000 b817 	b.w	8014160 <_write_r>

08014132 <__sseek>:
 8014132:	b510      	push	{r4, lr}
 8014134:	460c      	mov	r4, r1
 8014136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801413a:	f000 f855 	bl	80141e8 <_lseek_r>
 801413e:	1c43      	adds	r3, r0, #1
 8014140:	89a3      	ldrh	r3, [r4, #12]
 8014142:	bf15      	itete	ne
 8014144:	6560      	strne	r0, [r4, #84]	; 0x54
 8014146:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801414a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801414e:	81a3      	strheq	r3, [r4, #12]
 8014150:	bf18      	it	ne
 8014152:	81a3      	strhne	r3, [r4, #12]
 8014154:	bd10      	pop	{r4, pc}

08014156 <__sclose>:
 8014156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801415a:	f000 b813 	b.w	8014184 <_close_r>
	...

08014160 <_write_r>:
 8014160:	b538      	push	{r3, r4, r5, lr}
 8014162:	4d07      	ldr	r5, [pc, #28]	; (8014180 <_write_r+0x20>)
 8014164:	4604      	mov	r4, r0
 8014166:	4608      	mov	r0, r1
 8014168:	4611      	mov	r1, r2
 801416a:	2200      	movs	r2, #0
 801416c:	602a      	str	r2, [r5, #0]
 801416e:	461a      	mov	r2, r3
 8014170:	f7fd fe3a 	bl	8011de8 <_write>
 8014174:	1c43      	adds	r3, r0, #1
 8014176:	d102      	bne.n	801417e <_write_r+0x1e>
 8014178:	682b      	ldr	r3, [r5, #0]
 801417a:	b103      	cbz	r3, 801417e <_write_r+0x1e>
 801417c:	6023      	str	r3, [r4, #0]
 801417e:	bd38      	pop	{r3, r4, r5, pc}
 8014180:	20000c8c 	.word	0x20000c8c

08014184 <_close_r>:
 8014184:	b538      	push	{r3, r4, r5, lr}
 8014186:	4d06      	ldr	r5, [pc, #24]	; (80141a0 <_close_r+0x1c>)
 8014188:	2300      	movs	r3, #0
 801418a:	4604      	mov	r4, r0
 801418c:	4608      	mov	r0, r1
 801418e:	602b      	str	r3, [r5, #0]
 8014190:	f7ee f84e 	bl	8002230 <_close>
 8014194:	1c43      	adds	r3, r0, #1
 8014196:	d102      	bne.n	801419e <_close_r+0x1a>
 8014198:	682b      	ldr	r3, [r5, #0]
 801419a:	b103      	cbz	r3, 801419e <_close_r+0x1a>
 801419c:	6023      	str	r3, [r4, #0]
 801419e:	bd38      	pop	{r3, r4, r5, pc}
 80141a0:	20000c8c 	.word	0x20000c8c

080141a4 <_fstat_r>:
 80141a4:	b538      	push	{r3, r4, r5, lr}
 80141a6:	4d07      	ldr	r5, [pc, #28]	; (80141c4 <_fstat_r+0x20>)
 80141a8:	2300      	movs	r3, #0
 80141aa:	4604      	mov	r4, r0
 80141ac:	4608      	mov	r0, r1
 80141ae:	4611      	mov	r1, r2
 80141b0:	602b      	str	r3, [r5, #0]
 80141b2:	f7ee f841 	bl	8002238 <_fstat>
 80141b6:	1c43      	adds	r3, r0, #1
 80141b8:	d102      	bne.n	80141c0 <_fstat_r+0x1c>
 80141ba:	682b      	ldr	r3, [r5, #0]
 80141bc:	b103      	cbz	r3, 80141c0 <_fstat_r+0x1c>
 80141be:	6023      	str	r3, [r4, #0]
 80141c0:	bd38      	pop	{r3, r4, r5, pc}
 80141c2:	bf00      	nop
 80141c4:	20000c8c 	.word	0x20000c8c

080141c8 <_isatty_r>:
 80141c8:	b538      	push	{r3, r4, r5, lr}
 80141ca:	4d06      	ldr	r5, [pc, #24]	; (80141e4 <_isatty_r+0x1c>)
 80141cc:	2300      	movs	r3, #0
 80141ce:	4604      	mov	r4, r0
 80141d0:	4608      	mov	r0, r1
 80141d2:	602b      	str	r3, [r5, #0]
 80141d4:	f7ee f836 	bl	8002244 <_isatty>
 80141d8:	1c43      	adds	r3, r0, #1
 80141da:	d102      	bne.n	80141e2 <_isatty_r+0x1a>
 80141dc:	682b      	ldr	r3, [r5, #0]
 80141de:	b103      	cbz	r3, 80141e2 <_isatty_r+0x1a>
 80141e0:	6023      	str	r3, [r4, #0]
 80141e2:	bd38      	pop	{r3, r4, r5, pc}
 80141e4:	20000c8c 	.word	0x20000c8c

080141e8 <_lseek_r>:
 80141e8:	b538      	push	{r3, r4, r5, lr}
 80141ea:	4d07      	ldr	r5, [pc, #28]	; (8014208 <_lseek_r+0x20>)
 80141ec:	4604      	mov	r4, r0
 80141ee:	4608      	mov	r0, r1
 80141f0:	4611      	mov	r1, r2
 80141f2:	2200      	movs	r2, #0
 80141f4:	602a      	str	r2, [r5, #0]
 80141f6:	461a      	mov	r2, r3
 80141f8:	f7ee f826 	bl	8002248 <_lseek>
 80141fc:	1c43      	adds	r3, r0, #1
 80141fe:	d102      	bne.n	8014206 <_lseek_r+0x1e>
 8014200:	682b      	ldr	r3, [r5, #0]
 8014202:	b103      	cbz	r3, 8014206 <_lseek_r+0x1e>
 8014204:	6023      	str	r3, [r4, #0]
 8014206:	bd38      	pop	{r3, r4, r5, pc}
 8014208:	20000c8c 	.word	0x20000c8c

0801420c <memmove>:
 801420c:	4288      	cmp	r0, r1
 801420e:	b510      	push	{r4, lr}
 8014210:	eb01 0402 	add.w	r4, r1, r2
 8014214:	d902      	bls.n	801421c <memmove+0x10>
 8014216:	4284      	cmp	r4, r0
 8014218:	4623      	mov	r3, r4
 801421a:	d807      	bhi.n	801422c <memmove+0x20>
 801421c:	1e43      	subs	r3, r0, #1
 801421e:	42a1      	cmp	r1, r4
 8014220:	d008      	beq.n	8014234 <memmove+0x28>
 8014222:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014226:	f803 2f01 	strb.w	r2, [r3, #1]!
 801422a:	e7f8      	b.n	801421e <memmove+0x12>
 801422c:	4402      	add	r2, r0
 801422e:	4601      	mov	r1, r0
 8014230:	428a      	cmp	r2, r1
 8014232:	d100      	bne.n	8014236 <memmove+0x2a>
 8014234:	bd10      	pop	{r4, pc}
 8014236:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801423a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801423e:	e7f7      	b.n	8014230 <memmove+0x24>

08014240 <__malloc_lock>:
 8014240:	4801      	ldr	r0, [pc, #4]	; (8014248 <__malloc_lock+0x8>)
 8014242:	f7ff b9df 	b.w	8013604 <__retarget_lock_acquire_recursive>
 8014246:	bf00      	nop
 8014248:	20000c84 	.word	0x20000c84

0801424c <__malloc_unlock>:
 801424c:	4801      	ldr	r0, [pc, #4]	; (8014254 <__malloc_unlock+0x8>)
 801424e:	f7ff b9da 	b.w	8013606 <__retarget_lock_release_recursive>
 8014252:	bf00      	nop
 8014254:	20000c84 	.word	0x20000c84

08014258 <_realloc_r>:
 8014258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801425a:	4607      	mov	r7, r0
 801425c:	4614      	mov	r4, r2
 801425e:	460e      	mov	r6, r1
 8014260:	b921      	cbnz	r1, 801426c <_realloc_r+0x14>
 8014262:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014266:	4611      	mov	r1, r2
 8014268:	f7ff ba82 	b.w	8013770 <_malloc_r>
 801426c:	b922      	cbnz	r2, 8014278 <_realloc_r+0x20>
 801426e:	f7ff fa2f 	bl	80136d0 <_free_r>
 8014272:	4625      	mov	r5, r4
 8014274:	4628      	mov	r0, r5
 8014276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014278:	f000 f826 	bl	80142c8 <_malloc_usable_size_r>
 801427c:	42a0      	cmp	r0, r4
 801427e:	d20f      	bcs.n	80142a0 <_realloc_r+0x48>
 8014280:	4621      	mov	r1, r4
 8014282:	4638      	mov	r0, r7
 8014284:	f7ff fa74 	bl	8013770 <_malloc_r>
 8014288:	4605      	mov	r5, r0
 801428a:	2800      	cmp	r0, #0
 801428c:	d0f2      	beq.n	8014274 <_realloc_r+0x1c>
 801428e:	4631      	mov	r1, r6
 8014290:	4622      	mov	r2, r4
 8014292:	f7fe fe69 	bl	8012f68 <memcpy>
 8014296:	4631      	mov	r1, r6
 8014298:	4638      	mov	r0, r7
 801429a:	f7ff fa19 	bl	80136d0 <_free_r>
 801429e:	e7e9      	b.n	8014274 <_realloc_r+0x1c>
 80142a0:	4635      	mov	r5, r6
 80142a2:	e7e7      	b.n	8014274 <_realloc_r+0x1c>

080142a4 <_read_r>:
 80142a4:	b538      	push	{r3, r4, r5, lr}
 80142a6:	4d07      	ldr	r5, [pc, #28]	; (80142c4 <_read_r+0x20>)
 80142a8:	4604      	mov	r4, r0
 80142aa:	4608      	mov	r0, r1
 80142ac:	4611      	mov	r1, r2
 80142ae:	2200      	movs	r2, #0
 80142b0:	602a      	str	r2, [r5, #0]
 80142b2:	461a      	mov	r2, r3
 80142b4:	f7ed ffae 	bl	8002214 <_read>
 80142b8:	1c43      	adds	r3, r0, #1
 80142ba:	d102      	bne.n	80142c2 <_read_r+0x1e>
 80142bc:	682b      	ldr	r3, [r5, #0]
 80142be:	b103      	cbz	r3, 80142c2 <_read_r+0x1e>
 80142c0:	6023      	str	r3, [r4, #0]
 80142c2:	bd38      	pop	{r3, r4, r5, pc}
 80142c4:	20000c8c 	.word	0x20000c8c

080142c8 <_malloc_usable_size_r>:
 80142c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80142cc:	1f18      	subs	r0, r3, #4
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	bfbc      	itt	lt
 80142d2:	580b      	ldrlt	r3, [r1, r0]
 80142d4:	18c0      	addlt	r0, r0, r3
 80142d6:	4770      	bx	lr

080142d8 <floor>:
 80142d8:	ec51 0b10 	vmov	r0, r1, d0
 80142dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142e0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80142e4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80142e8:	2e13      	cmp	r6, #19
 80142ea:	ee10 5a10 	vmov	r5, s0
 80142ee:	ee10 8a10 	vmov	r8, s0
 80142f2:	460c      	mov	r4, r1
 80142f4:	dc32      	bgt.n	801435c <floor+0x84>
 80142f6:	2e00      	cmp	r6, #0
 80142f8:	da14      	bge.n	8014324 <floor+0x4c>
 80142fa:	a333      	add	r3, pc, #204	; (adr r3, 80143c8 <floor+0xf0>)
 80142fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014300:	f7eb ff94 	bl	800022c <__adddf3>
 8014304:	2200      	movs	r2, #0
 8014306:	2300      	movs	r3, #0
 8014308:	f7ec f9c4 	bl	8000694 <__aeabi_dcmpgt>
 801430c:	b138      	cbz	r0, 801431e <floor+0x46>
 801430e:	2c00      	cmp	r4, #0
 8014310:	da57      	bge.n	80143c2 <floor+0xea>
 8014312:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8014316:	431d      	orrs	r5, r3
 8014318:	d001      	beq.n	801431e <floor+0x46>
 801431a:	4c2d      	ldr	r4, [pc, #180]	; (80143d0 <floor+0xf8>)
 801431c:	2500      	movs	r5, #0
 801431e:	4621      	mov	r1, r4
 8014320:	4628      	mov	r0, r5
 8014322:	e025      	b.n	8014370 <floor+0x98>
 8014324:	4f2b      	ldr	r7, [pc, #172]	; (80143d4 <floor+0xfc>)
 8014326:	4137      	asrs	r7, r6
 8014328:	ea01 0307 	and.w	r3, r1, r7
 801432c:	4303      	orrs	r3, r0
 801432e:	d01f      	beq.n	8014370 <floor+0x98>
 8014330:	a325      	add	r3, pc, #148	; (adr r3, 80143c8 <floor+0xf0>)
 8014332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014336:	f7eb ff79 	bl	800022c <__adddf3>
 801433a:	2200      	movs	r2, #0
 801433c:	2300      	movs	r3, #0
 801433e:	f7ec f9a9 	bl	8000694 <__aeabi_dcmpgt>
 8014342:	2800      	cmp	r0, #0
 8014344:	d0eb      	beq.n	801431e <floor+0x46>
 8014346:	2c00      	cmp	r4, #0
 8014348:	bfbe      	ittt	lt
 801434a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801434e:	fa43 f606 	asrlt.w	r6, r3, r6
 8014352:	19a4      	addlt	r4, r4, r6
 8014354:	ea24 0407 	bic.w	r4, r4, r7
 8014358:	2500      	movs	r5, #0
 801435a:	e7e0      	b.n	801431e <floor+0x46>
 801435c:	2e33      	cmp	r6, #51	; 0x33
 801435e:	dd0b      	ble.n	8014378 <floor+0xa0>
 8014360:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014364:	d104      	bne.n	8014370 <floor+0x98>
 8014366:	ee10 2a10 	vmov	r2, s0
 801436a:	460b      	mov	r3, r1
 801436c:	f7eb ff5e 	bl	800022c <__adddf3>
 8014370:	ec41 0b10 	vmov	d0, r0, r1
 8014374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014378:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801437c:	f04f 33ff 	mov.w	r3, #4294967295
 8014380:	fa23 f707 	lsr.w	r7, r3, r7
 8014384:	4207      	tst	r7, r0
 8014386:	d0f3      	beq.n	8014370 <floor+0x98>
 8014388:	a30f      	add	r3, pc, #60	; (adr r3, 80143c8 <floor+0xf0>)
 801438a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801438e:	f7eb ff4d 	bl	800022c <__adddf3>
 8014392:	2200      	movs	r2, #0
 8014394:	2300      	movs	r3, #0
 8014396:	f7ec f97d 	bl	8000694 <__aeabi_dcmpgt>
 801439a:	2800      	cmp	r0, #0
 801439c:	d0bf      	beq.n	801431e <floor+0x46>
 801439e:	2c00      	cmp	r4, #0
 80143a0:	da02      	bge.n	80143a8 <floor+0xd0>
 80143a2:	2e14      	cmp	r6, #20
 80143a4:	d103      	bne.n	80143ae <floor+0xd6>
 80143a6:	3401      	adds	r4, #1
 80143a8:	ea25 0507 	bic.w	r5, r5, r7
 80143ac:	e7b7      	b.n	801431e <floor+0x46>
 80143ae:	2301      	movs	r3, #1
 80143b0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80143b4:	fa03 f606 	lsl.w	r6, r3, r6
 80143b8:	4435      	add	r5, r6
 80143ba:	4545      	cmp	r5, r8
 80143bc:	bf38      	it	cc
 80143be:	18e4      	addcc	r4, r4, r3
 80143c0:	e7f2      	b.n	80143a8 <floor+0xd0>
 80143c2:	2500      	movs	r5, #0
 80143c4:	462c      	mov	r4, r5
 80143c6:	e7aa      	b.n	801431e <floor+0x46>
 80143c8:	8800759c 	.word	0x8800759c
 80143cc:	7e37e43c 	.word	0x7e37e43c
 80143d0:	bff00000 	.word	0xbff00000
 80143d4:	000fffff 	.word	0x000fffff

080143d8 <_init>:
 80143d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143da:	bf00      	nop
 80143dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143de:	bc08      	pop	{r3}
 80143e0:	469e      	mov	lr, r3
 80143e2:	4770      	bx	lr

080143e4 <_fini>:
 80143e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143e6:	bf00      	nop
 80143e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143ea:	bc08      	pop	{r3}
 80143ec:	469e      	mov	lr, r3
 80143ee:	4770      	bx	lr
